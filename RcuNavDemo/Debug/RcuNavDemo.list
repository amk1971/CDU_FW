
RcuNavDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aea0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a14  0800b030  0800b030  0000c030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba44  0800ba44  0000d078  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba44  0800ba44  0000ca44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba4c  0800ba4c  0000d078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba4c  0800ba4c  0000ca4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba50  0800ba50  0000ca50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800ba54  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d078  2**0
                  CONTENTS
 10 .bss          00004494  20000078  20000078  0000d078  2**2
                  ALLOC
 11 ._user_heap_stack 00000904  2000450c  2000450c  0000d078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019784  00000000  00000000  0000d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003910  00000000  00000000  0002682c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0002a140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024672  00000000  00000000  0002b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a430  00000000  00000000  0004fdaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7eae  00000000  00000000  0006a1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142088  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00001164  00000000  00000000  001420cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006218  00000000  00000000  00143230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00149448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b018 	.word	0x0800b018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800b018 	.word	0x0800b018

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_d2f>:
 800089c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008a4:	bf24      	itt	cs
 80008a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008ae:	d90d      	bls.n	80008cc <__aeabi_d2f+0x30>
 80008b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008d0:	d121      	bne.n	8000916 <__aeabi_d2f+0x7a>
 80008d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008d6:	bfbc      	itt	lt
 80008d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008dc:	4770      	bxlt	lr
 80008de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008e6:	f1c2 0218 	rsb	r2, r2, #24
 80008ea:	f1c2 0c20 	rsb	ip, r2, #32
 80008ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80008f2:	fa20 f002 	lsr.w	r0, r0, r2
 80008f6:	bf18      	it	ne
 80008f8:	f040 0001 	orrne.w	r0, r0, #1
 80008fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000904:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000908:	ea40 000c 	orr.w	r0, r0, ip
 800090c:	fa23 f302 	lsr.w	r3, r3, r2
 8000910:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000914:	e7cc      	b.n	80008b0 <__aeabi_d2f+0x14>
 8000916:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800091a:	d107      	bne.n	800092c <__aeabi_d2f+0x90>
 800091c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000920:	bf1e      	ittt	ne
 8000922:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000926:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800092a:	4770      	bxne	lr
 800092c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000930:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_uldivmod>:
 800093c:	b953      	cbnz	r3, 8000954 <__aeabi_uldivmod+0x18>
 800093e:	b94a      	cbnz	r2, 8000954 <__aeabi_uldivmod+0x18>
 8000940:	2900      	cmp	r1, #0
 8000942:	bf08      	it	eq
 8000944:	2800      	cmpeq	r0, #0
 8000946:	bf1c      	itt	ne
 8000948:	f04f 31ff 	movne.w	r1, #4294967295
 800094c:	f04f 30ff 	movne.w	r0, #4294967295
 8000950:	f000 b96a 	b.w	8000c28 <__aeabi_idiv0>
 8000954:	f1ad 0c08 	sub.w	ip, sp, #8
 8000958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800095c:	f000 f806 	bl	800096c <__udivmoddi4>
 8000960:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000968:	b004      	add	sp, #16
 800096a:	4770      	bx	lr

0800096c <__udivmoddi4>:
 800096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000970:	9d08      	ldr	r5, [sp, #32]
 8000972:	460c      	mov	r4, r1
 8000974:	2b00      	cmp	r3, #0
 8000976:	d14e      	bne.n	8000a16 <__udivmoddi4+0xaa>
 8000978:	4694      	mov	ip, r2
 800097a:	458c      	cmp	ip, r1
 800097c:	4686      	mov	lr, r0
 800097e:	fab2 f282 	clz	r2, r2
 8000982:	d962      	bls.n	8000a4a <__udivmoddi4+0xde>
 8000984:	b14a      	cbz	r2, 800099a <__udivmoddi4+0x2e>
 8000986:	f1c2 0320 	rsb	r3, r2, #32
 800098a:	4091      	lsls	r1, r2
 800098c:	fa20 f303 	lsr.w	r3, r0, r3
 8000990:	fa0c fc02 	lsl.w	ip, ip, r2
 8000994:	4319      	orrs	r1, r3
 8000996:	fa00 fe02 	lsl.w	lr, r0, r2
 800099a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099e:	fa1f f68c 	uxth.w	r6, ip
 80009a2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009aa:	fb07 1114 	mls	r1, r7, r4, r1
 80009ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b2:	fb04 f106 	mul.w	r1, r4, r6
 80009b6:	4299      	cmp	r1, r3
 80009b8:	d90a      	bls.n	80009d0 <__udivmoddi4+0x64>
 80009ba:	eb1c 0303 	adds.w	r3, ip, r3
 80009be:	f104 30ff 	add.w	r0, r4, #4294967295
 80009c2:	f080 8112 	bcs.w	8000bea <__udivmoddi4+0x27e>
 80009c6:	4299      	cmp	r1, r3
 80009c8:	f240 810f 	bls.w	8000bea <__udivmoddi4+0x27e>
 80009cc:	3c02      	subs	r4, #2
 80009ce:	4463      	add	r3, ip
 80009d0:	1a59      	subs	r1, r3, r1
 80009d2:	fa1f f38e 	uxth.w	r3, lr
 80009d6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009da:	fb07 1110 	mls	r1, r7, r0, r1
 80009de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e2:	fb00 f606 	mul.w	r6, r0, r6
 80009e6:	429e      	cmp	r6, r3
 80009e8:	d90a      	bls.n	8000a00 <__udivmoddi4+0x94>
 80009ea:	eb1c 0303 	adds.w	r3, ip, r3
 80009ee:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f2:	f080 80fc 	bcs.w	8000bee <__udivmoddi4+0x282>
 80009f6:	429e      	cmp	r6, r3
 80009f8:	f240 80f9 	bls.w	8000bee <__udivmoddi4+0x282>
 80009fc:	4463      	add	r3, ip
 80009fe:	3802      	subs	r0, #2
 8000a00:	1b9b      	subs	r3, r3, r6
 8000a02:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a06:	2100      	movs	r1, #0
 8000a08:	b11d      	cbz	r5, 8000a12 <__udivmoddi4+0xa6>
 8000a0a:	40d3      	lsrs	r3, r2
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a16:	428b      	cmp	r3, r1
 8000a18:	d905      	bls.n	8000a26 <__udivmoddi4+0xba>
 8000a1a:	b10d      	cbz	r5, 8000a20 <__udivmoddi4+0xb4>
 8000a1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a20:	2100      	movs	r1, #0
 8000a22:	4608      	mov	r0, r1
 8000a24:	e7f5      	b.n	8000a12 <__udivmoddi4+0xa6>
 8000a26:	fab3 f183 	clz	r1, r3
 8000a2a:	2900      	cmp	r1, #0
 8000a2c:	d146      	bne.n	8000abc <__udivmoddi4+0x150>
 8000a2e:	42a3      	cmp	r3, r4
 8000a30:	d302      	bcc.n	8000a38 <__udivmoddi4+0xcc>
 8000a32:	4290      	cmp	r0, r2
 8000a34:	f0c0 80f0 	bcc.w	8000c18 <__udivmoddi4+0x2ac>
 8000a38:	1a86      	subs	r6, r0, r2
 8000a3a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a3e:	2001      	movs	r0, #1
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d0e6      	beq.n	8000a12 <__udivmoddi4+0xa6>
 8000a44:	e9c5 6300 	strd	r6, r3, [r5]
 8000a48:	e7e3      	b.n	8000a12 <__udivmoddi4+0xa6>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	f040 8090 	bne.w	8000b70 <__udivmoddi4+0x204>
 8000a50:	eba1 040c 	sub.w	r4, r1, ip
 8000a54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a58:	fa1f f78c 	uxth.w	r7, ip
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a66:	fb08 4416 	mls	r4, r8, r6, r4
 8000a6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a6e:	fb07 f006 	mul.w	r0, r7, r6
 8000a72:	4298      	cmp	r0, r3
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x11c>
 8000a76:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x11a>
 8000a80:	4298      	cmp	r0, r3
 8000a82:	f200 80cd 	bhi.w	8000c20 <__udivmoddi4+0x2b4>
 8000a86:	4626      	mov	r6, r4
 8000a88:	1a1c      	subs	r4, r3, r0
 8000a8a:	fa1f f38e 	uxth.w	r3, lr
 8000a8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a92:	fb08 4410 	mls	r4, r8, r0, r4
 8000a96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a9a:	fb00 f707 	mul.w	r7, r0, r7
 8000a9e:	429f      	cmp	r7, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x148>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aaa:	d202      	bcs.n	8000ab2 <__udivmoddi4+0x146>
 8000aac:	429f      	cmp	r7, r3
 8000aae:	f200 80b0 	bhi.w	8000c12 <__udivmoddi4+0x2a6>
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	1bdb      	subs	r3, r3, r7
 8000ab6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aba:	e7a5      	b.n	8000a08 <__udivmoddi4+0x9c>
 8000abc:	f1c1 0620 	rsb	r6, r1, #32
 8000ac0:	408b      	lsls	r3, r1
 8000ac2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000acc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad0:	ea43 030c 	orr.w	r3, r3, ip
 8000ad4:	40f4      	lsrs	r4, r6
 8000ad6:	fa00 f801 	lsl.w	r8, r0, r1
 8000ada:	0c38      	lsrs	r0, r7, #16
 8000adc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ae4:	fa1f fc87 	uxth.w	ip, r7
 8000ae8:	fb00 441e 	mls	r4, r0, lr, r4
 8000aec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af0:	fb0e f90c 	mul.w	r9, lr, ip
 8000af4:	45a1      	cmp	r9, r4
 8000af6:	fa02 f201 	lsl.w	r2, r2, r1
 8000afa:	d90a      	bls.n	8000b12 <__udivmoddi4+0x1a6>
 8000afc:	193c      	adds	r4, r7, r4
 8000afe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b02:	f080 8084 	bcs.w	8000c0e <__udivmoddi4+0x2a2>
 8000b06:	45a1      	cmp	r9, r4
 8000b08:	f240 8081 	bls.w	8000c0e <__udivmoddi4+0x2a2>
 8000b0c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b10:	443c      	add	r4, r7
 8000b12:	eba4 0409 	sub.w	r4, r4, r9
 8000b16:	fa1f f983 	uxth.w	r9, r3
 8000b1a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b1e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b26:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b2a:	45a4      	cmp	ip, r4
 8000b2c:	d907      	bls.n	8000b3e <__udivmoddi4+0x1d2>
 8000b2e:	193c      	adds	r4, r7, r4
 8000b30:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b34:	d267      	bcs.n	8000c06 <__udivmoddi4+0x29a>
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d965      	bls.n	8000c06 <__udivmoddi4+0x29a>
 8000b3a:	3b02      	subs	r3, #2
 8000b3c:	443c      	add	r4, r7
 8000b3e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b42:	fba0 9302 	umull	r9, r3, r0, r2
 8000b46:	eba4 040c 	sub.w	r4, r4, ip
 8000b4a:	429c      	cmp	r4, r3
 8000b4c:	46ce      	mov	lr, r9
 8000b4e:	469c      	mov	ip, r3
 8000b50:	d351      	bcc.n	8000bf6 <__udivmoddi4+0x28a>
 8000b52:	d04e      	beq.n	8000bf2 <__udivmoddi4+0x286>
 8000b54:	b155      	cbz	r5, 8000b6c <__udivmoddi4+0x200>
 8000b56:	ebb8 030e 	subs.w	r3, r8, lr
 8000b5a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b62:	40cb      	lsrs	r3, r1
 8000b64:	431e      	orrs	r6, r3
 8000b66:	40cc      	lsrs	r4, r1
 8000b68:	e9c5 6400 	strd	r6, r4, [r5]
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e750      	b.n	8000a12 <__udivmoddi4+0xa6>
 8000b70:	f1c2 0320 	rsb	r3, r2, #32
 8000b74:	fa20 f103 	lsr.w	r1, r0, r3
 8000b78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b80:	4094      	lsls	r4, r2
 8000b82:	430c      	orrs	r4, r1
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8c:	fa1f f78c 	uxth.w	r7, ip
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3110 	mls	r1, r8, r0, r3
 8000b98:	0c23      	lsrs	r3, r4, #16
 8000b9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b9e:	fb00 f107 	mul.w	r1, r0, r7
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x24c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bae:	d22c      	bcs.n	8000c0a <__udivmoddi4+0x29e>
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	d92a      	bls.n	8000c0a <__udivmoddi4+0x29e>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc0:	fb08 3311 	mls	r3, r8, r1, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb01 f307 	mul.w	r3, r1, r7
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x276>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bd8:	d213      	bcs.n	8000c02 <__udivmoddi4+0x296>
 8000bda:	42a3      	cmp	r3, r4
 8000bdc:	d911      	bls.n	8000c02 <__udivmoddi4+0x296>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4464      	add	r4, ip
 8000be2:	1ae4      	subs	r4, r4, r3
 8000be4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000be8:	e739      	b.n	8000a5e <__udivmoddi4+0xf2>
 8000bea:	4604      	mov	r4, r0
 8000bec:	e6f0      	b.n	80009d0 <__udivmoddi4+0x64>
 8000bee:	4608      	mov	r0, r1
 8000bf0:	e706      	b.n	8000a00 <__udivmoddi4+0x94>
 8000bf2:	45c8      	cmp	r8, r9
 8000bf4:	d2ae      	bcs.n	8000b54 <__udivmoddi4+0x1e8>
 8000bf6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bfa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bfe:	3801      	subs	r0, #1
 8000c00:	e7a8      	b.n	8000b54 <__udivmoddi4+0x1e8>
 8000c02:	4631      	mov	r1, r6
 8000c04:	e7ed      	b.n	8000be2 <__udivmoddi4+0x276>
 8000c06:	4603      	mov	r3, r0
 8000c08:	e799      	b.n	8000b3e <__udivmoddi4+0x1d2>
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	e7d4      	b.n	8000bb8 <__udivmoddi4+0x24c>
 8000c0e:	46d6      	mov	lr, sl
 8000c10:	e77f      	b.n	8000b12 <__udivmoddi4+0x1a6>
 8000c12:	4463      	add	r3, ip
 8000c14:	3802      	subs	r0, #2
 8000c16:	e74d      	b.n	8000ab4 <__udivmoddi4+0x148>
 8000c18:	4606      	mov	r6, r0
 8000c1a:	4623      	mov	r3, r4
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	e70f      	b.n	8000a40 <__udivmoddi4+0xd4>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	e730      	b.n	8000a88 <__udivmoddi4+0x11c>
 8000c26:	bf00      	nop

08000c28 <__aeabi_idiv0>:
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	4a06      	ldr	r2, [pc, #24]	@ (8000c5c <vApplicationGetIdleTaskMemory+0x30>)
 8000c42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000094 	.word	0x20000094
 8000c5c:	20000134 	.word	0x20000134

08000c60 <Delay>:
#include "glcd.h"

void Delay(int t) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    t *= 10;
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
    while (t) {
 8000c74:	e002      	b.n	8000c7c <Delay+0x1c>
        t--;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
    while (t) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f9      	bne.n	8000c76 <Delay+0x16>
    }
}
 8000c82:	bf00      	nop
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <send_command>:

void send_command(unsigned char command) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ffe0 	bl	8000c60 <Delay>
    CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);  // E_PIN_NUMBER=RESET
 8000ca0:	4b66      	ldr	r3, [pc, #408]	@ (8000e3c <send_command+0x1ac>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	4a65      	ldr	r2, [pc, #404]	@ (8000e3c <send_command+0x1ac>)
 8000ca6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000caa:	6153      	str	r3, [r2, #20]
    Delay(T);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff ffd7 	bl	8000c60 <Delay>
    CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 8000cb2:	4b62      	ldr	r3, [pc, #392]	@ (8000e3c <send_command+0x1ac>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a61      	ldr	r2, [pc, #388]	@ (8000e3c <send_command+0x1ac>)
 8000cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cbc:	6153      	str	r3, [r2, #20]
    Delay(T);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff ffce 	bl	8000c60 <Delay>
    CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 8000cc4:	4b5d      	ldr	r3, [pc, #372]	@ (8000e3c <send_command+0x1ac>)
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	4a5c      	ldr	r2, [pc, #368]	@ (8000e3c <send_command+0x1ac>)
 8000cca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000cce:	6153      	str	r3, [r2, #20]
    Delay(T);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff ffc5 	bl	8000c60 <Delay>
    SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e40 <send_command+0x1b0>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a59      	ldr	r2, [pc, #356]	@ (8000e40 <send_command+0x1b0>)
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	6153      	str	r3, [r2, #20]
    Delay(T);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff ffbc 	bl	8000c60 <Delay>
    SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 8000ce8:	4b55      	ldr	r3, [pc, #340]	@ (8000e40 <send_command+0x1b0>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	4a54      	ldr	r2, [pc, #336]	@ (8000e40 <send_command+0x1b0>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6153      	str	r3, [r2, #20]
    Delay(T);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff ffb3 	bl	8000c60 <Delay>

    // Clear data lines
    DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8000cfa:	4b52      	ldr	r3, [pc, #328]	@ (8000e44 <send_command+0x1b4>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a51      	ldr	r2, [pc, #324]	@ (8000e44 <send_command+0x1b4>)
 8000d00:	f023 0302 	bic.w	r3, r3, #2
 8000d04:	6153      	str	r3, [r2, #20]
    DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 8000d06:	4b4d      	ldr	r3, [pc, #308]	@ (8000e3c <send_command+0x1ac>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8000e3c <send_command+0x1ac>)
 8000d0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d10:	6153      	str	r3, [r2, #20]
    DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8000d12:	4b4d      	ldr	r3, [pc, #308]	@ (8000e48 <send_command+0x1b8>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a4c      	ldr	r2, [pc, #304]	@ (8000e48 <send_command+0x1b8>)
 8000d18:	f023 0320 	bic.w	r3, r3, #32
 8000d1c:	6153      	str	r3, [r2, #20]
    DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8000d1e:	4b49      	ldr	r3, [pc, #292]	@ (8000e44 <send_command+0x1b4>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	4a48      	ldr	r2, [pc, #288]	@ (8000e44 <send_command+0x1b4>)
 8000d24:	f023 0301 	bic.w	r3, r3, #1
 8000d28:	6153      	str	r3, [r2, #20]
    DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8000d2a:	4b47      	ldr	r3, [pc, #284]	@ (8000e48 <send_command+0x1b8>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a46      	ldr	r2, [pc, #280]	@ (8000e48 <send_command+0x1b8>)
 8000d30:	f023 0310 	bic.w	r3, r3, #16
 8000d34:	6153      	str	r3, [r2, #20]
    DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8000d36:	4b42      	ldr	r3, [pc, #264]	@ (8000e40 <send_command+0x1b0>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	4a41      	ldr	r2, [pc, #260]	@ (8000e40 <send_command+0x1b0>)
 8000d3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d40:	6153      	str	r3, [r2, #20]
    DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8000d42:	4b3f      	ldr	r3, [pc, #252]	@ (8000e40 <send_command+0x1b0>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a3e      	ldr	r2, [pc, #248]	@ (8000e40 <send_command+0x1b0>)
 8000d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d4c:	6153      	str	r3, [r2, #20]
    DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e40 <send_command+0x1b0>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a3b      	ldr	r2, [pc, #236]	@ (8000e40 <send_command+0x1b0>)
 8000d54:	f023 0320 	bic.w	r3, r3, #32
 8000d58:	6153      	str	r3, [r2, #20]

    Delay(T);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff ff80 	bl	8000c60 <Delay>
    CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8000d60:	4b36      	ldr	r3, [pc, #216]	@ (8000e3c <send_command+0x1ac>)
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	4a35      	ldr	r2, [pc, #212]	@ (8000e3c <send_command+0x1ac>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6a:	6153      	str	r3, [r2, #20]
    Delay(T);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff ff77 	bl	8000c60 <Delay>

    // Set data lines with the command
    if (command & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <send_command+0xf8>
 8000d7c:	4b31      	ldr	r3, [pc, #196]	@ (8000e44 <send_command+0x1b4>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	4a30      	ldr	r2, [pc, #192]	@ (8000e44 <send_command+0x1b4>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6153      	str	r3, [r2, #20]
    if (command & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <send_command+0x10e>
 8000d92:	4b2a      	ldr	r3, [pc, #168]	@ (8000e3c <send_command+0x1ac>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a29      	ldr	r2, [pc, #164]	@ (8000e3c <send_command+0x1ac>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d9c:	6153      	str	r3, [r2, #20]
    if (command & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d005      	beq.n	8000db4 <send_command+0x124>
 8000da8:	4b27      	ldr	r3, [pc, #156]	@ (8000e48 <send_command+0x1b8>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	4a26      	ldr	r2, [pc, #152]	@ (8000e48 <send_command+0x1b8>)
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	6153      	str	r3, [r2, #20]
    if (command & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <send_command+0x13a>
 8000dbe:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <send_command+0x1b4>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a20      	ldr	r2, [pc, #128]	@ (8000e44 <send_command+0x1b4>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6153      	str	r3, [r2, #20]
    if (command & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d005      	beq.n	8000de0 <send_command+0x150>
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <send_command+0x1b8>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e48 <send_command+0x1b8>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6153      	str	r3, [r2, #20]
    if (command & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d005      	beq.n	8000df6 <send_command+0x166>
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <send_command+0x1b0>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <send_command+0x1b0>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df4:	6153      	str	r3, [r2, #20]
    if (command & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d005      	beq.n	8000e0c <send_command+0x17c>
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <send_command+0x1b0>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	4a0e      	ldr	r2, [pc, #56]	@ (8000e40 <send_command+0x1b0>)
 8000e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0a:	6153      	str	r3, [r2, #20]
    if (command & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	da05      	bge.n	8000e20 <send_command+0x190>
 8000e14:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <send_command+0x1b0>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <send_command+0x1b0>)
 8000e1a:	f043 0320 	orr.w	r3, r3, #32
 8000e1e:	6153      	str	r3, [r2, #20]

    Delay(T);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff ff1d 	bl	8000c60 <Delay>
    CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8000e26:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <send_command+0x1ac>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <send_command+0x1ac>)
 8000e2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000e30:	6153      	str	r3, [r2, #20]
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020400 	.word	0x40020400
 8000e48:	40020800 	.word	0x40020800

08000e4c <glcd_on>:

void glcd_on(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    Delay(T);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff ff05 	bl	8000c60 <Delay>
    send_command(0x3F);     // GLCD on
 8000e56:	203f      	movs	r0, #63	@ 0x3f
 8000e58:	f7ff ff1a 	bl	8000c90 <send_command>
    send_command(0x40);     // SET Cursor on Y=0
 8000e5c:	2040      	movs	r0, #64	@ 0x40
 8000e5e:	f7ff ff17 	bl	8000c90 <send_command>
    send_command(0xB8);     // SET Page on X=0, Line=0
 8000e62:	20b8      	movs	r0, #184	@ 0xb8
 8000e64:	f7ff ff14 	bl	8000c90 <send_command>
    send_command(0xC0);     // Display Start Line=0xC0
 8000e68:	20c0      	movs	r0, #192	@ 0xc0
 8000e6a:	f7ff ff11 	bl	8000c90 <send_command>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <glcd_off>:

void glcd_off(void) {
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
    Delay(T);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f7ff fef2 	bl	8000c60 <Delay>
    send_command(0x3E);
 8000e7c:	203e      	movs	r0, #62	@ 0x3e
 8000e7e:	f7ff ff07 	bl	8000c90 <send_command>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <glcd_putchar>:

void glcd_putchar(unsigned char data, unsigned char j) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71bb      	strb	r3, [r7, #6]
    if (j < 64) {
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e9c:	f200 80d2 	bhi.w	8001044 <glcd_putchar+0x1bc>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);   // E_PIN_NUMBER=RESET
 8000ea0:	4b64      	ldr	r3, [pc, #400]	@ (8001034 <glcd_putchar+0x1ac>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	4a63      	ldr	r2, [pc, #396]	@ (8001034 <glcd_putchar+0x1ac>)
 8000ea6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000eaa:	6153      	str	r3, [r2, #20]
        Delay(T);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff fed7 	bl	8000c60 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER);  // RW_PIN_NUMBER=RESET
 8000eb2:	4b60      	ldr	r3, [pc, #384]	@ (8001034 <glcd_putchar+0x1ac>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a5f      	ldr	r2, [pc, #380]	@ (8001034 <glcd_putchar+0x1ac>)
 8000eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ebc:	6153      	str	r3, [r2, #20]
        Delay(T);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fece 	bl	8000c60 <Delay>
        CTRL_PORT->ODR |= (1 << DI_PIN_NUMBER);   // DI_PIN_NUMBER=SET
 8000ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8001034 <glcd_putchar+0x1ac>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a5a      	ldr	r2, [pc, #360]	@ (8001034 <glcd_putchar+0x1ac>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ece:	6153      	str	r3, [r2, #20]
        Delay(T);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f7ff fec5 	bl	8000c60 <Delay>
        SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8000ed6:	4b58      	ldr	r3, [pc, #352]	@ (8001038 <glcd_putchar+0x1b0>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a57      	ldr	r2, [pc, #348]	@ (8001038 <glcd_putchar+0x1b0>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	6153      	str	r3, [r2, #20]
        Delay(T);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff febc 	bl	8000c60 <Delay>
        SECO2_PORT->ODR &= ~(1 << CS2_PIN_NUMBER);// CS2_PIN_NUMBER=RESET
 8000ee8:	4b53      	ldr	r3, [pc, #332]	@ (8001038 <glcd_putchar+0x1b0>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	4a52      	ldr	r2, [pc, #328]	@ (8001038 <glcd_putchar+0x1b0>)
 8000eee:	f023 0308 	bic.w	r3, r3, #8
 8000ef2:	6153      	str	r3, [r2, #20]
        Delay(T);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f7ff feb3 	bl	8000c60 <Delay>

        // Clear data lines
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8000efa:	4b50      	ldr	r3, [pc, #320]	@ (800103c <glcd_putchar+0x1b4>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a4f      	ldr	r2, [pc, #316]	@ (800103c <glcd_putchar+0x1b4>)
 8000f00:	f023 0302 	bic.w	r3, r3, #2
 8000f04:	6153      	str	r3, [r2, #20]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 8000f06:	4b4b      	ldr	r3, [pc, #300]	@ (8001034 <glcd_putchar+0x1ac>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a4a      	ldr	r2, [pc, #296]	@ (8001034 <glcd_putchar+0x1ac>)
 8000f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f10:	6153      	str	r3, [r2, #20]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8000f12:	4b4b      	ldr	r3, [pc, #300]	@ (8001040 <glcd_putchar+0x1b8>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	4a4a      	ldr	r2, [pc, #296]	@ (8001040 <glcd_putchar+0x1b8>)
 8000f18:	f023 0320 	bic.w	r3, r3, #32
 8000f1c:	6153      	str	r3, [r2, #20]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8000f1e:	4b47      	ldr	r3, [pc, #284]	@ (800103c <glcd_putchar+0x1b4>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a46      	ldr	r2, [pc, #280]	@ (800103c <glcd_putchar+0x1b4>)
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	6153      	str	r3, [r2, #20]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8000f2a:	4b45      	ldr	r3, [pc, #276]	@ (8001040 <glcd_putchar+0x1b8>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a44      	ldr	r2, [pc, #272]	@ (8001040 <glcd_putchar+0x1b8>)
 8000f30:	f023 0310 	bic.w	r3, r3, #16
 8000f34:	6153      	str	r3, [r2, #20]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8000f36:	4b40      	ldr	r3, [pc, #256]	@ (8001038 <glcd_putchar+0x1b0>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001038 <glcd_putchar+0x1b0>)
 8000f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f40:	6153      	str	r3, [r2, #20]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8000f42:	4b3d      	ldr	r3, [pc, #244]	@ (8001038 <glcd_putchar+0x1b0>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	4a3c      	ldr	r2, [pc, #240]	@ (8001038 <glcd_putchar+0x1b0>)
 8000f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f4c:	6153      	str	r3, [r2, #20]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001038 <glcd_putchar+0x1b0>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a39      	ldr	r2, [pc, #228]	@ (8001038 <glcd_putchar+0x1b0>)
 8000f54:	f023 0320 	bic.w	r3, r3, #32
 8000f58:	6153      	str	r3, [r2, #20]

        Delay(T);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff fe80 	bl	8000c60 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8000f60:	4b34      	ldr	r3, [pc, #208]	@ (8001034 <glcd_putchar+0x1ac>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	4a33      	ldr	r2, [pc, #204]	@ (8001034 <glcd_putchar+0x1ac>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f6a:	6153      	str	r3, [r2, #20]
        Delay(T);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fe77 	bl	8000c60 <Delay>

        // Set data lines with the data
        if (data & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <glcd_putchar+0x100>
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800103c <glcd_putchar+0x1b4>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	4a2e      	ldr	r2, [pc, #184]	@ (800103c <glcd_putchar+0x1b4>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	6153      	str	r3, [r2, #20]
        if (data & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d005      	beq.n	8000f9e <glcd_putchar+0x116>
 8000f92:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <glcd_putchar+0x1ac>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a27      	ldr	r2, [pc, #156]	@ (8001034 <glcd_putchar+0x1ac>)
 8000f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f9c:	6153      	str	r3, [r2, #20]
        if (data & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <glcd_putchar+0x12c>
 8000fa8:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <glcd_putchar+0x1b8>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <glcd_putchar+0x1b8>)
 8000fae:	f043 0320 	orr.w	r3, r3, #32
 8000fb2:	6153      	str	r3, [r2, #20]
        if (data & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <glcd_putchar+0x142>
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <glcd_putchar+0x1b4>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800103c <glcd_putchar+0x1b4>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6153      	str	r3, [r2, #20]
        if (data & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <glcd_putchar+0x158>
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <glcd_putchar+0x1b8>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <glcd_putchar+0x1b8>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	6153      	str	r3, [r2, #20]
        if (data & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <glcd_putchar+0x16e>
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <glcd_putchar+0x1b0>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <glcd_putchar+0x1b0>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff4:	6153      	str	r3, [r2, #20]
        if (data & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <glcd_putchar+0x184>
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <glcd_putchar+0x1b0>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <glcd_putchar+0x1b0>)
 8001006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800100a:	6153      	str	r3, [r2, #20]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	da05      	bge.n	8001020 <glcd_putchar+0x198>
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <glcd_putchar+0x1b0>)
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <glcd_putchar+0x1b0>)
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	6153      	str	r3, [r2, #20]

        Delay(T);
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fe1d 	bl	8000c60 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8001026:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <glcd_putchar+0x1ac>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a02      	ldr	r2, [pc, #8]	@ (8001034 <glcd_putchar+0x1ac>)
 800102c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001030:	6153      	str	r3, [r2, #20]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);

        Delay(T);
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
    }
}
 8001032:	e0d0      	b.n	80011d6 <glcd_putchar+0x34e>
 8001034:	40021000 	.word	0x40021000
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);   // E_PIN_NUMBER=RESET
 8001044:	4b66      	ldr	r3, [pc, #408]	@ (80011e0 <glcd_putchar+0x358>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	4a65      	ldr	r2, [pc, #404]	@ (80011e0 <glcd_putchar+0x358>)
 800104a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800104e:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff fe05 	bl	8000c60 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER);  // RW_PIN_NUMBER=RESET
 8001056:	4b62      	ldr	r3, [pc, #392]	@ (80011e0 <glcd_putchar+0x358>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a61      	ldr	r2, [pc, #388]	@ (80011e0 <glcd_putchar+0x358>)
 800105c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001060:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff fdfc 	bl	8000c60 <Delay>
        CTRL_PORT->ODR |= (1 << DI_PIN_NUMBER);   // DI_PIN_NUMBER=SET
 8001068:	4b5d      	ldr	r3, [pc, #372]	@ (80011e0 <glcd_putchar+0x358>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a5c      	ldr	r2, [pc, #368]	@ (80011e0 <glcd_putchar+0x358>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001072:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff fdf3 	bl	8000c60 <Delay>
        SECO1_PORT->ODR &= ~(1 << CS1_PIN_NUMBER);// CS1_PIN_NUMBER=RESET
 800107a:	4b5a      	ldr	r3, [pc, #360]	@ (80011e4 <glcd_putchar+0x35c>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a59      	ldr	r2, [pc, #356]	@ (80011e4 <glcd_putchar+0x35c>)
 8001080:	f023 0310 	bic.w	r3, r3, #16
 8001084:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fdea 	bl	8000c60 <Delay>
        SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 800108c:	4b55      	ldr	r3, [pc, #340]	@ (80011e4 <glcd_putchar+0x35c>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	4a54      	ldr	r2, [pc, #336]	@ (80011e4 <glcd_putchar+0x35c>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff fde1 	bl	8000c60 <Delay>
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 800109e:	4b52      	ldr	r3, [pc, #328]	@ (80011e8 <glcd_putchar+0x360>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a51      	ldr	r2, [pc, #324]	@ (80011e8 <glcd_putchar+0x360>)
 80010a4:	f023 0302 	bic.w	r3, r3, #2
 80010a8:	6153      	str	r3, [r2, #20]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 80010aa:	4b4d      	ldr	r3, [pc, #308]	@ (80011e0 <glcd_putchar+0x358>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a4c      	ldr	r2, [pc, #304]	@ (80011e0 <glcd_putchar+0x358>)
 80010b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010b4:	6153      	str	r3, [r2, #20]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 80010b6:	4b4d      	ldr	r3, [pc, #308]	@ (80011ec <glcd_putchar+0x364>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a4c      	ldr	r2, [pc, #304]	@ (80011ec <glcd_putchar+0x364>)
 80010bc:	f023 0320 	bic.w	r3, r3, #32
 80010c0:	6153      	str	r3, [r2, #20]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 80010c2:	4b49      	ldr	r3, [pc, #292]	@ (80011e8 <glcd_putchar+0x360>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a48      	ldr	r2, [pc, #288]	@ (80011e8 <glcd_putchar+0x360>)
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	6153      	str	r3, [r2, #20]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 80010ce:	4b47      	ldr	r3, [pc, #284]	@ (80011ec <glcd_putchar+0x364>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a46      	ldr	r2, [pc, #280]	@ (80011ec <glcd_putchar+0x364>)
 80010d4:	f023 0310 	bic.w	r3, r3, #16
 80010d8:	6153      	str	r3, [r2, #20]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 80010da:	4b42      	ldr	r3, [pc, #264]	@ (80011e4 <glcd_putchar+0x35c>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a41      	ldr	r2, [pc, #260]	@ (80011e4 <glcd_putchar+0x35c>)
 80010e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010e4:	6153      	str	r3, [r2, #20]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 80010e6:	4b3f      	ldr	r3, [pc, #252]	@ (80011e4 <glcd_putchar+0x35c>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a3e      	ldr	r2, [pc, #248]	@ (80011e4 <glcd_putchar+0x35c>)
 80010ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80010f0:	6153      	str	r3, [r2, #20]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 80010f2:	4b3c      	ldr	r3, [pc, #240]	@ (80011e4 <glcd_putchar+0x35c>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a3b      	ldr	r2, [pc, #236]	@ (80011e4 <glcd_putchar+0x35c>)
 80010f8:	f023 0320 	bic.w	r3, r3, #32
 80010fc:	6153      	str	r3, [r2, #20]
        Delay(T);
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff fdae 	bl	8000c60 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8001104:	4b36      	ldr	r3, [pc, #216]	@ (80011e0 <glcd_putchar+0x358>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a35      	ldr	r2, [pc, #212]	@ (80011e0 <glcd_putchar+0x358>)
 800110a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800110e:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff fda5 	bl	8000c60 <Delay>
        if (data & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <glcd_putchar+0x2a4>
 8001120:	4b31      	ldr	r3, [pc, #196]	@ (80011e8 <glcd_putchar+0x360>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a30      	ldr	r2, [pc, #192]	@ (80011e8 <glcd_putchar+0x360>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	6153      	str	r3, [r2, #20]
        if (data & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <glcd_putchar+0x2ba>
 8001136:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <glcd_putchar+0x358>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a29      	ldr	r2, [pc, #164]	@ (80011e0 <glcd_putchar+0x358>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001140:	6153      	str	r3, [r2, #20]
        if (data & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <glcd_putchar+0x2d0>
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <glcd_putchar+0x364>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	4a26      	ldr	r2, [pc, #152]	@ (80011ec <glcd_putchar+0x364>)
 8001152:	f043 0320 	orr.w	r3, r3, #32
 8001156:	6153      	str	r3, [r2, #20]
        if (data & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d005      	beq.n	800116e <glcd_putchar+0x2e6>
 8001162:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <glcd_putchar+0x360>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	4a20      	ldr	r2, [pc, #128]	@ (80011e8 <glcd_putchar+0x360>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6153      	str	r3, [r2, #20]
        if (data & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <glcd_putchar+0x2fc>
 8001178:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <glcd_putchar+0x364>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	4a1b      	ldr	r2, [pc, #108]	@ (80011ec <glcd_putchar+0x364>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	6153      	str	r3, [r2, #20]
        if (data & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	2b00      	cmp	r3, #0
 800118c:	d005      	beq.n	800119a <glcd_putchar+0x312>
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <glcd_putchar+0x35c>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a14      	ldr	r2, [pc, #80]	@ (80011e4 <glcd_putchar+0x35c>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001198:	6153      	str	r3, [r2, #20]
        if (data & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <glcd_putchar+0x328>
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <glcd_putchar+0x35c>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	4a0e      	ldr	r2, [pc, #56]	@ (80011e4 <glcd_putchar+0x35c>)
 80011aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011ae:	6153      	str	r3, [r2, #20]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da05      	bge.n	80011c4 <glcd_putchar+0x33c>
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <glcd_putchar+0x35c>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a09      	ldr	r2, [pc, #36]	@ (80011e4 <glcd_putchar+0x35c>)
 80011be:	f043 0320 	orr.w	r3, r3, #32
 80011c2:	6153      	str	r3, [r2, #20]
        Delay(T);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff fd4b 	bl	8000c60 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 80011ca:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <glcd_putchar+0x358>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <glcd_putchar+0x358>)
 80011d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80011d4:	6153      	str	r3, [r2, #20]
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40020800 	.word	0x40020800

080011f0 <glcd_puts>:

void glcd_puts(char *str, char x, char y) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
 80011fc:	4613      	mov	r3, r2
 80011fe:	70bb      	strb	r3, [r7, #2]
    Delay(T);
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff fd2d 	bl	8000c60 <Delay>
    int i, j;
    while (*str != 0) {
 8001206:	e030      	b.n	800126a <glcd_puts+0x7a>
        i = (8 * (*str));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	60fb      	str	r3, [r7, #12]
        j = i + 7;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3307      	adds	r3, #7
 8001214:	60bb      	str	r3, [r7, #8]
        for (; i <= j; i++) {
 8001216:	e021      	b.n	800125c <glcd_puts+0x6c>
            glcd_gotoxy(x, y);
 8001218:	78ba      	ldrb	r2, [r7, #2]
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f82e 	bl	8001280 <glcd_gotoxy>
            glcd_putchar(Font[i], x);
 8001224:	4a15      	ldr	r2, [pc, #84]	@ (800127c <glcd_puts+0x8c>)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	78fa      	ldrb	r2, [r7, #3]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fe29 	bl	8000e88 <glcd_putchar>
            ++x;
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	3301      	adds	r3, #1
 800123a:	70fb      	strb	r3, [r7, #3]
            if (x > 121) {
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2b79      	cmp	r3, #121	@ 0x79
 8001240:	d909      	bls.n	8001256 <glcd_puts+0x66>
                if (i % 8 == 0) {
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	2b00      	cmp	r3, #0
 800124a:	d104      	bne.n	8001256 <glcd_puts+0x66>
                    ++y;
 800124c:	78bb      	ldrb	r3, [r7, #2]
 800124e:	3301      	adds	r3, #1
 8001250:	70bb      	strb	r3, [r7, #2]
                    x = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	70fb      	strb	r3, [r7, #3]
        for (; i <= j; i++) {
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3301      	adds	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	429a      	cmp	r2, r3
 8001262:	ddd9      	ble.n	8001218 <glcd_puts+0x28>
                }
            }
        }
        str++;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3301      	adds	r3, #1
 8001268:	607b      	str	r3, [r7, #4]
    while (*str != 0) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1ca      	bne.n	8001208 <glcd_puts+0x18>
    }
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	0800b1f8 	.word	0x0800b1f8

08001280 <glcd_gotoxy>:
        glcd_gotoxy(x, y);
        glcd_putImage(point, x);
    }
}

void glcd_gotoxy(unsigned char x, unsigned char y) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	460a      	mov	r2, r1
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
    Delay(T);
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff fce5 	bl	8000c60 <Delay>
    goto_row(y);
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f808 	bl	80012ae <goto_row>
    goto_column(x);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f81b 	bl	80012dc <goto_column>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <goto_row>:

void goto_row(unsigned char y) {
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff fcd1 	bl	8000c60 <Delay>
    y = (y | 0xB8) & 0xBF;
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f063 0347 	orn	r3, r3, #71	@ 0x47
 80012ca:	71fb      	strb	r3, [r7, #7]
    send_command(y);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fcde 	bl	8000c90 <send_command>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <goto_column>:

void goto_column(unsigned char x) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff fcba 	bl	8000c60 <Delay>

    if (x < 64) {
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80012f0:	f200 80da 	bhi.w	80014a8 <goto_column+0x1cc>
        x = (x | 0x40) & 0x7F;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001300:	71fb      	strb	r3, [r7, #7]
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8001302:	4b65      	ldr	r3, [pc, #404]	@ (8001498 <goto_column+0x1bc>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a64      	ldr	r2, [pc, #400]	@ (8001498 <goto_column+0x1bc>)
 8001308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800130c:	6153      	str	r3, [r2, #20]
        Delay(T);
 800130e:	2001      	movs	r0, #1
 8001310:	f7ff fca6 	bl	8000c60 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 8001314:	4b60      	ldr	r3, [pc, #384]	@ (8001498 <goto_column+0x1bc>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4a5f      	ldr	r2, [pc, #380]	@ (8001498 <goto_column+0x1bc>)
 800131a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800131e:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff fc9d 	bl	8000c60 <Delay>
        CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 8001326:	4b5c      	ldr	r3, [pc, #368]	@ (8001498 <goto_column+0x1bc>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4a5b      	ldr	r2, [pc, #364]	@ (8001498 <goto_column+0x1bc>)
 800132c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001330:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fc94 	bl	8000c60 <Delay>
        SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8001338:	4b58      	ldr	r3, [pc, #352]	@ (800149c <goto_column+0x1c0>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	4a57      	ldr	r2, [pc, #348]	@ (800149c <goto_column+0x1c0>)
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fc8b 	bl	8000c60 <Delay>
        SECO2_PORT->ODR &= ~(1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=RESET
 800134a:	4b54      	ldr	r3, [pc, #336]	@ (800149c <goto_column+0x1c0>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a53      	ldr	r2, [pc, #332]	@ (800149c <goto_column+0x1c0>)
 8001350:	f023 0308 	bic.w	r3, r3, #8
 8001354:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff fc82 	bl	8000c60 <Delay>

        // Clear data lines
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 800135c:	4b50      	ldr	r3, [pc, #320]	@ (80014a0 <goto_column+0x1c4>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	4a4f      	ldr	r2, [pc, #316]	@ (80014a0 <goto_column+0x1c4>)
 8001362:	f023 0302 	bic.w	r3, r3, #2
 8001366:	6153      	str	r3, [r2, #20]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 8001368:	4b4b      	ldr	r3, [pc, #300]	@ (8001498 <goto_column+0x1bc>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4a4a      	ldr	r2, [pc, #296]	@ (8001498 <goto_column+0x1bc>)
 800136e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001372:	6153      	str	r3, [r2, #20]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8001374:	4b4b      	ldr	r3, [pc, #300]	@ (80014a4 <goto_column+0x1c8>)
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	4a4a      	ldr	r2, [pc, #296]	@ (80014a4 <goto_column+0x1c8>)
 800137a:	f023 0320 	bic.w	r3, r3, #32
 800137e:	6153      	str	r3, [r2, #20]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8001380:	4b47      	ldr	r3, [pc, #284]	@ (80014a0 <goto_column+0x1c4>)
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	4a46      	ldr	r2, [pc, #280]	@ (80014a0 <goto_column+0x1c4>)
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	6153      	str	r3, [r2, #20]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 800138c:	4b45      	ldr	r3, [pc, #276]	@ (80014a4 <goto_column+0x1c8>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	4a44      	ldr	r2, [pc, #272]	@ (80014a4 <goto_column+0x1c8>)
 8001392:	f023 0310 	bic.w	r3, r3, #16
 8001396:	6153      	str	r3, [r2, #20]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8001398:	4b40      	ldr	r3, [pc, #256]	@ (800149c <goto_column+0x1c0>)
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	4a3f      	ldr	r2, [pc, #252]	@ (800149c <goto_column+0x1c0>)
 800139e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013a2:	6153      	str	r3, [r2, #20]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 80013a4:	4b3d      	ldr	r3, [pc, #244]	@ (800149c <goto_column+0x1c0>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	4a3c      	ldr	r2, [pc, #240]	@ (800149c <goto_column+0x1c0>)
 80013aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80013ae:	6153      	str	r3, [r2, #20]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 80013b0:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <goto_column+0x1c0>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a39      	ldr	r2, [pc, #228]	@ (800149c <goto_column+0x1c0>)
 80013b6:	f023 0320 	bic.w	r3, r3, #32
 80013ba:	6153      	str	r3, [r2, #20]

        Delay(T);
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fc4f 	bl	8000c60 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 80013c2:	4b35      	ldr	r3, [pc, #212]	@ (8001498 <goto_column+0x1bc>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	4a34      	ldr	r2, [pc, #208]	@ (8001498 <goto_column+0x1bc>)
 80013c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013cc:	6153      	str	r3, [r2, #20]
        Delay(T);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff fc46 	bl	8000c60 <Delay>

        // Set data lines with the value of x
        if (x & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <goto_column+0x10e>
 80013de:	4b30      	ldr	r3, [pc, #192]	@ (80014a0 <goto_column+0x1c4>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	4a2f      	ldr	r2, [pc, #188]	@ (80014a0 <goto_column+0x1c4>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6153      	str	r3, [r2, #20]
        if (x & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <goto_column+0x124>
 80013f4:	4b28      	ldr	r3, [pc, #160]	@ (8001498 <goto_column+0x1bc>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	4a27      	ldr	r2, [pc, #156]	@ (8001498 <goto_column+0x1bc>)
 80013fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013fe:	6153      	str	r3, [r2, #20]
        if (x & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <goto_column+0x13a>
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <goto_column+0x1c8>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4a25      	ldr	r2, [pc, #148]	@ (80014a4 <goto_column+0x1c8>)
 8001410:	f043 0320 	orr.w	r3, r3, #32
 8001414:	6153      	str	r3, [r2, #20]
        if (x & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <goto_column+0x150>
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <goto_column+0x1c4>)
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <goto_column+0x1c4>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6153      	str	r3, [r2, #20]
        if (x & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <goto_column+0x166>
 8001436:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <goto_column+0x1c8>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a1a      	ldr	r2, [pc, #104]	@ (80014a4 <goto_column+0x1c8>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6153      	str	r3, [r2, #20]
        if (x & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <goto_column+0x17c>
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <goto_column+0x1c0>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	4a12      	ldr	r2, [pc, #72]	@ (800149c <goto_column+0x1c0>)
 8001452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001456:	6153      	str	r3, [r2, #20]
        if (x & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <goto_column+0x192>
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <goto_column+0x1c0>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <goto_column+0x1c0>)
 8001468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800146c:	6153      	str	r3, [r2, #20]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	da05      	bge.n	8001482 <goto_column+0x1a6>
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <goto_column+0x1c0>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	4a08      	ldr	r2, [pc, #32]	@ (800149c <goto_column+0x1c0>)
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	6153      	str	r3, [r2, #20]

        Delay(T);
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff fbec 	bl	8000c60 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <goto_column+0x1bc>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4a02      	ldr	r2, [pc, #8]	@ (8001498 <goto_column+0x1bc>)
 800148e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001492:	6153      	str	r3, [r2, #20]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);

        Delay(T);
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
    }
}
 8001494:	e0db      	b.n	800164e <goto_column+0x372>
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
        x -= 64;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	3b40      	subs	r3, #64	@ 0x40
 80014ac:	71fb      	strb	r3, [r7, #7]
        x = (x | 0x40) & 0x7F;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ba:	71fb      	strb	r3, [r7, #7]
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 80014bc:	4b66      	ldr	r3, [pc, #408]	@ (8001658 <goto_column+0x37c>)
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	4a65      	ldr	r2, [pc, #404]	@ (8001658 <goto_column+0x37c>)
 80014c2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80014c6:	6153      	str	r3, [r2, #20]
        Delay(T);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff fbc9 	bl	8000c60 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 80014ce:	4b62      	ldr	r3, [pc, #392]	@ (8001658 <goto_column+0x37c>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a61      	ldr	r2, [pc, #388]	@ (8001658 <goto_column+0x37c>)
 80014d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014d8:	6153      	str	r3, [r2, #20]
        Delay(T);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fbc0 	bl	8000c60 <Delay>
        CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 80014e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001658 <goto_column+0x37c>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	4a5c      	ldr	r2, [pc, #368]	@ (8001658 <goto_column+0x37c>)
 80014e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80014ea:	6153      	str	r3, [r2, #20]
        Delay(T);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff fbb7 	bl	8000c60 <Delay>
        SECO1_PORT->ODR &= ~(1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=RESET
 80014f2:	4b5a      	ldr	r3, [pc, #360]	@ (800165c <goto_column+0x380>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	4a59      	ldr	r2, [pc, #356]	@ (800165c <goto_column+0x380>)
 80014f8:	f023 0310 	bic.w	r3, r3, #16
 80014fc:	6153      	str	r3, [r2, #20]
        Delay(T);
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff fbae 	bl	8000c60 <Delay>
        SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 8001504:	4b55      	ldr	r3, [pc, #340]	@ (800165c <goto_column+0x380>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	4a54      	ldr	r2, [pc, #336]	@ (800165c <goto_column+0x380>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff fba5 	bl	8000c60 <Delay>
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8001516:	4b52      	ldr	r3, [pc, #328]	@ (8001660 <goto_column+0x384>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a51      	ldr	r2, [pc, #324]	@ (8001660 <goto_column+0x384>)
 800151c:	f023 0302 	bic.w	r3, r3, #2
 8001520:	6153      	str	r3, [r2, #20]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 8001522:	4b4d      	ldr	r3, [pc, #308]	@ (8001658 <goto_column+0x37c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a4c      	ldr	r2, [pc, #304]	@ (8001658 <goto_column+0x37c>)
 8001528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800152c:	6153      	str	r3, [r2, #20]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 800152e:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <goto_column+0x388>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4a4c      	ldr	r2, [pc, #304]	@ (8001664 <goto_column+0x388>)
 8001534:	f023 0320 	bic.w	r3, r3, #32
 8001538:	6153      	str	r3, [r2, #20]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 800153a:	4b49      	ldr	r3, [pc, #292]	@ (8001660 <goto_column+0x384>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a48      	ldr	r2, [pc, #288]	@ (8001660 <goto_column+0x384>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6153      	str	r3, [r2, #20]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8001546:	4b47      	ldr	r3, [pc, #284]	@ (8001664 <goto_column+0x388>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a46      	ldr	r2, [pc, #280]	@ (8001664 <goto_column+0x388>)
 800154c:	f023 0310 	bic.w	r3, r3, #16
 8001550:	6153      	str	r3, [r2, #20]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8001552:	4b42      	ldr	r3, [pc, #264]	@ (800165c <goto_column+0x380>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a41      	ldr	r2, [pc, #260]	@ (800165c <goto_column+0x380>)
 8001558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800155c:	6153      	str	r3, [r2, #20]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 800155e:	4b3f      	ldr	r3, [pc, #252]	@ (800165c <goto_column+0x380>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a3e      	ldr	r2, [pc, #248]	@ (800165c <goto_column+0x380>)
 8001564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001568:	6153      	str	r3, [r2, #20]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 800156a:	4b3c      	ldr	r3, [pc, #240]	@ (800165c <goto_column+0x380>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a3b      	ldr	r2, [pc, #236]	@ (800165c <goto_column+0x380>)
 8001570:	f023 0320 	bic.w	r3, r3, #32
 8001574:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001576:	2001      	movs	r0, #1
 8001578:	f7ff fb72 	bl	8000c60 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 800157c:	4b36      	ldr	r3, [pc, #216]	@ (8001658 <goto_column+0x37c>)
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	4a35      	ldr	r2, [pc, #212]	@ (8001658 <goto_column+0x37c>)
 8001582:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001586:	6153      	str	r3, [r2, #20]
        Delay(T);
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff fb69 	bl	8000c60 <Delay>
        if (x & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <goto_column+0x2c8>
 8001598:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <goto_column+0x384>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	4a30      	ldr	r2, [pc, #192]	@ (8001660 <goto_column+0x384>)
 800159e:	f043 0302 	orr.w	r3, r3, #2
 80015a2:	6153      	str	r3, [r2, #20]
        if (x & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <goto_column+0x2de>
 80015ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <goto_column+0x37c>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	4a29      	ldr	r2, [pc, #164]	@ (8001658 <goto_column+0x37c>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015b8:	6153      	str	r3, [r2, #20]
        if (x & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <goto_column+0x2f4>
 80015c4:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <goto_column+0x388>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	4a26      	ldr	r2, [pc, #152]	@ (8001664 <goto_column+0x388>)
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	6153      	str	r3, [r2, #20]
        if (x & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <goto_column+0x30a>
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <goto_column+0x384>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a20      	ldr	r2, [pc, #128]	@ (8001660 <goto_column+0x384>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6153      	str	r3, [r2, #20]
        if (x & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <goto_column+0x320>
 80015f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <goto_column+0x388>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001664 <goto_column+0x388>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6153      	str	r3, [r2, #20]
        if (x & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <goto_column+0x336>
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <goto_column+0x380>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	4a14      	ldr	r2, [pc, #80]	@ (800165c <goto_column+0x380>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001610:	6153      	str	r3, [r2, #20]
        if (x & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <goto_column+0x34c>
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <goto_column+0x380>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <goto_column+0x380>)
 8001622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001626:	6153      	str	r3, [r2, #20]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	da05      	bge.n	800163c <goto_column+0x360>
 8001630:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <goto_column+0x380>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4a09      	ldr	r2, [pc, #36]	@ (800165c <goto_column+0x380>)
 8001636:	f043 0320 	orr.w	r3, r3, #32
 800163a:	6153      	str	r3, [r2, #20]
        Delay(T);
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff fb0f 	bl	8000c60 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8001642:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <goto_column+0x37c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <goto_column+0x37c>)
 8001648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800164c:	6153      	str	r3, [r2, #20]
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800

08001668 <glcd_clearline>:

void glcd_clearline(unsigned line) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
    Delay(T);
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff faf5 	bl	8000c60 <Delay>
    int i;
    glcd_gotoxy(0, line); // At start of line of left side
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff fdff 	bl	8001280 <glcd_gotoxy>
    SECO1_PORT->ODR = SECO1_PORT->ODR | 1 << (CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8001682:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <glcd_clearline+0x94>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	4a1d      	ldr	r2, [pc, #116]	@ (80016fc <glcd_clearline+0x94>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6153      	str	r3, [r2, #20]
    Delay(T);
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff fae6 	bl	8000c60 <Delay>
    SECO2_PORT->ODR = SECO2_PORT->ODR & ~(1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=RESET
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <glcd_clearline+0x94>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <glcd_clearline+0x94>)
 800169a:	f023 0308 	bic.w	r3, r3, #8
 800169e:	6153      	str	r3, [r2, #20]

    for (i = 0; i < 64; i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e00a      	b.n	80016bc <glcd_clearline+0x54>
        glcd_putchar(0, 0); // Print 0 for Delete Left section
 80016a6:	2100      	movs	r1, #0
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fbed 	bl	8000e88 <glcd_putchar>
        glcd_putchar(0, 64); // Print 0 for Delete Right section
 80016ae:	2140      	movs	r1, #64	@ 0x40
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fbe9 	bl	8000e88 <glcd_putchar>
    for (i = 0; i < 64; i++) {
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b3f      	cmp	r3, #63	@ 0x3f
 80016c0:	ddf1      	ble.n	80016a6 <glcd_clearline+0x3e>
    }
    glcd_gotoxy(64, line); // At start of line of right side
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	2040      	movs	r0, #64	@ 0x40
 80016ca:	f7ff fdd9 	bl	8001280 <glcd_gotoxy>
    for (i = 0; i < 64; i++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e00a      	b.n	80016ea <glcd_clearline+0x82>
        glcd_putchar(0, 0); // Print 0 for Delete Left section
 80016d4:	2100      	movs	r1, #0
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fbd6 	bl	8000e88 <glcd_putchar>
        glcd_putchar(0, 64); // Print 0 for Delete Right section
 80016dc:	2140      	movs	r1, #64	@ 0x40
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fbd2 	bl	8000e88 <glcd_putchar>
    for (i = 0; i < 64; i++) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80016ee:	ddf1      	ble.n	80016d4 <glcd_clearline+0x6c>
    }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40020000 	.word	0x40020000

08001700 <glcd_clear_all>:

void glcd_clear_all() {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 8; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	e006      	b.n	800171a <glcd_clear_all+0x1a>
        glcd_clearline(i);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ffaa 	bl	8001668 <glcd_clearline>
    for (i = 0; i < 8; i++)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3301      	adds	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b07      	cmp	r3, #7
 800171e:	ddf5      	ble.n	800170c <glcd_clear_all+0xc>
    send_command(0x40); // SET Cursor on Y=0
 8001720:	2040      	movs	r0, #64	@ 0x40
 8001722:	f7ff fab5 	bl	8000c90 <send_command>
    send_command(0xB8); // SET Page on X=0, Line=0
 8001726:	20b8      	movs	r0, #184	@ 0xb8
 8001728:	f7ff fab2 	bl	8000c90 <send_command>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <GLCD_INIT>:
	}
}
//-------------------------------------
//Function For Initialize GLCD Pins
// Function For Initialize GLCD Pins
void GLCD_INIT(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
//    RESET_PORT->BSRR = (1 << RESET_PIN_NUMBER); // Set reset pin high
//    Delay(10); // Wait for a short period
//    RESET_PORT->BSRR = (1 << (RESET_PIN_NUMBER + 16)); // Set reset pin low
//    Delay(10); // Wait for a short period
//    RESET_PORT->BSRR = (1 << RESET_PIN_NUMBER); // Set reset pin high
    Delay(10); // Wait for a short period
 8001738:	200a      	movs	r0, #10
 800173a:	f7ff fa91 	bl	8000c60 <Delay>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <toDisplay>:
		 ITM_SendChar(*ptr++);
	 }
	 return len;
 }

void toDisplay() {						//reads sectors from the SPI flash memory and updates the eepDisplay
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af02      	add	r7, sp, #8
	for (int i = 0; i < 16; ++i) {
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	e008      	b.n	8001762 <toDisplay+0x1e>
		eepDisplay[i] = -1;
 8001750:	4a19      	ldr	r2, [pc, #100]	@ (80017b8 <toDisplay+0x74>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 16; ++i) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3301      	adds	r3, #1
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	ddf3      	ble.n	8001750 <toDisplay+0xc>
	}
	count = 0;
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <toDisplay+0x78>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	e019      	b.n	80017a8 <toDisplay+0x64>
		SPIF_ReadSector(&spif, i, read, 1, 0);
 8001774:	6839      	ldr	r1, [r7, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	4a10      	ldr	r2, [pc, #64]	@ (80017c0 <toDisplay+0x7c>)
 800177e:	4811      	ldr	r0, [pc, #68]	@ (80017c4 <toDisplay+0x80>)
 8001780:	f004 f89a 	bl	80058b8 <SPIF_ReadSector>
		if (read[0] != 255) {
 8001784:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <toDisplay+0x7c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2bff      	cmp	r3, #255	@ 0xff
 800178a:	d00a      	beq.n	80017a2 <toDisplay+0x5e>
			eepDisplay[count] = i;
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <toDisplay+0x78>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4909      	ldr	r1, [pc, #36]	@ (80017b8 <toDisplay+0x74>)
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			count++;
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <toDisplay+0x78>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <toDisplay+0x78>)
 80017a0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 16; i++) {
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	dde2      	ble.n	8001774 <toDisplay+0x30>
		}
	}
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000052c 	.word	0x2000052c
 80017bc:	20000570 	.word	0x20000570
 80017c0:	2000058c 	.word	0x2000058c
 80017c4:	200004f8 	.word	0x200004f8

080017c8 <toAdd>:

void toAdd(const char* dN, int dM, int dK) {		//adds a new entry to the first available empty sector in the SPI flash memory
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 16; i ++) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e044      	b.n	8001864 <toAdd+0x9c>
	SPIF_ReadSector(&spif, i, read, 1, 0);
 80017da:	6979      	ldr	r1, [r7, #20]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2301      	movs	r3, #1
 80017e2:	4a24      	ldr	r2, [pc, #144]	@ (8001874 <toAdd+0xac>)
 80017e4:	4824      	ldr	r0, [pc, #144]	@ (8001878 <toAdd+0xb0>)
 80017e6:	f004 f867 	bl	80058b8 <SPIF_ReadSector>
    if (read[0] == 255) {
 80017ea:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <toAdd+0xac>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2bff      	cmp	r3, #255	@ 0xff
 80017f0:	d135      	bne.n	800185e <toAdd+0x96>
      for (int j = 0; j < 7; j++) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	e010      	b.n	800181a <toAdd+0x52>
    	write[0] = dN[j];
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <toAdd+0xb4>)
 8001802:	701a      	strb	r2, [r3, #0]
    	SPIF_WriteSector(&spif, i, write, 1, j);
 8001804:	6979      	ldr	r1, [r7, #20]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2301      	movs	r3, #1
 800180c:	4a1b      	ldr	r2, [pc, #108]	@ (800187c <toAdd+0xb4>)
 800180e:	481a      	ldr	r0, [pc, #104]	@ (8001878 <toAdd+0xb0>)
 8001810:	f003 ffe8 	bl	80057e4 <SPIF_WriteSector>
      for (int j = 0; j < 7; j++) {
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	3301      	adds	r3, #1
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b06      	cmp	r3, #6
 800181e:	ddeb      	ble.n	80017f8 <toAdd+0x30>
      }
	  write[0] = dM;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b15      	ldr	r3, [pc, #84]	@ (800187c <toAdd+0xb4>)
 8001826:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, i, write, 1, 7);
 8001828:	6979      	ldr	r1, [r7, #20]
 800182a:	2307      	movs	r3, #7
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	4a12      	ldr	r2, [pc, #72]	@ (800187c <toAdd+0xb4>)
 8001832:	4811      	ldr	r0, [pc, #68]	@ (8001878 <toAdd+0xb0>)
 8001834:	f003 ffd6 	bl	80057e4 <SPIF_WriteSector>
	  write[0] = dK/25;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a11      	ldr	r2, [pc, #68]	@ (8001880 <toAdd+0xb8>)
 800183c:	fb82 1203 	smull	r1, r2, r2, r3
 8001840:	10d2      	asrs	r2, r2, #3
 8001842:	17db      	asrs	r3, r3, #31
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <toAdd+0xb4>)
 800184a:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, i, write, 1, 8);
 800184c:	6979      	ldr	r1, [r7, #20]
 800184e:	2308      	movs	r3, #8
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	4a09      	ldr	r2, [pc, #36]	@ (800187c <toAdd+0xb4>)
 8001856:	4808      	ldr	r0, [pc, #32]	@ (8001878 <toAdd+0xb0>)
 8001858:	f003 ffc4 	bl	80057e4 <SPIF_WriteSector>
      break;
 800185c:	e006      	b.n	800186c <toAdd+0xa4>
  for (int i = 0; i < 16; i ++) {
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b0f      	cmp	r3, #15
 8001868:	ddb7      	ble.n	80017da <toAdd+0x12>
    }
  }
}
 800186a:	bf00      	nop
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2000058c 	.word	0x2000058c
 8001878:	200004f8 	.word	0x200004f8
 800187c:	20000590 	.word	0x20000590
 8001880:	51eb851f 	.word	0x51eb851f

08001884 <toDelete>:

void toDelete(int index) {		//erases a specific sector in the SPI flash memory, effectively marking it as empty.
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	SPIF_EraseSector(&spif, index);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4619      	mov	r1, r3
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <toDelete+0x1c>)
 8001892:	f003 ff24 	bl	80056de <SPIF_EraseSector>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200004f8 	.word	0x200004f8

080018a4 <storestate>:

void storestate() { // called when turned off			stores the current state of the system in a specific sector of the SPI flash memory.
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af02      	add	r7, sp, #8
  SPIF_EraseSector(&spif, 20);
 80018aa:	2114      	movs	r1, #20
 80018ac:	482b      	ldr	r0, [pc, #172]	@ (800195c <storestate+0xb8>)
 80018ae:	f003 ff16 	bl	80056de <SPIF_EraseSector>
  write[0] = MHz;
 80018b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001960 <storestate+0xbc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <storestate+0xc0>)
 80018ba:	701a      	strb	r2, [r3, #0]
  SPIF_WriteSector(&spif, 20, write, 1, 0);
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2301      	movs	r3, #1
 80018c2:	4a28      	ldr	r2, [pc, #160]	@ (8001964 <storestate+0xc0>)
 80018c4:	2114      	movs	r1, #20
 80018c6:	4825      	ldr	r0, [pc, #148]	@ (800195c <storestate+0xb8>)
 80018c8:	f003 ff8c 	bl	80057e4 <SPIF_WriteSector>
  write[0] = KHz/25;
 80018cc:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <storestate+0xc4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a26      	ldr	r2, [pc, #152]	@ (800196c <storestate+0xc8>)
 80018d2:	fb82 1203 	smull	r1, r2, r2, r3
 80018d6:	10d2      	asrs	r2, r2, #3
 80018d8:	17db      	asrs	r3, r3, #31
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <storestate+0xc0>)
 80018e0:	701a      	strb	r2, [r3, #0]
  SPIF_WriteSector(&spif, 20, write, 1, 1);
 80018e2:	2301      	movs	r3, #1
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <storestate+0xc0>)
 80018ea:	2114      	movs	r1, #20
 80018ec:	481b      	ldr	r0, [pc, #108]	@ (800195c <storestate+0xb8>)
 80018ee:	f003 ff79 	bl	80057e4 <SPIF_WriteSector>
  write[0] = SM;
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <storestate+0xcc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <storestate+0xc0>)
 80018fa:	701a      	strb	r2, [r3, #0]
  SPIF_WriteSector(&spif, 20, write, 1, 2);
 80018fc:	2302      	movs	r3, #2
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2301      	movs	r3, #1
 8001902:	4a18      	ldr	r2, [pc, #96]	@ (8001964 <storestate+0xc0>)
 8001904:	2114      	movs	r1, #20
 8001906:	4815      	ldr	r0, [pc, #84]	@ (800195c <storestate+0xb8>)
 8001908:	f003 ff6c 	bl	80057e4 <SPIF_WriteSector>
  write[0] = SK/25;
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <storestate+0xd0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a16      	ldr	r2, [pc, #88]	@ (800196c <storestate+0xc8>)
 8001912:	fb82 1203 	smull	r1, r2, r2, r3
 8001916:	10d2      	asrs	r2, r2, #3
 8001918:	17db      	asrs	r3, r3, #31
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <storestate+0xc0>)
 8001920:	701a      	strb	r2, [r3, #0]
  SPIF_WriteSector(&spif, 20, write, 1, 3);
 8001922:	2303      	movs	r3, #3
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	4a0e      	ldr	r2, [pc, #56]	@ (8001964 <storestate+0xc0>)
 800192a:	2114      	movs	r1, #20
 800192c:	480b      	ldr	r0, [pc, #44]	@ (800195c <storestate+0xb8>)
 800192e:	f003 ff59 	bl	80057e4 <SPIF_WriteSector>
  write[0] = vol;
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <storestate+0xd4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <storestate+0xc0>)
 800193a:	701a      	strb	r2, [r3, #0]
  SPIF_WriteSector(&spif, 20, write, 1, 4);
 800193c:	2304      	movs	r3, #4
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2301      	movs	r3, #1
 8001942:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <storestate+0xc0>)
 8001944:	2114      	movs	r1, #20
 8001946:	4805      	ldr	r0, [pc, #20]	@ (800195c <storestate+0xb8>)
 8001948:	f003 ff4c 	bl	80057e4 <SPIF_WriteSector>
  write[0] = obs;
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <storestate+0xd8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <storestate+0xc0>)
 8001954:	701a      	strb	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200004f8 	.word	0x200004f8
 8001960:	20000000 	.word	0x20000000
 8001964:	20000590 	.word	0x20000590
 8001968:	2000051c 	.word	0x2000051c
 800196c:	51eb851f 	.word	0x51eb851f
 8001970:	20000008 	.word	0x20000008
 8001974:	20000520 	.word	0x20000520
 8001978:	20000524 	.word	0x20000524
 800197c:	2000057c 	.word	0x2000057c

08001980 <loadstate>:

void loadstate() { // called on startup					loads the system state from a specific sector in the SPI flash memory on startup.
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af02      	add	r7, sp, #8
  SPIF_ReadSector(&spif, 20, read, 1, 0);
 8001986:	2300      	movs	r3, #0
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ac8 <loadstate+0x148>)
 800198e:	2114      	movs	r1, #20
 8001990:	484e      	ldr	r0, [pc, #312]	@ (8001acc <loadstate+0x14c>)
 8001992:	f003 ff91 	bl	80058b8 <SPIF_ReadSector>
  MHz = read[0];
 8001996:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac8 <loadstate+0x148>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad0 <loadstate+0x150>)
 800199e:	601a      	str	r2, [r3, #0]
  SPIF_ReadSector(&spif, 20, read, 1, 1);
 80019a0:	2301      	movs	r3, #1
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2301      	movs	r3, #1
 80019a6:	4a48      	ldr	r2, [pc, #288]	@ (8001ac8 <loadstate+0x148>)
 80019a8:	2114      	movs	r1, #20
 80019aa:	4848      	ldr	r0, [pc, #288]	@ (8001acc <loadstate+0x14c>)
 80019ac:	f003 ff84 	bl	80058b8 <SPIF_ReadSector>
  KHz = read[0] * 25;
 80019b0:	4b45      	ldr	r3, [pc, #276]	@ (8001ac8 <loadstate+0x148>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	4a44      	ldr	r2, [pc, #272]	@ (8001ad4 <loadstate+0x154>)
 80019c2:	6013      	str	r3, [r2, #0]
  SPIF_ReadSector(&spif, 20, read, 1, 2);
 80019c4:	2302      	movs	r3, #2
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2301      	movs	r3, #1
 80019ca:	4a3f      	ldr	r2, [pc, #252]	@ (8001ac8 <loadstate+0x148>)
 80019cc:	2114      	movs	r1, #20
 80019ce:	483f      	ldr	r0, [pc, #252]	@ (8001acc <loadstate+0x14c>)
 80019d0:	f003 ff72 	bl	80058b8 <SPIF_ReadSector>
  SM = read[0];
 80019d4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac8 <loadstate+0x148>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <loadstate+0x158>)
 80019dc:	601a      	str	r2, [r3, #0]
  SPIF_ReadSector(&spif, 20, read, 1, 3);
 80019de:	2303      	movs	r3, #3
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2301      	movs	r3, #1
 80019e4:	4a38      	ldr	r2, [pc, #224]	@ (8001ac8 <loadstate+0x148>)
 80019e6:	2114      	movs	r1, #20
 80019e8:	4838      	ldr	r0, [pc, #224]	@ (8001acc <loadstate+0x14c>)
 80019ea:	f003 ff65 	bl	80058b8 <SPIF_ReadSector>
  SK = read[0] * 25;
 80019ee:	4b36      	ldr	r3, [pc, #216]	@ (8001ac8 <loadstate+0x148>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	009a      	lsls	r2, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	4a37      	ldr	r2, [pc, #220]	@ (8001adc <loadstate+0x15c>)
 8001a00:	6013      	str	r3, [r2, #0]
  SPIF_ReadSector(&spif, 20, read, 1, 4);	//1 is not bytes to be read
 8001a02:	2304      	movs	r3, #4
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2301      	movs	r3, #1
 8001a08:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac8 <loadstate+0x148>)
 8001a0a:	2114      	movs	r1, #20
 8001a0c:	482f      	ldr	r0, [pc, #188]	@ (8001acc <loadstate+0x14c>)
 8001a0e:	f003 ff53 	bl	80058b8 <SPIF_ReadSector>
  vol = read[0];
 8001a12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <loadstate+0x148>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <loadstate+0x160>)
 8001a1a:	601a      	str	r2, [r3, #0]
  SPIF_ReadSector(&spif, 20, read, 1, 5);	//5 is Offset: The starting point within the sector to begin reading from.
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2301      	movs	r3, #1
 8001a22:	4a29      	ldr	r2, [pc, #164]	@ (8001ac8 <loadstate+0x148>)
 8001a24:	2114      	movs	r1, #20
 8001a26:	4829      	ldr	r0, [pc, #164]	@ (8001acc <loadstate+0x14c>)
 8001a28:	f003 ff46 	bl	80058b8 <SPIF_ReadSector>
  obs = read[0];
 8001a2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <loadstate+0x148>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <loadstate+0x164>)
 8001a34:	601a      	str	r2, [r3, #0]
  freq = MHz + (.001 * KHz);
 8001a36:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <loadstate+0x150>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fe9c 	bl	8000778 <__aeabi_i2d>
 8001a40:	4604      	mov	r4, r0
 8001a42:	460d      	mov	r5, r1
 8001a44:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <loadstate+0x154>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fe95 	bl	8000778 <__aeabi_i2d>
 8001a4e:	a31c      	add	r3, pc, #112	@ (adr r3, 8001ac0 <loadstate+0x140>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fc14 	bl	8000280 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fd3e 	bl	80004e0 <__adddf3>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7fe ff16 	bl	800089c <__aeabi_d2f>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae8 <loadstate+0x168>)
 8001a74:	6013      	str	r3, [r2, #0]
  Standby = SM + (.001 * SK);
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <loadstate+0x158>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fe7c 	bl	8000778 <__aeabi_i2d>
 8001a80:	4604      	mov	r4, r0
 8001a82:	460d      	mov	r5, r1
 8001a84:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <loadstate+0x15c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fe75 	bl	8000778 <__aeabi_i2d>
 8001a8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001ac0 <loadstate+0x140>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fbf4 	bl	8000280 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f7fe fd1e 	bl	80004e0 <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7fe fef6 	bl	800089c <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8001aec <loadstate+0x16c>)
 8001ab4:	6013      	str	r3, [r2, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bdb0      	pop	{r4, r5, r7, pc}
 8001abc:	f3af 8000 	nop.w
 8001ac0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ac4:	3f50624d 	.word	0x3f50624d
 8001ac8:	2000058c 	.word	0x2000058c
 8001acc:	200004f8 	.word	0x200004f8
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	2000051c 	.word	0x2000051c
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000520 	.word	0x20000520
 8001ae0:	20000524 	.word	0x20000524
 8001ae4:	2000057c 	.word	0x2000057c
 8001ae8:	20000518 	.word	0x20000518
 8001aec:	20000004 	.word	0x20000004

08001af0 <millis>:
uint32_t millis() {								//returns the number of ticks since the RTOS started, effectively providing a millisecond timer.
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  return xTaskGetTickCount();
 8001af4:	f007 ff5c 	bl	80099b0 <xTaskGetTickCount>
 8001af8:	4603      	mov	r3, r0
};
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
osThreadId Task2handler;
void task2_init(void const * argument);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001b78 <HAL_UART_RxCpltCallback+0x78>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d114      	bne.n	8001b3c <HAL_UART_RxCpltCallback+0x3c>
        // Process data from UART4
        rxmsg[rxcount] = rxbuff[0];
 8001b12:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <HAL_UART_RxCpltCallback+0x7c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1a      	ldr	r2, [pc, #104]	@ (8001b80 <HAL_UART_RxCpltCallback+0x80>)
 8001b18:	7811      	ldrb	r1, [r2, #0]
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <HAL_UART_RxCpltCallback+0x84>)
 8001b1c:	54d1      	strb	r1, [r2, r3]
        rxcount++;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <HAL_UART_RxCpltCallback+0x7c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <HAL_UART_RxCpltCallback+0x7c>)
 8001b26:	6013      	str	r3, [r2, #0]
        response = HAL_UART_Receive_IT(&huart4, rxbuff, 1); // Restart UART4 reception
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4915      	ldr	r1, [pc, #84]	@ (8001b80 <HAL_UART_RxCpltCallback+0x80>)
 8001b2c:	4816      	ldr	r0, [pc, #88]	@ (8001b88 <HAL_UART_RxCpltCallback+0x88>)
 8001b2e:	f006 fc17 	bl	8008360 <HAL_UART_Receive_IT>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_UART_RxCpltCallback+0x8c>)
 8001b38:	701a      	strb	r2, [r3, #0]
        // Process data from UART5
        rxmsgcdu[rxcountcdu] = rxbuffcdu[0];
        rxcountcdu++;
        responseCDU = HAL_UART_Receive_IT(&huart5, rxbuffcdu, 1); // Restart UART5 reception
    }
}
 8001b3a:	e018      	b.n	8001b6e <HAL_UART_RxCpltCallback+0x6e>
    } else if (huart->Instance == UART5) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <HAL_UART_RxCpltCallback+0x90>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d113      	bne.n	8001b6e <HAL_UART_RxCpltCallback+0x6e>
        rxmsgcdu[rxcountcdu] = rxbuffcdu[0];
 8001b46:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <HAL_UART_RxCpltCallback+0x94>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a13      	ldr	r2, [pc, #76]	@ (8001b98 <HAL_UART_RxCpltCallback+0x98>)
 8001b4c:	7811      	ldrb	r1, [r2, #0]
 8001b4e:	4a13      	ldr	r2, [pc, #76]	@ (8001b9c <HAL_UART_RxCpltCallback+0x9c>)
 8001b50:	54d1      	strb	r1, [r2, r3]
        rxcountcdu++;
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_UART_RxCpltCallback+0x94>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	4a0e      	ldr	r2, [pc, #56]	@ (8001b94 <HAL_UART_RxCpltCallback+0x94>)
 8001b5a:	6013      	str	r3, [r2, #0]
        responseCDU = HAL_UART_Receive_IT(&huart5, rxbuffcdu, 1); // Restart UART5 reception
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	490e      	ldr	r1, [pc, #56]	@ (8001b98 <HAL_UART_RxCpltCallback+0x98>)
 8001b60:	480f      	ldr	r0, [pc, #60]	@ (8001ba0 <HAL_UART_RxCpltCallback+0xa0>)
 8001b62:	f006 fbfd 	bl	8008360 <HAL_UART_Receive_IT>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <HAL_UART_RxCpltCallback+0xa4>)
 8001b6c:	701a      	strb	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40004c00 	.word	0x40004c00
 8001b7c:	200005b4 	.word	0x200005b4
 8001b80:	20000594 	.word	0x20000594
 8001b84:	20000598 	.word	0x20000598
 8001b88:	2000038c 	.word	0x2000038c
 8001b8c:	200005c1 	.word	0x200005c1
 8001b90:	40005000 	.word	0x40005000
 8001b94:	20000618 	.word	0x20000618
 8001b98:	200005f8 	.word	0x200005f8
 8001b9c:	200005fc 	.word	0x200005fc
 8001ba0:	200003d4 	.word	0x200003d4
 8001ba4:	200005f4 	.word	0x200005f4

08001ba8 <main>:

osThreadId Task3handler;

int main(void)
{
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b096      	sub	sp, #88	@ 0x58
 8001bac:	af00      	add	r7, sp, #0


  HAL_Init();
 8001bae:	f004 f9ad 	bl	8005f0c <HAL_Init>


  SystemClock_Config();
 8001bb2:	f000 f887 	bl	8001cc4 <SystemClock_Config>


  MX_GPIO_Init();
 8001bb6:	f000 f9f5 	bl	8001fa4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001bba:	f000 f8eb 	bl	8001d94 <MX_SPI1_Init>
  MX_UART4_Init();
 8001bbe:	f000 f91f 	bl	8001e00 <MX_UART4_Init>
  MX_UART5_Init();
 8001bc2:	f000 f947 	bl	8001e54 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001bc6:	f000 f96f 	bl	8001ea8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001bca:	f000 f997 	bl	8001efc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001bce:	f000 f9bf 	bl	8001f50 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  SPIF_Init(&spif, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8001bd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8001c88 <main+0xe0>)
 8001bd8:	492c      	ldr	r1, [pc, #176]	@ (8001c8c <main+0xe4>)
 8001bda:	482d      	ldr	r0, [pc, #180]	@ (8001c90 <main+0xe8>)
 8001bdc:	f003 fd33 	bl	8005646 <SPIF_Init>
  toDisplay();
 8001be0:	f7ff fdb0 	bl	8001744 <toDisplay>
  GLCD_INIT();		//setting up the display controller, setting display parameters (contrast, brightness), and preparing the display for use.
 8001be4:	f7ff fda6 	bl	8001734 <GLCD_INIT>
  loadstate();
 8001be8:	f7ff feca 	bl	8001980 <loadstate>

  responseCDU = HAL_UART_Receive_IT(&huart5, rxbuffcdu, 1); // Start UART5 in interrupt mode
 8001bec:	2201      	movs	r2, #1
 8001bee:	4929      	ldr	r1, [pc, #164]	@ (8001c94 <main+0xec>)
 8001bf0:	4829      	ldr	r0, [pc, #164]	@ (8001c98 <main+0xf0>)
 8001bf2:	f006 fbb5 	bl	8008360 <HAL_UART_Receive_IT>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <main+0xf4>)
 8001bfc:	701a      	strb	r2, [r3, #0]
  response = HAL_UART_Receive_IT(&huart4, rxbuff, 1); // Start UART4 in interrupt mode
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4927      	ldr	r1, [pc, #156]	@ (8001ca0 <main+0xf8>)
 8001c02:	4828      	ldr	r0, [pc, #160]	@ (8001ca4 <main+0xfc>)
 8001c04:	f006 fbac 	bl	8008360 <HAL_UART_Receive_IT>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <main+0x100>)
 8001c0e:	701a      	strb	r2, [r3, #0]

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8001c10:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <main+0x104>)
 8001c12:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001c16:	461d      	mov	r5, r3
 8001c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c24:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f007 fb33 	bl	8009296 <osThreadCreate>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb0 <main+0x108>)
 8001c34:	6013      	str	r3, [r2, #0]

  osThreadDef(Task2, task2_init, osPriorityNormal, 0, 128);	//128 is stack size (in bytes) requirements for the thread function.
 8001c36:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <main+0x10c>)
 8001c38:	f107 0420 	add.w	r4, r7, #32
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2handler = osThreadCreate(osThread(Task2), NULL);
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f007 fb20 	bl	8009296 <osThreadCreate>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a17      	ldr	r2, [pc, #92]	@ (8001cb8 <main+0x110>)
 8001c5a:	6013      	str	r3, [r2, #0]

  osThreadDef(Task3, task3_init, osPriorityNormal, 0, 128);	//128 is stack size (in bytes) requirements for the thread function.
 8001c5c:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <main+0x114>)
 8001c5e:	1d3c      	adds	r4, r7, #4
 8001c60:	461d      	mov	r5, r3
 8001c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3handler = osThreadCreate(osThread(Task3), NULL);
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f007 fb0f 	bl	8009296 <osThreadCreate>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4a11      	ldr	r2, [pc, #68]	@ (8001cc0 <main+0x118>)
 8001c7c:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8001c7e:	f007 fb03 	bl	8009288 <osKernelStart>

  while (1)
 8001c82:	bf00      	nop
 8001c84:	e7fd      	b.n	8001c82 <main+0xda>
 8001c86:	bf00      	nop
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	20000334 	.word	0x20000334
 8001c90:	200004f8 	.word	0x200004f8
 8001c94:	200005f8 	.word	0x200005f8
 8001c98:	200003d4 	.word	0x200003d4
 8001c9c:	200005f4 	.word	0x200005f4
 8001ca0:	20000594 	.word	0x20000594
 8001ca4:	2000038c 	.word	0x2000038c
 8001ca8:	200005c1 	.word	0x200005c1
 8001cac:	0800b03c 	.word	0x0800b03c
 8001cb0:	200004f4 	.word	0x200004f4
 8001cb4:	0800b060 	.word	0x0800b060
 8001cb8:	200005c4 	.word	0x200005c4
 8001cbc:	0800b084 	.word	0x0800b084
 8001cc0:	200005c8 	.word	0x200005c8

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	@ 0x50
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0320 	add.w	r3, r7, #32
 8001cce:	2230      	movs	r2, #48	@ 0x30
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f008 fcca 	bl	800a66c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	4b27      	ldr	r3, [pc, #156]	@ (8001d8c <SystemClock_Config+0xc8>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	4a26      	ldr	r2, [pc, #152]	@ (8001d8c <SystemClock_Config+0xc8>)
 8001cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf8:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <SystemClock_Config+0xc8>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <SystemClock_Config+0xcc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a20      	ldr	r2, [pc, #128]	@ (8001d90 <SystemClock_Config+0xcc>)
 8001d0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <SystemClock_Config+0xcc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d24:	2301      	movs	r3, #1
 8001d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d28:	2310      	movs	r3, #16
 8001d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d30:	2300      	movs	r3, #0
 8001d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d34:	2308      	movs	r3, #8
 8001d36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d38:	23a8      	movs	r3, #168	@ 0xa8
 8001d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d40:	2307      	movs	r3, #7
 8001d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 fc87 	bl	800665c <HAL_RCC_OscConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d54:	f002 fe7c 	bl	8004a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d58:	230f      	movs	r3, #15
 8001d5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001d60:	2390      	movs	r3, #144	@ 0x90
 8001d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2101      	movs	r1, #1
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 feea 	bl	8006b4c <HAL_RCC_ClockConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001d7e:	f002 fe67 	bl	8004a50 <Error_Handler>
  }
}
 8001d82:	bf00      	nop
 8001d84:	3750      	adds	r7, #80	@ 0x50
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40007000 	.word	0x40007000

08001d94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d98:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001d9a:	4a18      	ldr	r2, [pc, #96]	@ (8001dfc <MX_SPI1_Init+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001da0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001da6:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db2:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001dc8:	2218      	movs	r2, #24
 8001dca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001de0:	220a      	movs	r2, #10
 8001de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	@ (8001df8 <MX_SPI1_Init+0x64>)
 8001de6:	f005 f903 	bl	8006ff0 <HAL_SPI_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001df0:	f002 fe2e 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000334 	.word	0x20000334
 8001dfc:	40013000 	.word	0x40013000

08001e00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <MX_UART4_Init+0x4c>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	@ (8001e50 <MX_UART4_Init+0x50>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <MX_UART4_Init+0x4c>)
 8001e0c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MX_UART4_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <MX_UART4_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <MX_UART4_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <MX_UART4_Init+0x4c>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <MX_UART4_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <MX_UART4_Init+0x4c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	@ (8001e4c <MX_UART4_Init+0x4c>)
 8001e38:	f006 f94e 	bl	80080d8 <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e42:	f002 fe05 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000038c 	.word	0x2000038c
 8001e50:	40004c00 	.word	0x40004c00

08001e54 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_UART5_Init+0x4c>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <MX_UART5_Init+0x50>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <MX_UART5_Init+0x4c>)
 8001e60:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <MX_UART5_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <MX_UART5_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <MX_UART5_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <MX_UART5_Init+0x4c>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <MX_UART5_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <MX_UART5_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart5, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4804      	ldr	r0, [pc, #16]	@ (8001ea0 <MX_UART5_Init+0x4c>)
 8001e8e:	f006 f973 	bl	8008178 <HAL_LIN_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_UART5_Init+0x48>
  {
    Error_Handler();
 8001e98:	f002 fdda 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200003d4 	.word	0x200003d4
 8001ea4:	40005000 	.word	0x40005000

08001ea8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	@ (8001ef8 <MX_USART1_UART_Init+0x50>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ede:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	f006 f8fa 	bl	80080d8 <HAL_UART_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eea:	f002 fdb1 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000041c 	.word	0x2000041c
 8001ef8:	40011000 	.word	0x40011000

08001efc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f00:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <MX_USART2_UART_Init+0x50>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f08:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <MX_USART2_UART_Init+0x4c>)
 8001f34:	f006 f8d0 	bl	80080d8 <HAL_UART_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f3e:	f002 fd87 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000464 	.word	0x20000464
 8001f4c:	40004400 	.word	0x40004400

08001f50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <MX_USART3_UART_Init+0x50>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f88:	f006 f8a6 	bl	80080d8 <HAL_UART_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f92:	f002 fd5d 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200004ac 	.word	0x200004ac
 8001fa0:	40004800 	.word	0x40004800

08001fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4bb0      	ldr	r3, [pc, #704]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4aaf      	ldr	r2, [pc, #700]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4bad      	ldr	r3, [pc, #692]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4ba9      	ldr	r3, [pc, #676]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4aa8      	ldr	r2, [pc, #672]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4ba6      	ldr	r3, [pc, #664]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4ba2      	ldr	r3, [pc, #648]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4aa1      	ldr	r2, [pc, #644]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b9f      	ldr	r3, [pc, #636]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b9b      	ldr	r3, [pc, #620]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a9a      	ldr	r2, [pc, #616]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b98      	ldr	r3, [pc, #608]	@ (8002280 <MX_GPIO_Init+0x2dc>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, RELAY3_Pin|MCU_DTR3_Pin|LCD_DB1_Pin|LCD_RW_Pin
 800202a:	2200      	movs	r2, #0
 800202c:	f240 7194 	movw	r1, #1940	@ 0x794
 8002030:	4894      	ldr	r0, [pc, #592]	@ (8002284 <MX_GPIO_Init+0x2e0>)
 8002032:	f004 faf9 	bl	8006628 <HAL_GPIO_WritePin>
                            |LCD_E_Pin|LCD_DI_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LCD_BKL_Pin|LCD_RESET_Pin|LCD_CS2_Pin|LCD_CS1_Pin
 8002036:	2200      	movs	r2, #0
 8002038:	f649 11fe 	movw	r1, #39422	@ 0x99fe
 800203c:	4892      	ldr	r0, [pc, #584]	@ (8002288 <MX_GPIO_Init+0x2e4>)
 800203e:	f004 faf3 	bl	8006628 <HAL_GPIO_WritePin>
                            |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|KEY_COL4_Pin
                            |KEY_COL7_Pin|KEY_COL6_Pin|KEY_COL8_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LCD_DB4_Pin|LCD_DB2_Pin|KEY_COL0_Pin|KEY_COL3_Pin
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002048:	4890      	ldr	r0, [pc, #576]	@ (800228c <MX_GPIO_Init+0x2e8>)
 800204a:	f004 faed 	bl	8006628 <HAL_GPIO_WritePin>
                            |KEY_COL2_Pin|KEY_COL5_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LCD_DB3_Pin|LCD_DB0_Pin|MCU_DTR2_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f240 2183 	movw	r1, #643	@ 0x283
 8002054:	488e      	ldr	r0, [pc, #568]	@ (8002290 <MX_GPIO_Init+0x2ec>)
 8002056:	f004 fae7 	bl	8006628 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, KEY_COL1_Pin|KEY_COL9_Pin|RELAY1_Pin|MCU_DTR1_Pin
 800205a:	2200      	movs	r2, #0
 800205c:	f248 0199 	movw	r1, #32921	@ 0x8099
 8002060:	488c      	ldr	r0, [pc, #560]	@ (8002294 <MX_GPIO_Init+0x2f0>)
 8002062:	f004 fae1 	bl	8006628 <HAL_GPIO_WritePin>
                            |RELAY2_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pins : RELAY3_Pin MCU_DTR3_Pin LCD_DB1_Pin LCD_RW_Pin
                             LCD_E_Pin LCD_DI_Pin */
    GPIO_InitStruct.Pin = RELAY3_Pin|MCU_DTR3_Pin|LCD_DB1_Pin|LCD_RW_Pin
 8002066:	f240 7394 	movw	r3, #1940	@ 0x794
 800206a:	617b      	str	r3, [r7, #20]
                            |LCD_E_Pin|LCD_DI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206c:	2301      	movs	r3, #1
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4881      	ldr	r0, [pc, #516]	@ (8002284 <MX_GPIO_Init+0x2e0>)
 8002080:	f004 f91e 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : MCU_DSR3_Pin GP_SW4_Pin GP_SW5_Pin GP_SW1_Pin
                             GP_SW2_Pin GP_SW3_Pin RIGHT_SW_Pin */
    GPIO_InitStruct.Pin = MCU_DSR3_Pin|GP_SW4_Pin|GP_SW5_Pin|GP_SW1_Pin
 8002084:	f647 0368 	movw	r3, #30824	@ 0x7868
 8002088:	617b      	str	r3, [r7, #20]
                            |GP_SW2_Pin|GP_SW3_Pin|RIGHT_SW_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	487a      	ldr	r0, [pc, #488]	@ (8002284 <MX_GPIO_Init+0x2e0>)
 800209a:	f004 f911 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : GP_SW6_Pin LEFT_SW_Pin */
    GPIO_InitStruct.Pin = GP_SW6_Pin|LEFT_SW_Pin;
 800209e:	f242 0301 	movw	r3, #8193	@ 0x2001
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4876      	ldr	r0, [pc, #472]	@ (800228c <MX_GPIO_Init+0x2e8>)
 80020b4:	f004 f904 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC14 PC15 */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80020b8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020be:	2303      	movs	r3, #3
 80020c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	4870      	ldr	r0, [pc, #448]	@ (800228c <MX_GPIO_Init+0x2e8>)
 80020ca:	f004 f8f9 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : LEFT_A1_Pin LEFT_B1_Pin LEFT_B2_Pin */
    GPIO_InitStruct.Pin = LEFT_A1_Pin|LEFT_B1_Pin|LEFT_B2_Pin;
 80020ce:	230e      	movs	r3, #14
 80020d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	486a      	ldr	r0, [pc, #424]	@ (800228c <MX_GPIO_Init+0x2e8>)
 80020e4:	f004 f8ec 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : LEFT_A2_Pin */
    GPIO_InitStruct.Pin = LEFT_A2_Pin;
 80020e8:	2301      	movs	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEFT_A2_GPIO_Port, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	4862      	ldr	r0, [pc, #392]	@ (8002288 <MX_GPIO_Init+0x2e4>)
 80020fe:	f004 f8df 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_BKL_Pin LCD_RESET_Pin LCD_CS2_Pin LCD_CS1_Pin
                             LCD_DB7_Pin LCD_DB6_Pin LCD_DB5_Pin KEY_COL4_Pin
                             KEY_COL7_Pin KEY_COL6_Pin KEY_COL8_Pin */
    GPIO_InitStruct.Pin = LCD_BKL_Pin|LCD_RESET_Pin|LCD_CS2_Pin|LCD_CS1_Pin
 8002102:	f649 13fe 	movw	r3, #39422	@ 0x99fe
 8002106:	617b      	str	r3, [r7, #20]
                            |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|KEY_COL4_Pin
                            |KEY_COL7_Pin|KEY_COL6_Pin|KEY_COL8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002108:	2301      	movs	r3, #1
 800210a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	485b      	ldr	r0, [pc, #364]	@ (8002288 <MX_GPIO_Init+0x2e4>)
 800211c:	f004 f8d0 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_DB4_Pin LCD_DB2_Pin KEY_COL0_Pin KEY_COL3_Pin
                             KEY_COL2_Pin KEY_COL5_Pin */
    GPIO_InitStruct.Pin = LCD_DB4_Pin|LCD_DB2_Pin|KEY_COL0_Pin|KEY_COL3_Pin
 8002120:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8002124:	617b      	str	r3, [r7, #20]
                            |KEY_COL2_Pin|KEY_COL5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2301      	movs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	4854      	ldr	r0, [pc, #336]	@ (800228c <MX_GPIO_Init+0x2e8>)
 800213a:	f004 f8c1 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_DB3_Pin LCD_DB0_Pin MCU_DTR2_Pin FLASH_CS_Pin */
    GPIO_InitStruct.Pin = LCD_DB3_Pin|LCD_DB0_Pin|MCU_DTR2_Pin|FLASH_CS_Pin;
 800213e:	f240 2383 	movw	r3, #643	@ 0x283
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002144:	2301      	movs	r3, #1
 8002146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	484e      	ldr	r0, [pc, #312]	@ (8002290 <MX_GPIO_Init+0x2ec>)
 8002158:	f004 f8b2 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : BOOT1_Pin KEY_ROW1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin|KEY_ROW1_Pin;
 800215c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	4847      	ldr	r0, [pc, #284]	@ (8002290 <MX_GPIO_Init+0x2ec>)
 8002172:	f004 f8a5 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : RIGHT_A1_Pin */
    GPIO_InitStruct.Pin = RIGHT_A1_Pin;
 8002176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RIGHT_A1_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	483d      	ldr	r0, [pc, #244]	@ (8002284 <MX_GPIO_Init+0x2e0>)
 800218e:	f004 f897 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : RIGHT_B1_Pin RIGHT_B2_Pin RIGHT_A2_Pin */
    GPIO_InitStruct.Pin = RIGHT_B1_Pin|RIGHT_B2_Pin|RIGHT_A2_Pin;
 8002192:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002198:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	4839      	ldr	r0, [pc, #228]	@ (8002290 <MX_GPIO_Init+0x2ec>)
 80021aa:	f004 f889 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : KEY_ROW0_Pin KEY_ROW3_Pin KEY_ROW2_Pin KEY_ROW5_Pin
                             KEY_ROW4_Pin KEY_ROW7_Pin KEY_ROW6_Pin MCU_DSR1_Pin */
    GPIO_InitStruct.Pin = KEY_ROW0_Pin|KEY_ROW3_Pin|KEY_ROW2_Pin|KEY_ROW5_Pin
 80021ae:	f647 7302 	movw	r3, #32514	@ 0x7f02
 80021b2:	617b      	str	r3, [r7, #20]
                            |KEY_ROW4_Pin|KEY_ROW7_Pin|KEY_ROW6_Pin|MCU_DSR1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	4834      	ldr	r0, [pc, #208]	@ (8002294 <MX_GPIO_Init+0x2f0>)
 80021c4:	f004 f87c 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : KEY_COL1_Pin KEY_COL9_Pin RELAY1_Pin MCU_DTR1_Pin
                             RELAY2_Pin */
    GPIO_InitStruct.Pin = KEY_COL1_Pin|KEY_COL9_Pin|RELAY1_Pin|MCU_DTR1_Pin
 80021c8:	f248 0399 	movw	r3, #32921	@ 0x8099
 80021cc:	617b      	str	r3, [r7, #20]
                            |RELAY2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	482c      	ldr	r0, [pc, #176]	@ (8002294 <MX_GPIO_Init+0x2f0>)
 80021e2:	f004 f86d 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB6 */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021e6:	2340      	movs	r3, #64	@ 0x40
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4825      	ldr	r0, [pc, #148]	@ (8002290 <MX_GPIO_Init+0x2ec>)
 80021fa:	f004 f861 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB8 */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002204:	2303      	movs	r3, #3
 8002206:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4820      	ldr	r0, [pc, #128]	@ (8002290 <MX_GPIO_Init+0x2ec>)
 8002210:	f004 f856 	bl	80062c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PE0 PE1 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002214:	2303      	movs	r3, #3
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002218:	2303      	movs	r3, #3
 800221a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	4818      	ldr	r0, [pc, #96]	@ (8002284 <MX_GPIO_Init+0x2e0>)
 8002224:	f004 f84c 	bl	80062c0 <HAL_GPIO_Init>
//
//    /*Enables the Event Output */
//    HAL_GPIOEx_EnableEventout();

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2105      	movs	r1, #5
 800222c:	2006      	movs	r0, #6
 800222e:	f003 ff8b 	bl	8006148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002232:	2006      	movs	r0, #6
 8002234:	f003 ffa4 	bl	8006180 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2105      	movs	r1, #5
 800223c:	2007      	movs	r0, #7
 800223e:	f003 ff83 	bl	8006148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002242:	2007      	movs	r0, #7
 8002244:	f003 ff9c 	bl	8006180 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2105      	movs	r1, #5
 800224c:	2008      	movs	r0, #8
 800224e:	f003 ff7b 	bl	8006148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002252:	2008      	movs	r0, #8
 8002254:	f003 ff94 	bl	8006180 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2105      	movs	r1, #5
 800225c:	2009      	movs	r0, #9
 800225e:	f003 ff73 	bl	8006148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002262:	2009      	movs	r0, #9
 8002264:	f003 ff8c 	bl	8006180 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	2105      	movs	r1, #5
 800226c:	2028      	movs	r0, #40	@ 0x28
 800226e:	f003 ff6b 	bl	8006148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002272:	2028      	movs	r0, #40	@ 0x28
 8002274:	f003 ff84 	bl	8006180 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	@ 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	40021000 	.word	0x40021000
 8002288:	40020000 	.word	0x40020000
 800228c:	40020800 	.word	0x40020800
 8002290:	40020400 	.word	0x40020400
 8002294:	40020c00 	.word	0x40020c00

08002298 <checksum>:
	else if (GPIO_Pin == RIGHT_B2_Pin) { // RIGHT 2
		read_encoder();
	}
}

void checksum(const char* str, char* result) {				//calculates a checksum from a given string and stores the result in a character array
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
    unsigned int sum = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
    const char* ptr = str;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	60bb      	str	r3, [r7, #8]

    if (*ptr != '\0') {
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <checksum+0x34>
        ptr += 6;			//starting after the first 6 characters (possibly skipping a header like e.g: "$PMRRV")
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3306      	adds	r3, #6
 80022b6:	60bb      	str	r3, [r7, #8]
    }

    while (*ptr != '\0') {//// Loop through the rest of the string
 80022b8:	e008      	b.n	80022cc <checksum+0x34>
        sum += *ptr;		 // Sum up the ASCII values of the characters
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
        ptr++;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
    while (*ptr != '\0') {//// Loop through the rest of the string
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f2      	bne.n	80022ba <checksum+0x22>
    }

    sum &= 0xFF;	// Keep only the least significant byte of the sum
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	60fb      	str	r3, [r7, #12]

    result[0] = ((sum >> 4) & 0xF) + 0x30;	// Convert high nibble (4 bits) to ASCII
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	3330      	adds	r3, #48	@ 0x30
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	701a      	strb	r2, [r3, #0]
    result[1] = (sum & 0xF) + 0x30;			// Convert low nibble (4 bits) to ASCII
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	3230      	adds	r2, #48	@ 0x30
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    result[2] = '\0';
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3302      	adds	r3, #2
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <concatTwoChars>:

void concatTwoChars(char* base, const char* woo) {
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
    while (*base) { // Move to the end of the base string
 8002320:	e002      	b.n	8002328 <concatTwoChars+0x12>
        base++;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3301      	adds	r3, #1
 8002326:	607b      	str	r3, [r7, #4]
    while (*base) { // Move to the end of the base string
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f8      	bne.n	8002322 <concatTwoChars+0xc>
    }
    while (*woo) { // Copy the characters from toAdd
 8002330:	e009      	b.n	8002346 <concatTwoChars+0x30>
        *base = *woo;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	701a      	strb	r2, [r3, #0]
        base++;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3301      	adds	r3, #1
 800233e:	607b      	str	r3, [r7, #4]
        woo++;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	603b      	str	r3, [r7, #0]
    while (*woo) { // Copy the characters from toAdd
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f1      	bne.n	8002332 <concatTwoChars+0x1c>
    }
    *base = '\0'; // Null terminate the resulting string
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LCDPrint>:

void LCDPrint(char* str) { //TODO Should be done needs testing, issues should not be here though
 8002360:	b580      	push	{r7, lr}
 8002362:	b09c      	sub	sp, #112	@ 0x70
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	if (str[0] == 'x') {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b78      	cmp	r3, #120	@ 0x78
 800236e:	d109      	bne.n	8002384 <LCDPrint+0x24>
	  glcd_on();
 8002370:	f7fe fd6c 	bl	8000e4c <glcd_on>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8002374:	2201      	movs	r2, #1
 8002376:	2102      	movs	r1, #2
 8002378:	489e      	ldr	r0, [pc, #632]	@ (80025f4 <LCDPrint+0x294>)
 800237a:	f004 f955 	bl	8006628 <HAL_GPIO_WritePin>
	  glcd_clear_all();
 800237e:	f7ff f9bf 	bl	8001700 <glcd_clear_all>
	  }
	  else {
		glcd_puts("N", 118, 3);
	  }
	}
}
 8002382:	e2d0      	b.n	8002926 <LCDPrint+0x5c6>
	else if (str[0] == 'o') {
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b6f      	cmp	r3, #111	@ 0x6f
 800238a:	d107      	bne.n	800239c <LCDPrint+0x3c>
      glcd_off();
 800238c:	f7fe fd71 	bl	8000e72 <glcd_off>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	2102      	movs	r1, #2
 8002394:	4897      	ldr	r0, [pc, #604]	@ (80025f4 <LCDPrint+0x294>)
 8002396:	f004 f947 	bl	8006628 <HAL_GPIO_WritePin>
}
 800239a:	e2c4      	b.n	8002926 <LCDPrint+0x5c6>
	else if (str[0] == 'f') { //frequency
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b66      	cmp	r3, #102	@ 0x66
 80023a2:	f040 8091 	bne.w	80024c8 <LCDPrint+0x168>
	  sprintf(str0, "%0.3f", freq);
 80023a6:	4b94      	ldr	r3, [pc, #592]	@ (80025f8 <LCDPrint+0x298>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f9f6 	bl	800079c <__aeabi_f2d>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80023b8:	4990      	ldr	r1, [pc, #576]	@ (80025fc <LCDPrint+0x29c>)
 80023ba:	f008 f937 	bl	800a62c <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 80023be:	4b90      	ldr	r3, [pc, #576]	@ (8002600 <LCDPrint+0x2a0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f9ea 	bl	800079c <__aeabi_f2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80023d0:	498a      	ldr	r1, [pc, #552]	@ (80025fc <LCDPrint+0x29c>)
 80023d2:	f008 f92b 	bl	800a62c <siprintf>
	  glcd_puts("A", 2, 2);
 80023d6:	2202      	movs	r2, #2
 80023d8:	2102      	movs	r1, #2
 80023da:	488a      	ldr	r0, [pc, #552]	@ (8002604 <LCDPrint+0x2a4>)
 80023dc:	f7fe ff08 	bl	80011f0 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 80023e0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023e4:	2202      	movs	r2, #2
 80023e6:	210b      	movs	r1, #11
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ff01 	bl	80011f0 <glcd_puts>
	  glcd_puts(".", 34, 2);
 80023ee:	2202      	movs	r2, #2
 80023f0:	2122      	movs	r1, #34	@ 0x22
 80023f2:	4885      	ldr	r0, [pc, #532]	@ (8002608 <LCDPrint+0x2a8>)
 80023f4:	f7fe fefc 	bl	80011f0 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 80023f8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023fc:	3304      	adds	r3, #4
 80023fe:	2202      	movs	r2, #2
 8002400:	2126      	movs	r1, #38	@ 0x26
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fef4 	bl	80011f0 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 8002408:	2202      	movs	r2, #2
 800240a:	213e      	movs	r1, #62	@ 0x3e
 800240c:	487f      	ldr	r0, [pc, #508]	@ (800260c <LCDPrint+0x2ac>)
 800240e:	f7fe feef 	bl	80011f0 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 8002412:	2202      	movs	r2, #2
 8002414:	2142      	movs	r1, #66	@ 0x42
 8002416:	487e      	ldr	r0, [pc, #504]	@ (8002610 <LCDPrint+0x2b0>)
 8002418:	f7fe feea 	bl	80011f0 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 800241c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002420:	2202      	movs	r2, #2
 8002422:	214b      	movs	r1, #75	@ 0x4b
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe fee3 	bl	80011f0 <glcd_puts>
	  glcd_puts(".", 98, 2);
 800242a:	2202      	movs	r2, #2
 800242c:	2162      	movs	r1, #98	@ 0x62
 800242e:	4876      	ldr	r0, [pc, #472]	@ (8002608 <LCDPrint+0x2a8>)
 8002430:	f7fe fede 	bl	80011f0 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 8002434:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002438:	3304      	adds	r3, #4
 800243a:	2202      	movs	r2, #2
 800243c:	2166      	movs	r1, #102	@ 0x66
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fed6 	bl	80011f0 <glcd_puts>
	  glcd_clearline(3);
 8002444:	2003      	movs	r0, #3
 8002446:	f7ff f90f 	bl	8001668 <glcd_clearline>
	  sprintf(str2, "%d", vol);
 800244a:	4b72      	ldr	r3, [pc, #456]	@ (8002614 <LCDPrint+0x2b4>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002452:	4971      	ldr	r1, [pc, #452]	@ (8002618 <LCDPrint+0x2b8>)
 8002454:	4618      	mov	r0, r3
 8002456:	f008 f8e9 	bl	800a62c <siprintf>
	  sprintf(str3, "%03d", obs);
 800245a:	4b70      	ldr	r3, [pc, #448]	@ (800261c <LCDPrint+0x2bc>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002462:	496f      	ldr	r1, [pc, #444]	@ (8002620 <LCDPrint+0x2c0>)
 8002464:	4618      	mov	r0, r3
 8002466:	f008 f8e1 	bl	800a62c <siprintf>
	  glcd_puts("Vol ", 2, 5);
 800246a:	2205      	movs	r2, #5
 800246c:	2102      	movs	r1, #2
 800246e:	486d      	ldr	r0, [pc, #436]	@ (8002624 <LCDPrint+0x2c4>)
 8002470:	f7fe febe 	bl	80011f0 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 8002474:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002478:	2205      	movs	r2, #5
 800247a:	211e      	movs	r1, #30
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe feb7 	bl	80011f0 <glcd_puts>
	  if (vol < 10) {
 8002482:	4b64      	ldr	r3, [pc, #400]	@ (8002614 <LCDPrint+0x2b4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b09      	cmp	r3, #9
 8002488:	dc04      	bgt.n	8002494 <LCDPrint+0x134>
	  	 glcd_puts(" ", 38, 5);
 800248a:	2205      	movs	r2, #5
 800248c:	2126      	movs	r1, #38	@ 0x26
 800248e:	485f      	ldr	r0, [pc, #380]	@ (800260c <LCDPrint+0x2ac>)
 8002490:	f7fe feae 	bl	80011f0 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 8002494:	2205      	movs	r2, #5
 8002496:	2138      	movs	r1, #56	@ 0x38
 8002498:	485c      	ldr	r0, [pc, #368]	@ (800260c <LCDPrint+0x2ac>)
 800249a:	f7fe fea9 	bl	80011f0 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 800249e:	2205      	movs	r2, #5
 80024a0:	213e      	movs	r1, #62	@ 0x3e
 80024a2:	485a      	ldr	r0, [pc, #360]	@ (800260c <LCDPrint+0x2ac>)
 80024a4:	f7fe fea4 	bl	80011f0 <glcd_puts>
	  glcd_puts("OBS ", 66, 5);
 80024a8:	2205      	movs	r2, #5
 80024aa:	2142      	movs	r1, #66	@ 0x42
 80024ac:	485e      	ldr	r0, [pc, #376]	@ (8002628 <LCDPrint+0x2c8>)
 80024ae:	f7fe fe9f 	bl	80011f0 <glcd_puts>
	  glcd_puts(str3, 94, 5);
 80024b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024b6:	2205      	movs	r2, #5
 80024b8:	215e      	movs	r1, #94	@ 0x5e
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fe98 	bl	80011f0 <glcd_puts>
	  glcd_clearline(6);
 80024c0:	2006      	movs	r0, #6
 80024c2:	f7ff f8d1 	bl	8001668 <glcd_clearline>
}
 80024c6:	e22e      	b.n	8002926 <LCDPrint+0x5c6>
	else if (str[0] == 'v') {
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b76      	cmp	r3, #118	@ 0x76
 80024ce:	f040 80ad 	bne.w	800262c <LCDPrint+0x2cc>
	  sprintf(str0, "%0.3f", freq);
 80024d2:	4b49      	ldr	r3, [pc, #292]	@ (80025f8 <LCDPrint+0x298>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f960 	bl	800079c <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80024e4:	4945      	ldr	r1, [pc, #276]	@ (80025fc <LCDPrint+0x29c>)
 80024e6:	f008 f8a1 	bl	800a62c <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 80024ea:	4b45      	ldr	r3, [pc, #276]	@ (8002600 <LCDPrint+0x2a0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f954 	bl	800079c <__aeabi_f2d>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80024fc:	493f      	ldr	r1, [pc, #252]	@ (80025fc <LCDPrint+0x29c>)
 80024fe:	f008 f895 	bl	800a62c <siprintf>
	  glcd_puts("A", 2, 2);
 8002502:	2202      	movs	r2, #2
 8002504:	2102      	movs	r1, #2
 8002506:	483f      	ldr	r0, [pc, #252]	@ (8002604 <LCDPrint+0x2a4>)
 8002508:	f7fe fe72 	bl	80011f0 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 800250c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002510:	2202      	movs	r2, #2
 8002512:	210b      	movs	r1, #11
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fe6b 	bl	80011f0 <glcd_puts>
	  glcd_puts(".", 34, 2);
 800251a:	2202      	movs	r2, #2
 800251c:	2122      	movs	r1, #34	@ 0x22
 800251e:	483a      	ldr	r0, [pc, #232]	@ (8002608 <LCDPrint+0x2a8>)
 8002520:	f7fe fe66 	bl	80011f0 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 8002524:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002528:	3304      	adds	r3, #4
 800252a:	2202      	movs	r2, #2
 800252c:	2126      	movs	r1, #38	@ 0x26
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fe5e 	bl	80011f0 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 8002534:	2202      	movs	r2, #2
 8002536:	213e      	movs	r1, #62	@ 0x3e
 8002538:	4834      	ldr	r0, [pc, #208]	@ (800260c <LCDPrint+0x2ac>)
 800253a:	f7fe fe59 	bl	80011f0 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 800253e:	2202      	movs	r2, #2
 8002540:	2142      	movs	r1, #66	@ 0x42
 8002542:	4833      	ldr	r0, [pc, #204]	@ (8002610 <LCDPrint+0x2b0>)
 8002544:	f7fe fe54 	bl	80011f0 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 8002548:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800254c:	2202      	movs	r2, #2
 800254e:	214b      	movs	r1, #75	@ 0x4b
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fe4d 	bl	80011f0 <glcd_puts>
	  glcd_puts(".", 98, 2);
 8002556:	2202      	movs	r2, #2
 8002558:	2162      	movs	r1, #98	@ 0x62
 800255a:	482b      	ldr	r0, [pc, #172]	@ (8002608 <LCDPrint+0x2a8>)
 800255c:	f7fe fe48 	bl	80011f0 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 8002560:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002564:	3304      	adds	r3, #4
 8002566:	2202      	movs	r2, #2
 8002568:	2166      	movs	r1, #102	@ 0x66
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fe40 	bl	80011f0 <glcd_puts>
	  glcd_clearline(3);
 8002570:	2003      	movs	r0, #3
 8002572:	f7ff f879 	bl	8001668 <glcd_clearline>
	  sprintf(str2, "%d", vol);
 8002576:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <LCDPrint+0x2b4>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800257e:	4926      	ldr	r1, [pc, #152]	@ (8002618 <LCDPrint+0x2b8>)
 8002580:	4618      	mov	r0, r3
 8002582:	f008 f853 	bl	800a62c <siprintf>
	  sprintf(str3, "%03d", obs);
 8002586:	4b25      	ldr	r3, [pc, #148]	@ (800261c <LCDPrint+0x2bc>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800258e:	4924      	ldr	r1, [pc, #144]	@ (8002620 <LCDPrint+0x2c0>)
 8002590:	4618      	mov	r0, r3
 8002592:	f008 f84b 	bl	800a62c <siprintf>
	  glcd_puts("Vol ", 2, 5);
 8002596:	2205      	movs	r2, #5
 8002598:	2102      	movs	r1, #2
 800259a:	4822      	ldr	r0, [pc, #136]	@ (8002624 <LCDPrint+0x2c4>)
 800259c:	f7fe fe28 	bl	80011f0 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 80025a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025a4:	2205      	movs	r2, #5
 80025a6:	211e      	movs	r1, #30
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fe21 	bl	80011f0 <glcd_puts>
	  if (vol < 10) {
 80025ae:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <LCDPrint+0x2b4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b09      	cmp	r3, #9
 80025b4:	dc04      	bgt.n	80025c0 <LCDPrint+0x260>
		 glcd_puts(" ", 38, 5);
 80025b6:	2205      	movs	r2, #5
 80025b8:	2126      	movs	r1, #38	@ 0x26
 80025ba:	4814      	ldr	r0, [pc, #80]	@ (800260c <LCDPrint+0x2ac>)
 80025bc:	f7fe fe18 	bl	80011f0 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 80025c0:	2205      	movs	r2, #5
 80025c2:	2138      	movs	r1, #56	@ 0x38
 80025c4:	4811      	ldr	r0, [pc, #68]	@ (800260c <LCDPrint+0x2ac>)
 80025c6:	f7fe fe13 	bl	80011f0 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 80025ca:	2205      	movs	r2, #5
 80025cc:	213e      	movs	r1, #62	@ 0x3e
 80025ce:	480f      	ldr	r0, [pc, #60]	@ (800260c <LCDPrint+0x2ac>)
 80025d0:	f7fe fe0e 	bl	80011f0 <glcd_puts>
	  glcd_puts("OBS ", 66, 5);
 80025d4:	2205      	movs	r2, #5
 80025d6:	2142      	movs	r1, #66	@ 0x42
 80025d8:	4813      	ldr	r0, [pc, #76]	@ (8002628 <LCDPrint+0x2c8>)
 80025da:	f7fe fe09 	bl	80011f0 <glcd_puts>
	  glcd_puts(str3, 94, 5);
 80025de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025e2:	2205      	movs	r2, #5
 80025e4:	215e      	movs	r1, #94	@ 0x5e
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fe02 	bl	80011f0 <glcd_puts>
	  glcd_clearline(6);
 80025ec:	2006      	movs	r0, #6
 80025ee:	f7ff f83b 	bl	8001668 <glcd_clearline>
}
 80025f2:	e198      	b.n	8002926 <LCDPrint+0x5c6>
 80025f4:	40020000 	.word	0x40020000
 80025f8:	20000518 	.word	0x20000518
 80025fc:	0800b0a0 	.word	0x0800b0a0
 8002600:	20000004 	.word	0x20000004
 8002604:	0800b0a8 	.word	0x0800b0a8
 8002608:	0800b0ac 	.word	0x0800b0ac
 800260c:	0800b0b0 	.word	0x0800b0b0
 8002610:	0800b0b4 	.word	0x0800b0b4
 8002614:	20000524 	.word	0x20000524
 8002618:	0800b0b8 	.word	0x0800b0b8
 800261c:	2000057c 	.word	0x2000057c
 8002620:	0800b0bc 	.word	0x0800b0bc
 8002624:	0800b0c4 	.word	0x0800b0c4
 8002628:	0800b0cc 	.word	0x0800b0cc
	else if (str[0] == 'b') {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b62      	cmp	r3, #98	@ 0x62
 8002632:	f040 8091 	bne.w	8002758 <LCDPrint+0x3f8>
	  sprintf(str0, "%0.3f", freq);
 8002636:	4bbe      	ldr	r3, [pc, #760]	@ (8002930 <LCDPrint+0x5d0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe f8ae 	bl	800079c <__aeabi_f2d>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	f107 0020 	add.w	r0, r7, #32
 8002648:	49ba      	ldr	r1, [pc, #744]	@ (8002934 <LCDPrint+0x5d4>)
 800264a:	f007 ffef 	bl	800a62c <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 800264e:	4bba      	ldr	r3, [pc, #744]	@ (8002938 <LCDPrint+0x5d8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe f8a2 	bl	800079c <__aeabi_f2d>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	f107 0018 	add.w	r0, r7, #24
 8002660:	49b4      	ldr	r1, [pc, #720]	@ (8002934 <LCDPrint+0x5d4>)
 8002662:	f007 ffe3 	bl	800a62c <siprintf>
	  glcd_puts("A", 2, 2);
 8002666:	2202      	movs	r2, #2
 8002668:	2102      	movs	r1, #2
 800266a:	48b4      	ldr	r0, [pc, #720]	@ (800293c <LCDPrint+0x5dc>)
 800266c:	f7fe fdc0 	bl	80011f0 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 8002670:	f107 0320 	add.w	r3, r7, #32
 8002674:	2202      	movs	r2, #2
 8002676:	210b      	movs	r1, #11
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fdb9 	bl	80011f0 <glcd_puts>
	  glcd_puts(".", 34, 2);
 800267e:	2202      	movs	r2, #2
 8002680:	2122      	movs	r1, #34	@ 0x22
 8002682:	48af      	ldr	r0, [pc, #700]	@ (8002940 <LCDPrint+0x5e0>)
 8002684:	f7fe fdb4 	bl	80011f0 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 8002688:	f107 0320 	add.w	r3, r7, #32
 800268c:	3304      	adds	r3, #4
 800268e:	2202      	movs	r2, #2
 8002690:	2126      	movs	r1, #38	@ 0x26
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fdac 	bl	80011f0 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 8002698:	2202      	movs	r2, #2
 800269a:	213e      	movs	r1, #62	@ 0x3e
 800269c:	48a9      	ldr	r0, [pc, #676]	@ (8002944 <LCDPrint+0x5e4>)
 800269e:	f7fe fda7 	bl	80011f0 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 80026a2:	2202      	movs	r2, #2
 80026a4:	2142      	movs	r1, #66	@ 0x42
 80026a6:	48a8      	ldr	r0, [pc, #672]	@ (8002948 <LCDPrint+0x5e8>)
 80026a8:	f7fe fda2 	bl	80011f0 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 80026ac:	f107 0318 	add.w	r3, r7, #24
 80026b0:	2202      	movs	r2, #2
 80026b2:	214b      	movs	r1, #75	@ 0x4b
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fd9b 	bl	80011f0 <glcd_puts>
	  glcd_puts(".", 98, 2);
 80026ba:	2202      	movs	r2, #2
 80026bc:	2162      	movs	r1, #98	@ 0x62
 80026be:	48a0      	ldr	r0, [pc, #640]	@ (8002940 <LCDPrint+0x5e0>)
 80026c0:	f7fe fd96 	bl	80011f0 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 80026c4:	f107 0318 	add.w	r3, r7, #24
 80026c8:	3304      	adds	r3, #4
 80026ca:	2202      	movs	r2, #2
 80026cc:	2166      	movs	r1, #102	@ 0x66
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fd8e 	bl	80011f0 <glcd_puts>
	  glcd_clearline(3);
 80026d4:	2003      	movs	r0, #3
 80026d6:	f7fe ffc7 	bl	8001668 <glcd_clearline>
	  sprintf(str2, "%d", vol);
 80026da:	4b9c      	ldr	r3, [pc, #624]	@ (800294c <LCDPrint+0x5ec>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	f107 0310 	add.w	r3, r7, #16
 80026e2:	499b      	ldr	r1, [pc, #620]	@ (8002950 <LCDPrint+0x5f0>)
 80026e4:	4618      	mov	r0, r3
 80026e6:	f007 ffa1 	bl	800a62c <siprintf>
	  sprintf(str3, "%03d", obs);
 80026ea:	4b9a      	ldr	r3, [pc, #616]	@ (8002954 <LCDPrint+0x5f4>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	4999      	ldr	r1, [pc, #612]	@ (8002958 <LCDPrint+0x5f8>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f007 ff99 	bl	800a62c <siprintf>
	  glcd_puts("Vol ", 2, 5);
 80026fa:	2205      	movs	r2, #5
 80026fc:	2102      	movs	r1, #2
 80026fe:	4897      	ldr	r0, [pc, #604]	@ (800295c <LCDPrint+0x5fc>)
 8002700:	f7fe fd76 	bl	80011f0 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	2205      	movs	r2, #5
 800270a:	211e      	movs	r1, #30
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fd6f 	bl	80011f0 <glcd_puts>
	  if (vol < 10) {
 8002712:	4b8e      	ldr	r3, [pc, #568]	@ (800294c <LCDPrint+0x5ec>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b09      	cmp	r3, #9
 8002718:	dc04      	bgt.n	8002724 <LCDPrint+0x3c4>
		 glcd_puts(" ", 38, 5);
 800271a:	2205      	movs	r2, #5
 800271c:	2126      	movs	r1, #38	@ 0x26
 800271e:	4889      	ldr	r0, [pc, #548]	@ (8002944 <LCDPrint+0x5e4>)
 8002720:	f7fe fd66 	bl	80011f0 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 8002724:	2205      	movs	r2, #5
 8002726:	2138      	movs	r1, #56	@ 0x38
 8002728:	4886      	ldr	r0, [pc, #536]	@ (8002944 <LCDPrint+0x5e4>)
 800272a:	f7fe fd61 	bl	80011f0 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 800272e:	2205      	movs	r2, #5
 8002730:	213e      	movs	r1, #62	@ 0x3e
 8002732:	4884      	ldr	r0, [pc, #528]	@ (8002944 <LCDPrint+0x5e4>)
 8002734:	f7fe fd5c 	bl	80011f0 <glcd_puts>
	  glcd_puts("OBS ", 66, 5);
 8002738:	2205      	movs	r2, #5
 800273a:	2142      	movs	r1, #66	@ 0x42
 800273c:	4888      	ldr	r0, [pc, #544]	@ (8002960 <LCDPrint+0x600>)
 800273e:	f7fe fd57 	bl	80011f0 <glcd_puts>
	  glcd_puts(str3, 94, 5);
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	2205      	movs	r2, #5
 8002748:	215e      	movs	r1, #94	@ 0x5e
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fd50 	bl	80011f0 <glcd_puts>
	  glcd_clearline(6);
 8002750:	2006      	movs	r0, #6
 8002752:	f7fe ff89 	bl	8001668 <glcd_clearline>
}
 8002756:	e0e6      	b.n	8002926 <LCDPrint+0x5c6>
	else if (str[0] == 'k'){ // scroll
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b6b      	cmp	r3, #107	@ 0x6b
 800275e:	d124      	bne.n	80027aa <LCDPrint+0x44a>
	  glcd_clear_all();
 8002760:	f7fe ffce 	bl	8001700 <glcd_clear_all>
	  glcd_puts(str+1, 2, 3);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3301      	adds	r3, #1
 8002768:	2203      	movs	r2, #3
 800276a:	2102      	movs	r1, #2
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fd3f 	bl	80011f0 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 8002772:	2203      	movs	r2, #3
 8002774:	213a      	movs	r1, #58	@ 0x3a
 8002776:	487b      	ldr	r0, [pc, #492]	@ (8002964 <LCDPrint+0x604>)
 8002778:	f7fe fd3a 	bl	80011f0 <glcd_puts>
	  glcd_puts(str+8, 75, 3);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3308      	adds	r3, #8
 8002780:	2203      	movs	r2, #3
 8002782:	214b      	movs	r1, #75	@ 0x4b
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fd33 	bl	80011f0 <glcd_puts>
	  glcd_puts(".", 98, 3);
 800278a:	2203      	movs	r2, #3
 800278c:	2162      	movs	r1, #98	@ 0x62
 800278e:	486c      	ldr	r0, [pc, #432]	@ (8002940 <LCDPrint+0x5e0>)
 8002790:	f7fe fd2e 	bl	80011f0 <glcd_puts>
	  glcd_puts(str+12, 102, 3);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	330c      	adds	r3, #12
 8002798:	2203      	movs	r2, #3
 800279a:	2166      	movs	r1, #102	@ 0x66
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fd27 	bl	80011f0 <glcd_puts>
	  glcd_clearline(4);
 80027a2:	2004      	movs	r0, #4
 80027a4:	f7fe ff60 	bl	8001668 <glcd_clearline>
}
 80027a8:	e0bd      	b.n	8002926 <LCDPrint+0x5c6>
	else if (str[0] == 'n') {// no mem
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b6e      	cmp	r3, #110	@ 0x6e
 80027b0:	d109      	bne.n	80027c6 <LCDPrint+0x466>
	  glcd_clear_all();
 80027b2:	f7fe ffa5 	bl	8001700 <glcd_clear_all>
	  str = "NO MEM";
 80027b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002968 <LCDPrint+0x608>)
 80027b8:	607b      	str	r3, [r7, #4]
	  glcd_puts(str, 66, 3);
 80027ba:	2203      	movs	r2, #3
 80027bc:	2142      	movs	r1, #66	@ 0x42
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fd16 	bl	80011f0 <glcd_puts>
}
 80027c4:	e0af      	b.n	8002926 <LCDPrint+0x5c6>
	else if (str[0] == 'e') {
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b65      	cmp	r3, #101	@ 0x65
 80027cc:	d131      	bne.n	8002832 <LCDPrint+0x4d2>
	  glcd_clear_all();
 80027ce:	f7fe ff97 	bl	8001700 <glcd_clear_all>
	  if (str[1] == ':') {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3301      	adds	r3, #1
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80027da:	d107      	bne.n	80027ec <LCDPrint+0x48c>
		str = "EMPTY";
 80027dc:	4b63      	ldr	r3, [pc, #396]	@ (800296c <LCDPrint+0x60c>)
 80027de:	607b      	str	r3, [r7, #4]
		glcd_puts(str, 66, 3);
 80027e0:	2203      	movs	r2, #3
 80027e2:	2142      	movs	r1, #66	@ 0x42
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe fd03 	bl	80011f0 <glcd_puts>
}
 80027ea:	e09c      	b.n	8002926 <LCDPrint+0x5c6>
		glcd_puts(str+1, 2, 3);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3301      	adds	r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	2102      	movs	r1, #2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fcfb 	bl	80011f0 <glcd_puts>
		glcd_puts("   ", 58, 3);
 80027fa:	2203      	movs	r2, #3
 80027fc:	213a      	movs	r1, #58	@ 0x3a
 80027fe:	4859      	ldr	r0, [pc, #356]	@ (8002964 <LCDPrint+0x604>)
 8002800:	f7fe fcf6 	bl	80011f0 <glcd_puts>
		glcd_puts(str+8, 75, 3);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3308      	adds	r3, #8
 8002808:	2203      	movs	r2, #3
 800280a:	214b      	movs	r1, #75	@ 0x4b
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fcef 	bl	80011f0 <glcd_puts>
		glcd_puts(".", 98, 3);
 8002812:	2203      	movs	r2, #3
 8002814:	2162      	movs	r1, #98	@ 0x62
 8002816:	484a      	ldr	r0, [pc, #296]	@ (8002940 <LCDPrint+0x5e0>)
 8002818:	f7fe fcea 	bl	80011f0 <glcd_puts>
		glcd_puts(str+12, 102, 3);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	330c      	adds	r3, #12
 8002820:	2203      	movs	r2, #3
 8002822:	2166      	movs	r1, #102	@ 0x66
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fce3 	bl	80011f0 <glcd_puts>
		glcd_clearline(4);
 800282a:	2004      	movs	r0, #4
 800282c:	f7fe ff1c 	bl	8001668 <glcd_clearline>
}
 8002830:	e079      	b.n	8002926 <LCDPrint+0x5c6>
	else if (str[0] == 'a') {
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b61      	cmp	r3, #97	@ 0x61
 8002838:	d14b      	bne.n	80028d2 <LCDPrint+0x572>
      glcd_clear_all();
 800283a:	f7fe ff61 	bl	8001700 <glcd_clear_all>
	  glcd_puts(str+2, 2, 3);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3302      	adds	r3, #2
 8002842:	2203      	movs	r2, #3
 8002844:	2102      	movs	r1, #2
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fcd2 	bl	80011f0 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 800284c:	2203      	movs	r2, #3
 800284e:	213a      	movs	r1, #58	@ 0x3a
 8002850:	4844      	ldr	r0, [pc, #272]	@ (8002964 <LCDPrint+0x604>)
 8002852:	f7fe fccd 	bl	80011f0 <glcd_puts>
	  glcd_puts(str+9, 75, 3);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3309      	adds	r3, #9
 800285a:	2203      	movs	r2, #3
 800285c:	214b      	movs	r1, #75	@ 0x4b
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fcc6 	bl	80011f0 <glcd_puts>
	  glcd_puts(".", 98, 3);
 8002864:	2203      	movs	r2, #3
 8002866:	2162      	movs	r1, #98	@ 0x62
 8002868:	4835      	ldr	r0, [pc, #212]	@ (8002940 <LCDPrint+0x5e0>)
 800286a:	f7fe fcc1 	bl	80011f0 <glcd_puts>
	  glcd_puts(str+13, 102, 3);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	330d      	adds	r3, #13
 8002872:	2203      	movs	r2, #3
 8002874:	2166      	movs	r1, #102	@ 0x66
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fcba 	bl	80011f0 <glcd_puts>
	  glcd_clearline(4);
 800287c:	2004      	movs	r0, #4
 800287e:	f7fe fef3 	bl	8001668 <glcd_clearline>
	  int cursor = str[1] - '0';
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3301      	adds	r3, #1
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	3b30      	subs	r3, #48	@ 0x30
 800288a:	66bb      	str	r3, [r7, #104]	@ 0x68
	  if (cursor == 7) {
 800288c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800288e:	2b07      	cmp	r3, #7
 8002890:	d105      	bne.n	800289e <LCDPrint+0x53e>
		glcd_puts("___", 75, 4);
 8002892:	2204      	movs	r2, #4
 8002894:	214b      	movs	r1, #75	@ 0x4b
 8002896:	4836      	ldr	r0, [pc, #216]	@ (8002970 <LCDPrint+0x610>)
 8002898:	f7fe fcaa 	bl	80011f0 <glcd_puts>
 800289c:	e007      	b.n	80028ae <LCDPrint+0x54e>
	  else if (cursor == 8) {
 800289e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d104      	bne.n	80028ae <LCDPrint+0x54e>
		glcd_puts("___", 102, 4);
 80028a4:	2204      	movs	r2, #4
 80028a6:	2166      	movs	r1, #102	@ 0x66
 80028a8:	4831      	ldr	r0, [pc, #196]	@ (8002970 <LCDPrint+0x610>)
 80028aa:	f7fe fca1 	bl	80011f0 <glcd_puts>
	  if (cursor >= 0 && cursor <= 6) {
 80028ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db38      	blt.n	8002926 <LCDPrint+0x5c6>
 80028b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	dc35      	bgt.n	8002926 <LCDPrint+0x5c6>
		glcd_puts("_", 2+(cursor*8), 4);
 80028ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3302      	adds	r3, #2
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2204      	movs	r2, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	482a      	ldr	r0, [pc, #168]	@ (8002974 <LCDPrint+0x614>)
 80028cc:	f7fe fc90 	bl	80011f0 <glcd_puts>
}
 80028d0:	e029      	b.n	8002926 <LCDPrint+0x5c6>
	else if (str[0] == 'd') {
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d125      	bne.n	8002926 <LCDPrint+0x5c6>
	  glcd_clear_all();
 80028da:	f7fe ff11 	bl	8001700 <glcd_clear_all>
	  glcd_puts(str+2, 2, 3);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3302      	adds	r3, #2
 80028e2:	2203      	movs	r2, #3
 80028e4:	2102      	movs	r1, #2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fc82 	bl	80011f0 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 80028ec:	2203      	movs	r2, #3
 80028ee:	213a      	movs	r1, #58	@ 0x3a
 80028f0:	481c      	ldr	r0, [pc, #112]	@ (8002964 <LCDPrint+0x604>)
 80028f2:	f7fe fc7d 	bl	80011f0 <glcd_puts>
	  glcd_puts("Delete ", 66, 3);
 80028f6:	2203      	movs	r2, #3
 80028f8:	2142      	movs	r1, #66	@ 0x42
 80028fa:	481f      	ldr	r0, [pc, #124]	@ (8002978 <LCDPrint+0x618>)
 80028fc:	f7fe fc78 	bl	80011f0 <glcd_puts>
	  int yn = str[1] - '0';
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3301      	adds	r3, #1
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	3b30      	subs	r3, #48	@ 0x30
 8002908:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  if (yn == 1) {
 800290a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <LCDPrint+0x5bc>
		glcd_puts("Y", 118, 3);
 8002910:	2203      	movs	r2, #3
 8002912:	2176      	movs	r1, #118	@ 0x76
 8002914:	4819      	ldr	r0, [pc, #100]	@ (800297c <LCDPrint+0x61c>)
 8002916:	f7fe fc6b 	bl	80011f0 <glcd_puts>
}
 800291a:	e004      	b.n	8002926 <LCDPrint+0x5c6>
		glcd_puts("N", 118, 3);
 800291c:	2203      	movs	r2, #3
 800291e:	2176      	movs	r1, #118	@ 0x76
 8002920:	4817      	ldr	r0, [pc, #92]	@ (8002980 <LCDPrint+0x620>)
 8002922:	f7fe fc65 	bl	80011f0 <glcd_puts>
}
 8002926:	bf00      	nop
 8002928:	3770      	adds	r7, #112	@ 0x70
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000518 	.word	0x20000518
 8002934:	0800b0a0 	.word	0x0800b0a0
 8002938:	20000004 	.word	0x20000004
 800293c:	0800b0a8 	.word	0x0800b0a8
 8002940:	0800b0ac 	.word	0x0800b0ac
 8002944:	0800b0b0 	.word	0x0800b0b0
 8002948:	0800b0b4 	.word	0x0800b0b4
 800294c:	20000524 	.word	0x20000524
 8002950:	0800b0b8 	.word	0x0800b0b8
 8002954:	2000057c 	.word	0x2000057c
 8002958:	0800b0bc 	.word	0x0800b0bc
 800295c:	0800b0c4 	.word	0x0800b0c4
 8002960:	0800b0cc 	.word	0x0800b0cc
 8002964:	0800b0d4 	.word	0x0800b0d4
 8002968:	0800b0d8 	.word	0x0800b0d8
 800296c:	0800b0e0 	.word	0x0800b0e0
 8002970:	0800b0e8 	.word	0x0800b0e8
 8002974:	0800b0ec 	.word	0x0800b0ec
 8002978:	0800b0f0 	.word	0x0800b0f0
 800297c:	0800b0f8 	.word	0x0800b0f8
 8002980:	0800b0fc 	.word	0x0800b0fc

08002984 <Sender>:

void Sender(const char * str, int mode) { //TODO				construct and send a message (likely over UART)
 8002984:	b580      	push	{r7, lr}
 8002986:	b092      	sub	sp, #72	@ 0x48
 8002988:	af02      	add	r7, sp, #8
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
    char crlf[] = {'\r','\n', 0};
 800298e:	4a69      	ldr	r2, [pc, #420]	@ (8002b34 <Sender+0x1b0>)
 8002990:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	4611      	mov	r1, r2
 8002998:	8019      	strh	r1, [r3, #0]
 800299a:	3302      	adds	r3, #2
 800299c:	0c12      	lsrs	r2, r2, #16
 800299e:	701a      	strb	r2, [r3, #0]
    uint8_t str2[25]; // Array to hold the constructed string in ASCII

    memset(str2, 0, sizeof(str2)); // Initialize the array with zeros
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	2219      	movs	r2, #25
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f007 fe5f 	bl	800a66c <memset>

    if (mode == 0) {
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d12d      	bne.n	8002a10 <Sender+0x8c>
        char m = str[0];
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        char k = str[1];
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3301      	adds	r3, #1
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        snprintf((char*)str2, sizeof(str2), "$PMRRV27%c%cN", m, k);
 80029c6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80029ca:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80029ce:	f107 001c 	add.w	r0, r7, #28
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	4a58      	ldr	r2, [pc, #352]	@ (8002b38 <Sender+0x1b4>)
 80029d8:	2119      	movs	r1, #25
 80029da:	f007 fdf3 	bl	800a5c4 <sniprintf>
        char end2[3];
        checksum((char*)str2, end2);
 80029de:	f107 0218 	add.w	r2, r7, #24
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fc55 	bl	8002298 <checksum>
        concatTwoChars((char*)str2, end2);
 80029ee:	f107 0218 	add.w	r2, r7, #24
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fc8c 	bl	8002316 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 80029fe:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002a02:	f107 031c 	add.w	r3, r7, #28
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fc84 	bl	8002316 <concatTwoChars>
 8002a0e:	e07b      	b.n	8002b08 <Sender+0x184>
    } else if (mode == 1) {
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d12d      	bne.n	8002a72 <Sender+0xee>
        char m = str[0];
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        char k = str[1];
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3301      	adds	r3, #1
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        snprintf((char*)str2, sizeof(str2), "$PMRRV28%c%cN", m, k);
 8002a28:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002a2c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002a30:	f107 001c 	add.w	r0, r7, #28
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	4a40      	ldr	r2, [pc, #256]	@ (8002b3c <Sender+0x1b8>)
 8002a3a:	2119      	movs	r1, #25
 8002a3c:	f007 fdc2 	bl	800a5c4 <sniprintf>
        char end3[3];
        checksum((char*)str2, end3);
 8002a40:	f107 0214 	add.w	r2, r7, #20
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fc24 	bl	8002298 <checksum>
        concatTwoChars((char*)str2, end3);
 8002a50:	f107 0214 	add.w	r2, r7, #20
 8002a54:	f107 031c 	add.w	r3, r7, #28
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fc5b 	bl	8002316 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8002a60:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fc53 	bl	8002316 <concatTwoChars>
 8002a70:	e04a      	b.n	8002b08 <Sender+0x184>
    } else if (mode == 2) {
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d124      	bne.n	8002ac2 <Sender+0x13e>
        char v = str[0];
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        snprintf((char*)str2, sizeof(str2), "$PMRRV73%c", v);
 8002a80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a84:	f107 001c 	add.w	r0, r7, #28
 8002a88:	4a2d      	ldr	r2, [pc, #180]	@ (8002b40 <Sender+0x1bc>)
 8002a8a:	2119      	movs	r1, #25
 8002a8c:	f007 fd9a 	bl	800a5c4 <sniprintf>
        char end4[3];
        checksum((char*)str2, end4);
 8002a90:	f107 0210 	add.w	r2, r7, #16
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fbfc 	bl	8002298 <checksum>
        concatTwoChars((char*)str2, end4);
 8002aa0:	f107 0210 	add.w	r2, r7, #16
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fc33 	bl	8002316 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8002ab0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fc2b 	bl	8002316 <concatTwoChars>
 8002ac0:	e022      	b.n	8002b08 <Sender+0x184>
    } else if (mode == 3) {
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d11f      	bne.n	8002b08 <Sender+0x184>
        snprintf((char*)str2, sizeof(str2), "$PMRRV34%03d", obs);
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <Sender+0x1c0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f107 001c 	add.w	r0, r7, #28
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b48 <Sender+0x1c4>)
 8002ad2:	2119      	movs	r1, #25
 8002ad4:	f007 fd76 	bl	800a5c4 <sniprintf>
        char end5[3];
        checksum((char*)str2, end5);
 8002ad8:	f107 020c 	add.w	r2, r7, #12
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fbd8 	bl	8002298 <checksum>
        concatTwoChars((char*)str2, end5);
 8002ae8:	f107 020c 	add.w	r2, r7, #12
 8002aec:	f107 031c 	add.w	r3, r7, #28
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fc0f 	bl	8002316 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8002af8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fc07 	bl	8002316 <concatTwoChars>
    }

    HAL_UART_Transmit(&huart4, str2, strlen((char*)str2), 500);
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fb5f 	bl	80001d0 <strlen>
 8002b12:	4603      	mov	r3, r0
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	f107 011c 	add.w	r1, r7, #28
 8002b1a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b1e:	480b      	ldr	r0, [pc, #44]	@ (8002b4c <Sender+0x1c8>)
 8002b20:	f005 fb93 	bl	800824a <HAL_UART_Transmit>
    HAL_Delay(100);
 8002b24:	2064      	movs	r0, #100	@ 0x64
 8002b26:	f003 fa33 	bl	8005f90 <HAL_Delay>
}
 8002b2a:	bf00      	nop
 8002b2c:	3740      	adds	r7, #64	@ 0x40
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	0800b13c 	.word	0x0800b13c
 8002b38:	0800b100 	.word	0x0800b100
 8002b3c:	0800b110 	.word	0x0800b110
 8002b40:	0800b120 	.word	0x0800b120
 8002b44:	2000057c 	.word	0x2000057c
 8002b48:	0800b12c 	.word	0x0800b12c
 8002b4c:	2000038c 	.word	0x2000038c

08002b50 <StartDefaultTask>:

void StartDefaultTask(void const * argument)
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b0e0      	sub	sp, #384	@ 0x180
 8002b54:	af04      	add	r7, sp, #16
 8002b56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b5a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b5e:	6018      	str	r0, [r3, #0]
		  for(;;)
		  {

	//Message Handling for Transceiver Status:==================================================================================================================

		  if (rxfree) {
 8002b60:	4bbb      	ldr	r3, [pc, #748]	@ (8002e50 <StartDefaultTask+0x300>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8082 	beq.w	8002c6e <StartDefaultTask+0x11e>
				if (rxmsg[6] == '2' && rxmsg[7] == '8')
 8002b6a:	4bba      	ldr	r3, [pc, #744]	@ (8002e54 <StartDefaultTask+0x304>)
 8002b6c:	799b      	ldrb	r3, [r3, #6]
 8002b6e:	2b32      	cmp	r3, #50	@ 0x32
 8002b70:	d17a      	bne.n	8002c68 <StartDefaultTask+0x118>
 8002b72:	4bb8      	ldr	r3, [pc, #736]	@ (8002e54 <StartDefaultTask+0x304>)
 8002b74:	79db      	ldrb	r3, [r3, #7]
 8002b76:	2b38      	cmp	r3, #56	@ 0x38
 8002b78:	d176      	bne.n	8002c68 <StartDefaultTask+0x118>
				{ // comm transceiver status
					float commfreq;
					commfreq = (rxmsg[8] + 48) + ((rxmsg[9] - 48) * .025);
 8002b7a:	4bb6      	ldr	r3, [pc, #728]	@ (8002e54 <StartDefaultTask+0x304>)
 8002b7c:	7a1b      	ldrb	r3, [r3, #8]
 8002b7e:	3330      	adds	r3, #48	@ 0x30
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fdf9 	bl	8000778 <__aeabi_i2d>
 8002b86:	4604      	mov	r4, r0
 8002b88:	460d      	mov	r5, r1
 8002b8a:	4bb2      	ldr	r3, [pc, #712]	@ (8002e54 <StartDefaultTask+0x304>)
 8002b8c:	7a5b      	ldrb	r3, [r3, #9]
 8002b8e:	3b30      	subs	r3, #48	@ 0x30
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fdf1 	bl	8000778 <__aeabi_i2d>
 8002b96:	a3aa      	add	r3, pc, #680	@ (adr r3, 8002e40 <StartDefaultTask+0x2f0>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd fb70 	bl	8000280 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	f7fd fc9a 	bl	80004e0 <__adddf3>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7fd fe72 	bl	800089c <__aeabi_d2f>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
					if (commfreq != freq)
 8002bbe:	4ba6      	ldr	r3, [pc, #664]	@ (8002e58 <StartDefaultTask+0x308>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	ed97 7a4a 	vldr	s14, [r7, #296]	@ 0x128
 8002bc8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	d040      	beq.n	8002c54 <StartDefaultTask+0x104>
					{
						faultcounter1 += 1;
 8002bd2:	4ba2      	ldr	r3, [pc, #648]	@ (8002e5c <StartDefaultTask+0x30c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4aa0      	ldr	r2, [pc, #640]	@ (8002e5c <StartDefaultTask+0x30c>)
 8002bda:	6013      	str	r3, [r2, #0]
					    int MA = MHz - 48;
 8002bdc:	4ba0      	ldr	r3, [pc, #640]	@ (8002e60 <StartDefaultTask+0x310>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3b30      	subs	r3, #48	@ 0x30
 8002be2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
					    int KA = (KHz/25) + 48;
 8002be6:	4b9f      	ldr	r3, [pc, #636]	@ (8002e64 <StartDefaultTask+0x314>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a9f      	ldr	r2, [pc, #636]	@ (8002e68 <StartDefaultTask+0x318>)
 8002bec:	fb82 1203 	smull	r1, r2, r2, r3
 8002bf0:	10d2      	asrs	r2, r2, #3
 8002bf2:	17db      	asrs	r3, r3, #31
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	3330      	adds	r3, #48	@ 0x30
 8002bf8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
					    char m = (char)MA;
 8002bfc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002c00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
					    char k = (char)KA;
 8002c04:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
					    char Mfinal[3] = {m,k,0};
 8002c0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c14:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c22:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 8002c26:	705a      	strb	r2, [r3, #1]
 8002c28:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c30:	2200      	movs	r2, #0
 8002c32:	709a      	strb	r2, [r3, #2]
					    Sender(Mfinal, 0); //set active				which will be something like by default........idts
 8002c34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fea2 	bl	8002984 <Sender>
						if (faultcounter1 > 2) {
 8002c40:	4b86      	ldr	r3, [pc, #536]	@ (8002e5c <StartDefaultTask+0x30c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	dd0f      	ble.n	8002c68 <StartDefaultTask+0x118>
							glcd_puts("Error 1", 0, 7);
 8002c48:	2207      	movs	r2, #7
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4887      	ldr	r0, [pc, #540]	@ (8002e6c <StartDefaultTask+0x31c>)
 8002c4e:	f7fe facf 	bl	80011f0 <glcd_puts>
 8002c52:	e009      	b.n	8002c68 <StartDefaultTask+0x118>
						}
					}
					else
					{
						if (faultcounter1 > 2)
 8002c54:	4b81      	ldr	r3, [pc, #516]	@ (8002e5c <StartDefaultTask+0x30c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	dd02      	ble.n	8002c62 <StartDefaultTask+0x112>
						{
							glcd_clearline(7);
 8002c5c:	2007      	movs	r0, #7
 8002c5e:	f7fe fd03 	bl	8001668 <glcd_clearline>
						}
						faultcounter1 = 0;
 8002c62:	4b7e      	ldr	r3, [pc, #504]	@ (8002e5c <StartDefaultTask+0x30c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
					}
				}
				rxfree = false;
 8002c68:	4b79      	ldr	r3, [pc, #484]	@ (8002e50 <StartDefaultTask+0x300>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
			static unsigned long last = 0;
		    static float freq_last = 108.000;
			static float sfreq_last = 108.000;
			static int vol_last = 0;
			static int obs_last = 0;
			freq = MHz + (.001 * KHz);
 8002c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e60 <StartDefaultTask+0x310>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fd80 	bl	8000778 <__aeabi_i2d>
 8002c78:	4604      	mov	r4, r0
 8002c7a:	460d      	mov	r5, r1
 8002c7c:	4b79      	ldr	r3, [pc, #484]	@ (8002e64 <StartDefaultTask+0x314>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fd79 	bl	8000778 <__aeabi_i2d>
 8002c86:	a370      	add	r3, pc, #448	@ (adr r3, 8002e48 <StartDefaultTask+0x2f8>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	f7fd faf8 	bl	8000280 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4620      	mov	r0, r4
 8002c96:	4629      	mov	r1, r5
 8002c98:	f7fd fc22 	bl	80004e0 <__adddf3>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f7fd fdfa 	bl	800089c <__aeabi_d2f>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4a6b      	ldr	r2, [pc, #428]	@ (8002e58 <StartDefaultTask+0x308>)
 8002cac:	6013      	str	r3, [r2, #0]
			Standby = SM + (.001 * SK);
 8002cae:	4b70      	ldr	r3, [pc, #448]	@ (8002e70 <StartDefaultTask+0x320>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fd60 	bl	8000778 <__aeabi_i2d>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	460d      	mov	r5, r1
 8002cbc:	4b6d      	ldr	r3, [pc, #436]	@ (8002e74 <StartDefaultTask+0x324>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fd59 	bl	8000778 <__aeabi_i2d>
 8002cc6:	a360      	add	r3, pc, #384	@ (adr r3, 8002e48 <StartDefaultTask+0x2f8>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fad8 	bl	8000280 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	f7fd fc02 	bl	80004e0 <__adddf3>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fd fdda 	bl	800089c <__aeabi_d2f>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a63      	ldr	r2, [pc, #396]	@ (8002e78 <StartDefaultTask+0x328>)
 8002cec:	6013      	str	r3, [r2, #0]

			if (millis() - last > 2000 && temp)
 8002cee:	f7fe feff 	bl	8001af0 <millis>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	4b61      	ldr	r3, [pc, #388]	@ (8002e7c <StartDefaultTask+0x32c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002cfe:	d92b      	bls.n	8002d58 <StartDefaultTask+0x208>
 8002d00:	4b5f      	ldr	r3, [pc, #380]	@ (8002e80 <StartDefaultTask+0x330>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d027      	beq.n	8002d58 <StartDefaultTask+0x208>
			{ // if time between action > 2 send freq in NOTE: will need to add a check later as some actions cant be exited.

			  sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);		//The string "....." is stored into toPrint instead of printing on stdout
 8002d08:	4b53      	ldr	r3, [pc, #332]	@ (8002e58 <StartDefaultTask+0x308>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fd45 	bl	800079c <__aeabi_f2d>
 8002d12:	4604      	mov	r4, r0
 8002d14:	460d      	mov	r5, r1
 8002d16:	4b58      	ldr	r3, [pc, #352]	@ (8002e78 <StartDefaultTask+0x328>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fd3e 	bl	800079c <__aeabi_f2d>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8002d28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d2c:	e9cd 4500 	strd	r4, r5, [sp]
 8002d30:	2266      	movs	r2, #102	@ 0x66
 8002d32:	4954      	ldr	r1, [pc, #336]	@ (8002e84 <StartDefaultTask+0x334>)
 8002d34:	f007 fc7a 	bl	800a62c <siprintf>
			  LCDPrint(toPrint);
 8002d38:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fb0f 	bl	8002360 <LCDPrint>

			  freq_last = freq;
 8002d42:	4b45      	ldr	r3, [pc, #276]	@ (8002e58 <StartDefaultTask+0x308>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a50      	ldr	r2, [pc, #320]	@ (8002e88 <StartDefaultTask+0x338>)
 8002d48:	6013      	str	r3, [r2, #0]
			  sfreq_last = Standby;
 8002d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e78 <StartDefaultTask+0x328>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a4f      	ldr	r2, [pc, #316]	@ (8002e8c <StartDefaultTask+0x33c>)
 8002d50:	6013      	str	r3, [r2, #0]
			  temp = false;
 8002d52:	4b4b      	ldr	r3, [pc, #300]	@ (8002e80 <StartDefaultTask+0x330>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
			}

	//Handling Button Presses for Editing:---------------------------------------------------------------------------------------------------------------------

			bool both = false;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
			// Current time
			unsigned long currentTime = millis();
 8002d5e:	f7fe fec7 	bl	8001af0 <millis>
 8002d62:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

			// Read the button states(which is actually i think a kind of switch.....)
			bool currentA = HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0;
 8002d66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d6a:	4849      	ldr	r0, [pc, #292]	@ (8002e90 <StartDefaultTask+0x340>)
 8002d6c:	f003 fc44 	bl	80065f8 <HAL_GPIO_ReadPin>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf0c      	ite	eq
 8002d76:	2301      	moveq	r3, #1
 8002d78:	2300      	movne	r3, #0
 8002d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
			bool currentB = HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0;
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4844      	ldr	r0, [pc, #272]	@ (8002e94 <StartDefaultTask+0x344>)
 8002d82:	f003 fc39 	bl	80065f8 <HAL_GPIO_ReadPin>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

			while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 8002d94:	e01a      	b.n	8002dcc <StartDefaultTask+0x27c>
			  if (currentA) {
 8002d96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <StartDefaultTask+0x264>
				if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 8002d9e:	2101      	movs	r1, #1
 8002da0:	483c      	ldr	r0, [pc, #240]	@ (8002e94 <StartDefaultTask+0x344>)
 8002da2:	f003 fc29 	bl	80065f8 <HAL_GPIO_ReadPin>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10f      	bne.n	8002dcc <StartDefaultTask+0x27c>
				  both = true;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
				  break;
 8002db2:	e01b      	b.n	8002dec <StartDefaultTask+0x29c>
				}
			  }
			  else {
				if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0) {
 8002db4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002db8:	4835      	ldr	r0, [pc, #212]	@ (8002e90 <StartDefaultTask+0x340>)
 8002dba:	f003 fc1d 	bl	80065f8 <HAL_GPIO_ReadPin>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <StartDefaultTask+0x27c>
				  both = true;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
				  break;
 8002dca:	e00f      	b.n	8002dec <StartDefaultTask+0x29c>
			while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 8002dcc:	f7fe fe90 	bl	8001af0 <millis>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b63      	cmp	r3, #99	@ 0x63
 8002dda:	d807      	bhi.n	8002dec <StartDefaultTask+0x29c>
 8002ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1d8      	bne.n	8002d96 <StartDefaultTask+0x246>
 8002de4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1d4      	bne.n	8002d96 <StartDefaultTask+0x246>
				}
			  }
			}

			// Check if both buttons were pressed within the 50 ms window
			if (both) {//==========================================================================================================================
 8002dec:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f001 81eb 	beq.w	80041cc <StartDefaultTask+0x167c>

				  if (on) { // Enter edit mode TODO
 8002df6:	4b28      	ldr	r3, [pc, #160]	@ (8002e98 <StartDefaultTask+0x348>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f001 8460 	beq.w	80046c0 <StartDefaultTask+0x1b70>
					toDisplay();
 8002e00:	f7fe fca0 	bl	8001744 <toDisplay>
					edit = true;
 8002e04:	4b25      	ldr	r3, [pc, #148]	@ (8002e9c <StartDefaultTask+0x34c>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
					pause = true;
 8002e0a:	4b25      	ldr	r3, [pc, #148]	@ (8002ea0 <StartDefaultTask+0x350>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002e10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e14:	f003 f8bc 	bl	8005f90 <HAL_Delay>
					bool both = false;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 316e 	strb.w	r3, [r7, #366]	@ 0x16e

					char str[8];
					if (dispCount == count) {
 8002e1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <StartDefaultTask+0x354>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <StartDefaultTask+0x358>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d106      	bne.n	8002e38 <StartDefaultTask+0x2e8>
					  str[0] = ':'; //EMPTY
 8002e2a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002e2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e32:	223a      	movs	r2, #58	@ 0x3a
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	e061      	b.n	8002efc <StartDefaultTask+0x3ac>
					}
					else {

		//Reading from External Memory (SPIF) and Displaying Data ===============

					  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002e3e:	e053      	b.n	8002ee8 <StartDefaultTask+0x398>
 8002e40:	9999999a 	.word	0x9999999a
 8002e44:	3f999999 	.word	0x3f999999
 8002e48:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e4c:	3f50624d 	.word	0x3f50624d
 8002e50:	200005c0 	.word	0x200005c0
 8002e54:	20000598 	.word	0x20000598
 8002e58:	20000518 	.word	0x20000518
 8002e5c:	200005bc 	.word	0x200005bc
 8002e60:	20000000 	.word	0x20000000
 8002e64:	2000051c 	.word	0x2000051c
 8002e68:	51eb851f 	.word	0x51eb851f
 8002e6c:	0800b140 	.word	0x0800b140
 8002e70:	20000008 	.word	0x20000008
 8002e74:	20000520 	.word	0x20000520
 8002e78:	20000004 	.word	0x20000004
 8002e7c:	200005cc 	.word	0x200005cc
 8002e80:	20000588 	.word	0x20000588
 8002e84:	0800b148 	.word	0x0800b148
 8002e88:	20000010 	.word	0x20000010
 8002e8c:	20000014 	.word	0x20000014
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40020800 	.word	0x40020800
 8002e98:	20000529 	.word	0x20000529
 8002e9c:	20000528 	.word	0x20000528
 8002ea0:	2000000c 	.word	0x2000000c
 8002ea4:	2000056c 	.word	0x2000056c
 8002ea8:	20000570 	.word	0x20000570
						SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8002eac:	4bb0      	ldr	r3, [pc, #704]	@ (8003170 <StartDefaultTask+0x620>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4ab0      	ldr	r2, [pc, #704]	@ (8003174 <StartDefaultTask+0x624>)
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4aad      	ldr	r2, [pc, #692]	@ (8003178 <StartDefaultTask+0x628>)
 8002ec2:	48ae      	ldr	r0, [pc, #696]	@ (800317c <StartDefaultTask+0x62c>)
 8002ec4:	f002 fcf8 	bl	80058b8 <SPIF_ReadSector>
						str[i] = read[0];
 8002ec8:	4bab      	ldr	r3, [pc, #684]	@ (8003178 <StartDefaultTask+0x628>)
 8002eca:	7819      	ldrb	r1, [r3, #0]
 8002ecc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ed0:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8002ed4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002ed8:	4413      	add	r3, r2
 8002eda:	460a      	mov	r2, r1
 8002edc:	701a      	strb	r2, [r3, #0]
					  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8002ede:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002ee8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002eec:	2b06      	cmp	r3, #6
 8002eee:	dddd      	ble.n	8002eac <StartDefaultTask+0x35c>
					  }
					  str[7] = 0;
 8002ef0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ef4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ef8:	2200      	movs	r2, #0
 8002efa:	71da      	strb	r2, [r3, #7]
					}
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8002efc:	4b9c      	ldr	r3, [pc, #624]	@ (8003170 <StartDefaultTask+0x620>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a9c      	ldr	r2, [pc, #624]	@ (8003174 <StartDefaultTask+0x624>)
 8002f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f06:	4619      	mov	r1, r3
 8002f08:	2307      	movs	r3, #7
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4a9a      	ldr	r2, [pc, #616]	@ (8003178 <StartDefaultTask+0x628>)
 8002f10:	489a      	ldr	r0, [pc, #616]	@ (800317c <StartDefaultTask+0x62c>)
 8002f12:	f002 fcd1 	bl	80058b8 <SPIF_ReadSector>
					int val1 = read[0];
 8002f16:	4b98      	ldr	r3, [pc, #608]	@ (8003178 <StartDefaultTask+0x628>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8002f1e:	4b94      	ldr	r3, [pc, #592]	@ (8003170 <StartDefaultTask+0x620>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a94      	ldr	r2, [pc, #592]	@ (8003174 <StartDefaultTask+0x624>)
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2301      	movs	r3, #1
 8002f30:	4a91      	ldr	r2, [pc, #580]	@ (8003178 <StartDefaultTask+0x628>)
 8002f32:	4892      	ldr	r0, [pc, #584]	@ (800317c <StartDefaultTask+0x62c>)
 8002f34:	f002 fcc0 	bl	80058b8 <SPIF_ReadSector>
					int val2 = read[0];
 8002f38:	4b8f      	ldr	r3, [pc, #572]	@ (8003178 <StartDefaultTask+0x628>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
					float store = val1 + (.025 * val2);
 8002f40:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002f44:	f7fd fc18 	bl	8000778 <__aeabi_i2d>
 8002f48:	4604      	mov	r4, r0
 8002f4a:	460d      	mov	r5, r1
 8002f4c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8002f50:	f7fd fc12 	bl	8000778 <__aeabi_i2d>
 8002f54:	a384      	add	r3, pc, #528	@ (adr r3, 8003168 <StartDefaultTask+0x618>)
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	f7fd f991 	bl	8000280 <__aeabi_dmul>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4620      	mov	r0, r4
 8002f64:	4629      	mov	r1, r5
 8002f66:	f7fd fabb 	bl	80004e0 <__adddf3>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	f7fd fc93 	bl	800089c <__aeabi_d2f>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

					sprintf(toPrint, "%c%s%0.3f", 'e', str, store);
 8002f7c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8002f80:	f7fd fc0c 	bl	800079c <__aeabi_f2d>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002f8c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8002f90:	e9cd 2300 	strd	r2, r3, [sp]
 8002f94:	460b      	mov	r3, r1
 8002f96:	2265      	movs	r2, #101	@ 0x65
 8002f98:	4979      	ldr	r1, [pc, #484]	@ (8003180 <StartDefaultTask+0x630>)
 8002f9a:	f007 fb47 	bl	800a62c <siprintf>
					LCDPrint(toPrint);
 8002f9e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f9dc 	bl	8002360 <LCDPrint>

					while (true) {
					  // Current time
					  unsigned long currentTime = millis();
 8002fa8:	f7fe fda2 	bl	8001af0 <millis>
 8002fac:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
					  static int lastDC = 0;
					  // Read the button states
					  bool currentA = HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0;
 8002fb0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002fb4:	4873      	ldr	r0, [pc, #460]	@ (8003184 <StartDefaultTask+0x634>)
 8002fb6:	f003 fb1f 	bl	80065f8 <HAL_GPIO_ReadPin>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
					  bool currentB = HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0;
 8002fc8:	2101      	movs	r1, #1
 8002fca:	486f      	ldr	r0, [pc, #444]	@ (8003188 <StartDefaultTask+0x638>)
 8002fcc:	f003 fb14 	bl	80065f8 <HAL_GPIO_ReadPin>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bf0c      	ite	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	2300      	movne	r3, #0
 8002fda:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

					  while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 8002fde:	e01a      	b.n	8003016 <StartDefaultTask+0x4c6>
						if (currentA) {
 8002fe0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <StartDefaultTask+0x4ae>
						  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4867      	ldr	r0, [pc, #412]	@ (8003188 <StartDefaultTask+0x638>)
 8002fec:	f003 fb04 	bl	80065f8 <HAL_GPIO_ReadPin>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10f      	bne.n	8003016 <StartDefaultTask+0x4c6>
							both = true;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f887 316e 	strb.w	r3, [r7, #366]	@ 0x16e
							break;
 8002ffc:	e01b      	b.n	8003036 <StartDefaultTask+0x4e6>
						  }
						}
						else {
						  if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0) {
 8002ffe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003002:	4860      	ldr	r0, [pc, #384]	@ (8003184 <StartDefaultTask+0x634>)
 8003004:	f003 faf8 	bl	80065f8 <HAL_GPIO_ReadPin>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <StartDefaultTask+0x4c6>
							both = true;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 316e 	strb.w	r3, [r7, #366]	@ 0x16e
							break;
 8003014:	e00f      	b.n	8003036 <StartDefaultTask+0x4e6>
					  while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 8003016:	f7fe fd6b 	bl	8001af0 <millis>
 800301a:	4602      	mov	r2, r0
 800301c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b63      	cmp	r3, #99	@ 0x63
 8003024:	d807      	bhi.n	8003036 <StartDefaultTask+0x4e6>
 8003026:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1d8      	bne.n	8002fe0 <StartDefaultTask+0x490>
 800302e:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1d4      	bne.n	8002fe0 <StartDefaultTask+0x490>
						  }
						}
					  }

					  if (both) {
 8003036:	f897 316e 	ldrb.w	r3, [r7, #366]	@ 0x16e
 800303a:	2b00      	cmp	r3, #0
 800303c:	f041 806a 	bne.w	8004114 <StartDefaultTask+0x15c4>
						break;
					  }
					  else if (currentB) { //select to edit
 8003040:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 868e 	beq.w	8003d66 <StartDefaultTask+0x1216>
						cursor = 0;
 800304a:	4b50      	ldr	r3, [pc, #320]	@ (800318c <StartDefaultTask+0x63c>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
						if (dispCount == count && count != 16) { // EMPTY add new one
 8003050:	4b47      	ldr	r3, [pc, #284]	@ (8003170 <StartDefaultTask+0x620>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b4e      	ldr	r3, [pc, #312]	@ (8003190 <StartDefaultTask+0x640>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	f040 82e2 	bne.w	8003622 <StartDefaultTask+0xad2>
 800305e:	4b4c      	ldr	r3, [pc, #304]	@ (8003190 <StartDefaultTask+0x640>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b10      	cmp	r3, #16
 8003064:	f000 82dd 	beq.w	8003622 <StartDefaultTask+0xad2>
						  add = true;
 8003068:	4b4a      	ldr	r3, [pc, #296]	@ (8003194 <StartDefaultTask+0x644>)
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
						  int dM = 108;
 800306e:	236c      	movs	r3, #108	@ 0x6c
 8003070:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
						  int dK = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
						  char dN[8] = {' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,0};
 800307a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800307e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003082:	4a45      	ldr	r2, [pc, #276]	@ (8003198 <StartDefaultTask+0x648>)
 8003084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003088:	e883 0003 	stmia.w	r3, {r0, r1}
						  HAL_Delay(100);
 800308c:	2064      	movs	r0, #100	@ 0x64
 800308e:	f002 ff7f 	bl	8005f90 <HAL_Delay>

						  if (cursor < 7) { // moved to a char
 8003092:	4b3e      	ldr	r3, [pc, #248]	@ (800318c <StartDefaultTask+0x63c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b06      	cmp	r3, #6
 8003098:	dc2b      	bgt.n	80030f2 <StartDefaultTask+0x5a2>
							if (dN[cursor] == ' ') {
 800309a:	4b3c      	ldr	r3, [pc, #240]	@ (800318c <StartDefaultTask+0x63c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80030a2:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80030a6:	5cd3      	ldrb	r3, [r2, r3]
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d103      	bne.n	80030b4 <StartDefaultTask+0x564>
							  charcount = 0;
 80030ac:	4b3b      	ldr	r3, [pc, #236]	@ (800319c <StartDefaultTask+0x64c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e032      	b.n	800311a <StartDefaultTask+0x5ca>
							}
							else if (dN[cursor] < ':') {
 80030b4:	4b35      	ldr	r3, [pc, #212]	@ (800318c <StartDefaultTask+0x63c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80030bc:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80030c0:	5cd3      	ldrb	r3, [r2, r3]
 80030c2:	2b39      	cmp	r3, #57	@ 0x39
 80030c4:	d80a      	bhi.n	80030dc <StartDefaultTask+0x58c>
							  charcount = dN[cursor] - '/';
 80030c6:	4b31      	ldr	r3, [pc, #196]	@ (800318c <StartDefaultTask+0x63c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80030ce:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	3b2f      	subs	r3, #47	@ 0x2f
 80030d6:	4a31      	ldr	r2, [pc, #196]	@ (800319c <StartDefaultTask+0x64c>)
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01e      	b.n	800311a <StartDefaultTask+0x5ca>
							}
							else {
							  charcount = dN[cursor] - '6';
 80030dc:	4b2b      	ldr	r3, [pc, #172]	@ (800318c <StartDefaultTask+0x63c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80030e4:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80030e8:	5cd3      	ldrb	r3, [r2, r3]
 80030ea:	3b36      	subs	r3, #54	@ 0x36
 80030ec:	4a2b      	ldr	r2, [pc, #172]	@ (800319c <StartDefaultTask+0x64c>)
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e013      	b.n	800311a <StartDefaultTask+0x5ca>
							}
						  }
						  else if (cursor == 7) {
 80030f2:	4b26      	ldr	r3, [pc, #152]	@ (800318c <StartDefaultTask+0x63c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b07      	cmp	r3, #7
 80030f8:	d105      	bne.n	8003106 <StartDefaultTask+0x5b6>
							charcount = dM - 108;
 80030fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80030fe:	3b6c      	subs	r3, #108	@ 0x6c
 8003100:	4a26      	ldr	r2, [pc, #152]	@ (800319c <StartDefaultTask+0x64c>)
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	e009      	b.n	800311a <StartDefaultTask+0x5ca>
						  }
						  else {
							charcount = dK / 50;
 8003106:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800310a:	4a25      	ldr	r2, [pc, #148]	@ (80031a0 <StartDefaultTask+0x650>)
 800310c:	fb82 1203 	smull	r1, r2, r2, r3
 8003110:	1112      	asrs	r2, r2, #4
 8003112:	17db      	asrs	r3, r3, #31
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	4a21      	ldr	r2, [pc, #132]	@ (800319c <StartDefaultTask+0x64c>)
 8003118:	6013      	str	r3, [r2, #0]
						  }
		//Cursor Movement and Editing:===================================================
						  if (cursor < 7) { //
 800311a:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <StartDefaultTask+0x63c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b06      	cmp	r3, #6
 8003120:	dc4d      	bgt.n	80031be <StartDefaultTask+0x66e>
							if (charcount == 0) {
 8003122:	4b1e      	ldr	r3, [pc, #120]	@ (800319c <StartDefaultTask+0x64c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <StartDefaultTask+0x5f4>
							  dN[cursor] = (char)(charcount+32);
 800312a:	4b1c      	ldr	r3, [pc, #112]	@ (800319c <StartDefaultTask+0x64c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	4b16      	ldr	r3, [pc, #88]	@ (800318c <StartDefaultTask+0x63c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3220      	adds	r2, #32
 8003136:	b2d1      	uxtb	r1, r2
 8003138:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800313c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003140:	54d1      	strb	r1, [r2, r3]
 8003142:	e05b      	b.n	80031fc <StartDefaultTask+0x6ac>
							}
							else if (charcount < 11) {
 8003144:	4b15      	ldr	r3, [pc, #84]	@ (800319c <StartDefaultTask+0x64c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b0a      	cmp	r3, #10
 800314a:	dc2b      	bgt.n	80031a4 <StartDefaultTask+0x654>
							  dN[cursor] = (char)(charcount+47);
 800314c:	4b13      	ldr	r3, [pc, #76]	@ (800319c <StartDefaultTask+0x64c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <StartDefaultTask+0x63c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	322f      	adds	r2, #47	@ 0x2f
 8003158:	b2d1      	uxtb	r1, r2
 800315a:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800315e:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003162:	54d1      	strb	r1, [r2, r3]
 8003164:	e04a      	b.n	80031fc <StartDefaultTask+0x6ac>
 8003166:	bf00      	nop
 8003168:	9999999a 	.word	0x9999999a
 800316c:	3f999999 	.word	0x3f999999
 8003170:	2000056c 	.word	0x2000056c
 8003174:	2000052c 	.word	0x2000052c
 8003178:	2000058c 	.word	0x2000058c
 800317c:	200004f8 	.word	0x200004f8
 8003180:	0800b158 	.word	0x0800b158
 8003184:	40021000 	.word	0x40021000
 8003188:	40020800 	.word	0x40020800
 800318c:	20000578 	.word	0x20000578
 8003190:	20000570 	.word	0x20000570
 8003194:	20000575 	.word	0x20000575
 8003198:	0800b1a0 	.word	0x0800b1a0
 800319c:	20000580 	.word	0x20000580
 80031a0:	51eb851f 	.word	0x51eb851f
							}
							else {
							  dN[cursor] = (char)(charcount+54);
 80031a4:	4b9e      	ldr	r3, [pc, #632]	@ (8003420 <StartDefaultTask+0x8d0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4b9e      	ldr	r3, [pc, #632]	@ (8003424 <StartDefaultTask+0x8d4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3236      	adds	r2, #54	@ 0x36
 80031b0:	b2d1      	uxtb	r1, r2
 80031b2:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80031b6:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80031ba:	54d1      	strb	r1, [r2, r3]
 80031bc:	e01e      	b.n	80031fc <StartDefaultTask+0x6ac>
							}
						  }
						  else if (cursor == 7) { //mhz
 80031be:	4b99      	ldr	r3, [pc, #612]	@ (8003424 <StartDefaultTask+0x8d4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b07      	cmp	r3, #7
 80031c4:	d10c      	bne.n	80031e0 <StartDefaultTask+0x690>
							if (charcount > 9) {
 80031c6:	4b96      	ldr	r3, [pc, #600]	@ (8003420 <StartDefaultTask+0x8d0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b09      	cmp	r3, #9
 80031cc:	dd02      	ble.n	80031d4 <StartDefaultTask+0x684>
							  charcount = 9;
 80031ce:	4b94      	ldr	r3, [pc, #592]	@ (8003420 <StartDefaultTask+0x8d0>)
 80031d0:	2209      	movs	r2, #9
 80031d2:	601a      	str	r2, [r3, #0]
							}
							dM = 108 + charcount;
 80031d4:	4b92      	ldr	r3, [pc, #584]	@ (8003420 <StartDefaultTask+0x8d0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	336c      	adds	r3, #108	@ 0x6c
 80031da:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80031de:	e00d      	b.n	80031fc <StartDefaultTask+0x6ac>
						  }
						  else {
							if (charcount > 19) {
 80031e0:	4b8f      	ldr	r3, [pc, #572]	@ (8003420 <StartDefaultTask+0x8d0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b13      	cmp	r3, #19
 80031e6:	dd02      	ble.n	80031ee <StartDefaultTask+0x69e>
							  charcount = 19;
 80031e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003420 <StartDefaultTask+0x8d0>)
 80031ea:	2213      	movs	r2, #19
 80031ec:	601a      	str	r2, [r3, #0]
							}
							dK = 50 * charcount;
 80031ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003420 <StartDefaultTask+0x8d0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2232      	movs	r2, #50	@ 0x32
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
						  }

						  float pfreq = dM + (dK * .001);
 80031fc:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8003200:	f7fd faba 	bl	8000778 <__aeabi_i2d>
 8003204:	4604      	mov	r4, r0
 8003206:	460d      	mov	r5, r1
 8003208:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 800320c:	f7fd fab4 	bl	8000778 <__aeabi_i2d>
 8003210:	a381      	add	r3, pc, #516	@ (adr r3, 8003418 <StartDefaultTask+0x8c8>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	f7fd f833 	bl	8000280 <__aeabi_dmul>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4620      	mov	r0, r4
 8003220:	4629      	mov	r1, r5
 8003222:	f7fd f95d 	bl	80004e0 <__adddf3>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f7fd fb35 	bl	800089c <__aeabi_d2f>
 8003232:	4603      	mov	r3, r0
 8003234:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

						  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8003238:	4b7a      	ldr	r3, [pc, #488]	@ (8003424 <StartDefaultTask+0x8d4>)
 800323a:	681c      	ldr	r4, [r3, #0]
 800323c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8003240:	f7fd faac 	bl	800079c <__aeabi_f2d>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800324c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003250:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	4623      	mov	r3, r4
 8003258:	2261      	movs	r2, #97	@ 0x61
 800325a:	4973      	ldr	r1, [pc, #460]	@ (8003428 <StartDefaultTask+0x8d8>)
 800325c:	f007 f9e6 	bl	800a62c <siprintf>
						  LCDPrint(toPrint);
 8003260:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff f87b 	bl	8002360 <LCDPrint>

						  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press TODO might need to swap highs and lows
 800326a:	e12c      	b.n	80034c6 <StartDefaultTask+0x976>
							static int last_cursor = 0;
							static int last_cc = 0;
							if (last_cc != charcount) { // change the actual values of dN dM and dK, incrementing values
 800326c:	4b6f      	ldr	r3, [pc, #444]	@ (800342c <StartDefaultTask+0x8dc>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b6b      	ldr	r3, [pc, #428]	@ (8003420 <StartDefaultTask+0x8d0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	f000 808e 	beq.w	8003396 <StartDefaultTask+0x846>
							  if (cursor < 7) { //
 800327a:	4b6a      	ldr	r3, [pc, #424]	@ (8003424 <StartDefaultTask+0x8d4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b06      	cmp	r3, #6
 8003280:	dc2e      	bgt.n	80032e0 <StartDefaultTask+0x790>
								if (charcount == 0) {
 8003282:	4b67      	ldr	r3, [pc, #412]	@ (8003420 <StartDefaultTask+0x8d0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10c      	bne.n	80032a4 <StartDefaultTask+0x754>
								  dN[cursor] = (char)(charcount+32);
 800328a:	4b65      	ldr	r3, [pc, #404]	@ (8003420 <StartDefaultTask+0x8d0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	4b64      	ldr	r3, [pc, #400]	@ (8003424 <StartDefaultTask+0x8d4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3220      	adds	r2, #32
 8003296:	b2d1      	uxtb	r1, r2
 8003298:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800329c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80032a0:	54d1      	strb	r1, [r2, r3]
 80032a2:	e03c      	b.n	800331e <StartDefaultTask+0x7ce>
								}
								else if (charcount < 11) {
 80032a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003420 <StartDefaultTask+0x8d0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b0a      	cmp	r3, #10
 80032aa:	dc0c      	bgt.n	80032c6 <StartDefaultTask+0x776>
								  dN[cursor] = (char)(charcount+47);
 80032ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003420 <StartDefaultTask+0x8d0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003424 <StartDefaultTask+0x8d4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	322f      	adds	r2, #47	@ 0x2f
 80032b8:	b2d1      	uxtb	r1, r2
 80032ba:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80032be:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80032c2:	54d1      	strb	r1, [r2, r3]
 80032c4:	e02b      	b.n	800331e <StartDefaultTask+0x7ce>
								}
								else {
								  dN[cursor] = (char)(charcount+54);
 80032c6:	4b56      	ldr	r3, [pc, #344]	@ (8003420 <StartDefaultTask+0x8d0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b55      	ldr	r3, [pc, #340]	@ (8003424 <StartDefaultTask+0x8d4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3236      	adds	r2, #54	@ 0x36
 80032d2:	b2d1      	uxtb	r1, r2
 80032d4:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80032d8:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80032dc:	54d1      	strb	r1, [r2, r3]
 80032de:	e01e      	b.n	800331e <StartDefaultTask+0x7ce>
								}
							  }
							  else if (cursor == 7) { //mhz
 80032e0:	4b50      	ldr	r3, [pc, #320]	@ (8003424 <StartDefaultTask+0x8d4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b07      	cmp	r3, #7
 80032e6:	d10c      	bne.n	8003302 <StartDefaultTask+0x7b2>
								if (charcount > 9) {
 80032e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003420 <StartDefaultTask+0x8d0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b09      	cmp	r3, #9
 80032ee:	dd02      	ble.n	80032f6 <StartDefaultTask+0x7a6>
								  charcount = 9;
 80032f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003420 <StartDefaultTask+0x8d0>)
 80032f2:	2209      	movs	r2, #9
 80032f4:	601a      	str	r2, [r3, #0]
								}
								dM = 108 + charcount;
 80032f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003420 <StartDefaultTask+0x8d0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	336c      	adds	r3, #108	@ 0x6c
 80032fc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8003300:	e00d      	b.n	800331e <StartDefaultTask+0x7ce>
							  }
							  else {
								if (charcount > 19) {
 8003302:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <StartDefaultTask+0x8d0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b13      	cmp	r3, #19
 8003308:	dd02      	ble.n	8003310 <StartDefaultTask+0x7c0>
								  charcount = 19;
 800330a:	4b45      	ldr	r3, [pc, #276]	@ (8003420 <StartDefaultTask+0x8d0>)
 800330c:	2213      	movs	r2, #19
 800330e:	601a      	str	r2, [r3, #0]
								}
								dK = 50 * charcount;
 8003310:	4b43      	ldr	r3, [pc, #268]	@ (8003420 <StartDefaultTask+0x8d0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2232      	movs	r2, #50	@ 0x32
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
							  }

							  float pfreq = dM + (dK * .001);
 800331e:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8003322:	f7fd fa29 	bl	8000778 <__aeabi_i2d>
 8003326:	4604      	mov	r4, r0
 8003328:	460d      	mov	r5, r1
 800332a:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 800332e:	f7fd fa23 	bl	8000778 <__aeabi_i2d>
 8003332:	a339      	add	r3, pc, #228	@ (adr r3, 8003418 <StartDefaultTask+0x8c8>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fc ffa2 	bl	8000280 <__aeabi_dmul>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4620      	mov	r0, r4
 8003342:	4629      	mov	r1, r5
 8003344:	f7fd f8cc 	bl	80004e0 <__adddf3>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	f7fd faa4 	bl	800089c <__aeabi_d2f>
 8003354:	4603      	mov	r3, r0
 8003356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
							  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 800335a:	4b32      	ldr	r3, [pc, #200]	@ (8003424 <StartDefaultTask+0x8d4>)
 800335c:	681c      	ldr	r4, [r3, #0]
 800335e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8003362:	f7fd fa1b 	bl	800079c <__aeabi_f2d>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800336e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003372:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4623      	mov	r3, r4
 800337a:	2261      	movs	r2, #97	@ 0x61
 800337c:	492a      	ldr	r1, [pc, #168]	@ (8003428 <StartDefaultTask+0x8d8>)
 800337e:	f007 f955 	bl	800a62c <siprintf>
							  LCDPrint(toPrint);
 8003382:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe ffea 	bl	8002360 <LCDPrint>
							  last_cc = charcount;
 800338c:	4b24      	ldr	r3, [pc, #144]	@ (8003420 <StartDefaultTask+0x8d0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a26      	ldr	r2, [pc, #152]	@ (800342c <StartDefaultTask+0x8dc>)
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	e097      	b.n	80034c6 <StartDefaultTask+0x976>
							} ///////// case 1
							else if (last_cursor != cursor) { // change the value of charcount based on where we are
 8003396:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <StartDefaultTask+0x8e0>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4b22      	ldr	r3, [pc, #136]	@ (8003424 <StartDefaultTask+0x8d4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	f000 8091 	beq.w	80034c6 <StartDefaultTask+0x976>
							  if (cursor < 7) { // moved to a char
 80033a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003424 <StartDefaultTask+0x8d4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b06      	cmp	r3, #6
 80033aa:	dc2b      	bgt.n	8003404 <StartDefaultTask+0x8b4>
								if (dN[cursor] == ' ') {
 80033ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003424 <StartDefaultTask+0x8d4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80033b4:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80033b8:	5cd3      	ldrb	r3, [r2, r3]
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d103      	bne.n	80033c6 <StartDefaultTask+0x876>
								  charcount = 0;
 80033be:	4b18      	ldr	r3, [pc, #96]	@ (8003420 <StartDefaultTask+0x8d0>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e040      	b.n	8003448 <StartDefaultTask+0x8f8>
								}
								else if (dN[cursor] < ':') {
 80033c6:	4b17      	ldr	r3, [pc, #92]	@ (8003424 <StartDefaultTask+0x8d4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80033ce:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	2b39      	cmp	r3, #57	@ 0x39
 80033d6:	d80a      	bhi.n	80033ee <StartDefaultTask+0x89e>
								  charcount = dN[cursor] - '/';
 80033d8:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <StartDefaultTask+0x8d4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80033e0:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80033e4:	5cd3      	ldrb	r3, [r2, r3]
 80033e6:	3b2f      	subs	r3, #47	@ 0x2f
 80033e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003420 <StartDefaultTask+0x8d0>)
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e02c      	b.n	8003448 <StartDefaultTask+0x8f8>
								}
								else {
								  charcount = dN[cursor] - '6';
 80033ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <StartDefaultTask+0x8d4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80033f6:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80033fa:	5cd3      	ldrb	r3, [r2, r3]
 80033fc:	3b36      	subs	r3, #54	@ 0x36
 80033fe:	4a08      	ldr	r2, [pc, #32]	@ (8003420 <StartDefaultTask+0x8d0>)
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e021      	b.n	8003448 <StartDefaultTask+0x8f8>
								}
							  }
							  else if (cursor == 7) {
 8003404:	4b07      	ldr	r3, [pc, #28]	@ (8003424 <StartDefaultTask+0x8d4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b07      	cmp	r3, #7
 800340a:	d113      	bne.n	8003434 <StartDefaultTask+0x8e4>
								charcount = dM - 108;
 800340c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003410:	3b6c      	subs	r3, #108	@ 0x6c
 8003412:	4a03      	ldr	r2, [pc, #12]	@ (8003420 <StartDefaultTask+0x8d0>)
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e017      	b.n	8003448 <StartDefaultTask+0x8f8>
 8003418:	d2f1a9fc 	.word	0xd2f1a9fc
 800341c:	3f50624d 	.word	0x3f50624d
 8003420:	20000580 	.word	0x20000580
 8003424:	20000578 	.word	0x20000578
 8003428:	0800b164 	.word	0x0800b164
 800342c:	200005d0 	.word	0x200005d0
 8003430:	200005d4 	.word	0x200005d4
							  }
							  else {
								charcount = dK / 50;
 8003434:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003438:	4abf      	ldr	r2, [pc, #764]	@ (8003738 <StartDefaultTask+0xbe8>)
 800343a:	fb82 1203 	smull	r1, r2, r2, r3
 800343e:	1112      	asrs	r2, r2, #4
 8003440:	17db      	asrs	r3, r3, #31
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	4abd      	ldr	r2, [pc, #756]	@ (800373c <StartDefaultTask+0xbec>)
 8003446:	6013      	str	r3, [r2, #0]
							  }

							  float pfreq = dM + (dK * .001);
 8003448:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 800344c:	f7fd f994 	bl	8000778 <__aeabi_i2d>
 8003450:	4604      	mov	r4, r0
 8003452:	460d      	mov	r5, r1
 8003454:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 8003458:	f7fd f98e 	bl	8000778 <__aeabi_i2d>
 800345c:	a3b2      	add	r3, pc, #712	@ (adr r3, 8003728 <StartDefaultTask+0xbd8>)
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f7fc ff0d 	bl	8000280 <__aeabi_dmul>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4620      	mov	r0, r4
 800346c:	4629      	mov	r1, r5
 800346e:	f7fd f837 	bl	80004e0 <__adddf3>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f7fd fa0f 	bl	800089c <__aeabi_d2f>
 800347e:	4603      	mov	r3, r0
 8003480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
							  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8003484:	4bae      	ldr	r3, [pc, #696]	@ (8003740 <StartDefaultTask+0xbf0>)
 8003486:	681c      	ldr	r4, [r3, #0]
 8003488:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800348c:	f7fd f986 	bl	800079c <__aeabi_f2d>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003498:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800349c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4623      	mov	r3, r4
 80034a4:	2261      	movs	r2, #97	@ 0x61
 80034a6:	49a7      	ldr	r1, [pc, #668]	@ (8003744 <StartDefaultTask+0xbf4>)
 80034a8:	f007 f8c0 	bl	800a62c <siprintf>
							  LCDPrint(toPrint);
 80034ac:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe ff55 	bl	8002360 <LCDPrint>
							  last_cc = charcount;
 80034b6:	4ba1      	ldr	r3, [pc, #644]	@ (800373c <StartDefaultTask+0xbec>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4aa3      	ldr	r2, [pc, #652]	@ (8003748 <StartDefaultTask+0xbf8>)
 80034bc:	6013      	str	r3, [r2, #0]
							  last_cursor = cursor;
 80034be:	4ba0      	ldr	r3, [pc, #640]	@ (8003740 <StartDefaultTask+0xbf0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4aa2      	ldr	r2, [pc, #648]	@ (800374c <StartDefaultTask+0xbfc>)
 80034c4:	6013      	str	r3, [r2, #0]
						  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press TODO might need to swap highs and lows
 80034c6:	2101      	movs	r1, #1
 80034c8:	48a1      	ldr	r0, [pc, #644]	@ (8003750 <StartDefaultTask+0xc00>)
 80034ca:	f003 f895 	bl	80065f8 <HAL_GPIO_ReadPin>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f43f aecb 	beq.w	800326c <StartDefaultTask+0x71c>
							} ///////// case 2
						  }
						  //Some functionality to add dN,dM,and dK to the eeprom
						  toAdd(dN,dM,dK);
 80034d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034da:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80034de:	f8d7 1164 	ldr.w	r1, [r7, #356]	@ 0x164
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe f970 	bl	80017c8 <toAdd>
						  HAL_Delay(500);
 80034e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80034ec:	f002 fd50 	bl	8005f90 <HAL_Delay>
						  add = false;
 80034f0:	4b98      	ldr	r3, [pc, #608]	@ (8003754 <StartDefaultTask+0xc04>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
						  pause = false;
 80034f6:	4b98      	ldr	r3, [pc, #608]	@ (8003758 <StartDefaultTask+0xc08>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
						  toDisplay();
 80034fc:	f7fe f922 	bl	8001744 <toDisplay>

						  char str[8];
						  if (dispCount == count) {
 8003500:	4b96      	ldr	r3, [pc, #600]	@ (800375c <StartDefaultTask+0xc0c>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b96      	ldr	r3, [pc, #600]	@ (8003760 <StartDefaultTask+0xc10>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d106      	bne.n	800351a <StartDefaultTask+0x9ca>
							str[0] = ':'; //EMPTY
 800350c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003510:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003514:	223a      	movs	r2, #58	@ 0x3a
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e02b      	b.n	8003572 <StartDefaultTask+0xa22>
						  }
						  else {
							for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003520:	e01d      	b.n	800355e <StartDefaultTask+0xa0e>
			//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
							  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8003522:	4b8e      	ldr	r3, [pc, #568]	@ (800375c <StartDefaultTask+0xc0c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a8f      	ldr	r2, [pc, #572]	@ (8003764 <StartDefaultTask+0xc14>)
 8003528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352c:	4619      	mov	r1, r3
 800352e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2301      	movs	r3, #1
 8003536:	4a8c      	ldr	r2, [pc, #560]	@ (8003768 <StartDefaultTask+0xc18>)
 8003538:	488c      	ldr	r0, [pc, #560]	@ (800376c <StartDefaultTask+0xc1c>)
 800353a:	f002 f9bd 	bl	80058b8 <SPIF_ReadSector>
							  str[i] = read[0];
 800353e:	4b8a      	ldr	r3, [pc, #552]	@ (8003768 <StartDefaultTask+0xc18>)
 8003540:	7819      	ldrb	r1, [r3, #0]
 8003542:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003546:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 800354a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800354e:	4413      	add	r3, r2
 8003550:	460a      	mov	r2, r1
 8003552:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003554:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003558:	3301      	adds	r3, #1
 800355a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800355e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003562:	2b06      	cmp	r3, #6
 8003564:	dddd      	ble.n	8003522 <StartDefaultTask+0x9d2>
							}
							str[7] = 0;
 8003566:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800356a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800356e:	2200      	movs	r2, #0
 8003570:	71da      	strb	r2, [r3, #7]
						  }
			//			  float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
						  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8003572:	4b7a      	ldr	r3, [pc, #488]	@ (800375c <StartDefaultTask+0xc0c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7b      	ldr	r2, [pc, #492]	@ (8003764 <StartDefaultTask+0xc14>)
 8003578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357c:	4619      	mov	r1, r3
 800357e:	2307      	movs	r3, #7
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2301      	movs	r3, #1
 8003584:	4a78      	ldr	r2, [pc, #480]	@ (8003768 <StartDefaultTask+0xc18>)
 8003586:	4879      	ldr	r0, [pc, #484]	@ (800376c <StartDefaultTask+0xc1c>)
 8003588:	f002 f996 	bl	80058b8 <SPIF_ReadSector>
						  int val1 = read[0];
 800358c:	4b76      	ldr	r3, [pc, #472]	@ (8003768 <StartDefaultTask+0xc18>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
						  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8003594:	4b71      	ldr	r3, [pc, #452]	@ (800375c <StartDefaultTask+0xc0c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a72      	ldr	r2, [pc, #456]	@ (8003764 <StartDefaultTask+0xc14>)
 800359a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359e:	4619      	mov	r1, r3
 80035a0:	2308      	movs	r3, #8
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2301      	movs	r3, #1
 80035a6:	4a70      	ldr	r2, [pc, #448]	@ (8003768 <StartDefaultTask+0xc18>)
 80035a8:	4870      	ldr	r0, [pc, #448]	@ (800376c <StartDefaultTask+0xc1c>)
 80035aa:	f002 f985 	bl	80058b8 <SPIF_ReadSector>
						  int val2 = read[0];
 80035ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003768 <StartDefaultTask+0xc18>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
						  float store = val1 + (.025 * val2);
 80035b6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80035ba:	f7fd f8dd 	bl	8000778 <__aeabi_i2d>
 80035be:	4604      	mov	r4, r0
 80035c0:	460d      	mov	r5, r1
 80035c2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80035c6:	f7fd f8d7 	bl	8000778 <__aeabi_i2d>
 80035ca:	a359      	add	r3, pc, #356	@ (adr r3, 8003730 <StartDefaultTask+0xbe0>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fc fe56 	bl	8000280 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4620      	mov	r0, r4
 80035da:	4629      	mov	r1, r5
 80035dc:	f7fc ff80 	bl	80004e0 <__adddf3>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	f7fd f958 	bl	800089c <__aeabi_d2f>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

						  sprintf(toPrint, "%c%s%0.3f",'e',str,store);
 80035f2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80035f6:	f7fd f8d1 	bl	800079c <__aeabi_f2d>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8003602:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003606:	e9cd 2300 	strd	r2, r3, [sp]
 800360a:	460b      	mov	r3, r1
 800360c:	2265      	movs	r2, #101	@ 0x65
 800360e:	4958      	ldr	r1, [pc, #352]	@ (8003770 <StartDefaultTask+0xc20>)
 8003610:	f007 f80c 	bl	800a62c <siprintf>
						  LCDPrint(toPrint);
 8003614:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe fea1 	bl	8002360 <LCDPrint>
						if (dispCount == count && count != 16) { // EMPTY add new one
 800361e:	f000 bcdd 	b.w	8003fdc <StartDefaultTask+0x148c>
						}
						else { // regular edit 2
						  add = true;
 8003622:	4b4c      	ldr	r3, [pc, #304]	@ (8003754 <StartDefaultTask+0xc04>)
 8003624:	2201      	movs	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]

						  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8003628:	4b4c      	ldr	r3, [pc, #304]	@ (800375c <StartDefaultTask+0xc0c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a4d      	ldr	r2, [pc, #308]	@ (8003764 <StartDefaultTask+0xc14>)
 800362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003632:	4619      	mov	r1, r3
 8003634:	2307      	movs	r3, #7
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2301      	movs	r3, #1
 800363a:	4a4b      	ldr	r2, [pc, #300]	@ (8003768 <StartDefaultTask+0xc18>)
 800363c:	484b      	ldr	r0, [pc, #300]	@ (800376c <StartDefaultTask+0xc1c>)
 800363e:	f002 f93b 	bl	80058b8 <SPIF_ReadSector>
						  int dM = read[0];
 8003642:	4b49      	ldr	r3, [pc, #292]	@ (8003768 <StartDefaultTask+0xc18>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
						  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 800364a:	4b44      	ldr	r3, [pc, #272]	@ (800375c <StartDefaultTask+0xc0c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a45      	ldr	r2, [pc, #276]	@ (8003764 <StartDefaultTask+0xc14>)
 8003650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003654:	4619      	mov	r1, r3
 8003656:	2308      	movs	r3, #8
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2301      	movs	r3, #1
 800365c:	4a42      	ldr	r2, [pc, #264]	@ (8003768 <StartDefaultTask+0xc18>)
 800365e:	4843      	ldr	r0, [pc, #268]	@ (800376c <StartDefaultTask+0xc1c>)
 8003660:	f002 f92a 	bl	80058b8 <SPIF_ReadSector>
						  int dK = read[0] * 25;
 8003664:	4b40      	ldr	r3, [pc, #256]	@ (8003768 <StartDefaultTask+0xc18>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	009a      	lsls	r2, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
						  char dN[8] = {' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,0};
 8003678:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800367c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003680:	4a3c      	ldr	r2, [pc, #240]	@ (8003774 <StartDefaultTask+0xc24>)
 8003682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003686:	e883 0003 	stmia.w	r3, {r0, r1}
						  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003690:	e01d      	b.n	80036ce <StartDefaultTask+0xb7e>
			//				dN[i] = EEPROM.read(eepDisplay[dispCount] + i);
							SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8003692:	4b32      	ldr	r3, [pc, #200]	@ (800375c <StartDefaultTask+0xc0c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a33      	ldr	r2, [pc, #204]	@ (8003764 <StartDefaultTask+0xc14>)
 8003698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369c:	4619      	mov	r1, r3
 800369e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2301      	movs	r3, #1
 80036a6:	4a30      	ldr	r2, [pc, #192]	@ (8003768 <StartDefaultTask+0xc18>)
 80036a8:	4830      	ldr	r0, [pc, #192]	@ (800376c <StartDefaultTask+0xc1c>)
 80036aa:	f002 f905 	bl	80058b8 <SPIF_ReadSector>
							dN[i] = read[0];
 80036ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003768 <StartDefaultTask+0xc18>)
 80036b0:	7819      	ldrb	r1, [r3, #0]
 80036b2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80036b6:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 80036ba:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80036be:	4413      	add	r3, r2
 80036c0:	460a      	mov	r2, r1
 80036c2:	701a      	strb	r2, [r3, #0]
						  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80036c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80036c8:	3301      	adds	r3, #1
 80036ca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80036ce:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	dddd      	ble.n	8003692 <StartDefaultTask+0xb42>
						  }
						  HAL_Delay(100);
 80036d6:	2064      	movs	r0, #100	@ 0x64
 80036d8:	f002 fc5a 	bl	8005f90 <HAL_Delay>

						  if (cursor < 7) { // moved to a char
 80036dc:	4b18      	ldr	r3, [pc, #96]	@ (8003740 <StartDefaultTask+0xbf0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	dc54      	bgt.n	800378e <StartDefaultTask+0xc3e>
							if (dN[cursor] == ' ') {
 80036e4:	4b16      	ldr	r3, [pc, #88]	@ (8003740 <StartDefaultTask+0xbf0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80036ec:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d103      	bne.n	80036fe <StartDefaultTask+0xbae>
							  charcount = 0;
 80036f6:	4b11      	ldr	r3, [pc, #68]	@ (800373c <StartDefaultTask+0xbec>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e05b      	b.n	80037b6 <StartDefaultTask+0xc66>
							}
							else if (dN[cursor] < ':') {
 80036fe:	4b10      	ldr	r3, [pc, #64]	@ (8003740 <StartDefaultTask+0xbf0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003706:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800370a:	5cd3      	ldrb	r3, [r2, r3]
 800370c:	2b39      	cmp	r3, #57	@ 0x39
 800370e:	d833      	bhi.n	8003778 <StartDefaultTask+0xc28>
							  charcount = dN[cursor] - '/';
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <StartDefaultTask+0xbf0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003718:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	3b2f      	subs	r3, #47	@ 0x2f
 8003720:	4a06      	ldr	r2, [pc, #24]	@ (800373c <StartDefaultTask+0xbec>)
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	e047      	b.n	80037b6 <StartDefaultTask+0xc66>
 8003726:	bf00      	nop
 8003728:	d2f1a9fc 	.word	0xd2f1a9fc
 800372c:	3f50624d 	.word	0x3f50624d
 8003730:	9999999a 	.word	0x9999999a
 8003734:	3f999999 	.word	0x3f999999
 8003738:	51eb851f 	.word	0x51eb851f
 800373c:	20000580 	.word	0x20000580
 8003740:	20000578 	.word	0x20000578
 8003744:	0800b164 	.word	0x0800b164
 8003748:	200005d0 	.word	0x200005d0
 800374c:	200005d4 	.word	0x200005d4
 8003750:	40020800 	.word	0x40020800
 8003754:	20000575 	.word	0x20000575
 8003758:	2000000c 	.word	0x2000000c
 800375c:	2000056c 	.word	0x2000056c
 8003760:	20000570 	.word	0x20000570
 8003764:	2000052c 	.word	0x2000052c
 8003768:	2000058c 	.word	0x2000058c
 800376c:	200004f8 	.word	0x200004f8
 8003770:	0800b158 	.word	0x0800b158
 8003774:	0800b1a0 	.word	0x0800b1a0
							}
							else {
							  charcount = dN[cursor] - '6';
 8003778:	4ba1      	ldr	r3, [pc, #644]	@ (8003a00 <StartDefaultTask+0xeb0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003780:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	3b36      	subs	r3, #54	@ 0x36
 8003788:	4a9e      	ldr	r2, [pc, #632]	@ (8003a04 <StartDefaultTask+0xeb4>)
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	e013      	b.n	80037b6 <StartDefaultTask+0xc66>
							}
						  }
						  else if (cursor == 7) {
 800378e:	4b9c      	ldr	r3, [pc, #624]	@ (8003a00 <StartDefaultTask+0xeb0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b07      	cmp	r3, #7
 8003794:	d105      	bne.n	80037a2 <StartDefaultTask+0xc52>
							charcount = dM - 108;
 8003796:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800379a:	3b6c      	subs	r3, #108	@ 0x6c
 800379c:	4a99      	ldr	r2, [pc, #612]	@ (8003a04 <StartDefaultTask+0xeb4>)
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	e009      	b.n	80037b6 <StartDefaultTask+0xc66>
						  }
						  else {
							charcount = dK / 50;
 80037a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80037a6:	4a98      	ldr	r2, [pc, #608]	@ (8003a08 <StartDefaultTask+0xeb8>)
 80037a8:	fb82 1203 	smull	r1, r2, r2, r3
 80037ac:	1112      	asrs	r2, r2, #4
 80037ae:	17db      	asrs	r3, r3, #31
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	4a94      	ldr	r2, [pc, #592]	@ (8003a04 <StartDefaultTask+0xeb4>)
 80037b4:	6013      	str	r3, [r2, #0]
						  }

						  if (cursor < 7) { //
 80037b6:	4b92      	ldr	r3, [pc, #584]	@ (8003a00 <StartDefaultTask+0xeb0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	dc2e      	bgt.n	800381c <StartDefaultTask+0xccc>
							if (charcount == 0) {
 80037be:	4b91      	ldr	r3, [pc, #580]	@ (8003a04 <StartDefaultTask+0xeb4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <StartDefaultTask+0xc90>
							  dN[cursor] = (char)(charcount+32);
 80037c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a04 <StartDefaultTask+0xeb4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003a00 <StartDefaultTask+0xeb0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3220      	adds	r2, #32
 80037d2:	b2d1      	uxtb	r1, r2
 80037d4:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80037d8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80037dc:	54d1      	strb	r1, [r2, r3]
 80037de:	e03c      	b.n	800385a <StartDefaultTask+0xd0a>
							}
							else if (charcount < 11) {
 80037e0:	4b88      	ldr	r3, [pc, #544]	@ (8003a04 <StartDefaultTask+0xeb4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b0a      	cmp	r3, #10
 80037e6:	dc0c      	bgt.n	8003802 <StartDefaultTask+0xcb2>
							  dN[cursor] = (char)(charcount+47);
 80037e8:	4b86      	ldr	r3, [pc, #536]	@ (8003a04 <StartDefaultTask+0xeb4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4b84      	ldr	r3, [pc, #528]	@ (8003a00 <StartDefaultTask+0xeb0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	322f      	adds	r2, #47	@ 0x2f
 80037f4:	b2d1      	uxtb	r1, r2
 80037f6:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80037fa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80037fe:	54d1      	strb	r1, [r2, r3]
 8003800:	e02b      	b.n	800385a <StartDefaultTask+0xd0a>
							}
							else {
							  dN[cursor] = (char)(charcount+54);
 8003802:	4b80      	ldr	r3, [pc, #512]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	4b7d      	ldr	r3, [pc, #500]	@ (8003a00 <StartDefaultTask+0xeb0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3236      	adds	r2, #54	@ 0x36
 800380e:	b2d1      	uxtb	r1, r2
 8003810:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003814:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8003818:	54d1      	strb	r1, [r2, r3]
 800381a:	e01e      	b.n	800385a <StartDefaultTask+0xd0a>
							}
						  }
						  else if (cursor == 7) { //mhz
 800381c:	4b78      	ldr	r3, [pc, #480]	@ (8003a00 <StartDefaultTask+0xeb0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b07      	cmp	r3, #7
 8003822:	d10c      	bne.n	800383e <StartDefaultTask+0xcee>
							if (charcount > 9) {
 8003824:	4b77      	ldr	r3, [pc, #476]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b09      	cmp	r3, #9
 800382a:	dd02      	ble.n	8003832 <StartDefaultTask+0xce2>
							  charcount = 9;
 800382c:	4b75      	ldr	r3, [pc, #468]	@ (8003a04 <StartDefaultTask+0xeb4>)
 800382e:	2209      	movs	r2, #9
 8003830:	601a      	str	r2, [r3, #0]
							}
							dM = 108 + charcount;
 8003832:	4b74      	ldr	r3, [pc, #464]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	336c      	adds	r3, #108	@ 0x6c
 8003838:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800383c:	e00d      	b.n	800385a <StartDefaultTask+0xd0a>
						  }
						  else {
							if (charcount > 19) {
 800383e:	4b71      	ldr	r3, [pc, #452]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b13      	cmp	r3, #19
 8003844:	dd02      	ble.n	800384c <StartDefaultTask+0xcfc>
							  charcount = 19;
 8003846:	4b6f      	ldr	r3, [pc, #444]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003848:	2213      	movs	r2, #19
 800384a:	601a      	str	r2, [r3, #0]
							}
							dK = 50 * charcount;
 800384c:	4b6d      	ldr	r3, [pc, #436]	@ (8003a04 <StartDefaultTask+0xeb4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2232      	movs	r2, #50	@ 0x32
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
						  }


						  float pfreq = dM + (dK * .001);
 800385a:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800385e:	f7fc ff8b 	bl	8000778 <__aeabi_i2d>
 8003862:	4604      	mov	r4, r0
 8003864:	460d      	mov	r5, r1
 8003866:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 800386a:	f7fc ff85 	bl	8000778 <__aeabi_i2d>
 800386e:	a362      	add	r3, pc, #392	@ (adr r3, 80039f8 <StartDefaultTask+0xea8>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f7fc fd04 	bl	8000280 <__aeabi_dmul>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4620      	mov	r0, r4
 800387e:	4629      	mov	r1, r5
 8003880:	f7fc fe2e 	bl	80004e0 <__adddf3>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	f7fd f806 	bl	800089c <__aeabi_d2f>
 8003890:	4603      	mov	r3, r0
 8003892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8003896:	4b5a      	ldr	r3, [pc, #360]	@ (8003a00 <StartDefaultTask+0xeb0>)
 8003898:	681c      	ldr	r4, [r3, #0]
 800389a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800389e:	f7fc ff7d 	bl	800079c <__aeabi_f2d>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80038aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	4623      	mov	r3, r4
 80038b6:	2261      	movs	r2, #97	@ 0x61
 80038b8:	4954      	ldr	r1, [pc, #336]	@ (8003a0c <StartDefaultTask+0xebc>)
 80038ba:	f006 feb7 	bl	800a62c <siprintf>
						  LCDPrint(toPrint);
 80038be:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fd4c 	bl	8002360 <LCDPrint>

						  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press
 80038c8:	e12e      	b.n	8003b28 <StartDefaultTask+0xfd8>
							static int last_cursor = 0;
							static int last_cc = 0;
							if (last_cc != charcount) { // change the actual values of dN dM and dK, incrementing values WORKS
 80038ca:	4b51      	ldr	r3, [pc, #324]	@ (8003a10 <StartDefaultTask+0xec0>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003a04 <StartDefaultTask+0xeb4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	f000 809e 	beq.w	8003a14 <StartDefaultTask+0xec4>
							  if (cursor < 7) { //
 80038d8:	4b49      	ldr	r3, [pc, #292]	@ (8003a00 <StartDefaultTask+0xeb0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b06      	cmp	r3, #6
 80038de:	dc2e      	bgt.n	800393e <StartDefaultTask+0xdee>
								if (charcount == 0) {
 80038e0:	4b48      	ldr	r3, [pc, #288]	@ (8003a04 <StartDefaultTask+0xeb4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10c      	bne.n	8003902 <StartDefaultTask+0xdb2>
								  dN[cursor] = (char)(charcount+32);
 80038e8:	4b46      	ldr	r3, [pc, #280]	@ (8003a04 <StartDefaultTask+0xeb4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4b44      	ldr	r3, [pc, #272]	@ (8003a00 <StartDefaultTask+0xeb0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3220      	adds	r2, #32
 80038f4:	b2d1      	uxtb	r1, r2
 80038f6:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80038fa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80038fe:	54d1      	strb	r1, [r2, r3]
 8003900:	e03c      	b.n	800397c <StartDefaultTask+0xe2c>
								}
								else if (charcount < 11) {
 8003902:	4b40      	ldr	r3, [pc, #256]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b0a      	cmp	r3, #10
 8003908:	dc0c      	bgt.n	8003924 <StartDefaultTask+0xdd4>
								  dN[cursor] = (char)(charcount+47);
 800390a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a04 <StartDefaultTask+0xeb4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	4b3b      	ldr	r3, [pc, #236]	@ (8003a00 <StartDefaultTask+0xeb0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	322f      	adds	r2, #47	@ 0x2f
 8003916:	b2d1      	uxtb	r1, r2
 8003918:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800391c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8003920:	54d1      	strb	r1, [r2, r3]
 8003922:	e02b      	b.n	800397c <StartDefaultTask+0xe2c>
								}
								else {
								  dN[cursor] = (char)(charcount+54);
 8003924:	4b37      	ldr	r3, [pc, #220]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	4b35      	ldr	r3, [pc, #212]	@ (8003a00 <StartDefaultTask+0xeb0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3236      	adds	r2, #54	@ 0x36
 8003930:	b2d1      	uxtb	r1, r2
 8003932:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003936:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800393a:	54d1      	strb	r1, [r2, r3]
 800393c:	e01e      	b.n	800397c <StartDefaultTask+0xe2c>
								}
							  }
							  else if (cursor == 7) { //mhz
 800393e:	4b30      	ldr	r3, [pc, #192]	@ (8003a00 <StartDefaultTask+0xeb0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b07      	cmp	r3, #7
 8003944:	d10c      	bne.n	8003960 <StartDefaultTask+0xe10>
								if (charcount > 9) {
 8003946:	4b2f      	ldr	r3, [pc, #188]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b09      	cmp	r3, #9
 800394c:	dd02      	ble.n	8003954 <StartDefaultTask+0xe04>
								  charcount = 9;
 800394e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003950:	2209      	movs	r2, #9
 8003952:	601a      	str	r2, [r3, #0]
								}
								dM = 108 + charcount;
 8003954:	4b2b      	ldr	r3, [pc, #172]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	336c      	adds	r3, #108	@ 0x6c
 800395a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800395e:	e00d      	b.n	800397c <StartDefaultTask+0xe2c>
							  }
							  else {
								if (charcount > 19) {
 8003960:	4b28      	ldr	r3, [pc, #160]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b13      	cmp	r3, #19
 8003966:	dd02      	ble.n	800396e <StartDefaultTask+0xe1e>
								  charcount = 19;
 8003968:	4b26      	ldr	r3, [pc, #152]	@ (8003a04 <StartDefaultTask+0xeb4>)
 800396a:	2213      	movs	r2, #19
 800396c:	601a      	str	r2, [r3, #0]
								}
								dK = 50 * charcount;
 800396e:	4b25      	ldr	r3, [pc, #148]	@ (8003a04 <StartDefaultTask+0xeb4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2232      	movs	r2, #50	@ 0x32
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
							  }


							  float pfreq = dM + (dK * .001);
 800397c:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8003980:	f7fc fefa 	bl	8000778 <__aeabi_i2d>
 8003984:	4604      	mov	r4, r0
 8003986:	460d      	mov	r5, r1
 8003988:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 800398c:	f7fc fef4 	bl	8000778 <__aeabi_i2d>
 8003990:	a319      	add	r3, pc, #100	@ (adr r3, 80039f8 <StartDefaultTask+0xea8>)
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f7fc fc73 	bl	8000280 <__aeabi_dmul>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4620      	mov	r0, r4
 80039a0:	4629      	mov	r1, r5
 80039a2:	f7fc fd9d 	bl	80004e0 <__adddf3>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	f7fc ff75 	bl	800089c <__aeabi_d2f>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
							  sprintf(toPrint,"%c%d%s%0.3f",'a',cursor,dN,pfreq);
 80039b8:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <StartDefaultTask+0xeb0>)
 80039ba:	681c      	ldr	r4, [r3, #0]
 80039bc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80039c0:	f7fc feec 	bl	800079c <__aeabi_f2d>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80039cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	4623      	mov	r3, r4
 80039d8:	2261      	movs	r2, #97	@ 0x61
 80039da:	490c      	ldr	r1, [pc, #48]	@ (8003a0c <StartDefaultTask+0xebc>)
 80039dc:	f006 fe26 	bl	800a62c <siprintf>
							  LCDPrint(toPrint);
 80039e0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fcbb 	bl	8002360 <LCDPrint>
							  last_cc = charcount;
 80039ea:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <StartDefaultTask+0xeb4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <StartDefaultTask+0xec0>)
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e099      	b.n	8003b28 <StartDefaultTask+0xfd8>
 80039f4:	f3af 8000 	nop.w
 80039f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80039fc:	3f50624d 	.word	0x3f50624d
 8003a00:	20000578 	.word	0x20000578
 8003a04:	20000580 	.word	0x20000580
 8003a08:	51eb851f 	.word	0x51eb851f
 8003a0c:	0800b164 	.word	0x0800b164
 8003a10:	200005d8 	.word	0x200005d8
							} ///////// case 1
							else if (last_cursor != cursor) { // change the value of charcount based on where we are WORKS????
 8003a14:	4b86      	ldr	r3, [pc, #536]	@ (8003c30 <StartDefaultTask+0x10e0>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b86      	ldr	r3, [pc, #536]	@ (8003c34 <StartDefaultTask+0x10e4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f000 8083 	beq.w	8003b28 <StartDefaultTask+0xfd8>
							  if (cursor < 7) { // moved to a char
 8003a22:	4b84      	ldr	r3, [pc, #528]	@ (8003c34 <StartDefaultTask+0x10e4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	dc2b      	bgt.n	8003a82 <StartDefaultTask+0xf32>
								if (dN[cursor] == ' ') {
 8003a2a:	4b82      	ldr	r3, [pc, #520]	@ (8003c34 <StartDefaultTask+0x10e4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003a32:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d103      	bne.n	8003a44 <StartDefaultTask+0xef4>
								  charcount = 0;
 8003a3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c38 <StartDefaultTask+0x10e8>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e032      	b.n	8003aaa <StartDefaultTask+0xf5a>
								}
								else if (dN[cursor] < ':') {
 8003a44:	4b7b      	ldr	r3, [pc, #492]	@ (8003c34 <StartDefaultTask+0x10e4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003a4c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8003a50:	5cd3      	ldrb	r3, [r2, r3]
 8003a52:	2b39      	cmp	r3, #57	@ 0x39
 8003a54:	d80a      	bhi.n	8003a6c <StartDefaultTask+0xf1c>
								  charcount = dN[cursor] - '/';
 8003a56:	4b77      	ldr	r3, [pc, #476]	@ (8003c34 <StartDefaultTask+0x10e4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003a5e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	3b2f      	subs	r3, #47	@ 0x2f
 8003a66:	4a74      	ldr	r2, [pc, #464]	@ (8003c38 <StartDefaultTask+0x10e8>)
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e01e      	b.n	8003aaa <StartDefaultTask+0xf5a>
								}
								else {
								  charcount = dN[cursor] - '6';
 8003a6c:	4b71      	ldr	r3, [pc, #452]	@ (8003c34 <StartDefaultTask+0x10e4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003a74:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8003a78:	5cd3      	ldrb	r3, [r2, r3]
 8003a7a:	3b36      	subs	r3, #54	@ 0x36
 8003a7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c38 <StartDefaultTask+0x10e8>)
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	e013      	b.n	8003aaa <StartDefaultTask+0xf5a>
								}
							  }
							  else if (cursor == 7) {
 8003a82:	4b6c      	ldr	r3, [pc, #432]	@ (8003c34 <StartDefaultTask+0x10e4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b07      	cmp	r3, #7
 8003a88:	d105      	bne.n	8003a96 <StartDefaultTask+0xf46>
								charcount = dM - 108;
 8003a8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003a8e:	3b6c      	subs	r3, #108	@ 0x6c
 8003a90:	4a69      	ldr	r2, [pc, #420]	@ (8003c38 <StartDefaultTask+0x10e8>)
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e009      	b.n	8003aaa <StartDefaultTask+0xf5a>
							  }
							  else {
								charcount = dK / 50;
 8003a96:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003a9a:	4a68      	ldr	r2, [pc, #416]	@ (8003c3c <StartDefaultTask+0x10ec>)
 8003a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8003aa0:	1112      	asrs	r2, r2, #4
 8003aa2:	17db      	asrs	r3, r3, #31
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	4a64      	ldr	r2, [pc, #400]	@ (8003c38 <StartDefaultTask+0x10e8>)
 8003aa8:	6013      	str	r3, [r2, #0]
							  }

							  float pfreq = dM + (dK * .001);
 8003aaa:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8003aae:	f7fc fe63 	bl	8000778 <__aeabi_i2d>
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	460d      	mov	r5, r1
 8003ab6:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8003aba:	f7fc fe5d 	bl	8000778 <__aeabi_i2d>
 8003abe:	a35a      	add	r3, pc, #360	@ (adr r3, 8003c28 <StartDefaultTask+0x10d8>)
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f7fc fbdc 	bl	8000280 <__aeabi_dmul>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4620      	mov	r0, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	f7fc fd06 	bl	80004e0 <__adddf3>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7fc fede 	bl	800089c <__aeabi_d2f>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
							  sprintf(toPrint,"%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8003ae6:	4b53      	ldr	r3, [pc, #332]	@ (8003c34 <StartDefaultTask+0x10e4>)
 8003ae8:	681c      	ldr	r4, [r3, #0]
 8003aea:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003aee:	f7fc fe55 	bl	800079c <__aeabi_f2d>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003afa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003afe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	4623      	mov	r3, r4
 8003b06:	2261      	movs	r2, #97	@ 0x61
 8003b08:	494d      	ldr	r1, [pc, #308]	@ (8003c40 <StartDefaultTask+0x10f0>)
 8003b0a:	f006 fd8f 	bl	800a62c <siprintf>
							  LCDPrint(toPrint);
 8003b0e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fc24 	bl	8002360 <LCDPrint>
							  last_cc = charcount;
 8003b18:	4b47      	ldr	r3, [pc, #284]	@ (8003c38 <StartDefaultTask+0x10e8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a49      	ldr	r2, [pc, #292]	@ (8003c44 <StartDefaultTask+0x10f4>)
 8003b1e:	6013      	str	r3, [r2, #0]
							  last_cursor = cursor;
 8003b20:	4b44      	ldr	r3, [pc, #272]	@ (8003c34 <StartDefaultTask+0x10e4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a42      	ldr	r2, [pc, #264]	@ (8003c30 <StartDefaultTask+0x10e0>)
 8003b26:	6013      	str	r3, [r2, #0]
						  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4847      	ldr	r0, [pc, #284]	@ (8003c48 <StartDefaultTask+0x10f8>)
 8003b2c:	f002 fd64 	bl	80065f8 <HAL_GPIO_ReadPin>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	f43f aec9 	beq.w	80038ca <StartDefaultTask+0xd7a>
							} ///////// case 2
						  }
		//Committing Changes to External Memory:==========================================

						  //update the eeprom with new values
						  SPIF_EraseSector(&spif, eepDisplay[dispCount]);
 8003b38:	4b44      	ldr	r3, [pc, #272]	@ (8003c4c <StartDefaultTask+0x10fc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a44      	ldr	r2, [pc, #272]	@ (8003c50 <StartDefaultTask+0x1100>)
 8003b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b42:	4619      	mov	r1, r3
 8003b44:	4843      	ldr	r0, [pc, #268]	@ (8003c54 <StartDefaultTask+0x1104>)
 8003b46:	f001 fdca 	bl	80056de <SPIF_EraseSector>
						  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003b50:	e01c      	b.n	8003b8c <StartDefaultTask+0x103c>
			//				EEPROM.update(eepDisplay[dispCount] + i, dN[i]);
							write[0] = dN[i];
 8003b52:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003b56:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 8003b5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b5e:	4413      	add	r3, r2
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	4b3d      	ldr	r3, [pc, #244]	@ (8003c58 <StartDefaultTask+0x1108>)
 8003b64:	701a      	strb	r2, [r3, #0]
							SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, i);
 8003b66:	4b39      	ldr	r3, [pc, #228]	@ (8003c4c <StartDefaultTask+0x10fc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a39      	ldr	r2, [pc, #228]	@ (8003c50 <StartDefaultTask+0x1100>)
 8003b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4a37      	ldr	r2, [pc, #220]	@ (8003c58 <StartDefaultTask+0x1108>)
 8003b7c:	4835      	ldr	r0, [pc, #212]	@ (8003c54 <StartDefaultTask+0x1104>)
 8003b7e:	f001 fe31 	bl	80057e4 <SPIF_WriteSector>
						  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b86:	3301      	adds	r3, #1
 8003b88:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b90:	2b06      	cmp	r3, #6
 8003b92:	ddde      	ble.n	8003b52 <StartDefaultTask+0x1002>
						  }
			//			  EEPROM.update(eepDisplay[dispCount] + 7, dM);
			//			  EEPROM.update(eepDisplay[dispCount] + 8, dK/25);
						  write[0] = dM;
 8003b94:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <StartDefaultTask+0x1108>)
 8003b9c:	701a      	strb	r2, [r3, #0]
						  SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, 7);
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c4c <StartDefaultTask+0x10fc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c50 <StartDefaultTask+0x1100>)
 8003ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	2307      	movs	r3, #7
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2301      	movs	r3, #1
 8003bb0:	4a29      	ldr	r2, [pc, #164]	@ (8003c58 <StartDefaultTask+0x1108>)
 8003bb2:	4828      	ldr	r0, [pc, #160]	@ (8003c54 <StartDefaultTask+0x1104>)
 8003bb4:	f001 fe16 	bl	80057e4 <SPIF_WriteSector>
						  write[0] = dK/25;
 8003bb8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c3c <StartDefaultTask+0x10ec>)
 8003bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8003bc2:	10d2      	asrs	r2, r2, #3
 8003bc4:	17db      	asrs	r3, r3, #31
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	4b23      	ldr	r3, [pc, #140]	@ (8003c58 <StartDefaultTask+0x1108>)
 8003bcc:	701a      	strb	r2, [r3, #0]
						  SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, 8);
 8003bce:	4b1f      	ldr	r3, [pc, #124]	@ (8003c4c <StartDefaultTask+0x10fc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c50 <StartDefaultTask+0x1100>)
 8003bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	2308      	movs	r3, #8
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2301      	movs	r3, #1
 8003be0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c58 <StartDefaultTask+0x1108>)
 8003be2:	481c      	ldr	r0, [pc, #112]	@ (8003c54 <StartDefaultTask+0x1104>)
 8003be4:	f001 fdfe 	bl	80057e4 <SPIF_WriteSector>

						  HAL_Delay(500);
 8003be8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003bec:	f002 f9d0 	bl	8005f90 <HAL_Delay>
						  add = false;
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c5c <StartDefaultTask+0x110c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
						  pause = false;
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c60 <StartDefaultTask+0x1110>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
						  toDisplay();
 8003bfc:	f7fd fda2 	bl	8001744 <toDisplay>

						  char str[8];
						  if (dispCount == count) {
 8003c00:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <StartDefaultTask+0x10fc>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b17      	ldr	r3, [pc, #92]	@ (8003c64 <StartDefaultTask+0x1114>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d106      	bne.n	8003c1a <StartDefaultTask+0x10ca>
							str[0] = ':'; //EMPTY
 8003c0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003c10:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003c14:	223a      	movs	r2, #58	@ 0x3a
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e04e      	b.n	8003cb8 <StartDefaultTask+0x1168>
						  }
						  else {
							for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003c20:	e040      	b.n	8003ca4 <StartDefaultTask+0x1154>
 8003c22:	bf00      	nop
 8003c24:	f3af 8000 	nop.w
 8003c28:	d2f1a9fc 	.word	0xd2f1a9fc
 8003c2c:	3f50624d 	.word	0x3f50624d
 8003c30:	200005dc 	.word	0x200005dc
 8003c34:	20000578 	.word	0x20000578
 8003c38:	20000580 	.word	0x20000580
 8003c3c:	51eb851f 	.word	0x51eb851f
 8003c40:	0800b164 	.word	0x0800b164
 8003c44:	200005d8 	.word	0x200005d8
 8003c48:	40020800 	.word	0x40020800
 8003c4c:	2000056c 	.word	0x2000056c
 8003c50:	2000052c 	.word	0x2000052c
 8003c54:	200004f8 	.word	0x200004f8
 8003c58:	20000590 	.word	0x20000590
 8003c5c:	20000575 	.word	0x20000575
 8003c60:	2000000c 	.word	0x2000000c
 8003c64:	20000570 	.word	0x20000570
			//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
							  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8003c68:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea8 <StartDefaultTask+0x1358>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a8f      	ldr	r2, [pc, #572]	@ (8003eac <StartDefaultTask+0x135c>)
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	4619      	mov	r1, r3
 8003c74:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4a8c      	ldr	r2, [pc, #560]	@ (8003eb0 <StartDefaultTask+0x1360>)
 8003c7e:	488d      	ldr	r0, [pc, #564]	@ (8003eb4 <StartDefaultTask+0x1364>)
 8003c80:	f001 fe1a 	bl	80058b8 <SPIF_ReadSector>
							  str[i] = read[0];
 8003c84:	4b8a      	ldr	r3, [pc, #552]	@ (8003eb0 <StartDefaultTask+0x1360>)
 8003c86:	7819      	ldrb	r1, [r3, #0]
 8003c88:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003c8c:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8003c90:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003c94:	4413      	add	r3, r2
 8003c96:	460a      	mov	r2, r1
 8003c98:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003c9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003ca4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	dddd      	ble.n	8003c68 <StartDefaultTask+0x1118>
							}
							str[7] = 0;
 8003cac:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003cb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	71da      	strb	r2, [r3, #7]
						  }

						  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8003cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ea8 <StartDefaultTask+0x1358>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a7b      	ldr	r2, [pc, #492]	@ (8003eac <StartDefaultTask+0x135c>)
 8003cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	2307      	movs	r3, #7
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2301      	movs	r3, #1
 8003cca:	4a79      	ldr	r2, [pc, #484]	@ (8003eb0 <StartDefaultTask+0x1360>)
 8003ccc:	4879      	ldr	r0, [pc, #484]	@ (8003eb4 <StartDefaultTask+0x1364>)
 8003cce:	f001 fdf3 	bl	80058b8 <SPIF_ReadSector>
						  int val1 = read[0];
 8003cd2:	4b77      	ldr	r3, [pc, #476]	@ (8003eb0 <StartDefaultTask+0x1360>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8003cda:	4b73      	ldr	r3, [pc, #460]	@ (8003ea8 <StartDefaultTask+0x1358>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a73      	ldr	r2, [pc, #460]	@ (8003eac <StartDefaultTask+0x135c>)
 8003ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	2301      	movs	r3, #1
 8003cec:	4a70      	ldr	r2, [pc, #448]	@ (8003eb0 <StartDefaultTask+0x1360>)
 8003cee:	4871      	ldr	r0, [pc, #452]	@ (8003eb4 <StartDefaultTask+0x1364>)
 8003cf0:	f001 fde2 	bl	80058b8 <SPIF_ReadSector>
						  int val2 = read[0];
 8003cf4:	4b6e      	ldr	r3, [pc, #440]	@ (8003eb0 <StartDefaultTask+0x1360>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						  float store = val1 + (.025 * val2);
 8003cfc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003d00:	f7fc fd3a 	bl	8000778 <__aeabi_i2d>
 8003d04:	4604      	mov	r4, r0
 8003d06:	460d      	mov	r5, r1
 8003d08:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8003d0c:	f7fc fd34 	bl	8000778 <__aeabi_i2d>
 8003d10:	a363      	add	r3, pc, #396	@ (adr r3, 8003ea0 <StartDefaultTask+0x1350>)
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f7fc fab3 	bl	8000280 <__aeabi_dmul>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4620      	mov	r0, r4
 8003d20:	4629      	mov	r1, r5
 8003d22:	f7fc fbdd 	bl	80004e0 <__adddf3>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f7fc fdb5 	bl	800089c <__aeabi_d2f>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

						  sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 8003d38:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003d3c:	f7fc fd2e 	bl	800079c <__aeabi_f2d>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003d48:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003d4c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d50:	460b      	mov	r3, r1
 8003d52:	2265      	movs	r2, #101	@ 0x65
 8003d54:	4958      	ldr	r1, [pc, #352]	@ (8003eb8 <StartDefaultTask+0x1368>)
 8003d56:	f006 fc69 	bl	800a62c <siprintf>
						  LCDPrint(toPrint);
 8003d5a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fafe 	bl	8002360 <LCDPrint>
 8003d64:	e13a      	b.n	8003fdc <StartDefaultTask+0x148c>
						}
					  }
					  else if (currentA) { //delete
 8003d66:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8136 	beq.w	8003fdc <StartDefaultTask+0x148c>
						if (dispCount != count) { // Not empty
 8003d70:	4b4d      	ldr	r3, [pc, #308]	@ (8003ea8 <StartDefaultTask+0x1358>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b51      	ldr	r3, [pc, #324]	@ (8003ebc <StartDefaultTask+0x136c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d07f      	beq.n	8003e7c <StartDefaultTask+0x132c>
						  delc = 0;
 8003d7c:	4b50      	ldr	r3, [pc, #320]	@ (8003ec0 <StartDefaultTask+0x1370>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
						  del = true;
 8003d82:	4b50      	ldr	r3, [pc, #320]	@ (8003ec4 <StartDefaultTask+0x1374>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
						  pause = true;
 8003d88:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec8 <StartDefaultTask+0x1378>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
						  char dN[8];
						  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003d94:	e01d      	b.n	8003dd2 <StartDefaultTask+0x1282>
			//				dN[i] = EEPROM.read(eepDisplay[dispCount] + i);
							SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8003d96:	4b44      	ldr	r3, [pc, #272]	@ (8003ea8 <StartDefaultTask+0x1358>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a44      	ldr	r2, [pc, #272]	@ (8003eac <StartDefaultTask+0x135c>)
 8003d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da0:	4619      	mov	r1, r3
 8003da2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2301      	movs	r3, #1
 8003daa:	4a41      	ldr	r2, [pc, #260]	@ (8003eb0 <StartDefaultTask+0x1360>)
 8003dac:	4841      	ldr	r0, [pc, #260]	@ (8003eb4 <StartDefaultTask+0x1364>)
 8003dae:	f001 fd83 	bl	80058b8 <SPIF_ReadSector>
							dN[i] = read[0];
 8003db2:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb0 <StartDefaultTask+0x1360>)
 8003db4:	7819      	ldrb	r1, [r3, #0]
 8003db6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003dba:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8003dbe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003dc2:	4413      	add	r3, r2
 8003dc4:	460a      	mov	r2, r1
 8003dc6:	701a      	strb	r2, [r3, #0]
						  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003dc8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003dd2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003dd6:	2b06      	cmp	r3, #6
 8003dd8:	dddd      	ble.n	8003d96 <StartDefaultTask+0x1246>
						  }

						  sprintf(toPrint, "%c%d%s",'d',delc,dN);
 8003dda:	4b39      	ldr	r3, [pc, #228]	@ (8003ec0 <StartDefaultTask+0x1370>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	2264      	movs	r2, #100	@ 0x64
 8003dec:	4937      	ldr	r1, [pc, #220]	@ (8003ecc <StartDefaultTask+0x137c>)
 8003dee:	f006 fc1d 	bl	800a62c <siprintf>
						  LCDPrint(toPrint);
 8003df2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fab2 	bl	8002360 <LCDPrint>
						  HAL_Delay(500);
 8003dfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e00:	f002 f8c6 	bl	8005f90 <HAL_Delay>
						  while (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 1) {
 8003e04:	e01a      	b.n	8003e3c <StartDefaultTask+0x12ec>
							static int last_delc = 0;
							if (last_delc != delc) {
 8003e06:	4b32      	ldr	r3, [pc, #200]	@ (8003ed0 <StartDefaultTask+0x1380>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec0 <StartDefaultTask+0x1370>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d014      	beq.n	8003e3c <StartDefaultTask+0x12ec>

							  sprintf(toPrint, "%c%d%s",'d',delc,dN);
 8003e12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec0 <StartDefaultTask+0x1370>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003e1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	2264      	movs	r2, #100	@ 0x64
 8003e24:	4929      	ldr	r1, [pc, #164]	@ (8003ecc <StartDefaultTask+0x137c>)
 8003e26:	f006 fc01 	bl	800a62c <siprintf>
							  LCDPrint(toPrint);
 8003e2a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fa96 	bl	8002360 <LCDPrint>
							  last_delc = delc;
 8003e34:	4b22      	ldr	r3, [pc, #136]	@ (8003ec0 <StartDefaultTask+0x1370>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a25      	ldr	r2, [pc, #148]	@ (8003ed0 <StartDefaultTask+0x1380>)
 8003e3a:	6013      	str	r3, [r2, #0]
						  while (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 1) {
 8003e3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e40:	4824      	ldr	r0, [pc, #144]	@ (8003ed4 <StartDefaultTask+0x1384>)
 8003e42:	f002 fbd9 	bl	80065f8 <HAL_GPIO_ReadPin>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d0dc      	beq.n	8003e06 <StartDefaultTask+0x12b6>
							}
						  }
						  if (delc > 0) { //
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec0 <StartDefaultTask+0x1370>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	dd07      	ble.n	8003e64 <StartDefaultTask+0x1314>
							toDelete(eepDisplay[dispCount]);
 8003e54:	4b14      	ldr	r3, [pc, #80]	@ (8003ea8 <StartDefaultTask+0x1358>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a14      	ldr	r2, [pc, #80]	@ (8003eac <StartDefaultTask+0x135c>)
 8003e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd fd10 	bl	8001884 <toDelete>
						  }
						  del = false;
 8003e64:	4b17      	ldr	r3, [pc, #92]	@ (8003ec4 <StartDefaultTask+0x1374>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
						  pause = false;
 8003e6a:	4b17      	ldr	r3, [pc, #92]	@ (8003ec8 <StartDefaultTask+0x1378>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
						  toDisplay();
 8003e70:	f7fd fc68 	bl	8001744 <toDisplay>
						  HAL_Delay(500);
 8003e74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e78:	f002 f88a 	bl	8005f90 <HAL_Delay>
						}
						char str[8];
						if (dispCount == count) {
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea8 <StartDefaultTask+0x1358>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4b0e      	ldr	r3, [pc, #56]	@ (8003ebc <StartDefaultTask+0x136c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d106      	bne.n	8003e96 <StartDefaultTask+0x1346>
						  str[0] = ':'; //EMPTY
 8003e88:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003e8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003e90:	223a      	movs	r2, #58	@ 0x3a
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e048      	b.n	8003f28 <StartDefaultTask+0x13d8>
						}
						else {
						  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003e96:	2300      	movs	r3, #0
 8003e98:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003e9c:	e03a      	b.n	8003f14 <StartDefaultTask+0x13c4>
 8003e9e:	bf00      	nop
 8003ea0:	9999999a 	.word	0x9999999a
 8003ea4:	3f999999 	.word	0x3f999999
 8003ea8:	2000056c 	.word	0x2000056c
 8003eac:	2000052c 	.word	0x2000052c
 8003eb0:	2000058c 	.word	0x2000058c
 8003eb4:	200004f8 	.word	0x200004f8
 8003eb8:	0800b158 	.word	0x0800b158
 8003ebc:	20000570 	.word	0x20000570
 8003ec0:	20000584 	.word	0x20000584
 8003ec4:	20000576 	.word	0x20000576
 8003ec8:	2000000c 	.word	0x2000000c
 8003ecc:	0800b170 	.word	0x0800b170
 8003ed0:	200005e0 	.word	0x200005e0
 8003ed4:	40021000 	.word	0x40021000
			//				str[i] = EEPROM.read(eepDisplay[dispCount] + i);
							SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8003ed8:	4bad      	ldr	r3, [pc, #692]	@ (8004190 <StartDefaultTask+0x1640>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4aad      	ldr	r2, [pc, #692]	@ (8004194 <StartDefaultTask+0x1644>)
 8003ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	2301      	movs	r3, #1
 8003eec:	4aaa      	ldr	r2, [pc, #680]	@ (8004198 <StartDefaultTask+0x1648>)
 8003eee:	48ab      	ldr	r0, [pc, #684]	@ (800419c <StartDefaultTask+0x164c>)
 8003ef0:	f001 fce2 	bl	80058b8 <SPIF_ReadSector>
							str[i] = read[0];
 8003ef4:	4ba8      	ldr	r3, [pc, #672]	@ (8004198 <StartDefaultTask+0x1648>)
 8003ef6:	7819      	ldrb	r1, [r3, #0]
 8003ef8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003efc:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8003f00:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003f04:	4413      	add	r3, r2
 8003f06:	460a      	mov	r2, r1
 8003f08:	701a      	strb	r2, [r3, #0]
						  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003f0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003f14:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003f18:	2b06      	cmp	r3, #6
 8003f1a:	dddd      	ble.n	8003ed8 <StartDefaultTask+0x1388>
						  }
						  str[7] = 0;
 8003f1c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003f20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003f24:	2200      	movs	r2, #0
 8003f26:	71da      	strb	r2, [r3, #7]
						}

						SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8003f28:	4b99      	ldr	r3, [pc, #612]	@ (8004190 <StartDefaultTask+0x1640>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a99      	ldr	r2, [pc, #612]	@ (8004194 <StartDefaultTask+0x1644>)
 8003f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f32:	4619      	mov	r1, r3
 8003f34:	2307      	movs	r3, #7
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	4a97      	ldr	r2, [pc, #604]	@ (8004198 <StartDefaultTask+0x1648>)
 8003f3c:	4897      	ldr	r0, [pc, #604]	@ (800419c <StartDefaultTask+0x164c>)
 8003f3e:	f001 fcbb 	bl	80058b8 <SPIF_ReadSector>
						int val1 = read[0];
 8003f42:	4b95      	ldr	r3, [pc, #596]	@ (8004198 <StartDefaultTask+0x1648>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
						SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8003f4a:	4b91      	ldr	r3, [pc, #580]	@ (8004190 <StartDefaultTask+0x1640>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a91      	ldr	r2, [pc, #580]	@ (8004194 <StartDefaultTask+0x1644>)
 8003f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f54:	4619      	mov	r1, r3
 8003f56:	2308      	movs	r3, #8
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	4a8e      	ldr	r2, [pc, #568]	@ (8004198 <StartDefaultTask+0x1648>)
 8003f5e:	488f      	ldr	r0, [pc, #572]	@ (800419c <StartDefaultTask+0x164c>)
 8003f60:	f001 fcaa 	bl	80058b8 <SPIF_ReadSector>
						int val2 = read[0];
 8003f64:	4b8c      	ldr	r3, [pc, #560]	@ (8004198 <StartDefaultTask+0x1648>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
						float store = val1 + (.025 * val2);
 8003f6c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8003f70:	f7fc fc02 	bl	8000778 <__aeabi_i2d>
 8003f74:	4604      	mov	r4, r0
 8003f76:	460d      	mov	r5, r1
 8003f78:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003f7c:	f7fc fbfc 	bl	8000778 <__aeabi_i2d>
 8003f80:	a381      	add	r3, pc, #516	@ (adr r3, 8004188 <StartDefaultTask+0x1638>)
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f7fc f97b 	bl	8000280 <__aeabi_dmul>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4620      	mov	r0, r4
 8003f90:	4629      	mov	r1, r5
 8003f92:	f7fc faa5 	bl	80004e0 <__adddf3>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f7fc fc7d 	bl	800089c <__aeabi_d2f>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

						sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 8003fa8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8003fac:	f7fc fbf6 	bl	800079c <__aeabi_f2d>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003fb8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003fbc:	e9cd 2300 	strd	r2, r3, [sp]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	2265      	movs	r2, #101	@ 0x65
 8003fc4:	4976      	ldr	r1, [pc, #472]	@ (80041a0 <StartDefaultTask+0x1650>)
 8003fc6:	f006 fb31 	bl	800a62c <siprintf>
						LCDPrint(toPrint);
 8003fca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe f9c6 	bl	8002360 <LCDPrint>
						lastDC = dispCount;
 8003fd4:	4b6e      	ldr	r3, [pc, #440]	@ (8004190 <StartDefaultTask+0x1640>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a72      	ldr	r2, [pc, #456]	@ (80041a4 <StartDefaultTask+0x1654>)
 8003fda:	6013      	str	r3, [r2, #0]
					  }

					  if (lastDC != dispCount) {
 8003fdc:	4b71      	ldr	r3, [pc, #452]	@ (80041a4 <StartDefaultTask+0x1654>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8004190 <StartDefaultTask+0x1640>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	f43e afdf 	beq.w	8002fa8 <StartDefaultTask+0x458>
						char str[8];
						if (dispCount == count) {
 8003fea:	4b69      	ldr	r3, [pc, #420]	@ (8004190 <StartDefaultTask+0x1640>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b6e      	ldr	r3, [pc, #440]	@ (80041a8 <StartDefaultTask+0x1658>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d106      	bne.n	8004004 <StartDefaultTask+0x14b4>
						  str[0] = ':'; //EMPTY
 8003ff6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003ffa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003ffe:	223a      	movs	r2, #58	@ 0x3a
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e02b      	b.n	800405c <StartDefaultTask+0x150c>
						}
						else {
						  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800400a:	e01d      	b.n	8004048 <StartDefaultTask+0x14f8>
			//				str[i] = EEPROM.read(eepDisplay[dispCount] + i);
							SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 800400c:	4b60      	ldr	r3, [pc, #384]	@ (8004190 <StartDefaultTask+0x1640>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a60      	ldr	r2, [pc, #384]	@ (8004194 <StartDefaultTask+0x1644>)
 8004012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004016:	4619      	mov	r1, r3
 8004018:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2301      	movs	r3, #1
 8004020:	4a5d      	ldr	r2, [pc, #372]	@ (8004198 <StartDefaultTask+0x1648>)
 8004022:	485e      	ldr	r0, [pc, #376]	@ (800419c <StartDefaultTask+0x164c>)
 8004024:	f001 fc48 	bl	80058b8 <SPIF_ReadSector>
							str[i] = read[0];
 8004028:	4b5b      	ldr	r3, [pc, #364]	@ (8004198 <StartDefaultTask+0x1648>)
 800402a:	7819      	ldrb	r1, [r3, #0]
 800402c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004030:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 8004034:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004038:	4413      	add	r3, r2
 800403a:	460a      	mov	r2, r1
 800403c:	701a      	strb	r2, [r3, #0]
						  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800403e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004042:	3301      	adds	r3, #1
 8004044:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004048:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800404c:	2b06      	cmp	r3, #6
 800404e:	dddd      	ble.n	800400c <StartDefaultTask+0x14bc>
						  }
						  str[7] = 0;
 8004050:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004054:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004058:	2200      	movs	r2, #0
 800405a:	71da      	strb	r2, [r3, #7]
						}

						SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 800405c:	4b4c      	ldr	r3, [pc, #304]	@ (8004190 <StartDefaultTask+0x1640>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a4c      	ldr	r2, [pc, #304]	@ (8004194 <StartDefaultTask+0x1644>)
 8004062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004066:	4619      	mov	r1, r3
 8004068:	2307      	movs	r3, #7
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2301      	movs	r3, #1
 800406e:	4a4a      	ldr	r2, [pc, #296]	@ (8004198 <StartDefaultTask+0x1648>)
 8004070:	484a      	ldr	r0, [pc, #296]	@ (800419c <StartDefaultTask+0x164c>)
 8004072:	f001 fc21 	bl	80058b8 <SPIF_ReadSector>
						int val1 = read[0];
 8004076:	4b48      	ldr	r3, [pc, #288]	@ (8004198 <StartDefaultTask+0x1648>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 800407e:	4b44      	ldr	r3, [pc, #272]	@ (8004190 <StartDefaultTask+0x1640>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a44      	ldr	r2, [pc, #272]	@ (8004194 <StartDefaultTask+0x1644>)
 8004084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004088:	4619      	mov	r1, r3
 800408a:	2308      	movs	r3, #8
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2301      	movs	r3, #1
 8004090:	4a41      	ldr	r2, [pc, #260]	@ (8004198 <StartDefaultTask+0x1648>)
 8004092:	4842      	ldr	r0, [pc, #264]	@ (800419c <StartDefaultTask+0x164c>)
 8004094:	f001 fc10 	bl	80058b8 <SPIF_ReadSector>
						int val2 = read[0];
 8004098:	4b3f      	ldr	r3, [pc, #252]	@ (8004198 <StartDefaultTask+0x1648>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						float store = val1 + (.025 * val2);
 80040a0:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80040a4:	f7fc fb68 	bl	8000778 <__aeabi_i2d>
 80040a8:	4604      	mov	r4, r0
 80040aa:	460d      	mov	r5, r1
 80040ac:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80040b0:	f7fc fb62 	bl	8000778 <__aeabi_i2d>
 80040b4:	a334      	add	r3, pc, #208	@ (adr r3, 8004188 <StartDefaultTask+0x1638>)
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f7fc f8e1 	bl	8000280 <__aeabi_dmul>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4620      	mov	r0, r4
 80040c4:	4629      	mov	r1, r5
 80040c6:	f7fc fa0b 	bl	80004e0 <__adddf3>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	f7fc fbe3 	bl	800089c <__aeabi_d2f>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

						sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 80040dc:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80040e0:	f7fc fb5c 	bl	800079c <__aeabi_f2d>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80040ec:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80040f0:	e9cd 2300 	strd	r2, r3, [sp]
 80040f4:	460b      	mov	r3, r1
 80040f6:	2265      	movs	r2, #101	@ 0x65
 80040f8:	4929      	ldr	r1, [pc, #164]	@ (80041a0 <StartDefaultTask+0x1650>)
 80040fa:	f006 fa97 	bl	800a62c <siprintf>
						LCDPrint(toPrint);
 80040fe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe f92c 	bl	8002360 <LCDPrint>
						lastDC = dispCount;
 8004108:	4b21      	ldr	r3, [pc, #132]	@ (8004190 <StartDefaultTask+0x1640>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a25      	ldr	r2, [pc, #148]	@ (80041a4 <StartDefaultTask+0x1654>)
 800410e:	6013      	str	r3, [r2, #0]
					while (true) {
 8004110:	f7fe bf4a 	b.w	8002fa8 <StartDefaultTask+0x458>
						break;
 8004114:	bf00      	nop
					  }
					}
					edit = false;
 8004116:	4b25      	ldr	r3, [pc, #148]	@ (80041ac <StartDefaultTask+0x165c>)
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
					pause = false;
 800411c:	4b24      	ldr	r3, [pc, #144]	@ (80041b0 <StartDefaultTask+0x1660>)
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
					dispCount = 0;
 8004122:	4b1b      	ldr	r3, [pc, #108]	@ (8004190 <StartDefaultTask+0x1640>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

					sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8004128:	4b22      	ldr	r3, [pc, #136]	@ (80041b4 <StartDefaultTask+0x1664>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fc fb35 	bl	800079c <__aeabi_f2d>
 8004132:	4604      	mov	r4, r0
 8004134:	460d      	mov	r5, r1
 8004136:	4b20      	ldr	r3, [pc, #128]	@ (80041b8 <StartDefaultTask+0x1668>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc fb2e 	bl	800079c <__aeabi_f2d>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004148:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800414c:	e9cd 4500 	strd	r4, r5, [sp]
 8004150:	2266      	movs	r2, #102	@ 0x66
 8004152:	491a      	ldr	r1, [pc, #104]	@ (80041bc <StartDefaultTask+0x166c>)
 8004154:	f006 fa6a 	bl	800a62c <siprintf>
					LCDPrint(toPrint);
 8004158:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe f8ff 	bl	8002360 <LCDPrint>

					freq_last = freq;
 8004162:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <StartDefaultTask+0x1664>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a16      	ldr	r2, [pc, #88]	@ (80041c0 <StartDefaultTask+0x1670>)
 8004168:	6013      	str	r3, [r2, #0]
					sfreq_last = Standby;
 800416a:	4b13      	ldr	r3, [pc, #76]	@ (80041b8 <StartDefaultTask+0x1668>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a15      	ldr	r2, [pc, #84]	@ (80041c4 <StartDefaultTask+0x1674>)
 8004170:	6013      	str	r3, [r2, #0]
					HAL_Delay(500);
 8004172:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004176:	f001 ff0b 	bl	8005f90 <HAL_Delay>
					last = millis();
 800417a:	f7fd fcb9 	bl	8001af0 <millis>
 800417e:	4603      	mov	r3, r0
 8004180:	4a11      	ldr	r2, [pc, #68]	@ (80041c8 <StartDefaultTask+0x1678>)
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	e29c      	b.n	80046c0 <StartDefaultTask+0x1b70>
 8004186:	bf00      	nop
 8004188:	9999999a 	.word	0x9999999a
 800418c:	3f999999 	.word	0x3f999999
 8004190:	2000056c 	.word	0x2000056c
 8004194:	2000052c 	.word	0x2000052c
 8004198:	2000058c 	.word	0x2000058c
 800419c:	200004f8 	.word	0x200004f8
 80041a0:	0800b158 	.word	0x0800b158
 80041a4:	200005e4 	.word	0x200005e4
 80041a8:	20000570 	.word	0x20000570
 80041ac:	20000528 	.word	0x20000528
 80041b0:	2000000c 	.word	0x2000000c
 80041b4:	20000518 	.word	0x20000518
 80041b8:	20000004 	.word	0x20000004
 80041bc:	0800b148 	.word	0x0800b148
 80041c0:	20000010 	.word	0x20000010
 80041c4:	20000014 	.word	0x20000014
 80041c8:	200005cc 	.word	0x200005cc

				  }
			}//if (both) end here    ==========================================================================================================================

	//if(Right_pin)
			else if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0 && !pause) { // Check if button is pressed
 80041cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041d0:	48b9      	ldr	r0, [pc, #740]	@ (80044b8 <StartDefaultTask+0x1968>)
 80041d2:	f002 fa11 	bl	80065f8 <HAL_GPIO_ReadPin>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d134      	bne.n	8004246 <StartDefaultTask+0x16f6>
 80041dc:	4bb7      	ldr	r3, [pc, #732]	@ (80044bc <StartDefaultTask+0x196c>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	f083 0301 	eor.w	r3, r3, #1
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d02d      	beq.n	8004246 <StartDefaultTask+0x16f6>
			  float temp = freq;
 80041ea:	4bb5      	ldr	r3, [pc, #724]	@ (80044c0 <StartDefaultTask+0x1970>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
			  int tk = KHz;
 80041f2:	4bb4      	ldr	r3, [pc, #720]	@ (80044c4 <StartDefaultTask+0x1974>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			  int tm = MHz;
 80041fa:	4bb3      	ldr	r3, [pc, #716]	@ (80044c8 <StartDefaultTask+0x1978>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			  freq = Standby;
 8004202:	4bb2      	ldr	r3, [pc, #712]	@ (80044cc <StartDefaultTask+0x197c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4aae      	ldr	r2, [pc, #696]	@ (80044c0 <StartDefaultTask+0x1970>)
 8004208:	6013      	str	r3, [r2, #0]
			  KHz = SK;
 800420a:	4bb1      	ldr	r3, [pc, #708]	@ (80044d0 <StartDefaultTask+0x1980>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4aad      	ldr	r2, [pc, #692]	@ (80044c4 <StartDefaultTask+0x1974>)
 8004210:	6013      	str	r3, [r2, #0]
			  MHz = SM;
 8004212:	4bb0      	ldr	r3, [pc, #704]	@ (80044d4 <StartDefaultTask+0x1984>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4aac      	ldr	r2, [pc, #688]	@ (80044c8 <StartDefaultTask+0x1978>)
 8004218:	6013      	str	r3, [r2, #0]

			  Standby = temp;
 800421a:	4aac      	ldr	r2, [pc, #688]	@ (80044cc <StartDefaultTask+0x197c>)
 800421c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004220:	6013      	str	r3, [r2, #0]
			  SK = tk;
 8004222:	4aab      	ldr	r2, [pc, #684]	@ (80044d0 <StartDefaultTask+0x1980>)
 8004224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004228:	6013      	str	r3, [r2, #0]
			  SM = tm;
 800422a:	4aaa      	ldr	r2, [pc, #680]	@ (80044d4 <StartDefaultTask+0x1984>)
 800422c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004230:	6013      	str	r3, [r2, #0]
			  HAL_Delay(500);
 8004232:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004236:	f001 feab 	bl	8005f90 <HAL_Delay>
			  last = millis();
 800423a:	f7fd fc59 	bl	8001af0 <millis>
 800423e:	4603      	mov	r3, r0
 8004240:	4aa5      	ldr	r2, [pc, #660]	@ (80044d8 <StartDefaultTask+0x1988>)
 8004242:	6013      	str	r3, [r2, #0]
			else if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0 && !pause) { // Check if button is pressed
 8004244:	e23c      	b.n	80046c0 <StartDefaultTask+0x1b70>
			}

	//if(left_pin)				==================================================================================================================================

			else if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) { // off/stored frequencies
 8004246:	2101      	movs	r1, #1
 8004248:	48a4      	ldr	r0, [pc, #656]	@ (80044dc <StartDefaultTask+0x198c>)
 800424a:	f002 f9d5 	bl	80065f8 <HAL_GPIO_ReadPin>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 8235 	bne.w	80046c0 <StartDefaultTask+0x1b70>
				  if (!on) {
 8004256:	4ba2      	ldr	r3, [pc, #648]	@ (80044e0 <StartDefaultTask+0x1990>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	f083 0301 	eor.w	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d032      	beq.n	80042ca <StartDefaultTask+0x177a>
					on = true;
 8004264:	4b9e      	ldr	r3, [pc, #632]	@ (80044e0 <StartDefaultTask+0x1990>)
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
					pause = false;
 800426a:	4b94      	ldr	r3, [pc, #592]	@ (80044bc <StartDefaultTask+0x196c>)
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]

					LCDPrint("x");
 8004270:	489c      	ldr	r0, [pc, #624]	@ (80044e4 <StartDefaultTask+0x1994>)
 8004272:	f7fe f875 	bl	8002360 <LCDPrint>
					sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8004276:	4b92      	ldr	r3, [pc, #584]	@ (80044c0 <StartDefaultTask+0x1970>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fc fa8e 	bl	800079c <__aeabi_f2d>
 8004280:	4604      	mov	r4, r0
 8004282:	460d      	mov	r5, r1
 8004284:	4b91      	ldr	r3, [pc, #580]	@ (80044cc <StartDefaultTask+0x197c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7fc fa87 	bl	800079c <__aeabi_f2d>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800429a:	e9cd 4500 	strd	r4, r5, [sp]
 800429e:	2266      	movs	r2, #102	@ 0x66
 80042a0:	4991      	ldr	r1, [pc, #580]	@ (80044e8 <StartDefaultTask+0x1998>)
 80042a2:	f006 f9c3 	bl	800a62c <siprintf>
					LCDPrint(toPrint);
 80042a6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe f858 	bl	8002360 <LCDPrint>
					freq_last = freq;
 80042b0:	4b83      	ldr	r3, [pc, #524]	@ (80044c0 <StartDefaultTask+0x1970>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a8d      	ldr	r2, [pc, #564]	@ (80044ec <StartDefaultTask+0x199c>)
 80042b6:	6013      	str	r3, [r2, #0]
					sfreq_last = Standby;
 80042b8:	4b84      	ldr	r3, [pc, #528]	@ (80044cc <StartDefaultTask+0x197c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a8c      	ldr	r2, [pc, #560]	@ (80044f0 <StartDefaultTask+0x19a0>)
 80042be:	6013      	str	r3, [r2, #0]
					HAL_Delay(500);
 80042c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80042c4:	f001 fe64 	bl	8005f90 <HAL_Delay>
 80042c8:	e1f5      	b.n	80046b6 <StartDefaultTask+0x1b66>
					// LOAD DATA, give old data from last session for display to load (can be done by just loading the data from eeprom into the global variables)
				  }
				  else
				  { // it is already on
					unsigned long time = millis();
 80042ca:	f7fd fc11 	bl	8001af0 <millis>
 80042ce:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
					while (true) {
					  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1 || (millis() - time > 3000)) {
 80042d2:	2101      	movs	r1, #1
 80042d4:	4881      	ldr	r0, [pc, #516]	@ (80044dc <StartDefaultTask+0x198c>)
 80042d6:	f002 f98f 	bl	80065f8 <HAL_GPIO_ReadPin>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d00a      	beq.n	80042f6 <StartDefaultTask+0x17a6>
 80042e0:	f7fd fc06 	bl	8001af0 <millis>
 80042e4:	4602      	mov	r2, r0
 80042e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d800      	bhi.n	80042f6 <StartDefaultTask+0x17a6>
 80042f4:	e7ed      	b.n	80042d2 <StartDefaultTask+0x1782>
						break;
					  }
					}
					if (millis() - time > 3000) {
 80042f6:	f7fd fbfb 	bl	8001af0 <millis>
 80042fa:	4602      	mov	r2, r0
 80042fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004306:	4293      	cmp	r3, r2
 8004308:	d912      	bls.n	8004330 <StartDefaultTask+0x17e0>
					  storestate();
 800430a:	f7fd facb 	bl	80018a4 <storestate>
					  on = false;
 800430e:	4b74      	ldr	r3, [pc, #464]	@ (80044e0 <StartDefaultTask+0x1990>)
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
					  pause = true;
 8004314:	4b69      	ldr	r3, [pc, #420]	@ (80044bc <StartDefaultTask+0x196c>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
					  bscroll = false;
 800431a:	4b76      	ldr	r3, [pc, #472]	@ (80044f4 <StartDefaultTask+0x19a4>)
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]

					  LCDPrint("o");
 8004320:	4875      	ldr	r0, [pc, #468]	@ (80044f8 <StartDefaultTask+0x19a8>)
 8004322:	f7fe f81d 	bl	8002360 <LCDPrint>
					  HAL_Delay(3000);
 8004326:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800432a:	f001 fe31 	bl	8005f90 <HAL_Delay>
 800432e:	e1c2      	b.n	80046b6 <StartDefaultTask+0x1b66>
					}
					else
					{ // stored frequency mode
					  toDisplay();
 8004330:	f7fd fa08 	bl	8001744 <toDisplay>
					  if (eepDisplay[0] == -1) { // no mem exit
 8004334:	4b71      	ldr	r3, [pc, #452]	@ (80044fc <StartDefaultTask+0x19ac>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d10a      	bne.n	8004354 <StartDefaultTask+0x1804>
						//Serial2.print("n");
						LCDPrint("n");
 800433e:	4870      	ldr	r0, [pc, #448]	@ (8004500 <StartDefaultTask+0x19b0>)
 8004340:	f7fe f80e 	bl	8002360 <LCDPrint>
						HAL_Delay(500);
 8004344:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004348:	f001 fe22 	bl	8005f90 <HAL_Delay>
						temp = true;
 800434c:	4b6d      	ldr	r3, [pc, #436]	@ (8004504 <StartDefaultTask+0x19b4>)
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e1b0      	b.n	80046b6 <StartDefaultTask+0x1b66>
					  else
					  { // turn on stored frequency mode and stay until click again
						//initial print
						static int lastDC = 0;
						char str[8];
						for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004354:	2300      	movs	r3, #0
 8004356:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800435a:	e01d      	b.n	8004398 <StartDefaultTask+0x1848>
			//			  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
						  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);;
 800435c:	4b6a      	ldr	r3, [pc, #424]	@ (8004508 <StartDefaultTask+0x19b8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a66      	ldr	r2, [pc, #408]	@ (80044fc <StartDefaultTask+0x19ac>)
 8004362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004366:	4619      	mov	r1, r3
 8004368:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	2301      	movs	r3, #1
 8004370:	4a66      	ldr	r2, [pc, #408]	@ (800450c <StartDefaultTask+0x19bc>)
 8004372:	4867      	ldr	r0, [pc, #412]	@ (8004510 <StartDefaultTask+0x19c0>)
 8004374:	f001 faa0 	bl	80058b8 <SPIF_ReadSector>
						  str[i] = read[0];
 8004378:	4b64      	ldr	r3, [pc, #400]	@ (800450c <StartDefaultTask+0x19bc>)
 800437a:	7819      	ldrb	r1, [r3, #0]
 800437c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004380:	f5a3 72aa 	sub.w	r2, r3, #340	@ 0x154
 8004384:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004388:	4413      	add	r3, r2
 800438a:	460a      	mov	r2, r1
 800438c:	701a      	strb	r2, [r3, #0]
						for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800438e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004392:	3301      	adds	r3, #1
 8004394:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004398:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800439c:	2b06      	cmp	r3, #6
 800439e:	dddd      	ble.n	800435c <StartDefaultTask+0x180c>
						}
						str[7] = 0;
 80043a0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80043a4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80043a8:	2200      	movs	r2, #0
 80043aa:	71da      	strb	r2, [r3, #7]

			//			float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
						SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 80043ac:	4b56      	ldr	r3, [pc, #344]	@ (8004508 <StartDefaultTask+0x19b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a52      	ldr	r2, [pc, #328]	@ (80044fc <StartDefaultTask+0x19ac>)
 80043b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b6:	4619      	mov	r1, r3
 80043b8:	2307      	movs	r3, #7
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	2301      	movs	r3, #1
 80043be:	4a53      	ldr	r2, [pc, #332]	@ (800450c <StartDefaultTask+0x19bc>)
 80043c0:	4853      	ldr	r0, [pc, #332]	@ (8004510 <StartDefaultTask+0x19c0>)
 80043c2:	f001 fa79 	bl	80058b8 <SPIF_ReadSector>
						int val1 = read[0];
 80043c6:	4b51      	ldr	r3, [pc, #324]	@ (800450c <StartDefaultTask+0x19bc>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
						SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 80043ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004508 <StartDefaultTask+0x19b8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a4a      	ldr	r2, [pc, #296]	@ (80044fc <StartDefaultTask+0x19ac>)
 80043d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d8:	4619      	mov	r1, r3
 80043da:	2308      	movs	r3, #8
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2301      	movs	r3, #1
 80043e0:	4a4a      	ldr	r2, [pc, #296]	@ (800450c <StartDefaultTask+0x19bc>)
 80043e2:	484b      	ldr	r0, [pc, #300]	@ (8004510 <StartDefaultTask+0x19c0>)
 80043e4:	f001 fa68 	bl	80058b8 <SPIF_ReadSector>
						int val2 = read[0];
 80043e8:	4b48      	ldr	r3, [pc, #288]	@ (800450c <StartDefaultTask+0x19bc>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						float store = val1 + (.025 * val2);
 80043f0:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 80043f4:	f7fc f9c0 	bl	8000778 <__aeabi_i2d>
 80043f8:	4604      	mov	r4, r0
 80043fa:	460d      	mov	r5, r1
 80043fc:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8004400:	f7fc f9ba 	bl	8000778 <__aeabi_i2d>
 8004404:	a32a      	add	r3, pc, #168	@ (adr r3, 80044b0 <StartDefaultTask+0x1960>)
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f7fb ff39 	bl	8000280 <__aeabi_dmul>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4620      	mov	r0, r4
 8004414:	4629      	mov	r1, r5
 8004416:	f7fc f863 	bl	80004e0 <__adddf3>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	f7fc fa3b 	bl	800089c <__aeabi_d2f>
 8004426:	4603      	mov	r3, r0
 8004428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

						sprintf(toPrint, "%c%s%0.3f", 'k', str, store);
 800442c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8004430:	f7fc f9b4 	bl	800079c <__aeabi_f2d>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	f107 011c 	add.w	r1, r7, #28
 800443c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004440:	e9cd 2300 	strd	r2, r3, [sp]
 8004444:	460b      	mov	r3, r1
 8004446:	226b      	movs	r2, #107	@ 0x6b
 8004448:	4932      	ldr	r1, [pc, #200]	@ (8004514 <StartDefaultTask+0x19c4>)
 800444a:	f006 f8ef 	bl	800a62c <siprintf>
						LCDPrint(toPrint);
 800444e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004452:	4618      	mov	r0, r3
 8004454:	f7fd ff84 	bl	8002360 <LCDPrint>

						pause = true;
 8004458:	4b18      	ldr	r3, [pc, #96]	@ (80044bc <StartDefaultTask+0x196c>)
 800445a:	2201      	movs	r2, #1
 800445c:	701a      	strb	r2, [r3, #0]
						bscroll = true;
 800445e:	4b25      	ldr	r3, [pc, #148]	@ (80044f4 <StartDefaultTask+0x19a4>)
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
						temp = true;
 8004464:	4b27      	ldr	r3, [pc, #156]	@ (8004504 <StartDefaultTask+0x19b4>)
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
						unsigned long timer = millis();
 800446a:	f7fd fb41 	bl	8001af0 <millis>
 800446e:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
						bool valid = false;
 8004472:	2300      	movs	r3, #0
 8004474:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
						//loop + scroll setup
						while (millis() - timer < 5000)
 8004478:	e0d2      	b.n	8004620 <StartDefaultTask+0x1ad0>
						{
						  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 800447a:	2101      	movs	r1, #1
 800447c:	4817      	ldr	r0, [pc, #92]	@ (80044dc <StartDefaultTask+0x198c>)
 800447e:	f002 f8bb 	bl	80065f8 <HAL_GPIO_ReadPin>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d103      	bne.n	8004490 <StartDefaultTask+0x1940>
							valid = true;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
							break;
 800448e:	e0d2      	b.n	8004636 <StartDefaultTask+0x1ae6>
						  }
						  if (lastDC != dispCount) {
 8004490:	4b21      	ldr	r3, [pc, #132]	@ (8004518 <StartDefaultTask+0x19c8>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b1c      	ldr	r3, [pc, #112]	@ (8004508 <StartDefaultTask+0x19b8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	f000 80c1 	beq.w	8004620 <StartDefaultTask+0x1ad0>
							timer = millis();
 800449e:	f7fd fb27 	bl	8001af0 <millis>
 80044a2:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
							char str[8];
							for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80044a6:	2300      	movs	r3, #0
 80044a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80044ac:	e054      	b.n	8004558 <StartDefaultTask+0x1a08>
 80044ae:	bf00      	nop
 80044b0:	9999999a 	.word	0x9999999a
 80044b4:	3f999999 	.word	0x3f999999
 80044b8:	40021000 	.word	0x40021000
 80044bc:	2000000c 	.word	0x2000000c
 80044c0:	20000518 	.word	0x20000518
 80044c4:	2000051c 	.word	0x2000051c
 80044c8:	20000000 	.word	0x20000000
 80044cc:	20000004 	.word	0x20000004
 80044d0:	20000520 	.word	0x20000520
 80044d4:	20000008 	.word	0x20000008
 80044d8:	200005cc 	.word	0x200005cc
 80044dc:	40020800 	.word	0x40020800
 80044e0:	20000529 	.word	0x20000529
 80044e4:	0800b178 	.word	0x0800b178
 80044e8:	0800b148 	.word	0x0800b148
 80044ec:	20000010 	.word	0x20000010
 80044f0:	20000014 	.word	0x20000014
 80044f4:	20000574 	.word	0x20000574
 80044f8:	0800b17c 	.word	0x0800b17c
 80044fc:	2000052c 	.word	0x2000052c
 8004500:	0800b180 	.word	0x0800b180
 8004504:	20000588 	.word	0x20000588
 8004508:	2000056c 	.word	0x2000056c
 800450c:	2000058c 	.word	0x2000058c
 8004510:	200004f8 	.word	0x200004f8
 8004514:	0800b158 	.word	0x0800b158
 8004518:	200005e8 	.word	0x200005e8
			//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
							  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 800451c:	4bc2      	ldr	r3, [pc, #776]	@ (8004828 <StartDefaultTask+0x1cd8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4ac2      	ldr	r2, [pc, #776]	@ (800482c <StartDefaultTask+0x1cdc>)
 8004522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004526:	4619      	mov	r1, r3
 8004528:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	2301      	movs	r3, #1
 8004530:	4abf      	ldr	r2, [pc, #764]	@ (8004830 <StartDefaultTask+0x1ce0>)
 8004532:	48c0      	ldr	r0, [pc, #768]	@ (8004834 <StartDefaultTask+0x1ce4>)
 8004534:	f001 f9c0 	bl	80058b8 <SPIF_ReadSector>
							  str[i] = read[0];
 8004538:	4bbd      	ldr	r3, [pc, #756]	@ (8004830 <StartDefaultTask+0x1ce0>)
 800453a:	7819      	ldrb	r1, [r3, #0]
 800453c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004540:	f5a3 72ae 	sub.w	r2, r3, #348	@ 0x15c
 8004544:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004548:	4413      	add	r3, r2
 800454a:	460a      	mov	r2, r1
 800454c:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800454e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004552:	3301      	adds	r3, #1
 8004554:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004558:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800455c:	2b06      	cmp	r3, #6
 800455e:	dddd      	ble.n	800451c <StartDefaultTask+0x19cc>
							}
							str[7] = 0;
 8004560:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004564:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004568:	2200      	movs	r2, #0
 800456a:	71da      	strb	r2, [r3, #7]

							SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 800456c:	4bae      	ldr	r3, [pc, #696]	@ (8004828 <StartDefaultTask+0x1cd8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4aae      	ldr	r2, [pc, #696]	@ (800482c <StartDefaultTask+0x1cdc>)
 8004572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004576:	4619      	mov	r1, r3
 8004578:	2307      	movs	r3, #7
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2301      	movs	r3, #1
 800457e:	4aac      	ldr	r2, [pc, #688]	@ (8004830 <StartDefaultTask+0x1ce0>)
 8004580:	48ac      	ldr	r0, [pc, #688]	@ (8004834 <StartDefaultTask+0x1ce4>)
 8004582:	f001 f999 	bl	80058b8 <SPIF_ReadSector>
							int val1 = read[0];
 8004586:	4baa      	ldr	r3, [pc, #680]	@ (8004830 <StartDefaultTask+0x1ce0>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
							SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 800458e:	4ba6      	ldr	r3, [pc, #664]	@ (8004828 <StartDefaultTask+0x1cd8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4aa6      	ldr	r2, [pc, #664]	@ (800482c <StartDefaultTask+0x1cdc>)
 8004594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004598:	4619      	mov	r1, r3
 800459a:	2308      	movs	r3, #8
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	2301      	movs	r3, #1
 80045a0:	4aa3      	ldr	r2, [pc, #652]	@ (8004830 <StartDefaultTask+0x1ce0>)
 80045a2:	48a4      	ldr	r0, [pc, #656]	@ (8004834 <StartDefaultTask+0x1ce4>)
 80045a4:	f001 f988 	bl	80058b8 <SPIF_ReadSector>
							int val2 = read[0];
 80045a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004830 <StartDefaultTask+0x1ce0>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
							float store = val1 + (.025 * val2);
 80045b0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 80045b4:	f7fc f8e0 	bl	8000778 <__aeabi_i2d>
 80045b8:	4604      	mov	r4, r0
 80045ba:	460d      	mov	r5, r1
 80045bc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 80045c0:	f7fc f8da 	bl	8000778 <__aeabi_i2d>
 80045c4:	a396      	add	r3, pc, #600	@ (adr r3, 8004820 <StartDefaultTask+0x1cd0>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fb fe59 	bl	8000280 <__aeabi_dmul>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4620      	mov	r0, r4
 80045d4:	4629      	mov	r1, r5
 80045d6:	f7fb ff83 	bl	80004e0 <__adddf3>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4610      	mov	r0, r2
 80045e0:	4619      	mov	r1, r3
 80045e2:	f7fc f95b 	bl	800089c <__aeabi_d2f>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

							sprintf(toPrint, "%c%s%0.3f", 'k', str, store);
 80045ec:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80045f0:	f7fc f8d4 	bl	800079c <__aeabi_f2d>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	f107 0114 	add.w	r1, r7, #20
 80045fc:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004600:	e9cd 2300 	strd	r2, r3, [sp]
 8004604:	460b      	mov	r3, r1
 8004606:	226b      	movs	r2, #107	@ 0x6b
 8004608:	498b      	ldr	r1, [pc, #556]	@ (8004838 <StartDefaultTask+0x1ce8>)
 800460a:	f006 f80f 	bl	800a62c <siprintf>
							LCDPrint(toPrint);
 800460e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004612:	4618      	mov	r0, r3
 8004614:	f7fd fea4 	bl	8002360 <LCDPrint>

							lastDC = dispCount;
 8004618:	4b83      	ldr	r3, [pc, #524]	@ (8004828 <StartDefaultTask+0x1cd8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a87      	ldr	r2, [pc, #540]	@ (800483c <StartDefaultTask+0x1cec>)
 800461e:	6013      	str	r3, [r2, #0]
						while (millis() - timer < 5000)
 8004620:	f7fd fa66 	bl	8001af0 <millis>
 8004624:	4602      	mov	r2, r0
 8004626:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004630:	4293      	cmp	r3, r2
 8004632:	f67f af22 	bls.w	800447a <StartDefaultTask+0x192a>
						  }
						}
						//post loop (pressed button)
						//change the standby to the stored that was selected and call it a day freq will update and display
						if (valid)
 8004636:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800463a:	2b00      	cmp	r3, #0
 800463c:	d028      	beq.n	8004690 <StartDefaultTask+0x1b40>
						{
			//			  SM = EEPROM.read(eepDisplay[dispCount] + 7);
			//			  SK = EEPROM.read(eepDisplay[dispCount] + 8) * 25;
						  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 800463e:	4b7a      	ldr	r3, [pc, #488]	@ (8004828 <StartDefaultTask+0x1cd8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a7a      	ldr	r2, [pc, #488]	@ (800482c <StartDefaultTask+0x1cdc>)
 8004644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004648:	4619      	mov	r1, r3
 800464a:	2307      	movs	r3, #7
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	2301      	movs	r3, #1
 8004650:	4a77      	ldr	r2, [pc, #476]	@ (8004830 <StartDefaultTask+0x1ce0>)
 8004652:	4878      	ldr	r0, [pc, #480]	@ (8004834 <StartDefaultTask+0x1ce4>)
 8004654:	f001 f930 	bl	80058b8 <SPIF_ReadSector>
						  SM = read[0];
 8004658:	4b75      	ldr	r3, [pc, #468]	@ (8004830 <StartDefaultTask+0x1ce0>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	4b78      	ldr	r3, [pc, #480]	@ (8004840 <StartDefaultTask+0x1cf0>)
 8004660:	601a      	str	r2, [r3, #0]
						  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8004662:	4b71      	ldr	r3, [pc, #452]	@ (8004828 <StartDefaultTask+0x1cd8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a71      	ldr	r2, [pc, #452]	@ (800482c <StartDefaultTask+0x1cdc>)
 8004668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466c:	4619      	mov	r1, r3
 800466e:	2308      	movs	r3, #8
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	2301      	movs	r3, #1
 8004674:	4a6e      	ldr	r2, [pc, #440]	@ (8004830 <StartDefaultTask+0x1ce0>)
 8004676:	486f      	ldr	r0, [pc, #444]	@ (8004834 <StartDefaultTask+0x1ce4>)
 8004678:	f001 f91e 	bl	80058b8 <SPIF_ReadSector>
						  SK = read[0] * 25;
 800467c:	4b6c      	ldr	r3, [pc, #432]	@ (8004830 <StartDefaultTask+0x1ce0>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009a      	lsls	r2, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	4a6d      	ldr	r2, [pc, #436]	@ (8004844 <StartDefaultTask+0x1cf4>)
 800468e:	6013      	str	r3, [r2, #0]
						}
						dispCount = 0;
 8004690:	4b65      	ldr	r3, [pc, #404]	@ (8004828 <StartDefaultTask+0x1cd8>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
						lastDC = 0;
 8004696:	4b69      	ldr	r3, [pc, #420]	@ (800483c <StartDefaultTask+0x1cec>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
						pause = false;
 800469c:	4b6a      	ldr	r3, [pc, #424]	@ (8004848 <StartDefaultTask+0x1cf8>)
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
						bscroll = false;
 80046a2:	4b6a      	ldr	r3, [pc, #424]	@ (800484c <StartDefaultTask+0x1cfc>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
						LCDPrint("f");
 80046a8:	4869      	ldr	r0, [pc, #420]	@ (8004850 <StartDefaultTask+0x1d00>)
 80046aa:	f7fd fe59 	bl	8002360 <LCDPrint>
						HAL_Delay(500);
 80046ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80046b2:	f001 fc6d 	bl	8005f90 <HAL_Delay>
					  }
					}
				  }
				  last = millis();
 80046b6:	f7fd fa1b 	bl	8001af0 <millis>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4a65      	ldr	r2, [pc, #404]	@ (8004854 <StartDefaultTask+0x1d04>)
 80046be:	6013      	str	r3, [r2, #0]
			}

	// If count has changed print the new value to serial ==================================================================================================================

			if (vol != vol_last) { // mode v
 80046c0:	4b65      	ldr	r3, [pc, #404]	@ (8004858 <StartDefaultTask+0x1d08>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b65      	ldr	r3, [pc, #404]	@ (800485c <StartDefaultTask+0x1d0c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d041      	beq.n	8004750 <StartDefaultTask+0x1c00>
			  int V = vol + 48;
 80046cc:	4b62      	ldr	r3, [pc, #392]	@ (8004858 <StartDefaultTask+0x1d08>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3330      	adds	r3, #48	@ 0x30
 80046d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			  char v = (char)V;
 80046d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046da:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
			  char VSfinal[2] = {v,0};
 80046de:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80046e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80046e6:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80046f0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80046f4:	2200      	movs	r2, #0
 80046f6:	705a      	strb	r2, [r3, #1]
			  Sender(VSfinal,2); //set vol
 80046f8:	f107 0310 	add.w	r3, r7, #16
 80046fc:	2102      	movs	r1, #2
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe f940 	bl	8002984 <Sender>

			  Sender2cdu(VSfinal,2); //sending also to cdu for synchronization
 8004704:	f107 0310 	add.w	r3, r7, #16
 8004708:	2102      	movs	r1, #2
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f9a6 	bl	8004a5c <Sender2cdu>

			  sprintf(toPrint, "%c%0.3f%d", 'v', freq, vol);
 8004710:	4b53      	ldr	r3, [pc, #332]	@ (8004860 <StartDefaultTask+0x1d10>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7fc f841 	bl	800079c <__aeabi_f2d>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	494e      	ldr	r1, [pc, #312]	@ (8004858 <StartDefaultTask+0x1d08>)
 8004720:	6809      	ldr	r1, [r1, #0]
 8004722:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004726:	9102      	str	r1, [sp, #8]
 8004728:	e9cd 2300 	strd	r2, r3, [sp]
 800472c:	2276      	movs	r2, #118	@ 0x76
 800472e:	494d      	ldr	r1, [pc, #308]	@ (8004864 <StartDefaultTask+0x1d14>)
 8004730:	f005 ff7c 	bl	800a62c <siprintf>
			  LCDPrint(toPrint);
 8004734:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004738:	4618      	mov	r0, r3
 800473a:	f7fd fe11 	bl	8002360 <LCDPrint>

			  vol_last = vol;
 800473e:	4b46      	ldr	r3, [pc, #280]	@ (8004858 <StartDefaultTask+0x1d08>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a46      	ldr	r2, [pc, #280]	@ (800485c <StartDefaultTask+0x1d0c>)
 8004744:	6013      	str	r3, [r2, #0]
			  last = millis();
 8004746:	f7fd f9d3 	bl	8001af0 <millis>
 800474a:	4603      	mov	r3, r0
 800474c:	4a41      	ldr	r2, [pc, #260]	@ (8004854 <StartDefaultTask+0x1d04>)
 800474e:	6013      	str	r3, [r2, #0]
			}
			if (obs != obs_last) { // mode s
 8004750:	4b45      	ldr	r3, [pc, #276]	@ (8004868 <StartDefaultTask+0x1d18>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4b45      	ldr	r3, [pc, #276]	@ (800486c <StartDefaultTask+0x1d1c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d01d      	beq.n	8004798 <StartDefaultTask+0x1c48>

			  sprintf(toPrint, "%c%03d", 'b', obs);
 800475c:	4b42      	ldr	r3, [pc, #264]	@ (8004868 <StartDefaultTask+0x1d18>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004764:	2262      	movs	r2, #98	@ 0x62
 8004766:	4942      	ldr	r1, [pc, #264]	@ (8004870 <StartDefaultTask+0x1d20>)
 8004768:	f005 ff60 	bl	800a62c <siprintf>
			  LCDPrint(toPrint);
 800476c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004770:	4618      	mov	r0, r3
 8004772:	f7fd fdf5 	bl	8002360 <LCDPrint>

			  Sender("",3);
 8004776:	2103      	movs	r1, #3
 8004778:	483e      	ldr	r0, [pc, #248]	@ (8004874 <StartDefaultTask+0x1d24>)
 800477a:	f7fe f903 	bl	8002984 <Sender>

			  Sender2cdu("",3); //sending also to cdu for synchronization
 800477e:	2103      	movs	r1, #3
 8004780:	483c      	ldr	r0, [pc, #240]	@ (8004874 <StartDefaultTask+0x1d24>)
 8004782:	f000 f96b 	bl	8004a5c <Sender2cdu>

			  obs_last = obs;
 8004786:	4b38      	ldr	r3, [pc, #224]	@ (8004868 <StartDefaultTask+0x1d18>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a38      	ldr	r2, [pc, #224]	@ (800486c <StartDefaultTask+0x1d1c>)
 800478c:	6013      	str	r3, [r2, #0]
			  last = millis();
 800478e:	f7fd f9af 	bl	8001af0 <millis>
 8004792:	4603      	mov	r3, r0
 8004794:	4a2f      	ldr	r2, [pc, #188]	@ (8004854 <StartDefaultTask+0x1d04>)
 8004796:	6013      	str	r3, [r2, #0]
			}
			if (freq != freq_last || Standby != sfreq_last) { // mode f
 8004798:	4b31      	ldr	r3, [pc, #196]	@ (8004860 <StartDefaultTask+0x1d10>)
 800479a:	ed93 7a00 	vldr	s14, [r3]
 800479e:	4b36      	ldr	r3, [pc, #216]	@ (8004878 <StartDefaultTask+0x1d28>)
 80047a0:	edd3 7a00 	vldr	s15, [r3]
 80047a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80047a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ac:	d10b      	bne.n	80047c6 <StartDefaultTask+0x1c76>
 80047ae:	4b33      	ldr	r3, [pc, #204]	@ (800487c <StartDefaultTask+0x1d2c>)
 80047b0:	ed93 7a00 	vldr	s14, [r3]
 80047b4:	4b32      	ldr	r3, [pc, #200]	@ (8004880 <StartDefaultTask+0x1d30>)
 80047b6:	edd3 7a00 	vldr	s15, [r3]
 80047ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80047be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c2:	f43e a9cd 	beq.w	8002b60 <StartDefaultTask+0x10>
			  int MA = MHz - 48;
 80047c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004884 <StartDefaultTask+0x1d34>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3b30      	subs	r3, #48	@ 0x30
 80047cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			  int KA = (KHz/25) + 48;
 80047d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004888 <StartDefaultTask+0x1d38>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2d      	ldr	r2, [pc, #180]	@ (800488c <StartDefaultTask+0x1d3c>)
 80047d6:	fb82 1203 	smull	r1, r2, r2, r3
 80047da:	10d2      	asrs	r2, r2, #3
 80047dc:	17db      	asrs	r3, r3, #31
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	3330      	adds	r3, #48	@ 0x30
 80047e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			  char m = (char)MA;
 80047e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			  char k = (char)KA;
 80047ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047f2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			  char Mfinal[3] = {m,k,0};
 80047f6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80047fa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80047fe:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004808:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800480c:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8004810:	705a      	strb	r2, [r3, #1]
 8004812:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004816:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800481a:	e039      	b.n	8004890 <StartDefaultTask+0x1d40>
 800481c:	f3af 8000 	nop.w
 8004820:	9999999a 	.word	0x9999999a
 8004824:	3f999999 	.word	0x3f999999
 8004828:	2000056c 	.word	0x2000056c
 800482c:	2000052c 	.word	0x2000052c
 8004830:	2000058c 	.word	0x2000058c
 8004834:	200004f8 	.word	0x200004f8
 8004838:	0800b158 	.word	0x0800b158
 800483c:	200005e8 	.word	0x200005e8
 8004840:	20000008 	.word	0x20000008
 8004844:	20000520 	.word	0x20000520
 8004848:	2000000c 	.word	0x2000000c
 800484c:	20000574 	.word	0x20000574
 8004850:	0800b184 	.word	0x0800b184
 8004854:	200005cc 	.word	0x200005cc
 8004858:	20000524 	.word	0x20000524
 800485c:	200005ec 	.word	0x200005ec
 8004860:	20000518 	.word	0x20000518
 8004864:	0800b188 	.word	0x0800b188
 8004868:	2000057c 	.word	0x2000057c
 800486c:	200005f0 	.word	0x200005f0
 8004870:	0800b194 	.word	0x0800b194
 8004874:	0800b19c 	.word	0x0800b19c
 8004878:	20000010 	.word	0x20000010
 800487c:	20000004 	.word	0x20000004
 8004880:	20000014 	.word	0x20000014
 8004884:	20000000 	.word	0x20000000
 8004888:	2000051c 	.word	0x2000051c
 800488c:	51eb851f 	.word	0x51eb851f
 8004890:	2200      	movs	r2, #0
 8004892:	709a      	strb	r2, [r3, #2]
			  Sender(Mfinal, 0); //set active
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f7fe f872 	bl	8002984 <Sender>

			  Sender2cdu(Mfinal,0); //sending also to cdu for synchronization
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f8d8 	bl	8004a5c <Sender2cdu>

			  MA = SM - 48;
 80048ac:	4b31      	ldr	r3, [pc, #196]	@ (8004974 <StartDefaultTask+0x1e24>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3b30      	subs	r3, #48	@ 0x30
 80048b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			  KA = (SK/25) + 48;
 80048b6:	4b30      	ldr	r3, [pc, #192]	@ (8004978 <StartDefaultTask+0x1e28>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a30      	ldr	r2, [pc, #192]	@ (800497c <StartDefaultTask+0x1e2c>)
 80048bc:	fb82 1203 	smull	r1, r2, r2, r3
 80048c0:	10d2      	asrs	r2, r2, #3
 80048c2:	17db      	asrs	r3, r3, #31
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	3330      	adds	r3, #48	@ 0x30
 80048c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			  m = (char)MA;
 80048cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			  k = (char)KA;
 80048d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048d8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			  char Sfinal[3] = {m,k,0};
 80048dc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80048e0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80048e4:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80048ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80048f2:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80048f6:	705a      	strb	r2, [r3, #1]
 80048f8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80048fc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004900:	2200      	movs	r2, #0
 8004902:	709a      	strb	r2, [r3, #2]
			  Sender(Sfinal, 1); //set standby
 8004904:	f107 0308 	add.w	r3, r7, #8
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe f83a 	bl	8002984 <Sender>

			  Sender2cdu(Sfinal,1); //sending also to cdu for synchronization
 8004910:	f107 0308 	add.w	r3, r7, #8
 8004914:	2101      	movs	r1, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f8a0 	bl	8004a5c <Sender2cdu>

			  sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 800491c:	4b18      	ldr	r3, [pc, #96]	@ (8004980 <StartDefaultTask+0x1e30>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fb ff3b 	bl	800079c <__aeabi_f2d>
 8004926:	4604      	mov	r4, r0
 8004928:	460d      	mov	r5, r1
 800492a:	4b16      	ldr	r3, [pc, #88]	@ (8004984 <StartDefaultTask+0x1e34>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fb ff34 	bl	800079c <__aeabi_f2d>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800493c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004940:	e9cd 4500 	strd	r4, r5, [sp]
 8004944:	2266      	movs	r2, #102	@ 0x66
 8004946:	4910      	ldr	r1, [pc, #64]	@ (8004988 <StartDefaultTask+0x1e38>)
 8004948:	f005 fe70 	bl	800a62c <siprintf>
			  LCDPrint(toPrint);
 800494c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004950:	4618      	mov	r0, r3
 8004952:	f7fd fd05 	bl	8002360 <LCDPrint>

			  sfreq_last = Standby;
 8004956:	4b0b      	ldr	r3, [pc, #44]	@ (8004984 <StartDefaultTask+0x1e34>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a0c      	ldr	r2, [pc, #48]	@ (800498c <StartDefaultTask+0x1e3c>)
 800495c:	6013      	str	r3, [r2, #0]
			  freq_last = freq;
 800495e:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <StartDefaultTask+0x1e30>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a0b      	ldr	r2, [pc, #44]	@ (8004990 <StartDefaultTask+0x1e40>)
 8004964:	6013      	str	r3, [r2, #0]
			  last = millis();
 8004966:	f7fd f8c3 	bl	8001af0 <millis>
 800496a:	4603      	mov	r3, r0
 800496c:	4a09      	ldr	r2, [pc, #36]	@ (8004994 <StartDefaultTask+0x1e44>)
 800496e:	6013      	str	r3, [r2, #0]
		  {
 8004970:	f7fe b8f6 	b.w	8002b60 <StartDefaultTask+0x10>
 8004974:	20000008 	.word	0x20000008
 8004978:	20000520 	.word	0x20000520
 800497c:	51eb851f 	.word	0x51eb851f
 8004980:	20000518 	.word	0x20000518
 8004984:	20000004 	.word	0x20000004
 8004988:	0800b148 	.word	0x0800b148
 800498c:	20000014 	.word	0x20000014
 8004990:	20000010 	.word	0x20000010
 8004994:	200005cc 	.word	0x200005cc

08004998 <task2_init>:
			}
		  }

}

void task2_init(void const * argument) { // rx
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

	  //continuously receive data through UART=====================================
//	  response = HAL_UART_Receive(&huart4, rxbuff, 1, 1000);


	  if(response==HAL_OK) //if transfer is successful
 80049a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a10 <task2_init+0x78>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d120      	bne.n	80049ea <task2_init+0x52>
	  {
		  if (faultcounter0 > 2)
 80049a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a14 <task2_init+0x7c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	dd02      	ble.n	80049b6 <task2_init+0x1e>
		  {
			  glcd_clearline(7);
 80049b0:	2007      	movs	r0, #7
 80049b2:	f7fc fe59 	bl	8001668 <glcd_clearline>
		  }
		  faultcounter0 = 0;
 80049b6:	4b17      	ldr	r3, [pc, #92]	@ (8004a14 <task2_init+0x7c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

//		  rxmsg[rxcount] = rxbuff[0];
//		  rxcount++;
		  if (rxcount > 24) {
 80049bc:	4b16      	ldr	r3, [pc, #88]	@ (8004a18 <task2_init+0x80>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b18      	cmp	r3, #24
 80049c2:	dd02      	ble.n	80049ca <task2_init+0x32>
			  rxcount = 0;
 80049c4:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <task2_init+0x80>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
		  }

		  if (rxbuff[0] == '\n')
 80049ca:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <task2_init+0x84>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b0a      	cmp	r3, #10
 80049d0:	d1e6      	bne.n	80049a0 <task2_init+0x8>
		  {
			  rxmsg[rxcount] = 0;
 80049d2:	4b11      	ldr	r3, [pc, #68]	@ (8004a18 <task2_init+0x80>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a12      	ldr	r2, [pc, #72]	@ (8004a20 <task2_init+0x88>)
 80049d8:	2100      	movs	r1, #0
 80049da:	54d1      	strb	r1, [r2, r3]
			  rxcount = 0;
 80049dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a18 <task2_init+0x80>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
			  rxfree = true;
 80049e2:	4b10      	ldr	r3, [pc, #64]	@ (8004a24 <task2_init+0x8c>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e7da      	b.n	80049a0 <task2_init+0x8>
	  }
	  else
	  {
		  // no message in 1 seconds
//		  __HAL_UART_FLUSH_DRREGISTER(&huart4);  // Clear the UART Data Register
		  rxcount = 0;
 80049ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <task2_init+0x80>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
		  faultcounter0++;
 80049f0:	4b08      	ldr	r3, [pc, #32]	@ (8004a14 <task2_init+0x7c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3301      	adds	r3, #1
 80049f6:	4a07      	ldr	r2, [pc, #28]	@ (8004a14 <task2_init+0x7c>)
 80049f8:	6013      	str	r3, [r2, #0]
		  if (faultcounter0 > 2)
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <task2_init+0x7c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	ddce      	ble.n	80049a0 <task2_init+0x8>
		  {
			  glcd_puts("Error 0", 0, 7);
 8004a02:	2207      	movs	r2, #7
 8004a04:	2100      	movs	r1, #0
 8004a06:	4808      	ldr	r0, [pc, #32]	@ (8004a28 <task2_init+0x90>)
 8004a08:	f7fc fbf2 	bl	80011f0 <glcd_puts>
	  if(response==HAL_OK) //if transfer is successful
 8004a0c:	e7c8      	b.n	80049a0 <task2_init+0x8>
 8004a0e:	bf00      	nop
 8004a10:	200005c1 	.word	0x200005c1
 8004a14:	200005b8 	.word	0x200005b8
 8004a18:	200005b4 	.word	0x200005b4
 8004a1c:	20000594 	.word	0x20000594
 8004a20:	20000598 	.word	0x20000598
 8004a24:	200005c0 	.word	0x200005c0
 8004a28:	0800b1a8 	.word	0x0800b1a8

08004a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a04      	ldr	r2, [pc, #16]	@ (8004a4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004a3e:	f001 fa87 	bl	8005f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40001000 	.word	0x40001000

08004a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a54:	b672      	cpsid	i
}
 8004a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a58:	bf00      	nop
 8004a5a:	e7fd      	b.n	8004a58 <Error_Handler+0x8>

08004a5c <Sender2cdu>:
unsigned char rxbuffcdu[1];
char rxmsgcdu[25];
int rxcountcdu = 0;
bool rxfreecdu = false;

void Sender2cdu(const char * str, int mode) { //TODO				construct and send a message (likely over UART)
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b092      	sub	sp, #72	@ 0x48
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
    char crlf[] = {'\r','\n', 0};
 8004a66:	4a69      	ldr	r2, [pc, #420]	@ (8004c0c <Sender2cdu+0x1b0>)
 8004a68:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	4611      	mov	r1, r2
 8004a70:	8019      	strh	r1, [r3, #0]
 8004a72:	3302      	adds	r3, #2
 8004a74:	0c12      	lsrs	r2, r2, #16
 8004a76:	701a      	strb	r2, [r3, #0]
    uint8_t str2[25]; // Array to hold the constructed string in ASCII

    memset(str2, 0, sizeof(str2)); // Initialize the array with zeros
 8004a78:	f107 031c 	add.w	r3, r7, #28
 8004a7c:	2219      	movs	r2, #25
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f005 fdf3 	bl	800a66c <memset>

    if (mode == 0) {
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d12d      	bne.n	8004ae8 <Sender2cdu+0x8c>
        char m = str[0];
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        char k = str[1];
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3301      	adds	r3, #1
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        snprintf((char*)str2, sizeof(str2), "$PATNV27%c%cN", m, k);
 8004a9e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8004aa2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004aa6:	f107 001c 	add.w	r0, r7, #28
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	4a58      	ldr	r2, [pc, #352]	@ (8004c10 <Sender2cdu+0x1b4>)
 8004ab0:	2119      	movs	r1, #25
 8004ab2:	f005 fd87 	bl	800a5c4 <sniprintf>
        char end2[3];
        checksum((char*)str2, end2);
 8004ab6:	f107 0218 	add.w	r2, r7, #24
 8004aba:	f107 031c 	add.w	r3, r7, #28
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd fbe9 	bl	8002298 <checksum>
        concatTwoChars((char*)str2, end2);
 8004ac6:	f107 0218 	add.w	r2, r7, #24
 8004aca:	f107 031c 	add.w	r3, r7, #28
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fd fc20 	bl	8002316 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8004ad6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004ada:	f107 031c 	add.w	r3, r7, #28
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fd fc18 	bl	8002316 <concatTwoChars>
 8004ae6:	e07b      	b.n	8004be0 <Sender2cdu+0x184>
    } else if (mode == 1) {
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d12d      	bne.n	8004b4a <Sender2cdu+0xee>
        char m = str[0];
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        char k = str[1];
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3301      	adds	r3, #1
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        snprintf((char*)str2, sizeof(str2), "$PATNV28%c%cN", m, k);
 8004b00:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8004b04:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004b08:	f107 001c 	add.w	r0, r7, #28
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	4a40      	ldr	r2, [pc, #256]	@ (8004c14 <Sender2cdu+0x1b8>)
 8004b12:	2119      	movs	r1, #25
 8004b14:	f005 fd56 	bl	800a5c4 <sniprintf>
        char end3[3];
        checksum((char*)str2, end3);
 8004b18:	f107 0214 	add.w	r2, r7, #20
 8004b1c:	f107 031c 	add.w	r3, r7, #28
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fd fbb8 	bl	8002298 <checksum>
        concatTwoChars((char*)str2, end3);
 8004b28:	f107 0214 	add.w	r2, r7, #20
 8004b2c:	f107 031c 	add.w	r3, r7, #28
 8004b30:	4611      	mov	r1, r2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fd fbef 	bl	8002316 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8004b38:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004b3c:	f107 031c 	add.w	r3, r7, #28
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd fbe7 	bl	8002316 <concatTwoChars>
 8004b48:	e04a      	b.n	8004be0 <Sender2cdu+0x184>
    } else if (mode == 2) {
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d124      	bne.n	8004b9a <Sender2cdu+0x13e>
        char v = str[0];
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        snprintf((char*)str2, sizeof(str2), "$PATNV73%c", v);
 8004b58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004b5c:	f107 001c 	add.w	r0, r7, #28
 8004b60:	4a2d      	ldr	r2, [pc, #180]	@ (8004c18 <Sender2cdu+0x1bc>)
 8004b62:	2119      	movs	r1, #25
 8004b64:	f005 fd2e 	bl	800a5c4 <sniprintf>
        char end4[3];
        checksum((char*)str2, end4);
 8004b68:	f107 0210 	add.w	r2, r7, #16
 8004b6c:	f107 031c 	add.w	r3, r7, #28
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fd fb90 	bl	8002298 <checksum>
        concatTwoChars((char*)str2, end4);
 8004b78:	f107 0210 	add.w	r2, r7, #16
 8004b7c:	f107 031c 	add.w	r3, r7, #28
 8004b80:	4611      	mov	r1, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fd fbc7 	bl	8002316 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8004b88:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004b8c:	f107 031c 	add.w	r3, r7, #28
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fd fbbf 	bl	8002316 <concatTwoChars>
 8004b98:	e022      	b.n	8004be0 <Sender2cdu+0x184>
    } else if (mode == 3) {
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d11f      	bne.n	8004be0 <Sender2cdu+0x184>
        snprintf((char*)str2, sizeof(str2), "$PATNV34%03d", obs);
 8004ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8004c1c <Sender2cdu+0x1c0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f107 001c 	add.w	r0, r7, #28
 8004ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c20 <Sender2cdu+0x1c4>)
 8004baa:	2119      	movs	r1, #25
 8004bac:	f005 fd0a 	bl	800a5c4 <sniprintf>
        char end5[3];
        checksum((char*)str2, end5);
 8004bb0:	f107 020c 	add.w	r2, r7, #12
 8004bb4:	f107 031c 	add.w	r3, r7, #28
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fd fb6c 	bl	8002298 <checksum>
        concatTwoChars((char*)str2, end5);
 8004bc0:	f107 020c 	add.w	r2, r7, #12
 8004bc4:	f107 031c 	add.w	r3, r7, #28
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fd fba3 	bl	8002316 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8004bd0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004bd4:	f107 031c 	add.w	r3, r7, #28
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fd fb9b 	bl	8002316 <concatTwoChars>
    }

    HAL_UART_Transmit(&huart5, str2, strlen((char*)str2), 500);
 8004be0:	f107 031c 	add.w	r3, r7, #28
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fb faf3 	bl	80001d0 <strlen>
 8004bea:	4603      	mov	r3, r0
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	f107 011c 	add.w	r1, r7, #28
 8004bf2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004bf6:	480b      	ldr	r0, [pc, #44]	@ (8004c24 <Sender2cdu+0x1c8>)
 8004bf8:	f003 fb27 	bl	800824a <HAL_UART_Transmit>
    HAL_Delay(100);
 8004bfc:	2064      	movs	r0, #100	@ 0x64
 8004bfe:	f001 f9c7 	bl	8005f90 <HAL_Delay>
}
 8004c02:	bf00      	nop
 8004c04:	3740      	adds	r7, #64	@ 0x40
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	0800b1ec 	.word	0x0800b1ec
 8004c10:	0800b1b0 	.word	0x0800b1b0
 8004c14:	0800b1c0 	.word	0x0800b1c0
 8004c18:	0800b1d0 	.word	0x0800b1d0
 8004c1c:	2000057c 	.word	0x2000057c
 8004c20:	0800b1dc 	.word	0x0800b1dc
 8004c24:	200003d4 	.word	0x200003d4

08004c28 <task3_init>:

void task3_init(void const * argument)
{ // data synchronization between cdu and rcu
 8004c28:	b5b0      	push	{r4, r5, r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
//		  response = HAL_UART_Receive(&huart5, rxbuffcdu, 1, 500);
//		  HAL_UART

		  //printf("%u\n",rxbuffcdu);
		//HAL_Delay(100);
		  if(responseCDU==HAL_OK) //if transfer is successful
 8004c30:	4b87      	ldr	r3, [pc, #540]	@ (8004e50 <task3_init+0x228>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d118      	bne.n	8004c6a <task3_init+0x42>
		  {
			  responseCDU = 2;
 8004c38:	4b85      	ldr	r3, [pc, #532]	@ (8004e50 <task3_init+0x228>)
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]
//			  rxmsgcdu[rxcountcdu] = rxbuffcdu[0];
//			  rxcountcdu++;
			  if (rxcountcdu > 24) {
 8004c3e:	4b85      	ldr	r3, [pc, #532]	@ (8004e54 <task3_init+0x22c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b18      	cmp	r3, #24
 8004c44:	dd02      	ble.n	8004c4c <task3_init+0x24>
				  rxcountcdu = 0;
 8004c46:	4b83      	ldr	r3, [pc, #524]	@ (8004e54 <task3_init+0x22c>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
//			  if (rxbuffcdu[0] == '$')
//			  {
//				 time = millis();
//			  }

			  if (rxbuffcdu[0] == '\n')
 8004c4c:	4b82      	ldr	r3, [pc, #520]	@ (8004e58 <task3_init+0x230>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b0a      	cmp	r3, #10
 8004c52:	d10a      	bne.n	8004c6a <task3_init+0x42>
			  {
//				  unsigned int duration = millis() - time;
//				  print();
				  rxmsgcdu[rxcountcdu] = 0;
 8004c54:	4b7f      	ldr	r3, [pc, #508]	@ (8004e54 <task3_init+0x22c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a80      	ldr	r2, [pc, #512]	@ (8004e5c <task3_init+0x234>)
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	54d1      	strb	r1, [r2, r3]
				  rxcountcdu = 0;
 8004c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e54 <task3_init+0x22c>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
				  rxfreecdu = true;
 8004c64:	4b7e      	ldr	r3, [pc, #504]	@ (8004e60 <task3_init+0x238>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]
//		  {
//			  // no message in 1 seconds
//			  __HAL_UART_FLUSH_DRREGISTER(&huart5);  // Clear the UART Data Register
//			  rxcountcdu = 0;
//		  }
		  if(rxfreecdu)
 8004c6a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e60 <task3_init+0x238>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0de      	beq.n	8004c30 <task3_init+0x8>
		  {
			  rxfreecdu = false;
 8004c72:	4b7b      	ldr	r3, [pc, #492]	@ (8004e60 <task3_init+0x238>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
			  if(rxmsgcdu[6] == '2' && rxmsgcdu[7] == '7')
 8004c78:	4b78      	ldr	r3, [pc, #480]	@ (8004e5c <task3_init+0x234>)
 8004c7a:	799b      	ldrb	r3, [r3, #6]
 8004c7c:	2b32      	cmp	r3, #50	@ 0x32
 8004c7e:	d14c      	bne.n	8004d1a <task3_init+0xf2>
 8004c80:	4b76      	ldr	r3, [pc, #472]	@ (8004e5c <task3_init+0x234>)
 8004c82:	79db      	ldrb	r3, [r3, #7]
 8004c84:	2b37      	cmp	r3, #55	@ 0x37
 8004c86:	d148      	bne.n	8004d1a <task3_init+0xf2>
			  {
				  float rxfreq;
				  rxfreq = (rxmsgcdu[8] + 48) + ((rxmsgcdu[9] - 48) * .025); // active frequency
 8004c88:	4b74      	ldr	r3, [pc, #464]	@ (8004e5c <task3_init+0x234>)
 8004c8a:	7a1b      	ldrb	r3, [r3, #8]
 8004c8c:	3330      	adds	r3, #48	@ 0x30
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fb fd72 	bl	8000778 <__aeabi_i2d>
 8004c94:	4604      	mov	r4, r0
 8004c96:	460d      	mov	r5, r1
 8004c98:	4b70      	ldr	r3, [pc, #448]	@ (8004e5c <task3_init+0x234>)
 8004c9a:	7a5b      	ldrb	r3, [r3, #9]
 8004c9c:	3b30      	subs	r3, #48	@ 0x30
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fb fd6a 	bl	8000778 <__aeabi_i2d>
 8004ca4:	a368      	add	r3, pc, #416	@ (adr r3, 8004e48 <task3_init+0x220>)
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	f7fb fae9 	bl	8000280 <__aeabi_dmul>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7fb fc13 	bl	80004e0 <__adddf3>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f7fb fdeb 	bl	800089c <__aeabi_d2f>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	617b      	str	r3, [r7, #20]
				  if (rxfreq != freq)
 8004cca:	4b66      	ldr	r3, [pc, #408]	@ (8004e64 <task3_init+0x23c>)
 8004ccc:	edd3 7a00 	vldr	s15, [r3]
 8004cd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8004cd4:	eeb4 7a67 	vcmp.f32	s14, s15
 8004cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cdc:	f000 80ae 	beq.w	8004e3c <task3_init+0x214>
				  {
					  freq = rxfreq;
 8004ce0:	4a60      	ldr	r2, [pc, #384]	@ (8004e64 <task3_init+0x23c>)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	6013      	str	r3, [r2, #0]
					  MHz = rxmsgcdu[8] + 48;
 8004ce6:	4b5d      	ldr	r3, [pc, #372]	@ (8004e5c <task3_init+0x234>)
 8004ce8:	7a1b      	ldrb	r3, [r3, #8]
 8004cea:	3330      	adds	r3, #48	@ 0x30
 8004cec:	4a5e      	ldr	r2, [pc, #376]	@ (8004e68 <task3_init+0x240>)
 8004cee:	6013      	str	r3, [r2, #0]
					  KHz = (rxmsgcdu[9] - 48) * .025;
 8004cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e5c <task3_init+0x234>)
 8004cf2:	7a5b      	ldrb	r3, [r3, #9]
 8004cf4:	3b30      	subs	r3, #48	@ 0x30
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fb fd3e 	bl	8000778 <__aeabi_i2d>
 8004cfc:	a352      	add	r3, pc, #328	@ (adr r3, 8004e48 <task3_init+0x220>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	f7fb fabd 	bl	8000280 <__aeabi_dmul>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	f7fb fd9d 	bl	800084c <__aeabi_d2iz>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4a55      	ldr	r2, [pc, #340]	@ (8004e6c <task3_init+0x244>)
 8004d16:	6013      	str	r3, [r2, #0]
			  {
 8004d18:	e090      	b.n	8004e3c <task3_init+0x214>
				  else
				  {

				  }
			  }
			  else if(rxmsgcdu[6] == '2' && rxmsgcdu[7] == '8')// standby frequency
 8004d1a:	4b50      	ldr	r3, [pc, #320]	@ (8004e5c <task3_init+0x234>)
 8004d1c:	799b      	ldrb	r3, [r3, #6]
 8004d1e:	2b32      	cmp	r3, #50	@ 0x32
 8004d20:	d14b      	bne.n	8004dba <task3_init+0x192>
 8004d22:	4b4e      	ldr	r3, [pc, #312]	@ (8004e5c <task3_init+0x234>)
 8004d24:	79db      	ldrb	r3, [r3, #7]
 8004d26:	2b38      	cmp	r3, #56	@ 0x38
 8004d28:	d147      	bne.n	8004dba <task3_init+0x192>
			  {
				  float rxfreq;
				  rxfreq = (rxmsgcdu[8] + 48) + ((rxmsgcdu[9] - 48) * .025);
 8004d2a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e5c <task3_init+0x234>)
 8004d2c:	7a1b      	ldrb	r3, [r3, #8]
 8004d2e:	3330      	adds	r3, #48	@ 0x30
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fb fd21 	bl	8000778 <__aeabi_i2d>
 8004d36:	4604      	mov	r4, r0
 8004d38:	460d      	mov	r5, r1
 8004d3a:	4b48      	ldr	r3, [pc, #288]	@ (8004e5c <task3_init+0x234>)
 8004d3c:	7a5b      	ldrb	r3, [r3, #9]
 8004d3e:	3b30      	subs	r3, #48	@ 0x30
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fb fd19 	bl	8000778 <__aeabi_i2d>
 8004d46:	a340      	add	r3, pc, #256	@ (adr r3, 8004e48 <task3_init+0x220>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f7fb fa98 	bl	8000280 <__aeabi_dmul>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4620      	mov	r0, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	f7fb fbc2 	bl	80004e0 <__adddf3>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	f7fb fd9a 	bl	800089c <__aeabi_d2f>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	613b      	str	r3, [r7, #16]
				  if (rxfreq != Standby)
 8004d6c:	4b40      	ldr	r3, [pc, #256]	@ (8004e70 <task3_init+0x248>)
 8004d6e:	edd3 7a00 	vldr	s15, [r3]
 8004d72:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d76:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7e:	d05f      	beq.n	8004e40 <task3_init+0x218>
				  {
					  Standby = rxfreq;
 8004d80:	4a3b      	ldr	r2, [pc, #236]	@ (8004e70 <task3_init+0x248>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6013      	str	r3, [r2, #0]
					  SM = rxmsgcdu[8] + 48;
 8004d86:	4b35      	ldr	r3, [pc, #212]	@ (8004e5c <task3_init+0x234>)
 8004d88:	7a1b      	ldrb	r3, [r3, #8]
 8004d8a:	3330      	adds	r3, #48	@ 0x30
 8004d8c:	4a39      	ldr	r2, [pc, #228]	@ (8004e74 <task3_init+0x24c>)
 8004d8e:	6013      	str	r3, [r2, #0]
					  SK = (rxmsgcdu[9] - 48) * .025;
 8004d90:	4b32      	ldr	r3, [pc, #200]	@ (8004e5c <task3_init+0x234>)
 8004d92:	7a5b      	ldrb	r3, [r3, #9]
 8004d94:	3b30      	subs	r3, #48	@ 0x30
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fb fcee 	bl	8000778 <__aeabi_i2d>
 8004d9c:	a32a      	add	r3, pc, #168	@ (adr r3, 8004e48 <task3_init+0x220>)
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f7fb fa6d 	bl	8000280 <__aeabi_dmul>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	f7fb fd4d 	bl	800084c <__aeabi_d2iz>
 8004db2:	4603      	mov	r3, r0
 8004db4:	4a30      	ldr	r2, [pc, #192]	@ (8004e78 <task3_init+0x250>)
 8004db6:	6013      	str	r3, [r2, #0]
			  {
 8004db8:	e042      	b.n	8004e40 <task3_init+0x218>
				  {

				  }

			  }
			  else if(rxmsgcdu[6] == '3' && rxmsgcdu[7] == '4')// obs value
 8004dba:	4b28      	ldr	r3, [pc, #160]	@ (8004e5c <task3_init+0x234>)
 8004dbc:	799b      	ldrb	r3, [r3, #6]
 8004dbe:	2b33      	cmp	r3, #51	@ 0x33
 8004dc0:	d124      	bne.n	8004e0c <task3_init+0x1e4>
 8004dc2:	4b26      	ldr	r3, [pc, #152]	@ (8004e5c <task3_init+0x234>)
 8004dc4:	79db      	ldrb	r3, [r3, #7]
 8004dc6:	2b34      	cmp	r3, #52	@ 0x34
 8004dc8:	d120      	bne.n	8004e0c <task3_init+0x1e4>
			  {
				  int i, val = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
				  for (i = 8; i <= 10; i++) {
 8004dce:	2308      	movs	r3, #8
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	e00f      	b.n	8004df4 <task3_init+0x1cc>
				          val = val * 10 + (rxmsgcdu[i] - '0');
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	4619      	mov	r1, r3
 8004de0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e5c <task3_init+0x234>)
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	3b30      	subs	r3, #48	@ 0x30
 8004dea:	440b      	add	r3, r1
 8004dec:	61bb      	str	r3, [r7, #24]
				  for (i = 8; i <= 10; i++) {
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	3301      	adds	r3, #1
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	2b0a      	cmp	r3, #10
 8004df8:	ddec      	ble.n	8004dd4 <task3_init+0x1ac>
				      }
				  if (val != obs)
 8004dfa:	4b20      	ldr	r3, [pc, #128]	@ (8004e7c <task3_init+0x254>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d01f      	beq.n	8004e44 <task3_init+0x21c>
				  {
					  obs = val;
 8004e04:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <task3_init+0x254>)
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	6013      	str	r3, [r2, #0]
			  {
 8004e0a:	e01b      	b.n	8004e44 <task3_init+0x21c>
					  //do nothing
				  }


			  }
			  else if(rxmsgcdu[6] == '7' && rxmsgcdu[7] == '3')// volume level
 8004e0c:	4b13      	ldr	r3, [pc, #76]	@ (8004e5c <task3_init+0x234>)
 8004e0e:	799b      	ldrb	r3, [r3, #6]
 8004e10:	2b37      	cmp	r3, #55	@ 0x37
 8004e12:	f47f af0d 	bne.w	8004c30 <task3_init+0x8>
 8004e16:	4b11      	ldr	r3, [pc, #68]	@ (8004e5c <task3_init+0x234>)
 8004e18:	79db      	ldrb	r3, [r3, #7]
 8004e1a:	2b33      	cmp	r3, #51	@ 0x33
 8004e1c:	f47f af08 	bne.w	8004c30 <task3_init+0x8>
			  {
				  int val;
				  val = rxmsgcdu[8] - '0'; // subtracting 48
 8004e20:	4b0e      	ldr	r3, [pc, #56]	@ (8004e5c <task3_init+0x234>)
 8004e22:	7a1b      	ldrb	r3, [r3, #8]
 8004e24:	3b30      	subs	r3, #48	@ 0x30
 8004e26:	60fb      	str	r3, [r7, #12]
				  if (val != vol)
 8004e28:	4b15      	ldr	r3, [pc, #84]	@ (8004e80 <task3_init+0x258>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	f43f aefe 	beq.w	8004c30 <task3_init+0x8>
				  {
					  vol = val;
 8004e34:	4a12      	ldr	r2, [pc, #72]	@ (8004e80 <task3_init+0x258>)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e6f9      	b.n	8004c30 <task3_init+0x8>
			  {
 8004e3c:	bf00      	nop
 8004e3e:	e6f7      	b.n	8004c30 <task3_init+0x8>
			  {
 8004e40:	bf00      	nop
 8004e42:	e6f5      	b.n	8004c30 <task3_init+0x8>
			  {
 8004e44:	bf00      	nop
		  if(responseCDU==HAL_OK) //if transfer is successful
 8004e46:	e6f3      	b.n	8004c30 <task3_init+0x8>
 8004e48:	9999999a 	.word	0x9999999a
 8004e4c:	3f999999 	.word	0x3f999999
 8004e50:	200005f4 	.word	0x200005f4
 8004e54:	20000618 	.word	0x20000618
 8004e58:	200005f8 	.word	0x200005f8
 8004e5c:	200005fc 	.word	0x200005fc
 8004e60:	2000061c 	.word	0x2000061c
 8004e64:	20000518 	.word	0x20000518
 8004e68:	20000000 	.word	0x20000000
 8004e6c:	2000051c 	.word	0x2000051c
 8004e70:	20000004 	.word	0x20000004
 8004e74:	20000008 	.word	0x20000008
 8004e78:	20000520 	.word	0x20000520
 8004e7c:	2000057c 	.word	0x2000057c
 8004e80:	20000524 	.word	0x20000524

08004e84 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 f87f 	bl	8005f90 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8004ea2:	e002      	b.n	8004eaa <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	f7ff ffed 	bl	8004e84 <SPIF_Delay>
  while (Handle->Lock)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	7b1b      	ldrb	r3, [r3, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f8      	bne.n	8004ea4 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	731a      	strb	r2, [r3, #12]
}
 8004eb8:	bf00      	nop
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	731a      	strb	r2, [r3, #12]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6858      	ldr	r0, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	f001 fb98 	bl	8006628 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e002      	b.n	8004f04 <SPIF_CsPin+0x2a>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3301      	adds	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b09      	cmp	r3, #9
 8004f08:	ddf9      	ble.n	8004efe <SPIF_CsPin+0x24>
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8004f22:	2300      	movs	r3, #0
 8004f24:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	4613      	mov	r3, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	f002 fb40 	bl	80075bc <HAL_SPI_TransmitReceive>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8004f42:	2301      	movs	r3, #1
 8004f44:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	f002 f8c8 	bl	8007102 <HAL_SPI_Transmit>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b086      	sub	sp, #24
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8004f94:	2300      	movs	r3, #0
 8004f96:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	f002 f9f1 	bl	800738a <HAL_SPI_Receive>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <SPIF_Receive+0x2c>
  {
    retVal = true;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8004fc8:	2306      	movs	r3, #6
 8004fca:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8004fcc:	2100      	movs	r1, #0
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff ff83 	bl	8004eda <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8004fd4:	f107 010c 	add.w	r1, r7, #12
 8004fd8:	2364      	movs	r3, #100	@ 0x64
 8004fda:	2201      	movs	r2, #1
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff ffb7 	bl	8004f50 <SPIF_Transmit>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f083 0301 	eor.w	r3, r3, #1
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff ff70 	bl	8004eda <SPIF_CsPin>
  return retVal;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8005010:	2304      	movs	r3, #4
 8005012:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8005014:	2100      	movs	r1, #0
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff ff5f 	bl	8004eda <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 800501c:	f107 010c 	add.w	r1, r7, #12
 8005020:	2364      	movs	r3, #100	@ 0x64
 8005022:	2201      	movs	r2, #1
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ff93 	bl	8004f50 <SPIF_Transmit>
 800502a:	4603      	mov	r3, r0
 800502c:	f083 0301 	eor.w	r3, r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 800503a:	2101      	movs	r1, #1
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ff4c 	bl	8004eda <SPIF_CsPin>
  return retVal;
 8005042:	7bfb      	ldrb	r3, [r7, #15]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af02      	add	r7, sp, #8
 8005052:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8005058:	f24a 5305 	movw	r3, #42245	@ 0xa505
 800505c:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 800505e:	2100      	movs	r1, #0
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ff3a 	bl	8004eda <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8005066:	f107 0208 	add.w	r2, r7, #8
 800506a:	f107 010c 	add.w	r1, r7, #12
 800506e:	2364      	movs	r3, #100	@ 0x64
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	2302      	movs	r3, #2
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ff4d 	bl	8004f14 <SPIF_TransmitReceive>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8005080:	7a7b      	ldrb	r3, [r7, #9]
 8005082:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8005084:	2101      	movs	r1, #1
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff ff27 	bl	8004eda <SPIF_CsPin>
  return retVal;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 80050a0:	2300      	movs	r3, #0
 80050a2:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 80050a4:	f000 ff68 	bl	8005f78 <HAL_GetTick>
 80050a8:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 80050aa:	2001      	movs	r0, #1
 80050ac:	f7ff feea 	bl	8004e84 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 80050b0:	f000 ff62 	bl	8005f78 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d90a      	bls.n	80050d6 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ffc3 	bl	800504c <SPIF_ReadReg1>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1ec      	bne.n	80050aa <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      break;
 80050d4:	e000      	b.n	80050d8 <SPIF_WaitForWriting+0x42>
      break;
 80050d6:	bf00      	nop
    }
  }
  return retVal;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 80050ec:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 80050f0:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 80050f6:	2100      	movs	r1, #0
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff feee 	bl	8004eda <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 80050fe:	f107 020c 	add.w	r2, r7, #12
 8005102:	f107 0110 	add.w	r1, r7, #16
 8005106:	2364      	movs	r3, #100	@ 0x64
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	2304      	movs	r3, #4
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ff01 	bl	8004f14 <SPIF_TransmitReceive>
 8005112:	4603      	mov	r3, r0
 8005114:	f083 0301 	eor.w	r3, r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 800511e:	2101      	movs	r1, #1
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff feda 	bl	8004eda <SPIF_CsPin>
      break;
 8005126:	e16f      	b.n	8005408 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8005128:	2101      	movs	r1, #1
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff fed5 	bl	8004eda <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8005130:	7b7a      	ldrb	r2, [r7, #13]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8005136:	7bba      	ldrb	r2, [r7, #14]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 800513c:	7bfa      	ldrb	r2, [r7, #15]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	7a1b      	ldrb	r3, [r3, #8]
 8005146:	2bef      	cmp	r3, #239	@ 0xef
 8005148:	f000 80f0 	beq.w	800532c <SPIF_FindChip+0x248>
 800514c:	2bef      	cmp	r3, #239	@ 0xef
 800514e:	f300 80e9 	bgt.w	8005324 <SPIF_FindChip+0x240>
 8005152:	2bc8      	cmp	r3, #200	@ 0xc8
 8005154:	f300 80e6 	bgt.w	8005324 <SPIF_FindChip+0x240>
 8005158:	2b85      	cmp	r3, #133	@ 0x85
 800515a:	da0c      	bge.n	8005176 <SPIF_FindChip+0x92>
 800515c:	2b62      	cmp	r3, #98	@ 0x62
 800515e:	f000 80e7 	beq.w	8005330 <SPIF_FindChip+0x24c>
 8005162:	2b62      	cmp	r3, #98	@ 0x62
 8005164:	f300 80de 	bgt.w	8005324 <SPIF_FindChip+0x240>
 8005168:	2b20      	cmp	r3, #32
 800516a:	f300 80d9 	bgt.w	8005320 <SPIF_FindChip+0x23c>
 800516e:	2b00      	cmp	r3, #0
 8005170:	f300 8090 	bgt.w	8005294 <SPIF_FindChip+0x1b0>
 8005174:	e0d6      	b.n	8005324 <SPIF_FindChip+0x240>
 8005176:	3b85      	subs	r3, #133	@ 0x85
 8005178:	2b43      	cmp	r3, #67	@ 0x43
 800517a:	f200 80d3 	bhi.w	8005324 <SPIF_FindChip+0x240>
 800517e:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <SPIF_FindChip+0xa0>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005335 	.word	0x08005335
 8005188:	08005325 	.word	0x08005325
 800518c:	08005325 	.word	0x08005325
 8005190:	08005325 	.word	0x08005325
 8005194:	08005335 	.word	0x08005335
 8005198:	08005325 	.word	0x08005325
 800519c:	08005325 	.word	0x08005325
 80051a0:	08005335 	.word	0x08005335
 80051a4:	08005325 	.word	0x08005325
 80051a8:	08005325 	.word	0x08005325
 80051ac:	08005325 	.word	0x08005325
 80051b0:	08005325 	.word	0x08005325
 80051b4:	08005325 	.word	0x08005325
 80051b8:	08005325 	.word	0x08005325
 80051bc:	08005325 	.word	0x08005325
 80051c0:	08005325 	.word	0x08005325
 80051c4:	08005325 	.word	0x08005325
 80051c8:	08005325 	.word	0x08005325
 80051cc:	08005325 	.word	0x08005325
 80051d0:	08005325 	.word	0x08005325
 80051d4:	08005325 	.word	0x08005325
 80051d8:	08005325 	.word	0x08005325
 80051dc:	08005325 	.word	0x08005325
 80051e0:	08005325 	.word	0x08005325
 80051e4:	08005335 	.word	0x08005335
 80051e8:	08005325 	.word	0x08005325
 80051ec:	08005335 	.word	0x08005335
 80051f0:	08005325 	.word	0x08005325
 80051f4:	08005335 	.word	0x08005335
 80051f8:	08005325 	.word	0x08005325
 80051fc:	08005325 	.word	0x08005325
 8005200:	08005325 	.word	0x08005325
 8005204:	08005325 	.word	0x08005325
 8005208:	08005325 	.word	0x08005325
 800520c:	08005325 	.word	0x08005325
 8005210:	08005325 	.word	0x08005325
 8005214:	08005325 	.word	0x08005325
 8005218:	08005325 	.word	0x08005325
 800521c:	08005325 	.word	0x08005325
 8005220:	08005325 	.word	0x08005325
 8005224:	08005335 	.word	0x08005335
 8005228:	08005325 	.word	0x08005325
 800522c:	08005325 	.word	0x08005325
 8005230:	08005325 	.word	0x08005325
 8005234:	08005325 	.word	0x08005325
 8005238:	08005325 	.word	0x08005325
 800523c:	08005325 	.word	0x08005325
 8005240:	08005325 	.word	0x08005325
 8005244:	08005325 	.word	0x08005325
 8005248:	08005325 	.word	0x08005325
 800524c:	08005325 	.word	0x08005325
 8005250:	08005325 	.word	0x08005325
 8005254:	08005325 	.word	0x08005325
 8005258:	08005325 	.word	0x08005325
 800525c:	08005325 	.word	0x08005325
 8005260:	08005325 	.word	0x08005325
 8005264:	08005325 	.word	0x08005325
 8005268:	08005325 	.word	0x08005325
 800526c:	08005335 	.word	0x08005335
 8005270:	08005325 	.word	0x08005325
 8005274:	08005325 	.word	0x08005325
 8005278:	08005335 	.word	0x08005335
 800527c:	08005325 	.word	0x08005325
 8005280:	08005325 	.word	0x08005325
 8005284:	08005325 	.word	0x08005325
 8005288:	08005325 	.word	0x08005325
 800528c:	08005325 	.word	0x08005325
 8005290:	08005335 	.word	0x08005335
 8005294:	3b01      	subs	r3, #1
 8005296:	2b1f      	cmp	r3, #31
 8005298:	d844      	bhi.n	8005324 <SPIF_FindChip+0x240>
 800529a:	a201      	add	r2, pc, #4	@ (adr r2, 80052a0 <SPIF_FindChip+0x1bc>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	08005339 	.word	0x08005339
 80052a4:	08005325 	.word	0x08005325
 80052a8:	08005325 	.word	0x08005325
 80052ac:	08005339 	.word	0x08005339
 80052b0:	08005325 	.word	0x08005325
 80052b4:	08005325 	.word	0x08005325
 80052b8:	08005325 	.word	0x08005325
 80052bc:	08005325 	.word	0x08005325
 80052c0:	08005325 	.word	0x08005325
 80052c4:	08005325 	.word	0x08005325
 80052c8:	08005325 	.word	0x08005325
 80052cc:	08005325 	.word	0x08005325
 80052d0:	08005325 	.word	0x08005325
 80052d4:	08005325 	.word	0x08005325
 80052d8:	08005325 	.word	0x08005325
 80052dc:	08005325 	.word	0x08005325
 80052e0:	08005325 	.word	0x08005325
 80052e4:	08005325 	.word	0x08005325
 80052e8:	08005325 	.word	0x08005325
 80052ec:	08005325 	.word	0x08005325
 80052f0:	08005325 	.word	0x08005325
 80052f4:	08005325 	.word	0x08005325
 80052f8:	08005325 	.word	0x08005325
 80052fc:	08005325 	.word	0x08005325
 8005300:	08005325 	.word	0x08005325
 8005304:	08005325 	.word	0x08005325
 8005308:	08005325 	.word	0x08005325
 800530c:	08005339 	.word	0x08005339
 8005310:	08005325 	.word	0x08005325
 8005314:	08005325 	.word	0x08005325
 8005318:	08005325 	.word	0x08005325
 800531c:	08005339 	.word	0x08005339
 8005320:	2b37      	cmp	r3, #55	@ 0x37
 8005322:	d00b      	beq.n	800533c <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_BOYA:
      dprintf("BOYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 800532a:	e008      	b.n	800533e <SPIF_FindChip+0x25a>
      break;
 800532c:	bf00      	nop
 800532e:	e006      	b.n	800533e <SPIF_FindChip+0x25a>
      break;
 8005330:	bf00      	nop
 8005332:	e004      	b.n	800533e <SPIF_FindChip+0x25a>
      break;
 8005334:	bf00      	nop
 8005336:	e002      	b.n	800533e <SPIF_FindChip+0x25a>
      break;
 8005338:	bf00      	nop
 800533a:	e000      	b.n	800533e <SPIF_FindChip+0x25a>
      break;
 800533c:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	7a5b      	ldrb	r3, [r3, #9]
 8005342:	3b11      	subs	r3, #17
 8005344:	2b0f      	cmp	r3, #15
 8005346:	d84e      	bhi.n	80053e6 <SPIF_FindChip+0x302>
 8005348:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <SPIF_FindChip+0x26c>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005391 	.word	0x08005391
 8005354:	08005399 	.word	0x08005399
 8005358:	080053a1 	.word	0x080053a1
 800535c:	080053a9 	.word	0x080053a9
 8005360:	080053b1 	.word	0x080053b1
 8005364:	080053b9 	.word	0x080053b9
 8005368:	080053c1 	.word	0x080053c1
 800536c:	080053c9 	.word	0x080053c9
 8005370:	080053d3 	.word	0x080053d3
 8005374:	080053e7 	.word	0x080053e7
 8005378:	080053e7 	.word	0x080053e7
 800537c:	080053e7 	.word	0x080053e7
 8005380:	080053e7 	.word	0x080053e7
 8005384:	080053e7 	.word	0x080053e7
 8005388:	080053e7 	.word	0x080053e7
 800538c:	080053dd 	.word	0x080053dd
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8005396:	e02a      	b.n	80053ee <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2204      	movs	r2, #4
 800539c:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 800539e:	e026      	b.n	80053ee <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2208      	movs	r2, #8
 80053a4:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 80053a6:	e022      	b.n	80053ee <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2210      	movs	r2, #16
 80053ac:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80053ae:	e01e      	b.n	80053ee <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 80053b6:	e01a      	b.n	80053ee <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2240      	movs	r2, #64	@ 0x40
 80053bc:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 80053be:	e016      	b.n	80053ee <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2280      	movs	r2, #128	@ 0x80
 80053c4:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80053c6:	e012      	b.n	80053ee <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053ce:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 80053d0:	e00d      	b.n	80053ee <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053d8:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 80053da:	e008      	b.n	80053ee <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053e2:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 80053e4:	e003      	b.n	80053ee <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 80053ec:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	011a      	lsls	r2, r3, #4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	031b      	lsls	r3, r3, #12
 80053fe:	0a1a      	lsrs	r2, r3, #8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8005404:	2301      	movs	r3, #1
 8005406:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8005408:	7dfb      	ldrb	r3, [r7, #23]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop

08005414 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	@ 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005422:	2300      	movs	r3, #0
 8005424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8005428:	2300      	movs	r3, #0
 800542a:	623b      	str	r3, [r7, #32]
 800542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005432:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	f080 8084 	bcs.w	8005548 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	2bff      	cmp	r3, #255	@ 0xff
 8005444:	f200 8082 	bhi.w	800554c <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	429a      	cmp	r2, r3
 800544e:	d901      	bls.n	8005454 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800545a:	4413      	add	r3, r2
 800545c:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f7ff fdac 	bl	8004fbc <SPIF_WriteEnable>
 8005464:	4603      	mov	r3, r0
 8005466:	f083 0301 	eor.w	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d16f      	bne.n	8005550 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8005470:	2100      	movs	r1, #0
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff fd31 	bl	8004eda <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005480:	d322      	bcc.n	80054c8 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 8005482:	2312      	movs	r3, #18
 8005484:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	0e1b      	lsrs	r3, r3, #24
 800548a:	b2db      	uxtb	r3, r3
 800548c:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	b2db      	uxtb	r3, r3
 8005494:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	0a1b      	lsrs	r3, r3, #8
 800549a:	b2db      	uxtb	r3, r3
 800549c:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80054a4:	f107 0114 	add.w	r1, r7, #20
 80054a8:	2364      	movs	r3, #100	@ 0x64
 80054aa:	2205      	movs	r2, #5
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff fd4f 	bl	8004f50 <SPIF_Transmit>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f083 0301 	eor.w	r3, r3, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d023      	beq.n	8005506 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80054be:	2101      	movs	r1, #1
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f7ff fd0a 	bl	8004eda <SPIF_CsPin>
        break;
 80054c6:	e044      	b.n	8005552 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 80054c8:	2302      	movs	r3, #2
 80054ca:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	0c1b      	lsrs	r3, r3, #16
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80054e2:	f107 0114 	add.w	r1, r7, #20
 80054e6:	2364      	movs	r3, #100	@ 0x64
 80054e8:	2204      	movs	r2, #4
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7ff fd30 	bl	8004f50 <SPIF_Transmit>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f083 0301 	eor.w	r3, r3, #1
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80054fc:	2101      	movs	r1, #1
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fceb 	bl	8004eda <SPIF_CsPin>
        break;
 8005504:	e025      	b.n	8005552 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8005506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff fd1e 	bl	8004f50 <SPIF_Transmit>
 8005514:	4603      	mov	r3, r0
 8005516:	f083 0301 	eor.w	r3, r3, #1
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8005520:	2101      	movs	r1, #1
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff fcd9 	bl	8004eda <SPIF_CsPin>
      break;
 8005528:	e013      	b.n	8005552 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 800552a:	2101      	movs	r1, #1
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7ff fcd4 	bl	8004eda <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8005532:	2164      	movs	r1, #100	@ 0x64
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff fdae 	bl	8005096 <SPIF_WaitForWriting>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005546:	e004      	b.n	8005552 <SPIF_WriteFn+0x13e>
      break;
 8005548:	bf00      	nop
 800554a:	e002      	b.n	8005552 <SPIF_WriteFn+0x13e>
      break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <SPIF_WriteFn+0x13e>
      break;
 8005550:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff fd56 	bl	8005004 <SPIF_WriteDisable>
  return retVal;
 8005558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800555c:	4618      	mov	r0, r3
 800555e:	3728      	adds	r7, #40	@ 0x28
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005572:	2300      	movs	r3, #0
 8005574:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8005576:	2100      	movs	r1, #0
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7ff fcae 	bl	8004eda <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005586:	d322      	bcc.n	80055ce <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8005588:	2313      	movs	r3, #19
 800558a:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	0e1b      	lsrs	r3, r3, #24
 8005590:	b2db      	uxtb	r3, r3
 8005592:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	0c1b      	lsrs	r3, r3, #16
 8005598:	b2db      	uxtb	r3, r3
 800559a:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80055aa:	f107 0110 	add.w	r1, r7, #16
 80055ae:	2364      	movs	r3, #100	@ 0x64
 80055b0:	2205      	movs	r2, #5
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff fccc 	bl	8004f50 <SPIF_Transmit>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f083 0301 	eor.w	r3, r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d023      	beq.n	800560c <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80055c4:	2101      	movs	r1, #1
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff fc87 	bl	8004eda <SPIF_CsPin>
        break;
 80055cc:	e036      	b.n	800563c <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 80055ce:	2303      	movs	r3, #3
 80055d0:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	0c1b      	lsrs	r3, r3, #16
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80055e8:	f107 0110 	add.w	r1, r7, #16
 80055ec:	2364      	movs	r3, #100	@ 0x64
 80055ee:	2204      	movs	r2, #4
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7ff fcad 	bl	8004f50 <SPIF_Transmit>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f083 0301 	eor.w	r3, r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d004      	beq.n	800560c <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8005602:	2101      	movs	r1, #1
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff fc68 	bl	8004eda <SPIF_CsPin>
        break;
 800560a:	e017      	b.n	800563c <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 800560c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff fcb6 	bl	8004f86 <SPIF_Receive>
 800561a:	4603      	mov	r3, r0
 800561c:	f083 0301 	eor.w	r3, r3, #1
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d004      	beq.n	8005630 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8005626:	2101      	movs	r1, #1
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff fc56 	bl	8004eda <SPIF_CsPin>
      break;
 800562e:	e005      	b.n	800563c <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8005630:	2101      	movs	r1, #1
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff fc51 	bl	8004eda <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8005638:	2301      	movs	r3, #1
 800563a:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 800563c:	7dfb      	ldrb	r3, [r7, #23]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b086      	sub	sp, #24
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
 8005652:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8005654:	2300      	movs	r3, #0
 8005656:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d03a      	beq.n	80056d4 <SPIF_Init+0x8e>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d037      	beq.n	80056d4 <SPIF_Init+0x8e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d034      	beq.n	80056d4 <SPIF_Init+0x8e>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	7a9b      	ldrb	r3, [r3, #10]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d030      	beq.n	80056d4 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8005672:	2220      	movs	r2, #32
 8005674:	2100      	movs	r1, #0
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f004 fff8 	bl	800a66c <memset>
    Handle->HSpi = HSpi;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8005688:	887a      	ldrh	r2, [r7, #2]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 800568e:	2101      	movs	r1, #1
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f7ff fc22 	bl	8004eda <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8005696:	e002      	b.n	800569e <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8005698:	2001      	movs	r0, #1
 800569a:	f7ff fbf3 	bl	8004e84 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 800569e:	f000 fc6b 	bl	8005f78 <HAL_GetTick>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b13      	cmp	r3, #19
 80056a6:	d9f7      	bls.n	8005698 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fcab 	bl	8005004 <SPIF_WriteDisable>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f083 0301 	eor.w	r3, r3, #1
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff fd12 	bl	80050e4 <SPIF_FindChip>
 80056c0:	4603      	mov	r3, r0
 80056c2:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	729a      	strb	r2, [r3, #10]
 80056d0:	e000      	b.n	80056d4 <SPIF_Init+0x8e>
      break;
 80056d2:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fbd6 	bl	8004e9a <SPIF_Lock>
  bool retVal = false;
 80056ee:	2300      	movs	r3, #0
 80056f0:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	031b      	lsls	r3, r3, #12
 80056f6:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d262      	bcs.n	80057c8 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff fc5a 	bl	8004fbc <SPIF_WriteEnable>
 8005708:	4603      	mov	r3, r0
 800570a:	f083 0301 	eor.w	r3, r3, #1
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d15b      	bne.n	80057cc <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8005714:	2100      	movs	r1, #0
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fbdf 	bl	8004eda <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005724:	d322      	bcc.n	800576c <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8005726:	2321      	movs	r3, #33	@ 0x21
 8005728:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	0e1b      	lsrs	r3, r3, #24
 800572e:	b2db      	uxtb	r3, r3
 8005730:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	b2db      	uxtb	r3, r3
 8005738:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	b2db      	uxtb	r3, r3
 8005740:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8005748:	f107 0108 	add.w	r1, r7, #8
 800574c:	2364      	movs	r3, #100	@ 0x64
 800574e:	2205      	movs	r2, #5
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff fbfd 	bl	8004f50 <SPIF_Transmit>
 8005756:	4603      	mov	r3, r0
 8005758:	f083 0301 	eor.w	r3, r3, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d023      	beq.n	80057aa <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8005762:	2101      	movs	r1, #1
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff fbb8 	bl	8004eda <SPIF_CsPin>
        break;
 800576a:	e030      	b.n	80057ce <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 800576c:	2320      	movs	r3, #32
 800576e:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	b2db      	uxtb	r3, r3
 8005776:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	b2db      	uxtb	r3, r3
 800577e:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8005786:	f107 0108 	add.w	r1, r7, #8
 800578a:	2364      	movs	r3, #100	@ 0x64
 800578c:	2204      	movs	r2, #4
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fbde 	bl	8004f50 <SPIF_Transmit>
 8005794:	4603      	mov	r3, r0
 8005796:	f083 0301 	eor.w	r3, r3, #1
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80057a0:	2101      	movs	r1, #1
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff fb99 	bl	8004eda <SPIF_CsPin>
        break;
 80057a8:	e011      	b.n	80057ce <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 80057aa:	2101      	movs	r1, #1
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff fb94 	bl	8004eda <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 80057b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fc6d 	bl	8005096 <SPIF_WaitForWriting>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 80057c2:	2301      	movs	r3, #1
 80057c4:	75fb      	strb	r3, [r7, #23]
 80057c6:	e002      	b.n	80057ce <SPIF_EraseSector+0xf0>
      break;
 80057c8:	bf00      	nop
 80057ca:	e000      	b.n	80057ce <SPIF_EraseSector+0xf0>
      break;
 80057cc:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fc18 	bl	8005004 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff fb73 	bl	8004ec0 <SPIF_UnLock>
  return retVal;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <SPIF_WriteSector>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WriteSector(SPIF_HandleTypeDef *Handle, uint32_t SectorNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08c      	sub	sp, #48	@ 0x30
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff fb51 	bl	8004e9a <SPIF_Lock>
  bool retVal = true;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  do
  {
    if (Offset >= SPIF_SECTOR_SIZE)
 80057fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005804:	d303      	bcc.n	800580e <SPIF_WriteSector+0x2a>
    {
      retVal = false;
 8005806:	2300      	movs	r3, #0
 8005808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800580c:	e04b      	b.n	80058a6 <SPIF_WriteSector+0xc2>
    }
    if (Size > (SPIF_SECTOR_SIZE - Offset))
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d903      	bls.n	8005822 <SPIF_WriteSector+0x3e>
    {
      Size = SPIF_SECTOR_SIZE - Offset;
 800581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005820:	603b      	str	r3, [r7, #0]
    }
    uint32_t bytesWritten = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	623b      	str	r3, [r7, #32]
    uint32_t pageNumber = SectorNumber * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	61fb      	str	r3, [r7, #28]
    pageNumber += Offset / SPIF_PAGE_SIZE;
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	0a1b      	lsrs	r3, r3, #8
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	61fb      	str	r3, [r7, #28]
    uint32_t remainingBytes = Size;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	61bb      	str	r3, [r7, #24]
    uint32_t pageOffset = Offset % SPIF_PAGE_SIZE;
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	b2db      	uxtb	r3, r3
 800583e:	617b      	str	r3, [r7, #20]
    while (remainingBytes > 0 && pageNumber < ((SectorNumber + 1) * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE)))
 8005840:	e028      	b.n	8005894 <SPIF_WriteSector+0xb0>
    {
      uint32_t bytesToWrite = (remainingBytes > (SPIF_PAGE_SIZE - pageOffset)) ? (SPIF_PAGE_SIZE - pageOffset) : remainingBytes;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4293      	cmp	r3, r2
 800584c:	bf28      	it	cs
 800584e:	4613      	movcs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
      if (SPIF_WriteFn(Handle, pageNumber, Data + bytesWritten, bytesToWrite, pageOffset) == false)
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	441a      	add	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	69f9      	ldr	r1, [r7, #28]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff fdd7 	bl	8005414 <SPIF_WriteFn>
 8005866:	4603      	mov	r3, r0
 8005868:	f083 0301 	eor.w	r3, r3, #1
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <SPIF_WriteSector+0x96>
      {
        retVal = false;
 8005872:	2300      	movs	r3, #0
 8005874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8005878:	e015      	b.n	80058a6 <SPIF_WriteSector+0xc2>
      }
      bytesWritten += bytesToWrite;
 800587a:	6a3a      	ldr	r2, [r7, #32]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	4413      	add	r3, r2
 8005880:	623b      	str	r3, [r7, #32]
      remainingBytes -= bytesToWrite;
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	61bb      	str	r3, [r7, #24]
      pageNumber++;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3301      	adds	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
      pageOffset = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]
    while (remainingBytes > 0 && pageNumber < ((SectorNumber + 1) * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE)))
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <SPIF_WriteSector+0xc2>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3301      	adds	r3, #1
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d3cd      	bcc.n	8005842 <SPIF_WriteSector+0x5e>
    }
  } while (0);
  SPIF_UnLock(Handle);
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff fb0a 	bl	8004ec0 <SPIF_UnLock>
  return retVal;
 80058ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3728      	adds	r7, #40	@ 0x28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <SPIF_ReadSector>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadSector(SPIF_HandleTypeDef *Handle, uint32_t SectorNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f7ff fae7 	bl	8004e9a <SPIF_Lock>
  bool retVal = false;
 80058cc:	2300      	movs	r3, #0
 80058ce:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_SectorToAddress(SectorNumber) + Offset;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	031b      	lsls	r3, r3, #12
 80058d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058d6:	4413      	add	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_SECTOR_SIZE - Offset;
 80058da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058dc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80058e0:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d901      	bls.n	80058ee <SPIF_ReadSector+0x36>
  {
    Size = maximum;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	69b9      	ldr	r1, [r7, #24]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff fe35 	bl	8005564 <SPIF_ReadFn>
 80058fa:	4603      	mov	r3, r0
 80058fc:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f7ff fade 	bl	8004ec0 <SPIF_UnLock>
  return retVal;
 8005904:	7ffb      	ldrb	r3, [r7, #31]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005916:	2300      	movs	r3, #0
 8005918:	607b      	str	r3, [r7, #4]
 800591a:	4b12      	ldr	r3, [pc, #72]	@ (8005964 <HAL_MspInit+0x54>)
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	4a11      	ldr	r2, [pc, #68]	@ (8005964 <HAL_MspInit+0x54>)
 8005920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005924:	6453      	str	r3, [r2, #68]	@ 0x44
 8005926:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <HAL_MspInit+0x54>)
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005932:	2300      	movs	r3, #0
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <HAL_MspInit+0x54>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593a:	4a0a      	ldr	r2, [pc, #40]	@ (8005964 <HAL_MspInit+0x54>)
 800593c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005940:	6413      	str	r3, [r2, #64]	@ 0x40
 8005942:	4b08      	ldr	r3, [pc, #32]	@ (8005964 <HAL_MspInit+0x54>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800594e:	2200      	movs	r2, #0
 8005950:	210f      	movs	r1, #15
 8005952:	f06f 0001 	mvn.w	r0, #1
 8005956:	f000 fbf7 	bl	8006148 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800

08005968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	@ 0x28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005970:	f107 0314 	add.w	r3, r7, #20
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	609a      	str	r2, [r3, #8]
 800597c:	60da      	str	r2, [r3, #12]
 800597e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a19      	ldr	r2, [pc, #100]	@ (80059ec <HAL_SPI_MspInit+0x84>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d12b      	bne.n	80059e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800598a:	2300      	movs	r3, #0
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	4b18      	ldr	r3, [pc, #96]	@ (80059f0 <HAL_SPI_MspInit+0x88>)
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	4a17      	ldr	r2, [pc, #92]	@ (80059f0 <HAL_SPI_MspInit+0x88>)
 8005994:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005998:	6453      	str	r3, [r2, #68]	@ 0x44
 800599a:	4b15      	ldr	r3, [pc, #84]	@ (80059f0 <HAL_SPI_MspInit+0x88>)
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	4b11      	ldr	r3, [pc, #68]	@ (80059f0 <HAL_SPI_MspInit+0x88>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ae:	4a10      	ldr	r2, [pc, #64]	@ (80059f0 <HAL_SPI_MspInit+0x88>)
 80059b0:	f043 0302 	orr.w	r3, r3, #2
 80059b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80059b6:	4b0e      	ldr	r3, [pc, #56]	@ (80059f0 <HAL_SPI_MspInit+0x88>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80059c2:	2338      	movs	r3, #56	@ 0x38
 80059c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c6:	2302      	movs	r3, #2
 80059c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059ce:	2303      	movs	r3, #3
 80059d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059d2:	2305      	movs	r3, #5
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059d6:	f107 0314 	add.w	r3, r7, #20
 80059da:	4619      	mov	r1, r3
 80059dc:	4805      	ldr	r0, [pc, #20]	@ (80059f4 <HAL_SPI_MspInit+0x8c>)
 80059de:	f000 fc6f 	bl	80062c0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80059e2:	bf00      	nop
 80059e4:	3728      	adds	r7, #40	@ 0x28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40013000 	.word	0x40013000
 80059f0:	40023800 	.word	0x40023800
 80059f4:	40020400 	.word	0x40020400

080059f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b092      	sub	sp, #72	@ 0x48
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	605a      	str	r2, [r3, #4]
 8005a0a:	609a      	str	r2, [r3, #8]
 8005a0c:	60da      	str	r2, [r3, #12]
 8005a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a9a      	ldr	r2, [pc, #616]	@ (8005c80 <HAL_UART_MspInit+0x288>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d135      	bne.n	8005a86 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a1e:	4b99      	ldr	r3, [pc, #612]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a22:	4a98      	ldr	r2, [pc, #608]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005a24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a2a:	4b96      	ldr	r3, [pc, #600]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a36:	2300      	movs	r3, #0
 8005a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a3a:	4b92      	ldr	r3, [pc, #584]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3e:	4a91      	ldr	r2, [pc, #580]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005a40:	f043 0304 	orr.w	r3, r3, #4
 8005a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a46:	4b8f      	ldr	r3, [pc, #572]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005a52:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005a56:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a60:	2303      	movs	r3, #3
 8005a62:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005a64:	2308      	movs	r3, #8
 8005a66:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4886      	ldr	r0, [pc, #536]	@ (8005c88 <HAL_UART_MspInit+0x290>)
 8005a70:	f000 fc26 	bl	80062c0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005a74:	2200      	movs	r2, #0
 8005a76:	2105      	movs	r1, #5
 8005a78:	2034      	movs	r0, #52	@ 0x34
 8005a7a:	f000 fb65 	bl	8006148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005a7e:	2034      	movs	r0, #52	@ 0x34
 8005a80:	f000 fb7e 	bl	8006180 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005a84:	e0f7      	b.n	8005c76 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==UART5)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a80      	ldr	r2, [pc, #512]	@ (8005c8c <HAL_UART_MspInit+0x294>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d153      	bne.n	8005b38 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005a90:	2300      	movs	r3, #0
 8005a92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a94:	4b7b      	ldr	r3, [pc, #492]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	4a7a      	ldr	r2, [pc, #488]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aa0:	4b78      	ldr	r3, [pc, #480]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aac:	2300      	movs	r3, #0
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab0:	4b74      	ldr	r3, [pc, #464]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab4:	4a73      	ldr	r2, [pc, #460]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005ab6:	f043 0304 	orr.w	r3, r3, #4
 8005aba:	6313      	str	r3, [r2, #48]	@ 0x30
 8005abc:	4b71      	ldr	r3, [pc, #452]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ac8:	2300      	movs	r3, #0
 8005aca:	623b      	str	r3, [r7, #32]
 8005acc:	4b6d      	ldr	r3, [pc, #436]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad0:	4a6c      	ldr	r2, [pc, #432]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005ad2:	f043 0308 	orr.w	r3, r3, #8
 8005ad6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	623b      	str	r3, [r7, #32]
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ae8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aea:	2302      	movs	r3, #2
 8005aec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005af2:	2303      	movs	r3, #3
 8005af4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005af6:	2308      	movs	r3, #8
 8005af8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005afa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005afe:	4619      	mov	r1, r3
 8005b00:	4861      	ldr	r0, [pc, #388]	@ (8005c88 <HAL_UART_MspInit+0x290>)
 8005b02:	f000 fbdd 	bl	80062c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005b06:	2304      	movs	r3, #4
 8005b08:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b12:	2303      	movs	r3, #3
 8005b14:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005b16:	2308      	movs	r3, #8
 8005b18:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005b1e:	4619      	mov	r1, r3
 8005b20:	485b      	ldr	r0, [pc, #364]	@ (8005c90 <HAL_UART_MspInit+0x298>)
 8005b22:	f000 fbcd 	bl	80062c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8005b26:	2200      	movs	r2, #0
 8005b28:	2105      	movs	r1, #5
 8005b2a:	2035      	movs	r0, #53	@ 0x35
 8005b2c:	f000 fb0c 	bl	8006148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005b30:	2035      	movs	r0, #53	@ 0x35
 8005b32:	f000 fb25 	bl	8006180 <HAL_NVIC_EnableIRQ>
}
 8005b36:	e09e      	b.n	8005c76 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a55      	ldr	r2, [pc, #340]	@ (8005c94 <HAL_UART_MspInit+0x29c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d12d      	bne.n	8005b9e <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b42:	2300      	movs	r3, #0
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	4b4f      	ldr	r3, [pc, #316]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4a:	4a4e      	ldr	r2, [pc, #312]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005b4c:	f043 0310 	orr.w	r3, r3, #16
 8005b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b52:	4b4c      	ldr	r3, [pc, #304]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	4b48      	ldr	r3, [pc, #288]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b66:	4a47      	ldr	r2, [pc, #284]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b6e:	4b45      	ldr	r3, [pc, #276]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005b7a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b80:	2302      	movs	r3, #2
 8005b82:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b8c:	2307      	movs	r3, #7
 8005b8e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005b94:	4619      	mov	r1, r3
 8005b96:	4840      	ldr	r0, [pc, #256]	@ (8005c98 <HAL_UART_MspInit+0x2a0>)
 8005b98:	f000 fb92 	bl	80062c0 <HAL_GPIO_Init>
}
 8005b9c:	e06b      	b.n	8005c76 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART2)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8005c9c <HAL_UART_MspInit+0x2a4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d12c      	bne.n	8005c02 <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	4b35      	ldr	r3, [pc, #212]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb0:	4a34      	ldr	r2, [pc, #208]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bb8:	4b32      	ldr	r3, [pc, #200]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005bce:	f043 0308 	orr.w	r3, r3, #8
 8005bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005be0:	2360      	movs	r3, #96	@ 0x60
 8005be2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be4:	2302      	movs	r3, #2
 8005be6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bec:	2303      	movs	r3, #3
 8005bee:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bf0:	2307      	movs	r3, #7
 8005bf2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bf4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4825      	ldr	r0, [pc, #148]	@ (8005c90 <HAL_UART_MspInit+0x298>)
 8005bfc:	f000 fb60 	bl	80062c0 <HAL_GPIO_Init>
}
 8005c00:	e039      	b.n	8005c76 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART3)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a26      	ldr	r2, [pc, #152]	@ (8005ca0 <HAL_UART_MspInit+0x2a8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d134      	bne.n	8005c76 <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	4b1c      	ldr	r3, [pc, #112]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c14:	4a1b      	ldr	r2, [pc, #108]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005c16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c1c:	4b19      	ldr	r3, [pc, #100]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	4b15      	ldr	r3, [pc, #84]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c30:	4a14      	ldr	r2, [pc, #80]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005c32:	f043 0302 	orr.w	r3, r3, #2
 8005c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c38:	4b12      	ldr	r3, [pc, #72]	@ (8005c84 <HAL_UART_MspInit+0x28c>)
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005c44:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005c48:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c52:	2303      	movs	r3, #3
 8005c54:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005c56:	2307      	movs	r3, #7
 8005c58:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c5a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4810      	ldr	r0, [pc, #64]	@ (8005ca4 <HAL_UART_MspInit+0x2ac>)
 8005c62:	f000 fb2d 	bl	80062c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005c66:	2200      	movs	r2, #0
 8005c68:	2105      	movs	r1, #5
 8005c6a:	2027      	movs	r0, #39	@ 0x27
 8005c6c:	f000 fa6c 	bl	8006148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005c70:	2027      	movs	r0, #39	@ 0x27
 8005c72:	f000 fa85 	bl	8006180 <HAL_NVIC_EnableIRQ>
}
 8005c76:	bf00      	nop
 8005c78:	3748      	adds	r7, #72	@ 0x48
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40004c00 	.word	0x40004c00
 8005c84:	40023800 	.word	0x40023800
 8005c88:	40020800 	.word	0x40020800
 8005c8c:	40005000 	.word	0x40005000
 8005c90:	40020c00 	.word	0x40020c00
 8005c94:	40011000 	.word	0x40011000
 8005c98:	40020000 	.word	0x40020000
 8005c9c:	40004400 	.word	0x40004400
 8005ca0:	40004800 	.word	0x40004800
 8005ca4:	40020400 	.word	0x40020400

08005ca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08e      	sub	sp, #56	@ 0x38
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	4b33      	ldr	r3, [pc, #204]	@ (8005d8c <HAL_InitTick+0xe4>)
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc0:	4a32      	ldr	r2, [pc, #200]	@ (8005d8c <HAL_InitTick+0xe4>)
 8005cc2:	f043 0310 	orr.w	r3, r3, #16
 8005cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cc8:	4b30      	ldr	r3, [pc, #192]	@ (8005d8c <HAL_InitTick+0xe4>)
 8005cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cd4:	f107 0210 	add.w	r2, r7, #16
 8005cd8:	f107 0314 	add.w	r3, r7, #20
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 f954 	bl	8006f8c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005cee:	f001 f925 	bl	8006f3c <HAL_RCC_GetPCLK1Freq>
 8005cf2:	6378      	str	r0, [r7, #52]	@ 0x34
 8005cf4:	e004      	b.n	8005d00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005cf6:	f001 f921 	bl	8006f3c <HAL_RCC_GetPCLK1Freq>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d02:	4a23      	ldr	r2, [pc, #140]	@ (8005d90 <HAL_InitTick+0xe8>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	0c9b      	lsrs	r3, r3, #18
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005d0e:	4b21      	ldr	r3, [pc, #132]	@ (8005d94 <HAL_InitTick+0xec>)
 8005d10:	4a21      	ldr	r2, [pc, #132]	@ (8005d98 <HAL_InitTick+0xf0>)
 8005d12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005d14:	4b1f      	ldr	r3, [pc, #124]	@ (8005d94 <HAL_InitTick+0xec>)
 8005d16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d94 <HAL_InitTick+0xec>)
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005d22:	4b1c      	ldr	r3, [pc, #112]	@ (8005d94 <HAL_InitTick+0xec>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d28:	4b1a      	ldr	r3, [pc, #104]	@ (8005d94 <HAL_InitTick+0xec>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d2e:	4b19      	ldr	r3, [pc, #100]	@ (8005d94 <HAL_InitTick+0xec>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005d34:	4817      	ldr	r0, [pc, #92]	@ (8005d94 <HAL_InitTick+0xec>)
 8005d36:	f001 ff2d 	bl	8007b94 <HAL_TIM_Base_Init>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005d40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d11b      	bne.n	8005d80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005d48:	4812      	ldr	r0, [pc, #72]	@ (8005d94 <HAL_InitTick+0xec>)
 8005d4a:	f001 ff7d 	bl	8007c48 <HAL_TIM_Base_Start_IT>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005d54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d111      	bne.n	8005d80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005d5c:	2036      	movs	r0, #54	@ 0x36
 8005d5e:	f000 fa0f 	bl	8006180 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b0f      	cmp	r3, #15
 8005d66:	d808      	bhi.n	8005d7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005d68:	2200      	movs	r2, #0
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	2036      	movs	r0, #54	@ 0x36
 8005d6e:	f000 f9eb 	bl	8006148 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d72:	4a0a      	ldr	r2, [pc, #40]	@ (8005d9c <HAL_InitTick+0xf4>)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	e002      	b.n	8005d80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005d80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3738      	adds	r7, #56	@ 0x38
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	431bde83 	.word	0x431bde83
 8005d94:	20000620 	.word	0x20000620
 8005d98:	40001000 	.word	0x40001000
 8005d9c:	2000001c 	.word	0x2000001c

08005da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005da4:	bf00      	nop
 8005da6:	e7fd      	b.n	8005da4 <NMI_Handler+0x4>

08005da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dac:	bf00      	nop
 8005dae:	e7fd      	b.n	8005dac <HardFault_Handler+0x4>

08005db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <MemManage_Handler+0x4>

08005db8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <BusFault_Handler+0x4>

08005dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <UsageFault_Handler+0x4>

08005dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
	...

08005dd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005ddc:	4802      	ldr	r0, [pc, #8]	@ (8005de8 <USART3_IRQHandler+0x10>)
 8005dde:	f002 fae5 	bl	80083ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005de2:	bf00      	nop
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200004ac 	.word	0x200004ac

08005dec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005df0:	4802      	ldr	r0, [pc, #8]	@ (8005dfc <UART4_IRQHandler+0x10>)
 8005df2:	f002 fadb 	bl	80083ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005df6:	bf00      	nop
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	2000038c 	.word	0x2000038c

08005e00 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005e04:	4802      	ldr	r0, [pc, #8]	@ (8005e10 <UART5_IRQHandler+0x10>)
 8005e06:	f002 fad1 	bl	80083ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	200003d4 	.word	0x200003d4

08005e14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005e18:	4802      	ldr	r0, [pc, #8]	@ (8005e24 <TIM6_DAC_IRQHandler+0x10>)
 8005e1a:	f001 ff85 	bl	8007d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000620 	.word	0x20000620

08005e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e30:	4a14      	ldr	r2, [pc, #80]	@ (8005e84 <_sbrk+0x5c>)
 8005e32:	4b15      	ldr	r3, [pc, #84]	@ (8005e88 <_sbrk+0x60>)
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e3c:	4b13      	ldr	r3, [pc, #76]	@ (8005e8c <_sbrk+0x64>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e44:	4b11      	ldr	r3, [pc, #68]	@ (8005e8c <_sbrk+0x64>)
 8005e46:	4a12      	ldr	r2, [pc, #72]	@ (8005e90 <_sbrk+0x68>)
 8005e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e4a:	4b10      	ldr	r3, [pc, #64]	@ (8005e8c <_sbrk+0x64>)
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4413      	add	r3, r2
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d207      	bcs.n	8005e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e58:	f004 fc66 	bl	800a728 <__errno>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	220c      	movs	r2, #12
 8005e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e62:	f04f 33ff 	mov.w	r3, #4294967295
 8005e66:	e009      	b.n	8005e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e68:	4b08      	ldr	r3, [pc, #32]	@ (8005e8c <_sbrk+0x64>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e6e:	4b07      	ldr	r3, [pc, #28]	@ (8005e8c <_sbrk+0x64>)
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	4a05      	ldr	r2, [pc, #20]	@ (8005e8c <_sbrk+0x64>)
 8005e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20020000 	.word	0x20020000
 8005e88:	00000400 	.word	0x00000400
 8005e8c:	20000668 	.word	0x20000668
 8005e90:	20004510 	.word	0x20004510

08005e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e98:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <SystemInit+0x20>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9e:	4a05      	ldr	r2, [pc, #20]	@ (8005eb4 <SystemInit+0x20>)
 8005ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ea8:	bf00      	nop
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005eb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005ef0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005ebc:	f7ff ffea 	bl	8005e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ec0:	480c      	ldr	r0, [pc, #48]	@ (8005ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005ec2:	490d      	ldr	r1, [pc, #52]	@ (8005ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8005efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ec8:	e002      	b.n	8005ed0 <LoopCopyDataInit>

08005eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ece:	3304      	adds	r3, #4

08005ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ed4:	d3f9      	bcc.n	8005eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8005f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8005f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005edc:	e001      	b.n	8005ee2 <LoopFillZerobss>

08005ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ee0:	3204      	adds	r2, #4

08005ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ee4:	d3fb      	bcc.n	8005ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ee6:	f004 fc25 	bl	800a734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005eea:	f7fb fe5d 	bl	8001ba8 <main>
  bx  lr    
 8005eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ef8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8005efc:	0800ba54 	.word	0x0800ba54
  ldr r2, =_sbss
 8005f00:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005f04:	2000450c 	.word	0x2000450c

08005f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f08:	e7fe      	b.n	8005f08 <ADC_IRQHandler>
	...

08005f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f10:	4b0e      	ldr	r3, [pc, #56]	@ (8005f4c <HAL_Init+0x40>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a0d      	ldr	r2, [pc, #52]	@ (8005f4c <HAL_Init+0x40>)
 8005f16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f4c <HAL_Init+0x40>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	@ (8005f4c <HAL_Init+0x40>)
 8005f22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f28:	4b08      	ldr	r3, [pc, #32]	@ (8005f4c <HAL_Init+0x40>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a07      	ldr	r2, [pc, #28]	@ (8005f4c <HAL_Init+0x40>)
 8005f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f34:	2003      	movs	r0, #3
 8005f36:	f000 f8fc 	bl	8006132 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f3a:	200f      	movs	r0, #15
 8005f3c:	f7ff feb4 	bl	8005ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f40:	f7ff fce6 	bl	8005910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40023c00 	.word	0x40023c00

08005f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f54:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <HAL_IncTick+0x20>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4b06      	ldr	r3, [pc, #24]	@ (8005f74 <HAL_IncTick+0x24>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4413      	add	r3, r2
 8005f60:	4a04      	ldr	r2, [pc, #16]	@ (8005f74 <HAL_IncTick+0x24>)
 8005f62:	6013      	str	r3, [r2, #0]
}
 8005f64:	bf00      	nop
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20000020 	.word	0x20000020
 8005f74:	2000066c 	.word	0x2000066c

08005f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f7c:	4b03      	ldr	r3, [pc, #12]	@ (8005f8c <HAL_GetTick+0x14>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	2000066c 	.word	0x2000066c

08005f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f98:	f7ff ffee 	bl	8005f78 <HAL_GetTick>
 8005f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa8:	d005      	beq.n	8005fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005faa:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd4 <HAL_Delay+0x44>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005fb6:	bf00      	nop
 8005fb8:	f7ff ffde 	bl	8005f78 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d8f7      	bhi.n	8005fb8 <HAL_Delay+0x28>
  {
  }
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000020 	.word	0x20000020

08005fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <__NVIC_SetPriorityGrouping+0x44>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800600a:	4a04      	ldr	r2, [pc, #16]	@ (800601c <__NVIC_SetPriorityGrouping+0x44>)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	60d3      	str	r3, [r2, #12]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	e000ed00 	.word	0xe000ed00

08006020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006024:	4b04      	ldr	r3, [pc, #16]	@ (8006038 <__NVIC_GetPriorityGrouping+0x18>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	0a1b      	lsrs	r3, r3, #8
 800602a:	f003 0307 	and.w	r3, r3, #7
}
 800602e:	4618      	mov	r0, r3
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	e000ed00 	.word	0xe000ed00

0800603c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604a:	2b00      	cmp	r3, #0
 800604c:	db0b      	blt.n	8006066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	f003 021f 	and.w	r2, r3, #31
 8006054:	4907      	ldr	r1, [pc, #28]	@ (8006074 <__NVIC_EnableIRQ+0x38>)
 8006056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	2001      	movs	r0, #1
 800605e:	fa00 f202 	lsl.w	r2, r0, r2
 8006062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	e000e100 	.word	0xe000e100

08006078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	6039      	str	r1, [r7, #0]
 8006082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006088:	2b00      	cmp	r3, #0
 800608a:	db0a      	blt.n	80060a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	490c      	ldr	r1, [pc, #48]	@ (80060c4 <__NVIC_SetPriority+0x4c>)
 8006092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006096:	0112      	lsls	r2, r2, #4
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	440b      	add	r3, r1
 800609c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060a0:	e00a      	b.n	80060b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	4908      	ldr	r1, [pc, #32]	@ (80060c8 <__NVIC_SetPriority+0x50>)
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	3b04      	subs	r3, #4
 80060b0:	0112      	lsls	r2, r2, #4
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	440b      	add	r3, r1
 80060b6:	761a      	strb	r2, [r3, #24]
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	e000e100 	.word	0xe000e100
 80060c8:	e000ed00 	.word	0xe000ed00

080060cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b089      	sub	sp, #36	@ 0x24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f1c3 0307 	rsb	r3, r3, #7
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	bf28      	it	cs
 80060ea:	2304      	movcs	r3, #4
 80060ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3304      	adds	r3, #4
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d902      	bls.n	80060fc <NVIC_EncodePriority+0x30>
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	3b03      	subs	r3, #3
 80060fa:	e000      	b.n	80060fe <NVIC_EncodePriority+0x32>
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006100:	f04f 32ff 	mov.w	r2, #4294967295
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43da      	mvns	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	401a      	ands	r2, r3
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006114:	f04f 31ff 	mov.w	r1, #4294967295
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	fa01 f303 	lsl.w	r3, r1, r3
 800611e:	43d9      	mvns	r1, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006124:	4313      	orrs	r3, r2
         );
}
 8006126:	4618      	mov	r0, r3
 8006128:	3724      	adds	r7, #36	@ 0x24
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff ff4c 	bl	8005fd8 <__NVIC_SetPriorityGrouping>
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800615a:	f7ff ff61 	bl	8006020 <__NVIC_GetPriorityGrouping>
 800615e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	6978      	ldr	r0, [r7, #20]
 8006166:	f7ff ffb1 	bl	80060cc <NVIC_EncodePriority>
 800616a:	4602      	mov	r2, r0
 800616c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006170:	4611      	mov	r1, r2
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff ff80 	bl	8006078 <__NVIC_SetPriority>
}
 8006178:	bf00      	nop
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800618a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff ff54 	bl	800603c <__NVIC_EnableIRQ>
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80061aa:	f7ff fee5 	bl	8005f78 <HAL_GetTick>
 80061ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d008      	beq.n	80061ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2280      	movs	r2, #128	@ 0x80
 80061c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e052      	b.n	8006274 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0216 	bic.w	r2, r2, #22
 80061dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <HAL_DMA_Abort+0x62>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0208 	bic.w	r2, r2, #8
 800620c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800621e:	e013      	b.n	8006248 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006220:	f7ff feaa 	bl	8005f78 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b05      	cmp	r3, #5
 800622c:	d90c      	bls.n	8006248 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2220      	movs	r2, #32
 8006232:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2203      	movs	r2, #3
 8006238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e015      	b.n	8006274 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e4      	bne.n	8006220 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800625a:	223f      	movs	r2, #63	@ 0x3f
 800625c:	409a      	lsls	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d004      	beq.n	800629a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2280      	movs	r2, #128	@ 0x80
 8006294:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e00c      	b.n	80062b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2205      	movs	r2, #5
 800629e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b089      	sub	sp, #36	@ 0x24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	e16b      	b.n	80065b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062dc:	2201      	movs	r2, #1
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4013      	ands	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	f040 815a 	bne.w	80065ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b01      	cmp	r3, #1
 8006304:	d005      	beq.n	8006312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800630e:	2b02      	cmp	r3, #2
 8006310:	d130      	bne.n	8006374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	2203      	movs	r2, #3
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	43db      	mvns	r3, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4013      	ands	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4313      	orrs	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006348:	2201      	movs	r2, #1
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4013      	ands	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	091b      	lsrs	r3, r3, #4
 800635e:	f003 0201 	and.w	r2, r3, #1
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	4313      	orrs	r3, r2
 800636c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	2b03      	cmp	r3, #3
 800637e:	d017      	beq.n	80063b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	2203      	movs	r2, #3
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	43db      	mvns	r3, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4013      	ands	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d123      	bne.n	8006404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	08da      	lsrs	r2, r3, #3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3208      	adds	r2, #8
 80063c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	220f      	movs	r2, #15
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	43db      	mvns	r3, r3
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	4013      	ands	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	08da      	lsrs	r2, r3, #3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3208      	adds	r2, #8
 80063fe:	69b9      	ldr	r1, [r7, #24]
 8006400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	2203      	movs	r2, #3
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	43db      	mvns	r3, r3
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	4013      	ands	r3, r2
 800641a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f003 0203 	and.w	r2, r3, #3
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	4313      	orrs	r3, r2
 8006430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80b4 	beq.w	80065ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	4b60      	ldr	r3, [pc, #384]	@ (80065cc <HAL_GPIO_Init+0x30c>)
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	4a5f      	ldr	r2, [pc, #380]	@ (80065cc <HAL_GPIO_Init+0x30c>)
 8006450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006454:	6453      	str	r3, [r2, #68]	@ 0x44
 8006456:	4b5d      	ldr	r3, [pc, #372]	@ (80065cc <HAL_GPIO_Init+0x30c>)
 8006458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006462:	4a5b      	ldr	r2, [pc, #364]	@ (80065d0 <HAL_GPIO_Init+0x310>)
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	089b      	lsrs	r3, r3, #2
 8006468:	3302      	adds	r3, #2
 800646a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800646e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	220f      	movs	r2, #15
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	43db      	mvns	r3, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4013      	ands	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a52      	ldr	r2, [pc, #328]	@ (80065d4 <HAL_GPIO_Init+0x314>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d02b      	beq.n	80064e6 <HAL_GPIO_Init+0x226>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a51      	ldr	r2, [pc, #324]	@ (80065d8 <HAL_GPIO_Init+0x318>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d025      	beq.n	80064e2 <HAL_GPIO_Init+0x222>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a50      	ldr	r2, [pc, #320]	@ (80065dc <HAL_GPIO_Init+0x31c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d01f      	beq.n	80064de <HAL_GPIO_Init+0x21e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a4f      	ldr	r2, [pc, #316]	@ (80065e0 <HAL_GPIO_Init+0x320>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d019      	beq.n	80064da <HAL_GPIO_Init+0x21a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a4e      	ldr	r2, [pc, #312]	@ (80065e4 <HAL_GPIO_Init+0x324>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d013      	beq.n	80064d6 <HAL_GPIO_Init+0x216>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a4d      	ldr	r2, [pc, #308]	@ (80065e8 <HAL_GPIO_Init+0x328>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00d      	beq.n	80064d2 <HAL_GPIO_Init+0x212>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a4c      	ldr	r2, [pc, #304]	@ (80065ec <HAL_GPIO_Init+0x32c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d007      	beq.n	80064ce <HAL_GPIO_Init+0x20e>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a4b      	ldr	r2, [pc, #300]	@ (80065f0 <HAL_GPIO_Init+0x330>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d101      	bne.n	80064ca <HAL_GPIO_Init+0x20a>
 80064c6:	2307      	movs	r3, #7
 80064c8:	e00e      	b.n	80064e8 <HAL_GPIO_Init+0x228>
 80064ca:	2308      	movs	r3, #8
 80064cc:	e00c      	b.n	80064e8 <HAL_GPIO_Init+0x228>
 80064ce:	2306      	movs	r3, #6
 80064d0:	e00a      	b.n	80064e8 <HAL_GPIO_Init+0x228>
 80064d2:	2305      	movs	r3, #5
 80064d4:	e008      	b.n	80064e8 <HAL_GPIO_Init+0x228>
 80064d6:	2304      	movs	r3, #4
 80064d8:	e006      	b.n	80064e8 <HAL_GPIO_Init+0x228>
 80064da:	2303      	movs	r3, #3
 80064dc:	e004      	b.n	80064e8 <HAL_GPIO_Init+0x228>
 80064de:	2302      	movs	r3, #2
 80064e0:	e002      	b.n	80064e8 <HAL_GPIO_Init+0x228>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <HAL_GPIO_Init+0x228>
 80064e6:	2300      	movs	r3, #0
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	f002 0203 	and.w	r2, r2, #3
 80064ee:	0092      	lsls	r2, r2, #2
 80064f0:	4093      	lsls	r3, r2
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064f8:	4935      	ldr	r1, [pc, #212]	@ (80065d0 <HAL_GPIO_Init+0x310>)
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	089b      	lsrs	r3, r3, #2
 80064fe:	3302      	adds	r3, #2
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006506:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <HAL_GPIO_Init+0x334>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	43db      	mvns	r3, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4013      	ands	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800652a:	4a32      	ldr	r2, [pc, #200]	@ (80065f4 <HAL_GPIO_Init+0x334>)
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006530:	4b30      	ldr	r3, [pc, #192]	@ (80065f4 <HAL_GPIO_Init+0x334>)
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	43db      	mvns	r3, r3
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	4013      	ands	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4313      	orrs	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006554:	4a27      	ldr	r2, [pc, #156]	@ (80065f4 <HAL_GPIO_Init+0x334>)
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800655a:	4b26      	ldr	r3, [pc, #152]	@ (80065f4 <HAL_GPIO_Init+0x334>)
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	43db      	mvns	r3, r3
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	4013      	ands	r3, r2
 8006568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800657e:	4a1d      	ldr	r2, [pc, #116]	@ (80065f4 <HAL_GPIO_Init+0x334>)
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006584:	4b1b      	ldr	r3, [pc, #108]	@ (80065f4 <HAL_GPIO_Init+0x334>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	43db      	mvns	r3, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4013      	ands	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065a8:	4a12      	ldr	r2, [pc, #72]	@ (80065f4 <HAL_GPIO_Init+0x334>)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	3301      	adds	r3, #1
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	f67f ae90 	bls.w	80062dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065bc:	bf00      	nop
 80065be:	bf00      	nop
 80065c0:	3724      	adds	r7, #36	@ 0x24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40023800 	.word	0x40023800
 80065d0:	40013800 	.word	0x40013800
 80065d4:	40020000 	.word	0x40020000
 80065d8:	40020400 	.word	0x40020400
 80065dc:	40020800 	.word	0x40020800
 80065e0:	40020c00 	.word	0x40020c00
 80065e4:	40021000 	.word	0x40021000
 80065e8:	40021400 	.word	0x40021400
 80065ec:	40021800 	.word	0x40021800
 80065f0:	40021c00 	.word	0x40021c00
 80065f4:	40013c00 	.word	0x40013c00

080065f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	887b      	ldrh	r3, [r7, #2]
 800660a:	4013      	ands	r3, r2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006610:	2301      	movs	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
 8006614:	e001      	b.n	800661a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006616:	2300      	movs	r3, #0
 8006618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	807b      	strh	r3, [r7, #2]
 8006634:	4613      	mov	r3, r2
 8006636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006638:	787b      	ldrb	r3, [r7, #1]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800663e:	887a      	ldrh	r2, [r7, #2]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006644:	e003      	b.n	800664e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006646:	887b      	ldrh	r3, [r7, #2]
 8006648:	041a      	lsls	r2, r3, #16
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	619a      	str	r2, [r3, #24]
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e267      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d075      	beq.n	8006766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800667a:	4b88      	ldr	r3, [pc, #544]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	2b04      	cmp	r3, #4
 8006684:	d00c      	beq.n	80066a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006686:	4b85      	ldr	r3, [pc, #532]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800668e:	2b08      	cmp	r3, #8
 8006690:	d112      	bne.n	80066b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006692:	4b82      	ldr	r3, [pc, #520]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800669a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800669e:	d10b      	bne.n	80066b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a0:	4b7e      	ldr	r3, [pc, #504]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d05b      	beq.n	8006764 <HAL_RCC_OscConfig+0x108>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d157      	bne.n	8006764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e242      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c0:	d106      	bne.n	80066d0 <HAL_RCC_OscConfig+0x74>
 80066c2:	4b76      	ldr	r3, [pc, #472]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a75      	ldr	r2, [pc, #468]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80066c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	e01d      	b.n	800670c <HAL_RCC_OscConfig+0xb0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066d8:	d10c      	bne.n	80066f4 <HAL_RCC_OscConfig+0x98>
 80066da:	4b70      	ldr	r3, [pc, #448]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a6f      	ldr	r2, [pc, #444]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80066e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	4b6d      	ldr	r3, [pc, #436]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a6c      	ldr	r2, [pc, #432]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80066ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e00b      	b.n	800670c <HAL_RCC_OscConfig+0xb0>
 80066f4:	4b69      	ldr	r3, [pc, #420]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a68      	ldr	r2, [pc, #416]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80066fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	4b66      	ldr	r3, [pc, #408]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a65      	ldr	r2, [pc, #404]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800670a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d013      	beq.n	800673c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006714:	f7ff fc30 	bl	8005f78 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800671c:	f7ff fc2c 	bl	8005f78 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	@ 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e207      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672e:	4b5b      	ldr	r3, [pc, #364]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCC_OscConfig+0xc0>
 800673a:	e014      	b.n	8006766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673c:	f7ff fc1c 	bl	8005f78 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006744:	f7ff fc18 	bl	8005f78 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b64      	cmp	r3, #100	@ 0x64
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e1f3      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006756:	4b51      	ldr	r3, [pc, #324]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0xe8>
 8006762:	e000      	b.n	8006766 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d063      	beq.n	800683a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006772:	4b4a      	ldr	r3, [pc, #296]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800677e:	4b47      	ldr	r3, [pc, #284]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006786:	2b08      	cmp	r3, #8
 8006788:	d11c      	bne.n	80067c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678a:	4b44      	ldr	r3, [pc, #272]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d116      	bne.n	80067c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006796:	4b41      	ldr	r3, [pc, #260]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_RCC_OscConfig+0x152>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d001      	beq.n	80067ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e1c7      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ae:	4b3b      	ldr	r3, [pc, #236]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4937      	ldr	r1, [pc, #220]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067c2:	e03a      	b.n	800683a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d020      	beq.n	800680e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067cc:	4b34      	ldr	r3, [pc, #208]	@ (80068a0 <HAL_RCC_OscConfig+0x244>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d2:	f7ff fbd1 	bl	8005f78 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d8:	e008      	b.n	80067ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067da:	f7ff fbcd 	bl	8005f78 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e1a8      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ec:	4b2b      	ldr	r3, [pc, #172]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f8:	4b28      	ldr	r3, [pc, #160]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4925      	ldr	r1, [pc, #148]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006808:	4313      	orrs	r3, r2
 800680a:	600b      	str	r3, [r1, #0]
 800680c:	e015      	b.n	800683a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800680e:	4b24      	ldr	r3, [pc, #144]	@ (80068a0 <HAL_RCC_OscConfig+0x244>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006814:	f7ff fbb0 	bl	8005f78 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800681c:	f7ff fbac 	bl	8005f78 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e187      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682e:	4b1b      	ldr	r3, [pc, #108]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d036      	beq.n	80068b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d016      	beq.n	800687c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684e:	4b15      	ldr	r3, [pc, #84]	@ (80068a4 <HAL_RCC_OscConfig+0x248>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006854:	f7ff fb90 	bl	8005f78 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800685c:	f7ff fb8c 	bl	8005f78 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e167      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <HAL_RCC_OscConfig+0x240>)
 8006870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <HAL_RCC_OscConfig+0x200>
 800687a:	e01b      	b.n	80068b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800687c:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <HAL_RCC_OscConfig+0x248>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006882:	f7ff fb79 	bl	8005f78 <HAL_GetTick>
 8006886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006888:	e00e      	b.n	80068a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800688a:	f7ff fb75 	bl	8005f78 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d907      	bls.n	80068a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e150      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
 800689c:	40023800 	.word	0x40023800
 80068a0:	42470000 	.word	0x42470000
 80068a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068a8:	4b88      	ldr	r3, [pc, #544]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 80068aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1ea      	bne.n	800688a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8097 	beq.w	80069f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c6:	4b81      	ldr	r3, [pc, #516]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10f      	bne.n	80068f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	60bb      	str	r3, [r7, #8]
 80068d6:	4b7d      	ldr	r3, [pc, #500]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	4a7c      	ldr	r2, [pc, #496]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 80068dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80068e2:	4b7a      	ldr	r3, [pc, #488]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ea:	60bb      	str	r3, [r7, #8]
 80068ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ee:	2301      	movs	r3, #1
 80068f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f2:	4b77      	ldr	r3, [pc, #476]	@ (8006ad0 <HAL_RCC_OscConfig+0x474>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d118      	bne.n	8006930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068fe:	4b74      	ldr	r3, [pc, #464]	@ (8006ad0 <HAL_RCC_OscConfig+0x474>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a73      	ldr	r2, [pc, #460]	@ (8006ad0 <HAL_RCC_OscConfig+0x474>)
 8006904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800690a:	f7ff fb35 	bl	8005f78 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006910:	e008      	b.n	8006924 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006912:	f7ff fb31 	bl	8005f78 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e10c      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006924:	4b6a      	ldr	r3, [pc, #424]	@ (8006ad0 <HAL_RCC_OscConfig+0x474>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0f0      	beq.n	8006912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d106      	bne.n	8006946 <HAL_RCC_OscConfig+0x2ea>
 8006938:	4b64      	ldr	r3, [pc, #400]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693c:	4a63      	ldr	r2, [pc, #396]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6713      	str	r3, [r2, #112]	@ 0x70
 8006944:	e01c      	b.n	8006980 <HAL_RCC_OscConfig+0x324>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b05      	cmp	r3, #5
 800694c:	d10c      	bne.n	8006968 <HAL_RCC_OscConfig+0x30c>
 800694e:	4b5f      	ldr	r3, [pc, #380]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006952:	4a5e      	ldr	r2, [pc, #376]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 8006954:	f043 0304 	orr.w	r3, r3, #4
 8006958:	6713      	str	r3, [r2, #112]	@ 0x70
 800695a:	4b5c      	ldr	r3, [pc, #368]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695e:	4a5b      	ldr	r2, [pc, #364]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	6713      	str	r3, [r2, #112]	@ 0x70
 8006966:	e00b      	b.n	8006980 <HAL_RCC_OscConfig+0x324>
 8006968:	4b58      	ldr	r3, [pc, #352]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696c:	4a57      	ldr	r2, [pc, #348]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	6713      	str	r3, [r2, #112]	@ 0x70
 8006974:	4b55      	ldr	r3, [pc, #340]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006978:	4a54      	ldr	r2, [pc, #336]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 800697a:	f023 0304 	bic.w	r3, r3, #4
 800697e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d015      	beq.n	80069b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006988:	f7ff faf6 	bl	8005f78 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800698e:	e00a      	b.n	80069a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006990:	f7ff faf2 	bl	8005f78 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e0cb      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a6:	4b49      	ldr	r3, [pc, #292]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0ee      	beq.n	8006990 <HAL_RCC_OscConfig+0x334>
 80069b2:	e014      	b.n	80069de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069b4:	f7ff fae0 	bl	8005f78 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ba:	e00a      	b.n	80069d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069bc:	f7ff fadc 	bl	8005f78 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e0b5      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d2:	4b3e      	ldr	r3, [pc, #248]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1ee      	bne.n	80069bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d105      	bne.n	80069f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e4:	4b39      	ldr	r3, [pc, #228]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 80069e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e8:	4a38      	ldr	r2, [pc, #224]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 80069ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80a1 	beq.w	8006b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069fa:	4b34      	ldr	r3, [pc, #208]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d05c      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d141      	bne.n	8006a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0e:	4b31      	ldr	r3, [pc, #196]	@ (8006ad4 <HAL_RCC_OscConfig+0x478>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a14:	f7ff fab0 	bl	8005f78 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a1c:	f7ff faac 	bl	8005f78 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e087      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2e:	4b27      	ldr	r3, [pc, #156]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f0      	bne.n	8006a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69da      	ldr	r2, [r3, #28]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	019b      	lsls	r3, r3, #6
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a50:	085b      	lsrs	r3, r3, #1
 8006a52:	3b01      	subs	r3, #1
 8006a54:	041b      	lsls	r3, r3, #16
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	061b      	lsls	r3, r3, #24
 8006a5e:	491b      	ldr	r1, [pc, #108]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a64:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad4 <HAL_RCC_OscConfig+0x478>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6a:	f7ff fa85 	bl	8005f78 <HAL_GetTick>
 8006a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a72:	f7ff fa81 	bl	8005f78 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e05c      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a84:	4b11      	ldr	r3, [pc, #68]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0f0      	beq.n	8006a72 <HAL_RCC_OscConfig+0x416>
 8006a90:	e054      	b.n	8006b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a92:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <HAL_RCC_OscConfig+0x478>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a98:	f7ff fa6e 	bl	8005f78 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa0:	f7ff fa6a 	bl	8005f78 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e045      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab2:	4b06      	ldr	r3, [pc, #24]	@ (8006acc <HAL_RCC_OscConfig+0x470>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x444>
 8006abe:	e03d      	b.n	8006b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e038      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	40007000 	.word	0x40007000
 8006ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b48 <HAL_RCC_OscConfig+0x4ec>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d028      	beq.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d121      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d11a      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b08:	4013      	ands	r3, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d111      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	3b01      	subs	r3, #1
 8006b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d107      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40023800 	.word	0x40023800

08006b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0cc      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b60:	4b68      	ldr	r3, [pc, #416]	@ (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d90c      	bls.n	8006b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6e:	4b65      	ldr	r3, [pc, #404]	@ (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b76:	4b63      	ldr	r3, [pc, #396]	@ (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d001      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e0b8      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d020      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ba0:	4b59      	ldr	r3, [pc, #356]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	4a58      	ldr	r2, [pc, #352]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006baa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bb8:	4b53      	ldr	r3, [pc, #332]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4a52      	ldr	r2, [pc, #328]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bc4:	4b50      	ldr	r3, [pc, #320]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	494d      	ldr	r1, [pc, #308]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d044      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d107      	bne.n	8006bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bea:	4b47      	ldr	r3, [pc, #284]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d119      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e07f      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d003      	beq.n	8006c0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d107      	bne.n	8006c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e06f      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e067      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c2a:	4b37      	ldr	r3, [pc, #220]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f023 0203 	bic.w	r2, r3, #3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4934      	ldr	r1, [pc, #208]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c3c:	f7ff f99c 	bl	8005f78 <HAL_GetTick>
 8006c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c42:	e00a      	b.n	8006c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c44:	f7ff f998 	bl	8005f78 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e04f      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 020c 	and.w	r2, r3, #12
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d1eb      	bne.n	8006c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c6c:	4b25      	ldr	r3, [pc, #148]	@ (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d20c      	bcs.n	8006c94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7a:	4b22      	ldr	r3, [pc, #136]	@ (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	4b20      	ldr	r3, [pc, #128]	@ (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e032      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ca0:	4b19      	ldr	r3, [pc, #100]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4916      	ldr	r1, [pc, #88]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cbe:	4b12      	ldr	r3, [pc, #72]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	490e      	ldr	r1, [pc, #56]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cd2:	f000 f821 	bl	8006d18 <HAL_RCC_GetSysClockFreq>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	091b      	lsrs	r3, r3, #4
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	490a      	ldr	r1, [pc, #40]	@ (8006d0c <HAL_RCC_ClockConfig+0x1c0>)
 8006ce4:	5ccb      	ldrb	r3, [r1, r3]
 8006ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cea:	4a09      	ldr	r2, [pc, #36]	@ (8006d10 <HAL_RCC_ClockConfig+0x1c4>)
 8006cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006cee:	4b09      	ldr	r3, [pc, #36]	@ (8006d14 <HAL_RCC_ClockConfig+0x1c8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe ffd8 	bl	8005ca8 <HAL_InitTick>

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40023c00 	.word	0x40023c00
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	0800b9f8 	.word	0x0800b9f8
 8006d10:	20000018 	.word	0x20000018
 8006d14:	2000001c 	.word	0x2000001c

08006d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d1c:	b094      	sub	sp, #80	@ 0x50
 8006d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d30:	4b79      	ldr	r3, [pc, #484]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 030c 	and.w	r3, r3, #12
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d00d      	beq.n	8006d58 <HAL_RCC_GetSysClockFreq+0x40>
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	f200 80e1 	bhi.w	8006f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_RCC_GetSysClockFreq+0x34>
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d003      	beq.n	8006d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d4a:	e0db      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d4c:	4b73      	ldr	r3, [pc, #460]	@ (8006f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8006d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d50:	e0db      	b.n	8006f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d52:	4b73      	ldr	r3, [pc, #460]	@ (8006f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d56:	e0d8      	b.n	8006f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d58:	4b6f      	ldr	r3, [pc, #444]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d62:	4b6d      	ldr	r3, [pc, #436]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d063      	beq.n	8006e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	099b      	lsrs	r3, r3, #6
 8006d74:	2200      	movs	r2, #0
 8006d76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d80:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d82:	2300      	movs	r3, #0
 8006d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	f04f 0000 	mov.w	r0, #0
 8006d92:	f04f 0100 	mov.w	r1, #0
 8006d96:	0159      	lsls	r1, r3, #5
 8006d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d9c:	0150      	lsls	r0, r2, #5
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4621      	mov	r1, r4
 8006da4:	1a51      	subs	r1, r2, r1
 8006da6:	6139      	str	r1, [r7, #16]
 8006da8:	4629      	mov	r1, r5
 8006daa:	eb63 0301 	sbc.w	r3, r3, r1
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dbc:	4659      	mov	r1, fp
 8006dbe:	018b      	lsls	r3, r1, #6
 8006dc0:	4651      	mov	r1, sl
 8006dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dc6:	4651      	mov	r1, sl
 8006dc8:	018a      	lsls	r2, r1, #6
 8006dca:	4651      	mov	r1, sl
 8006dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dea:	4690      	mov	r8, r2
 8006dec:	4699      	mov	r9, r3
 8006dee:	4623      	mov	r3, r4
 8006df0:	eb18 0303 	adds.w	r3, r8, r3
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	462b      	mov	r3, r5
 8006df8:	eb49 0303 	adc.w	r3, r9, r3
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	f04f 0200 	mov.w	r2, #0
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	024b      	lsls	r3, r1, #9
 8006e0e:	4621      	mov	r1, r4
 8006e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e14:	4621      	mov	r1, r4
 8006e16:	024a      	lsls	r2, r1, #9
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e1e:	2200      	movs	r2, #0
 8006e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e28:	f7f9 fd88 	bl	800093c <__aeabi_uldivmod>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4613      	mov	r3, r2
 8006e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e34:	e058      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e36:	4b38      	ldr	r3, [pc, #224]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	099b      	lsrs	r3, r3, #6
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	4611      	mov	r1, r2
 8006e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e46:	623b      	str	r3, [r7, #32]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	f04f 0000 	mov.w	r0, #0
 8006e58:	f04f 0100 	mov.w	r1, #0
 8006e5c:	0159      	lsls	r1, r3, #5
 8006e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e62:	0150      	lsls	r0, r2, #5
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4641      	mov	r1, r8
 8006e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e6e:	4649      	mov	r1, r9
 8006e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e88:	ebb2 040a 	subs.w	r4, r2, sl
 8006e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	00eb      	lsls	r3, r5, #3
 8006e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e9e:	00e2      	lsls	r2, r4, #3
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	4643      	mov	r3, r8
 8006ea6:	18e3      	adds	r3, r4, r3
 8006ea8:	603b      	str	r3, [r7, #0]
 8006eaa:	464b      	mov	r3, r9
 8006eac:	eb45 0303 	adc.w	r3, r5, r3
 8006eb0:	607b      	str	r3, [r7, #4]
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	028b      	lsls	r3, r1, #10
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ec8:	4621      	mov	r1, r4
 8006eca:	028a      	lsls	r2, r1, #10
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	61fa      	str	r2, [r7, #28]
 8006ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006edc:	f7f9 fd2e 	bl	800093c <__aeabi_uldivmod>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ef8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f02:	e002      	b.n	8006f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f04:	4b05      	ldr	r3, [pc, #20]	@ (8006f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8006f06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3750      	adds	r7, #80	@ 0x50
 8006f10:	46bd      	mov	sp, r7
 8006f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f16:	bf00      	nop
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	00f42400 	.word	0x00f42400
 8006f20:	007a1200 	.word	0x007a1200

08006f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f28:	4b03      	ldr	r3, [pc, #12]	@ (8006f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000018 	.word	0x20000018

08006f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f40:	f7ff fff0 	bl	8006f24 <HAL_RCC_GetHCLKFreq>
 8006f44:	4602      	mov	r2, r0
 8006f46:	4b05      	ldr	r3, [pc, #20]	@ (8006f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	0a9b      	lsrs	r3, r3, #10
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	4903      	ldr	r1, [pc, #12]	@ (8006f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f52:	5ccb      	ldrb	r3, [r1, r3]
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	0800ba08 	.word	0x0800ba08

08006f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f68:	f7ff ffdc 	bl	8006f24 <HAL_RCC_GetHCLKFreq>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	4b05      	ldr	r3, [pc, #20]	@ (8006f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	0b5b      	lsrs	r3, r3, #13
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	4903      	ldr	r1, [pc, #12]	@ (8006f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f7a:	5ccb      	ldrb	r3, [r1, r3]
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40023800 	.word	0x40023800
 8006f88:	0800ba08 	.word	0x0800ba08

08006f8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	220f      	movs	r2, #15
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f9c:	4b12      	ldr	r3, [pc, #72]	@ (8006fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 0203 	and.w	r2, r3, #3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006fc0:	4b09      	ldr	r3, [pc, #36]	@ (8006fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	08db      	lsrs	r3, r3, #3
 8006fc6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fce:	4b07      	ldr	r3, [pc, #28]	@ (8006fec <HAL_RCC_GetClockConfig+0x60>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0207 	and.w	r2, r3, #7
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	601a      	str	r2, [r3, #0]
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	40023c00 	.word	0x40023c00

08006ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e07b      	b.n	80070fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	d108      	bne.n	800701c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007012:	d009      	beq.n	8007028 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	61da      	str	r2, [r3, #28]
 800701a:	e005      	b.n	8007028 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fe fc90 	bl	8005968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800705e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007070:	431a      	orrs	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ac:	ea42 0103 	orr.w	r1, r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	0c1b      	lsrs	r3, r3, #16
 80070c6:	f003 0104 	and.w	r1, r3, #4
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	f003 0210 	and.w	r2, r3, #16
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b088      	sub	sp, #32
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007112:	f7fe ff31 	bl	8005f78 <HAL_GetTick>
 8007116:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b01      	cmp	r3, #1
 8007126:	d001      	beq.n	800712c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007128:	2302      	movs	r3, #2
 800712a:	e12a      	b.n	8007382 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <HAL_SPI_Transmit+0x36>
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e122      	b.n	8007382 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_SPI_Transmit+0x48>
 8007146:	2302      	movs	r3, #2
 8007148:	e11b      	b.n	8007382 <HAL_SPI_Transmit+0x280>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2203      	movs	r2, #3
 8007156:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	88fa      	ldrh	r2, [r7, #6]
 800716a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	88fa      	ldrh	r2, [r7, #6]
 8007170:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007198:	d10f      	bne.n	80071ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c4:	2b40      	cmp	r3, #64	@ 0x40
 80071c6:	d007      	beq.n	80071d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071e0:	d152      	bne.n	8007288 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <HAL_SPI_Transmit+0xee>
 80071ea:	8b7b      	ldrh	r3, [r7, #26]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d145      	bne.n	800727c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f4:	881a      	ldrh	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007200:	1c9a      	adds	r2, r3, #2
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800720a:	b29b      	uxth	r3, r3
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007214:	e032      	b.n	800727c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b02      	cmp	r3, #2
 8007222:	d112      	bne.n	800724a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007228:	881a      	ldrh	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	1c9a      	adds	r2, r3, #2
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800723e:	b29b      	uxth	r3, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007248:	e018      	b.n	800727c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800724a:	f7fe fe95 	bl	8005f78 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d803      	bhi.n	8007262 <HAL_SPI_Transmit+0x160>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d102      	bne.n	8007268 <HAL_SPI_Transmit+0x166>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d109      	bne.n	800727c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e082      	b.n	8007382 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1c7      	bne.n	8007216 <HAL_SPI_Transmit+0x114>
 8007286:	e053      	b.n	8007330 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <HAL_SPI_Transmit+0x194>
 8007290:	8b7b      	ldrh	r3, [r7, #26]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d147      	bne.n	8007326 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	330c      	adds	r3, #12
 80072a0:	7812      	ldrb	r2, [r2, #0]
 80072a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072bc:	e033      	b.n	8007326 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d113      	bne.n	80072f4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	330c      	adds	r3, #12
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072f2:	e018      	b.n	8007326 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f4:	f7fe fe40 	bl	8005f78 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d803      	bhi.n	800730c <HAL_SPI_Transmit+0x20a>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730a:	d102      	bne.n	8007312 <HAL_SPI_Transmit+0x210>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d109      	bne.n	8007326 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e02d      	b.n	8007382 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1c6      	bne.n	80072be <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fbd9 	bl	8007aec <SPI_EndRxTxTransaction>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007380:	2300      	movs	r3, #0
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b088      	sub	sp, #32
 800738e:	af02      	add	r7, sp, #8
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	603b      	str	r3, [r7, #0]
 8007396:	4613      	mov	r3, r2
 8007398:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d001      	beq.n	80073aa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80073a6:	2302      	movs	r3, #2
 80073a8:	e104      	b.n	80075b4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073b2:	d112      	bne.n	80073da <HAL_SPI_Receive+0x50>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10e      	bne.n	80073da <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2204      	movs	r2, #4
 80073c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073c4:	88fa      	ldrh	r2, [r7, #6]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f8f3 	bl	80075bc <HAL_SPI_TransmitReceive>
 80073d6:	4603      	mov	r3, r0
 80073d8:	e0ec      	b.n	80075b4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073da:	f7fe fdcd 	bl	8005f78 <HAL_GetTick>
 80073de:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_SPI_Receive+0x62>
 80073e6:	88fb      	ldrh	r3, [r7, #6]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e0e1      	b.n	80075b4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d101      	bne.n	80073fe <HAL_SPI_Receive+0x74>
 80073fa:	2302      	movs	r3, #2
 80073fc:	e0da      	b.n	80075b4 <HAL_SPI_Receive+0x22a>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2204      	movs	r2, #4
 800740a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	88fa      	ldrh	r2, [r7, #6]
 800741e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800744c:	d10f      	bne.n	800746e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800745c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800746c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007478:	2b40      	cmp	r3, #64	@ 0x40
 800747a:	d007      	beq.n	800748c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800748a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d170      	bne.n	8007576 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007494:	e035      	b.n	8007502 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d115      	bne.n	80074d0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f103 020c 	add.w	r2, r3, #12
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b0:	7812      	ldrb	r2, [r2, #0]
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074ce:	e018      	b.n	8007502 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074d0:	f7fe fd52 	bl	8005f78 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d803      	bhi.n	80074e8 <HAL_SPI_Receive+0x15e>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d102      	bne.n	80074ee <HAL_SPI_Receive+0x164>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e058      	b.n	80075b4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1c4      	bne.n	8007496 <HAL_SPI_Receive+0x10c>
 800750c:	e038      	b.n	8007580 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b01      	cmp	r3, #1
 800751a:	d113      	bne.n	8007544 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68da      	ldr	r2, [r3, #12]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007526:	b292      	uxth	r2, r2
 8007528:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752e:	1c9a      	adds	r2, r3, #2
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007538:	b29b      	uxth	r3, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007542:	e018      	b.n	8007576 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007544:	f7fe fd18 	bl	8005f78 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d803      	bhi.n	800755c <HAL_SPI_Receive+0x1d2>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755a:	d102      	bne.n	8007562 <HAL_SPI_Receive+0x1d8>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d109      	bne.n	8007576 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e01e      	b.n	80075b4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1c6      	bne.n	800750e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fa4b 	bl	8007a20 <SPI_EndRxTransaction>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2220      	movs	r2, #32
 8007594:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80075b2:	2300      	movs	r3, #0
  }
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08a      	sub	sp, #40	@ 0x28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075ca:	2301      	movs	r3, #1
 80075cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075ce:	f7fe fcd3 	bl	8005f78 <HAL_GetTick>
 80075d2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075da:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80075e2:	887b      	ldrh	r3, [r7, #2]
 80075e4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075e6:	7ffb      	ldrb	r3, [r7, #31]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d00c      	beq.n	8007606 <HAL_SPI_TransmitReceive+0x4a>
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075f2:	d106      	bne.n	8007602 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <HAL_SPI_TransmitReceive+0x46>
 80075fc:	7ffb      	ldrb	r3, [r7, #31]
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d001      	beq.n	8007606 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007602:	2302      	movs	r3, #2
 8007604:	e17f      	b.n	8007906 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x5c>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x5c>
 8007612:	887b      	ldrh	r3, [r7, #2]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e174      	b.n	8007906 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_SPI_TransmitReceive+0x6e>
 8007626:	2302      	movs	r3, #2
 8007628:	e16d      	b.n	8007906 <HAL_SPI_TransmitReceive+0x34a>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b04      	cmp	r3, #4
 800763c:	d003      	beq.n	8007646 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2205      	movs	r2, #5
 8007642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	887a      	ldrh	r2, [r7, #2]
 8007656:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	887a      	ldrh	r2, [r7, #2]
 800765c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	887a      	ldrh	r2, [r7, #2]
 8007668:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	887a      	ldrh	r2, [r7, #2]
 800766e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007686:	2b40      	cmp	r3, #64	@ 0x40
 8007688:	d007      	beq.n	800769a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007698:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076a2:	d17e      	bne.n	80077a2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <HAL_SPI_TransmitReceive+0xf6>
 80076ac:	8afb      	ldrh	r3, [r7, #22]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d16c      	bne.n	800778c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b6:	881a      	ldrh	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	1c9a      	adds	r2, r3, #2
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076d6:	e059      	b.n	800778c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d11b      	bne.n	800771e <HAL_SPI_TransmitReceive+0x162>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d016      	beq.n	800771e <HAL_SPI_TransmitReceive+0x162>
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d113      	bne.n	800771e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fa:	881a      	ldrh	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007706:	1c9a      	adds	r2, r3, #2
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b01      	cmp	r3, #1
 800772a:	d119      	bne.n	8007760 <HAL_SPI_TransmitReceive+0x1a4>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d014      	beq.n	8007760 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007740:	b292      	uxth	r2, r2
 8007742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007748:	1c9a      	adds	r2, r3, #2
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800775c:	2301      	movs	r3, #1
 800775e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007760:	f7fe fc0a 	bl	8005f78 <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800776c:	429a      	cmp	r2, r3
 800776e:	d80d      	bhi.n	800778c <HAL_SPI_TransmitReceive+0x1d0>
 8007770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007776:	d009      	beq.n	800778c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e0bc      	b.n	8007906 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1a0      	bne.n	80076d8 <HAL_SPI_TransmitReceive+0x11c>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800779a:	b29b      	uxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d19b      	bne.n	80076d8 <HAL_SPI_TransmitReceive+0x11c>
 80077a0:	e082      	b.n	80078a8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <HAL_SPI_TransmitReceive+0x1f4>
 80077aa:	8afb      	ldrh	r3, [r7, #22]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d171      	bne.n	8007894 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	330c      	adds	r3, #12
 80077ba:	7812      	ldrb	r2, [r2, #0]
 80077bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077d6:	e05d      	b.n	8007894 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d11c      	bne.n	8007820 <HAL_SPI_TransmitReceive+0x264>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d017      	beq.n	8007820 <HAL_SPI_TransmitReceive+0x264>
 80077f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d114      	bne.n	8007820 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	330c      	adds	r3, #12
 8007800:	7812      	ldrb	r2, [r2, #0]
 8007802:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b01      	cmp	r3, #1
 800782c:	d119      	bne.n	8007862 <HAL_SPI_TransmitReceive+0x2a6>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d014      	beq.n	8007862 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800785e:	2301      	movs	r3, #1
 8007860:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007862:	f7fe fb89 	bl	8005f78 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800786e:	429a      	cmp	r2, r3
 8007870:	d803      	bhi.n	800787a <HAL_SPI_TransmitReceive+0x2be>
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007878:	d102      	bne.n	8007880 <HAL_SPI_TransmitReceive+0x2c4>
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	2b00      	cmp	r3, #0
 800787e:	d109      	bne.n	8007894 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e038      	b.n	8007906 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d19c      	bne.n	80077d8 <HAL_SPI_TransmitReceive+0x21c>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d197      	bne.n	80077d8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078a8:	6a3a      	ldr	r2, [r7, #32]
 80078aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f91d 	bl	8007aec <SPI_EndRxTxTransaction>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d008      	beq.n	80078ca <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e01d      	b.n	8007906 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078d2:	2300      	movs	r3, #0
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	613b      	str	r3, [r7, #16]
 80078e6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e000      	b.n	8007906 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007904:	2300      	movs	r3, #0
  }
}
 8007906:	4618      	mov	r0, r3
 8007908:	3728      	adds	r7, #40	@ 0x28
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	4613      	mov	r3, r2
 800791e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007920:	f7fe fb2a 	bl	8005f78 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	1a9b      	subs	r3, r3, r2
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	4413      	add	r3, r2
 800792e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007930:	f7fe fb22 	bl	8005f78 <HAL_GetTick>
 8007934:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007936:	4b39      	ldr	r3, [pc, #228]	@ (8007a1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	015b      	lsls	r3, r3, #5
 800793c:	0d1b      	lsrs	r3, r3, #20
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	fb02 f303 	mul.w	r3, r2, r3
 8007944:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007946:	e054      	b.n	80079f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d050      	beq.n	80079f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007950:	f7fe fb12 	bl	8005f78 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	429a      	cmp	r2, r3
 800795e:	d902      	bls.n	8007966 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d13d      	bne.n	80079e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800797e:	d111      	bne.n	80079a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007988:	d004      	beq.n	8007994 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007992:	d107      	bne.n	80079a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ac:	d10f      	bne.n	80079ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e017      	b.n	8007a12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4013      	ands	r3, r2
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	bf0c      	ite	eq
 8007a02:	2301      	moveq	r3, #1
 8007a04:	2300      	movne	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	79fb      	ldrb	r3, [r7, #7]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d19b      	bne.n	8007948 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000018 	.word	0x20000018

08007a20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a34:	d111      	bne.n	8007a5a <SPI_EndRxTransaction+0x3a>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a3e:	d004      	beq.n	8007a4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a48:	d107      	bne.n	8007a5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a58:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a62:	d12a      	bne.n	8007aba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a6c:	d012      	beq.n	8007a94 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2200      	movs	r2, #0
 8007a76:	2180      	movs	r1, #128	@ 0x80
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff ff49 	bl	8007910 <SPI_WaitFlagStateUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d02d      	beq.n	8007ae0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a88:	f043 0220 	orr.w	r2, r3, #32
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e026      	b.n	8007ae2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff ff36 	bl	8007910 <SPI_WaitFlagStateUntilTimeout>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d01a      	beq.n	8007ae0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aae:	f043 0220 	orr.w	r2, r3, #32
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e013      	b.n	8007ae2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff ff23 	bl	8007910 <SPI_WaitFlagStateUntilTimeout>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d007      	beq.n	8007ae0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad4:	f043 0220 	orr.w	r2, r3, #32
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e000      	b.n	8007ae2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2201      	movs	r2, #1
 8007b00:	2102      	movs	r1, #2
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f7ff ff04 	bl	8007910 <SPI_WaitFlagStateUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b12:	f043 0220 	orr.w	r2, r3, #32
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e032      	b.n	8007b84 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8007b8c <SPI_EndRxTxTransaction+0xa0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1b      	ldr	r2, [pc, #108]	@ (8007b90 <SPI_EndRxTxTransaction+0xa4>)
 8007b24:	fba2 2303 	umull	r2, r3, r2, r3
 8007b28:	0d5b      	lsrs	r3, r3, #21
 8007b2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007b2e:	fb02 f303 	mul.w	r3, r2, r3
 8007b32:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b3c:	d112      	bne.n	8007b64 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2200      	movs	r2, #0
 8007b46:	2180      	movs	r1, #128	@ 0x80
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7ff fee1 	bl	8007910 <SPI_WaitFlagStateUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d016      	beq.n	8007b82 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b58:	f043 0220 	orr.w	r2, r3, #32
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e00f      	b.n	8007b84 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b7a:	2b80      	cmp	r3, #128	@ 0x80
 8007b7c:	d0f2      	beq.n	8007b64 <SPI_EndRxTxTransaction+0x78>
 8007b7e:	e000      	b.n	8007b82 <SPI_EndRxTxTransaction+0x96>
        break;
 8007b80:	bf00      	nop
  }

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20000018 	.word	0x20000018
 8007b90:	165e9f81 	.word	0x165e9f81

08007b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e041      	b.n	8007c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f839 	bl	8007c32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f000 f9c0 	bl	8007f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
	...

08007c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d001      	beq.n	8007c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e04e      	b.n	8007cfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0201 	orr.w	r2, r2, #1
 8007c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a23      	ldr	r2, [pc, #140]	@ (8007d0c <HAL_TIM_Base_Start_IT+0xc4>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d022      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c8a:	d01d      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a1f      	ldr	r2, [pc, #124]	@ (8007d10 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d018      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8007d14 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d013      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d00e      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a1b      	ldr	r2, [pc, #108]	@ (8007d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d009      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a19      	ldr	r2, [pc, #100]	@ (8007d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d004      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x80>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a18      	ldr	r2, [pc, #96]	@ (8007d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d111      	bne.n	8007cec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b06      	cmp	r3, #6
 8007cd8:	d010      	beq.n	8007cfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0201 	orr.w	r2, r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cea:	e007      	b.n	8007cfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	40000400 	.word	0x40000400
 8007d14:	40000800 	.word	0x40000800
 8007d18:	40000c00 	.word	0x40000c00
 8007d1c:	40010400 	.word	0x40010400
 8007d20:	40014000 	.word	0x40014000
 8007d24:	40001800 	.word	0x40001800

08007d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d020      	beq.n	8007d8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01b      	beq.n	8007d8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0202 	mvn.w	r2, #2
 8007d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8d2 	bl	8007f1c <HAL_TIM_IC_CaptureCallback>
 8007d78:	e005      	b.n	8007d86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f8c4 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f8d5 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d020      	beq.n	8007dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01b      	beq.n	8007dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0204 	mvn.w	r2, #4
 8007da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2202      	movs	r2, #2
 8007dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f8ac 	bl	8007f1c <HAL_TIM_IC_CaptureCallback>
 8007dc4:	e005      	b.n	8007dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f89e 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f8af 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f003 0308 	and.w	r3, r3, #8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d020      	beq.n	8007e24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01b      	beq.n	8007e24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0208 	mvn.w	r2, #8
 8007df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2204      	movs	r2, #4
 8007dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f886 	bl	8007f1c <HAL_TIM_IC_CaptureCallback>
 8007e10:	e005      	b.n	8007e1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f878 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f889 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f003 0310 	and.w	r3, r3, #16
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d020      	beq.n	8007e70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01b      	beq.n	8007e70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f06f 0210 	mvn.w	r2, #16
 8007e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2208      	movs	r2, #8
 8007e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f860 	bl	8007f1c <HAL_TIM_IC_CaptureCallback>
 8007e5c:	e005      	b.n	8007e6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f852 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f863 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00c      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d007      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0201 	mvn.w	r2, #1
 8007e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fc fdcc 	bl	8004a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00c      	beq.n	8007eb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f906 	bl	80080c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00c      	beq.n	8007edc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f834 	bl	8007f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00c      	beq.n	8007f00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d007      	beq.n	8007f00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0220 	mvn.w	r2, #32
 8007ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f8d8 	bl	80080b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f00:	bf00      	nop
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a46      	ldr	r2, [pc, #280]	@ (8008084 <TIM_Base_SetConfig+0x12c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d013      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f76:	d00f      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a43      	ldr	r2, [pc, #268]	@ (8008088 <TIM_Base_SetConfig+0x130>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00b      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a42      	ldr	r2, [pc, #264]	@ (800808c <TIM_Base_SetConfig+0x134>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d007      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a41      	ldr	r2, [pc, #260]	@ (8008090 <TIM_Base_SetConfig+0x138>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a40      	ldr	r2, [pc, #256]	@ (8008094 <TIM_Base_SetConfig+0x13c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d108      	bne.n	8007faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a35      	ldr	r2, [pc, #212]	@ (8008084 <TIM_Base_SetConfig+0x12c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d02b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb8:	d027      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a32      	ldr	r2, [pc, #200]	@ (8008088 <TIM_Base_SetConfig+0x130>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d023      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a31      	ldr	r2, [pc, #196]	@ (800808c <TIM_Base_SetConfig+0x134>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01f      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a30      	ldr	r2, [pc, #192]	@ (8008090 <TIM_Base_SetConfig+0x138>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d01b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a2f      	ldr	r2, [pc, #188]	@ (8008094 <TIM_Base_SetConfig+0x13c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d017      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8008098 <TIM_Base_SetConfig+0x140>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800809c <TIM_Base_SetConfig+0x144>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00f      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a2c      	ldr	r2, [pc, #176]	@ (80080a0 <TIM_Base_SetConfig+0x148>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a2b      	ldr	r2, [pc, #172]	@ (80080a4 <TIM_Base_SetConfig+0x14c>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d007      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80080a8 <TIM_Base_SetConfig+0x150>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d003      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a29      	ldr	r2, [pc, #164]	@ (80080ac <TIM_Base_SetConfig+0x154>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d108      	bne.n	800801c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4313      	orrs	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a10      	ldr	r2, [pc, #64]	@ (8008084 <TIM_Base_SetConfig+0x12c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0xf8>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a12      	ldr	r2, [pc, #72]	@ (8008094 <TIM_Base_SetConfig+0x13c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d103      	bne.n	8008058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b01      	cmp	r3, #1
 8008068:	d105      	bne.n	8008076 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f023 0201 	bic.w	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	611a      	str	r2, [r3, #16]
  }
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40010000 	.word	0x40010000
 8008088:	40000400 	.word	0x40000400
 800808c:	40000800 	.word	0x40000800
 8008090:	40000c00 	.word	0x40000c00
 8008094:	40010400 	.word	0x40010400
 8008098:	40014000 	.word	0x40014000
 800809c:	40014400 	.word	0x40014400
 80080a0:	40014800 	.word	0x40014800
 80080a4:	40001800 	.word	0x40001800
 80080a8:	40001c00 	.word	0x40001c00
 80080ac:	40002000 	.word	0x40002000

080080b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e042      	b.n	8008170 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fd fc7a 	bl	80059f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2224      	movs	r2, #36	@ 0x24
 8008108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800811a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fe27 	bl	8008d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	695a      	ldr	r2, [r3, #20]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2220      	movs	r2, #32
 8008164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e05a      	b.n	8008242 <HAL_LIN_Init+0xca>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	d106      	bne.n	80081a6 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7fd fc29 	bl	80059f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2224      	movs	r2, #36	@ 0x24
 80081aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fdd6 	bl	8008d70 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	695a      	ldr	r2, [r3, #20]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081e2:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081f2:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0220 	bic.w	r2, r2, #32
 8008202:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6919      	ldr	r1, [r3, #16]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008222:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2220      	movs	r2, #32
 800822e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b08a      	sub	sp, #40	@ 0x28
 800824e:	af02      	add	r7, sp, #8
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	603b      	str	r3, [r7, #0]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b20      	cmp	r3, #32
 8008268:	d175      	bne.n	8008356 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <HAL_UART_Transmit+0x2c>
 8008270:	88fb      	ldrh	r3, [r7, #6]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e06e      	b.n	8008358 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2221      	movs	r2, #33	@ 0x21
 8008284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008288:	f7fd fe76 	bl	8005f78 <HAL_GetTick>
 800828c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	88fa      	ldrh	r2, [r7, #6]
 8008298:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a2:	d108      	bne.n	80082b6 <HAL_UART_Transmit+0x6c>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082ac:	2300      	movs	r3, #0
 80082ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	61bb      	str	r3, [r7, #24]
 80082b4:	e003      	b.n	80082be <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082be:	e02e      	b.n	800831e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2200      	movs	r2, #0
 80082c8:	2180      	movs	r1, #128	@ 0x80
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 fb20 	bl	8008910 <UART_WaitOnFlagUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d005      	beq.n	80082e2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e03a      	b.n	8008358 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10b      	bne.n	8008300 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	3302      	adds	r3, #2
 80082fc:	61bb      	str	r3, [r7, #24]
 80082fe:	e007      	b.n	8008310 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	781a      	ldrb	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	3301      	adds	r3, #1
 800830e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008314:	b29b      	uxth	r3, r3
 8008316:	3b01      	subs	r3, #1
 8008318:	b29a      	uxth	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008322:	b29b      	uxth	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1cb      	bne.n	80082c0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	2200      	movs	r2, #0
 8008330:	2140      	movs	r1, #64	@ 0x40
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 faec 	bl	8008910 <UART_WaitOnFlagUntilTimeout>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d005      	beq.n	800834a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2220      	movs	r2, #32
 8008342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e006      	b.n	8008358 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2220      	movs	r2, #32
 800834e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	e000      	b.n	8008358 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008356:	2302      	movs	r3, #2
  }
}
 8008358:	4618      	mov	r0, r3
 800835a:	3720      	adds	r7, #32
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b20      	cmp	r3, #32
 8008378:	d112      	bne.n	80083a0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <HAL_UART_Receive_IT+0x26>
 8008380:	88fb      	ldrh	r3, [r7, #6]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e00b      	b.n	80083a2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008390:	88fb      	ldrh	r3, [r7, #6]
 8008392:	461a      	mov	r2, r3
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 fb13 	bl	80089c2 <UART_Start_Receive_IT>
 800839c:	4603      	mov	r3, r0
 800839e:	e000      	b.n	80083a2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80083a0:	2302      	movs	r3, #2
  }
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b0ba      	sub	sp, #232	@ 0xe8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80083d8:	2300      	movs	r3, #0
 80083da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083e2:	f003 030f 	and.w	r3, r3, #15
 80083e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80083ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10f      	bne.n	8008412 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d009      	beq.n	8008412 <HAL_UART_IRQHandler+0x66>
 80083fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fbf2 	bl	8008bf4 <UART_Receive_IT>
      return;
 8008410:	e25b      	b.n	80088ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80de 	beq.w	80085d8 <HAL_UART_IRQHandler+0x22c>
 800841c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800842c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 80d1 	beq.w	80085d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <HAL_UART_IRQHandler+0xae>
 8008442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008452:	f043 0201 	orr.w	r2, r3, #1
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00b      	beq.n	800847e <HAL_UART_IRQHandler+0xd2>
 8008466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d005      	beq.n	800847e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008476:	f043 0202 	orr.w	r2, r3, #2
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800847e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00b      	beq.n	80084a2 <HAL_UART_IRQHandler+0xf6>
 800848a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d005      	beq.n	80084a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800849a:	f043 0204 	orr.w	r2, r3, #4
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a6:	f003 0308 	and.w	r3, r3, #8
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d011      	beq.n	80084d2 <HAL_UART_IRQHandler+0x126>
 80084ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d105      	bne.n	80084c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80084ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ca:	f043 0208 	orr.w	r2, r3, #8
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 81f2 	beq.w	80088c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d008      	beq.n	80084fa <HAL_UART_IRQHandler+0x14e>
 80084e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb7d 	bl	8008bf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008504:	2b40      	cmp	r3, #64	@ 0x40
 8008506:	bf0c      	ite	eq
 8008508:	2301      	moveq	r3, #1
 800850a:	2300      	movne	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008516:	f003 0308 	and.w	r3, r3, #8
 800851a:	2b00      	cmp	r3, #0
 800851c:	d103      	bne.n	8008526 <HAL_UART_IRQHandler+0x17a>
 800851e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008522:	2b00      	cmp	r3, #0
 8008524:	d04f      	beq.n	80085c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fa85 	bl	8008a36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008536:	2b40      	cmp	r3, #64	@ 0x40
 8008538:	d141      	bne.n	80085be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3314      	adds	r3, #20
 8008540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008544:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008550:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3314      	adds	r3, #20
 8008562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008566:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800856a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800857e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1d9      	bne.n	800853a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858a:	2b00      	cmp	r3, #0
 800858c:	d013      	beq.n	80085b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008592:	4a7e      	ldr	r2, [pc, #504]	@ (800878c <HAL_UART_IRQHandler+0x3e0>)
 8008594:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800859a:	4618      	mov	r0, r3
 800859c:	f7fd fe6e 	bl	800627c <HAL_DMA_Abort_IT>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d016      	beq.n	80085d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b4:	e00e      	b.n	80085d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f994 	bl	80088e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085bc:	e00a      	b.n	80085d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f990 	bl	80088e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c4:	e006      	b.n	80085d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f98c 	bl	80088e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80085d2:	e175      	b.n	80088c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d4:	bf00      	nop
    return;
 80085d6:	e173      	b.n	80088c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085dc:	2b01      	cmp	r3, #1
 80085de:	f040 814f 	bne.w	8008880 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80085e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 8148 	beq.w	8008880 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80085f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f4:	f003 0310 	and.w	r3, r3, #16
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 8141 	beq.w	8008880 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085fe:	2300      	movs	r3, #0
 8008600:	60bb      	str	r3, [r7, #8]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60bb      	str	r3, [r7, #8]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861e:	2b40      	cmp	r3, #64	@ 0x40
 8008620:	f040 80b6 	bne.w	8008790 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8145 	beq.w	80088c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800863e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008642:	429a      	cmp	r2, r3
 8008644:	f080 813e 	bcs.w	80088c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800864e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800865a:	f000 8088 	beq.w	800876e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	330c      	adds	r3, #12
 8008664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800867c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	330c      	adds	r3, #12
 8008686:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800868a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800868e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008696:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80086a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1d9      	bne.n	800865e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3314      	adds	r3, #20
 80086b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80086ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086bc:	f023 0301 	bic.w	r3, r3, #1
 80086c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3314      	adds	r3, #20
 80086ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80086ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80086d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80086d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80086e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e1      	bne.n	80086aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3314      	adds	r3, #20
 80086ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80086f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3314      	adds	r3, #20
 8008706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800870a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800870c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e3      	bne.n	80086e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2220      	movs	r2, #32
 8008722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330c      	adds	r3, #12
 8008732:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800873c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800873e:	f023 0310 	bic.w	r3, r3, #16
 8008742:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	330c      	adds	r3, #12
 800874c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008750:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008752:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008756:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800875e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e3      	bne.n	800872c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008768:	4618      	mov	r0, r3
 800876a:	f7fd fd17 	bl	800619c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2202      	movs	r2, #2
 8008772:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800877c:	b29b      	uxth	r3, r3
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	b29b      	uxth	r3, r3
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f8b7 	bl	80088f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800878a:	e09b      	b.n	80088c4 <HAL_UART_IRQHandler+0x518>
 800878c:	08008afd 	.word	0x08008afd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008798:	b29b      	uxth	r3, r3
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 808e 	beq.w	80088c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80087ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 8089 	beq.w	80088c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	330c      	adds	r3, #12
 80087bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	330c      	adds	r3, #12
 80087d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80087da:	647a      	str	r2, [r7, #68]	@ 0x44
 80087dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e3      	bne.n	80087b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3314      	adds	r3, #20
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	623b      	str	r3, [r7, #32]
   return(result);
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	f023 0301 	bic.w	r3, r3, #1
 8008804:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3314      	adds	r3, #20
 800880e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008812:	633a      	str	r2, [r7, #48]	@ 0x30
 8008814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e3      	bne.n	80087ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2220      	movs	r2, #32
 800882a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	330c      	adds	r3, #12
 800883a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	e853 3f00 	ldrex	r3, [r3]
 8008842:	60fb      	str	r3, [r7, #12]
   return(result);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0310 	bic.w	r3, r3, #16
 800884a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	330c      	adds	r3, #12
 8008854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008858:	61fa      	str	r2, [r7, #28]
 800885a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	69b9      	ldr	r1, [r7, #24]
 800885e:	69fa      	ldr	r2, [r7, #28]
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	617b      	str	r3, [r7, #20]
   return(result);
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e3      	bne.n	8008834 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f83d 	bl	80088f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800887e:	e023      	b.n	80088c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008888:	2b00      	cmp	r3, #0
 800888a:	d009      	beq.n	80088a0 <HAL_UART_IRQHandler+0x4f4>
 800888c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f943 	bl	8008b24 <UART_Transmit_IT>
    return;
 800889e:	e014      	b.n	80088ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00e      	beq.n	80088ca <HAL_UART_IRQHandler+0x51e>
 80088ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d008      	beq.n	80088ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f983 	bl	8008bc4 <UART_EndTransmit_IT>
    return;
 80088be:	e004      	b.n	80088ca <HAL_UART_IRQHandler+0x51e>
    return;
 80088c0:	bf00      	nop
 80088c2:	e002      	b.n	80088ca <HAL_UART_IRQHandler+0x51e>
      return;
 80088c4:	bf00      	nop
 80088c6:	e000      	b.n	80088ca <HAL_UART_IRQHandler+0x51e>
      return;
 80088c8:	bf00      	nop
  }
}
 80088ca:	37e8      	adds	r7, #232	@ 0xe8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	603b      	str	r3, [r7, #0]
 800891c:	4613      	mov	r3, r2
 800891e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008920:	e03b      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d037      	beq.n	800899a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800892a:	f7fd fb25 	bl	8005f78 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	6a3a      	ldr	r2, [r7, #32]
 8008936:	429a      	cmp	r2, r3
 8008938:	d302      	bcc.n	8008940 <UART_WaitOnFlagUntilTimeout+0x30>
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e03a      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f003 0304 	and.w	r3, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	d023      	beq.n	800899a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b80      	cmp	r3, #128	@ 0x80
 8008956:	d020      	beq.n	800899a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b40      	cmp	r3, #64	@ 0x40
 800895c:	d01d      	beq.n	800899a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0308 	and.w	r3, r3, #8
 8008968:	2b08      	cmp	r3, #8
 800896a:	d116      	bne.n	800899a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800896c:	2300      	movs	r3, #0
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 f857 	bl	8008a36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2208      	movs	r2, #8
 800898c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e00f      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4013      	ands	r3, r2
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	bf0c      	ite	eq
 80089aa:	2301      	moveq	r3, #1
 80089ac:	2300      	movne	r3, #0
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d0b4      	beq.n	8008922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b085      	sub	sp, #20
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	4613      	mov	r3, r2
 80089ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	88fa      	ldrh	r2, [r7, #6]
 80089da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	88fa      	ldrh	r2, [r7, #6]
 80089e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2222      	movs	r2, #34	@ 0x22
 80089ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d007      	beq.n	8008a08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695a      	ldr	r2, [r3, #20]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0201 	orr.w	r2, r2, #1
 8008a16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0220 	orr.w	r2, r2, #32
 8008a26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b095      	sub	sp, #84	@ 0x54
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	330c      	adds	r3, #12
 8008a44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	330c      	adds	r3, #12
 8008a5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e5      	bne.n	8008a3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3314      	adds	r3, #20
 8008a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	f023 0301 	bic.w	r3, r3, #1
 8008a88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3314      	adds	r3, #20
 8008a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e5      	bne.n	8008a72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d119      	bne.n	8008ae2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	330c      	adds	r3, #12
 8008ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f023 0310 	bic.w	r3, r3, #16
 8008ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	330c      	adds	r3, #12
 8008acc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ace:	61ba      	str	r2, [r7, #24]
 8008ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6979      	ldr	r1, [r7, #20]
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	613b      	str	r3, [r7, #16]
   return(result);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e5      	bne.n	8008aae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008af0:	bf00      	nop
 8008af2:	3754      	adds	r7, #84	@ 0x54
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff fee4 	bl	80088e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b1c:	bf00      	nop
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b21      	cmp	r3, #33	@ 0x21
 8008b36:	d13e      	bne.n	8008bb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b40:	d114      	bne.n	8008b6c <UART_Transmit_IT+0x48>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d110      	bne.n	8008b6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	461a      	mov	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	1c9a      	adds	r2, r3, #2
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	621a      	str	r2, [r3, #32]
 8008b6a:	e008      	b.n	8008b7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	1c59      	adds	r1, r3, #1
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6211      	str	r1, [r2, #32]
 8008b76:	781a      	ldrb	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	3b01      	subs	r3, #1
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10f      	bne.n	8008bb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ba0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e000      	b.n	8008bb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bb6:	2302      	movs	r3, #2
  }
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff fe73 	bl	80088d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08c      	sub	sp, #48	@ 0x30
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b22      	cmp	r3, #34	@ 0x22
 8008c06:	f040 80ae 	bne.w	8008d66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c12:	d117      	bne.n	8008c44 <UART_Receive_IT+0x50>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d113      	bne.n	8008c44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c24:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3c:	1c9a      	adds	r2, r3, #2
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c42:	e026      	b.n	8008c92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c56:	d007      	beq.n	8008c68 <UART_Receive_IT+0x74>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <UART_Receive_IT+0x82>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c72:	701a      	strb	r2, [r3, #0]
 8008c74:	e008      	b.n	8008c88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d15d      	bne.n	8008d62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0220 	bic.w	r2, r2, #32
 8008cb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008cc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695a      	ldr	r2, [r3, #20]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f022 0201 	bic.w	r2, r2, #1
 8008cd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d135      	bne.n	8008d58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	330c      	adds	r3, #12
 8008cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	613b      	str	r3, [r7, #16]
   return(result);
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f023 0310 	bic.w	r3, r3, #16
 8008d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d12:	623a      	str	r2, [r7, #32]
 8008d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	69f9      	ldr	r1, [r7, #28]
 8008d18:	6a3a      	ldr	r2, [r7, #32]
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e5      	bne.n	8008cf2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0310 	and.w	r3, r3, #16
 8008d30:	2b10      	cmp	r3, #16
 8008d32:	d10a      	bne.n	8008d4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d34:	2300      	movs	r3, #0
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff fdd1 	bl	80088f8 <HAL_UARTEx_RxEventCallback>
 8008d56:	e002      	b.n	8008d5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7f8 fed1 	bl	8001b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	e002      	b.n	8008d68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	e000      	b.n	8008d68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008d66:	2302      	movs	r3, #2
  }
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3730      	adds	r7, #48	@ 0x30
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d74:	b0c0      	sub	sp, #256	@ 0x100
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d8c:	68d9      	ldr	r1, [r3, #12]
 8008d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	ea40 0301 	orr.w	r3, r0, r1
 8008d98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	431a      	orrs	r2, r3
 8008da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	431a      	orrs	r2, r3
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008dc8:	f021 010c 	bic.w	r1, r1, #12
 8008dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dea:	6999      	ldr	r1, [r3, #24]
 8008dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	ea40 0301 	orr.w	r3, r0, r1
 8008df6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	4b8f      	ldr	r3, [pc, #572]	@ (800903c <UART_SetConfig+0x2cc>)
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d005      	beq.n	8008e10 <UART_SetConfig+0xa0>
 8008e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8009040 <UART_SetConfig+0x2d0>)
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d104      	bne.n	8008e1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e10:	f7fe f8a8 	bl	8006f64 <HAL_RCC_GetPCLK2Freq>
 8008e14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008e18:	e003      	b.n	8008e22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e1a:	f7fe f88f 	bl	8006f3c <HAL_RCC_GetPCLK1Freq>
 8008e1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e2c:	f040 810c 	bne.w	8009048 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008e3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008e42:	4622      	mov	r2, r4
 8008e44:	462b      	mov	r3, r5
 8008e46:	1891      	adds	r1, r2, r2
 8008e48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008e4a:	415b      	adcs	r3, r3
 8008e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008e52:	4621      	mov	r1, r4
 8008e54:	eb12 0801 	adds.w	r8, r2, r1
 8008e58:	4629      	mov	r1, r5
 8008e5a:	eb43 0901 	adc.w	r9, r3, r1
 8008e5e:	f04f 0200 	mov.w	r2, #0
 8008e62:	f04f 0300 	mov.w	r3, #0
 8008e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e72:	4690      	mov	r8, r2
 8008e74:	4699      	mov	r9, r3
 8008e76:	4623      	mov	r3, r4
 8008e78:	eb18 0303 	adds.w	r3, r8, r3
 8008e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e80:	462b      	mov	r3, r5
 8008e82:	eb49 0303 	adc.w	r3, r9, r3
 8008e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008e9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	18db      	adds	r3, r3, r3
 8008ea2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	eb42 0303 	adc.w	r3, r2, r3
 8008eaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8008eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008eb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008eb4:	f7f7 fd42 	bl	800093c <__aeabi_uldivmod>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4b61      	ldr	r3, [pc, #388]	@ (8009044 <UART_SetConfig+0x2d4>)
 8008ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8008ec2:	095b      	lsrs	r3, r3, #5
 8008ec4:	011c      	lsls	r4, r3, #4
 8008ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ed0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008ed4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008ed8:	4642      	mov	r2, r8
 8008eda:	464b      	mov	r3, r9
 8008edc:	1891      	adds	r1, r2, r2
 8008ede:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008ee0:	415b      	adcs	r3, r3
 8008ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ee4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ee8:	4641      	mov	r1, r8
 8008eea:	eb12 0a01 	adds.w	sl, r2, r1
 8008eee:	4649      	mov	r1, r9
 8008ef0:	eb43 0b01 	adc.w	fp, r3, r1
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f08:	4692      	mov	sl, r2
 8008f0a:	469b      	mov	fp, r3
 8008f0c:	4643      	mov	r3, r8
 8008f0e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f16:	464b      	mov	r3, r9
 8008f18:	eb4b 0303 	adc.w	r3, fp, r3
 8008f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008f30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f34:	460b      	mov	r3, r1
 8008f36:	18db      	adds	r3, r3, r3
 8008f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	eb42 0303 	adc.w	r3, r2, r3
 8008f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008f4a:	f7f7 fcf7 	bl	800093c <__aeabi_uldivmod>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4611      	mov	r1, r2
 8008f54:	4b3b      	ldr	r3, [pc, #236]	@ (8009044 <UART_SetConfig+0x2d4>)
 8008f56:	fba3 2301 	umull	r2, r3, r3, r1
 8008f5a:	095b      	lsrs	r3, r3, #5
 8008f5c:	2264      	movs	r2, #100	@ 0x64
 8008f5e:	fb02 f303 	mul.w	r3, r2, r3
 8008f62:	1acb      	subs	r3, r1, r3
 8008f64:	00db      	lsls	r3, r3, #3
 8008f66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008f6a:	4b36      	ldr	r3, [pc, #216]	@ (8009044 <UART_SetConfig+0x2d4>)
 8008f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f70:	095b      	lsrs	r3, r3, #5
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008f78:	441c      	add	r4, r3
 8008f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008f88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008f8c:	4642      	mov	r2, r8
 8008f8e:	464b      	mov	r3, r9
 8008f90:	1891      	adds	r1, r2, r2
 8008f92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008f94:	415b      	adcs	r3, r3
 8008f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008f9c:	4641      	mov	r1, r8
 8008f9e:	1851      	adds	r1, r2, r1
 8008fa0:	6339      	str	r1, [r7, #48]	@ 0x30
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	414b      	adcs	r3, r1
 8008fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa8:	f04f 0200 	mov.w	r2, #0
 8008fac:	f04f 0300 	mov.w	r3, #0
 8008fb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008fb4:	4659      	mov	r1, fp
 8008fb6:	00cb      	lsls	r3, r1, #3
 8008fb8:	4651      	mov	r1, sl
 8008fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fbe:	4651      	mov	r1, sl
 8008fc0:	00ca      	lsls	r2, r1, #3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	4642      	mov	r2, r8
 8008fca:	189b      	adds	r3, r3, r2
 8008fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	460a      	mov	r2, r1
 8008fd4:	eb42 0303 	adc.w	r3, r2, r3
 8008fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008fe8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008fec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	18db      	adds	r3, r3, r3
 8008ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	eb42 0303 	adc.w	r3, r2, r3
 8008ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009002:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009006:	f7f7 fc99 	bl	800093c <__aeabi_uldivmod>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4b0d      	ldr	r3, [pc, #52]	@ (8009044 <UART_SetConfig+0x2d4>)
 8009010:	fba3 1302 	umull	r1, r3, r3, r2
 8009014:	095b      	lsrs	r3, r3, #5
 8009016:	2164      	movs	r1, #100	@ 0x64
 8009018:	fb01 f303 	mul.w	r3, r1, r3
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	3332      	adds	r3, #50	@ 0x32
 8009022:	4a08      	ldr	r2, [pc, #32]	@ (8009044 <UART_SetConfig+0x2d4>)
 8009024:	fba2 2303 	umull	r2, r3, r2, r3
 8009028:	095b      	lsrs	r3, r3, #5
 800902a:	f003 0207 	and.w	r2, r3, #7
 800902e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4422      	add	r2, r4
 8009036:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009038:	e106      	b.n	8009248 <UART_SetConfig+0x4d8>
 800903a:	bf00      	nop
 800903c:	40011000 	.word	0x40011000
 8009040:	40011400 	.word	0x40011400
 8009044:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800904c:	2200      	movs	r2, #0
 800904e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009052:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009056:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800905a:	4642      	mov	r2, r8
 800905c:	464b      	mov	r3, r9
 800905e:	1891      	adds	r1, r2, r2
 8009060:	6239      	str	r1, [r7, #32]
 8009062:	415b      	adcs	r3, r3
 8009064:	627b      	str	r3, [r7, #36]	@ 0x24
 8009066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800906a:	4641      	mov	r1, r8
 800906c:	1854      	adds	r4, r2, r1
 800906e:	4649      	mov	r1, r9
 8009070:	eb43 0501 	adc.w	r5, r3, r1
 8009074:	f04f 0200 	mov.w	r2, #0
 8009078:	f04f 0300 	mov.w	r3, #0
 800907c:	00eb      	lsls	r3, r5, #3
 800907e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009082:	00e2      	lsls	r2, r4, #3
 8009084:	4614      	mov	r4, r2
 8009086:	461d      	mov	r5, r3
 8009088:	4643      	mov	r3, r8
 800908a:	18e3      	adds	r3, r4, r3
 800908c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009090:	464b      	mov	r3, r9
 8009092:	eb45 0303 	adc.w	r3, r5, r3
 8009096:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800909a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090aa:	f04f 0200 	mov.w	r2, #0
 80090ae:	f04f 0300 	mov.w	r3, #0
 80090b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80090b6:	4629      	mov	r1, r5
 80090b8:	008b      	lsls	r3, r1, #2
 80090ba:	4621      	mov	r1, r4
 80090bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090c0:	4621      	mov	r1, r4
 80090c2:	008a      	lsls	r2, r1, #2
 80090c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80090c8:	f7f7 fc38 	bl	800093c <__aeabi_uldivmod>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4b60      	ldr	r3, [pc, #384]	@ (8009254 <UART_SetConfig+0x4e4>)
 80090d2:	fba3 2302 	umull	r2, r3, r3, r2
 80090d6:	095b      	lsrs	r3, r3, #5
 80090d8:	011c      	lsls	r4, r3, #4
 80090da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80090e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80090ec:	4642      	mov	r2, r8
 80090ee:	464b      	mov	r3, r9
 80090f0:	1891      	adds	r1, r2, r2
 80090f2:	61b9      	str	r1, [r7, #24]
 80090f4:	415b      	adcs	r3, r3
 80090f6:	61fb      	str	r3, [r7, #28]
 80090f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090fc:	4641      	mov	r1, r8
 80090fe:	1851      	adds	r1, r2, r1
 8009100:	6139      	str	r1, [r7, #16]
 8009102:	4649      	mov	r1, r9
 8009104:	414b      	adcs	r3, r1
 8009106:	617b      	str	r3, [r7, #20]
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009114:	4659      	mov	r1, fp
 8009116:	00cb      	lsls	r3, r1, #3
 8009118:	4651      	mov	r1, sl
 800911a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800911e:	4651      	mov	r1, sl
 8009120:	00ca      	lsls	r2, r1, #3
 8009122:	4610      	mov	r0, r2
 8009124:	4619      	mov	r1, r3
 8009126:	4603      	mov	r3, r0
 8009128:	4642      	mov	r2, r8
 800912a:	189b      	adds	r3, r3, r2
 800912c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009130:	464b      	mov	r3, r9
 8009132:	460a      	mov	r2, r1
 8009134:	eb42 0303 	adc.w	r3, r2, r3
 8009138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800913c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009146:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009148:	f04f 0200 	mov.w	r2, #0
 800914c:	f04f 0300 	mov.w	r3, #0
 8009150:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009154:	4649      	mov	r1, r9
 8009156:	008b      	lsls	r3, r1, #2
 8009158:	4641      	mov	r1, r8
 800915a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800915e:	4641      	mov	r1, r8
 8009160:	008a      	lsls	r2, r1, #2
 8009162:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009166:	f7f7 fbe9 	bl	800093c <__aeabi_uldivmod>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4611      	mov	r1, r2
 8009170:	4b38      	ldr	r3, [pc, #224]	@ (8009254 <UART_SetConfig+0x4e4>)
 8009172:	fba3 2301 	umull	r2, r3, r3, r1
 8009176:	095b      	lsrs	r3, r3, #5
 8009178:	2264      	movs	r2, #100	@ 0x64
 800917a:	fb02 f303 	mul.w	r3, r2, r3
 800917e:	1acb      	subs	r3, r1, r3
 8009180:	011b      	lsls	r3, r3, #4
 8009182:	3332      	adds	r3, #50	@ 0x32
 8009184:	4a33      	ldr	r2, [pc, #204]	@ (8009254 <UART_SetConfig+0x4e4>)
 8009186:	fba2 2303 	umull	r2, r3, r2, r3
 800918a:	095b      	lsrs	r3, r3, #5
 800918c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009190:	441c      	add	r4, r3
 8009192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009196:	2200      	movs	r2, #0
 8009198:	673b      	str	r3, [r7, #112]	@ 0x70
 800919a:	677a      	str	r2, [r7, #116]	@ 0x74
 800919c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80091a0:	4642      	mov	r2, r8
 80091a2:	464b      	mov	r3, r9
 80091a4:	1891      	adds	r1, r2, r2
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	415b      	adcs	r3, r3
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091b0:	4641      	mov	r1, r8
 80091b2:	1851      	adds	r1, r2, r1
 80091b4:	6039      	str	r1, [r7, #0]
 80091b6:	4649      	mov	r1, r9
 80091b8:	414b      	adcs	r3, r1
 80091ba:	607b      	str	r3, [r7, #4]
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091c8:	4659      	mov	r1, fp
 80091ca:	00cb      	lsls	r3, r1, #3
 80091cc:	4651      	mov	r1, sl
 80091ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091d2:	4651      	mov	r1, sl
 80091d4:	00ca      	lsls	r2, r1, #3
 80091d6:	4610      	mov	r0, r2
 80091d8:	4619      	mov	r1, r3
 80091da:	4603      	mov	r3, r0
 80091dc:	4642      	mov	r2, r8
 80091de:	189b      	adds	r3, r3, r2
 80091e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091e2:	464b      	mov	r3, r9
 80091e4:	460a      	mov	r2, r1
 80091e6:	eb42 0303 	adc.w	r3, r2, r3
 80091ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80091f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80091f8:	f04f 0200 	mov.w	r2, #0
 80091fc:	f04f 0300 	mov.w	r3, #0
 8009200:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009204:	4649      	mov	r1, r9
 8009206:	008b      	lsls	r3, r1, #2
 8009208:	4641      	mov	r1, r8
 800920a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800920e:	4641      	mov	r1, r8
 8009210:	008a      	lsls	r2, r1, #2
 8009212:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009216:	f7f7 fb91 	bl	800093c <__aeabi_uldivmod>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4b0d      	ldr	r3, [pc, #52]	@ (8009254 <UART_SetConfig+0x4e4>)
 8009220:	fba3 1302 	umull	r1, r3, r3, r2
 8009224:	095b      	lsrs	r3, r3, #5
 8009226:	2164      	movs	r1, #100	@ 0x64
 8009228:	fb01 f303 	mul.w	r3, r1, r3
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	011b      	lsls	r3, r3, #4
 8009230:	3332      	adds	r3, #50	@ 0x32
 8009232:	4a08      	ldr	r2, [pc, #32]	@ (8009254 <UART_SetConfig+0x4e4>)
 8009234:	fba2 2303 	umull	r2, r3, r2, r3
 8009238:	095b      	lsrs	r3, r3, #5
 800923a:	f003 020f 	and.w	r2, r3, #15
 800923e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4422      	add	r2, r4
 8009246:	609a      	str	r2, [r3, #8]
}
 8009248:	bf00      	nop
 800924a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800924e:	46bd      	mov	sp, r7
 8009250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009254:	51eb851f 	.word	0x51eb851f

08009258 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800926a:	2b84      	cmp	r3, #132	@ 0x84
 800926c:	d005      	beq.n	800927a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800926e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	3303      	adds	r3, #3
 8009278:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800927a:	68fb      	ldr	r3, [r7, #12]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800928c:	f000 fa7a 	bl	8009784 <vTaskStartScheduler>
  
  return osOK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	bd80      	pop	{r7, pc}

08009296 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009298:	b089      	sub	sp, #36	@ 0x24
 800929a:	af04      	add	r7, sp, #16
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d020      	beq.n	80092ea <osThreadCreate+0x54>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01c      	beq.n	80092ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685c      	ldr	r4, [r3, #4]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	691e      	ldr	r6, [r3, #16]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff ffc8 	bl	8009258 <makeFreeRtosPriority>
 80092c8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092d2:	9202      	str	r2, [sp, #8]
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	9100      	str	r1, [sp, #0]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	4632      	mov	r2, r6
 80092dc:	4629      	mov	r1, r5
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 f8a0 	bl	8009424 <xTaskCreateStatic>
 80092e4:	4603      	mov	r3, r0
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	e01c      	b.n	8009324 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685c      	ldr	r4, [r3, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092f6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff ffaa 	bl	8009258 <makeFreeRtosPriority>
 8009304:	4602      	mov	r2, r0
 8009306:	f107 030c 	add.w	r3, r7, #12
 800930a:	9301      	str	r3, [sp, #4]
 800930c:	9200      	str	r2, [sp, #0]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	4632      	mov	r2, r6
 8009312:	4629      	mov	r1, r5
 8009314:	4620      	mov	r0, r4
 8009316:	f000 f8e5 	bl	80094e4 <xTaskCreate>
 800931a:	4603      	mov	r3, r0
 800931c:	2b01      	cmp	r3, #1
 800931e:	d001      	beq.n	8009324 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009320:	2300      	movs	r3, #0
 8009322:	e000      	b.n	8009326 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009324:	68fb      	ldr	r3, [r7, #12]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800932e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f103 0208 	add.w	r2, r3, #8
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f04f 32ff 	mov.w	r2, #4294967295
 8009346:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f103 0208 	add.w	r2, r3, #8
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f103 0208 	add.w	r2, r3, #8
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	601a      	str	r2, [r3, #0]
}
 80093c4:	bf00      	nop
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	6892      	ldr	r2, [r2, #8]
 80093e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6852      	ldr	r2, [r2, #4]
 80093f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d103      	bne.n	8009404 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	1e5a      	subs	r2, r3, #1
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08e      	sub	sp, #56	@ 0x38
 8009428:	af04      	add	r7, sp, #16
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10b      	bne.n	8009450 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800944a:	bf00      	nop
 800944c:	bf00      	nop
 800944e:	e7fd      	b.n	800944c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10b      	bne.n	800946e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	61fb      	str	r3, [r7, #28]
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	e7fd      	b.n	800946a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800946e:	23a0      	movs	r3, #160	@ 0xa0
 8009470:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2ba0      	cmp	r3, #160	@ 0xa0
 8009476:	d00b      	beq.n	8009490 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	61bb      	str	r3, [r7, #24]
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009490:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01e      	beq.n	80094d6 <xTaskCreateStatic+0xb2>
 8009498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800949a:	2b00      	cmp	r3, #0
 800949c:	d01b      	beq.n	80094d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800949e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094b0:	2300      	movs	r3, #0
 80094b2:	9303      	str	r3, [sp, #12]
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	9302      	str	r3, [sp, #8]
 80094b8:	f107 0314 	add.w	r3, r7, #20
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 f851 	bl	8009570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094d0:	f000 f8ee 	bl	80096b0 <prvAddNewTaskToReadyList>
 80094d4:	e001      	b.n	80094da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80094da:	697b      	ldr	r3, [r7, #20]
	}
 80094dc:	4618      	mov	r0, r3
 80094de:	3728      	adds	r7, #40	@ 0x28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08c      	sub	sp, #48	@ 0x30
 80094e8:	af04      	add	r7, sp, #16
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	603b      	str	r3, [r7, #0]
 80094f0:	4613      	mov	r3, r2
 80094f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80094f4:	88fb      	ldrh	r3, [r7, #6]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 fe75 	bl	800a1e8 <pvPortMalloc>
 80094fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009506:	20a0      	movs	r0, #160	@ 0xa0
 8009508:	f000 fe6e 	bl	800a1e8 <pvPortMalloc>
 800950c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d003      	beq.n	800951c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	631a      	str	r2, [r3, #48]	@ 0x30
 800951a:	e005      	b.n	8009528 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800951c:	6978      	ldr	r0, [r7, #20]
 800951e:	f000 ff31 	bl	800a384 <vPortFree>
 8009522:	e001      	b.n	8009528 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009524:	2300      	movs	r3, #0
 8009526:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d017      	beq.n	800955e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009536:	88fa      	ldrh	r2, [r7, #6]
 8009538:	2300      	movs	r3, #0
 800953a:	9303      	str	r3, [sp, #12]
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	9302      	str	r3, [sp, #8]
 8009540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	68b9      	ldr	r1, [r7, #8]
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f80f 	bl	8009570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009552:	69f8      	ldr	r0, [r7, #28]
 8009554:	f000 f8ac 	bl	80096b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009558:	2301      	movs	r3, #1
 800955a:	61bb      	str	r3, [r7, #24]
 800955c:	e002      	b.n	8009564 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800955e:	f04f 33ff 	mov.w	r3, #4294967295
 8009562:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009564:	69bb      	ldr	r3, [r7, #24]
	}
 8009566:	4618      	mov	r0, r3
 8009568:	3720      	adds	r7, #32
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009588:	3b01      	subs	r3, #1
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	f023 0307 	bic.w	r3, r3, #7
 8009596:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00b      	beq.n	80095ba <prvInitialiseNewTask+0x4a>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	617b      	str	r3, [r7, #20]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d01f      	beq.n	8009600 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095c0:	2300      	movs	r3, #0
 80095c2:	61fb      	str	r3, [r7, #28]
 80095c4:	e012      	b.n	80095ec <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	4413      	add	r3, r2
 80095cc:	7819      	ldrb	r1, [r3, #0]
 80095ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	4413      	add	r3, r2
 80095d4:	3334      	adds	r3, #52	@ 0x34
 80095d6:	460a      	mov	r2, r1
 80095d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	4413      	add	r3, r2
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d006      	beq.n	80095f4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	3301      	adds	r3, #1
 80095ea:	61fb      	str	r3, [r7, #28]
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	2b0f      	cmp	r3, #15
 80095f0:	d9e9      	bls.n	80095c6 <prvInitialiseNewTask+0x56>
 80095f2:	e000      	b.n	80095f6 <prvInitialiseNewTask+0x86>
			{
				break;
 80095f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80095fe:	e003      	b.n	8009608 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960a:	2b06      	cmp	r3, #6
 800960c:	d901      	bls.n	8009612 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800960e:	2306      	movs	r3, #6
 8009610:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009616:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800961c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800961e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009620:	2200      	movs	r2, #0
 8009622:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009626:	3304      	adds	r3, #4
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fea0 	bl	800936e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	3318      	adds	r3, #24
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff fe9b 	bl	800936e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800963c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800963e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009640:	f1c3 0207 	rsb	r2, r3, #7
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800964c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009650:	2200      	movs	r2, #0
 8009652:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	2200      	movs	r2, #0
 800965a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800965e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009660:	334c      	adds	r3, #76	@ 0x4c
 8009662:	224c      	movs	r2, #76	@ 0x4c
 8009664:	2100      	movs	r1, #0
 8009666:	4618      	mov	r0, r3
 8009668:	f001 f800 	bl	800a66c <memset>
 800966c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966e:	4a0d      	ldr	r2, [pc, #52]	@ (80096a4 <prvInitialiseNewTask+0x134>)
 8009670:	651a      	str	r2, [r3, #80]	@ 0x50
 8009672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009674:	4a0c      	ldr	r2, [pc, #48]	@ (80096a8 <prvInitialiseNewTask+0x138>)
 8009676:	655a      	str	r2, [r3, #84]	@ 0x54
 8009678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967a:	4a0c      	ldr	r2, [pc, #48]	@ (80096ac <prvInitialiseNewTask+0x13c>)
 800967c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	68f9      	ldr	r1, [r7, #12]
 8009682:	69b8      	ldr	r0, [r7, #24]
 8009684:	f000 fb9e 	bl	8009dc4 <pxPortInitialiseStack>
 8009688:	4602      	mov	r2, r0
 800968a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800968e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800969a:	bf00      	nop
 800969c:	3720      	adds	r7, #32
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	200043c4 	.word	0x200043c4
 80096a8:	2000442c 	.word	0x2000442c
 80096ac:	20004494 	.word	0x20004494

080096b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096b8:	f000 fcb6 	bl	800a028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096bc:	4b2a      	ldr	r3, [pc, #168]	@ (8009768 <prvAddNewTaskToReadyList+0xb8>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3301      	adds	r3, #1
 80096c2:	4a29      	ldr	r2, [pc, #164]	@ (8009768 <prvAddNewTaskToReadyList+0xb8>)
 80096c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096c6:	4b29      	ldr	r3, [pc, #164]	@ (800976c <prvAddNewTaskToReadyList+0xbc>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d109      	bne.n	80096e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096ce:	4a27      	ldr	r2, [pc, #156]	@ (800976c <prvAddNewTaskToReadyList+0xbc>)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80096d4:	4b24      	ldr	r3, [pc, #144]	@ (8009768 <prvAddNewTaskToReadyList+0xb8>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d110      	bne.n	80096fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80096dc:	f000 faae 	bl	8009c3c <prvInitialiseTaskLists>
 80096e0:	e00d      	b.n	80096fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80096e2:	4b23      	ldr	r3, [pc, #140]	@ (8009770 <prvAddNewTaskToReadyList+0xc0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d109      	bne.n	80096fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80096ea:	4b20      	ldr	r3, [pc, #128]	@ (800976c <prvAddNewTaskToReadyList+0xbc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d802      	bhi.n	80096fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80096f8:	4a1c      	ldr	r2, [pc, #112]	@ (800976c <prvAddNewTaskToReadyList+0xbc>)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80096fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009774 <prvAddNewTaskToReadyList+0xc4>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	4a1b      	ldr	r2, [pc, #108]	@ (8009774 <prvAddNewTaskToReadyList+0xc4>)
 8009706:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970c:	2201      	movs	r2, #1
 800970e:	409a      	lsls	r2, r3
 8009710:	4b19      	ldr	r3, [pc, #100]	@ (8009778 <prvAddNewTaskToReadyList+0xc8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4313      	orrs	r3, r2
 8009716:	4a18      	ldr	r2, [pc, #96]	@ (8009778 <prvAddNewTaskToReadyList+0xc8>)
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4a15      	ldr	r2, [pc, #84]	@ (800977c <prvAddNewTaskToReadyList+0xcc>)
 8009728:	441a      	add	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3304      	adds	r3, #4
 800972e:	4619      	mov	r1, r3
 8009730:	4610      	mov	r0, r2
 8009732:	f7ff fe29 	bl	8009388 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009736:	f000 fca9 	bl	800a08c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800973a:	4b0d      	ldr	r3, [pc, #52]	@ (8009770 <prvAddNewTaskToReadyList+0xc0>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00e      	beq.n	8009760 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009742:	4b0a      	ldr	r3, [pc, #40]	@ (800976c <prvAddNewTaskToReadyList+0xbc>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974c:	429a      	cmp	r2, r3
 800974e:	d207      	bcs.n	8009760 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009750:	4b0b      	ldr	r3, [pc, #44]	@ (8009780 <prvAddNewTaskToReadyList+0xd0>)
 8009752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20000770 	.word	0x20000770
 800976c:	20000670 	.word	0x20000670
 8009770:	2000077c 	.word	0x2000077c
 8009774:	2000078c 	.word	0x2000078c
 8009778:	20000778 	.word	0x20000778
 800977c:	20000674 	.word	0x20000674
 8009780:	e000ed04 	.word	0xe000ed04

08009784 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	@ 0x28
 8009788:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800978e:	2300      	movs	r3, #0
 8009790:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009792:	463a      	mov	r2, r7
 8009794:	1d39      	adds	r1, r7, #4
 8009796:	f107 0308 	add.w	r3, r7, #8
 800979a:	4618      	mov	r0, r3
 800979c:	f7f7 fa46 	bl	8000c2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	9202      	str	r2, [sp, #8]
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	2300      	movs	r3, #0
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	2300      	movs	r3, #0
 80097b0:	460a      	mov	r2, r1
 80097b2:	4921      	ldr	r1, [pc, #132]	@ (8009838 <vTaskStartScheduler+0xb4>)
 80097b4:	4821      	ldr	r0, [pc, #132]	@ (800983c <vTaskStartScheduler+0xb8>)
 80097b6:	f7ff fe35 	bl	8009424 <xTaskCreateStatic>
 80097ba:	4603      	mov	r3, r0
 80097bc:	4a20      	ldr	r2, [pc, #128]	@ (8009840 <vTaskStartScheduler+0xbc>)
 80097be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80097c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009840 <vTaskStartScheduler+0xbc>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80097c8:	2301      	movs	r3, #1
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	e001      	b.n	80097d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d11b      	bne.n	8009810 <vTaskStartScheduler+0x8c>
	__asm volatile
 80097d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	613b      	str	r3, [r7, #16]
}
 80097ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097ec:	4b15      	ldr	r3, [pc, #84]	@ (8009844 <vTaskStartScheduler+0xc0>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	334c      	adds	r3, #76	@ 0x4c
 80097f2:	4a15      	ldr	r2, [pc, #84]	@ (8009848 <vTaskStartScheduler+0xc4>)
 80097f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097f6:	4b15      	ldr	r3, [pc, #84]	@ (800984c <vTaskStartScheduler+0xc8>)
 80097f8:	f04f 32ff 	mov.w	r2, #4294967295
 80097fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097fe:	4b14      	ldr	r3, [pc, #80]	@ (8009850 <vTaskStartScheduler+0xcc>)
 8009800:	2201      	movs	r2, #1
 8009802:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009804:	4b13      	ldr	r3, [pc, #76]	@ (8009854 <vTaskStartScheduler+0xd0>)
 8009806:	2200      	movs	r2, #0
 8009808:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800980a:	f000 fb69 	bl	8009ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800980e:	e00f      	b.n	8009830 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009816:	d10b      	bne.n	8009830 <vTaskStartScheduler+0xac>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	60fb      	str	r3, [r7, #12]
}
 800982a:	bf00      	nop
 800982c:	bf00      	nop
 800982e:	e7fd      	b.n	800982c <vTaskStartScheduler+0xa8>
}
 8009830:	bf00      	nop
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	0800b1f0 	.word	0x0800b1f0
 800983c:	08009c0d 	.word	0x08009c0d
 8009840:	20000794 	.word	0x20000794
 8009844:	20000670 	.word	0x20000670
 8009848:	20000028 	.word	0x20000028
 800984c:	20000790 	.word	0x20000790
 8009850:	2000077c 	.word	0x2000077c
 8009854:	20000774 	.word	0x20000774

08009858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009858:	b480      	push	{r7}
 800985a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800985c:	4b04      	ldr	r3, [pc, #16]	@ (8009870 <vTaskSuspendAll+0x18>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	4a03      	ldr	r2, [pc, #12]	@ (8009870 <vTaskSuspendAll+0x18>)
 8009864:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009866:	bf00      	nop
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	20000798 	.word	0x20000798

08009874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800987e:	2300      	movs	r3, #0
 8009880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009882:	4b42      	ldr	r3, [pc, #264]	@ (800998c <xTaskResumeAll+0x118>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10b      	bne.n	80098a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	603b      	str	r3, [r7, #0]
}
 800989c:	bf00      	nop
 800989e:	bf00      	nop
 80098a0:	e7fd      	b.n	800989e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80098a2:	f000 fbc1 	bl	800a028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80098a6:	4b39      	ldr	r3, [pc, #228]	@ (800998c <xTaskResumeAll+0x118>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	4a37      	ldr	r2, [pc, #220]	@ (800998c <xTaskResumeAll+0x118>)
 80098ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098b0:	4b36      	ldr	r3, [pc, #216]	@ (800998c <xTaskResumeAll+0x118>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d161      	bne.n	800997c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098b8:	4b35      	ldr	r3, [pc, #212]	@ (8009990 <xTaskResumeAll+0x11c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d05d      	beq.n	800997c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098c0:	e02e      	b.n	8009920 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c2:	4b34      	ldr	r3, [pc, #208]	@ (8009994 <xTaskResumeAll+0x120>)
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3318      	adds	r3, #24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fd7e 	bl	80093d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3304      	adds	r3, #4
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff fd79 	bl	80093d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e2:	2201      	movs	r2, #1
 80098e4:	409a      	lsls	r2, r3
 80098e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009998 <xTaskResumeAll+0x124>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	4a2a      	ldr	r2, [pc, #168]	@ (8009998 <xTaskResumeAll+0x124>)
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4a27      	ldr	r2, [pc, #156]	@ (800999c <xTaskResumeAll+0x128>)
 80098fe:	441a      	add	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3304      	adds	r3, #4
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f7ff fd3e 	bl	8009388 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009910:	4b23      	ldr	r3, [pc, #140]	@ (80099a0 <xTaskResumeAll+0x12c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009916:	429a      	cmp	r2, r3
 8009918:	d302      	bcc.n	8009920 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800991a:	4b22      	ldr	r3, [pc, #136]	@ (80099a4 <xTaskResumeAll+0x130>)
 800991c:	2201      	movs	r2, #1
 800991e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009920:	4b1c      	ldr	r3, [pc, #112]	@ (8009994 <xTaskResumeAll+0x120>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1cc      	bne.n	80098c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800992e:	f000 fa29 	bl	8009d84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009932:	4b1d      	ldr	r3, [pc, #116]	@ (80099a8 <xTaskResumeAll+0x134>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d010      	beq.n	8009960 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800993e:	f000 f847 	bl	80099d0 <xTaskIncrementTick>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009948:	4b16      	ldr	r3, [pc, #88]	@ (80099a4 <xTaskResumeAll+0x130>)
 800994a:	2201      	movs	r2, #1
 800994c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3b01      	subs	r3, #1
 8009952:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f1      	bne.n	800993e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800995a:	4b13      	ldr	r3, [pc, #76]	@ (80099a8 <xTaskResumeAll+0x134>)
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009960:	4b10      	ldr	r3, [pc, #64]	@ (80099a4 <xTaskResumeAll+0x130>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009968:	2301      	movs	r3, #1
 800996a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800996c:	4b0f      	ldr	r3, [pc, #60]	@ (80099ac <xTaskResumeAll+0x138>)
 800996e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800997c:	f000 fb86 	bl	800a08c <vPortExitCritical>

	return xAlreadyYielded;
 8009980:	68bb      	ldr	r3, [r7, #8]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20000798 	.word	0x20000798
 8009990:	20000770 	.word	0x20000770
 8009994:	20000730 	.word	0x20000730
 8009998:	20000778 	.word	0x20000778
 800999c:	20000674 	.word	0x20000674
 80099a0:	20000670 	.word	0x20000670
 80099a4:	20000784 	.word	0x20000784
 80099a8:	20000780 	.word	0x20000780
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80099b6:	4b05      	ldr	r3, [pc, #20]	@ (80099cc <xTaskGetTickCount+0x1c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80099bc:	687b      	ldr	r3, [r7, #4]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	20000774 	.word	0x20000774

080099d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099da:	4b4f      	ldr	r3, [pc, #316]	@ (8009b18 <xTaskIncrementTick+0x148>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f040 808f 	bne.w	8009b02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099e4:	4b4d      	ldr	r3, [pc, #308]	@ (8009b1c <xTaskIncrementTick+0x14c>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3301      	adds	r3, #1
 80099ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099ec:	4a4b      	ldr	r2, [pc, #300]	@ (8009b1c <xTaskIncrementTick+0x14c>)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d121      	bne.n	8009a3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80099f8:	4b49      	ldr	r3, [pc, #292]	@ (8009b20 <xTaskIncrementTick+0x150>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00b      	beq.n	8009a1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	603b      	str	r3, [r7, #0]
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
 8009a18:	e7fd      	b.n	8009a16 <xTaskIncrementTick+0x46>
 8009a1a:	4b41      	ldr	r3, [pc, #260]	@ (8009b20 <xTaskIncrementTick+0x150>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	4b40      	ldr	r3, [pc, #256]	@ (8009b24 <xTaskIncrementTick+0x154>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a3e      	ldr	r2, [pc, #248]	@ (8009b20 <xTaskIncrementTick+0x150>)
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	4a3e      	ldr	r2, [pc, #248]	@ (8009b24 <xTaskIncrementTick+0x154>)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8009b28 <xTaskIncrementTick+0x158>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3301      	adds	r3, #1
 8009a34:	4a3c      	ldr	r2, [pc, #240]	@ (8009b28 <xTaskIncrementTick+0x158>)
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	f000 f9a4 	bl	8009d84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8009b2c <xTaskIncrementTick+0x15c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d348      	bcc.n	8009ad8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a46:	4b36      	ldr	r3, [pc, #216]	@ (8009b20 <xTaskIncrementTick+0x150>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d104      	bne.n	8009a5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a50:	4b36      	ldr	r3, [pc, #216]	@ (8009b2c <xTaskIncrementTick+0x15c>)
 8009a52:	f04f 32ff 	mov.w	r2, #4294967295
 8009a56:	601a      	str	r2, [r3, #0]
					break;
 8009a58:	e03e      	b.n	8009ad8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a5a:	4b31      	ldr	r3, [pc, #196]	@ (8009b20 <xTaskIncrementTick+0x150>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d203      	bcs.n	8009a7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a72:	4a2e      	ldr	r2, [pc, #184]	@ (8009b2c <xTaskIncrementTick+0x15c>)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a78:	e02e      	b.n	8009ad8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7ff fca6 	bl	80093d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d004      	beq.n	8009a96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	3318      	adds	r3, #24
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7ff fc9d 	bl	80093d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	409a      	lsls	r2, r3
 8009a9e:	4b24      	ldr	r3, [pc, #144]	@ (8009b30 <xTaskIncrementTick+0x160>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	4a22      	ldr	r2, [pc, #136]	@ (8009b30 <xTaskIncrementTick+0x160>)
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8009b34 <xTaskIncrementTick+0x164>)
 8009ab6:	441a      	add	r2, r3
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f7ff fc62 	bl	8009388 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8009b38 <xTaskIncrementTick+0x168>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d3b9      	bcc.n	8009a46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ad6:	e7b6      	b.n	8009a46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ad8:	4b17      	ldr	r3, [pc, #92]	@ (8009b38 <xTaskIncrementTick+0x168>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ade:	4915      	ldr	r1, [pc, #84]	@ (8009b34 <xTaskIncrementTick+0x164>)
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	440b      	add	r3, r1
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d901      	bls.n	8009af4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009af0:	2301      	movs	r3, #1
 8009af2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009af4:	4b11      	ldr	r3, [pc, #68]	@ (8009b3c <xTaskIncrementTick+0x16c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009afc:	2301      	movs	r3, #1
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	e004      	b.n	8009b0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009b02:	4b0f      	ldr	r3, [pc, #60]	@ (8009b40 <xTaskIncrementTick+0x170>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3301      	adds	r3, #1
 8009b08:	4a0d      	ldr	r2, [pc, #52]	@ (8009b40 <xTaskIncrementTick+0x170>)
 8009b0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009b0c:	697b      	ldr	r3, [r7, #20]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20000798 	.word	0x20000798
 8009b1c:	20000774 	.word	0x20000774
 8009b20:	20000728 	.word	0x20000728
 8009b24:	2000072c 	.word	0x2000072c
 8009b28:	20000788 	.word	0x20000788
 8009b2c:	20000790 	.word	0x20000790
 8009b30:	20000778 	.word	0x20000778
 8009b34:	20000674 	.word	0x20000674
 8009b38:	20000670 	.word	0x20000670
 8009b3c:	20000784 	.word	0x20000784
 8009b40:	20000780 	.word	0x20000780

08009b44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b087      	sub	sp, #28
 8009b48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8009bf4 <vTaskSwitchContext+0xb0>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b52:	4b29      	ldr	r3, [pc, #164]	@ (8009bf8 <vTaskSwitchContext+0xb4>)
 8009b54:	2201      	movs	r2, #1
 8009b56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b58:	e045      	b.n	8009be6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009b5a:	4b27      	ldr	r3, [pc, #156]	@ (8009bf8 <vTaskSwitchContext+0xb4>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b60:	4b26      	ldr	r3, [pc, #152]	@ (8009bfc <vTaskSwitchContext+0xb8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	fab3 f383 	clz	r3, r3
 8009b6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b6e:	7afb      	ldrb	r3, [r7, #11]
 8009b70:	f1c3 031f 	rsb	r3, r3, #31
 8009b74:	617b      	str	r3, [r7, #20]
 8009b76:	4922      	ldr	r1, [pc, #136]	@ (8009c00 <vTaskSwitchContext+0xbc>)
 8009b78:	697a      	ldr	r2, [r7, #20]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10b      	bne.n	8009ba2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	607b      	str	r3, [r7, #4]
}
 8009b9c:	bf00      	nop
 8009b9e:	bf00      	nop
 8009ba0:	e7fd      	b.n	8009b9e <vTaskSwitchContext+0x5a>
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4a14      	ldr	r2, [pc, #80]	@ (8009c00 <vTaskSwitchContext+0xbc>)
 8009bae:	4413      	add	r3, r2
 8009bb0:	613b      	str	r3, [r7, #16]
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	605a      	str	r2, [r3, #4]
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d104      	bne.n	8009bd2 <vTaskSwitchContext+0x8e>
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	605a      	str	r2, [r3, #4]
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8009c04 <vTaskSwitchContext+0xc0>)
 8009bda:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bdc:	4b09      	ldr	r3, [pc, #36]	@ (8009c04 <vTaskSwitchContext+0xc0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	334c      	adds	r3, #76	@ 0x4c
 8009be2:	4a09      	ldr	r2, [pc, #36]	@ (8009c08 <vTaskSwitchContext+0xc4>)
 8009be4:	6013      	str	r3, [r2, #0]
}
 8009be6:	bf00      	nop
 8009be8:	371c      	adds	r7, #28
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20000798 	.word	0x20000798
 8009bf8:	20000784 	.word	0x20000784
 8009bfc:	20000778 	.word	0x20000778
 8009c00:	20000674 	.word	0x20000674
 8009c04:	20000670 	.word	0x20000670
 8009c08:	20000028 	.word	0x20000028

08009c0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c14:	f000 f852 	bl	8009cbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c18:	4b06      	ldr	r3, [pc, #24]	@ (8009c34 <prvIdleTask+0x28>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d9f9      	bls.n	8009c14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c20:	4b05      	ldr	r3, [pc, #20]	@ (8009c38 <prvIdleTask+0x2c>)
 8009c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c30:	e7f0      	b.n	8009c14 <prvIdleTask+0x8>
 8009c32:	bf00      	nop
 8009c34:	20000674 	.word	0x20000674
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c42:	2300      	movs	r3, #0
 8009c44:	607b      	str	r3, [r7, #4]
 8009c46:	e00c      	b.n	8009c62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4a12      	ldr	r2, [pc, #72]	@ (8009c9c <prvInitialiseTaskLists+0x60>)
 8009c54:	4413      	add	r3, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff fb69 	bl	800932e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	607b      	str	r3, [r7, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b06      	cmp	r3, #6
 8009c66:	d9ef      	bls.n	8009c48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c68:	480d      	ldr	r0, [pc, #52]	@ (8009ca0 <prvInitialiseTaskLists+0x64>)
 8009c6a:	f7ff fb60 	bl	800932e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c6e:	480d      	ldr	r0, [pc, #52]	@ (8009ca4 <prvInitialiseTaskLists+0x68>)
 8009c70:	f7ff fb5d 	bl	800932e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c74:	480c      	ldr	r0, [pc, #48]	@ (8009ca8 <prvInitialiseTaskLists+0x6c>)
 8009c76:	f7ff fb5a 	bl	800932e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c7a:	480c      	ldr	r0, [pc, #48]	@ (8009cac <prvInitialiseTaskLists+0x70>)
 8009c7c:	f7ff fb57 	bl	800932e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c80:	480b      	ldr	r0, [pc, #44]	@ (8009cb0 <prvInitialiseTaskLists+0x74>)
 8009c82:	f7ff fb54 	bl	800932e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c86:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb4 <prvInitialiseTaskLists+0x78>)
 8009c88:	4a05      	ldr	r2, [pc, #20]	@ (8009ca0 <prvInitialiseTaskLists+0x64>)
 8009c8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb8 <prvInitialiseTaskLists+0x7c>)
 8009c8e:	4a05      	ldr	r2, [pc, #20]	@ (8009ca4 <prvInitialiseTaskLists+0x68>)
 8009c90:	601a      	str	r2, [r3, #0]
}
 8009c92:	bf00      	nop
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000674 	.word	0x20000674
 8009ca0:	20000700 	.word	0x20000700
 8009ca4:	20000714 	.word	0x20000714
 8009ca8:	20000730 	.word	0x20000730
 8009cac:	20000744 	.word	0x20000744
 8009cb0:	2000075c 	.word	0x2000075c
 8009cb4:	20000728 	.word	0x20000728
 8009cb8:	2000072c 	.word	0x2000072c

08009cbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cc2:	e019      	b.n	8009cf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cc4:	f000 f9b0 	bl	800a028 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cc8:	4b10      	ldr	r3, [pc, #64]	@ (8009d0c <prvCheckTasksWaitingTermination+0x50>)
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff fb7b 	bl	80093d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cda:	4b0d      	ldr	r3, [pc, #52]	@ (8009d10 <prvCheckTasksWaitingTermination+0x54>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8009d10 <prvCheckTasksWaitingTermination+0x54>)
 8009ce2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8009d14 <prvCheckTasksWaitingTermination+0x58>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	4a0a      	ldr	r2, [pc, #40]	@ (8009d14 <prvCheckTasksWaitingTermination+0x58>)
 8009cec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cee:	f000 f9cd 	bl	800a08c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f810 	bl	8009d18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cf8:	4b06      	ldr	r3, [pc, #24]	@ (8009d14 <prvCheckTasksWaitingTermination+0x58>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e1      	bne.n	8009cc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d00:	bf00      	nop
 8009d02:	bf00      	nop
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000744 	.word	0x20000744
 8009d10:	20000770 	.word	0x20000770
 8009d14:	20000758 	.word	0x20000758

08009d18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	334c      	adds	r3, #76	@ 0x4c
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 fca9 	bl	800a67c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d108      	bne.n	8009d46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fb23 	bl	800a384 <vPortFree>
				vPortFree( pxTCB );
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fb20 	bl	800a384 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d44:	e019      	b.n	8009d7a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d103      	bne.n	8009d58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fb17 	bl	800a384 <vPortFree>
	}
 8009d56:	e010      	b.n	8009d7a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d00b      	beq.n	8009d7a <prvDeleteTCB+0x62>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	60fb      	str	r3, [r7, #12]
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	e7fd      	b.n	8009d76 <prvDeleteTCB+0x5e>
	}
 8009d7a:	bf00      	nop
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
	...

08009d84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8009dbc <prvResetNextTaskUnblockTime+0x38>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d104      	bne.n	8009d9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d94:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc0 <prvResetNextTaskUnblockTime+0x3c>)
 8009d96:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d9c:	e008      	b.n	8009db0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d9e:	4b07      	ldr	r3, [pc, #28]	@ (8009dbc <prvResetNextTaskUnblockTime+0x38>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	4a04      	ldr	r2, [pc, #16]	@ (8009dc0 <prvResetNextTaskUnblockTime+0x3c>)
 8009dae:	6013      	str	r3, [r2, #0]
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	20000728 	.word	0x20000728
 8009dc0:	20000790 	.word	0x20000790

08009dc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	3b04      	subs	r3, #4
 8009dd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3b04      	subs	r3, #4
 8009de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	f023 0201 	bic.w	r2, r3, #1
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3b04      	subs	r3, #4
 8009df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009df4:	4a0c      	ldr	r2, [pc, #48]	@ (8009e28 <pxPortInitialiseStack+0x64>)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3b14      	subs	r3, #20
 8009dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3b04      	subs	r3, #4
 8009e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f06f 0202 	mvn.w	r2, #2
 8009e12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3b20      	subs	r3, #32
 8009e18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	08009e2d 	.word	0x08009e2d

08009e2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e36:	4b13      	ldr	r3, [pc, #76]	@ (8009e84 <prvTaskExitError+0x58>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3e:	d00b      	beq.n	8009e58 <prvTaskExitError+0x2c>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	60fb      	str	r3, [r7, #12]
}
 8009e52:	bf00      	nop
 8009e54:	bf00      	nop
 8009e56:	e7fd      	b.n	8009e54 <prvTaskExitError+0x28>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	60bb      	str	r3, [r7, #8]
}
 8009e6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e6c:	bf00      	nop
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d0fc      	beq.n	8009e6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000024 	.word	0x20000024
	...

08009e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e90:	4b07      	ldr	r3, [pc, #28]	@ (8009eb0 <pxCurrentTCBConst2>)
 8009e92:	6819      	ldr	r1, [r3, #0]
 8009e94:	6808      	ldr	r0, [r1, #0]
 8009e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9a:	f380 8809 	msr	PSP, r0
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f04f 0000 	mov.w	r0, #0
 8009ea6:	f380 8811 	msr	BASEPRI, r0
 8009eaa:	4770      	bx	lr
 8009eac:	f3af 8000 	nop.w

08009eb0 <pxCurrentTCBConst2>:
 8009eb0:	20000670 	.word	0x20000670
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop

08009eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009eb8:	4808      	ldr	r0, [pc, #32]	@ (8009edc <prvPortStartFirstTask+0x24>)
 8009eba:	6800      	ldr	r0, [r0, #0]
 8009ebc:	6800      	ldr	r0, [r0, #0]
 8009ebe:	f380 8808 	msr	MSP, r0
 8009ec2:	f04f 0000 	mov.w	r0, #0
 8009ec6:	f380 8814 	msr	CONTROL, r0
 8009eca:	b662      	cpsie	i
 8009ecc:	b661      	cpsie	f
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	df00      	svc	0
 8009ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eda:	bf00      	nop
 8009edc:	e000ed08 	.word	0xe000ed08

08009ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ee6:	4b47      	ldr	r3, [pc, #284]	@ (800a004 <xPortStartScheduler+0x124>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a47      	ldr	r2, [pc, #284]	@ (800a008 <xPortStartScheduler+0x128>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d10b      	bne.n	8009f08 <xPortStartScheduler+0x28>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
 8009f04:	bf00      	nop
 8009f06:	e7fd      	b.n	8009f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f08:	4b3e      	ldr	r3, [pc, #248]	@ (800a004 <xPortStartScheduler+0x124>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800a00c <xPortStartScheduler+0x12c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d10b      	bne.n	8009f2a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	60fb      	str	r3, [r7, #12]
}
 8009f24:	bf00      	nop
 8009f26:	bf00      	nop
 8009f28:	e7fd      	b.n	8009f26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f2a:	4b39      	ldr	r3, [pc, #228]	@ (800a010 <xPortStartScheduler+0x130>)
 8009f2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	22ff      	movs	r2, #255	@ 0xff
 8009f3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	4b31      	ldr	r3, [pc, #196]	@ (800a014 <xPortStartScheduler+0x134>)
 8009f50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f52:	4b31      	ldr	r3, [pc, #196]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f54:	2207      	movs	r2, #7
 8009f56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f58:	e009      	b.n	8009f6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f5a:	4b2f      	ldr	r3, [pc, #188]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	4a2d      	ldr	r2, [pc, #180]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f76:	2b80      	cmp	r3, #128	@ 0x80
 8009f78:	d0ef      	beq.n	8009f5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f7a:	4b27      	ldr	r3, [pc, #156]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f1c3 0307 	rsb	r3, r3, #7
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	d00b      	beq.n	8009f9e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	60bb      	str	r3, [r7, #8]
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	e7fd      	b.n	8009f9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f9e:	4b1e      	ldr	r3, [pc, #120]	@ (800a018 <xPortStartScheduler+0x138>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	021b      	lsls	r3, r3, #8
 8009fa4:	4a1c      	ldr	r2, [pc, #112]	@ (800a018 <xPortStartScheduler+0x138>)
 8009fa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fa8:	4b1b      	ldr	r3, [pc, #108]	@ (800a018 <xPortStartScheduler+0x138>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fb0:	4a19      	ldr	r2, [pc, #100]	@ (800a018 <xPortStartScheduler+0x138>)
 8009fb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fbc:	4b17      	ldr	r3, [pc, #92]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a16      	ldr	r2, [pc, #88]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fc8:	4b14      	ldr	r3, [pc, #80]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a13      	ldr	r2, [pc, #76]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fd4:	f000 f8da 	bl	800a18c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fd8:	4b11      	ldr	r3, [pc, #68]	@ (800a020 <xPortStartScheduler+0x140>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fde:	f000 f8f9 	bl	800a1d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fe2:	4b10      	ldr	r3, [pc, #64]	@ (800a024 <xPortStartScheduler+0x144>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a0f      	ldr	r2, [pc, #60]	@ (800a024 <xPortStartScheduler+0x144>)
 8009fe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fee:	f7ff ff63 	bl	8009eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ff2:	f7ff fda7 	bl	8009b44 <vTaskSwitchContext>
	prvTaskExitError();
 8009ff6:	f7ff ff19 	bl	8009e2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3718      	adds	r7, #24
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	e000ed00 	.word	0xe000ed00
 800a008:	410fc271 	.word	0x410fc271
 800a00c:	410fc270 	.word	0x410fc270
 800a010:	e000e400 	.word	0xe000e400
 800a014:	2000079c 	.word	0x2000079c
 800a018:	200007a0 	.word	0x200007a0
 800a01c:	e000ed20 	.word	0xe000ed20
 800a020:	20000024 	.word	0x20000024
 800a024:	e000ef34 	.word	0xe000ef34

0800a028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
}
 800a040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a042:	4b10      	ldr	r3, [pc, #64]	@ (800a084 <vPortEnterCritical+0x5c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3301      	adds	r3, #1
 800a048:	4a0e      	ldr	r2, [pc, #56]	@ (800a084 <vPortEnterCritical+0x5c>)
 800a04a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a04c:	4b0d      	ldr	r3, [pc, #52]	@ (800a084 <vPortEnterCritical+0x5c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d110      	bne.n	800a076 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a054:	4b0c      	ldr	r3, [pc, #48]	@ (800a088 <vPortEnterCritical+0x60>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <vPortEnterCritical+0x4e>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	603b      	str	r3, [r7, #0]
}
 800a070:	bf00      	nop
 800a072:	bf00      	nop
 800a074:	e7fd      	b.n	800a072 <vPortEnterCritical+0x4a>
	}
}
 800a076:	bf00      	nop
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20000024 	.word	0x20000024
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a092:	4b12      	ldr	r3, [pc, #72]	@ (800a0dc <vPortExitCritical+0x50>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10b      	bne.n	800a0b2 <vPortExitCritical+0x26>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	607b      	str	r3, [r7, #4]
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	e7fd      	b.n	800a0ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0dc <vPortExitCritical+0x50>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	4a08      	ldr	r2, [pc, #32]	@ (800a0dc <vPortExitCritical+0x50>)
 800a0ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0bc:	4b07      	ldr	r3, [pc, #28]	@ (800a0dc <vPortExitCritical+0x50>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d105      	bne.n	800a0d0 <vPortExitCritical+0x44>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20000024 	.word	0x20000024

0800a0e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0e0:	f3ef 8009 	mrs	r0, PSP
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	4b15      	ldr	r3, [pc, #84]	@ (800a140 <pxCurrentTCBConst>)
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	f01e 0f10 	tst.w	lr, #16
 800a0f0:	bf08      	it	eq
 800a0f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fa:	6010      	str	r0, [r2, #0]
 800a0fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a104:	f380 8811 	msr	BASEPRI, r0
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f7ff fd18 	bl	8009b44 <vTaskSwitchContext>
 800a114:	f04f 0000 	mov.w	r0, #0
 800a118:	f380 8811 	msr	BASEPRI, r0
 800a11c:	bc09      	pop	{r0, r3}
 800a11e:	6819      	ldr	r1, [r3, #0]
 800a120:	6808      	ldr	r0, [r1, #0]
 800a122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a126:	f01e 0f10 	tst.w	lr, #16
 800a12a:	bf08      	it	eq
 800a12c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a130:	f380 8809 	msr	PSP, r0
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	f3af 8000 	nop.w

0800a140 <pxCurrentTCBConst>:
 800a140:	20000670 	.word	0x20000670
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop

0800a148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	607b      	str	r3, [r7, #4]
}
 800a160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a162:	f7ff fc35 	bl	80099d0 <xTaskIncrementTick>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a16c:	4b06      	ldr	r3, [pc, #24]	@ (800a188 <SysTick_Handler+0x40>)
 800a16e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	2300      	movs	r3, #0
 800a176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	f383 8811 	msr	BASEPRI, r3
}
 800a17e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	e000ed04 	.word	0xe000ed04

0800a18c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a190:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c0 <vPortSetupTimerInterrupt+0x34>)
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a196:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c4 <vPortSetupTimerInterrupt+0x38>)
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a19c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c8 <vPortSetupTimerInterrupt+0x3c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a1cc <vPortSetupTimerInterrupt+0x40>)
 800a1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a6:	099b      	lsrs	r3, r3, #6
 800a1a8:	4a09      	ldr	r2, [pc, #36]	@ (800a1d0 <vPortSetupTimerInterrupt+0x44>)
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1ae:	4b04      	ldr	r3, [pc, #16]	@ (800a1c0 <vPortSetupTimerInterrupt+0x34>)
 800a1b0:	2207      	movs	r2, #7
 800a1b2:	601a      	str	r2, [r3, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	e000e010 	.word	0xe000e010
 800a1c4:	e000e018 	.word	0xe000e018
 800a1c8:	20000018 	.word	0x20000018
 800a1cc:	10624dd3 	.word	0x10624dd3
 800a1d0:	e000e014 	.word	0xe000e014

0800a1d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1e4 <vPortEnableVFP+0x10>
 800a1d8:	6801      	ldr	r1, [r0, #0]
 800a1da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1de:	6001      	str	r1, [r0, #0]
 800a1e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1e2:	bf00      	nop
 800a1e4:	e000ed88 	.word	0xe000ed88

0800a1e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	@ 0x28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1f4:	f7ff fb30 	bl	8009858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1f8:	4b5c      	ldr	r3, [pc, #368]	@ (800a36c <pvPortMalloc+0x184>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a200:	f000 f924 	bl	800a44c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a204:	4b5a      	ldr	r3, [pc, #360]	@ (800a370 <pvPortMalloc+0x188>)
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4013      	ands	r3, r2
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f040 8095 	bne.w	800a33c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d01e      	beq.n	800a256 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a218:	2208      	movs	r2, #8
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4413      	add	r3, r2
 800a21e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f003 0307 	and.w	r3, r3, #7
 800a226:	2b00      	cmp	r3, #0
 800a228:	d015      	beq.n	800a256 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f023 0307 	bic.w	r3, r3, #7
 800a230:	3308      	adds	r3, #8
 800a232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f003 0307 	and.w	r3, r3, #7
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00b      	beq.n	800a256 <pvPortMalloc+0x6e>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	617b      	str	r3, [r7, #20]
}
 800a250:	bf00      	nop
 800a252:	bf00      	nop
 800a254:	e7fd      	b.n	800a252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d06f      	beq.n	800a33c <pvPortMalloc+0x154>
 800a25c:	4b45      	ldr	r3, [pc, #276]	@ (800a374 <pvPortMalloc+0x18c>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	429a      	cmp	r2, r3
 800a264:	d86a      	bhi.n	800a33c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a266:	4b44      	ldr	r3, [pc, #272]	@ (800a378 <pvPortMalloc+0x190>)
 800a268:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a26a:	4b43      	ldr	r3, [pc, #268]	@ (800a378 <pvPortMalloc+0x190>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a270:	e004      	b.n	800a27c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a274:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	429a      	cmp	r2, r3
 800a284:	d903      	bls.n	800a28e <pvPortMalloc+0xa6>
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1f1      	bne.n	800a272 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a28e:	4b37      	ldr	r3, [pc, #220]	@ (800a36c <pvPortMalloc+0x184>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a294:	429a      	cmp	r2, r3
 800a296:	d051      	beq.n	800a33c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a298:	6a3b      	ldr	r3, [r7, #32]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2208      	movs	r2, #8
 800a29e:	4413      	add	r3, r2
 800a2a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	1ad2      	subs	r2, r2, r3
 800a2b2:	2308      	movs	r3, #8
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d920      	bls.n	800a2fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4413      	add	r3, r2
 800a2c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	f003 0307 	and.w	r3, r3, #7
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00b      	beq.n	800a2e4 <pvPortMalloc+0xfc>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	613b      	str	r3, [r7, #16]
}
 800a2de:	bf00      	nop
 800a2e0:	bf00      	nop
 800a2e2:	e7fd      	b.n	800a2e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	1ad2      	subs	r2, r2, r3
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2f6:	69b8      	ldr	r0, [r7, #24]
 800a2f8:	f000 f90a 	bl	800a510 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2fc:	4b1d      	ldr	r3, [pc, #116]	@ (800a374 <pvPortMalloc+0x18c>)
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	4a1b      	ldr	r2, [pc, #108]	@ (800a374 <pvPortMalloc+0x18c>)
 800a308:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a30a:	4b1a      	ldr	r3, [pc, #104]	@ (800a374 <pvPortMalloc+0x18c>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	4b1b      	ldr	r3, [pc, #108]	@ (800a37c <pvPortMalloc+0x194>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	429a      	cmp	r2, r3
 800a314:	d203      	bcs.n	800a31e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a316:	4b17      	ldr	r3, [pc, #92]	@ (800a374 <pvPortMalloc+0x18c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a18      	ldr	r2, [pc, #96]	@ (800a37c <pvPortMalloc+0x194>)
 800a31c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	4b13      	ldr	r3, [pc, #76]	@ (800a370 <pvPortMalloc+0x188>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	431a      	orrs	r2, r3
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a332:	4b13      	ldr	r3, [pc, #76]	@ (800a380 <pvPortMalloc+0x198>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3301      	adds	r3, #1
 800a338:	4a11      	ldr	r2, [pc, #68]	@ (800a380 <pvPortMalloc+0x198>)
 800a33a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a33c:	f7ff fa9a 	bl	8009874 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <pvPortMalloc+0x17a>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	60fb      	str	r3, [r7, #12]
}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	e7fd      	b.n	800a35e <pvPortMalloc+0x176>
	return pvReturn;
 800a362:	69fb      	ldr	r3, [r7, #28]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3728      	adds	r7, #40	@ 0x28
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	200043ac 	.word	0x200043ac
 800a370:	200043c0 	.word	0x200043c0
 800a374:	200043b0 	.word	0x200043b0
 800a378:	200043a4 	.word	0x200043a4
 800a37c:	200043b4 	.word	0x200043b4
 800a380:	200043b8 	.word	0x200043b8

0800a384 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d04f      	beq.n	800a436 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a396:	2308      	movs	r3, #8
 800a398:	425b      	negs	r3, r3
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	4413      	add	r3, r2
 800a39e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	4b25      	ldr	r3, [pc, #148]	@ (800a440 <vPortFree+0xbc>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10b      	bne.n	800a3ca <vPortFree+0x46>
	__asm volatile
 800a3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	60fb      	str	r3, [r7, #12]
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop
 800a3c8:	e7fd      	b.n	800a3c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00b      	beq.n	800a3ea <vPortFree+0x66>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	60bb      	str	r3, [r7, #8]
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	e7fd      	b.n	800a3e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	4b14      	ldr	r3, [pc, #80]	@ (800a440 <vPortFree+0xbc>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01e      	beq.n	800a436 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d11a      	bne.n	800a436 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	4b0e      	ldr	r3, [pc, #56]	@ (800a440 <vPortFree+0xbc>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	43db      	mvns	r3, r3
 800a40a:	401a      	ands	r2, r3
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a410:	f7ff fa22 	bl	8009858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	4b0a      	ldr	r3, [pc, #40]	@ (800a444 <vPortFree+0xc0>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4413      	add	r3, r2
 800a41e:	4a09      	ldr	r2, [pc, #36]	@ (800a444 <vPortFree+0xc0>)
 800a420:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a422:	6938      	ldr	r0, [r7, #16]
 800a424:	f000 f874 	bl	800a510 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a428:	4b07      	ldr	r3, [pc, #28]	@ (800a448 <vPortFree+0xc4>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3301      	adds	r3, #1
 800a42e:	4a06      	ldr	r2, [pc, #24]	@ (800a448 <vPortFree+0xc4>)
 800a430:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a432:	f7ff fa1f 	bl	8009874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a436:	bf00      	nop
 800a438:	3718      	adds	r7, #24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	200043c0 	.word	0x200043c0
 800a444:	200043b0 	.word	0x200043b0
 800a448:	200043bc 	.word	0x200043bc

0800a44c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a452:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a456:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a458:	4b27      	ldr	r3, [pc, #156]	@ (800a4f8 <prvHeapInit+0xac>)
 800a45a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00c      	beq.n	800a480 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3307      	adds	r3, #7
 800a46a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 0307 	bic.w	r3, r3, #7
 800a472:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	4a1f      	ldr	r2, [pc, #124]	@ (800a4f8 <prvHeapInit+0xac>)
 800a47c:	4413      	add	r3, r2
 800a47e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a484:	4a1d      	ldr	r2, [pc, #116]	@ (800a4fc <prvHeapInit+0xb0>)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a48a:	4b1c      	ldr	r3, [pc, #112]	@ (800a4fc <prvHeapInit+0xb0>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	4413      	add	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a498:	2208      	movs	r2, #8
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	1a9b      	subs	r3, r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f023 0307 	bic.w	r3, r3, #7
 800a4a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4a15      	ldr	r2, [pc, #84]	@ (800a500 <prvHeapInit+0xb4>)
 800a4ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4ae:	4b14      	ldr	r3, [pc, #80]	@ (800a500 <prvHeapInit+0xb4>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4b6:	4b12      	ldr	r3, [pc, #72]	@ (800a500 <prvHeapInit+0xb4>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	1ad2      	subs	r2, r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a500 <prvHeapInit+0xb4>)
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	4a0a      	ldr	r2, [pc, #40]	@ (800a504 <prvHeapInit+0xb8>)
 800a4da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	4a09      	ldr	r2, [pc, #36]	@ (800a508 <prvHeapInit+0xbc>)
 800a4e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4e4:	4b09      	ldr	r3, [pc, #36]	@ (800a50c <prvHeapInit+0xc0>)
 800a4e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a4ea:	601a      	str	r2, [r3, #0]
}
 800a4ec:	bf00      	nop
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	200007a4 	.word	0x200007a4
 800a4fc:	200043a4 	.word	0x200043a4
 800a500:	200043ac 	.word	0x200043ac
 800a504:	200043b4 	.word	0x200043b4
 800a508:	200043b0 	.word	0x200043b0
 800a50c:	200043c0 	.word	0x200043c0

0800a510 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a518:	4b28      	ldr	r3, [pc, #160]	@ (800a5bc <prvInsertBlockIntoFreeList+0xac>)
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	e002      	b.n	800a524 <prvInsertBlockIntoFreeList+0x14>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d8f7      	bhi.n	800a51e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	4413      	add	r3, r2
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d108      	bne.n	800a552 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	441a      	add	r2, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	441a      	add	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	429a      	cmp	r2, r3
 800a564:	d118      	bne.n	800a598 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	4b15      	ldr	r3, [pc, #84]	@ (800a5c0 <prvInsertBlockIntoFreeList+0xb0>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d00d      	beq.n	800a58e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	441a      	add	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	e008      	b.n	800a5a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a58e:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c0 <prvInsertBlockIntoFreeList+0xb0>)
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	e003      	b.n	800a5a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d002      	beq.n	800a5ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5ae:	bf00      	nop
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	200043a4 	.word	0x200043a4
 800a5c0:	200043ac 	.word	0x200043ac

0800a5c4 <sniprintf>:
 800a5c4:	b40c      	push	{r2, r3}
 800a5c6:	b530      	push	{r4, r5, lr}
 800a5c8:	4b17      	ldr	r3, [pc, #92]	@ (800a628 <sniprintf+0x64>)
 800a5ca:	1e0c      	subs	r4, r1, #0
 800a5cc:	681d      	ldr	r5, [r3, #0]
 800a5ce:	b09d      	sub	sp, #116	@ 0x74
 800a5d0:	da08      	bge.n	800a5e4 <sniprintf+0x20>
 800a5d2:	238b      	movs	r3, #139	@ 0x8b
 800a5d4:	602b      	str	r3, [r5, #0]
 800a5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5da:	b01d      	add	sp, #116	@ 0x74
 800a5dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5e0:	b002      	add	sp, #8
 800a5e2:	4770      	bx	lr
 800a5e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a5e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a5ec:	bf14      	ite	ne
 800a5ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5f2:	4623      	moveq	r3, r4
 800a5f4:	9304      	str	r3, [sp, #16]
 800a5f6:	9307      	str	r3, [sp, #28]
 800a5f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a5fc:	9002      	str	r0, [sp, #8]
 800a5fe:	9006      	str	r0, [sp, #24]
 800a600:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a604:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a606:	ab21      	add	r3, sp, #132	@ 0x84
 800a608:	a902      	add	r1, sp, #8
 800a60a:	4628      	mov	r0, r5
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	f000 fa19 	bl	800aa44 <_svfiprintf_r>
 800a612:	1c43      	adds	r3, r0, #1
 800a614:	bfbc      	itt	lt
 800a616:	238b      	movlt	r3, #139	@ 0x8b
 800a618:	602b      	strlt	r3, [r5, #0]
 800a61a:	2c00      	cmp	r4, #0
 800a61c:	d0dd      	beq.n	800a5da <sniprintf+0x16>
 800a61e:	9b02      	ldr	r3, [sp, #8]
 800a620:	2200      	movs	r2, #0
 800a622:	701a      	strb	r2, [r3, #0]
 800a624:	e7d9      	b.n	800a5da <sniprintf+0x16>
 800a626:	bf00      	nop
 800a628:	20000028 	.word	0x20000028

0800a62c <siprintf>:
 800a62c:	b40e      	push	{r1, r2, r3}
 800a62e:	b500      	push	{lr}
 800a630:	b09c      	sub	sp, #112	@ 0x70
 800a632:	ab1d      	add	r3, sp, #116	@ 0x74
 800a634:	9002      	str	r0, [sp, #8]
 800a636:	9006      	str	r0, [sp, #24]
 800a638:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a63c:	4809      	ldr	r0, [pc, #36]	@ (800a664 <siprintf+0x38>)
 800a63e:	9107      	str	r1, [sp, #28]
 800a640:	9104      	str	r1, [sp, #16]
 800a642:	4909      	ldr	r1, [pc, #36]	@ (800a668 <siprintf+0x3c>)
 800a644:	f853 2b04 	ldr.w	r2, [r3], #4
 800a648:	9105      	str	r1, [sp, #20]
 800a64a:	6800      	ldr	r0, [r0, #0]
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	a902      	add	r1, sp, #8
 800a650:	f000 f9f8 	bl	800aa44 <_svfiprintf_r>
 800a654:	9b02      	ldr	r3, [sp, #8]
 800a656:	2200      	movs	r2, #0
 800a658:	701a      	strb	r2, [r3, #0]
 800a65a:	b01c      	add	sp, #112	@ 0x70
 800a65c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a660:	b003      	add	sp, #12
 800a662:	4770      	bx	lr
 800a664:	20000028 	.word	0x20000028
 800a668:	ffff0208 	.word	0xffff0208

0800a66c <memset>:
 800a66c:	4402      	add	r2, r0
 800a66e:	4603      	mov	r3, r0
 800a670:	4293      	cmp	r3, r2
 800a672:	d100      	bne.n	800a676 <memset+0xa>
 800a674:	4770      	bx	lr
 800a676:	f803 1b01 	strb.w	r1, [r3], #1
 800a67a:	e7f9      	b.n	800a670 <memset+0x4>

0800a67c <_reclaim_reent>:
 800a67c:	4b29      	ldr	r3, [pc, #164]	@ (800a724 <_reclaim_reent+0xa8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4283      	cmp	r3, r0
 800a682:	b570      	push	{r4, r5, r6, lr}
 800a684:	4604      	mov	r4, r0
 800a686:	d04b      	beq.n	800a720 <_reclaim_reent+0xa4>
 800a688:	69c3      	ldr	r3, [r0, #28]
 800a68a:	b1ab      	cbz	r3, 800a6b8 <_reclaim_reent+0x3c>
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	b16b      	cbz	r3, 800a6ac <_reclaim_reent+0x30>
 800a690:	2500      	movs	r5, #0
 800a692:	69e3      	ldr	r3, [r4, #28]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	5959      	ldr	r1, [r3, r5]
 800a698:	2900      	cmp	r1, #0
 800a69a:	d13b      	bne.n	800a714 <_reclaim_reent+0x98>
 800a69c:	3504      	adds	r5, #4
 800a69e:	2d80      	cmp	r5, #128	@ 0x80
 800a6a0:	d1f7      	bne.n	800a692 <_reclaim_reent+0x16>
 800a6a2:	69e3      	ldr	r3, [r4, #28]
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	68d9      	ldr	r1, [r3, #12]
 800a6a8:	f000 f878 	bl	800a79c <_free_r>
 800a6ac:	69e3      	ldr	r3, [r4, #28]
 800a6ae:	6819      	ldr	r1, [r3, #0]
 800a6b0:	b111      	cbz	r1, 800a6b8 <_reclaim_reent+0x3c>
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 f872 	bl	800a79c <_free_r>
 800a6b8:	6961      	ldr	r1, [r4, #20]
 800a6ba:	b111      	cbz	r1, 800a6c2 <_reclaim_reent+0x46>
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f000 f86d 	bl	800a79c <_free_r>
 800a6c2:	69e1      	ldr	r1, [r4, #28]
 800a6c4:	b111      	cbz	r1, 800a6cc <_reclaim_reent+0x50>
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 f868 	bl	800a79c <_free_r>
 800a6cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a6ce:	b111      	cbz	r1, 800a6d6 <_reclaim_reent+0x5a>
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 f863 	bl	800a79c <_free_r>
 800a6d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6d8:	b111      	cbz	r1, 800a6e0 <_reclaim_reent+0x64>
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 f85e 	bl	800a79c <_free_r>
 800a6e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a6e2:	b111      	cbz	r1, 800a6ea <_reclaim_reent+0x6e>
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 f859 	bl	800a79c <_free_r>
 800a6ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a6ec:	b111      	cbz	r1, 800a6f4 <_reclaim_reent+0x78>
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 f854 	bl	800a79c <_free_r>
 800a6f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a6f6:	b111      	cbz	r1, 800a6fe <_reclaim_reent+0x82>
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 f84f 	bl	800a79c <_free_r>
 800a6fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a700:	b111      	cbz	r1, 800a708 <_reclaim_reent+0x8c>
 800a702:	4620      	mov	r0, r4
 800a704:	f000 f84a 	bl	800a79c <_free_r>
 800a708:	6a23      	ldr	r3, [r4, #32]
 800a70a:	b14b      	cbz	r3, 800a720 <_reclaim_reent+0xa4>
 800a70c:	4620      	mov	r0, r4
 800a70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a712:	4718      	bx	r3
 800a714:	680e      	ldr	r6, [r1, #0]
 800a716:	4620      	mov	r0, r4
 800a718:	f000 f840 	bl	800a79c <_free_r>
 800a71c:	4631      	mov	r1, r6
 800a71e:	e7bb      	b.n	800a698 <_reclaim_reent+0x1c>
 800a720:	bd70      	pop	{r4, r5, r6, pc}
 800a722:	bf00      	nop
 800a724:	20000028 	.word	0x20000028

0800a728 <__errno>:
 800a728:	4b01      	ldr	r3, [pc, #4]	@ (800a730 <__errno+0x8>)
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	20000028 	.word	0x20000028

0800a734 <__libc_init_array>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	4d0d      	ldr	r5, [pc, #52]	@ (800a76c <__libc_init_array+0x38>)
 800a738:	4c0d      	ldr	r4, [pc, #52]	@ (800a770 <__libc_init_array+0x3c>)
 800a73a:	1b64      	subs	r4, r4, r5
 800a73c:	10a4      	asrs	r4, r4, #2
 800a73e:	2600      	movs	r6, #0
 800a740:	42a6      	cmp	r6, r4
 800a742:	d109      	bne.n	800a758 <__libc_init_array+0x24>
 800a744:	4d0b      	ldr	r5, [pc, #44]	@ (800a774 <__libc_init_array+0x40>)
 800a746:	4c0c      	ldr	r4, [pc, #48]	@ (800a778 <__libc_init_array+0x44>)
 800a748:	f000 fc66 	bl	800b018 <_init>
 800a74c:	1b64      	subs	r4, r4, r5
 800a74e:	10a4      	asrs	r4, r4, #2
 800a750:	2600      	movs	r6, #0
 800a752:	42a6      	cmp	r6, r4
 800a754:	d105      	bne.n	800a762 <__libc_init_array+0x2e>
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	f855 3b04 	ldr.w	r3, [r5], #4
 800a75c:	4798      	blx	r3
 800a75e:	3601      	adds	r6, #1
 800a760:	e7ee      	b.n	800a740 <__libc_init_array+0xc>
 800a762:	f855 3b04 	ldr.w	r3, [r5], #4
 800a766:	4798      	blx	r3
 800a768:	3601      	adds	r6, #1
 800a76a:	e7f2      	b.n	800a752 <__libc_init_array+0x1e>
 800a76c:	0800ba4c 	.word	0x0800ba4c
 800a770:	0800ba4c 	.word	0x0800ba4c
 800a774:	0800ba4c 	.word	0x0800ba4c
 800a778:	0800ba50 	.word	0x0800ba50

0800a77c <__retarget_lock_acquire_recursive>:
 800a77c:	4770      	bx	lr

0800a77e <__retarget_lock_release_recursive>:
 800a77e:	4770      	bx	lr

0800a780 <memcpy>:
 800a780:	440a      	add	r2, r1
 800a782:	4291      	cmp	r1, r2
 800a784:	f100 33ff 	add.w	r3, r0, #4294967295
 800a788:	d100      	bne.n	800a78c <memcpy+0xc>
 800a78a:	4770      	bx	lr
 800a78c:	b510      	push	{r4, lr}
 800a78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a792:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a796:	4291      	cmp	r1, r2
 800a798:	d1f9      	bne.n	800a78e <memcpy+0xe>
 800a79a:	bd10      	pop	{r4, pc}

0800a79c <_free_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4605      	mov	r5, r0
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	d041      	beq.n	800a828 <_free_r+0x8c>
 800a7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a8:	1f0c      	subs	r4, r1, #4
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	bfb8      	it	lt
 800a7ae:	18e4      	addlt	r4, r4, r3
 800a7b0:	f000 f8e0 	bl	800a974 <__malloc_lock>
 800a7b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a82c <_free_r+0x90>)
 800a7b6:	6813      	ldr	r3, [r2, #0]
 800a7b8:	b933      	cbnz	r3, 800a7c8 <_free_r+0x2c>
 800a7ba:	6063      	str	r3, [r4, #4]
 800a7bc:	6014      	str	r4, [r2, #0]
 800a7be:	4628      	mov	r0, r5
 800a7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7c4:	f000 b8dc 	b.w	800a980 <__malloc_unlock>
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	d908      	bls.n	800a7de <_free_r+0x42>
 800a7cc:	6820      	ldr	r0, [r4, #0]
 800a7ce:	1821      	adds	r1, r4, r0
 800a7d0:	428b      	cmp	r3, r1
 800a7d2:	bf01      	itttt	eq
 800a7d4:	6819      	ldreq	r1, [r3, #0]
 800a7d6:	685b      	ldreq	r3, [r3, #4]
 800a7d8:	1809      	addeq	r1, r1, r0
 800a7da:	6021      	streq	r1, [r4, #0]
 800a7dc:	e7ed      	b.n	800a7ba <_free_r+0x1e>
 800a7de:	461a      	mov	r2, r3
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	b10b      	cbz	r3, 800a7e8 <_free_r+0x4c>
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	d9fa      	bls.n	800a7de <_free_r+0x42>
 800a7e8:	6811      	ldr	r1, [r2, #0]
 800a7ea:	1850      	adds	r0, r2, r1
 800a7ec:	42a0      	cmp	r0, r4
 800a7ee:	d10b      	bne.n	800a808 <_free_r+0x6c>
 800a7f0:	6820      	ldr	r0, [r4, #0]
 800a7f2:	4401      	add	r1, r0
 800a7f4:	1850      	adds	r0, r2, r1
 800a7f6:	4283      	cmp	r3, r0
 800a7f8:	6011      	str	r1, [r2, #0]
 800a7fa:	d1e0      	bne.n	800a7be <_free_r+0x22>
 800a7fc:	6818      	ldr	r0, [r3, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	6053      	str	r3, [r2, #4]
 800a802:	4408      	add	r0, r1
 800a804:	6010      	str	r0, [r2, #0]
 800a806:	e7da      	b.n	800a7be <_free_r+0x22>
 800a808:	d902      	bls.n	800a810 <_free_r+0x74>
 800a80a:	230c      	movs	r3, #12
 800a80c:	602b      	str	r3, [r5, #0]
 800a80e:	e7d6      	b.n	800a7be <_free_r+0x22>
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	1821      	adds	r1, r4, r0
 800a814:	428b      	cmp	r3, r1
 800a816:	bf04      	itt	eq
 800a818:	6819      	ldreq	r1, [r3, #0]
 800a81a:	685b      	ldreq	r3, [r3, #4]
 800a81c:	6063      	str	r3, [r4, #4]
 800a81e:	bf04      	itt	eq
 800a820:	1809      	addeq	r1, r1, r0
 800a822:	6021      	streq	r1, [r4, #0]
 800a824:	6054      	str	r4, [r2, #4]
 800a826:	e7ca      	b.n	800a7be <_free_r+0x22>
 800a828:	bd38      	pop	{r3, r4, r5, pc}
 800a82a:	bf00      	nop
 800a82c:	20004508 	.word	0x20004508

0800a830 <sbrk_aligned>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	4e0f      	ldr	r6, [pc, #60]	@ (800a870 <sbrk_aligned+0x40>)
 800a834:	460c      	mov	r4, r1
 800a836:	6831      	ldr	r1, [r6, #0]
 800a838:	4605      	mov	r5, r0
 800a83a:	b911      	cbnz	r1, 800a842 <sbrk_aligned+0x12>
 800a83c:	f000 fba6 	bl	800af8c <_sbrk_r>
 800a840:	6030      	str	r0, [r6, #0]
 800a842:	4621      	mov	r1, r4
 800a844:	4628      	mov	r0, r5
 800a846:	f000 fba1 	bl	800af8c <_sbrk_r>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	d103      	bne.n	800a856 <sbrk_aligned+0x26>
 800a84e:	f04f 34ff 	mov.w	r4, #4294967295
 800a852:	4620      	mov	r0, r4
 800a854:	bd70      	pop	{r4, r5, r6, pc}
 800a856:	1cc4      	adds	r4, r0, #3
 800a858:	f024 0403 	bic.w	r4, r4, #3
 800a85c:	42a0      	cmp	r0, r4
 800a85e:	d0f8      	beq.n	800a852 <sbrk_aligned+0x22>
 800a860:	1a21      	subs	r1, r4, r0
 800a862:	4628      	mov	r0, r5
 800a864:	f000 fb92 	bl	800af8c <_sbrk_r>
 800a868:	3001      	adds	r0, #1
 800a86a:	d1f2      	bne.n	800a852 <sbrk_aligned+0x22>
 800a86c:	e7ef      	b.n	800a84e <sbrk_aligned+0x1e>
 800a86e:	bf00      	nop
 800a870:	20004504 	.word	0x20004504

0800a874 <_malloc_r>:
 800a874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a878:	1ccd      	adds	r5, r1, #3
 800a87a:	f025 0503 	bic.w	r5, r5, #3
 800a87e:	3508      	adds	r5, #8
 800a880:	2d0c      	cmp	r5, #12
 800a882:	bf38      	it	cc
 800a884:	250c      	movcc	r5, #12
 800a886:	2d00      	cmp	r5, #0
 800a888:	4606      	mov	r6, r0
 800a88a:	db01      	blt.n	800a890 <_malloc_r+0x1c>
 800a88c:	42a9      	cmp	r1, r5
 800a88e:	d904      	bls.n	800a89a <_malloc_r+0x26>
 800a890:	230c      	movs	r3, #12
 800a892:	6033      	str	r3, [r6, #0]
 800a894:	2000      	movs	r0, #0
 800a896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a89a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a970 <_malloc_r+0xfc>
 800a89e:	f000 f869 	bl	800a974 <__malloc_lock>
 800a8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8a6:	461c      	mov	r4, r3
 800a8a8:	bb44      	cbnz	r4, 800a8fc <_malloc_r+0x88>
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7ff ffbf 	bl	800a830 <sbrk_aligned>
 800a8b2:	1c43      	adds	r3, r0, #1
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	d158      	bne.n	800a96a <_malloc_r+0xf6>
 800a8b8:	f8d8 4000 	ldr.w	r4, [r8]
 800a8bc:	4627      	mov	r7, r4
 800a8be:	2f00      	cmp	r7, #0
 800a8c0:	d143      	bne.n	800a94a <_malloc_r+0xd6>
 800a8c2:	2c00      	cmp	r4, #0
 800a8c4:	d04b      	beq.n	800a95e <_malloc_r+0xea>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	eb04 0903 	add.w	r9, r4, r3
 800a8d0:	f000 fb5c 	bl	800af8c <_sbrk_r>
 800a8d4:	4581      	cmp	r9, r0
 800a8d6:	d142      	bne.n	800a95e <_malloc_r+0xea>
 800a8d8:	6821      	ldr	r1, [r4, #0]
 800a8da:	1a6d      	subs	r5, r5, r1
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f7ff ffa6 	bl	800a830 <sbrk_aligned>
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	d03a      	beq.n	800a95e <_malloc_r+0xea>
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	442b      	add	r3, r5
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	bb62      	cbnz	r2, 800a950 <_malloc_r+0xdc>
 800a8f6:	f8c8 7000 	str.w	r7, [r8]
 800a8fa:	e00f      	b.n	800a91c <_malloc_r+0xa8>
 800a8fc:	6822      	ldr	r2, [r4, #0]
 800a8fe:	1b52      	subs	r2, r2, r5
 800a900:	d420      	bmi.n	800a944 <_malloc_r+0xd0>
 800a902:	2a0b      	cmp	r2, #11
 800a904:	d917      	bls.n	800a936 <_malloc_r+0xc2>
 800a906:	1961      	adds	r1, r4, r5
 800a908:	42a3      	cmp	r3, r4
 800a90a:	6025      	str	r5, [r4, #0]
 800a90c:	bf18      	it	ne
 800a90e:	6059      	strne	r1, [r3, #4]
 800a910:	6863      	ldr	r3, [r4, #4]
 800a912:	bf08      	it	eq
 800a914:	f8c8 1000 	streq.w	r1, [r8]
 800a918:	5162      	str	r2, [r4, r5]
 800a91a:	604b      	str	r3, [r1, #4]
 800a91c:	4630      	mov	r0, r6
 800a91e:	f000 f82f 	bl	800a980 <__malloc_unlock>
 800a922:	f104 000b 	add.w	r0, r4, #11
 800a926:	1d23      	adds	r3, r4, #4
 800a928:	f020 0007 	bic.w	r0, r0, #7
 800a92c:	1ac2      	subs	r2, r0, r3
 800a92e:	bf1c      	itt	ne
 800a930:	1a1b      	subne	r3, r3, r0
 800a932:	50a3      	strne	r3, [r4, r2]
 800a934:	e7af      	b.n	800a896 <_malloc_r+0x22>
 800a936:	6862      	ldr	r2, [r4, #4]
 800a938:	42a3      	cmp	r3, r4
 800a93a:	bf0c      	ite	eq
 800a93c:	f8c8 2000 	streq.w	r2, [r8]
 800a940:	605a      	strne	r2, [r3, #4]
 800a942:	e7eb      	b.n	800a91c <_malloc_r+0xa8>
 800a944:	4623      	mov	r3, r4
 800a946:	6864      	ldr	r4, [r4, #4]
 800a948:	e7ae      	b.n	800a8a8 <_malloc_r+0x34>
 800a94a:	463c      	mov	r4, r7
 800a94c:	687f      	ldr	r7, [r7, #4]
 800a94e:	e7b6      	b.n	800a8be <_malloc_r+0x4a>
 800a950:	461a      	mov	r2, r3
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	42a3      	cmp	r3, r4
 800a956:	d1fb      	bne.n	800a950 <_malloc_r+0xdc>
 800a958:	2300      	movs	r3, #0
 800a95a:	6053      	str	r3, [r2, #4]
 800a95c:	e7de      	b.n	800a91c <_malloc_r+0xa8>
 800a95e:	230c      	movs	r3, #12
 800a960:	6033      	str	r3, [r6, #0]
 800a962:	4630      	mov	r0, r6
 800a964:	f000 f80c 	bl	800a980 <__malloc_unlock>
 800a968:	e794      	b.n	800a894 <_malloc_r+0x20>
 800a96a:	6005      	str	r5, [r0, #0]
 800a96c:	e7d6      	b.n	800a91c <_malloc_r+0xa8>
 800a96e:	bf00      	nop
 800a970:	20004508 	.word	0x20004508

0800a974 <__malloc_lock>:
 800a974:	4801      	ldr	r0, [pc, #4]	@ (800a97c <__malloc_lock+0x8>)
 800a976:	f7ff bf01 	b.w	800a77c <__retarget_lock_acquire_recursive>
 800a97a:	bf00      	nop
 800a97c:	20004500 	.word	0x20004500

0800a980 <__malloc_unlock>:
 800a980:	4801      	ldr	r0, [pc, #4]	@ (800a988 <__malloc_unlock+0x8>)
 800a982:	f7ff befc 	b.w	800a77e <__retarget_lock_release_recursive>
 800a986:	bf00      	nop
 800a988:	20004500 	.word	0x20004500

0800a98c <__ssputs_r>:
 800a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	688e      	ldr	r6, [r1, #8]
 800a992:	461f      	mov	r7, r3
 800a994:	42be      	cmp	r6, r7
 800a996:	680b      	ldr	r3, [r1, #0]
 800a998:	4682      	mov	sl, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	4690      	mov	r8, r2
 800a99e:	d82d      	bhi.n	800a9fc <__ssputs_r+0x70>
 800a9a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a9a8:	d026      	beq.n	800a9f8 <__ssputs_r+0x6c>
 800a9aa:	6965      	ldr	r5, [r4, #20]
 800a9ac:	6909      	ldr	r1, [r1, #16]
 800a9ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9b2:	eba3 0901 	sub.w	r9, r3, r1
 800a9b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9ba:	1c7b      	adds	r3, r7, #1
 800a9bc:	444b      	add	r3, r9
 800a9be:	106d      	asrs	r5, r5, #1
 800a9c0:	429d      	cmp	r5, r3
 800a9c2:	bf38      	it	cc
 800a9c4:	461d      	movcc	r5, r3
 800a9c6:	0553      	lsls	r3, r2, #21
 800a9c8:	d527      	bpl.n	800aa1a <__ssputs_r+0x8e>
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7ff ff52 	bl	800a874 <_malloc_r>
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	b360      	cbz	r0, 800aa2e <__ssputs_r+0xa2>
 800a9d4:	6921      	ldr	r1, [r4, #16]
 800a9d6:	464a      	mov	r2, r9
 800a9d8:	f7ff fed2 	bl	800a780 <memcpy>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	6126      	str	r6, [r4, #16]
 800a9ea:	6165      	str	r5, [r4, #20]
 800a9ec:	444e      	add	r6, r9
 800a9ee:	eba5 0509 	sub.w	r5, r5, r9
 800a9f2:	6026      	str	r6, [r4, #0]
 800a9f4:	60a5      	str	r5, [r4, #8]
 800a9f6:	463e      	mov	r6, r7
 800a9f8:	42be      	cmp	r6, r7
 800a9fa:	d900      	bls.n	800a9fe <__ssputs_r+0x72>
 800a9fc:	463e      	mov	r6, r7
 800a9fe:	6820      	ldr	r0, [r4, #0]
 800aa00:	4632      	mov	r2, r6
 800aa02:	4641      	mov	r1, r8
 800aa04:	f000 faa8 	bl	800af58 <memmove>
 800aa08:	68a3      	ldr	r3, [r4, #8]
 800aa0a:	1b9b      	subs	r3, r3, r6
 800aa0c:	60a3      	str	r3, [r4, #8]
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	4433      	add	r3, r6
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	2000      	movs	r0, #0
 800aa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa1a:	462a      	mov	r2, r5
 800aa1c:	f000 fac6 	bl	800afac <_realloc_r>
 800aa20:	4606      	mov	r6, r0
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d1e0      	bne.n	800a9e8 <__ssputs_r+0x5c>
 800aa26:	6921      	ldr	r1, [r4, #16]
 800aa28:	4650      	mov	r0, sl
 800aa2a:	f7ff feb7 	bl	800a79c <_free_r>
 800aa2e:	230c      	movs	r3, #12
 800aa30:	f8ca 3000 	str.w	r3, [sl]
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa3a:	81a3      	strh	r3, [r4, #12]
 800aa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa40:	e7e9      	b.n	800aa16 <__ssputs_r+0x8a>
	...

0800aa44 <_svfiprintf_r>:
 800aa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa48:	4698      	mov	r8, r3
 800aa4a:	898b      	ldrh	r3, [r1, #12]
 800aa4c:	061b      	lsls	r3, r3, #24
 800aa4e:	b09d      	sub	sp, #116	@ 0x74
 800aa50:	4607      	mov	r7, r0
 800aa52:	460d      	mov	r5, r1
 800aa54:	4614      	mov	r4, r2
 800aa56:	d510      	bpl.n	800aa7a <_svfiprintf_r+0x36>
 800aa58:	690b      	ldr	r3, [r1, #16]
 800aa5a:	b973      	cbnz	r3, 800aa7a <_svfiprintf_r+0x36>
 800aa5c:	2140      	movs	r1, #64	@ 0x40
 800aa5e:	f7ff ff09 	bl	800a874 <_malloc_r>
 800aa62:	6028      	str	r0, [r5, #0]
 800aa64:	6128      	str	r0, [r5, #16]
 800aa66:	b930      	cbnz	r0, 800aa76 <_svfiprintf_r+0x32>
 800aa68:	230c      	movs	r3, #12
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa70:	b01d      	add	sp, #116	@ 0x74
 800aa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa76:	2340      	movs	r3, #64	@ 0x40
 800aa78:	616b      	str	r3, [r5, #20]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa7e:	2320      	movs	r3, #32
 800aa80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa84:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa88:	2330      	movs	r3, #48	@ 0x30
 800aa8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac28 <_svfiprintf_r+0x1e4>
 800aa8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa92:	f04f 0901 	mov.w	r9, #1
 800aa96:	4623      	mov	r3, r4
 800aa98:	469a      	mov	sl, r3
 800aa9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa9e:	b10a      	cbz	r2, 800aaa4 <_svfiprintf_r+0x60>
 800aaa0:	2a25      	cmp	r2, #37	@ 0x25
 800aaa2:	d1f9      	bne.n	800aa98 <_svfiprintf_r+0x54>
 800aaa4:	ebba 0b04 	subs.w	fp, sl, r4
 800aaa8:	d00b      	beq.n	800aac2 <_svfiprintf_r+0x7e>
 800aaaa:	465b      	mov	r3, fp
 800aaac:	4622      	mov	r2, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	4638      	mov	r0, r7
 800aab2:	f7ff ff6b 	bl	800a98c <__ssputs_r>
 800aab6:	3001      	adds	r0, #1
 800aab8:	f000 80a7 	beq.w	800ac0a <_svfiprintf_r+0x1c6>
 800aabc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aabe:	445a      	add	r2, fp
 800aac0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aac2:	f89a 3000 	ldrb.w	r3, [sl]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 809f 	beq.w	800ac0a <_svfiprintf_r+0x1c6>
 800aacc:	2300      	movs	r3, #0
 800aace:	f04f 32ff 	mov.w	r2, #4294967295
 800aad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad6:	f10a 0a01 	add.w	sl, sl, #1
 800aada:	9304      	str	r3, [sp, #16]
 800aadc:	9307      	str	r3, [sp, #28]
 800aade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aae2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aae4:	4654      	mov	r4, sl
 800aae6:	2205      	movs	r2, #5
 800aae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaec:	484e      	ldr	r0, [pc, #312]	@ (800ac28 <_svfiprintf_r+0x1e4>)
 800aaee:	f7f5 fb77 	bl	80001e0 <memchr>
 800aaf2:	9a04      	ldr	r2, [sp, #16]
 800aaf4:	b9d8      	cbnz	r0, 800ab2e <_svfiprintf_r+0xea>
 800aaf6:	06d0      	lsls	r0, r2, #27
 800aaf8:	bf44      	itt	mi
 800aafa:	2320      	movmi	r3, #32
 800aafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab00:	0711      	lsls	r1, r2, #28
 800ab02:	bf44      	itt	mi
 800ab04:	232b      	movmi	r3, #43	@ 0x2b
 800ab06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab10:	d015      	beq.n	800ab3e <_svfiprintf_r+0xfa>
 800ab12:	9a07      	ldr	r2, [sp, #28]
 800ab14:	4654      	mov	r4, sl
 800ab16:	2000      	movs	r0, #0
 800ab18:	f04f 0c0a 	mov.w	ip, #10
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab22:	3b30      	subs	r3, #48	@ 0x30
 800ab24:	2b09      	cmp	r3, #9
 800ab26:	d94b      	bls.n	800abc0 <_svfiprintf_r+0x17c>
 800ab28:	b1b0      	cbz	r0, 800ab58 <_svfiprintf_r+0x114>
 800ab2a:	9207      	str	r2, [sp, #28]
 800ab2c:	e014      	b.n	800ab58 <_svfiprintf_r+0x114>
 800ab2e:	eba0 0308 	sub.w	r3, r0, r8
 800ab32:	fa09 f303 	lsl.w	r3, r9, r3
 800ab36:	4313      	orrs	r3, r2
 800ab38:	9304      	str	r3, [sp, #16]
 800ab3a:	46a2      	mov	sl, r4
 800ab3c:	e7d2      	b.n	800aae4 <_svfiprintf_r+0xa0>
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	1d19      	adds	r1, r3, #4
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	9103      	str	r1, [sp, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	bfbb      	ittet	lt
 800ab4a:	425b      	neglt	r3, r3
 800ab4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab50:	9307      	strge	r3, [sp, #28]
 800ab52:	9307      	strlt	r3, [sp, #28]
 800ab54:	bfb8      	it	lt
 800ab56:	9204      	strlt	r2, [sp, #16]
 800ab58:	7823      	ldrb	r3, [r4, #0]
 800ab5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab5c:	d10a      	bne.n	800ab74 <_svfiprintf_r+0x130>
 800ab5e:	7863      	ldrb	r3, [r4, #1]
 800ab60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab62:	d132      	bne.n	800abca <_svfiprintf_r+0x186>
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	1d1a      	adds	r2, r3, #4
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	9203      	str	r2, [sp, #12]
 800ab6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab70:	3402      	adds	r4, #2
 800ab72:	9305      	str	r3, [sp, #20]
 800ab74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac38 <_svfiprintf_r+0x1f4>
 800ab78:	7821      	ldrb	r1, [r4, #0]
 800ab7a:	2203      	movs	r2, #3
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	f7f5 fb2f 	bl	80001e0 <memchr>
 800ab82:	b138      	cbz	r0, 800ab94 <_svfiprintf_r+0x150>
 800ab84:	9b04      	ldr	r3, [sp, #16]
 800ab86:	eba0 000a 	sub.w	r0, r0, sl
 800ab8a:	2240      	movs	r2, #64	@ 0x40
 800ab8c:	4082      	lsls	r2, r0
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	3401      	adds	r4, #1
 800ab92:	9304      	str	r3, [sp, #16]
 800ab94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab98:	4824      	ldr	r0, [pc, #144]	@ (800ac2c <_svfiprintf_r+0x1e8>)
 800ab9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab9e:	2206      	movs	r2, #6
 800aba0:	f7f5 fb1e 	bl	80001e0 <memchr>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d036      	beq.n	800ac16 <_svfiprintf_r+0x1d2>
 800aba8:	4b21      	ldr	r3, [pc, #132]	@ (800ac30 <_svfiprintf_r+0x1ec>)
 800abaa:	bb1b      	cbnz	r3, 800abf4 <_svfiprintf_r+0x1b0>
 800abac:	9b03      	ldr	r3, [sp, #12]
 800abae:	3307      	adds	r3, #7
 800abb0:	f023 0307 	bic.w	r3, r3, #7
 800abb4:	3308      	adds	r3, #8
 800abb6:	9303      	str	r3, [sp, #12]
 800abb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abba:	4433      	add	r3, r6
 800abbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800abbe:	e76a      	b.n	800aa96 <_svfiprintf_r+0x52>
 800abc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800abc4:	460c      	mov	r4, r1
 800abc6:	2001      	movs	r0, #1
 800abc8:	e7a8      	b.n	800ab1c <_svfiprintf_r+0xd8>
 800abca:	2300      	movs	r3, #0
 800abcc:	3401      	adds	r4, #1
 800abce:	9305      	str	r3, [sp, #20]
 800abd0:	4619      	mov	r1, r3
 800abd2:	f04f 0c0a 	mov.w	ip, #10
 800abd6:	4620      	mov	r0, r4
 800abd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abdc:	3a30      	subs	r2, #48	@ 0x30
 800abde:	2a09      	cmp	r2, #9
 800abe0:	d903      	bls.n	800abea <_svfiprintf_r+0x1a6>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0c6      	beq.n	800ab74 <_svfiprintf_r+0x130>
 800abe6:	9105      	str	r1, [sp, #20]
 800abe8:	e7c4      	b.n	800ab74 <_svfiprintf_r+0x130>
 800abea:	fb0c 2101 	mla	r1, ip, r1, r2
 800abee:	4604      	mov	r4, r0
 800abf0:	2301      	movs	r3, #1
 800abf2:	e7f0      	b.n	800abd6 <_svfiprintf_r+0x192>
 800abf4:	ab03      	add	r3, sp, #12
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	462a      	mov	r2, r5
 800abfa:	4b0e      	ldr	r3, [pc, #56]	@ (800ac34 <_svfiprintf_r+0x1f0>)
 800abfc:	a904      	add	r1, sp, #16
 800abfe:	4638      	mov	r0, r7
 800ac00:	f3af 8000 	nop.w
 800ac04:	1c42      	adds	r2, r0, #1
 800ac06:	4606      	mov	r6, r0
 800ac08:	d1d6      	bne.n	800abb8 <_svfiprintf_r+0x174>
 800ac0a:	89ab      	ldrh	r3, [r5, #12]
 800ac0c:	065b      	lsls	r3, r3, #25
 800ac0e:	f53f af2d 	bmi.w	800aa6c <_svfiprintf_r+0x28>
 800ac12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac14:	e72c      	b.n	800aa70 <_svfiprintf_r+0x2c>
 800ac16:	ab03      	add	r3, sp, #12
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	462a      	mov	r2, r5
 800ac1c:	4b05      	ldr	r3, [pc, #20]	@ (800ac34 <_svfiprintf_r+0x1f0>)
 800ac1e:	a904      	add	r1, sp, #16
 800ac20:	4638      	mov	r0, r7
 800ac22:	f000 f879 	bl	800ad18 <_printf_i>
 800ac26:	e7ed      	b.n	800ac04 <_svfiprintf_r+0x1c0>
 800ac28:	0800ba10 	.word	0x0800ba10
 800ac2c:	0800ba1a 	.word	0x0800ba1a
 800ac30:	00000000 	.word	0x00000000
 800ac34:	0800a98d 	.word	0x0800a98d
 800ac38:	0800ba16 	.word	0x0800ba16

0800ac3c <_printf_common>:
 800ac3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac40:	4616      	mov	r6, r2
 800ac42:	4698      	mov	r8, r3
 800ac44:	688a      	ldr	r2, [r1, #8]
 800ac46:	690b      	ldr	r3, [r1, #16]
 800ac48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	bfb8      	it	lt
 800ac50:	4613      	movlt	r3, r2
 800ac52:	6033      	str	r3, [r6, #0]
 800ac54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac58:	4607      	mov	r7, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	b10a      	cbz	r2, 800ac62 <_printf_common+0x26>
 800ac5e:	3301      	adds	r3, #1
 800ac60:	6033      	str	r3, [r6, #0]
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	0699      	lsls	r1, r3, #26
 800ac66:	bf42      	ittt	mi
 800ac68:	6833      	ldrmi	r3, [r6, #0]
 800ac6a:	3302      	addmi	r3, #2
 800ac6c:	6033      	strmi	r3, [r6, #0]
 800ac6e:	6825      	ldr	r5, [r4, #0]
 800ac70:	f015 0506 	ands.w	r5, r5, #6
 800ac74:	d106      	bne.n	800ac84 <_printf_common+0x48>
 800ac76:	f104 0a19 	add.w	sl, r4, #25
 800ac7a:	68e3      	ldr	r3, [r4, #12]
 800ac7c:	6832      	ldr	r2, [r6, #0]
 800ac7e:	1a9b      	subs	r3, r3, r2
 800ac80:	42ab      	cmp	r3, r5
 800ac82:	dc26      	bgt.n	800acd2 <_printf_common+0x96>
 800ac84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac88:	6822      	ldr	r2, [r4, #0]
 800ac8a:	3b00      	subs	r3, #0
 800ac8c:	bf18      	it	ne
 800ac8e:	2301      	movne	r3, #1
 800ac90:	0692      	lsls	r2, r2, #26
 800ac92:	d42b      	bmi.n	800acec <_printf_common+0xb0>
 800ac94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac98:	4641      	mov	r1, r8
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	47c8      	blx	r9
 800ac9e:	3001      	adds	r0, #1
 800aca0:	d01e      	beq.n	800ace0 <_printf_common+0xa4>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	6922      	ldr	r2, [r4, #16]
 800aca6:	f003 0306 	and.w	r3, r3, #6
 800acaa:	2b04      	cmp	r3, #4
 800acac:	bf02      	ittt	eq
 800acae:	68e5      	ldreq	r5, [r4, #12]
 800acb0:	6833      	ldreq	r3, [r6, #0]
 800acb2:	1aed      	subeq	r5, r5, r3
 800acb4:	68a3      	ldr	r3, [r4, #8]
 800acb6:	bf0c      	ite	eq
 800acb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acbc:	2500      	movne	r5, #0
 800acbe:	4293      	cmp	r3, r2
 800acc0:	bfc4      	itt	gt
 800acc2:	1a9b      	subgt	r3, r3, r2
 800acc4:	18ed      	addgt	r5, r5, r3
 800acc6:	2600      	movs	r6, #0
 800acc8:	341a      	adds	r4, #26
 800acca:	42b5      	cmp	r5, r6
 800accc:	d11a      	bne.n	800ad04 <_printf_common+0xc8>
 800acce:	2000      	movs	r0, #0
 800acd0:	e008      	b.n	800ace4 <_printf_common+0xa8>
 800acd2:	2301      	movs	r3, #1
 800acd4:	4652      	mov	r2, sl
 800acd6:	4641      	mov	r1, r8
 800acd8:	4638      	mov	r0, r7
 800acda:	47c8      	blx	r9
 800acdc:	3001      	adds	r0, #1
 800acde:	d103      	bne.n	800ace8 <_printf_common+0xac>
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace8:	3501      	adds	r5, #1
 800acea:	e7c6      	b.n	800ac7a <_printf_common+0x3e>
 800acec:	18e1      	adds	r1, r4, r3
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	2030      	movs	r0, #48	@ 0x30
 800acf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acf6:	4422      	add	r2, r4
 800acf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800acfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad00:	3302      	adds	r3, #2
 800ad02:	e7c7      	b.n	800ac94 <_printf_common+0x58>
 800ad04:	2301      	movs	r3, #1
 800ad06:	4622      	mov	r2, r4
 800ad08:	4641      	mov	r1, r8
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	47c8      	blx	r9
 800ad0e:	3001      	adds	r0, #1
 800ad10:	d0e6      	beq.n	800ace0 <_printf_common+0xa4>
 800ad12:	3601      	adds	r6, #1
 800ad14:	e7d9      	b.n	800acca <_printf_common+0x8e>
	...

0800ad18 <_printf_i>:
 800ad18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad1c:	7e0f      	ldrb	r7, [r1, #24]
 800ad1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad20:	2f78      	cmp	r7, #120	@ 0x78
 800ad22:	4691      	mov	r9, r2
 800ad24:	4680      	mov	r8, r0
 800ad26:	460c      	mov	r4, r1
 800ad28:	469a      	mov	sl, r3
 800ad2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad2e:	d807      	bhi.n	800ad40 <_printf_i+0x28>
 800ad30:	2f62      	cmp	r7, #98	@ 0x62
 800ad32:	d80a      	bhi.n	800ad4a <_printf_i+0x32>
 800ad34:	2f00      	cmp	r7, #0
 800ad36:	f000 80d2 	beq.w	800aede <_printf_i+0x1c6>
 800ad3a:	2f58      	cmp	r7, #88	@ 0x58
 800ad3c:	f000 80b9 	beq.w	800aeb2 <_printf_i+0x19a>
 800ad40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad48:	e03a      	b.n	800adc0 <_printf_i+0xa8>
 800ad4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad4e:	2b15      	cmp	r3, #21
 800ad50:	d8f6      	bhi.n	800ad40 <_printf_i+0x28>
 800ad52:	a101      	add	r1, pc, #4	@ (adr r1, 800ad58 <_printf_i+0x40>)
 800ad54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad58:	0800adb1 	.word	0x0800adb1
 800ad5c:	0800adc5 	.word	0x0800adc5
 800ad60:	0800ad41 	.word	0x0800ad41
 800ad64:	0800ad41 	.word	0x0800ad41
 800ad68:	0800ad41 	.word	0x0800ad41
 800ad6c:	0800ad41 	.word	0x0800ad41
 800ad70:	0800adc5 	.word	0x0800adc5
 800ad74:	0800ad41 	.word	0x0800ad41
 800ad78:	0800ad41 	.word	0x0800ad41
 800ad7c:	0800ad41 	.word	0x0800ad41
 800ad80:	0800ad41 	.word	0x0800ad41
 800ad84:	0800aec5 	.word	0x0800aec5
 800ad88:	0800adef 	.word	0x0800adef
 800ad8c:	0800ae7f 	.word	0x0800ae7f
 800ad90:	0800ad41 	.word	0x0800ad41
 800ad94:	0800ad41 	.word	0x0800ad41
 800ad98:	0800aee7 	.word	0x0800aee7
 800ad9c:	0800ad41 	.word	0x0800ad41
 800ada0:	0800adef 	.word	0x0800adef
 800ada4:	0800ad41 	.word	0x0800ad41
 800ada8:	0800ad41 	.word	0x0800ad41
 800adac:	0800ae87 	.word	0x0800ae87
 800adb0:	6833      	ldr	r3, [r6, #0]
 800adb2:	1d1a      	adds	r2, r3, #4
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6032      	str	r2, [r6, #0]
 800adb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800adc0:	2301      	movs	r3, #1
 800adc2:	e09d      	b.n	800af00 <_printf_i+0x1e8>
 800adc4:	6833      	ldr	r3, [r6, #0]
 800adc6:	6820      	ldr	r0, [r4, #0]
 800adc8:	1d19      	adds	r1, r3, #4
 800adca:	6031      	str	r1, [r6, #0]
 800adcc:	0606      	lsls	r6, r0, #24
 800adce:	d501      	bpl.n	800add4 <_printf_i+0xbc>
 800add0:	681d      	ldr	r5, [r3, #0]
 800add2:	e003      	b.n	800addc <_printf_i+0xc4>
 800add4:	0645      	lsls	r5, r0, #25
 800add6:	d5fb      	bpl.n	800add0 <_printf_i+0xb8>
 800add8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800addc:	2d00      	cmp	r5, #0
 800adde:	da03      	bge.n	800ade8 <_printf_i+0xd0>
 800ade0:	232d      	movs	r3, #45	@ 0x2d
 800ade2:	426d      	negs	r5, r5
 800ade4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ade8:	4859      	ldr	r0, [pc, #356]	@ (800af50 <_printf_i+0x238>)
 800adea:	230a      	movs	r3, #10
 800adec:	e011      	b.n	800ae12 <_printf_i+0xfa>
 800adee:	6821      	ldr	r1, [r4, #0]
 800adf0:	6833      	ldr	r3, [r6, #0]
 800adf2:	0608      	lsls	r0, r1, #24
 800adf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800adf8:	d402      	bmi.n	800ae00 <_printf_i+0xe8>
 800adfa:	0649      	lsls	r1, r1, #25
 800adfc:	bf48      	it	mi
 800adfe:	b2ad      	uxthmi	r5, r5
 800ae00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae02:	4853      	ldr	r0, [pc, #332]	@ (800af50 <_printf_i+0x238>)
 800ae04:	6033      	str	r3, [r6, #0]
 800ae06:	bf14      	ite	ne
 800ae08:	230a      	movne	r3, #10
 800ae0a:	2308      	moveq	r3, #8
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae12:	6866      	ldr	r6, [r4, #4]
 800ae14:	60a6      	str	r6, [r4, #8]
 800ae16:	2e00      	cmp	r6, #0
 800ae18:	bfa2      	ittt	ge
 800ae1a:	6821      	ldrge	r1, [r4, #0]
 800ae1c:	f021 0104 	bicge.w	r1, r1, #4
 800ae20:	6021      	strge	r1, [r4, #0]
 800ae22:	b90d      	cbnz	r5, 800ae28 <_printf_i+0x110>
 800ae24:	2e00      	cmp	r6, #0
 800ae26:	d04b      	beq.n	800aec0 <_printf_i+0x1a8>
 800ae28:	4616      	mov	r6, r2
 800ae2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ae32:	5dc7      	ldrb	r7, [r0, r7]
 800ae34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae38:	462f      	mov	r7, r5
 800ae3a:	42bb      	cmp	r3, r7
 800ae3c:	460d      	mov	r5, r1
 800ae3e:	d9f4      	bls.n	800ae2a <_printf_i+0x112>
 800ae40:	2b08      	cmp	r3, #8
 800ae42:	d10b      	bne.n	800ae5c <_printf_i+0x144>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	07df      	lsls	r7, r3, #31
 800ae48:	d508      	bpl.n	800ae5c <_printf_i+0x144>
 800ae4a:	6923      	ldr	r3, [r4, #16]
 800ae4c:	6861      	ldr	r1, [r4, #4]
 800ae4e:	4299      	cmp	r1, r3
 800ae50:	bfde      	ittt	le
 800ae52:	2330      	movle	r3, #48	@ 0x30
 800ae54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae5c:	1b92      	subs	r2, r2, r6
 800ae5e:	6122      	str	r2, [r4, #16]
 800ae60:	f8cd a000 	str.w	sl, [sp]
 800ae64:	464b      	mov	r3, r9
 800ae66:	aa03      	add	r2, sp, #12
 800ae68:	4621      	mov	r1, r4
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	f7ff fee6 	bl	800ac3c <_printf_common>
 800ae70:	3001      	adds	r0, #1
 800ae72:	d14a      	bne.n	800af0a <_printf_i+0x1f2>
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	b004      	add	sp, #16
 800ae7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	f043 0320 	orr.w	r3, r3, #32
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	4833      	ldr	r0, [pc, #204]	@ (800af54 <_printf_i+0x23c>)
 800ae88:	2778      	movs	r7, #120	@ 0x78
 800ae8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	6831      	ldr	r1, [r6, #0]
 800ae92:	061f      	lsls	r7, r3, #24
 800ae94:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae98:	d402      	bmi.n	800aea0 <_printf_i+0x188>
 800ae9a:	065f      	lsls	r7, r3, #25
 800ae9c:	bf48      	it	mi
 800ae9e:	b2ad      	uxthmi	r5, r5
 800aea0:	6031      	str	r1, [r6, #0]
 800aea2:	07d9      	lsls	r1, r3, #31
 800aea4:	bf44      	itt	mi
 800aea6:	f043 0320 	orrmi.w	r3, r3, #32
 800aeaa:	6023      	strmi	r3, [r4, #0]
 800aeac:	b11d      	cbz	r5, 800aeb6 <_printf_i+0x19e>
 800aeae:	2310      	movs	r3, #16
 800aeb0:	e7ac      	b.n	800ae0c <_printf_i+0xf4>
 800aeb2:	4827      	ldr	r0, [pc, #156]	@ (800af50 <_printf_i+0x238>)
 800aeb4:	e7e9      	b.n	800ae8a <_printf_i+0x172>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	f023 0320 	bic.w	r3, r3, #32
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	e7f6      	b.n	800aeae <_printf_i+0x196>
 800aec0:	4616      	mov	r6, r2
 800aec2:	e7bd      	b.n	800ae40 <_printf_i+0x128>
 800aec4:	6833      	ldr	r3, [r6, #0]
 800aec6:	6825      	ldr	r5, [r4, #0]
 800aec8:	6961      	ldr	r1, [r4, #20]
 800aeca:	1d18      	adds	r0, r3, #4
 800aecc:	6030      	str	r0, [r6, #0]
 800aece:	062e      	lsls	r6, r5, #24
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	d501      	bpl.n	800aed8 <_printf_i+0x1c0>
 800aed4:	6019      	str	r1, [r3, #0]
 800aed6:	e002      	b.n	800aede <_printf_i+0x1c6>
 800aed8:	0668      	lsls	r0, r5, #25
 800aeda:	d5fb      	bpl.n	800aed4 <_printf_i+0x1bc>
 800aedc:	8019      	strh	r1, [r3, #0]
 800aede:	2300      	movs	r3, #0
 800aee0:	6123      	str	r3, [r4, #16]
 800aee2:	4616      	mov	r6, r2
 800aee4:	e7bc      	b.n	800ae60 <_printf_i+0x148>
 800aee6:	6833      	ldr	r3, [r6, #0]
 800aee8:	1d1a      	adds	r2, r3, #4
 800aeea:	6032      	str	r2, [r6, #0]
 800aeec:	681e      	ldr	r6, [r3, #0]
 800aeee:	6862      	ldr	r2, [r4, #4]
 800aef0:	2100      	movs	r1, #0
 800aef2:	4630      	mov	r0, r6
 800aef4:	f7f5 f974 	bl	80001e0 <memchr>
 800aef8:	b108      	cbz	r0, 800aefe <_printf_i+0x1e6>
 800aefa:	1b80      	subs	r0, r0, r6
 800aefc:	6060      	str	r0, [r4, #4]
 800aefe:	6863      	ldr	r3, [r4, #4]
 800af00:	6123      	str	r3, [r4, #16]
 800af02:	2300      	movs	r3, #0
 800af04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af08:	e7aa      	b.n	800ae60 <_printf_i+0x148>
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	4632      	mov	r2, r6
 800af0e:	4649      	mov	r1, r9
 800af10:	4640      	mov	r0, r8
 800af12:	47d0      	blx	sl
 800af14:	3001      	adds	r0, #1
 800af16:	d0ad      	beq.n	800ae74 <_printf_i+0x15c>
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	079b      	lsls	r3, r3, #30
 800af1c:	d413      	bmi.n	800af46 <_printf_i+0x22e>
 800af1e:	68e0      	ldr	r0, [r4, #12]
 800af20:	9b03      	ldr	r3, [sp, #12]
 800af22:	4298      	cmp	r0, r3
 800af24:	bfb8      	it	lt
 800af26:	4618      	movlt	r0, r3
 800af28:	e7a6      	b.n	800ae78 <_printf_i+0x160>
 800af2a:	2301      	movs	r3, #1
 800af2c:	4632      	mov	r2, r6
 800af2e:	4649      	mov	r1, r9
 800af30:	4640      	mov	r0, r8
 800af32:	47d0      	blx	sl
 800af34:	3001      	adds	r0, #1
 800af36:	d09d      	beq.n	800ae74 <_printf_i+0x15c>
 800af38:	3501      	adds	r5, #1
 800af3a:	68e3      	ldr	r3, [r4, #12]
 800af3c:	9903      	ldr	r1, [sp, #12]
 800af3e:	1a5b      	subs	r3, r3, r1
 800af40:	42ab      	cmp	r3, r5
 800af42:	dcf2      	bgt.n	800af2a <_printf_i+0x212>
 800af44:	e7eb      	b.n	800af1e <_printf_i+0x206>
 800af46:	2500      	movs	r5, #0
 800af48:	f104 0619 	add.w	r6, r4, #25
 800af4c:	e7f5      	b.n	800af3a <_printf_i+0x222>
 800af4e:	bf00      	nop
 800af50:	0800ba21 	.word	0x0800ba21
 800af54:	0800ba32 	.word	0x0800ba32

0800af58 <memmove>:
 800af58:	4288      	cmp	r0, r1
 800af5a:	b510      	push	{r4, lr}
 800af5c:	eb01 0402 	add.w	r4, r1, r2
 800af60:	d902      	bls.n	800af68 <memmove+0x10>
 800af62:	4284      	cmp	r4, r0
 800af64:	4623      	mov	r3, r4
 800af66:	d807      	bhi.n	800af78 <memmove+0x20>
 800af68:	1e43      	subs	r3, r0, #1
 800af6a:	42a1      	cmp	r1, r4
 800af6c:	d008      	beq.n	800af80 <memmove+0x28>
 800af6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af76:	e7f8      	b.n	800af6a <memmove+0x12>
 800af78:	4402      	add	r2, r0
 800af7a:	4601      	mov	r1, r0
 800af7c:	428a      	cmp	r2, r1
 800af7e:	d100      	bne.n	800af82 <memmove+0x2a>
 800af80:	bd10      	pop	{r4, pc}
 800af82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af8a:	e7f7      	b.n	800af7c <memmove+0x24>

0800af8c <_sbrk_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d06      	ldr	r5, [pc, #24]	@ (800afa8 <_sbrk_r+0x1c>)
 800af90:	2300      	movs	r3, #0
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	f7fa ff46 	bl	8005e28 <_sbrk>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_sbrk_r+0x1a>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_sbrk_r+0x1a>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	200044fc 	.word	0x200044fc

0800afac <_realloc_r>:
 800afac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb0:	4680      	mov	r8, r0
 800afb2:	4615      	mov	r5, r2
 800afb4:	460c      	mov	r4, r1
 800afb6:	b921      	cbnz	r1, 800afc2 <_realloc_r+0x16>
 800afb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afbc:	4611      	mov	r1, r2
 800afbe:	f7ff bc59 	b.w	800a874 <_malloc_r>
 800afc2:	b92a      	cbnz	r2, 800afd0 <_realloc_r+0x24>
 800afc4:	f7ff fbea 	bl	800a79c <_free_r>
 800afc8:	2400      	movs	r4, #0
 800afca:	4620      	mov	r0, r4
 800afcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd0:	f000 f81a 	bl	800b008 <_malloc_usable_size_r>
 800afd4:	4285      	cmp	r5, r0
 800afd6:	4606      	mov	r6, r0
 800afd8:	d802      	bhi.n	800afe0 <_realloc_r+0x34>
 800afda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800afde:	d8f4      	bhi.n	800afca <_realloc_r+0x1e>
 800afe0:	4629      	mov	r1, r5
 800afe2:	4640      	mov	r0, r8
 800afe4:	f7ff fc46 	bl	800a874 <_malloc_r>
 800afe8:	4607      	mov	r7, r0
 800afea:	2800      	cmp	r0, #0
 800afec:	d0ec      	beq.n	800afc8 <_realloc_r+0x1c>
 800afee:	42b5      	cmp	r5, r6
 800aff0:	462a      	mov	r2, r5
 800aff2:	4621      	mov	r1, r4
 800aff4:	bf28      	it	cs
 800aff6:	4632      	movcs	r2, r6
 800aff8:	f7ff fbc2 	bl	800a780 <memcpy>
 800affc:	4621      	mov	r1, r4
 800affe:	4640      	mov	r0, r8
 800b000:	f7ff fbcc 	bl	800a79c <_free_r>
 800b004:	463c      	mov	r4, r7
 800b006:	e7e0      	b.n	800afca <_realloc_r+0x1e>

0800b008 <_malloc_usable_size_r>:
 800b008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b00c:	1f18      	subs	r0, r3, #4
 800b00e:	2b00      	cmp	r3, #0
 800b010:	bfbc      	itt	lt
 800b012:	580b      	ldrlt	r3, [r1, r0]
 800b014:	18c0      	addlt	r0, r0, r3
 800b016:	4770      	bx	lr

0800b018 <_init>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	bf00      	nop
 800b01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01e:	bc08      	pop	{r3}
 800b020:	469e      	mov	lr, r3
 800b022:	4770      	bx	lr

0800b024 <_fini>:
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b026:	bf00      	nop
 800b028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b02a:	bc08      	pop	{r3}
 800b02c:	469e      	mov	lr, r3
 800b02e:	4770      	bx	lr
