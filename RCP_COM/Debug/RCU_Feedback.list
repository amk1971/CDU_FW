
RCU_Feedback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd2c  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  0800df20  0800df20  0000ef20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecd8  0800ecd8  00010210  2**0
                  CONTENTS
  4 .ARM          00000008  0800ecd8  0800ecd8  0000fcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ece0  0800ece0  00010210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ece0  0800ece0  0000fce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ece4  0800ece4  0000fce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0800ece8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001470  20000210  0800eef8  00010210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001680  0800eef8  00010680  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185ef  00000000  00000000  00010239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380a  00000000  00000000  00028828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0002c038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001d46a  00000000  00000000  0002d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019e9b  00000000  00000000  0004ab3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a682c  00000000  00000000  000649d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010b201  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000011d8  00000000  00000000  0010b244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007034  00000000  00000000  0010c41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00113450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000210 	.word	0x20000210
 800020c:	00000000 	.word	0x00000000
 8000210:	0800df04 	.word	0x0800df04

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000214 	.word	0x20000214
 800022c:	0800df04 	.word	0x0800df04

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__gesf2>:
 8000c08:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000c0c:	e006      	b.n	8000c1c <__cmpsf2+0x4>
 8000c0e:	bf00      	nop

08000c10 <__lesf2>:
 8000c10:	f04f 0c01 	mov.w	ip, #1
 8000c14:	e002      	b.n	8000c1c <__cmpsf2+0x4>
 8000c16:	bf00      	nop

08000c18 <__cmpsf2>:
 8000c18:	f04f 0c01 	mov.w	ip, #1
 8000c1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d011      	beq.n	8000c58 <__cmpsf2+0x40>
 8000c34:	b001      	add	sp, #4
 8000c36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c3a:	bf18      	it	ne
 8000c3c:	ea90 0f01 	teqne	r0, r1
 8000c40:	bf58      	it	pl
 8000c42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c46:	bf88      	it	hi
 8000c48:	17c8      	asrhi	r0, r1, #31
 8000c4a:	bf38      	it	cc
 8000c4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c50:	bf18      	it	ne
 8000c52:	f040 0001 	orrne.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	d102      	bne.n	8000c64 <__cmpsf2+0x4c>
 8000c5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c62:	d105      	bne.n	8000c70 <__cmpsf2+0x58>
 8000c64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c68:	d1e4      	bne.n	8000c34 <__cmpsf2+0x1c>
 8000c6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c6e:	d0e1      	beq.n	8000c34 <__cmpsf2+0x1c>
 8000c70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_cfrcmple>:
 8000c78:	4684      	mov	ip, r0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	4661      	mov	r1, ip
 8000c7e:	e7ff      	b.n	8000c80 <__aeabi_cfcmpeq>

08000c80 <__aeabi_cfcmpeq>:
 8000c80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c82:	f7ff ffc9 	bl	8000c18 <__cmpsf2>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	bf48      	it	mi
 8000c8a:	f110 0f00 	cmnmi.w	r0, #0
 8000c8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c90 <__aeabi_fcmpeq>:
 8000c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c94:	f7ff fff4 	bl	8000c80 <__aeabi_cfcmpeq>
 8000c98:	bf0c      	ite	eq
 8000c9a:	2001      	moveq	r0, #1
 8000c9c:	2000      	movne	r0, #0
 8000c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_fcmplt>:
 8000ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca8:	f7ff ffea 	bl	8000c80 <__aeabi_cfcmpeq>
 8000cac:	bf34      	ite	cc
 8000cae:	2001      	movcc	r0, #1
 8000cb0:	2000      	movcs	r0, #0
 8000cb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_fcmple>:
 8000cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cbc:	f7ff ffe0 	bl	8000c80 <__aeabi_cfcmpeq>
 8000cc0:	bf94      	ite	ls
 8000cc2:	2001      	movls	r0, #1
 8000cc4:	2000      	movhi	r0, #0
 8000cc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cca:	bf00      	nop

08000ccc <__aeabi_fcmpge>:
 8000ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd0:	f7ff ffd2 	bl	8000c78 <__aeabi_cfrcmple>
 8000cd4:	bf94      	ite	ls
 8000cd6:	2001      	movls	r0, #1
 8000cd8:	2000      	movhi	r0, #0
 8000cda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fcmpgt>:
 8000ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce4:	f7ff ffc8 	bl	8000c78 <__aeabi_cfrcmple>
 8000ce8:	bf34      	ite	cc
 8000cea:	2001      	movcc	r0, #1
 8000cec:	2000      	movcs	r0, #0
 8000cee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cf2:	bf00      	nop

08000cf4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a06      	ldr	r2, [pc, #24]	@ (8000d1c <vApplicationGetIdleTaskMemory+0x28>)
 8000d04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	2000022c 	.word	0x2000022c
 8000d20:	200002d4 	.word	0x200002d4

08000d24 <Delay>:
#include "glcd.h"

void Delay(int t) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    t *= 10;
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
    while (t) {
 8000d38:	e002      	b.n	8000d40 <Delay+0x1c>
        t--;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
    while (t) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f9      	bne.n	8000d3a <Delay+0x16>
    }
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
	...

08000d54 <send_command>:

void send_command(unsigned char command) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff ffe0 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);  // E_PIN_NUMBER=RESET
 8000d64:	4b66      	ldr	r3, [pc, #408]	@ (8000f00 <send_command+0x1ac>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a65      	ldr	r2, [pc, #404]	@ (8000f00 <send_command+0x1ac>)
 8000d6a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000d6e:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ffd7 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 8000d76:	4b62      	ldr	r3, [pc, #392]	@ (8000f00 <send_command+0x1ac>)
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	4a61      	ldr	r2, [pc, #388]	@ (8000f00 <send_command+0x1ac>)
 8000d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d80:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff ffce 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 8000d88:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <send_command+0x1ac>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8000f00 <send_command+0x1ac>)
 8000d8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d92:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff ffc5 	bl	8000d24 <Delay>
    SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8000d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8000f04 <send_command+0x1b0>)
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4a59      	ldr	r2, [pc, #356]	@ (8000f04 <send_command+0x1b0>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff ffbc 	bl	8000d24 <Delay>
    SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 8000dac:	4b55      	ldr	r3, [pc, #340]	@ (8000f04 <send_command+0x1b0>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	4a54      	ldr	r2, [pc, #336]	@ (8000f04 <send_command+0x1b0>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff ffb3 	bl	8000d24 <Delay>

    // Clear data lines
    DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8000dbe:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <send_command+0x1b4>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	4a51      	ldr	r2, [pc, #324]	@ (8000f08 <send_command+0x1b4>)
 8000dc4:	f023 0302 	bic.w	r3, r3, #2
 8000dc8:	60d3      	str	r3, [r2, #12]
    DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 8000dca:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <send_command+0x1ac>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	4a4c      	ldr	r2, [pc, #304]	@ (8000f00 <send_command+0x1ac>)
 8000dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000dd4:	60d3      	str	r3, [r2, #12]
    DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8000dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8000f0c <send_command+0x1b8>)
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	4a4c      	ldr	r2, [pc, #304]	@ (8000f0c <send_command+0x1b8>)
 8000ddc:	f023 0320 	bic.w	r3, r3, #32
 8000de0:	60d3      	str	r3, [r2, #12]
    DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8000de2:	4b49      	ldr	r3, [pc, #292]	@ (8000f08 <send_command+0x1b4>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	4a48      	ldr	r2, [pc, #288]	@ (8000f08 <send_command+0x1b4>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	60d3      	str	r3, [r2, #12]
    DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8000dee:	4b47      	ldr	r3, [pc, #284]	@ (8000f0c <send_command+0x1b8>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	4a46      	ldr	r2, [pc, #280]	@ (8000f0c <send_command+0x1b8>)
 8000df4:	f023 0310 	bic.w	r3, r3, #16
 8000df8:	60d3      	str	r3, [r2, #12]
    DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8000dfa:	4b42      	ldr	r3, [pc, #264]	@ (8000f04 <send_command+0x1b0>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	4a41      	ldr	r2, [pc, #260]	@ (8000f04 <send_command+0x1b0>)
 8000e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000e04:	60d3      	str	r3, [r2, #12]
    DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8000e06:	4b3f      	ldr	r3, [pc, #252]	@ (8000f04 <send_command+0x1b0>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f04 <send_command+0x1b0>)
 8000e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e10:	60d3      	str	r3, [r2, #12]
    DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8000e12:	4b3c      	ldr	r3, [pc, #240]	@ (8000f04 <send_command+0x1b0>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	4a3b      	ldr	r2, [pc, #236]	@ (8000f04 <send_command+0x1b0>)
 8000e18:	f023 0320 	bic.w	r3, r3, #32
 8000e1c:	60d3      	str	r3, [r2, #12]

    Delay(T);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f7ff ff80 	bl	8000d24 <Delay>
    CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <send_command+0x1ac>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	4a35      	ldr	r2, [pc, #212]	@ (8000f00 <send_command+0x1ac>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2e:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff ff77 	bl	8000d24 <Delay>

    // Set data lines with the command
    if (command & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <send_command+0xf8>
 8000e40:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <send_command+0x1b4>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <send_command+0x1b4>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	60d3      	str	r3, [r2, #12]
    if (command & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <send_command+0x10e>
 8000e56:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <send_command+0x1ac>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	4a29      	ldr	r2, [pc, #164]	@ (8000f00 <send_command+0x1ac>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e60:	60d3      	str	r3, [r2, #12]
    if (command & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d005      	beq.n	8000e78 <send_command+0x124>
 8000e6c:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <send_command+0x1b8>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	4a26      	ldr	r2, [pc, #152]	@ (8000f0c <send_command+0x1b8>)
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	60d3      	str	r3, [r2, #12]
    if (command & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <send_command+0x13a>
 8000e82:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <send_command+0x1b4>)
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	4a20      	ldr	r2, [pc, #128]	@ (8000f08 <send_command+0x1b4>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	60d3      	str	r3, [r2, #12]
    if (command & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <send_command+0x150>
 8000e98:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <send_command+0x1b8>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <send_command+0x1b8>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	60d3      	str	r3, [r2, #12]
    if (command & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <send_command+0x166>
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <send_command+0x1b0>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <send_command+0x1b0>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb8:	60d3      	str	r3, [r2, #12]
    if (command & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d005      	beq.n	8000ed0 <send_command+0x17c>
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <send_command+0x1b0>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <send_command+0x1b0>)
 8000eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ece:	60d3      	str	r3, [r2, #12]
    if (command & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da05      	bge.n	8000ee4 <send_command+0x190>
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <send_command+0x1b0>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <send_command+0x1b0>)
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	60d3      	str	r3, [r2, #12]

    Delay(T);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff ff1d 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8000eea:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <send_command+0x1ac>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <send_command+0x1ac>)
 8000ef0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000ef4:	60d3      	str	r3, [r2, #12]
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40011800 	.word	0x40011800
 8000f04:	40010800 	.word	0x40010800
 8000f08:	40010c00 	.word	0x40010c00
 8000f0c:	40011000 	.word	0x40011000

08000f10 <glcd_on>:

void glcd_on(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    Delay(T);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff ff05 	bl	8000d24 <Delay>
    send_command(0x3F);     // GLCD on
 8000f1a:	203f      	movs	r0, #63	@ 0x3f
 8000f1c:	f7ff ff1a 	bl	8000d54 <send_command>
    send_command(0x40);     // SET Cursor on Y=0
 8000f20:	2040      	movs	r0, #64	@ 0x40
 8000f22:	f7ff ff17 	bl	8000d54 <send_command>
    send_command(0xB8);     // SET Page on X=0, Line=0
 8000f26:	20b8      	movs	r0, #184	@ 0xb8
 8000f28:	f7ff ff14 	bl	8000d54 <send_command>
    send_command(0xC0);     // Display Start Line=0xC0
 8000f2c:	20c0      	movs	r0, #192	@ 0xc0
 8000f2e:	f7ff ff11 	bl	8000d54 <send_command>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <glcd_off>:

void glcd_off(void) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
    Delay(T);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff fef2 	bl	8000d24 <Delay>
    send_command(0x3E);
 8000f40:	203e      	movs	r0, #62	@ 0x3e
 8000f42:	f7ff ff07 	bl	8000d54 <send_command>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <glcd_putchar>:

void glcd_putchar(unsigned char data, unsigned char j) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	460a      	mov	r2, r1
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	71bb      	strb	r3, [r7, #6]
    if (j < 64) {
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f60:	f200 80d2 	bhi.w	8001108 <glcd_putchar+0x1bc>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);   // E_PIN_NUMBER=RESET
 8000f64:	4b64      	ldr	r3, [pc, #400]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a63      	ldr	r2, [pc, #396]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f6a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f6e:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fed7 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER);  // RW_PIN_NUMBER=RESET
 8000f76:	4b60      	ldr	r3, [pc, #384]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	4a5f      	ldr	r2, [pc, #380]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f80:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff fece 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << DI_PIN_NUMBER);   // DI_PIN_NUMBER=SET
 8000f88:	4b5b      	ldr	r3, [pc, #364]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a5a      	ldr	r2, [pc, #360]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f92:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fec5 	bl	8000d24 <Delay>
        SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8000f9a:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <glcd_putchar+0x1b0>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	4a57      	ldr	r2, [pc, #348]	@ (80010fc <glcd_putchar+0x1b0>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff febc 	bl	8000d24 <Delay>
        SECO2_PORT->ODR &= ~(1 << CS2_PIN_NUMBER);// CS2_PIN_NUMBER=RESET
 8000fac:	4b53      	ldr	r3, [pc, #332]	@ (80010fc <glcd_putchar+0x1b0>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	@ (80010fc <glcd_putchar+0x1b0>)
 8000fb2:	f023 0308 	bic.w	r3, r3, #8
 8000fb6:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff feb3 	bl	8000d24 <Delay>

        // Clear data lines
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8000fbe:	4b50      	ldr	r3, [pc, #320]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fc4:	f023 0302 	bic.w	r3, r3, #2
 8000fc8:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 8000fca:	4b4b      	ldr	r3, [pc, #300]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	4a4a      	ldr	r2, [pc, #296]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fd4:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8000fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8001104 <glcd_putchar+0x1b8>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	4a4a      	ldr	r2, [pc, #296]	@ (8001104 <glcd_putchar+0x1b8>)
 8000fdc:	f023 0320 	bic.w	r3, r3, #32
 8000fe0:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8000fe2:	4b47      	ldr	r3, [pc, #284]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	4a46      	ldr	r2, [pc, #280]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8000fee:	4b45      	ldr	r3, [pc, #276]	@ (8001104 <glcd_putchar+0x1b8>)
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	4a44      	ldr	r2, [pc, #272]	@ (8001104 <glcd_putchar+0x1b8>)
 8000ff4:	f023 0310 	bic.w	r3, r3, #16
 8000ff8:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8000ffa:	4b40      	ldr	r3, [pc, #256]	@ (80010fc <glcd_putchar+0x1b0>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80010fc <glcd_putchar+0x1b0>)
 8001000:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001004:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8001006:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <glcd_putchar+0x1b0>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	4a3c      	ldr	r2, [pc, #240]	@ (80010fc <glcd_putchar+0x1b0>)
 800100c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001010:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8001012:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <glcd_putchar+0x1b0>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	4a39      	ldr	r2, [pc, #228]	@ (80010fc <glcd_putchar+0x1b0>)
 8001018:	f023 0320 	bic.w	r3, r3, #32
 800101c:	60d3      	str	r3, [r2, #12]

        Delay(T);
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff fe80 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8001024:	4b34      	ldr	r3, [pc, #208]	@ (80010f8 <glcd_putchar+0x1ac>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4a33      	ldr	r2, [pc, #204]	@ (80010f8 <glcd_putchar+0x1ac>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800102e:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fe77 	bl	8000d24 <Delay>

        // Set data lines with the data
        if (data & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <glcd_putchar+0x100>
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <glcd_putchar+0x1b4>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <glcd_putchar+0x1b4>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	60d3      	str	r3, [r2, #12]
        if (data & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <glcd_putchar+0x116>
 8001056:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <glcd_putchar+0x1ac>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	4a27      	ldr	r2, [pc, #156]	@ (80010f8 <glcd_putchar+0x1ac>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001060:	60d3      	str	r3, [r2, #12]
        if (data & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <glcd_putchar+0x12c>
 800106c:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <glcd_putchar+0x1b8>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	4a24      	ldr	r2, [pc, #144]	@ (8001104 <glcd_putchar+0x1b8>)
 8001072:	f043 0320 	orr.w	r3, r3, #32
 8001076:	60d3      	str	r3, [r2, #12]
        if (data & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <glcd_putchar+0x142>
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <glcd_putchar+0x1b4>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	4a1e      	ldr	r2, [pc, #120]	@ (8001100 <glcd_putchar+0x1b4>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	60d3      	str	r3, [r2, #12]
        if (data & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <glcd_putchar+0x158>
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <glcd_putchar+0x1b8>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4a19      	ldr	r2, [pc, #100]	@ (8001104 <glcd_putchar+0x1b8>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	60d3      	str	r3, [r2, #12]
        if (data & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <glcd_putchar+0x16e>
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <glcd_putchar+0x1b0>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <glcd_putchar+0x1b0>)
 80010b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b8:	60d3      	str	r3, [r2, #12]
        if (data & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <glcd_putchar+0x184>
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <glcd_putchar+0x1b0>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <glcd_putchar+0x1b0>)
 80010ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ce:	60d3      	str	r3, [r2, #12]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da05      	bge.n	80010e4 <glcd_putchar+0x198>
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <glcd_putchar+0x1b0>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <glcd_putchar+0x1b0>)
 80010de:	f043 0320 	orr.w	r3, r3, #32
 80010e2:	60d3      	str	r3, [r2, #12]

        Delay(T);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fe1d 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 80010ea:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <glcd_putchar+0x1ac>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	4a02      	ldr	r2, [pc, #8]	@ (80010f8 <glcd_putchar+0x1ac>)
 80010f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80010f4:	60d3      	str	r3, [r2, #12]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);

        Delay(T);
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
    }
}
 80010f6:	e0d0      	b.n	800129a <glcd_putchar+0x34e>
 80010f8:	40011800 	.word	0x40011800
 80010fc:	40010800 	.word	0x40010800
 8001100:	40010c00 	.word	0x40010c00
 8001104:	40011000 	.word	0x40011000
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);   // E_PIN_NUMBER=RESET
 8001108:	4b66      	ldr	r3, [pc, #408]	@ (80012a4 <glcd_putchar+0x358>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a65      	ldr	r2, [pc, #404]	@ (80012a4 <glcd_putchar+0x358>)
 800110e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001112:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fe05 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER);  // RW_PIN_NUMBER=RESET
 800111a:	4b62      	ldr	r3, [pc, #392]	@ (80012a4 <glcd_putchar+0x358>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	4a61      	ldr	r2, [pc, #388]	@ (80012a4 <glcd_putchar+0x358>)
 8001120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001124:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fdfc 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << DI_PIN_NUMBER);   // DI_PIN_NUMBER=SET
 800112c:	4b5d      	ldr	r3, [pc, #372]	@ (80012a4 <glcd_putchar+0x358>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	4a5c      	ldr	r2, [pc, #368]	@ (80012a4 <glcd_putchar+0x358>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001136:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff fdf3 	bl	8000d24 <Delay>
        SECO1_PORT->ODR &= ~(1 << CS1_PIN_NUMBER);// CS1_PIN_NUMBER=RESET
 800113e:	4b5a      	ldr	r3, [pc, #360]	@ (80012a8 <glcd_putchar+0x35c>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	4a59      	ldr	r2, [pc, #356]	@ (80012a8 <glcd_putchar+0x35c>)
 8001144:	f023 0310 	bic.w	r3, r3, #16
 8001148:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff fdea 	bl	8000d24 <Delay>
        SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 8001150:	4b55      	ldr	r3, [pc, #340]	@ (80012a8 <glcd_putchar+0x35c>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4a54      	ldr	r2, [pc, #336]	@ (80012a8 <glcd_putchar+0x35c>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff fde1 	bl	8000d24 <Delay>
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8001162:	4b52      	ldr	r3, [pc, #328]	@ (80012ac <glcd_putchar+0x360>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	4a51      	ldr	r2, [pc, #324]	@ (80012ac <glcd_putchar+0x360>)
 8001168:	f023 0302 	bic.w	r3, r3, #2
 800116c:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 800116e:	4b4d      	ldr	r3, [pc, #308]	@ (80012a4 <glcd_putchar+0x358>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	4a4c      	ldr	r2, [pc, #304]	@ (80012a4 <glcd_putchar+0x358>)
 8001174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001178:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 800117a:	4b4d      	ldr	r3, [pc, #308]	@ (80012b0 <glcd_putchar+0x364>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	4a4c      	ldr	r2, [pc, #304]	@ (80012b0 <glcd_putchar+0x364>)
 8001180:	f023 0320 	bic.w	r3, r3, #32
 8001184:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8001186:	4b49      	ldr	r3, [pc, #292]	@ (80012ac <glcd_putchar+0x360>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	4a48      	ldr	r2, [pc, #288]	@ (80012ac <glcd_putchar+0x360>)
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8001192:	4b47      	ldr	r3, [pc, #284]	@ (80012b0 <glcd_putchar+0x364>)
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	4a46      	ldr	r2, [pc, #280]	@ (80012b0 <glcd_putchar+0x364>)
 8001198:	f023 0310 	bic.w	r3, r3, #16
 800119c:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 800119e:	4b42      	ldr	r3, [pc, #264]	@ (80012a8 <glcd_putchar+0x35c>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4a41      	ldr	r2, [pc, #260]	@ (80012a8 <glcd_putchar+0x35c>)
 80011a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011a8:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 80011aa:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <glcd_putchar+0x35c>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	4a3e      	ldr	r2, [pc, #248]	@ (80012a8 <glcd_putchar+0x35c>)
 80011b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011b4:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 80011b6:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <glcd_putchar+0x35c>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	4a3b      	ldr	r2, [pc, #236]	@ (80012a8 <glcd_putchar+0x35c>)
 80011bc:	f023 0320 	bic.w	r3, r3, #32
 80011c0:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fdae 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 80011c8:	4b36      	ldr	r3, [pc, #216]	@ (80012a4 <glcd_putchar+0x358>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4a35      	ldr	r2, [pc, #212]	@ (80012a4 <glcd_putchar+0x358>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d2:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff fda5 	bl	8000d24 <Delay>
        if (data & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <glcd_putchar+0x2a4>
 80011e4:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <glcd_putchar+0x360>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a30      	ldr	r2, [pc, #192]	@ (80012ac <glcd_putchar+0x360>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	60d3      	str	r3, [r2, #12]
        if (data & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <glcd_putchar+0x2ba>
 80011fa:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <glcd_putchar+0x358>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	4a29      	ldr	r2, [pc, #164]	@ (80012a4 <glcd_putchar+0x358>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001204:	60d3      	str	r3, [r2, #12]
        if (data & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <glcd_putchar+0x2d0>
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <glcd_putchar+0x364>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4a26      	ldr	r2, [pc, #152]	@ (80012b0 <glcd_putchar+0x364>)
 8001216:	f043 0320 	orr.w	r3, r3, #32
 800121a:	60d3      	str	r3, [r2, #12]
        if (data & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <glcd_putchar+0x2e6>
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <glcd_putchar+0x360>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4a20      	ldr	r2, [pc, #128]	@ (80012ac <glcd_putchar+0x360>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	60d3      	str	r3, [r2, #12]
        if (data & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <glcd_putchar+0x2fc>
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <glcd_putchar+0x364>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <glcd_putchar+0x364>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	60d3      	str	r3, [r2, #12]
        if (data & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <glcd_putchar+0x312>
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <glcd_putchar+0x35c>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <glcd_putchar+0x35c>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800125c:	60d3      	str	r3, [r2, #12]
        if (data & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <glcd_putchar+0x328>
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <glcd_putchar+0x35c>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <glcd_putchar+0x35c>)
 800126e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001272:	60d3      	str	r3, [r2, #12]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	da05      	bge.n	8001288 <glcd_putchar+0x33c>
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <glcd_putchar+0x35c>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <glcd_putchar+0x35c>)
 8001282:	f043 0320 	orr.w	r3, r3, #32
 8001286:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff fd4b 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <glcd_putchar+0x358>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <glcd_putchar+0x358>)
 8001294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001298:	60d3      	str	r3, [r2, #12]
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40011800 	.word	0x40011800
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40010c00 	.word	0x40010c00
 80012b0:	40011000 	.word	0x40011000

080012b4 <glcd_puts>:

void glcd_puts(char *str, char x, char y) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
 80012c0:	4613      	mov	r3, r2
 80012c2:	70bb      	strb	r3, [r7, #2]
    Delay(T);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fd2d 	bl	8000d24 <Delay>
    int i, j;
    while (*str != 0) {
 80012ca:	e030      	b.n	800132e <glcd_puts+0x7a>
        i = (8 * (*str));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	60fb      	str	r3, [r7, #12]
        j = i + 7;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3307      	adds	r3, #7
 80012d8:	60bb      	str	r3, [r7, #8]
        for (; i <= j; i++) {
 80012da:	e021      	b.n	8001320 <glcd_puts+0x6c>
            glcd_gotoxy(x, y);
 80012dc:	78ba      	ldrb	r2, [r7, #2]
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f82e 	bl	8001344 <glcd_gotoxy>
            glcd_putchar(Font[i], x);
 80012e8:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <glcd_puts+0x8c>)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	78fa      	ldrb	r2, [r7, #3]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe29 	bl	8000f4c <glcd_putchar>
            ++x;
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	3301      	adds	r3, #1
 80012fe:	70fb      	strb	r3, [r7, #3]
            if (x > 121) {
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b79      	cmp	r3, #121	@ 0x79
 8001304:	d909      	bls.n	800131a <glcd_puts+0x66>
                if (i % 8 == 0) {
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	2b00      	cmp	r3, #0
 800130e:	d104      	bne.n	800131a <glcd_puts+0x66>
                    ++y;
 8001310:	78bb      	ldrb	r3, [r7, #2]
 8001312:	3301      	adds	r3, #1
 8001314:	70bb      	strb	r3, [r7, #2]
                    x = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	70fb      	strb	r3, [r7, #3]
        for (; i <= j; i++) {
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	429a      	cmp	r2, r3
 8001326:	ddd9      	ble.n	80012dc <glcd_puts+0x28>
                }
            }
        }
        str++;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
    while (*str != 0) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1ca      	bne.n	80012cc <glcd_puts+0x18>
    }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	0800e08c 	.word	0x0800e08c

08001344 <glcd_gotoxy>:
        glcd_gotoxy(x, y);
        glcd_putImage(point, x);
    }
}

void glcd_gotoxy(unsigned char x, unsigned char y) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	460a      	mov	r2, r1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	71bb      	strb	r3, [r7, #6]
    Delay(T);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fce5 	bl	8000d24 <Delay>
    goto_row(y);
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f808 	bl	8001372 <goto_row>
    goto_column(x);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f81b 	bl	80013a0 <goto_column>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <goto_row>:

void goto_row(unsigned char y) {
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fcd1 	bl	8000d24 <Delay>
    y = (y | 0xB8) & 0xBF;
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f063 0347 	orn	r3, r3, #71	@ 0x47
 800138e:	71fb      	strb	r3, [r7, #7]
    send_command(y);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fcde 	bl	8000d54 <send_command>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <goto_column>:

void goto_column(unsigned char x) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff fcba 	bl	8000d24 <Delay>

    if (x < 64) {
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80013b4:	f200 80da 	bhi.w	800156c <goto_column+0x1cc>
        x = (x | 0x40) & 0x7F;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013c4:	71fb      	strb	r3, [r7, #7]
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 80013c6:	4b65      	ldr	r3, [pc, #404]	@ (800155c <goto_column+0x1bc>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	4a64      	ldr	r2, [pc, #400]	@ (800155c <goto_column+0x1bc>)
 80013cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80013d0:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fca6 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 80013d8:	4b60      	ldr	r3, [pc, #384]	@ (800155c <goto_column+0x1bc>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a5f      	ldr	r2, [pc, #380]	@ (800155c <goto_column+0x1bc>)
 80013de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013e2:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff fc9d 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 80013ea:	4b5c      	ldr	r3, [pc, #368]	@ (800155c <goto_column+0x1bc>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	4a5b      	ldr	r2, [pc, #364]	@ (800155c <goto_column+0x1bc>)
 80013f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80013f4:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f7ff fc94 	bl	8000d24 <Delay>
        SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 80013fc:	4b58      	ldr	r3, [pc, #352]	@ (8001560 <goto_column+0x1c0>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4a57      	ldr	r2, [pc, #348]	@ (8001560 <goto_column+0x1c0>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff fc8b 	bl	8000d24 <Delay>
        SECO2_PORT->ODR &= ~(1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=RESET
 800140e:	4b54      	ldr	r3, [pc, #336]	@ (8001560 <goto_column+0x1c0>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4a53      	ldr	r2, [pc, #332]	@ (8001560 <goto_column+0x1c0>)
 8001414:	f023 0308 	bic.w	r3, r3, #8
 8001418:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fc82 	bl	8000d24 <Delay>

        // Clear data lines
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8001420:	4b50      	ldr	r3, [pc, #320]	@ (8001564 <goto_column+0x1c4>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a4f      	ldr	r2, [pc, #316]	@ (8001564 <goto_column+0x1c4>)
 8001426:	f023 0302 	bic.w	r3, r3, #2
 800142a:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 800142c:	4b4b      	ldr	r3, [pc, #300]	@ (800155c <goto_column+0x1bc>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a4a      	ldr	r2, [pc, #296]	@ (800155c <goto_column+0x1bc>)
 8001432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001436:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8001438:	4b4b      	ldr	r3, [pc, #300]	@ (8001568 <goto_column+0x1c8>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a4a      	ldr	r2, [pc, #296]	@ (8001568 <goto_column+0x1c8>)
 800143e:	f023 0320 	bic.w	r3, r3, #32
 8001442:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8001444:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <goto_column+0x1c4>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4a46      	ldr	r2, [pc, #280]	@ (8001564 <goto_column+0x1c4>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8001450:	4b45      	ldr	r3, [pc, #276]	@ (8001568 <goto_column+0x1c8>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a44      	ldr	r2, [pc, #272]	@ (8001568 <goto_column+0x1c8>)
 8001456:	f023 0310 	bic.w	r3, r3, #16
 800145a:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 800145c:	4b40      	ldr	r3, [pc, #256]	@ (8001560 <goto_column+0x1c0>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	4a3f      	ldr	r2, [pc, #252]	@ (8001560 <goto_column+0x1c0>)
 8001462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001466:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8001468:	4b3d      	ldr	r3, [pc, #244]	@ (8001560 <goto_column+0x1c0>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4a3c      	ldr	r2, [pc, #240]	@ (8001560 <goto_column+0x1c0>)
 800146e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001472:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8001474:	4b3a      	ldr	r3, [pc, #232]	@ (8001560 <goto_column+0x1c0>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a39      	ldr	r2, [pc, #228]	@ (8001560 <goto_column+0x1c0>)
 800147a:	f023 0320 	bic.w	r3, r3, #32
 800147e:	60d3      	str	r3, [r2, #12]

        Delay(T);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fc4f 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8001486:	4b35      	ldr	r3, [pc, #212]	@ (800155c <goto_column+0x1bc>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	4a34      	ldr	r2, [pc, #208]	@ (800155c <goto_column+0x1bc>)
 800148c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001490:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fc46 	bl	8000d24 <Delay>

        // Set data lines with the value of x
        if (x & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <goto_column+0x10e>
 80014a2:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <goto_column+0x1c4>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001564 <goto_column+0x1c4>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	60d3      	str	r3, [r2, #12]
        if (x & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <goto_column+0x124>
 80014b8:	4b28      	ldr	r3, [pc, #160]	@ (800155c <goto_column+0x1bc>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a27      	ldr	r2, [pc, #156]	@ (800155c <goto_column+0x1bc>)
 80014be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c2:	60d3      	str	r3, [r2, #12]
        if (x & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <goto_column+0x13a>
 80014ce:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <goto_column+0x1c8>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	4a25      	ldr	r2, [pc, #148]	@ (8001568 <goto_column+0x1c8>)
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	60d3      	str	r3, [r2, #12]
        if (x & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <goto_column+0x150>
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <goto_column+0x1c4>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <goto_column+0x1c4>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	60d3      	str	r3, [r2, #12]
        if (x & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <goto_column+0x166>
 80014fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <goto_column+0x1c8>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001568 <goto_column+0x1c8>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	60d3      	str	r3, [r2, #12]
        if (x & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <goto_column+0x17c>
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <goto_column+0x1c0>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <goto_column+0x1c0>)
 8001516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800151a:	60d3      	str	r3, [r2, #12]
        if (x & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <goto_column+0x192>
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <goto_column+0x1c0>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	4a0d      	ldr	r2, [pc, #52]	@ (8001560 <goto_column+0x1c0>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001530:	60d3      	str	r3, [r2, #12]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	da05      	bge.n	8001546 <goto_column+0x1a6>
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <goto_column+0x1c0>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	4a08      	ldr	r2, [pc, #32]	@ (8001560 <goto_column+0x1c0>)
 8001540:	f043 0320 	orr.w	r3, r3, #32
 8001544:	60d3      	str	r3, [r2, #12]

        Delay(T);
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff fbec 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <goto_column+0x1bc>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4a02      	ldr	r2, [pc, #8]	@ (800155c <goto_column+0x1bc>)
 8001552:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001556:	60d3      	str	r3, [r2, #12]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);

        Delay(T);
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
    }
}
 8001558:	e0db      	b.n	8001712 <goto_column+0x372>
 800155a:	bf00      	nop
 800155c:	40011800 	.word	0x40011800
 8001560:	40010800 	.word	0x40010800
 8001564:	40010c00 	.word	0x40010c00
 8001568:	40011000 	.word	0x40011000
        x -= 64;
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	3b40      	subs	r3, #64	@ 0x40
 8001570:	71fb      	strb	r3, [r7, #7]
        x = (x | 0x40) & 0x7F;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800157e:	71fb      	strb	r3, [r7, #7]
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8001580:	4b66      	ldr	r3, [pc, #408]	@ (800171c <goto_column+0x37c>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4a65      	ldr	r2, [pc, #404]	@ (800171c <goto_column+0x37c>)
 8001586:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800158a:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff fbc9 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 8001592:	4b62      	ldr	r3, [pc, #392]	@ (800171c <goto_column+0x37c>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	4a61      	ldr	r2, [pc, #388]	@ (800171c <goto_column+0x37c>)
 8001598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800159c:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff fbc0 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 80015a4:	4b5d      	ldr	r3, [pc, #372]	@ (800171c <goto_column+0x37c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a5c      	ldr	r2, [pc, #368]	@ (800171c <goto_column+0x37c>)
 80015aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015ae:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fbb7 	bl	8000d24 <Delay>
        SECO1_PORT->ODR &= ~(1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=RESET
 80015b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001720 <goto_column+0x380>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	4a59      	ldr	r2, [pc, #356]	@ (8001720 <goto_column+0x380>)
 80015bc:	f023 0310 	bic.w	r3, r3, #16
 80015c0:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fbae 	bl	8000d24 <Delay>
        SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 80015c8:	4b55      	ldr	r3, [pc, #340]	@ (8001720 <goto_column+0x380>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a54      	ldr	r2, [pc, #336]	@ (8001720 <goto_column+0x380>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fba5 	bl	8000d24 <Delay>
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 80015da:	4b52      	ldr	r3, [pc, #328]	@ (8001724 <goto_column+0x384>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	4a51      	ldr	r2, [pc, #324]	@ (8001724 <goto_column+0x384>)
 80015e0:	f023 0302 	bic.w	r3, r3, #2
 80015e4:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 80015e6:	4b4d      	ldr	r3, [pc, #308]	@ (800171c <goto_column+0x37c>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4a4c      	ldr	r2, [pc, #304]	@ (800171c <goto_column+0x37c>)
 80015ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015f0:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 80015f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001728 <goto_column+0x388>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001728 <goto_column+0x388>)
 80015f8:	f023 0320 	bic.w	r3, r3, #32
 80015fc:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 80015fe:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <goto_column+0x384>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4a48      	ldr	r2, [pc, #288]	@ (8001724 <goto_column+0x384>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 800160a:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <goto_column+0x388>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4a46      	ldr	r2, [pc, #280]	@ (8001728 <goto_column+0x388>)
 8001610:	f023 0310 	bic.w	r3, r3, #16
 8001614:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8001616:	4b42      	ldr	r3, [pc, #264]	@ (8001720 <goto_column+0x380>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4a41      	ldr	r2, [pc, #260]	@ (8001720 <goto_column+0x380>)
 800161c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001620:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8001622:	4b3f      	ldr	r3, [pc, #252]	@ (8001720 <goto_column+0x380>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4a3e      	ldr	r2, [pc, #248]	@ (8001720 <goto_column+0x380>)
 8001628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800162c:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 800162e:	4b3c      	ldr	r3, [pc, #240]	@ (8001720 <goto_column+0x380>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	4a3b      	ldr	r2, [pc, #236]	@ (8001720 <goto_column+0x380>)
 8001634:	f023 0320 	bic.w	r3, r3, #32
 8001638:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fb72 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8001640:	4b36      	ldr	r3, [pc, #216]	@ (800171c <goto_column+0x37c>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a35      	ldr	r2, [pc, #212]	@ (800171c <goto_column+0x37c>)
 8001646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800164a:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff fb69 	bl	8000d24 <Delay>
        if (x & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <goto_column+0x2c8>
 800165c:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <goto_column+0x384>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <goto_column+0x384>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	60d3      	str	r3, [r2, #12]
        if (x & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <goto_column+0x2de>
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <goto_column+0x37c>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	4a29      	ldr	r2, [pc, #164]	@ (800171c <goto_column+0x37c>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167c:	60d3      	str	r3, [r2, #12]
        if (x & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <goto_column+0x2f4>
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <goto_column+0x388>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <goto_column+0x388>)
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	60d3      	str	r3, [r2, #12]
        if (x & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <goto_column+0x30a>
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <goto_column+0x384>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	4a20      	ldr	r2, [pc, #128]	@ (8001724 <goto_column+0x384>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	60d3      	str	r3, [r2, #12]
        if (x & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <goto_column+0x320>
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <goto_column+0x388>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <goto_column+0x388>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	60d3      	str	r3, [r2, #12]
        if (x & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <goto_column+0x336>
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <goto_column+0x380>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	4a14      	ldr	r2, [pc, #80]	@ (8001720 <goto_column+0x380>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d4:	60d3      	str	r3, [r2, #12]
        if (x & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <goto_column+0x34c>
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <goto_column+0x380>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001720 <goto_column+0x380>)
 80016e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ea:	60d3      	str	r3, [r2, #12]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da05      	bge.n	8001700 <goto_column+0x360>
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <goto_column+0x380>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <goto_column+0x380>)
 80016fa:	f043 0320 	orr.w	r3, r3, #32
 80016fe:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff fb0f 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8001706:	4b05      	ldr	r3, [pc, #20]	@ (800171c <goto_column+0x37c>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	4a04      	ldr	r2, [pc, #16]	@ (800171c <goto_column+0x37c>)
 800170c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001710:	60d3      	str	r3, [r2, #12]
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40011800 	.word	0x40011800
 8001720:	40010800 	.word	0x40010800
 8001724:	40010c00 	.word	0x40010c00
 8001728:	40011000 	.word	0x40011000

0800172c <glcd_clearline>:

void glcd_clearline(unsigned line) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    Delay(T);
 8001734:	2001      	movs	r0, #1
 8001736:	f7ff faf5 	bl	8000d24 <Delay>
    int i;
    glcd_gotoxy(0, line); // At start of line of left side
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4619      	mov	r1, r3
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fdff 	bl	8001344 <glcd_gotoxy>
    SECO1_PORT->ODR = SECO1_PORT->ODR | 1 << (CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8001746:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <glcd_clearline+0x94>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <glcd_clearline+0x94>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff fae6 	bl	8000d24 <Delay>
    SECO2_PORT->ODR = SECO2_PORT->ODR & ~(1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=RESET
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <glcd_clearline+0x94>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4a18      	ldr	r2, [pc, #96]	@ (80017c0 <glcd_clearline+0x94>)
 800175e:	f023 0308 	bic.w	r3, r3, #8
 8001762:	60d3      	str	r3, [r2, #12]

    for (i = 0; i < 64; i++) {
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e00a      	b.n	8001780 <glcd_clearline+0x54>
        glcd_putchar(0, 0); // Print 0 for Delete Left section
 800176a:	2100      	movs	r1, #0
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff fbed 	bl	8000f4c <glcd_putchar>
        glcd_putchar(0, 64); // Print 0 for Delete Right section
 8001772:	2140      	movs	r1, #64	@ 0x40
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fbe9 	bl	8000f4c <glcd_putchar>
    for (i = 0; i < 64; i++) {
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b3f      	cmp	r3, #63	@ 0x3f
 8001784:	ddf1      	ble.n	800176a <glcd_clearline+0x3e>
    }
    glcd_gotoxy(64, line); // At start of line of right side
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4619      	mov	r1, r3
 800178c:	2040      	movs	r0, #64	@ 0x40
 800178e:	f7ff fdd9 	bl	8001344 <glcd_gotoxy>
    for (i = 0; i < 64; i++) {
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e00a      	b.n	80017ae <glcd_clearline+0x82>
        glcd_putchar(0, 0); // Print 0 for Delete Left section
 8001798:	2100      	movs	r1, #0
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fbd6 	bl	8000f4c <glcd_putchar>
        glcd_putchar(0, 64); // Print 0 for Delete Right section
 80017a0:	2140      	movs	r1, #64	@ 0x40
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fbd2 	bl	8000f4c <glcd_putchar>
    for (i = 0; i < 64; i++) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017b2:	ddf1      	ble.n	8001798 <glcd_clearline+0x6c>
    }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40010800 	.word	0x40010800

080017c4 <glcd_clear_all>:

void glcd_clear_all() {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 8; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	e006      	b.n	80017de <glcd_clear_all+0x1a>
        glcd_clearline(i);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ffaa 	bl	800172c <glcd_clearline>
    for (i = 0; i < 8; i++)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3301      	adds	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b07      	cmp	r3, #7
 80017e2:	ddf5      	ble.n	80017d0 <glcd_clear_all+0xc>
    send_command(0x40); // SET Cursor on Y=0
 80017e4:	2040      	movs	r0, #64	@ 0x40
 80017e6:	f7ff fab5 	bl	8000d54 <send_command>
    send_command(0xB8); // SET Page on X=0, Line=0
 80017ea:	20b8      	movs	r0, #184	@ 0xb8
 80017ec:	f7ff fab2 	bl	8000d54 <send_command>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <GLCD_INIT>:
	}
}
//-------------------------------------
//Function For Initialize GLCD Pins
// Function For Initialize GLCD Pins
void GLCD_INIT(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    // Enable clock for GPIO ports A, B, C, D, and E
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_APB2ENR_IOPDEN | RCC_APB2ENR_IOPEEN;
 80017fc:	4b61      	ldr	r3, [pc, #388]	@ (8001984 <GLCD_INIT+0x18c>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a60      	ldr	r2, [pc, #384]	@ (8001984 <GLCD_INIT+0x18c>)
 8001802:	f043 037c 	orr.w	r3, r3, #124	@ 0x7c
 8001806:	6193      	str	r3, [r2, #24]

    // Set the pin modes to output for DATA_PORT and CTRL_PORT
    // GPIOA: D5, D6, D7 (PA7, PA6, PA5), CS1 (PA4), CS2 (PA3), RESET (PA2)
    DATA5_PORT->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8001808:	4b5f      	ldr	r3, [pc, #380]	@ (8001988 <GLCD_INIT+0x190>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a5e      	ldr	r2, [pc, #376]	@ (8001988 <GLCD_INIT+0x190>)
 800180e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001812:	6013      	str	r3, [r2, #0]
    DATA5_PORT->CRL |= GPIO_CRL_MODE7_0;
 8001814:	4b5c      	ldr	r3, [pc, #368]	@ (8001988 <GLCD_INIT+0x190>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a5b      	ldr	r2, [pc, #364]	@ (8001988 <GLCD_INIT+0x190>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181e:	6013      	str	r3, [r2, #0]
    DATA6_PORT->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8001820:	4b59      	ldr	r3, [pc, #356]	@ (8001988 <GLCD_INIT+0x190>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a58      	ldr	r2, [pc, #352]	@ (8001988 <GLCD_INIT+0x190>)
 8001826:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800182a:	6013      	str	r3, [r2, #0]
    DATA6_PORT->CRL |= GPIO_CRL_MODE6_0;
 800182c:	4b56      	ldr	r3, [pc, #344]	@ (8001988 <GLCD_INIT+0x190>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a55      	ldr	r2, [pc, #340]	@ (8001988 <GLCD_INIT+0x190>)
 8001832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001836:	6013      	str	r3, [r2, #0]
    DATA7_PORT->CRL &= ~(GPIO_CRL_MODE5 | GPIO_CRL_CNF5);
 8001838:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <GLCD_INIT+0x190>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a52      	ldr	r2, [pc, #328]	@ (8001988 <GLCD_INIT+0x190>)
 800183e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001842:	6013      	str	r3, [r2, #0]
    DATA7_PORT->CRL |= GPIO_CRL_MODE5_0;
 8001844:	4b50      	ldr	r3, [pc, #320]	@ (8001988 <GLCD_INIT+0x190>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a4f      	ldr	r2, [pc, #316]	@ (8001988 <GLCD_INIT+0x190>)
 800184a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800184e:	6013      	str	r3, [r2, #0]

    SECO1_PORT->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4 | GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8001850:	4b4d      	ldr	r3, [pc, #308]	@ (8001988 <GLCD_INIT+0x190>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a4c      	ldr	r2, [pc, #304]	@ (8001988 <GLCD_INIT+0x190>)
 8001856:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 800185a:	6013      	str	r3, [r2, #0]
    SECO1_PORT->CRL |= (GPIO_CRL_MODE4_0 | GPIO_CRL_MODE3_0);
 800185c:	4b4a      	ldr	r3, [pc, #296]	@ (8001988 <GLCD_INIT+0x190>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a49      	ldr	r2, [pc, #292]	@ (8001988 <GLCD_INIT+0x190>)
 8001862:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 8001866:	6013      	str	r3, [r2, #0]

    RESET_PORT->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8001868:	4b47      	ldr	r3, [pc, #284]	@ (8001988 <GLCD_INIT+0x190>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a46      	ldr	r2, [pc, #280]	@ (8001988 <GLCD_INIT+0x190>)
 800186e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001872:	6013      	str	r3, [r2, #0]
    RESET_PORT->CRL |= GPIO_CRL_MODE2_0;
 8001874:	4b44      	ldr	r3, [pc, #272]	@ (8001988 <GLCD_INIT+0x190>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a43      	ldr	r2, [pc, #268]	@ (8001988 <GLCD_INIT+0x190>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187e:	6013      	str	r3, [r2, #0]

    // GPIOB: D0, D3 (PB1, PB0)
    DATA0_PORT->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1 | GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8001880:	4b42      	ldr	r3, [pc, #264]	@ (800198c <GLCD_INIT+0x194>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a41      	ldr	r2, [pc, #260]	@ (800198c <GLCD_INIT+0x194>)
 8001886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800188a:	6013      	str	r3, [r2, #0]
    DATA0_PORT->CRL |= (GPIO_CRL_MODE1_0 | GPIO_CRL_MODE0_0);
 800188c:	4b3f      	ldr	r3, [pc, #252]	@ (800198c <GLCD_INIT+0x194>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a3e      	ldr	r2, [pc, #248]	@ (800198c <GLCD_INIT+0x194>)
 8001892:	f043 0311 	orr.w	r3, r3, #17
 8001896:	6013      	str	r3, [r2, #0]

    // GPIOE: D1, DI, RW, E (PE7, PE10, PE8, PE9)
    DATA1_PORT->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8001898:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <GLCD_INIT+0x198>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3c      	ldr	r2, [pc, #240]	@ (8001990 <GLCD_INIT+0x198>)
 800189e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80018a2:	6013      	str	r3, [r2, #0]
    DATA1_PORT->CRL |= GPIO_CRL_MODE7_0;
 80018a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <GLCD_INIT+0x198>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a39      	ldr	r2, [pc, #228]	@ (8001990 <GLCD_INIT+0x198>)
 80018aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	6013      	str	r3, [r2, #0]
    CTRL_PORT->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10 | GPIO_CRH_MODE8 | GPIO_CRH_CNF8 | GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 80018b0:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <GLCD_INIT+0x198>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a36      	ldr	r2, [pc, #216]	@ (8001990 <GLCD_INIT+0x198>)
 80018b6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80018ba:	f023 030f 	bic.w	r3, r3, #15
 80018be:	6053      	str	r3, [r2, #4]
    CTRL_PORT->CRH |= (GPIO_CRH_MODE10_0 | GPIO_CRH_MODE8_0 | GPIO_CRH_MODE9_0);
 80018c0:	4b33      	ldr	r3, [pc, #204]	@ (8001990 <GLCD_INIT+0x198>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a32      	ldr	r2, [pc, #200]	@ (8001990 <GLCD_INIT+0x198>)
 80018c6:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6053      	str	r3, [r2, #4]

    // GPIOC: D2, D4 (PC5, PC4)
    DATA2_PORT->CRL &= ~(GPIO_CRL_MODE5 | GPIO_CRL_CNF5);
 80018d0:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <GLCD_INIT+0x19c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001994 <GLCD_INIT+0x19c>)
 80018d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80018da:	6013      	str	r3, [r2, #0]
    DATA2_PORT->CRL |= GPIO_CRL_MODE5_0;
 80018dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <GLCD_INIT+0x19c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001994 <GLCD_INIT+0x19c>)
 80018e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018e6:	6013      	str	r3, [r2, #0]
    DATA4_PORT->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4);
 80018e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <GLCD_INIT+0x19c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a29      	ldr	r2, [pc, #164]	@ (8001994 <GLCD_INIT+0x19c>)
 80018ee:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80018f2:	6013      	str	r3, [r2, #0]
    DATA4_PORT->CRL |= GPIO_CRL_MODE4_0;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <GLCD_INIT+0x19c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a26      	ldr	r2, [pc, #152]	@ (8001994 <GLCD_INIT+0x19c>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fe:	6013      	str	r3, [r2, #0]

    // Reset data and control ports
    DATA0_PORT->BSRR = (1 << (D0_PIN_NUMBER + 16));
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <GLCD_INIT+0x194>)
 8001902:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001906:	611a      	str	r2, [r3, #16]
    DATA1_PORT->BSRR = (1 << (D1_PIN_NUMBER + 16));
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <GLCD_INIT+0x198>)
 800190a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800190e:	611a      	str	r2, [r3, #16]
    DATA2_PORT->BSRR = (1 << (D2_PIN_NUMBER + 16));
 8001910:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <GLCD_INIT+0x19c>)
 8001912:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001916:	611a      	str	r2, [r3, #16]
    DATA3_PORT->BSRR = (1 << (D3_PIN_NUMBER + 16));
 8001918:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <GLCD_INIT+0x194>)
 800191a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800191e:	611a      	str	r2, [r3, #16]
    DATA4_PORT->BSRR = (1 << (D4_PIN_NUMBER + 16));
 8001920:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <GLCD_INIT+0x19c>)
 8001922:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001926:	611a      	str	r2, [r3, #16]
    DATA5_PORT->BSRR = (1 << (D5_PIN_NUMBER + 16));
 8001928:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <GLCD_INIT+0x190>)
 800192a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800192e:	611a      	str	r2, [r3, #16]
    DATA6_PORT->BSRR = (1 << (D6_PIN_NUMBER + 16));
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <GLCD_INIT+0x190>)
 8001932:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001936:	611a      	str	r2, [r3, #16]
    DATA7_PORT->BSRR = (1 << (D7_PIN_NUMBER + 16));
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <GLCD_INIT+0x190>)
 800193a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800193e:	611a      	str	r2, [r3, #16]
    SECO1_PORT->BSRR = (1 << (CS1_PIN_NUMBER + 16));
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <GLCD_INIT+0x190>)
 8001942:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001946:	611a      	str	r2, [r3, #16]
    SECO2_PORT->BSRR = (1 << (CS2_PIN_NUMBER + 16));
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <GLCD_INIT+0x190>)
 800194a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800194e:	611a      	str	r2, [r3, #16]
    RESET_PORT->BSRR = (1 << (RESET_PIN_NUMBER + 16));
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <GLCD_INIT+0x190>)
 8001952:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001956:	611a      	str	r2, [r3, #16]

    // Reset the GLCD
    RESET_PORT->BSRR = (1 << RESET_PIN_NUMBER); // Set reset pin high
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <GLCD_INIT+0x190>)
 800195a:	2204      	movs	r2, #4
 800195c:	611a      	str	r2, [r3, #16]
    Delay(10); // Wait for a short period
 800195e:	200a      	movs	r0, #10
 8001960:	f7ff f9e0 	bl	8000d24 <Delay>
    RESET_PORT->BSRR = (1 << (RESET_PIN_NUMBER + 16)); // Set reset pin low
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <GLCD_INIT+0x190>)
 8001966:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800196a:	611a      	str	r2, [r3, #16]
    Delay(10); // Wait for a short period
 800196c:	200a      	movs	r0, #10
 800196e:	f7ff f9d9 	bl	8000d24 <Delay>
    RESET_PORT->BSRR = (1 << RESET_PIN_NUMBER); // Set reset pin high
 8001972:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <GLCD_INIT+0x190>)
 8001974:	2204      	movs	r2, #4
 8001976:	611a      	str	r2, [r3, #16]
    Delay(10); // Wait for a short period
 8001978:	200a      	movs	r0, #10
 800197a:	f7ff f9d3 	bl	8000d24 <Delay>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40011800 	.word	0x40011800
 8001994:	40011000 	.word	0x40011000

08001998 <toDisplay>:
void StartRxThread(void const * argument);

/* USER CODE BEGIN PFP */
// TODO begin

void toDisplay() {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af02      	add	r7, sp, #8
	for (int i = 0; i < 16; ++i) {
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	e008      	b.n	80019b6 <toDisplay+0x1e>
		eepDisplay[i] = -1;
 80019a4:	4a19      	ldr	r2, [pc, #100]	@ (8001a0c <toDisplay+0x74>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 16; ++i) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	ddf3      	ble.n	80019a4 <toDisplay+0xc>
	}
	count = 0;
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <toDisplay+0x78>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	e019      	b.n	80019fc <toDisplay+0x64>
		SPIF_ReadSector(&spif, i, read, 1, 0);
 80019c8:	6839      	ldr	r1, [r7, #0]
 80019ca:	2300      	movs	r3, #0
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	4a10      	ldr	r2, [pc, #64]	@ (8001a14 <toDisplay+0x7c>)
 80019d2:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <toDisplay+0x80>)
 80019d4:	f004 ff14 	bl	8006800 <SPIF_ReadSector>
		if (read[0] != 255) {
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <toDisplay+0x7c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2bff      	cmp	r3, #255	@ 0xff
 80019de:	d00a      	beq.n	80019f6 <toDisplay+0x5e>
			eepDisplay[count] = i;
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <toDisplay+0x78>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4909      	ldr	r1, [pc, #36]	@ (8001a0c <toDisplay+0x74>)
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			count++;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <toDisplay+0x78>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4a07      	ldr	r2, [pc, #28]	@ (8001a10 <toDisplay+0x78>)
 80019f4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 16; i++) {
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	dde2      	ble.n	80019c8 <toDisplay+0x30>
		}
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200006d0 	.word	0x200006d0
 8001a10:	20000714 	.word	0x20000714
 8001a14:	2000072c 	.word	0x2000072c
 8001a18:	2000069c 	.word	0x2000069c

08001a1c <toAdd>:
  //          count++;
  //        }
  //      }
  //    }

void toAdd(const char* dN, int dM, int dK) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 16; i ++) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e044      	b.n	8001ab8 <toAdd+0x9c>
	SPIF_ReadSector(&spif, i, read, 1, 0);
 8001a2e:	6979      	ldr	r1, [r7, #20]
 8001a30:	2300      	movs	r3, #0
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2301      	movs	r3, #1
 8001a36:	4a24      	ldr	r2, [pc, #144]	@ (8001ac8 <toAdd+0xac>)
 8001a38:	4824      	ldr	r0, [pc, #144]	@ (8001acc <toAdd+0xb0>)
 8001a3a:	f004 fee1 	bl	8006800 <SPIF_ReadSector>
    if (read[0] == 255) {
 8001a3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <toAdd+0xac>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2bff      	cmp	r3, #255	@ 0xff
 8001a44:	d135      	bne.n	8001ab2 <toAdd+0x96>
      for (int j = 0; j < 7; j++) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	e010      	b.n	8001a6e <toAdd+0x52>
    	write[0] = dN[j];
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <toAdd+0xb4>)
 8001a56:	701a      	strb	r2, [r3, #0]
    	SPIF_WriteSector(&spif, i, write, 1, j);
 8001a58:	6979      	ldr	r1, [r7, #20]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad0 <toAdd+0xb4>)
 8001a62:	481a      	ldr	r0, [pc, #104]	@ (8001acc <toAdd+0xb0>)
 8001a64:	f004 fe62 	bl	800672c <SPIF_WriteSector>
      for (int j = 0; j < 7; j++) {
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b06      	cmp	r3, #6
 8001a72:	ddeb      	ble.n	8001a4c <toAdd+0x30>
      }
	  write[0] = dM;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <toAdd+0xb4>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, i, write, 1, 7);
 8001a7c:	6979      	ldr	r1, [r7, #20]
 8001a7e:	2307      	movs	r3, #7
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <toAdd+0xb4>)
 8001a86:	4811      	ldr	r0, [pc, #68]	@ (8001acc <toAdd+0xb0>)
 8001a88:	f004 fe50 	bl	800672c <SPIF_WriteSector>
	  write[0] = dK/25;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <toAdd+0xb8>)
 8001a90:	fb82 1203 	smull	r1, r2, r2, r3
 8001a94:	10d2      	asrs	r2, r2, #3
 8001a96:	17db      	asrs	r3, r3, #31
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <toAdd+0xb4>)
 8001a9e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, i, write, 1, 8);
 8001aa0:	6979      	ldr	r1, [r7, #20]
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <toAdd+0xb4>)
 8001aaa:	4808      	ldr	r0, [pc, #32]	@ (8001acc <toAdd+0xb0>)
 8001aac:	f004 fe3e 	bl	800672c <SPIF_WriteSector>
      break;
 8001ab0:	e006      	b.n	8001ac0 <toAdd+0xa4>
  for (int i = 0; i < 16; i ++) {
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	ddb7      	ble.n	8001a2e <toAdd+0x12>
    }
  }
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000072c 	.word	0x2000072c
 8001acc:	2000069c 	.word	0x2000069c
 8001ad0:	20000730 	.word	0x20000730
 8001ad4:	51eb851f 	.word	0x51eb851f

08001ad8 <toDelete>:
//        break;
//      }
//    }
//  }

void toDelete(int index) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	SPIF_EraseSector(&spif, index);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <toDelete+0x1c>)
 8001ae6:	f004 fd9e 	bl	8006626 <SPIF_EraseSector>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000069c 	.word	0x2000069c

08001af8 <storestate>:
//    for (int i = 0; i <  9; i++) {
//      EEPROM.update(index+i, 0xFF);
//    }
//  }

  void storestate() { // called when turned off
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af02      	add	r7, sp, #8
	  SPIF_EraseSector(&spif, 20);
 8001afe:	2114      	movs	r1, #20
 8001b00:	483c      	ldr	r0, [pc, #240]	@ (8001bf4 <storestate+0xfc>)
 8001b02:	f004 fd90 	bl	8006626 <SPIF_EraseSector>
	  write[0] = MHz;
 8001b06:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf8 <storestate+0x100>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001bfc <storestate+0x104>)
 8001b0e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 0);
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2301      	movs	r3, #1
 8001b16:	4a39      	ldr	r2, [pc, #228]	@ (8001bfc <storestate+0x104>)
 8001b18:	2114      	movs	r1, #20
 8001b1a:	4836      	ldr	r0, [pc, #216]	@ (8001bf4 <storestate+0xfc>)
 8001b1c:	f004 fe06 	bl	800672c <SPIF_WriteSector>
	  write[0] = KHz/25;
 8001b20:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <storestate+0x108>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a37      	ldr	r2, [pc, #220]	@ (8001c04 <storestate+0x10c>)
 8001b26:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2a:	10d2      	asrs	r2, r2, #3
 8001b2c:	17db      	asrs	r3, r3, #31
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <storestate+0x104>)
 8001b34:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 1);
 8001b36:	2301      	movs	r3, #1
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001bfc <storestate+0x104>)
 8001b3e:	2114      	movs	r1, #20
 8001b40:	482c      	ldr	r0, [pc, #176]	@ (8001bf4 <storestate+0xfc>)
 8001b42:	f004 fdf3 	bl	800672c <SPIF_WriteSector>
	  write[0] = SM;
 8001b46:	4b30      	ldr	r3, [pc, #192]	@ (8001c08 <storestate+0x110>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <storestate+0x104>)
 8001b4e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 2);
 8001b50:	2302      	movs	r3, #2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2301      	movs	r3, #1
 8001b56:	4a29      	ldr	r2, [pc, #164]	@ (8001bfc <storestate+0x104>)
 8001b58:	2114      	movs	r1, #20
 8001b5a:	4826      	ldr	r0, [pc, #152]	@ (8001bf4 <storestate+0xfc>)
 8001b5c:	f004 fde6 	bl	800672c <SPIF_WriteSector>
	  write[0] = SK/25;
 8001b60:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <storestate+0x114>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a27      	ldr	r2, [pc, #156]	@ (8001c04 <storestate+0x10c>)
 8001b66:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6a:	10d2      	asrs	r2, r2, #3
 8001b6c:	17db      	asrs	r3, r3, #31
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <storestate+0x104>)
 8001b74:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 3);
 8001b76:	2303      	movs	r3, #3
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bfc <storestate+0x104>)
 8001b7e:	2114      	movs	r1, #20
 8001b80:	481c      	ldr	r0, [pc, #112]	@ (8001bf4 <storestate+0xfc>)
 8001b82:	f004 fdd3 	bl	800672c <SPIF_WriteSector>
	  write[0] = vol;
 8001b86:	4b22      	ldr	r3, [pc, #136]	@ (8001c10 <storestate+0x118>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <storestate+0x104>)
 8001b8e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 4);
 8001b90:	2304      	movs	r3, #4
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	4a19      	ldr	r2, [pc, #100]	@ (8001bfc <storestate+0x104>)
 8001b98:	2114      	movs	r1, #20
 8001b9a:	4816      	ldr	r0, [pc, #88]	@ (8001bf4 <storestate+0xfc>)
 8001b9c:	f004 fdc6 	bl	800672c <SPIF_WriteSector>
	  write[0] = squelch;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <storestate+0x11c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <storestate+0x104>)
 8001ba8:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 5);
 8001baa:	2305      	movs	r3, #5
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <storestate+0x104>)
 8001bb2:	2114      	movs	r1, #20
 8001bb4:	480f      	ldr	r0, [pc, #60]	@ (8001bf4 <storestate+0xfc>)
 8001bb6:	f004 fdb9 	bl	800672c <SPIF_WriteSector>
	  write[0] = micgain;
 8001bba:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <storestate+0x120>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <storestate+0x104>)
 8001bc2:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 6);
 8001bc4:	2306      	movs	r3, #6
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	4a0c      	ldr	r2, [pc, #48]	@ (8001bfc <storestate+0x104>)
 8001bcc:	2114      	movs	r1, #20
 8001bce:	4809      	ldr	r0, [pc, #36]	@ (8001bf4 <storestate+0xfc>)
 8001bd0:	f004 fdac 	bl	800672c <SPIF_WriteSector>
	  write[0] = sidetone;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <storestate+0x124>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <storestate+0x104>)
 8001bdc:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 7);
 8001bde:	2307      	movs	r3, #7
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2301      	movs	r3, #1
 8001be4:	4a05      	ldr	r2, [pc, #20]	@ (8001bfc <storestate+0x104>)
 8001be6:	2114      	movs	r1, #20
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <storestate+0xfc>)
 8001bea:	f004 fd9f 	bl	800672c <SPIF_WriteSector>
  }
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000069c 	.word	0x2000069c
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	20000730 	.word	0x20000730
 8001c00:	200006bc 	.word	0x200006bc
 8001c04:	51eb851f 	.word	0x51eb851f
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	200006c0 	.word	0x200006c0
 8001c10:	200006c4 	.word	0x200006c4
 8001c14:	200006c8 	.word	0x200006c8
 8001c18:	20000014 	.word	0x20000014
 8001c1c:	20000018 	.word	0x20000018

08001c20 <loadstate>:

  void loadstate() { // called on startup
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af02      	add	r7, sp, #8
	  SPIF_ReadSector(&spif, 20, read, 1, 0);
 8001c26:	2300      	movs	r3, #0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	4a5a      	ldr	r2, [pc, #360]	@ (8001d98 <loadstate+0x178>)
 8001c2e:	2114      	movs	r1, #20
 8001c30:	485a      	ldr	r0, [pc, #360]	@ (8001d9c <loadstate+0x17c>)
 8001c32:	f004 fde5 	bl	8006800 <SPIF_ReadSector>
	  MHz = read[0];
 8001c36:	4b58      	ldr	r3, [pc, #352]	@ (8001d98 <loadstate+0x178>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b58      	ldr	r3, [pc, #352]	@ (8001da0 <loadstate+0x180>)
 8001c3e:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 1);
 8001c40:	2301      	movs	r3, #1
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2301      	movs	r3, #1
 8001c46:	4a54      	ldr	r2, [pc, #336]	@ (8001d98 <loadstate+0x178>)
 8001c48:	2114      	movs	r1, #20
 8001c4a:	4854      	ldr	r0, [pc, #336]	@ (8001d9c <loadstate+0x17c>)
 8001c4c:	f004 fdd8 	bl	8006800 <SPIF_ReadSector>
	  KHz = read[0] * 25;
 8001c50:	4b51      	ldr	r3, [pc, #324]	@ (8001d98 <loadstate+0x178>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009a      	lsls	r2, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a50      	ldr	r2, [pc, #320]	@ (8001da4 <loadstate+0x184>)
 8001c62:	6013      	str	r3, [r2, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 2);
 8001c64:	2302      	movs	r3, #2
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d98 <loadstate+0x178>)
 8001c6c:	2114      	movs	r1, #20
 8001c6e:	484b      	ldr	r0, [pc, #300]	@ (8001d9c <loadstate+0x17c>)
 8001c70:	f004 fdc6 	bl	8006800 <SPIF_ReadSector>
	  SM = read[0];
 8001c74:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <loadstate+0x178>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001da8 <loadstate+0x188>)
 8001c7c:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 3);
 8001c7e:	2303      	movs	r3, #3
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2301      	movs	r3, #1
 8001c84:	4a44      	ldr	r2, [pc, #272]	@ (8001d98 <loadstate+0x178>)
 8001c86:	2114      	movs	r1, #20
 8001c88:	4844      	ldr	r0, [pc, #272]	@ (8001d9c <loadstate+0x17c>)
 8001c8a:	f004 fdb9 	bl	8006800 <SPIF_ReadSector>
	  SK = read[0] * 25;
 8001c8e:	4b42      	ldr	r3, [pc, #264]	@ (8001d98 <loadstate+0x178>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	009a      	lsls	r2, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a43      	ldr	r2, [pc, #268]	@ (8001dac <loadstate+0x18c>)
 8001ca0:	6013      	str	r3, [r2, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 4);
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8001d98 <loadstate+0x178>)
 8001caa:	2114      	movs	r1, #20
 8001cac:	483b      	ldr	r0, [pc, #236]	@ (8001d9c <loadstate+0x17c>)
 8001cae:	f004 fda7 	bl	8006800 <SPIF_ReadSector>
	  vol = read[0];
 8001cb2:	4b39      	ldr	r3, [pc, #228]	@ (8001d98 <loadstate+0x178>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b3d      	ldr	r3, [pc, #244]	@ (8001db0 <loadstate+0x190>)
 8001cba:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 5);
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	4a35      	ldr	r2, [pc, #212]	@ (8001d98 <loadstate+0x178>)
 8001cc4:	2114      	movs	r1, #20
 8001cc6:	4835      	ldr	r0, [pc, #212]	@ (8001d9c <loadstate+0x17c>)
 8001cc8:	f004 fd9a 	bl	8006800 <SPIF_ReadSector>
	  squelch = read[0];
 8001ccc:	4b32      	ldr	r3, [pc, #200]	@ (8001d98 <loadstate+0x178>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b38      	ldr	r3, [pc, #224]	@ (8001db4 <loadstate+0x194>)
 8001cd4:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 6);
 8001cd6:	2306      	movs	r3, #6
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8001d98 <loadstate+0x178>)
 8001cde:	2114      	movs	r1, #20
 8001ce0:	482e      	ldr	r0, [pc, #184]	@ (8001d9c <loadstate+0x17c>)
 8001ce2:	f004 fd8d 	bl	8006800 <SPIF_ReadSector>
	  micgain = read[0];
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d98 <loadstate+0x178>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b32      	ldr	r3, [pc, #200]	@ (8001db8 <loadstate+0x198>)
 8001cee:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 7);
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	4a28      	ldr	r2, [pc, #160]	@ (8001d98 <loadstate+0x178>)
 8001cf8:	2114      	movs	r1, #20
 8001cfa:	4828      	ldr	r0, [pc, #160]	@ (8001d9c <loadstate+0x17c>)
 8001cfc:	f004 fd80 	bl	8006800 <SPIF_ReadSector>
	  sidetone = read[0];
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <loadstate+0x178>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <loadstate+0x19c>)
 8001d08:	601a      	str	r2, [r3, #0]
      freq = MHz + (.001 * KHz);
 8001d0a:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <loadstate+0x180>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fbe8 	bl	80004e4 <__aeabi_i2d>
 8001d14:	4604      	mov	r4, r0
 8001d16:	460d      	mov	r5, r1
 8001d18:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <loadstate+0x184>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fbe1 	bl	80004e4 <__aeabi_i2d>
 8001d22:	a31b      	add	r3, pc, #108	@ (adr r3, 8001d90 <loadstate+0x170>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fc46 	bl	80005b8 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fa8a 	bl	800024c <__adddf3>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe ff12 	bl	8000b68 <__aeabi_d2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc0 <loadstate+0x1a0>)
 8001d48:	6013      	str	r3, [r2, #0]
      Standby = SM + (.001 * SK);
 8001d4a:	4b17      	ldr	r3, [pc, #92]	@ (8001da8 <loadstate+0x188>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fbc8 	bl	80004e4 <__aeabi_i2d>
 8001d54:	4604      	mov	r4, r0
 8001d56:	460d      	mov	r5, r1
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <loadstate+0x18c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbc1 	bl	80004e4 <__aeabi_i2d>
 8001d62:	a30b      	add	r3, pc, #44	@ (adr r3, 8001d90 <loadstate+0x170>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fc26 	bl	80005b8 <__aeabi_dmul>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4620      	mov	r0, r4
 8001d72:	4629      	mov	r1, r5
 8001d74:	f7fe fa6a 	bl	800024c <__adddf3>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fef2 	bl	8000b68 <__aeabi_d2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc4 <loadstate+0x1a4>)
 8001d88:	6013      	str	r3, [r2, #0]
  }
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d90:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d94:	3f50624d 	.word	0x3f50624d
 8001d98:	2000072c 	.word	0x2000072c
 8001d9c:	2000069c 	.word	0x2000069c
 8001da0:	20000004 	.word	0x20000004
 8001da4:	200006bc 	.word	0x200006bc
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	200006c0 	.word	0x200006c0
 8001db0:	200006c4 	.word	0x200006c4
 8001db4:	200006c8 	.word	0x200006c8
 8001db8:	20000014 	.word	0x20000014
 8001dbc:	20000018 	.word	0x20000018
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <millis>:
  uint32_t millis() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	  return xTaskGetTickCount();
 8001dcc:	f008 fc1e 	bl	800a60c <xTaskGetTickCount>
 8001dd0:	4603      	mov	r3, r0
  };
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b08e      	sub	sp, #56	@ 0x38
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dde:	f005 f905 	bl	8006fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de2:	f000 f851 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de6:	f000 f997 	bl	8002118 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001dea:	f000 f917 	bl	800201c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001dee:	f000 f88b 	bl	8001f08 <MX_SPI1_Init>
  MX_UART4_Init();
 8001df2:	f000 f8bf 	bl	8001f74 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001df6:	f000 f93b 	bl	8002070 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001dfa:	f000 f963 	bl	80020c4 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001dfe:	f000 f8e3 	bl	8001fc8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  SPIF_Init(&spif, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8001e02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e06:	4a19      	ldr	r2, [pc, #100]	@ (8001e6c <main+0x94>)
 8001e08:	4919      	ldr	r1, [pc, #100]	@ (8001e70 <main+0x98>)
 8001e0a:	481a      	ldr	r0, [pc, #104]	@ (8001e74 <main+0x9c>)
 8001e0c:	f004 fbbf 	bl	800658e <SPIF_Init>
  toDisplay();
 8001e10:	f7ff fdc2 	bl	8001998 <toDisplay>
  GLCD_INIT();
 8001e14:	f7ff fcf0 	bl	80017f8 <GLCD_INIT>
  loadstate();
 8001e18:	f7ff ff02 	bl	8001c20 <loadstate>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8001e1c:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <main+0xa0>)
 8001e1e:	f107 041c 	add.w	r4, r7, #28
 8001e22:	461d      	mov	r5, r3
 8001e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f008 f85c 	bl	8009ef4 <osThreadCreate>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e7c <main+0xa4>)
 8001e40:	6013      	str	r3, [r2, #0]

  /* definition and creation of RxThread */
  osThreadDef(RxThread, StartRxThread, osPriorityNormal, 0, 160);
 8001e42:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <main+0xa8>)
 8001e44:	463c      	mov	r4, r7
 8001e46:	461d      	mov	r5, r3
 8001e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RxThreadHandle = osThreadCreate(osThread(RxThread), NULL);
 8001e54:	463b      	mov	r3, r7
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f008 f84b 	bl	8009ef4 <osThreadCreate>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a08      	ldr	r2, [pc, #32]	@ (8001e84 <main+0xac>)
 8001e62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001e64:	f008 f83f 	bl	8009ee6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <main+0x90>
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	200004d4 	.word	0x200004d4
 8001e74:	2000069c 	.word	0x2000069c
 8001e78:	0800df2c 	.word	0x0800df2c
 8001e7c:	20000694 	.word	0x20000694
 8001e80:	0800df54 	.word	0x0800df54
 8001e84:	20000698 	.word	0x20000698

08001e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b090      	sub	sp, #64	@ 0x40
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	2228      	movs	r2, #40	@ 0x28
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f009 feca 	bl	800bc30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ebe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec4:	f107 0318 	add.w	r3, r7, #24
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 fd07 	bl	80078dc <HAL_RCC_OscConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001ed4:	f003 ff76 	bl	8005dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed8:	230f      	movs	r3, #15
 8001eda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001edc:	2302      	movs	r3, #2
 8001ede:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	2101      	movs	r1, #1
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f005 ff75 	bl	8007de0 <HAL_RCC_ClockConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001efc:	f003 ff62 	bl	8005dc4 <Error_Handler>
  }
}
 8001f00:	bf00      	nop
 8001f02:	3740      	adds	r7, #64	@ 0x40
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f0c:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f0e:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <MX_SPI1_Init+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f12:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f1a:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f3c:	2218      	movs	r2, #24
 8001f3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f54:	220a      	movs	r2, #10
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f5a:	f006 f8ff 	bl	800815c <HAL_SPI_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f64:	f003 ff2e 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200004d4 	.word	0x200004d4
 8001f70:	40013000 	.word	0x40013000

08001f74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <MX_UART4_Init+0x4c>)
 8001f7a:	4a12      	ldr	r2, [pc, #72]	@ (8001fc4 <MX_UART4_Init+0x50>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <MX_UART4_Init+0x4c>)
 8001f80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <MX_UART4_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <MX_UART4_Init+0x4c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <MX_UART4_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <MX_UART4_Init+0x4c>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <MX_UART4_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <MX_UART4_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	@ (8001fc0 <MX_UART4_Init+0x4c>)
 8001fac:	f007 f8ce 	bl	800914c <HAL_UART_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001fb6:	f003 ff05 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000052c 	.word	0x2000052c
 8001fc4:	40004c00 	.word	0x40004c00

08001fc8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <MX_UART5_Init+0x4c>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <MX_UART5_Init+0x50>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <MX_UART5_Init+0x4c>)
 8001fd4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001fd8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <MX_UART5_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <MX_UART5_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <MX_UART5_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <MX_UART5_Init+0x4c>)
 8001fee:	220c      	movs	r2, #12
 8001ff0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <MX_UART5_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <MX_UART5_Init+0x4c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	@ (8002014 <MX_UART5_Init+0x4c>)
 8002000:	f007 f8a4 	bl	800914c <HAL_UART_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800200a:	f003 fedb 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000574 	.word	0x20000574
 8002018:	40005000 	.word	0x40005000

0800201c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002022:	4a12      	ldr	r2, [pc, #72]	@ (800206c <MX_USART1_UART_Init+0x50>)
 8002024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800202c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800203a:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002052:	4805      	ldr	r0, [pc, #20]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002054:	f007 f87a 	bl	800914c <HAL_UART_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800205e:	f003 feb1 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200005bc 	.word	0x200005bc
 800206c:	40013800 	.word	0x40013800

08002070 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <MX_USART2_UART_Init+0x50>)
 8002078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 800207c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208e:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a6:	4805      	ldr	r0, [pc, #20]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 80020a8:	f007 f850 	bl	800914c <HAL_UART_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020b2:	f003 fe87 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000604 	.word	0x20000604
 80020c0:	40004400 	.word	0x40004400

080020c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020c8:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <MX_USART3_UART_Init+0x50>)
 80020cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020ea:	220c      	movs	r2, #12
 80020ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020fa:	4805      	ldr	r0, [pc, #20]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020fc:	f007 f826 	bl	800914c <HAL_UART_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002106:	f003 fe5d 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000064c 	.word	0x2000064c
 8002114:	40004800 	.word	0x40004800

08002118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	@ 0x28
 800211c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	f107 0318 	add.w	r3, r7, #24
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800212c:	4bb4      	ldr	r3, [pc, #720]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4ab3      	ldr	r2, [pc, #716]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 8002132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002136:	6193      	str	r3, [r2, #24]
 8002138:	4bb1      	ldr	r3, [pc, #708]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002144:	4bae      	ldr	r3, [pc, #696]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4aad      	ldr	r2, [pc, #692]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 800214a:	f043 0310 	orr.w	r3, r3, #16
 800214e:	6193      	str	r3, [r2, #24]
 8002150:	4bab      	ldr	r3, [pc, #684]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215c:	4ba8      	ldr	r3, [pc, #672]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4aa7      	ldr	r2, [pc, #668]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4ba5      	ldr	r3, [pc, #660]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002174:	4ba2      	ldr	r3, [pc, #648]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	4aa1      	ldr	r2, [pc, #644]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 800217a:	f043 0308 	orr.w	r3, r3, #8
 800217e:	6193      	str	r3, [r2, #24]
 8002180:	4b9f      	ldr	r3, [pc, #636]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218c:	4b9c      	ldr	r3, [pc, #624]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a9b      	ldr	r2, [pc, #620]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 8002192:	f043 0320 	orr.w	r3, r3, #32
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b99      	ldr	r3, [pc, #612]	@ (8002400 <MX_GPIO_Init+0x2e8>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RELAY3_Pin|MCU_DTR3_Pin|LCD_DB1_Pin|LCD_RW_Pin
 80021a4:	2200      	movs	r2, #0
 80021a6:	f240 7194 	movw	r1, #1940	@ 0x794
 80021aa:	4896      	ldr	r0, [pc, #600]	@ (8002404 <MX_GPIO_Init+0x2ec>)
 80021ac:	f005 fb41 	bl	8007832 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_DI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BKL_Pin|LCD_RESET_Pin|LCD_CS2_Pin|LCD_CS1_Pin
 80021b0:	2200      	movs	r2, #0
 80021b2:	f649 11fe 	movw	r1, #39422	@ 0x99fe
 80021b6:	4894      	ldr	r0, [pc, #592]	@ (8002408 <MX_GPIO_Init+0x2f0>)
 80021b8:	f005 fb3b 	bl	8007832 <HAL_GPIO_WritePin>
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|KEY_COL4_Pin
                          |KEY_COL7_Pin|KEY_COL6_Pin|KEY_COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB4_Pin|LCD_DB2_Pin|KEY_COL0_Pin|KEY_COL3_Pin
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 80021c2:	4892      	ldr	r0, [pc, #584]	@ (800240c <MX_GPIO_Init+0x2f4>)
 80021c4:	f005 fb35 	bl	8007832 <HAL_GPIO_WritePin>
                          |KEY_COL2_Pin|KEY_COL5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DB3_Pin|LCD_DB0_Pin|MCU_DTR2_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	f240 2183 	movw	r1, #643	@ 0x283
 80021ce:	4890      	ldr	r0, [pc, #576]	@ (8002410 <MX_GPIO_Init+0x2f8>)
 80021d0:	f005 fb2f 	bl	8007832 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEY_COL1_Pin|KEY_COL9_Pin|RELAY1_Pin|MCU_DTR1_Pin
 80021d4:	2200      	movs	r2, #0
 80021d6:	f248 0199 	movw	r1, #32921	@ 0x8099
 80021da:	488e      	ldr	r0, [pc, #568]	@ (8002414 <MX_GPIO_Init+0x2fc>)
 80021dc:	f005 fb29 	bl	8007832 <HAL_GPIO_WritePin>
                          |RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RELAY3_Pin MCU_DTR3_Pin LCD_DB1_Pin LCD_RW_Pin
                           LCD_E_Pin LCD_DI_Pin */
  GPIO_InitStruct.Pin = RELAY3_Pin|MCU_DTR3_Pin|LCD_DB1_Pin|LCD_RW_Pin
 80021e0:	f240 7394 	movw	r3, #1940	@ 0x794
 80021e4:	61bb      	str	r3, [r7, #24]
                          |LCD_E_Pin|LCD_DI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2302      	movs	r3, #2
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f2:	f107 0318 	add.w	r3, r7, #24
 80021f6:	4619      	mov	r1, r3
 80021f8:	4882      	ldr	r0, [pc, #520]	@ (8002404 <MX_GPIO_Init+0x2ec>)
 80021fa:	f005 f96f 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_DSR3_Pin GP_SW4_Pin GP_SW5_Pin GP_SW1_Pin
                           GP_SW2_Pin GP_SW3_Pin RIGHT_SW_Pin */
  GPIO_InitStruct.Pin = MCU_DSR3_Pin|GP_SW4_Pin|GP_SW5_Pin|GP_SW1_Pin
 80021fe:	f647 0368 	movw	r3, #30824	@ 0x7868
 8002202:	61bb      	str	r3, [r7, #24]
                          |GP_SW2_Pin|GP_SW3_Pin|RIGHT_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800220c:	f107 0318 	add.w	r3, r7, #24
 8002210:	4619      	mov	r1, r3
 8002212:	487c      	ldr	r0, [pc, #496]	@ (8002404 <MX_GPIO_Init+0x2ec>)
 8002214:	f005 f962 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : GP_SW6_Pin LEFT_SW_Pin */
  GPIO_InitStruct.Pin = GP_SW6_Pin|LEFT_SW_Pin;
 8002218:	f242 0301 	movw	r3, #8193	@ 0x2001
 800221c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002226:	f107 0318 	add.w	r3, r7, #24
 800222a:	4619      	mov	r1, r3
 800222c:	4877      	ldr	r0, [pc, #476]	@ (800240c <MX_GPIO_Init+0x2f4>)
 800222e:	f005 f955 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002232:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002238:	2303      	movs	r3, #3
 800223a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223c:	f107 0318 	add.w	r3, r7, #24
 8002240:	4619      	mov	r1, r3
 8002242:	4872      	ldr	r0, [pc, #456]	@ (800240c <MX_GPIO_Init+0x2f4>)
 8002244:	f005 f94a 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_A1_Pin LEFT_B1_Pin LEFT_B2_Pin */
  GPIO_InitStruct.Pin = LEFT_A1_Pin|LEFT_B1_Pin|LEFT_B2_Pin;
 8002248:	230e      	movs	r3, #14
 800224a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800224c:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <MX_GPIO_Init+0x300>)
 800224e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002254:	f107 0318 	add.w	r3, r7, #24
 8002258:	4619      	mov	r1, r3
 800225a:	486c      	ldr	r0, [pc, #432]	@ (800240c <MX_GPIO_Init+0x2f4>)
 800225c:	f005 f93e 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_A2_Pin */
  GPIO_InitStruct.Pin = LEFT_A2_Pin;
 8002260:	2301      	movs	r3, #1
 8002262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002264:	4b6c      	ldr	r3, [pc, #432]	@ (8002418 <MX_GPIO_Init+0x300>)
 8002266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEFT_A2_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0318 	add.w	r3, r7, #24
 8002270:	4619      	mov	r1, r3
 8002272:	4865      	ldr	r0, [pc, #404]	@ (8002408 <MX_GPIO_Init+0x2f0>)
 8002274:	f005 f932 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BKL_Pin LCD_RESET_Pin LCD_CS2_Pin LCD_CS1_Pin
                           LCD_DB7_Pin LCD_DB6_Pin LCD_DB5_Pin KEY_COL4_Pin
                           KEY_COL7_Pin KEY_COL6_Pin KEY_COL8_Pin */
  GPIO_InitStruct.Pin = LCD_BKL_Pin|LCD_RESET_Pin|LCD_CS2_Pin|LCD_CS1_Pin
 8002278:	f649 13fe 	movw	r3, #39422	@ 0x99fe
 800227c:	61bb      	str	r3, [r7, #24]
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|KEY_COL4_Pin
                          |KEY_COL7_Pin|KEY_COL6_Pin|KEY_COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227e:	2301      	movs	r3, #1
 8002280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2302      	movs	r3, #2
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0318 	add.w	r3, r7, #24
 800228e:	4619      	mov	r1, r3
 8002290:	485d      	ldr	r0, [pc, #372]	@ (8002408 <MX_GPIO_Init+0x2f0>)
 8002292:	f005 f923 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB4_Pin LCD_DB2_Pin KEY_COL0_Pin KEY_COL3_Pin
                           KEY_COL2_Pin KEY_COL5_Pin */
  GPIO_InitStruct.Pin = LCD_DB4_Pin|LCD_DB2_Pin|KEY_COL0_Pin|KEY_COL3_Pin
 8002296:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 800229a:	61bb      	str	r3, [r7, #24]
                          |KEY_COL2_Pin|KEY_COL5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229c:	2301      	movs	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2302      	movs	r3, #2
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	4619      	mov	r1, r3
 80022ae:	4857      	ldr	r0, [pc, #348]	@ (800240c <MX_GPIO_Init+0x2f4>)
 80022b0:	f005 f914 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB3_Pin LCD_DB0_Pin MCU_DTR2_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DB3_Pin|LCD_DB0_Pin|MCU_DTR2_Pin|FLASH_CS_Pin;
 80022b4:	f240 2383 	movw	r3, #643	@ 0x283
 80022b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ba:	2301      	movs	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2302      	movs	r3, #2
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c6:	f107 0318 	add.w	r3, r7, #24
 80022ca:	4619      	mov	r1, r3
 80022cc:	4850      	ldr	r0, [pc, #320]	@ (8002410 <MX_GPIO_Init+0x2f8>)
 80022ce:	f005 f905 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin KEY_ROW1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|KEY_ROW1_Pin;
 80022d2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80022d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f107 0318 	add.w	r3, r7, #24
 80022e4:	4619      	mov	r1, r3
 80022e6:	484a      	ldr	r0, [pc, #296]	@ (8002410 <MX_GPIO_Init+0x2f8>)
 80022e8:	f005 f8f8 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_A1_Pin */
  GPIO_InitStruct.Pin = RIGHT_A1_Pin;
 80022ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022f2:	4b49      	ldr	r3, [pc, #292]	@ (8002418 <MX_GPIO_Init+0x300>)
 80022f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RIGHT_A1_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 0318 	add.w	r3, r7, #24
 80022fe:	4619      	mov	r1, r3
 8002300:	4840      	ldr	r0, [pc, #256]	@ (8002404 <MX_GPIO_Init+0x2ec>)
 8002302:	f005 f8eb 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_B1_Pin RIGHT_B2_Pin RIGHT_A2_Pin */
  GPIO_InitStruct.Pin = RIGHT_B1_Pin|RIGHT_B2_Pin|RIGHT_A2_Pin;
 8002306:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800230a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800230c:	4b42      	ldr	r3, [pc, #264]	@ (8002418 <MX_GPIO_Init+0x300>)
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 0318 	add.w	r3, r7, #24
 8002318:	4619      	mov	r1, r3
 800231a:	483d      	ldr	r0, [pc, #244]	@ (8002410 <MX_GPIO_Init+0x2f8>)
 800231c:	f005 f8de 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_ROW0_Pin KEY_ROW3_Pin KEY_ROW2_Pin KEY_ROW5_Pin
                           KEY_ROW4_Pin KEY_ROW7_Pin KEY_ROW6_Pin MCU_DSR1_Pin */
  GPIO_InitStruct.Pin = KEY_ROW0_Pin|KEY_ROW3_Pin|KEY_ROW2_Pin|KEY_ROW5_Pin
 8002320:	f647 7302 	movw	r3, #32514	@ 0x7f02
 8002324:	61bb      	str	r3, [r7, #24]
                          |KEY_ROW4_Pin|KEY_ROW7_Pin|KEY_ROW6_Pin|MCU_DSR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232e:	f107 0318 	add.w	r3, r7, #24
 8002332:	4619      	mov	r1, r3
 8002334:	4837      	ldr	r0, [pc, #220]	@ (8002414 <MX_GPIO_Init+0x2fc>)
 8002336:	f005 f8d1 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_COL1_Pin KEY_COL9_Pin RELAY1_Pin MCU_DTR1_Pin
                           RELAY2_Pin */
  GPIO_InitStruct.Pin = KEY_COL1_Pin|KEY_COL9_Pin|RELAY1_Pin|MCU_DTR1_Pin
 800233a:	f248 0399 	movw	r3, #32921	@ 0x8099
 800233e:	61bb      	str	r3, [r7, #24]
                          |RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	2301      	movs	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2302      	movs	r3, #2
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234c:	f107 0318 	add.w	r3, r7, #24
 8002350:	4619      	mov	r1, r3
 8002352:	4830      	ldr	r0, [pc, #192]	@ (8002414 <MX_GPIO_Init+0x2fc>)
 8002354:	f005 f8c2 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002358:	2340      	movs	r3, #64	@ 0x40
 800235a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2302      	movs	r3, #2
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 0318 	add.w	r3, r7, #24
 8002368:	4619      	mov	r1, r3
 800236a:	4829      	ldr	r0, [pc, #164]	@ (8002410 <MX_GPIO_Init+0x2f8>)
 800236c:	f005 f8b6 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002376:	2303      	movs	r3, #3
 8002378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237a:	f107 0318 	add.w	r3, r7, #24
 800237e:	4619      	mov	r1, r3
 8002380:	4823      	ldr	r0, [pc, #140]	@ (8002410 <MX_GPIO_Init+0x2f8>)
 8002382:	f005 f8ab 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002386:	2303      	movs	r3, #3
 8002388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238a:	2303      	movs	r3, #3
 800238c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800238e:	f107 0318 	add.w	r3, r7, #24
 8002392:	4619      	mov	r1, r3
 8002394:	481b      	ldr	r0, [pc, #108]	@ (8002404 <MX_GPIO_Init+0x2ec>)
 8002396:	f005 f8a1 	bl	80074dc <HAL_GPIO_Init>

  /*Configures the port and pin on which the EVENTOUT Cortex signal will be connected */
  HAL_GPIOEx_ConfigEventout(AFIO_EVENTOUT_PORT_B, AFIO_EVENTOUT_PIN_6);
 800239a:	2106      	movs	r1, #6
 800239c:	2010      	movs	r0, #16
 800239e:	f005 fa79 	bl	8007894 <HAL_GPIOEx_ConfigEventout>

  /*Enables the Event Output */
  HAL_GPIOEx_EnableEventout();
 80023a2:	f005 fa8d 	bl	80078c0 <HAL_GPIOEx_EnableEventout>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2105      	movs	r1, #5
 80023aa:	2006      	movs	r0, #6
 80023ac:	f004 ff29 	bl	8007202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023b0:	2006      	movs	r0, #6
 80023b2:	f004 ff42 	bl	800723a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2105      	movs	r1, #5
 80023ba:	2007      	movs	r0, #7
 80023bc:	f004 ff21 	bl	8007202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80023c0:	2007      	movs	r0, #7
 80023c2:	f004 ff3a 	bl	800723a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2105      	movs	r1, #5
 80023ca:	2008      	movs	r0, #8
 80023cc:	f004 ff19 	bl	8007202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80023d0:	2008      	movs	r0, #8
 80023d2:	f004 ff32 	bl	800723a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2105      	movs	r1, #5
 80023da:	2009      	movs	r0, #9
 80023dc:	f004 ff11 	bl	8007202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80023e0:	2009      	movs	r0, #9
 80023e2:	f004 ff2a 	bl	800723a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2105      	movs	r1, #5
 80023ea:	2028      	movs	r0, #40	@ 0x28
 80023ec:	f004 ff09 	bl	8007202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023f0:	2028      	movs	r0, #40	@ 0x28
 80023f2:	f004 ff22 	bl	800723a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023f6:	bf00      	nop
 80023f8:	3728      	adds	r7, #40	@ 0x28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40011800 	.word	0x40011800
 8002408:	40010800 	.word	0x40010800
 800240c:	40011000 	.word	0x40011000
 8002410:	40010c00 	.word	0x40010c00
 8002414:	40011400 	.word	0x40011400
 8002418:	10110000 	.word	0x10110000

0800241c <read_encoder>:

/* USER CODE BEGIN 4 */

void read_encoder() { // MHz right outer knob HERE
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 8002422:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <read_encoder+0xd8>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	f083 0301 	eor.w	r3, r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d05d      	beq.n	80024ec <read_encoder+0xd0>
    static uint8_t old_AB = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; //{0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0}; // Lookup table

    old_AB <<=2;  // Remember previous state
 8002430:	4b31      	ldr	r3, [pc, #196]	@ (80024f8 <read_encoder+0xdc>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b2f      	ldr	r3, [pc, #188]	@ (80024f8 <read_encoder+0xdc>)
 800243a:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(RIGHT_A2_GPIO_Port, RIGHT_A2_Pin)) old_AB |= 0x02; // Add current state of pin A
 800243c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002440:	482e      	ldr	r0, [pc, #184]	@ (80024fc <read_encoder+0xe0>)
 8002442:	f005 f9df 	bl	8007804 <HAL_GPIO_ReadPin>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <read_encoder+0x3e>
 800244c:	4b2a      	ldr	r3, [pc, #168]	@ (80024f8 <read_encoder+0xdc>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <read_encoder+0xdc>)
 8002458:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(RIGHT_B2_GPIO_Port, RIGHT_B2_Pin)) old_AB |= 0x01; // Add current state of pin B
 800245a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800245e:	4827      	ldr	r0, [pc, #156]	@ (80024fc <read_encoder+0xe0>)
 8002460:	f005 f9d0 	bl	8007804 <HAL_GPIO_ReadPin>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <read_encoder+0x5c>
 800246a:	4b23      	ldr	r3, [pc, #140]	@ (80024f8 <read_encoder+0xdc>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <read_encoder+0xdc>)
 8002476:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_AB & 0x0f )];
 8002478:	4b1f      	ldr	r3, [pc, #124]	@ (80024f8 <read_encoder+0xdc>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	4a1f      	ldr	r2, [pc, #124]	@ (8002500 <read_encoder+0xe4>)
 8002482:	56d3      	ldrsb	r3, [r2, r3]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <read_encoder+0xe8>)
 8002488:	f993 3000 	ldrsb.w	r3, [r3]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4413      	add	r3, r2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	b25a      	sxtb	r2, r3
 8002494:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <read_encoder+0xe8>)
 8002496:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 0 ) {        // Four steps forward
 8002498:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <read_encoder+0xe8>)
 800249a:	f993 3000 	ldrsb.w	r3, [r3]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	dd0f      	ble.n	80024c2 <read_encoder+0xa6>
      int changevalue = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	603b      	str	r3, [r7, #0]
      if (SM < 136) {
 80024a6:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <read_encoder+0xec>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b87      	cmp	r3, #135	@ 0x87
 80024ac:	dc05      	bgt.n	80024ba <read_encoder+0x9e>
        SM = SM + changevalue;              // Update counter
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <read_encoder+0xec>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	4a14      	ldr	r2, [pc, #80]	@ (8002508 <read_encoder+0xec>)
 80024b8:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 80024ba:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <read_encoder+0xe8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
        SM = SM + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 80024c0:	e014      	b.n	80024ec <read_encoder+0xd0>
    else if( encval < 0 ) {        // Four steps backward
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <read_encoder+0xe8>)
 80024c4:	f993 3000 	ldrsb.w	r3, [r3]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	da0f      	bge.n	80024ec <read_encoder+0xd0>
      int changevalue = -1;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024d0:	607b      	str	r3, [r7, #4]
      if (SM > 118) {
 80024d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <read_encoder+0xec>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b76      	cmp	r3, #118	@ 0x76
 80024d8:	dd05      	ble.n	80024e6 <read_encoder+0xca>
        SM = SM + changevalue;              // Update counter
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <read_encoder+0xec>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	4a09      	ldr	r2, [pc, #36]	@ (8002508 <read_encoder+0xec>)
 80024e4:	6013      	str	r3, [r2, #0]
      encval = 0;
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <read_encoder+0xe8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000010 	.word	0x20000010
 80024f8:	2000001c 	.word	0x2000001c
 80024fc:	40010c00 	.word	0x40010c00
 8002500:	0800e88c 	.word	0x0800e88c
 8002504:	20000762 	.word	0x20000762
 8002508:	2000000c 	.word	0x2000000c

0800250c <read_encoder2>:

void read_encoder2() { // KHz right inner knob
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 8002512:	4b35      	ldr	r3, [pc, #212]	@ (80025e8 <read_encoder2+0xdc>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d05f      	beq.n	80025e0 <read_encoder2+0xd4>
    static uint8_t old_GH = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

    old_GH <<=2;  // Remember previous state
 8002520:	4b32      	ldr	r3, [pc, #200]	@ (80025ec <read_encoder2+0xe0>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b30      	ldr	r3, [pc, #192]	@ (80025ec <read_encoder2+0xe0>)
 800252a:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(RIGHT_A1_GPIO_Port, RIGHT_A1_Pin)) old_GH |= 0x02; // Add current state of pin G
 800252c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002530:	482f      	ldr	r0, [pc, #188]	@ (80025f0 <read_encoder2+0xe4>)
 8002532:	f005 f967 	bl	8007804 <HAL_GPIO_ReadPin>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <read_encoder2+0x3e>
 800253c:	4b2b      	ldr	r3, [pc, #172]	@ (80025ec <read_encoder2+0xe0>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <read_encoder2+0xe0>)
 8002548:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(RIGHT_B1_GPIO_Port, RIGHT_B1_Pin)) old_GH |= 0x01; // Add current state of pin H
 800254a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800254e:	4829      	ldr	r0, [pc, #164]	@ (80025f4 <read_encoder2+0xe8>)
 8002550:	f005 f958 	bl	8007804 <HAL_GPIO_ReadPin>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <read_encoder2+0x5c>
 800255a:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <read_encoder2+0xe0>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	b2da      	uxtb	r2, r3
 8002564:	4b21      	ldr	r3, [pc, #132]	@ (80025ec <read_encoder2+0xe0>)
 8002566:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_GH & 0x0f )];
 8002568:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <read_encoder2+0xe0>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	4a21      	ldr	r2, [pc, #132]	@ (80025f8 <read_encoder2+0xec>)
 8002572:	56d3      	ldrsb	r3, [r2, r3]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4b21      	ldr	r3, [pc, #132]	@ (80025fc <read_encoder2+0xf0>)
 8002578:	f993 3000 	ldrsb.w	r3, [r3]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	4413      	add	r3, r2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	b25a      	sxtb	r2, r3
 8002584:	4b1d      	ldr	r3, [pc, #116]	@ (80025fc <read_encoder2+0xf0>)
 8002586:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 0 ) {        // Four steps forward
 8002588:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <read_encoder2+0xf0>)
 800258a:	f993 3000 	ldrsb.w	r3, [r3]
 800258e:	2b00      	cmp	r3, #0
 8002590:	dd11      	ble.n	80025b6 <read_encoder2+0xaa>
      int changevalue = 25;
 8002592:	2319      	movs	r3, #25
 8002594:	603b      	str	r3, [r7, #0]
      if (SK < 975) {
 8002596:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <read_encoder2+0xf4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f240 32ce 	movw	r2, #974	@ 0x3ce
 800259e:	4293      	cmp	r3, r2
 80025a0:	dc05      	bgt.n	80025ae <read_encoder2+0xa2>
        SK = SK + changevalue;              // Update counter
 80025a2:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <read_encoder2+0xf4>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	4a15      	ldr	r2, [pc, #84]	@ (8002600 <read_encoder2+0xf4>)
 80025ac:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 80025ae:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <read_encoder2+0xf0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
        SK = SK + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 80025b4:	e014      	b.n	80025e0 <read_encoder2+0xd4>
    else if( encval < 0 ) {        // Four steps backward
 80025b6:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <read_encoder2+0xf0>)
 80025b8:	f993 3000 	ldrsb.w	r3, [r3]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da0f      	bge.n	80025e0 <read_encoder2+0xd4>
      int changevalue = -25;
 80025c0:	f06f 0318 	mvn.w	r3, #24
 80025c4:	607b      	str	r3, [r7, #4]
      if (SK > 0) {
 80025c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <read_encoder2+0xf4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	dd05      	ble.n	80025da <read_encoder2+0xce>
        SK = SK + changevalue;              // Update counter
 80025ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <read_encoder2+0xf4>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002600 <read_encoder2+0xf4>)
 80025d8:	6013      	str	r3, [r2, #0]
      encval = 0;
 80025da:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <read_encoder2+0xf0>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000010 	.word	0x20000010
 80025ec:	2000001d 	.word	0x2000001d
 80025f0:	40011800 	.word	0x40011800
 80025f4:	40010c00 	.word	0x40010c00
 80025f8:	0800e89c 	.word	0x0800e89c
 80025fc:	20000763 	.word	0x20000763
 8002600:	200006c0 	.word	0x200006c0

08002604 <read_encoder3>:

void read_encoder3() { // volume left inner knob
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 800260a:	4b34      	ldr	r3, [pc, #208]	@ (80026dc <read_encoder3+0xd8>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05c      	beq.n	80026d2 <read_encoder3+0xce>
    static uint8_t old_CD = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

    old_CD <<=2;  // Remember previous state
 8002618:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <read_encoder3+0xdc>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <read_encoder3+0xdc>)
 8002622:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 8002624:	2102      	movs	r1, #2
 8002626:	482f      	ldr	r0, [pc, #188]	@ (80026e4 <read_encoder3+0xe0>)
 8002628:	f005 f8ec 	bl	8007804 <HAL_GPIO_ReadPin>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <read_encoder3+0x3c>
 8002632:	4b2b      	ldr	r3, [pc, #172]	@ (80026e0 <read_encoder3+0xdc>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b28      	ldr	r3, [pc, #160]	@ (80026e0 <read_encoder3+0xdc>)
 800263e:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 8002640:	2104      	movs	r1, #4
 8002642:	4828      	ldr	r0, [pc, #160]	@ (80026e4 <read_encoder3+0xe0>)
 8002644:	f005 f8de 	bl	8007804 <HAL_GPIO_ReadPin>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <read_encoder3+0x58>
 800264e:	4b24      	ldr	r3, [pc, #144]	@ (80026e0 <read_encoder3+0xdc>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b21      	ldr	r3, [pc, #132]	@ (80026e0 <read_encoder3+0xdc>)
 800265a:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_CD & 0x0f )];
 800265c:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <read_encoder3+0xdc>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	4a20      	ldr	r2, [pc, #128]	@ (80026e8 <read_encoder3+0xe4>)
 8002666:	56d3      	ldrsb	r3, [r2, r3]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <read_encoder3+0xe8>)
 800266c:	f993 3000 	ldrsb.w	r3, [r3]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4413      	add	r3, r2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	b25a      	sxtb	r2, r3
 8002678:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <read_encoder3+0xe8>)
 800267a:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 1 ) {        // Four steps forward
 800267c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <read_encoder3+0xe8>)
 800267e:	f993 3000 	ldrsb.w	r3, [r3]
 8002682:	2b01      	cmp	r3, #1
 8002684:	dd0f      	ble.n	80026a6 <read_encoder3+0xa2>
      int changevalue = 1;
 8002686:	2301      	movs	r3, #1
 8002688:	603b      	str	r3, [r7, #0]
      if (vol < 20) {
 800268a:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <read_encoder3+0xec>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b13      	cmp	r3, #19
 8002690:	dc05      	bgt.n	800269e <read_encoder3+0x9a>
        vol = vol + changevalue;              // Update counter
 8002692:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <read_encoder3+0xec>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	4413      	add	r3, r2
 800269a:	4a15      	ldr	r2, [pc, #84]	@ (80026f0 <read_encoder3+0xec>)
 800269c:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 800269e:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <read_encoder3+0xe8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
        vol = vol + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 80026a4:	e015      	b.n	80026d2 <read_encoder3+0xce>
    else if( encval < -1 ) {        // Four steps backward
 80026a6:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <read_encoder3+0xe8>)
 80026a8:	f993 3000 	ldrsb.w	r3, [r3]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026b0:	da0f      	bge.n	80026d2 <read_encoder3+0xce>
      int changevalue = -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026b6:	607b      	str	r3, [r7, #4]
      if (vol > 0) {
 80026b8:	4b0d      	ldr	r3, [pc, #52]	@ (80026f0 <read_encoder3+0xec>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	dd05      	ble.n	80026cc <read_encoder3+0xc8>
        vol = vol + changevalue;              // Update counter
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <read_encoder3+0xec>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <read_encoder3+0xec>)
 80026ca:	6013      	str	r3, [r2, #0]
      encval = 0;
 80026cc:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <read_encoder3+0xe8>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000010 	.word	0x20000010
 80026e0:	2000001e 	.word	0x2000001e
 80026e4:	40011000 	.word	0x40011000
 80026e8:	0800e8ac 	.word	0x0800e8ac
 80026ec:	20000764 	.word	0x20000764
 80026f0:	200006c4 	.word	0x200006c4

080026f4 <read_encoder4>:

void read_encoder4() { // squelch left outer knob
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 80026fa:	4b34      	ldr	r3, [pc, #208]	@ (80027cc <read_encoder4+0xd8>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05c      	beq.n	80027c2 <read_encoder4+0xce>
    static uint8_t old_IJ = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

    old_IJ <<=2;  // Remember previous state
 8002708:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <read_encoder4+0xdc>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b2f      	ldr	r3, [pc, #188]	@ (80027d0 <read_encoder4+0xdc>)
 8002712:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(LEFT_A2_GPIO_Port, LEFT_A2_Pin)) old_IJ |= 0x02; // Add current state of pin I
 8002714:	2101      	movs	r1, #1
 8002716:	482f      	ldr	r0, [pc, #188]	@ (80027d4 <read_encoder4+0xe0>)
 8002718:	f005 f874 	bl	8007804 <HAL_GPIO_ReadPin>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <read_encoder4+0x3c>
 8002722:	4b2b      	ldr	r3, [pc, #172]	@ (80027d0 <read_encoder4+0xdc>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	f043 0302 	orr.w	r3, r3, #2
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b28      	ldr	r3, [pc, #160]	@ (80027d0 <read_encoder4+0xdc>)
 800272e:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(LEFT_B2_GPIO_Port, LEFT_B2_Pin)) old_IJ |= 0x01; // Add current state of pin J
 8002730:	2108      	movs	r1, #8
 8002732:	4829      	ldr	r0, [pc, #164]	@ (80027d8 <read_encoder4+0xe4>)
 8002734:	f005 f866 	bl	8007804 <HAL_GPIO_ReadPin>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <read_encoder4+0x58>
 800273e:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <read_encoder4+0xdc>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4b21      	ldr	r3, [pc, #132]	@ (80027d0 <read_encoder4+0xdc>)
 800274a:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_IJ & 0x0f )];
 800274c:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <read_encoder4+0xdc>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	4a21      	ldr	r2, [pc, #132]	@ (80027dc <read_encoder4+0xe8>)
 8002756:	56d3      	ldrsb	r3, [r2, r3]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b21      	ldr	r3, [pc, #132]	@ (80027e0 <read_encoder4+0xec>)
 800275c:	f993 3000 	ldrsb.w	r3, [r3]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	4413      	add	r3, r2
 8002764:	b2db      	uxtb	r3, r3
 8002766:	b25a      	sxtb	r2, r3
 8002768:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <read_encoder4+0xec>)
 800276a:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 1 ) {        // Four steps forward
 800276c:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <read_encoder4+0xec>)
 800276e:	f993 3000 	ldrsb.w	r3, [r3]
 8002772:	2b01      	cmp	r3, #1
 8002774:	dd0f      	ble.n	8002796 <read_encoder4+0xa2>
      int changevalue = 1;
 8002776:	2301      	movs	r3, #1
 8002778:	603b      	str	r3, [r7, #0]
      if (squelch < 20) {
 800277a:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <read_encoder4+0xf0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b13      	cmp	r3, #19
 8002780:	dc05      	bgt.n	800278e <read_encoder4+0x9a>
        squelch = squelch + changevalue;              // Update counter
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <read_encoder4+0xf0>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	4413      	add	r3, r2
 800278a:	4a16      	ldr	r2, [pc, #88]	@ (80027e4 <read_encoder4+0xf0>)
 800278c:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 800278e:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <read_encoder4+0xec>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
        squelch = squelch + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 8002794:	e015      	b.n	80027c2 <read_encoder4+0xce>
    else if( encval < -1 ) {        // Four steps backward
 8002796:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <read_encoder4+0xec>)
 8002798:	f993 3000 	ldrsb.w	r3, [r3]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027a0:	da0f      	bge.n	80027c2 <read_encoder4+0xce>
      int changevalue = -1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027a6:	607b      	str	r3, [r7, #4]
      if (squelch > 0) {
 80027a8:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <read_encoder4+0xf0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	dd05      	ble.n	80027bc <read_encoder4+0xc8>
        squelch = squelch + changevalue;              // Update counter
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <read_encoder4+0xf0>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <read_encoder4+0xf0>)
 80027ba:	6013      	str	r3, [r2, #0]
      encval = 0;
 80027bc:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <read_encoder4+0xec>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000010 	.word	0x20000010
 80027d0:	2000001f 	.word	0x2000001f
 80027d4:	40010800 	.word	0x40010800
 80027d8:	40011000 	.word	0x40011000
 80027dc:	0800e8bc 	.word	0x0800e8bc
 80027e0:	20000765 	.word	0x20000765
 80027e4:	200006c8 	.word	0x200006c8

080027e8 <scroll>:

void scroll() { // scroll left inner knob
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 80027ee:	4b32      	ldr	r3, [pc, #200]	@ (80028b8 <scroll+0xd0>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b30      	ldr	r3, [pc, #192]	@ (80028b8 <scroll+0xd0>)
 80027f8:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 80027fa:	2102      	movs	r1, #2
 80027fc:	482f      	ldr	r0, [pc, #188]	@ (80028bc <scroll+0xd4>)
 80027fe:	f005 f801 	bl	8007804 <HAL_GPIO_ReadPin>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <scroll+0x2e>
 8002808:	4b2b      	ldr	r3, [pc, #172]	@ (80028b8 <scroll+0xd0>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b29      	ldr	r3, [pc, #164]	@ (80028b8 <scroll+0xd0>)
 8002814:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 8002816:	2104      	movs	r1, #4
 8002818:	4828      	ldr	r0, [pc, #160]	@ (80028bc <scroll+0xd4>)
 800281a:	f004 fff3 	bl	8007804 <HAL_GPIO_ReadPin>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <scroll+0x4a>
 8002824:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <scroll+0xd0>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4b22      	ldr	r3, [pc, #136]	@ (80028b8 <scroll+0xd0>)
 8002830:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 8002832:	4b21      	ldr	r3, [pc, #132]	@ (80028b8 <scroll+0xd0>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	4a21      	ldr	r2, [pc, #132]	@ (80028c0 <scroll+0xd8>)
 800283c:	56d3      	ldrsb	r3, [r2, r3]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <scroll+0xdc>)
 8002842:	f993 3000 	ldrsb.w	r3, [r3]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4413      	add	r3, r2
 800284a:	b2db      	uxtb	r3, r3
 800284c:	b25a      	sxtb	r2, r3
 800284e:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <scroll+0xdc>)
 8002850:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002852:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <scroll+0xdc>)
 8002854:	f993 3000 	ldrsb.w	r3, [r3]
 8002858:	2b01      	cmp	r3, #1
 800285a:	dd12      	ble.n	8002882 <scroll+0x9a>
    int changevalue = 1;
 800285c:	2301      	movs	r3, #1
 800285e:	603b      	str	r3, [r7, #0]
    if (dispCount < count-1) {
 8002860:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <scroll+0xe0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <scroll+0xe4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	dd05      	ble.n	800287a <scroll+0x92>
      dispCount = dispCount + changevalue;              // Update counter
 800286e:	4b17      	ldr	r3, [pc, #92]	@ (80028cc <scroll+0xe4>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	4a15      	ldr	r2, [pc, #84]	@ (80028cc <scroll+0xe4>)
 8002878:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 800287a:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <scroll+0xdc>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
    if (dispCount > 0) {
      dispCount = dispCount + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002880:	e015      	b.n	80028ae <scroll+0xc6>
  else if( encval < -1 ) {        // Four steps backward
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <scroll+0xdc>)
 8002884:	f993 3000 	ldrsb.w	r3, [r3]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800288c:	da0f      	bge.n	80028ae <scroll+0xc6>
    int changevalue = -1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002892:	607b      	str	r3, [r7, #4]
    if (dispCount > 0) {
 8002894:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <scroll+0xe4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	dd05      	ble.n	80028a8 <scroll+0xc0>
      dispCount = dispCount + changevalue;              // Update counter
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <scroll+0xe4>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a09      	ldr	r2, [pc, #36]	@ (80028cc <scroll+0xe4>)
 80028a6:	6013      	str	r3, [r2, #0]
    encval = 0;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <scroll+0xdc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000020 	.word	0x20000020
 80028bc:	40011000 	.word	0x40011000
 80028c0:	0800e8cc 	.word	0x0800e8cc
 80028c4:	20000766 	.word	0x20000766
 80028c8:	20000714 	.word	0x20000714
 80028cc:	20000710 	.word	0x20000710

080028d0 <scroll2>:
void scroll2() { // scroll left inner knob
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 80028d6:	4b31      	ldr	r3, [pc, #196]	@ (800299c <scroll2+0xcc>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b2f      	ldr	r3, [pc, #188]	@ (800299c <scroll2+0xcc>)
 80028e0:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 80028e2:	2102      	movs	r1, #2
 80028e4:	482e      	ldr	r0, [pc, #184]	@ (80029a0 <scroll2+0xd0>)
 80028e6:	f004 ff8d 	bl	8007804 <HAL_GPIO_ReadPin>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <scroll2+0x2e>
 80028f0:	4b2a      	ldr	r3, [pc, #168]	@ (800299c <scroll2+0xcc>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b28      	ldr	r3, [pc, #160]	@ (800299c <scroll2+0xcc>)
 80028fc:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 80028fe:	2104      	movs	r1, #4
 8002900:	4827      	ldr	r0, [pc, #156]	@ (80029a0 <scroll2+0xd0>)
 8002902:	f004 ff7f 	bl	8007804 <HAL_GPIO_ReadPin>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d006      	beq.n	800291a <scroll2+0x4a>
 800290c:	4b23      	ldr	r3, [pc, #140]	@ (800299c <scroll2+0xcc>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b21      	ldr	r3, [pc, #132]	@ (800299c <scroll2+0xcc>)
 8002918:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 800291a:	4b20      	ldr	r3, [pc, #128]	@ (800299c <scroll2+0xcc>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a20      	ldr	r2, [pc, #128]	@ (80029a4 <scroll2+0xd4>)
 8002924:	56d3      	ldrsb	r3, [r2, r3]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	4b1f      	ldr	r3, [pc, #124]	@ (80029a8 <scroll2+0xd8>)
 800292a:	f993 3000 	ldrsb.w	r3, [r3]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4413      	add	r3, r2
 8002932:	b2db      	uxtb	r3, r3
 8002934:	b25a      	sxtb	r2, r3
 8002936:	4b1c      	ldr	r3, [pc, #112]	@ (80029a8 <scroll2+0xd8>)
 8002938:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 800293a:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <scroll2+0xd8>)
 800293c:	f993 3000 	ldrsb.w	r3, [r3]
 8002940:	2b01      	cmp	r3, #1
 8002942:	dd11      	ble.n	8002968 <scroll2+0x98>
    int changevalue = 1;
 8002944:	2301      	movs	r3, #1
 8002946:	603b      	str	r3, [r7, #0]
    if (dispCount < count) {
 8002948:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <scroll2+0xdc>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b18      	ldr	r3, [pc, #96]	@ (80029b0 <scroll2+0xe0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	da05      	bge.n	8002960 <scroll2+0x90>
      dispCount = dispCount + changevalue;              // Update counter
 8002954:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <scroll2+0xdc>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4413      	add	r3, r2
 800295c:	4a13      	ldr	r2, [pc, #76]	@ (80029ac <scroll2+0xdc>)
 800295e:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <scroll2+0xd8>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
    if (dispCount > 0) {
      dispCount = dispCount + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002966:	e015      	b.n	8002994 <scroll2+0xc4>
  else if( encval < -1 ) {        // Four steps backward
 8002968:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <scroll2+0xd8>)
 800296a:	f993 3000 	ldrsb.w	r3, [r3]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002972:	da0f      	bge.n	8002994 <scroll2+0xc4>
    int changevalue = -1;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002978:	607b      	str	r3, [r7, #4]
    if (dispCount > 0) {
 800297a:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <scroll2+0xdc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	dd05      	ble.n	800298e <scroll2+0xbe>
      dispCount = dispCount + changevalue;              // Update counter
 8002982:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <scroll2+0xdc>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	4a08      	ldr	r2, [pc, #32]	@ (80029ac <scroll2+0xdc>)
 800298c:	6013      	str	r3, [r2, #0]
    encval = 0;
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <scroll2+0xd8>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000021 	.word	0x20000021
 80029a0:	40011000 	.word	0x40011000
 80029a4:	0800e8dc 	.word	0x0800e8dc
 80029a8:	20000767 	.word	0x20000767
 80029ac:	20000710 	.word	0x20000710
 80029b0:	20000714 	.word	0x20000714

080029b4 <micg>:
void micg() { // micgain left inner knob
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1};// Lookup table

  old_CD <<=2;  // Remember previous state
 80029ba:	4b30      	ldr	r3, [pc, #192]	@ (8002a7c <micg+0xc8>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a7c <micg+0xc8>)
 80029c4:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 80029c6:	2102      	movs	r1, #2
 80029c8:	482d      	ldr	r0, [pc, #180]	@ (8002a80 <micg+0xcc>)
 80029ca:	f004 ff1b 	bl	8007804 <HAL_GPIO_ReadPin>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d006      	beq.n	80029e2 <micg+0x2e>
 80029d4:	4b29      	ldr	r3, [pc, #164]	@ (8002a7c <micg+0xc8>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <micg+0xc8>)
 80029e0:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 80029e2:	2104      	movs	r1, #4
 80029e4:	4826      	ldr	r0, [pc, #152]	@ (8002a80 <micg+0xcc>)
 80029e6:	f004 ff0d 	bl	8007804 <HAL_GPIO_ReadPin>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <micg+0x4a>
 80029f0:	4b22      	ldr	r3, [pc, #136]	@ (8002a7c <micg+0xc8>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <micg+0xc8>)
 80029fc:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 80029fe:	4b1f      	ldr	r3, [pc, #124]	@ (8002a7c <micg+0xc8>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	4a1f      	ldr	r2, [pc, #124]	@ (8002a84 <micg+0xd0>)
 8002a08:	56d3      	ldrsb	r3, [r2, r3]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a88 <micg+0xd4>)
 8002a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	b25a      	sxtb	r2, r3
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <micg+0xd4>)
 8002a1c:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <micg+0xd4>)
 8002a20:	f993 3000 	ldrsb.w	r3, [r3]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	dd0f      	ble.n	8002a48 <micg+0x94>
    int changevalue = 1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	603b      	str	r3, [r7, #0]
    if (micgain < 30) {
 8002a2c:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <micg+0xd8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b1d      	cmp	r3, #29
 8002a32:	dc05      	bgt.n	8002a40 <micg+0x8c>
      micgain = micgain + changevalue;              // Update counter
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <micg+0xd8>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a13      	ldr	r2, [pc, #76]	@ (8002a8c <micg+0xd8>)
 8002a3e:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002a40:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <micg+0xd4>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
    if (micgain > 1) {
      micgain = micgain + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002a46:	e015      	b.n	8002a74 <micg+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 8002a48:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <micg+0xd4>)
 8002a4a:	f993 3000 	ldrsb.w	r3, [r3]
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a52:	da0f      	bge.n	8002a74 <micg+0xc0>
    int changevalue = -1;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a58:	607b      	str	r3, [r7, #4]
    if (micgain > 1) {
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <micg+0xd8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	dd05      	ble.n	8002a6e <micg+0xba>
      micgain = micgain + changevalue;              // Update counter
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <micg+0xd8>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	4a08      	ldr	r2, [pc, #32]	@ (8002a8c <micg+0xd8>)
 8002a6c:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <micg+0xd4>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000022 	.word	0x20000022
 8002a80:	40011000 	.word	0x40011000
 8002a84:	0800e8ec 	.word	0x0800e8ec
 8002a88:	20000768 	.word	0x20000768
 8002a8c:	20000014 	.word	0x20000014

08002a90 <cursormove>:
void cursormove() { // micgain left inner knob
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 8002a96:	4b30      	ldr	r3, [pc, #192]	@ (8002b58 <cursormove+0xc8>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b58 <cursormove+0xc8>)
 8002aa0:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	482d      	ldr	r0, [pc, #180]	@ (8002b5c <cursormove+0xcc>)
 8002aa6:	f004 fead 	bl	8007804 <HAL_GPIO_ReadPin>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <cursormove+0x2e>
 8002ab0:	4b29      	ldr	r3, [pc, #164]	@ (8002b58 <cursormove+0xc8>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <cursormove+0xc8>)
 8002abc:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 8002abe:	2104      	movs	r1, #4
 8002ac0:	4826      	ldr	r0, [pc, #152]	@ (8002b5c <cursormove+0xcc>)
 8002ac2:	f004 fe9f 	bl	8007804 <HAL_GPIO_ReadPin>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <cursormove+0x4a>
 8002acc:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <cursormove+0xc8>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <cursormove+0xc8>)
 8002ad8:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 8002ada:	4b1f      	ldr	r3, [pc, #124]	@ (8002b58 <cursormove+0xc8>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b60 <cursormove+0xd0>)
 8002ae4:	56d3      	ldrsb	r3, [r2, r3]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <cursormove+0xd4>)
 8002aea:	f993 3000 	ldrsb.w	r3, [r3]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	b25a      	sxtb	r2, r3
 8002af6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b64 <cursormove+0xd4>)
 8002af8:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002afa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <cursormove+0xd4>)
 8002afc:	f993 3000 	ldrsb.w	r3, [r3]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	dd0f      	ble.n	8002b24 <cursormove+0x94>
    int changevalue = 1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	603b      	str	r3, [r7, #0]
    if (cursor < 8) {
 8002b08:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <cursormove+0xd8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b07      	cmp	r3, #7
 8002b0e:	dc05      	bgt.n	8002b1c <cursormove+0x8c>
      cursor = cursor + changevalue;              // Update counter
 8002b10:	4b15      	ldr	r3, [pc, #84]	@ (8002b68 <cursormove+0xd8>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <cursormove+0xd8>)
 8002b1a:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <cursormove+0xd4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
    if (cursor > 0) {
      cursor = cursor + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002b22:	e015      	b.n	8002b50 <cursormove+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 8002b24:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <cursormove+0xd4>)
 8002b26:	f993 3000 	ldrsb.w	r3, [r3]
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b2e:	da0f      	bge.n	8002b50 <cursormove+0xc0>
    int changevalue = -1;
 8002b30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b34:	607b      	str	r3, [r7, #4]
    if (cursor > 0) {
 8002b36:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <cursormove+0xd8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	dd05      	ble.n	8002b4a <cursormove+0xba>
      cursor = cursor + changevalue;              // Update counter
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <cursormove+0xd8>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	4a08      	ldr	r2, [pc, #32]	@ (8002b68 <cursormove+0xd8>)
 8002b48:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <cursormove+0xd4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000023 	.word	0x20000023
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	0800e8fc 	.word	0x0800e8fc
 8002b64:	20000769 	.word	0x20000769
 8002b68:	2000071c 	.word	0x2000071c

08002b6c <delmove>:
void delmove() { // micgain left inner knob
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 8002b72:	4b30      	ldr	r3, [pc, #192]	@ (8002c34 <delmove+0xc8>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c34 <delmove+0xc8>)
 8002b7c:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 8002b7e:	2102      	movs	r1, #2
 8002b80:	482d      	ldr	r0, [pc, #180]	@ (8002c38 <delmove+0xcc>)
 8002b82:	f004 fe3f 	bl	8007804 <HAL_GPIO_ReadPin>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <delmove+0x2e>
 8002b8c:	4b29      	ldr	r3, [pc, #164]	@ (8002c34 <delmove+0xc8>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b27      	ldr	r3, [pc, #156]	@ (8002c34 <delmove+0xc8>)
 8002b98:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 8002b9a:	2104      	movs	r1, #4
 8002b9c:	4826      	ldr	r0, [pc, #152]	@ (8002c38 <delmove+0xcc>)
 8002b9e:	f004 fe31 	bl	8007804 <HAL_GPIO_ReadPin>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <delmove+0x4a>
 8002ba8:	4b22      	ldr	r3, [pc, #136]	@ (8002c34 <delmove+0xc8>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b20      	ldr	r3, [pc, #128]	@ (8002c34 <delmove+0xc8>)
 8002bb4:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 8002bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c34 <delmove+0xc8>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8002c3c <delmove+0xd0>)
 8002bc0:	56d3      	ldrsb	r3, [r2, r3]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c40 <delmove+0xd4>)
 8002bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	b25a      	sxtb	r2, r3
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <delmove+0xd4>)
 8002bd4:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <delmove+0xd4>)
 8002bd8:	f993 3000 	ldrsb.w	r3, [r3]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	dd0f      	ble.n	8002c00 <delmove+0x94>
    int changevalue = 1;
 8002be0:	2301      	movs	r3, #1
 8002be2:	603b      	str	r3, [r7, #0]
    if (delc < 1) {
 8002be4:	4b17      	ldr	r3, [pc, #92]	@ (8002c44 <delmove+0xd8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	dc05      	bgt.n	8002bf8 <delmove+0x8c>
      delc = delc + changevalue;              // Update counter
 8002bec:	4b15      	ldr	r3, [pc, #84]	@ (8002c44 <delmove+0xd8>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a13      	ldr	r2, [pc, #76]	@ (8002c44 <delmove+0xd8>)
 8002bf6:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <delmove+0xd4>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
    if (delc > 0) {
      delc = delc + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002bfe:	e015      	b.n	8002c2c <delmove+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 8002c00:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <delmove+0xd4>)
 8002c02:	f993 3000 	ldrsb.w	r3, [r3]
 8002c06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c0a:	da0f      	bge.n	8002c2c <delmove+0xc0>
    int changevalue = -1;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c10:	607b      	str	r3, [r7, #4]
    if (delc > 0) {
 8002c12:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <delmove+0xd8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	dd05      	ble.n	8002c26 <delmove+0xba>
      delc = delc + changevalue;              // Update counter
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <delmove+0xd8>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <delmove+0xd8>)
 8002c24:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002c26:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <delmove+0xd4>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000024 	.word	0x20000024
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	0800e90c 	.word	0x0800e90c
 8002c40:	2000076a 	.word	0x2000076a
 8002c44:	20000724 	.word	0x20000724

08002c48 <sidet>:
void sidet() { // sidetone left outer knob
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_IJ = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_IJ <<=2;  // Remember previous state
 8002c4e:	4b30      	ldr	r3, [pc, #192]	@ (8002d10 <sidet+0xc8>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b2e      	ldr	r3, [pc, #184]	@ (8002d10 <sidet+0xc8>)
 8002c58:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A2_GPIO_Port, LEFT_A2_Pin)) old_IJ |= 0x02; // Add current state of pin I
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	482d      	ldr	r0, [pc, #180]	@ (8002d14 <sidet+0xcc>)
 8002c5e:	f004 fdd1 	bl	8007804 <HAL_GPIO_ReadPin>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <sidet+0x2e>
 8002c68:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <sidet+0xc8>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4b27      	ldr	r3, [pc, #156]	@ (8002d10 <sidet+0xc8>)
 8002c74:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B2_GPIO_Port, LEFT_B2_Pin)) old_IJ |= 0x01; // Add current state of pin J
 8002c76:	2108      	movs	r1, #8
 8002c78:	4827      	ldr	r0, [pc, #156]	@ (8002d18 <sidet+0xd0>)
 8002c7a:	f004 fdc3 	bl	8007804 <HAL_GPIO_ReadPin>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d006      	beq.n	8002c92 <sidet+0x4a>
 8002c84:	4b22      	ldr	r3, [pc, #136]	@ (8002d10 <sidet+0xc8>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4b20      	ldr	r3, [pc, #128]	@ (8002d10 <sidet+0xc8>)
 8002c90:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_IJ & 0x0f )];
 8002c92:	4b1f      	ldr	r3, [pc, #124]	@ (8002d10 <sidet+0xc8>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	4a20      	ldr	r2, [pc, #128]	@ (8002d1c <sidet+0xd4>)
 8002c9c:	56d3      	ldrsb	r3, [r2, r3]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d20 <sidet+0xd8>)
 8002ca2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	b25a      	sxtb	r2, r3
 8002cae:	4b1c      	ldr	r3, [pc, #112]	@ (8002d20 <sidet+0xd8>)
 8002cb0:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <sidet+0xd8>)
 8002cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	dd0f      	ble.n	8002cdc <sidet+0x94>
    int changevalue = 1;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	603b      	str	r3, [r7, #0]
    if (sidetone < 20) {
 8002cc0:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <sidet+0xdc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b13      	cmp	r3, #19
 8002cc6:	dc05      	bgt.n	8002cd4 <sidet+0x8c>
      sidetone = sidetone + changevalue;              // Update counter
 8002cc8:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <sidet+0xdc>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <sidet+0xdc>)
 8002cd2:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <sidet+0xd8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
    if (sidetone > 1) {
      sidetone = sidetone + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002cda:	e015      	b.n	8002d08 <sidet+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 8002cdc:	4b10      	ldr	r3, [pc, #64]	@ (8002d20 <sidet+0xd8>)
 8002cde:	f993 3000 	ldrsb.w	r3, [r3]
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ce6:	da0f      	bge.n	8002d08 <sidet+0xc0>
    int changevalue = -1;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cec:	607b      	str	r3, [r7, #4]
    if (sidetone > 1) {
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <sidet+0xdc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	dd05      	ble.n	8002d02 <sidet+0xba>
      sidetone = sidetone + changevalue;              // Update counter
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <sidet+0xdc>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4a09      	ldr	r2, [pc, #36]	@ (8002d24 <sidet+0xdc>)
 8002d00:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002d02:	4b07      	ldr	r3, [pc, #28]	@ (8002d20 <sidet+0xd8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000025 	.word	0x20000025
 8002d14:	40010800 	.word	0x40010800
 8002d18:	40011000 	.word	0x40011000
 8002d1c:	0800e91c 	.word	0x0800e91c
 8002d20:	2000076b 	.word	0x2000076b
 8002d24:	20000018 	.word	0x20000018

08002d28 <charmove>:
void charmove() { // sidetone left outer knob
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_IJ = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_IJ <<=2;  // Remember previous state
 8002d2e:	4b30      	ldr	r3, [pc, #192]	@ (8002df0 <charmove+0xc8>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b2e      	ldr	r3, [pc, #184]	@ (8002df0 <charmove+0xc8>)
 8002d38:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A2_GPIO_Port, LEFT_A2_Pin)) old_IJ |= 0x02; // Add current state of pin I
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	482d      	ldr	r0, [pc, #180]	@ (8002df4 <charmove+0xcc>)
 8002d3e:	f004 fd61 	bl	8007804 <HAL_GPIO_ReadPin>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <charmove+0x2e>
 8002d48:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <charmove+0xc8>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b27      	ldr	r3, [pc, #156]	@ (8002df0 <charmove+0xc8>)
 8002d54:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B2_GPIO_Port, LEFT_B2_Pin)) old_IJ |= 0x01; // Add current state of pin J
 8002d56:	2108      	movs	r1, #8
 8002d58:	4827      	ldr	r0, [pc, #156]	@ (8002df8 <charmove+0xd0>)
 8002d5a:	f004 fd53 	bl	8007804 <HAL_GPIO_ReadPin>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <charmove+0x4a>
 8002d64:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <charmove+0xc8>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <charmove+0xc8>)
 8002d70:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_IJ & 0x0f )];
 8002d72:	4b1f      	ldr	r3, [pc, #124]	@ (8002df0 <charmove+0xc8>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	4a20      	ldr	r2, [pc, #128]	@ (8002dfc <charmove+0xd4>)
 8002d7c:	56d3      	ldrsb	r3, [r2, r3]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	4b1f      	ldr	r3, [pc, #124]	@ (8002e00 <charmove+0xd8>)
 8002d82:	f993 3000 	ldrsb.w	r3, [r3]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	b25a      	sxtb	r2, r3
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e00 <charmove+0xd8>)
 8002d90:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002d92:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <charmove+0xd8>)
 8002d94:	f993 3000 	ldrsb.w	r3, [r3]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	dd0f      	ble.n	8002dbc <charmove+0x94>
    int changevalue = 1;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	603b      	str	r3, [r7, #0]
    if (charcount < 39) {
 8002da0:	4b18      	ldr	r3, [pc, #96]	@ (8002e04 <charmove+0xdc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b26      	cmp	r3, #38	@ 0x26
 8002da6:	dc05      	bgt.n	8002db4 <charmove+0x8c>
      charcount = charcount + changevalue;              // Update counter
 8002da8:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <charmove+0xdc>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <charmove+0xdc>)
 8002db2:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002db4:	4b12      	ldr	r3, [pc, #72]	@ (8002e00 <charmove+0xd8>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
    if (charcount > 0) {
      charcount = charcount + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002dba:	e015      	b.n	8002de8 <charmove+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 8002dbc:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <charmove+0xd8>)
 8002dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dc6:	da0f      	bge.n	8002de8 <charmove+0xc0>
    int changevalue = -1;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dcc:	607b      	str	r3, [r7, #4]
    if (charcount > 0) {
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <charmove+0xdc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	dd05      	ble.n	8002de2 <charmove+0xba>
      charcount = charcount + changevalue;              // Update counter
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <charmove+0xdc>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	4a09      	ldr	r2, [pc, #36]	@ (8002e04 <charmove+0xdc>)
 8002de0:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <charmove+0xd8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000026 	.word	0x20000026
 8002df4:	40010800 	.word	0x40010800
 8002df8:	40011000 	.word	0x40011000
 8002dfc:	0800e92c 	.word	0x0800e92c
 8002e00:	2000076c 	.word	0x2000076c
 8002e04:	20000720 	.word	0x20000720

08002e08 <leftinnerknob>:

void leftinnerknob() {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  if (micside) {
 8002e0c:	4b13      	ldr	r3, [pc, #76]	@ (8002e5c <leftinnerknob+0x54>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <leftinnerknob+0x12>
    micg();
 8002e14:	f7ff fdce 	bl	80029b4 <micg>
    scroll2();
  }
  else {
    read_encoder3();
  }
}
 8002e18:	e01d      	b.n	8002e56 <leftinnerknob+0x4e>
  else if (bscroll) {
 8002e1a:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <leftinnerknob+0x58>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <leftinnerknob+0x20>
    scroll();
 8002e22:	f7ff fce1 	bl	80027e8 <scroll>
}
 8002e26:	e016      	b.n	8002e56 <leftinnerknob+0x4e>
  else if (del) {
 8002e28:	4b0e      	ldr	r3, [pc, #56]	@ (8002e64 <leftinnerknob+0x5c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <leftinnerknob+0x2e>
    delmove();
 8002e30:	f7ff fe9c 	bl	8002b6c <delmove>
}
 8002e34:	e00f      	b.n	8002e56 <leftinnerknob+0x4e>
  else if (add) {
 8002e36:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <leftinnerknob+0x60>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <leftinnerknob+0x3c>
    cursormove(); //flipped
 8002e3e:	f7ff fe27 	bl	8002a90 <cursormove>
}
 8002e42:	e008      	b.n	8002e56 <leftinnerknob+0x4e>
  else if (edit) {
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <leftinnerknob+0x64>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <leftinnerknob+0x4a>
    scroll2();
 8002e4c:	f7ff fd40 	bl	80028d0 <scroll2>
}
 8002e50:	e001      	b.n	8002e56 <leftinnerknob+0x4e>
    read_encoder3();
 8002e52:	f7ff fbd7 	bl	8002604 <read_encoder3>
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000719 	.word	0x20000719
 8002e60:	20000718 	.word	0x20000718
 8002e64:	2000071b 	.word	0x2000071b
 8002e68:	2000071a 	.word	0x2000071a
 8002e6c:	200006cc 	.word	0x200006cc

08002e70 <leftouterknob>:

void leftouterknob() {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  if (micside) {
 8002e74:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <leftouterknob+0x28>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <leftouterknob+0x12>
    sidet();
 8002e7c:	f7ff fee4 	bl	8002c48 <sidet>
    charmove(); //flipped
  }
  else {
    read_encoder4();
  }
}
 8002e80:	e008      	b.n	8002e94 <leftouterknob+0x24>
  else if (add) {
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <leftouterknob+0x2c>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <leftouterknob+0x20>
    charmove(); //flipped
 8002e8a:	f7ff ff4d 	bl	8002d28 <charmove>
}
 8002e8e:	e001      	b.n	8002e94 <leftouterknob+0x24>
    read_encoder4();
 8002e90:	f7ff fc30 	bl	80026f4 <read_encoder4>
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000719 	.word	0x20000719
 8002e9c:	2000071a 	.word	0x2000071a

08002ea0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LEFT_A2_Pin) { // LEFT 2 could be 8 idk
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_GPIO_EXTI_Callback+0x16>
		leftouterknob();
 8002eb0:	f7ff ffde 	bl	8002e70 <leftouterknob>
		read_encoder();
	}
	else if (GPIO_Pin == RIGHT_B2_Pin) { // RIGHT 2
		read_encoder();
	}
}
 8002eb4:	e02c      	b.n	8002f10 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == LEFT_B2_Pin) { // LEFT 2
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d102      	bne.n	8002ec2 <HAL_GPIO_EXTI_Callback+0x22>
		leftouterknob();
 8002ebc:	f7ff ffd8 	bl	8002e70 <leftouterknob>
}
 8002ec0:	e026      	b.n	8002f10 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == LEFT_A1_Pin) { // LEFT 1
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d102      	bne.n	8002ece <HAL_GPIO_EXTI_Callback+0x2e>
		leftinnerknob();
 8002ec8:	f7ff ff9e 	bl	8002e08 <leftinnerknob>
}
 8002ecc:	e020      	b.n	8002f10 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == LEFT_B1_Pin) { // LEFT 1
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d102      	bne.n	8002eda <HAL_GPIO_EXTI_Callback+0x3a>
		leftinnerknob();
 8002ed4:	f7ff ff98 	bl	8002e08 <leftinnerknob>
}
 8002ed8:	e01a      	b.n	8002f10 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_A1_Pin) { // RIGHT 1
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee0:	d102      	bne.n	8002ee8 <HAL_GPIO_EXTI_Callback+0x48>
		read_encoder2();
 8002ee2:	f7ff fb13 	bl	800250c <read_encoder2>
}
 8002ee6:	e013      	b.n	8002f10 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_B1_Pin) { // RIGHT 1
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eee:	d102      	bne.n	8002ef6 <HAL_GPIO_EXTI_Callback+0x56>
		read_encoder2();
 8002ef0:	f7ff fb0c 	bl	800250c <read_encoder2>
}
 8002ef4:	e00c      	b.n	8002f10 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_A2_Pin) { // RIGHT 2
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002efc:	d102      	bne.n	8002f04 <HAL_GPIO_EXTI_Callback+0x64>
		read_encoder();
 8002efe:	f7ff fa8d 	bl	800241c <read_encoder>
}
 8002f02:	e005      	b.n	8002f10 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_B2_Pin) { // RIGHT 2
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f0a:	d101      	bne.n	8002f10 <HAL_GPIO_EXTI_Callback+0x70>
		read_encoder();
 8002f0c:	f7ff fa86 	bl	800241c <read_encoder>
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <checksum>:

void checksum(const char* str, char* result) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
    unsigned int sum = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
    const char* ptr = str;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60bb      	str	r3, [r7, #8]

    if (*ptr != '\0') {
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00c      	beq.n	8002f4c <checksum+0x34>
        ptr += 6;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3306      	adds	r3, #6
 8002f36:	60bb      	str	r3, [r7, #8]
    }

    while (*ptr != '\0') {
 8002f38:	e008      	b.n	8002f4c <checksum+0x34>
        sum += *ptr;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
        ptr++;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60bb      	str	r3, [r7, #8]
    while (*ptr != '\0') {
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f2      	bne.n	8002f3a <checksum+0x22>
    }

    sum &= 0xFF;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	60fb      	str	r3, [r7, #12]

    result[0] = ((sum >> 4) & 0xF) + 0x30;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	3330      	adds	r3, #48	@ 0x30
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	701a      	strb	r2, [r3, #0]
    result[1] = (sum & 0xF) + 0x30;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	3230      	adds	r2, #48	@ 0x30
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

    result[2] = '\0';
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	3302      	adds	r3, #2
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <concatTwoChars>:

void concatTwoChars(char* base, const char* woo) {
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
    while (*base) { // Move to the end of the base string
 8002f9e:	e002      	b.n	8002fa6 <concatTwoChars+0x12>
        base++;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	607b      	str	r3, [r7, #4]
    while (*base) { // Move to the end of the base string
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f8      	bne.n	8002fa0 <concatTwoChars+0xc>
    }
    while (*woo) { // Copy the characters from toAdd
 8002fae:	e009      	b.n	8002fc4 <concatTwoChars+0x30>
        *base = *woo;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	701a      	strb	r2, [r3, #0]
        base++;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	607b      	str	r3, [r7, #4]
        woo++;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	603b      	str	r3, [r7, #0]
    while (*woo) { // Copy the characters from toAdd
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f1      	bne.n	8002fb0 <concatTwoChars+0x1c>
    }
    *base = '\0'; // Null terminate the resulting string
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <LCDPrint>:

void LCDPrint(char* str) { //TODO Should be done needs testing, issues should not be here though
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b0a0      	sub	sp, #128	@ 0x80
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	if (str[0] == 'x') {
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b78      	cmp	r3, #120	@ 0x78
 8002fea:	d109      	bne.n	8003000 <LCDPrint+0x24>
	  glcd_on();
 8002fec:	f7fd ff90 	bl	8000f10 <glcd_on>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	48a7      	ldr	r0, [pc, #668]	@ (8003294 <LCDPrint+0x2b8>)
 8002ff6:	f004 fc1c 	bl	8007832 <HAL_GPIO_WritePin>
	  glcd_clear_all();
 8002ffa:	f7fe fbe3 	bl	80017c4 <glcd_clear_all>
	  }
	  else {
		glcd_puts("N", 118, 3);
	  }
	}
}
 8002ffe:	e3aa      	b.n	8003756 <LCDPrint+0x77a>
	else if (str[0] == 'o') {
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b6f      	cmp	r3, #111	@ 0x6f
 8003006:	d107      	bne.n	8003018 <LCDPrint+0x3c>
      glcd_off();
 8003008:	f7fd ff95 	bl	8000f36 <glcd_off>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800300c:	2200      	movs	r2, #0
 800300e:	2102      	movs	r1, #2
 8003010:	48a0      	ldr	r0, [pc, #640]	@ (8003294 <LCDPrint+0x2b8>)
 8003012:	f004 fc0e 	bl	8007832 <HAL_GPIO_WritePin>
}
 8003016:	e39e      	b.n	8003756 <LCDPrint+0x77a>
	else if (str[0] == 'f') { //frequency
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b66      	cmp	r3, #102	@ 0x66
 800301e:	f040 809a 	bne.w	8003156 <LCDPrint+0x17a>
	  sprintf(str0, "%0.3f", freq);
 8003022:	4b9d      	ldr	r3, [pc, #628]	@ (8003298 <LCDPrint+0x2bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fa6e 	bl	8000508 <__aeabi_f2d>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8003034:	4999      	ldr	r1, [pc, #612]	@ (800329c <LCDPrint+0x2c0>)
 8003036:	f008 fd19 	bl	800ba6c <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 800303a:	4b99      	ldr	r3, [pc, #612]	@ (80032a0 <LCDPrint+0x2c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fa62 	bl	8000508 <__aeabi_f2d>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800304c:	4993      	ldr	r1, [pc, #588]	@ (800329c <LCDPrint+0x2c0>)
 800304e:	f008 fd0d 	bl	800ba6c <siprintf>
	  glcd_puts("A", 2, 2);
 8003052:	2202      	movs	r2, #2
 8003054:	2102      	movs	r1, #2
 8003056:	4893      	ldr	r0, [pc, #588]	@ (80032a4 <LCDPrint+0x2c8>)
 8003058:	f7fe f92c 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 800305c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003060:	2202      	movs	r2, #2
 8003062:	210b      	movs	r1, #11
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe f925 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 2);
 800306a:	2202      	movs	r2, #2
 800306c:	2122      	movs	r1, #34	@ 0x22
 800306e:	488e      	ldr	r0, [pc, #568]	@ (80032a8 <LCDPrint+0x2cc>)
 8003070:	f7fe f920 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 8003074:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003078:	3304      	adds	r3, #4
 800307a:	2202      	movs	r2, #2
 800307c:	2126      	movs	r1, #38	@ 0x26
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe f918 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 8003084:	2202      	movs	r2, #2
 8003086:	213e      	movs	r1, #62	@ 0x3e
 8003088:	4888      	ldr	r0, [pc, #544]	@ (80032ac <LCDPrint+0x2d0>)
 800308a:	f7fe f913 	bl	80012b4 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 800308e:	2202      	movs	r2, #2
 8003090:	2142      	movs	r1, #66	@ 0x42
 8003092:	4887      	ldr	r0, [pc, #540]	@ (80032b0 <LCDPrint+0x2d4>)
 8003094:	f7fe f90e 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 8003098:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800309c:	2202      	movs	r2, #2
 800309e:	214b      	movs	r1, #75	@ 0x4b
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe f907 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 2);
 80030a6:	2202      	movs	r2, #2
 80030a8:	2162      	movs	r1, #98	@ 0x62
 80030aa:	487f      	ldr	r0, [pc, #508]	@ (80032a8 <LCDPrint+0x2cc>)
 80030ac:	f7fe f902 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 80030b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80030b4:	3304      	adds	r3, #4
 80030b6:	2202      	movs	r2, #2
 80030b8:	2166      	movs	r1, #102	@ 0x66
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe f8fa 	bl	80012b4 <glcd_puts>
	  glcd_clearline(3);
 80030c0:	2003      	movs	r0, #3
 80030c2:	f7fe fb33 	bl	800172c <glcd_clearline>
	  sprintf(str2, "%d", vol);
 80030c6:	4b7b      	ldr	r3, [pc, #492]	@ (80032b4 <LCDPrint+0x2d8>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80030ce:	497a      	ldr	r1, [pc, #488]	@ (80032b8 <LCDPrint+0x2dc>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f008 fccb 	bl	800ba6c <siprintf>
	  sprintf(str3, "%d", squelch);
 80030d6:	4b79      	ldr	r3, [pc, #484]	@ (80032bc <LCDPrint+0x2e0>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80030de:	4976      	ldr	r1, [pc, #472]	@ (80032b8 <LCDPrint+0x2dc>)
 80030e0:	4618      	mov	r0, r3
 80030e2:	f008 fcc3 	bl	800ba6c <siprintf>
	  glcd_puts("Vol ", 2, 5);
 80030e6:	2205      	movs	r2, #5
 80030e8:	2102      	movs	r1, #2
 80030ea:	4875      	ldr	r0, [pc, #468]	@ (80032c0 <LCDPrint+0x2e4>)
 80030ec:	f7fe f8e2 	bl	80012b4 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 80030f0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80030f4:	2205      	movs	r2, #5
 80030f6:	211e      	movs	r1, #30
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe f8db 	bl	80012b4 <glcd_puts>
	  if (vol < 10) {
 80030fe:	4b6d      	ldr	r3, [pc, #436]	@ (80032b4 <LCDPrint+0x2d8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b09      	cmp	r3, #9
 8003104:	dc04      	bgt.n	8003110 <LCDPrint+0x134>
	  	 glcd_puts(" ", 38, 5);
 8003106:	2205      	movs	r2, #5
 8003108:	2126      	movs	r1, #38	@ 0x26
 800310a:	4868      	ldr	r0, [pc, #416]	@ (80032ac <LCDPrint+0x2d0>)
 800310c:	f7fe f8d2 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 8003110:	2205      	movs	r2, #5
 8003112:	2138      	movs	r1, #56	@ 0x38
 8003114:	4865      	ldr	r0, [pc, #404]	@ (80032ac <LCDPrint+0x2d0>)
 8003116:	f7fe f8cd 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 800311a:	2205      	movs	r2, #5
 800311c:	213e      	movs	r1, #62	@ 0x3e
 800311e:	4863      	ldr	r0, [pc, #396]	@ (80032ac <LCDPrint+0x2d0>)
 8003120:	f7fe f8c8 	bl	80012b4 <glcd_puts>
	  glcd_puts("Sqlch ", 66, 5);
 8003124:	2205      	movs	r2, #5
 8003126:	2142      	movs	r1, #66	@ 0x42
 8003128:	4866      	ldr	r0, [pc, #408]	@ (80032c4 <LCDPrint+0x2e8>)
 800312a:	f7fe f8c3 	bl	80012b4 <glcd_puts>
	  glcd_puts(str3, 110, 5);
 800312e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003132:	2205      	movs	r2, #5
 8003134:	216e      	movs	r1, #110	@ 0x6e
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe f8bc 	bl	80012b4 <glcd_puts>
	  if (squelch < 10) {
 800313c:	4b5f      	ldr	r3, [pc, #380]	@ (80032bc <LCDPrint+0x2e0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b09      	cmp	r3, #9
 8003142:	dc04      	bgt.n	800314e <LCDPrint+0x172>
		  glcd_puts(" ", 118, 5);
 8003144:	2205      	movs	r2, #5
 8003146:	2176      	movs	r1, #118	@ 0x76
 8003148:	4858      	ldr	r0, [pc, #352]	@ (80032ac <LCDPrint+0x2d0>)
 800314a:	f7fe f8b3 	bl	80012b4 <glcd_puts>
	  glcd_clearline(6);
 800314e:	2006      	movs	r0, #6
 8003150:	f7fe faec 	bl	800172c <glcd_clearline>
}
 8003154:	e2ff      	b.n	8003756 <LCDPrint+0x77a>
	else if (str[0] == 'v') {
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b76      	cmp	r3, #118	@ 0x76
 800315c:	f040 80b4 	bne.w	80032c8 <LCDPrint+0x2ec>
      sprintf(str0, "%0.3f", freq);
 8003160:	4b4d      	ldr	r3, [pc, #308]	@ (8003298 <LCDPrint+0x2bc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f9cf 	bl	8000508 <__aeabi_f2d>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003172:	494a      	ldr	r1, [pc, #296]	@ (800329c <LCDPrint+0x2c0>)
 8003174:	f008 fc7a 	bl	800ba6c <siprintf>
      sprintf(str1, "%0.3f", Standby);
 8003178:	4b49      	ldr	r3, [pc, #292]	@ (80032a0 <LCDPrint+0x2c4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9c3 	bl	8000508 <__aeabi_f2d>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800318a:	4944      	ldr	r1, [pc, #272]	@ (800329c <LCDPrint+0x2c0>)
 800318c:	f008 fc6e 	bl	800ba6c <siprintf>
	  glcd_puts("A", 2, 2);
 8003190:	2202      	movs	r2, #2
 8003192:	2102      	movs	r1, #2
 8003194:	4843      	ldr	r0, [pc, #268]	@ (80032a4 <LCDPrint+0x2c8>)
 8003196:	f7fe f88d 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 800319a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800319e:	2202      	movs	r2, #2
 80031a0:	210b      	movs	r1, #11
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe f886 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 2);
 80031a8:	2202      	movs	r2, #2
 80031aa:	2122      	movs	r1, #34	@ 0x22
 80031ac:	483e      	ldr	r0, [pc, #248]	@ (80032a8 <LCDPrint+0x2cc>)
 80031ae:	f7fe f881 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 80031b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80031b6:	3304      	adds	r3, #4
 80031b8:	2202      	movs	r2, #2
 80031ba:	2126      	movs	r1, #38	@ 0x26
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe f879 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 80031c2:	2202      	movs	r2, #2
 80031c4:	213e      	movs	r1, #62	@ 0x3e
 80031c6:	4839      	ldr	r0, [pc, #228]	@ (80032ac <LCDPrint+0x2d0>)
 80031c8:	f7fe f874 	bl	80012b4 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 80031cc:	2202      	movs	r2, #2
 80031ce:	2142      	movs	r1, #66	@ 0x42
 80031d0:	4837      	ldr	r0, [pc, #220]	@ (80032b0 <LCDPrint+0x2d4>)
 80031d2:	f7fe f86f 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 80031d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80031da:	2202      	movs	r2, #2
 80031dc:	214b      	movs	r1, #75	@ 0x4b
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe f868 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 2);
 80031e4:	2202      	movs	r2, #2
 80031e6:	2162      	movs	r1, #98	@ 0x62
 80031e8:	482f      	ldr	r0, [pc, #188]	@ (80032a8 <LCDPrint+0x2cc>)
 80031ea:	f7fe f863 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 80031ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80031f2:	3304      	adds	r3, #4
 80031f4:	2202      	movs	r2, #2
 80031f6:	2166      	movs	r1, #102	@ 0x66
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe f85b 	bl	80012b4 <glcd_puts>
	  glcd_clearline(3);
 80031fe:	2003      	movs	r0, #3
 8003200:	f7fe fa94 	bl	800172c <glcd_clearline>
	  sprintf(str2, "%d", vol);
 8003204:	4b2b      	ldr	r3, [pc, #172]	@ (80032b4 <LCDPrint+0x2d8>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800320c:	492a      	ldr	r1, [pc, #168]	@ (80032b8 <LCDPrint+0x2dc>)
 800320e:	4618      	mov	r0, r3
 8003210:	f008 fc2c 	bl	800ba6c <siprintf>
	  sprintf(str3, "%d", squelch);
 8003214:	4b29      	ldr	r3, [pc, #164]	@ (80032bc <LCDPrint+0x2e0>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800321c:	4926      	ldr	r1, [pc, #152]	@ (80032b8 <LCDPrint+0x2dc>)
 800321e:	4618      	mov	r0, r3
 8003220:	f008 fc24 	bl	800ba6c <siprintf>
	  glcd_puts("Vol ", 2, 5);
 8003224:	2205      	movs	r2, #5
 8003226:	2102      	movs	r1, #2
 8003228:	4825      	ldr	r0, [pc, #148]	@ (80032c0 <LCDPrint+0x2e4>)
 800322a:	f7fe f843 	bl	80012b4 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 800322e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003232:	2205      	movs	r2, #5
 8003234:	211e      	movs	r1, #30
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe f83c 	bl	80012b4 <glcd_puts>
	  if (vol < 10) {
 800323c:	4b1d      	ldr	r3, [pc, #116]	@ (80032b4 <LCDPrint+0x2d8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b09      	cmp	r3, #9
 8003242:	dc04      	bgt.n	800324e <LCDPrint+0x272>
	  	 glcd_puts(" ", 38, 5);
 8003244:	2205      	movs	r2, #5
 8003246:	2126      	movs	r1, #38	@ 0x26
 8003248:	4818      	ldr	r0, [pc, #96]	@ (80032ac <LCDPrint+0x2d0>)
 800324a:	f7fe f833 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 800324e:	2205      	movs	r2, #5
 8003250:	2138      	movs	r1, #56	@ 0x38
 8003252:	4816      	ldr	r0, [pc, #88]	@ (80032ac <LCDPrint+0x2d0>)
 8003254:	f7fe f82e 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 8003258:	2205      	movs	r2, #5
 800325a:	213e      	movs	r1, #62	@ 0x3e
 800325c:	4813      	ldr	r0, [pc, #76]	@ (80032ac <LCDPrint+0x2d0>)
 800325e:	f7fe f829 	bl	80012b4 <glcd_puts>
	  glcd_puts("Sqlch ", 66, 5);
 8003262:	2205      	movs	r2, #5
 8003264:	2142      	movs	r1, #66	@ 0x42
 8003266:	4817      	ldr	r0, [pc, #92]	@ (80032c4 <LCDPrint+0x2e8>)
 8003268:	f7fe f824 	bl	80012b4 <glcd_puts>
	  glcd_puts(str3, 110, 5);
 800326c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003270:	2205      	movs	r2, #5
 8003272:	216e      	movs	r1, #110	@ 0x6e
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe f81d 	bl	80012b4 <glcd_puts>
	  if (squelch < 10) {
 800327a:	4b10      	ldr	r3, [pc, #64]	@ (80032bc <LCDPrint+0x2e0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b09      	cmp	r3, #9
 8003280:	dc04      	bgt.n	800328c <LCDPrint+0x2b0>
		  glcd_puts(" ", 118, 5);
 8003282:	2205      	movs	r2, #5
 8003284:	2176      	movs	r1, #118	@ 0x76
 8003286:	4809      	ldr	r0, [pc, #36]	@ (80032ac <LCDPrint+0x2d0>)
 8003288:	f7fe f814 	bl	80012b4 <glcd_puts>
	  glcd_clearline(6);
 800328c:	2006      	movs	r0, #6
 800328e:	f7fe fa4d 	bl	800172c <glcd_clearline>
}
 8003292:	e260      	b.n	8003756 <LCDPrint+0x77a>
 8003294:	40010800 	.word	0x40010800
 8003298:	20000000 	.word	0x20000000
 800329c:	0800df70 	.word	0x0800df70
 80032a0:	20000008 	.word	0x20000008
 80032a4:	0800df78 	.word	0x0800df78
 80032a8:	0800df7c 	.word	0x0800df7c
 80032ac:	0800df80 	.word	0x0800df80
 80032b0:	0800df84 	.word	0x0800df84
 80032b4:	200006c4 	.word	0x200006c4
 80032b8:	0800df88 	.word	0x0800df88
 80032bc:	200006c8 	.word	0x200006c8
 80032c0:	0800df8c 	.word	0x0800df8c
 80032c4:	0800df94 	.word	0x0800df94
	else if (str[0] == 's') {
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b73      	cmp	r3, #115	@ 0x73
 80032ce:	f040 809a 	bne.w	8003406 <LCDPrint+0x42a>
	  sprintf(str0, "%0.3f", freq);
 80032d2:	4bbf      	ldr	r3, [pc, #764]	@ (80035d0 <LCDPrint+0x5f4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f916 	bl	8000508 <__aeabi_f2d>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80032e4:	49bb      	ldr	r1, [pc, #748]	@ (80035d4 <LCDPrint+0x5f8>)
 80032e6:	f008 fbc1 	bl	800ba6c <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 80032ea:	4bbb      	ldr	r3, [pc, #748]	@ (80035d8 <LCDPrint+0x5fc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd f90a 	bl	8000508 <__aeabi_f2d>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80032fc:	49b5      	ldr	r1, [pc, #724]	@ (80035d4 <LCDPrint+0x5f8>)
 80032fe:	f008 fbb5 	bl	800ba6c <siprintf>
	  glcd_puts("A", 2, 2);
 8003302:	2202      	movs	r2, #2
 8003304:	2102      	movs	r1, #2
 8003306:	48b5      	ldr	r0, [pc, #724]	@ (80035dc <LCDPrint+0x600>)
 8003308:	f7fd ffd4 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 800330c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003310:	2202      	movs	r2, #2
 8003312:	210b      	movs	r1, #11
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd ffcd 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 2);
 800331a:	2202      	movs	r2, #2
 800331c:	2122      	movs	r1, #34	@ 0x22
 800331e:	48b0      	ldr	r0, [pc, #704]	@ (80035e0 <LCDPrint+0x604>)
 8003320:	f7fd ffc8 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 8003324:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003328:	3304      	adds	r3, #4
 800332a:	2202      	movs	r2, #2
 800332c:	2126      	movs	r1, #38	@ 0x26
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd ffc0 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 8003334:	2202      	movs	r2, #2
 8003336:	213e      	movs	r1, #62	@ 0x3e
 8003338:	48aa      	ldr	r0, [pc, #680]	@ (80035e4 <LCDPrint+0x608>)
 800333a:	f7fd ffbb 	bl	80012b4 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 800333e:	2202      	movs	r2, #2
 8003340:	2142      	movs	r1, #66	@ 0x42
 8003342:	48a9      	ldr	r0, [pc, #676]	@ (80035e8 <LCDPrint+0x60c>)
 8003344:	f7fd ffb6 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 8003348:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800334c:	2202      	movs	r2, #2
 800334e:	214b      	movs	r1, #75	@ 0x4b
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd ffaf 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 2);
 8003356:	2202      	movs	r2, #2
 8003358:	2162      	movs	r1, #98	@ 0x62
 800335a:	48a1      	ldr	r0, [pc, #644]	@ (80035e0 <LCDPrint+0x604>)
 800335c:	f7fd ffaa 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 8003360:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003364:	3304      	adds	r3, #4
 8003366:	2202      	movs	r2, #2
 8003368:	2166      	movs	r1, #102	@ 0x66
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd ffa2 	bl	80012b4 <glcd_puts>
	  glcd_clearline(3);
 8003370:	2003      	movs	r0, #3
 8003372:	f7fe f9db 	bl	800172c <glcd_clearline>
	  sprintf(str2, "%d", vol);
 8003376:	4b9d      	ldr	r3, [pc, #628]	@ (80035ec <LCDPrint+0x610>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	f107 0320 	add.w	r3, r7, #32
 800337e:	499c      	ldr	r1, [pc, #624]	@ (80035f0 <LCDPrint+0x614>)
 8003380:	4618      	mov	r0, r3
 8003382:	f008 fb73 	bl	800ba6c <siprintf>
	  sprintf(str3, "%d", squelch);
 8003386:	4b9b      	ldr	r3, [pc, #620]	@ (80035f4 <LCDPrint+0x618>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	f107 0318 	add.w	r3, r7, #24
 800338e:	4998      	ldr	r1, [pc, #608]	@ (80035f0 <LCDPrint+0x614>)
 8003390:	4618      	mov	r0, r3
 8003392:	f008 fb6b 	bl	800ba6c <siprintf>
	  glcd_puts("Vol ", 2, 5);
 8003396:	2205      	movs	r2, #5
 8003398:	2102      	movs	r1, #2
 800339a:	4897      	ldr	r0, [pc, #604]	@ (80035f8 <LCDPrint+0x61c>)
 800339c:	f7fd ff8a 	bl	80012b4 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 80033a0:	f107 0320 	add.w	r3, r7, #32
 80033a4:	2205      	movs	r2, #5
 80033a6:	211e      	movs	r1, #30
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd ff83 	bl	80012b4 <glcd_puts>
	  if (vol < 10) {
 80033ae:	4b8f      	ldr	r3, [pc, #572]	@ (80035ec <LCDPrint+0x610>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b09      	cmp	r3, #9
 80033b4:	dc04      	bgt.n	80033c0 <LCDPrint+0x3e4>
	  	 glcd_puts(" ", 38, 5);
 80033b6:	2205      	movs	r2, #5
 80033b8:	2126      	movs	r1, #38	@ 0x26
 80033ba:	488a      	ldr	r0, [pc, #552]	@ (80035e4 <LCDPrint+0x608>)
 80033bc:	f7fd ff7a 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 80033c0:	2205      	movs	r2, #5
 80033c2:	2138      	movs	r1, #56	@ 0x38
 80033c4:	4887      	ldr	r0, [pc, #540]	@ (80035e4 <LCDPrint+0x608>)
 80033c6:	f7fd ff75 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 80033ca:	2205      	movs	r2, #5
 80033cc:	213e      	movs	r1, #62	@ 0x3e
 80033ce:	4885      	ldr	r0, [pc, #532]	@ (80035e4 <LCDPrint+0x608>)
 80033d0:	f7fd ff70 	bl	80012b4 <glcd_puts>
	  glcd_puts("Sqlch ", 66, 5);
 80033d4:	2205      	movs	r2, #5
 80033d6:	2142      	movs	r1, #66	@ 0x42
 80033d8:	4888      	ldr	r0, [pc, #544]	@ (80035fc <LCDPrint+0x620>)
 80033da:	f7fd ff6b 	bl	80012b4 <glcd_puts>
	  glcd_puts(str3, 110, 5);
 80033de:	f107 0318 	add.w	r3, r7, #24
 80033e2:	2205      	movs	r2, #5
 80033e4:	216e      	movs	r1, #110	@ 0x6e
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd ff64 	bl	80012b4 <glcd_puts>
	  if (squelch < 10) {
 80033ec:	4b81      	ldr	r3, [pc, #516]	@ (80035f4 <LCDPrint+0x618>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	dc04      	bgt.n	80033fe <LCDPrint+0x422>
		  glcd_puts(" ", 118, 5);
 80033f4:	2205      	movs	r2, #5
 80033f6:	2176      	movs	r1, #118	@ 0x76
 80033f8:	487a      	ldr	r0, [pc, #488]	@ (80035e4 <LCDPrint+0x608>)
 80033fa:	f7fd ff5b 	bl	80012b4 <glcd_puts>
	  glcd_clearline(6);
 80033fe:	2006      	movs	r0, #6
 8003400:	f7fe f994 	bl	800172c <glcd_clearline>
}
 8003404:	e1a7      	b.n	8003756 <LCDPrint+0x77a>
	else if (str[0] == 'k'){ // scroll
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b6b      	cmp	r3, #107	@ 0x6b
 800340c:	d124      	bne.n	8003458 <LCDPrint+0x47c>
	  glcd_clear_all();
 800340e:	f7fe f9d9 	bl	80017c4 <glcd_clear_all>
	  glcd_puts(str+1, 2, 3);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3301      	adds	r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd ff4a 	bl	80012b4 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 8003420:	2203      	movs	r2, #3
 8003422:	213a      	movs	r1, #58	@ 0x3a
 8003424:	4876      	ldr	r0, [pc, #472]	@ (8003600 <LCDPrint+0x624>)
 8003426:	f7fd ff45 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+8, 75, 3);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3308      	adds	r3, #8
 800342e:	2203      	movs	r2, #3
 8003430:	214b      	movs	r1, #75	@ 0x4b
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd ff3e 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 3);
 8003438:	2203      	movs	r2, #3
 800343a:	2162      	movs	r1, #98	@ 0x62
 800343c:	4868      	ldr	r0, [pc, #416]	@ (80035e0 <LCDPrint+0x604>)
 800343e:	f7fd ff39 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+12, 102, 3);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	330c      	adds	r3, #12
 8003446:	2203      	movs	r2, #3
 8003448:	2166      	movs	r1, #102	@ 0x66
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd ff32 	bl	80012b4 <glcd_puts>
	  glcd_clearline(4);
 8003450:	2004      	movs	r0, #4
 8003452:	f7fe f96b 	bl	800172c <glcd_clearline>
}
 8003456:	e17e      	b.n	8003756 <LCDPrint+0x77a>
	else if (str[0] == 'n') {// no mem
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b6e      	cmp	r3, #110	@ 0x6e
 800345e:	d109      	bne.n	8003474 <LCDPrint+0x498>
	  glcd_clear_all();
 8003460:	f7fe f9b0 	bl	80017c4 <glcd_clear_all>
	  str = "NO MEM";
 8003464:	4b67      	ldr	r3, [pc, #412]	@ (8003604 <LCDPrint+0x628>)
 8003466:	607b      	str	r3, [r7, #4]
	  glcd_puts(str, 66, 3);
 8003468:	2203      	movs	r2, #3
 800346a:	2142      	movs	r1, #66	@ 0x42
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fd ff21 	bl	80012b4 <glcd_puts>
}
 8003472:	e170      	b.n	8003756 <LCDPrint+0x77a>
	else if (str[0] == 'm') { //mic gain
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b6d      	cmp	r3, #109	@ 0x6d
 800347a:	d148      	bne.n	800350e <LCDPrint+0x532>
	  sprintf(str0, "%d", micgain);
 800347c:	4b62      	ldr	r3, [pc, #392]	@ (8003608 <LCDPrint+0x62c>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	f107 0310 	add.w	r3, r7, #16
 8003484:	495a      	ldr	r1, [pc, #360]	@ (80035f0 <LCDPrint+0x614>)
 8003486:	4618      	mov	r0, r3
 8003488:	f008 faf0 	bl	800ba6c <siprintf>
	  glcd_clearline(2);
 800348c:	2002      	movs	r0, #2
 800348e:	f7fe f94d 	bl	800172c <glcd_clearline>
	  glcd_clearline(5);
 8003492:	2005      	movs	r0, #5
 8003494:	f7fe f94a 	bl	800172c <glcd_clearline>
	  glcd_puts("A", 2, 3);
 8003498:	2203      	movs	r2, #3
 800349a:	2102      	movs	r1, #2
 800349c:	484f      	ldr	r0, [pc, #316]	@ (80035dc <LCDPrint+0x600>)
 800349e:	f7fd ff09 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+1, 11, 3);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3301      	adds	r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	210b      	movs	r1, #11
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd ff02 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 3);
 80034b0:	2203      	movs	r2, #3
 80034b2:	2122      	movs	r1, #34	@ 0x22
 80034b4:	484a      	ldr	r0, [pc, #296]	@ (80035e0 <LCDPrint+0x604>)
 80034b6:	f7fd fefd 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+5, 38, 3);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3305      	adds	r3, #5
 80034be:	2203      	movs	r2, #3
 80034c0:	2126      	movs	r1, #38	@ 0x26
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fef6 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 3);
 80034c8:	2203      	movs	r2, #3
 80034ca:	213e      	movs	r1, #62	@ 0x3e
 80034cc:	4845      	ldr	r0, [pc, #276]	@ (80035e4 <LCDPrint+0x608>)
 80034ce:	f7fd fef1 	bl	80012b4 <glcd_puts>
	  glcd_puts("MicG ", 66, 3);
 80034d2:	2203      	movs	r2, #3
 80034d4:	2142      	movs	r1, #66	@ 0x42
 80034d6:	484d      	ldr	r0, [pc, #308]	@ (800360c <LCDPrint+0x630>)
 80034d8:	f7fd feec 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 104, 3);
 80034dc:	f107 0310 	add.w	r3, r7, #16
 80034e0:	2203      	movs	r2, #3
 80034e2:	2168      	movs	r1, #104	@ 0x68
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd fee5 	bl	80012b4 <glcd_puts>
	  if (micgain < 10) {
 80034ea:	4b47      	ldr	r3, [pc, #284]	@ (8003608 <LCDPrint+0x62c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	dc04      	bgt.n	80034fc <LCDPrint+0x520>
		  glcd_puts(" ", 112, 3);
 80034f2:	2203      	movs	r2, #3
 80034f4:	2170      	movs	r1, #112	@ 0x70
 80034f6:	483b      	ldr	r0, [pc, #236]	@ (80035e4 <LCDPrint+0x608>)
 80034f8:	f7fd fedc 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 120, 3);
 80034fc:	2203      	movs	r2, #3
 80034fe:	2178      	movs	r1, #120	@ 0x78
 8003500:	4838      	ldr	r0, [pc, #224]	@ (80035e4 <LCDPrint+0x608>)
 8003502:	f7fd fed7 	bl	80012b4 <glcd_puts>
	  glcd_clearline(4);
 8003506:	2004      	movs	r0, #4
 8003508:	f7fe f910 	bl	800172c <glcd_clearline>
}
 800350c:	e123      	b.n	8003756 <LCDPrint+0x77a>
	else if (str[0] == 't') { //side tone
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b74      	cmp	r3, #116	@ 0x74
 8003514:	d148      	bne.n	80035a8 <LCDPrint+0x5cc>
	  sprintf(str0, "%d", sidetone);
 8003516:	4b3e      	ldr	r3, [pc, #248]	@ (8003610 <LCDPrint+0x634>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	f107 0308 	add.w	r3, r7, #8
 800351e:	4934      	ldr	r1, [pc, #208]	@ (80035f0 <LCDPrint+0x614>)
 8003520:	4618      	mov	r0, r3
 8003522:	f008 faa3 	bl	800ba6c <siprintf>
	  glcd_clearline(2);
 8003526:	2002      	movs	r0, #2
 8003528:	f7fe f900 	bl	800172c <glcd_clearline>
	  glcd_clearline(5);
 800352c:	2005      	movs	r0, #5
 800352e:	f7fe f8fd 	bl	800172c <glcd_clearline>
	  glcd_puts("A", 2, 3);
 8003532:	2203      	movs	r2, #3
 8003534:	2102      	movs	r1, #2
 8003536:	4829      	ldr	r0, [pc, #164]	@ (80035dc <LCDPrint+0x600>)
 8003538:	f7fd febc 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+1, 11, 3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3301      	adds	r3, #1
 8003540:	2203      	movs	r2, #3
 8003542:	210b      	movs	r1, #11
 8003544:	4618      	mov	r0, r3
 8003546:	f7fd feb5 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 3);
 800354a:	2203      	movs	r2, #3
 800354c:	2122      	movs	r1, #34	@ 0x22
 800354e:	4824      	ldr	r0, [pc, #144]	@ (80035e0 <LCDPrint+0x604>)
 8003550:	f7fd feb0 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+5, 38, 3);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3305      	adds	r3, #5
 8003558:	2203      	movs	r2, #3
 800355a:	2126      	movs	r1, #38	@ 0x26
 800355c:	4618      	mov	r0, r3
 800355e:	f7fd fea9 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 3);
 8003562:	2203      	movs	r2, #3
 8003564:	213e      	movs	r1, #62	@ 0x3e
 8003566:	481f      	ldr	r0, [pc, #124]	@ (80035e4 <LCDPrint+0x608>)
 8003568:	f7fd fea4 	bl	80012b4 <glcd_puts>
	  glcd_puts("Side ", 66, 3);
 800356c:	2203      	movs	r2, #3
 800356e:	2142      	movs	r1, #66	@ 0x42
 8003570:	4828      	ldr	r0, [pc, #160]	@ (8003614 <LCDPrint+0x638>)
 8003572:	f7fd fe9f 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 104, 3);
 8003576:	f107 0308 	add.w	r3, r7, #8
 800357a:	2203      	movs	r2, #3
 800357c:	2168      	movs	r1, #104	@ 0x68
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd fe98 	bl	80012b4 <glcd_puts>
	  if (sidetone < 10) {
 8003584:	4b22      	ldr	r3, [pc, #136]	@ (8003610 <LCDPrint+0x634>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b09      	cmp	r3, #9
 800358a:	dc04      	bgt.n	8003596 <LCDPrint+0x5ba>
		  glcd_puts(" ", 112, 3);
 800358c:	2203      	movs	r2, #3
 800358e:	2170      	movs	r1, #112	@ 0x70
 8003590:	4814      	ldr	r0, [pc, #80]	@ (80035e4 <LCDPrint+0x608>)
 8003592:	f7fd fe8f 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 120, 3);
 8003596:	2203      	movs	r2, #3
 8003598:	2178      	movs	r1, #120	@ 0x78
 800359a:	4812      	ldr	r0, [pc, #72]	@ (80035e4 <LCDPrint+0x608>)
 800359c:	f7fd fe8a 	bl	80012b4 <glcd_puts>
	  glcd_clearline(4);
 80035a0:	2004      	movs	r0, #4
 80035a2:	f7fe f8c3 	bl	800172c <glcd_clearline>
}
 80035a6:	e0d6      	b.n	8003756 <LCDPrint+0x77a>
	else if (str[0] == 'e') {
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b65      	cmp	r3, #101	@ 0x65
 80035ae:	d158      	bne.n	8003662 <LCDPrint+0x686>
	  glcd_clear_all();
 80035b0:	f7fe f908 	bl	80017c4 <glcd_clear_all>
	  if (str[1] == ':') {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3301      	adds	r3, #1
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80035bc:	d12e      	bne.n	800361c <LCDPrint+0x640>
		str = "EMPTY";
 80035be:	4b16      	ldr	r3, [pc, #88]	@ (8003618 <LCDPrint+0x63c>)
 80035c0:	607b      	str	r3, [r7, #4]
		glcd_puts(str, 66, 3);
 80035c2:	2203      	movs	r2, #3
 80035c4:	2142      	movs	r1, #66	@ 0x42
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd fe74 	bl	80012b4 <glcd_puts>
}
 80035cc:	e0c3      	b.n	8003756 <LCDPrint+0x77a>
 80035ce:	bf00      	nop
 80035d0:	20000000 	.word	0x20000000
 80035d4:	0800df70 	.word	0x0800df70
 80035d8:	20000008 	.word	0x20000008
 80035dc:	0800df78 	.word	0x0800df78
 80035e0:	0800df7c 	.word	0x0800df7c
 80035e4:	0800df80 	.word	0x0800df80
 80035e8:	0800df84 	.word	0x0800df84
 80035ec:	200006c4 	.word	0x200006c4
 80035f0:	0800df88 	.word	0x0800df88
 80035f4:	200006c8 	.word	0x200006c8
 80035f8:	0800df8c 	.word	0x0800df8c
 80035fc:	0800df94 	.word	0x0800df94
 8003600:	0800df9c 	.word	0x0800df9c
 8003604:	0800dfa0 	.word	0x0800dfa0
 8003608:	20000014 	.word	0x20000014
 800360c:	0800dfa8 	.word	0x0800dfa8
 8003610:	20000018 	.word	0x20000018
 8003614:	0800dfb0 	.word	0x0800dfb0
 8003618:	0800dfb8 	.word	0x0800dfb8
		glcd_puts(str+1, 2, 3);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3301      	adds	r3, #1
 8003620:	2203      	movs	r2, #3
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd fe45 	bl	80012b4 <glcd_puts>
		glcd_puts("   ", 58, 3);
 800362a:	2203      	movs	r2, #3
 800362c:	213a      	movs	r1, #58	@ 0x3a
 800362e:	484c      	ldr	r0, [pc, #304]	@ (8003760 <LCDPrint+0x784>)
 8003630:	f7fd fe40 	bl	80012b4 <glcd_puts>
		glcd_puts(str+8, 75, 3);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3308      	adds	r3, #8
 8003638:	2203      	movs	r2, #3
 800363a:	214b      	movs	r1, #75	@ 0x4b
 800363c:	4618      	mov	r0, r3
 800363e:	f7fd fe39 	bl	80012b4 <glcd_puts>
		glcd_puts(".", 98, 3);
 8003642:	2203      	movs	r2, #3
 8003644:	2162      	movs	r1, #98	@ 0x62
 8003646:	4847      	ldr	r0, [pc, #284]	@ (8003764 <LCDPrint+0x788>)
 8003648:	f7fd fe34 	bl	80012b4 <glcd_puts>
		glcd_puts(str+12, 102, 3);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	330c      	adds	r3, #12
 8003650:	2203      	movs	r2, #3
 8003652:	2166      	movs	r1, #102	@ 0x66
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fe2d 	bl	80012b4 <glcd_puts>
		glcd_clearline(4);
 800365a:	2004      	movs	r0, #4
 800365c:	f7fe f866 	bl	800172c <glcd_clearline>
}
 8003660:	e079      	b.n	8003756 <LCDPrint+0x77a>
	else if (str[0] == 'a') {
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b61      	cmp	r3, #97	@ 0x61
 8003668:	d14b      	bne.n	8003702 <LCDPrint+0x726>
      glcd_clear_all();
 800366a:	f7fe f8ab 	bl	80017c4 <glcd_clear_all>
	  glcd_puts(str+2, 2, 3);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3302      	adds	r3, #2
 8003672:	2203      	movs	r2, #3
 8003674:	2102      	movs	r1, #2
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fe1c 	bl	80012b4 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 800367c:	2203      	movs	r2, #3
 800367e:	213a      	movs	r1, #58	@ 0x3a
 8003680:	4837      	ldr	r0, [pc, #220]	@ (8003760 <LCDPrint+0x784>)
 8003682:	f7fd fe17 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+9, 75, 3);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3309      	adds	r3, #9
 800368a:	2203      	movs	r2, #3
 800368c:	214b      	movs	r1, #75	@ 0x4b
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fe10 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 3);
 8003694:	2203      	movs	r2, #3
 8003696:	2162      	movs	r1, #98	@ 0x62
 8003698:	4832      	ldr	r0, [pc, #200]	@ (8003764 <LCDPrint+0x788>)
 800369a:	f7fd fe0b 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+13, 102, 3);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	330d      	adds	r3, #13
 80036a2:	2203      	movs	r2, #3
 80036a4:	2166      	movs	r1, #102	@ 0x66
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd fe04 	bl	80012b4 <glcd_puts>
	  glcd_clearline(4);
 80036ac:	2004      	movs	r0, #4
 80036ae:	f7fe f83d 	bl	800172c <glcd_clearline>
	  int cursor = str[1] - '0';
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3301      	adds	r3, #1
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	3b30      	subs	r3, #48	@ 0x30
 80036ba:	67bb      	str	r3, [r7, #120]	@ 0x78
	  if (cursor == 7) {
 80036bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036be:	2b07      	cmp	r3, #7
 80036c0:	d105      	bne.n	80036ce <LCDPrint+0x6f2>
		glcd_puts("___", 75, 4);
 80036c2:	2204      	movs	r2, #4
 80036c4:	214b      	movs	r1, #75	@ 0x4b
 80036c6:	4828      	ldr	r0, [pc, #160]	@ (8003768 <LCDPrint+0x78c>)
 80036c8:	f7fd fdf4 	bl	80012b4 <glcd_puts>
 80036cc:	e007      	b.n	80036de <LCDPrint+0x702>
	  else if (cursor == 8) {
 80036ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d104      	bne.n	80036de <LCDPrint+0x702>
		glcd_puts("___", 102, 4);
 80036d4:	2204      	movs	r2, #4
 80036d6:	2166      	movs	r1, #102	@ 0x66
 80036d8:	4823      	ldr	r0, [pc, #140]	@ (8003768 <LCDPrint+0x78c>)
 80036da:	f7fd fdeb 	bl	80012b4 <glcd_puts>
	  if (cursor >= 0 && cursor <= 6) {
 80036de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	db38      	blt.n	8003756 <LCDPrint+0x77a>
 80036e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	dc35      	bgt.n	8003756 <LCDPrint+0x77a>
		glcd_puts("_", 2+(cursor*8), 4);
 80036ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	3302      	adds	r3, #2
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2204      	movs	r2, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	481c      	ldr	r0, [pc, #112]	@ (800376c <LCDPrint+0x790>)
 80036fc:	f7fd fdda 	bl	80012b4 <glcd_puts>
}
 8003700:	e029      	b.n	8003756 <LCDPrint+0x77a>
	else if (str[0] == 'd') {
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d125      	bne.n	8003756 <LCDPrint+0x77a>
	  glcd_clear_all();
 800370a:	f7fe f85b 	bl	80017c4 <glcd_clear_all>
	  glcd_puts(str+2, 2, 3);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3302      	adds	r3, #2
 8003712:	2203      	movs	r2, #3
 8003714:	2102      	movs	r1, #2
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd fdcc 	bl	80012b4 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 800371c:	2203      	movs	r2, #3
 800371e:	213a      	movs	r1, #58	@ 0x3a
 8003720:	480f      	ldr	r0, [pc, #60]	@ (8003760 <LCDPrint+0x784>)
 8003722:	f7fd fdc7 	bl	80012b4 <glcd_puts>
	  glcd_puts("Delete ", 66, 3);
 8003726:	2203      	movs	r2, #3
 8003728:	2142      	movs	r1, #66	@ 0x42
 800372a:	4811      	ldr	r0, [pc, #68]	@ (8003770 <LCDPrint+0x794>)
 800372c:	f7fd fdc2 	bl	80012b4 <glcd_puts>
	  int yn = str[1] - '0';
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3301      	adds	r3, #1
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	3b30      	subs	r3, #48	@ 0x30
 8003738:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  if (yn == 1) {
 800373a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <LCDPrint+0x770>
		glcd_puts("Y", 118, 3);
 8003740:	2203      	movs	r2, #3
 8003742:	2176      	movs	r1, #118	@ 0x76
 8003744:	480b      	ldr	r0, [pc, #44]	@ (8003774 <LCDPrint+0x798>)
 8003746:	f7fd fdb5 	bl	80012b4 <glcd_puts>
}
 800374a:	e004      	b.n	8003756 <LCDPrint+0x77a>
		glcd_puts("N", 118, 3);
 800374c:	2203      	movs	r2, #3
 800374e:	2176      	movs	r1, #118	@ 0x76
 8003750:	4809      	ldr	r0, [pc, #36]	@ (8003778 <LCDPrint+0x79c>)
 8003752:	f7fd fdaf 	bl	80012b4 <glcd_puts>
}
 8003756:	bf00      	nop
 8003758:	3780      	adds	r7, #128	@ 0x80
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	0800df9c 	.word	0x0800df9c
 8003764:	0800df7c 	.word	0x0800df7c
 8003768:	0800dfc0 	.word	0x0800dfc0
 800376c:	0800dfc4 	.word	0x0800dfc4
 8003770:	0800dfc8 	.word	0x0800dfc8
 8003774:	0800dfd0 	.word	0x0800dfd0
 8003778:	0800dfd4 	.word	0x0800dfd4

0800377c <Sender>:

void Sender(const char * str, int mode) { //TODO
 800377c:	b580      	push	{r7, lr}
 800377e:	b092      	sub	sp, #72	@ 0x48
 8003780:	af02      	add	r7, sp, #8
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
    char crlf[] = {'\r','\n', 0};
 8003786:	4a74      	ldr	r2, [pc, #464]	@ (8003958 <Sender+0x1dc>)
 8003788:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	4611      	mov	r1, r2
 8003790:	8019      	strh	r1, [r3, #0]
 8003792:	3302      	adds	r3, #2
 8003794:	0c12      	lsrs	r2, r2, #16
 8003796:	701a      	strb	r2, [r3, #0]
    uint8_t str2[25]; // Array to hold the constructed string in ASCII

    memset(str2, 0, sizeof(str2)); // Initialize the array with zeros
 8003798:	f107 0318 	add.w	r3, r7, #24
 800379c:	2219      	movs	r2, #25
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f008 fa45 	bl	800bc30 <memset>

    if (mode == 0) {
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d12d      	bne.n	8003808 <Sender+0x8c>
        char m = str[0];
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
        char k = str[1];
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3301      	adds	r3, #1
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        snprintf((char*)str2, sizeof(str2), "$PMRRV42%c%cN", m, k);
 80037be:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80037c2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80037c6:	f107 0018 	add.w	r0, r7, #24
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	4a63      	ldr	r2, [pc, #396]	@ (800395c <Sender+0x1e0>)
 80037d0:	2119      	movs	r1, #25
 80037d2:	f008 f917 	bl	800ba04 <sniprintf>
        char end2[3];
        checksum((char*)str2, end2);
 80037d6:	f107 0214 	add.w	r2, r7, #20
 80037da:	f107 0318 	add.w	r3, r7, #24
 80037de:	4611      	mov	r1, r2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fb99 	bl	8002f18 <checksum>
        concatTwoChars((char*)str2, end2);
 80037e6:	f107 0214 	add.w	r2, r7, #20
 80037ea:	f107 0318 	add.w	r3, r7, #24
 80037ee:	4611      	mov	r1, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fbcf 	bl	8002f94 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 80037f6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80037fa:	f107 0318 	add.w	r3, r7, #24
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fbc7 	bl	8002f94 <concatTwoChars>
 8003806:	e091      	b.n	800392c <Sender+0x1b0>
    } else if (mode == 1) {
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d12d      	bne.n	800386a <Sender+0xee>
        char m = str[0];
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        char k = str[1];
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3301      	adds	r3, #1
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
        snprintf((char*)str2, sizeof(str2), "$PMRRV29%c%cN", m, k);
 8003820:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8003824:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003828:	f107 0018 	add.w	r0, r7, #24
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	4a4b      	ldr	r2, [pc, #300]	@ (8003960 <Sender+0x1e4>)
 8003832:	2119      	movs	r1, #25
 8003834:	f008 f8e6 	bl	800ba04 <sniprintf>
        char end3[3];
        checksum((char*)str2, end3);
 8003838:	f107 0210 	add.w	r2, r7, #16
 800383c:	f107 0318 	add.w	r3, r7, #24
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fb68 	bl	8002f18 <checksum>
        concatTwoChars((char*)str2, end3);
 8003848:	f107 0210 	add.w	r2, r7, #16
 800384c:	f107 0318 	add.w	r3, r7, #24
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fb9e 	bl	8002f94 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8003858:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800385c:	f107 0318 	add.w	r3, r7, #24
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fb96 	bl	8002f94 <concatTwoChars>
 8003868:	e060      	b.n	800392c <Sender+0x1b0>
    } else if (mode == 2) {
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d12d      	bne.n	80038cc <Sender+0x150>
        char v = str[0];
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        char s = str[1];
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3301      	adds	r3, #1
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        snprintf((char*)str2, sizeof(str2), "$PMRRV71%c%c", v, s);
 8003882:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003886:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800388a:	f107 0018 	add.w	r0, r7, #24
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	4a34      	ldr	r2, [pc, #208]	@ (8003964 <Sender+0x1e8>)
 8003894:	2119      	movs	r1, #25
 8003896:	f008 f8b5 	bl	800ba04 <sniprintf>
        char end4[3];
        checksum((char*)str2, end4);
 800389a:	f107 020c 	add.w	r2, r7, #12
 800389e:	f107 0318 	add.w	r3, r7, #24
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fb37 	bl	8002f18 <checksum>
        concatTwoChars((char*)str2, end4);
 80038aa:	f107 020c 	add.w	r2, r7, #12
 80038ae:	f107 0318 	add.w	r3, r7, #24
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fb6d 	bl	8002f94 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 80038ba:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80038be:	f107 0318 	add.w	r3, r7, #24
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fb65 	bl	8002f94 <concatTwoChars>
 80038ca:	e02f      	b.n	800392c <Sender+0x1b0>
    } else if (mode == 3) {
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d12c      	bne.n	800392c <Sender+0x1b0>
        char m = str[0];
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        char s = str[1];
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3301      	adds	r3, #1
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        snprintf((char*)str2, sizeof(str2), "$PMRRV72%c%c", m, s);
 80038e4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80038e8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80038ec:	f107 0018 	add.w	r0, r7, #24
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <Sender+0x1ec>)
 80038f6:	2119      	movs	r1, #25
 80038f8:	f008 f884 	bl	800ba04 <sniprintf>
        char end5[3];
        checksum((char*)str2, end5);
 80038fc:	f107 0208 	add.w	r2, r7, #8
 8003900:	f107 0318 	add.w	r3, r7, #24
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fb06 	bl	8002f18 <checksum>
        concatTwoChars((char*)str2, end5);
 800390c:	f107 0208 	add.w	r2, r7, #8
 8003910:	f107 0318 	add.w	r3, r7, #24
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fb3c 	bl	8002f94 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 800391c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003920:	f107 0318 	add.w	r3, r7, #24
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fb34 	bl	8002f94 <concatTwoChars>
    }

    HAL_UART_Transmit(&huart4, str2, strlen((char*)str2), 500);
 800392c:	f107 0318 	add.w	r3, r7, #24
 8003930:	4618      	mov	r0, r3
 8003932:	f7fc fc7d 	bl	8000230 <strlen>
 8003936:	4603      	mov	r3, r0
 8003938:	b29a      	uxth	r2, r3
 800393a:	f107 0118 	add.w	r1, r7, #24
 800393e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003942:	480a      	ldr	r0, [pc, #40]	@ (800396c <Sender+0x1f0>)
 8003944:	f005 fc52 	bl	80091ec <HAL_UART_Transmit>
    HAL_Delay(100);
 8003948:	2064      	movs	r0, #100	@ 0x64
 800394a:	f003 fb81 	bl	8007050 <HAL_Delay>
}
 800394e:	bf00      	nop
 8003950:	3740      	adds	r7, #64	@ 0x40
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	0800e018 	.word	0x0800e018
 800395c:	0800dfd8 	.word	0x0800dfd8
 8003960:	0800dfe8 	.word	0x0800dfe8
 8003964:	0800dff8 	.word	0x0800dff8
 8003968:	0800e008 	.word	0x0800e008
 800396c:	2000052c 	.word	0x2000052c

08003970 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b0f6      	sub	sp, #472	@ 0x1d8
 8003974:	af04      	add	r7, sp, #16
 8003976:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800397a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800397e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  char toPrint[20];
  /* Infinite loop */
  for(;;)
  {
	if (rxfree) {
 8003980:	4b9b      	ldr	r3, [pc, #620]	@ (8003bf0 <StartDefaultTask+0x280>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 808e 	beq.w	8003aa6 <StartDefaultTask+0x136>
		if (rxmsg[6] == '3' && rxmsg[7] == '5')
 800398a:	4b9a      	ldr	r3, [pc, #616]	@ (8003bf4 <StartDefaultTask+0x284>)
 800398c:	799b      	ldrb	r3, [r3, #6]
 800398e:	2b33      	cmp	r3, #51	@ 0x33
 8003990:	f040 8086 	bne.w	8003aa0 <StartDefaultTask+0x130>
 8003994:	4b97      	ldr	r3, [pc, #604]	@ (8003bf4 <StartDefaultTask+0x284>)
 8003996:	79db      	ldrb	r3, [r3, #7]
 8003998:	2b35      	cmp	r3, #53	@ 0x35
 800399a:	f040 8081 	bne.w	8003aa0 <StartDefaultTask+0x130>
		{ // comm transceiver status
			float commfreq;
			commfreq = (rxmsg[8] + 48) + ((rxmsg[9] - 48) * .025);
 800399e:	4b95      	ldr	r3, [pc, #596]	@ (8003bf4 <StartDefaultTask+0x284>)
 80039a0:	7a1b      	ldrb	r3, [r3, #8]
 80039a2:	3330      	adds	r3, #48	@ 0x30
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fc fd9d 	bl	80004e4 <__aeabi_i2d>
 80039aa:	4604      	mov	r4, r0
 80039ac:	460d      	mov	r5, r1
 80039ae:	4b91      	ldr	r3, [pc, #580]	@ (8003bf4 <StartDefaultTask+0x284>)
 80039b0:	7a5b      	ldrb	r3, [r3, #9]
 80039b2:	3b30      	subs	r3, #48	@ 0x30
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fd95 	bl	80004e4 <__aeabi_i2d>
 80039ba:	a38b      	add	r3, pc, #556	@ (adr r3, 8003be8 <StartDefaultTask+0x278>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fdfa 	bl	80005b8 <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4620      	mov	r0, r4
 80039ca:	4629      	mov	r1, r5
 80039cc:	f7fc fc3e 	bl	800024c <__adddf3>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	f7fd f8c6 	bl	8000b68 <__aeabi_d2f>
 80039dc:	4603      	mov	r3, r0
 80039de:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
			if (commfreq != freq) {
 80039e2:	4b85      	ldr	r3, [pc, #532]	@ (8003bf8 <StartDefaultTask+0x288>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4619      	mov	r1, r3
 80039e8:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 80039ec:	f7fd f950 	bl	8000c90 <__aeabi_fcmpeq>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d140      	bne.n	8003a78 <StartDefaultTask+0x108>
				faultcounter1 += 1;
 80039f6:	4b81      	ldr	r3, [pc, #516]	@ (8003bfc <StartDefaultTask+0x28c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	4a7f      	ldr	r2, [pc, #508]	@ (8003bfc <StartDefaultTask+0x28c>)
 80039fe:	6013      	str	r3, [r2, #0]
			    int MA = MHz - 48;
 8003a00:	4b7f      	ldr	r3, [pc, #508]	@ (8003c00 <StartDefaultTask+0x290>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3b30      	subs	r3, #48	@ 0x30
 8003a06:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
			    int KA = (KHz/25) + 48;
 8003a0a:	4b7e      	ldr	r3, [pc, #504]	@ (8003c04 <StartDefaultTask+0x294>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c08 <StartDefaultTask+0x298>)
 8003a10:	fb82 1203 	smull	r1, r2, r2, r3
 8003a14:	10d2      	asrs	r2, r2, #3
 8003a16:	17db      	asrs	r3, r3, #31
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	3330      	adds	r3, #48	@ 0x30
 8003a1c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
			    char m = (char)MA;
 8003a20:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003a24:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
			    char k = (char)KA;
 8003a28:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8003a2c:	f887 3176 	strb.w	r3, [r7, #374]	@ 0x176
			    char Mfinal[3] = {m,k,0};
 8003a30:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8003a34:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a38:	f897 2177 	ldrb.w	r2, [r7, #375]	@ 0x177
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8003a42:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a46:	f897 2176 	ldrb.w	r2, [r7, #374]	@ 0x176
 8003a4a:	705a      	strb	r2, [r3, #1]
 8003a4c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8003a50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a54:	2200      	movs	r2, #0
 8003a56:	709a      	strb	r2, [r3, #2]
			    Sender(Mfinal, 0); //set active
 8003a58:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fe8c 	bl	800377c <Sender>
				if (faultcounter1 > 2) {
 8003a64:	4b65      	ldr	r3, [pc, #404]	@ (8003bfc <StartDefaultTask+0x28c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	dd19      	ble.n	8003aa0 <StartDefaultTask+0x130>
					glcd_puts("Error 1", 0, 7);
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4866      	ldr	r0, [pc, #408]	@ (8003c0c <StartDefaultTask+0x29c>)
 8003a72:	f7fd fc1f 	bl	80012b4 <glcd_puts>
 8003a76:	e013      	b.n	8003aa0 <StartDefaultTask+0x130>
				}
			}
			else {
				if (faultcounter1 > 2)
 8003a78:	4b60      	ldr	r3, [pc, #384]	@ (8003bfc <StartDefaultTask+0x28c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	dd02      	ble.n	8003a86 <StartDefaultTask+0x116>
				{
					glcd_clearline(7);
 8003a80:	2007      	movs	r0, #7
 8003a82:	f7fd fe53 	bl	800172c <glcd_clearline>
				}
				faultcounter1 = 0;
 8003a86:	4b5d      	ldr	r3, [pc, #372]	@ (8003bfc <StartDefaultTask+0x28c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

				if (rxmsg[12] == 'T') { //TODO print transceiver status stuff and pause everything else
 8003a8c:	4b59      	ldr	r3, [pc, #356]	@ (8003bf4 <StartDefaultTask+0x284>)
 8003a8e:	7b1b      	ldrb	r3, [r3, #12]
 8003a90:	2b54      	cmp	r3, #84	@ 0x54
 8003a92:	d105      	bne.n	8003aa0 <StartDefaultTask+0x130>
					transmit = true;
 8003a94:	4b5e      	ldr	r3, [pc, #376]	@ (8003c10 <StartDefaultTask+0x2a0>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
					pause = true;
 8003a9a:	4b5e      	ldr	r3, [pc, #376]	@ (8003c14 <StartDefaultTask+0x2a4>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		rxfree = false;
 8003aa0:	4b53      	ldr	r3, [pc, #332]	@ (8003bf0 <StartDefaultTask+0x280>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
	}

	if (transmit) {
 8003aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8003c10 <StartDefaultTask+0x2a0>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80e3 	beq.w	8003c76 <StartDefaultTask+0x306>
		char str0[8];
		char str1[8];
		char str2[5];
		char str3[5];
		sprintf(str0, "%0.3f", freq);
 8003ab0:	4b51      	ldr	r3, [pc, #324]	@ (8003bf8 <StartDefaultTask+0x288>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc fd27 	bl	8000508 <__aeabi_f2d>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8003ac2:	4955      	ldr	r1, [pc, #340]	@ (8003c18 <StartDefaultTask+0x2a8>)
 8003ac4:	f007 ffd2 	bl	800ba6c <siprintf>
		sprintf(str1, "%0.3f", Standby);
 8003ac8:	4b54      	ldr	r3, [pc, #336]	@ (8003c1c <StartDefaultTask+0x2ac>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fc fd1b 	bl	8000508 <__aeabi_f2d>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8003ada:	494f      	ldr	r1, [pc, #316]	@ (8003c18 <StartDefaultTask+0x2a8>)
 8003adc:	f007 ffc6 	bl	800ba6c <siprintf>
		glcd_puts("T", 2, 2);
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	484e      	ldr	r0, [pc, #312]	@ (8003c20 <StartDefaultTask+0x2b0>)
 8003ae6:	f7fd fbe5 	bl	80012b4 <glcd_puts>
		glcd_puts(str0, 11, 2);
 8003aea:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003aee:	2202      	movs	r2, #2
 8003af0:	210b      	movs	r1, #11
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fbde 	bl	80012b4 <glcd_puts>
		glcd_puts(".", 34, 2);
 8003af8:	2202      	movs	r2, #2
 8003afa:	2122      	movs	r1, #34	@ 0x22
 8003afc:	4849      	ldr	r0, [pc, #292]	@ (8003c24 <StartDefaultTask+0x2b4>)
 8003afe:	f7fd fbd9 	bl	80012b4 <glcd_puts>
		glcd_puts(str0+4, 38, 2);
 8003b02:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003b06:	3304      	adds	r3, #4
 8003b08:	2202      	movs	r2, #2
 8003b0a:	2126      	movs	r1, #38	@ 0x26
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fbd1 	bl	80012b4 <glcd_puts>
		glcd_puts(" ", 62, 2);
 8003b12:	2202      	movs	r2, #2
 8003b14:	213e      	movs	r1, #62	@ 0x3e
 8003b16:	4844      	ldr	r0, [pc, #272]	@ (8003c28 <StartDefaultTask+0x2b8>)
 8003b18:	f7fd fbcc 	bl	80012b4 <glcd_puts>
		glcd_puts("S ", 66, 2);
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	2142      	movs	r1, #66	@ 0x42
 8003b20:	4842      	ldr	r0, [pc, #264]	@ (8003c2c <StartDefaultTask+0x2bc>)
 8003b22:	f7fd fbc7 	bl	80012b4 <glcd_puts>
		glcd_puts(str1, 75, 2);
 8003b26:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	214b      	movs	r1, #75	@ 0x4b
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fbc0 	bl	80012b4 <glcd_puts>
		glcd_puts(".", 98, 2);
 8003b34:	2202      	movs	r2, #2
 8003b36:	2162      	movs	r1, #98	@ 0x62
 8003b38:	483a      	ldr	r0, [pc, #232]	@ (8003c24 <StartDefaultTask+0x2b4>)
 8003b3a:	f7fd fbbb 	bl	80012b4 <glcd_puts>
		glcd_puts(str1+4, 102, 2);
 8003b3e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003b42:	3304      	adds	r3, #4
 8003b44:	2202      	movs	r2, #2
 8003b46:	2166      	movs	r1, #102	@ 0x66
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fbb3 	bl	80012b4 <glcd_puts>
		glcd_clearline(3);
 8003b4e:	2003      	movs	r0, #3
 8003b50:	f7fd fdec 	bl	800172c <glcd_clearline>

		sprintf(str2, "%d", vol);
 8003b54:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <StartDefaultTask+0x2c0>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b5c:	4935      	ldr	r1, [pc, #212]	@ (8003c34 <StartDefaultTask+0x2c4>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f007 ff84 	bl	800ba6c <siprintf>
		sprintf(str3, "%d", squelch);
 8003b64:	4b34      	ldr	r3, [pc, #208]	@ (8003c38 <StartDefaultTask+0x2c8>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b6c:	4931      	ldr	r1, [pc, #196]	@ (8003c34 <StartDefaultTask+0x2c4>)
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f007 ff7c 	bl	800ba6c <siprintf>
		glcd_puts("Vol ", 2, 5);
 8003b74:	2205      	movs	r2, #5
 8003b76:	2102      	movs	r1, #2
 8003b78:	4830      	ldr	r0, [pc, #192]	@ (8003c3c <StartDefaultTask+0x2cc>)
 8003b7a:	f7fd fb9b 	bl	80012b4 <glcd_puts>
		glcd_puts(str2, 30, 5);
 8003b7e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b82:	2205      	movs	r2, #5
 8003b84:	211e      	movs	r1, #30
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd fb94 	bl	80012b4 <glcd_puts>
		if (vol < 10) {
 8003b8c:	4b28      	ldr	r3, [pc, #160]	@ (8003c30 <StartDefaultTask+0x2c0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b09      	cmp	r3, #9
 8003b92:	dc04      	bgt.n	8003b9e <StartDefaultTask+0x22e>
			glcd_puts(" ", 38, 5);
 8003b94:	2205      	movs	r2, #5
 8003b96:	2126      	movs	r1, #38	@ 0x26
 8003b98:	4823      	ldr	r0, [pc, #140]	@ (8003c28 <StartDefaultTask+0x2b8>)
 8003b9a:	f7fd fb8b 	bl	80012b4 <glcd_puts>
		}
		glcd_puts(" ", 56, 5);
 8003b9e:	2205      	movs	r2, #5
 8003ba0:	2138      	movs	r1, #56	@ 0x38
 8003ba2:	4821      	ldr	r0, [pc, #132]	@ (8003c28 <StartDefaultTask+0x2b8>)
 8003ba4:	f7fd fb86 	bl	80012b4 <glcd_puts>
		glcd_puts(" ", 62, 5);
 8003ba8:	2205      	movs	r2, #5
 8003baa:	213e      	movs	r1, #62	@ 0x3e
 8003bac:	481e      	ldr	r0, [pc, #120]	@ (8003c28 <StartDefaultTask+0x2b8>)
 8003bae:	f7fd fb81 	bl	80012b4 <glcd_puts>
		glcd_puts("Sqlch ", 66, 5);
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	2142      	movs	r1, #66	@ 0x42
 8003bb6:	4822      	ldr	r0, [pc, #136]	@ (8003c40 <StartDefaultTask+0x2d0>)
 8003bb8:	f7fd fb7c 	bl	80012b4 <glcd_puts>
		glcd_puts(str3, 110, 5);
 8003bbc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003bc0:	2205      	movs	r2, #5
 8003bc2:	216e      	movs	r1, #110	@ 0x6e
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fd fb75 	bl	80012b4 <glcd_puts>
		if (squelch < 10) {
 8003bca:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <StartDefaultTask+0x2c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b09      	cmp	r3, #9
 8003bd0:	dc04      	bgt.n	8003bdc <StartDefaultTask+0x26c>
			glcd_puts(" ", 118, 5);
 8003bd2:	2205      	movs	r2, #5
 8003bd4:	2176      	movs	r1, #118	@ 0x76
 8003bd6:	4814      	ldr	r0, [pc, #80]	@ (8003c28 <StartDefaultTask+0x2b8>)
 8003bd8:	f7fd fb6c 	bl	80012b4 <glcd_puts>
		}
		glcd_clearline(6);
 8003bdc:	2006      	movs	r0, #6
 8003bde:	f7fd fda5 	bl	800172c <glcd_clearline>

		while (transmit) {
 8003be2:	e044      	b.n	8003c6e <StartDefaultTask+0x2fe>
 8003be4:	f3af 8000 	nop.w
 8003be8:	9999999a 	.word	0x9999999a
 8003bec:	3f999999 	.word	0x3f999999
 8003bf0:	20000761 	.word	0x20000761
 8003bf4:	20000738 	.word	0x20000738
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	2000075c 	.word	0x2000075c
 8003c00:	20000004 	.word	0x20000004
 8003c04:	200006bc 	.word	0x200006bc
 8003c08:	51eb851f 	.word	0x51eb851f
 8003c0c:	0800e01c 	.word	0x0800e01c
 8003c10:	20000760 	.word	0x20000760
 8003c14:	20000010 	.word	0x20000010
 8003c18:	0800df70 	.word	0x0800df70
 8003c1c:	20000008 	.word	0x20000008
 8003c20:	0800e024 	.word	0x0800e024
 8003c24:	0800df7c 	.word	0x0800df7c
 8003c28:	0800df80 	.word	0x0800df80
 8003c2c:	0800df84 	.word	0x0800df84
 8003c30:	200006c4 	.word	0x200006c4
 8003c34:	0800df88 	.word	0x0800df88
 8003c38:	200006c8 	.word	0x200006c8
 8003c3c:	0800df8c 	.word	0x0800df8c
 8003c40:	0800df94 	.word	0x0800df94
			if (rxmsg[6] == '3' && rxmsg[7] == '5' && rxmsg[12] == 'R') {
 8003c44:	4ba0      	ldr	r3, [pc, #640]	@ (8003ec8 <StartDefaultTask+0x558>)
 8003c46:	799b      	ldrb	r3, [r3, #6]
 8003c48:	2b33      	cmp	r3, #51	@ 0x33
 8003c4a:	d110      	bne.n	8003c6e <StartDefaultTask+0x2fe>
 8003c4c:	4b9e      	ldr	r3, [pc, #632]	@ (8003ec8 <StartDefaultTask+0x558>)
 8003c4e:	79db      	ldrb	r3, [r3, #7]
 8003c50:	2b35      	cmp	r3, #53	@ 0x35
 8003c52:	d10c      	bne.n	8003c6e <StartDefaultTask+0x2fe>
 8003c54:	4b9c      	ldr	r3, [pc, #624]	@ (8003ec8 <StartDefaultTask+0x558>)
 8003c56:	7b1b      	ldrb	r3, [r3, #12]
 8003c58:	2b52      	cmp	r3, #82	@ 0x52
 8003c5a:	d108      	bne.n	8003c6e <StartDefaultTask+0x2fe>
				transmit = false;
 8003c5c:	4b9b      	ldr	r3, [pc, #620]	@ (8003ecc <StartDefaultTask+0x55c>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
				pause = false;
 8003c62:	4b9b      	ldr	r3, [pc, #620]	@ (8003ed0 <StartDefaultTask+0x560>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
				LCDPrint("f");
 8003c68:	489a      	ldr	r0, [pc, #616]	@ (8003ed4 <StartDefaultTask+0x564>)
 8003c6a:	f7ff f9b7 	bl	8002fdc <LCDPrint>
		while (transmit) {
 8003c6e:	4b97      	ldr	r3, [pc, #604]	@ (8003ecc <StartDefaultTask+0x55c>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e6      	bne.n	8003c44 <StartDefaultTask+0x2d4>
	static float sfreq_last = 118.000;
	static int vol_last = 0;
	static int squelch_last = 0;
	static int last_mic = 1;
	static int last_side = 1;
	freq = MHz + (.001 * KHz);
 8003c76:	4b98      	ldr	r3, [pc, #608]	@ (8003ed8 <StartDefaultTask+0x568>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fc fc32 	bl	80004e4 <__aeabi_i2d>
 8003c80:	4604      	mov	r4, r0
 8003c82:	460d      	mov	r5, r1
 8003c84:	4b95      	ldr	r3, [pc, #596]	@ (8003edc <StartDefaultTask+0x56c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fc2b 	bl	80004e4 <__aeabi_i2d>
 8003c8e:	a38c      	add	r3, pc, #560	@ (adr r3, 8003ec0 <StartDefaultTask+0x550>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f7fc fc90 	bl	80005b8 <__aeabi_dmul>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	f7fc fad4 	bl	800024c <__adddf3>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	f7fc ff5c 	bl	8000b68 <__aeabi_d2f>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	4a8b      	ldr	r2, [pc, #556]	@ (8003ee0 <StartDefaultTask+0x570>)
 8003cb4:	6013      	str	r3, [r2, #0]
	Standby = SM + (.001 * SK);
 8003cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8003ee4 <StartDefaultTask+0x574>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fc12 	bl	80004e4 <__aeabi_i2d>
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	4b88      	ldr	r3, [pc, #544]	@ (8003ee8 <StartDefaultTask+0x578>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fc0b 	bl	80004e4 <__aeabi_i2d>
 8003cce:	a37c      	add	r3, pc, #496	@ (adr r3, 8003ec0 <StartDefaultTask+0x550>)
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f7fc fc70 	bl	80005b8 <__aeabi_dmul>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4620      	mov	r0, r4
 8003cde:	4629      	mov	r1, r5
 8003ce0:	f7fc fab4 	bl	800024c <__adddf3>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fc ff3c 	bl	8000b68 <__aeabi_d2f>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8003eec <StartDefaultTask+0x57c>)
 8003cf4:	6013      	str	r3, [r2, #0]
	if (millis() - last > 2000 && temp) { // if time between action > 2 send freq in NOTE: will need to add a check later as some actions cant be exited.
 8003cf6:	f7fe f867 	bl	8001dc8 <millis>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	4b7c      	ldr	r3, [pc, #496]	@ (8003ef0 <StartDefaultTask+0x580>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003d06:	d92b      	bls.n	8003d60 <StartDefaultTask+0x3f0>
 8003d08:	4b7a      	ldr	r3, [pc, #488]	@ (8003ef4 <StartDefaultTask+0x584>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d027      	beq.n	8003d60 <StartDefaultTask+0x3f0>
//	  Serial2.print("f");
//	  printFloat2(freq,3);
//	  printFloat2(Standby,3);
//	  Serial2.println("");
	  sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8003d10:	4b73      	ldr	r3, [pc, #460]	@ (8003ee0 <StartDefaultTask+0x570>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fbf7 	bl	8000508 <__aeabi_f2d>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	460d      	mov	r5, r1
 8003d1e:	4b73      	ldr	r3, [pc, #460]	@ (8003eec <StartDefaultTask+0x57c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fbf0 	bl	8000508 <__aeabi_f2d>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8003d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d34:	e9cd 4500 	strd	r4, r5, [sp]
 8003d38:	2266      	movs	r2, #102	@ 0x66
 8003d3a:	496f      	ldr	r1, [pc, #444]	@ (8003ef8 <StartDefaultTask+0x588>)
 8003d3c:	f007 fe96 	bl	800ba6c <siprintf>
	  LCDPrint(toPrint);
 8003d40:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff f949 	bl	8002fdc <LCDPrint>

	  freq_last = freq;
 8003d4a:	4b65      	ldr	r3, [pc, #404]	@ (8003ee0 <StartDefaultTask+0x570>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6b      	ldr	r2, [pc, #428]	@ (8003efc <StartDefaultTask+0x58c>)
 8003d50:	6013      	str	r3, [r2, #0]
	  sfreq_last = Standby;
 8003d52:	4b66      	ldr	r3, [pc, #408]	@ (8003eec <StartDefaultTask+0x57c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6a      	ldr	r2, [pc, #424]	@ (8003f00 <StartDefaultTask+0x590>)
 8003d58:	6013      	str	r3, [r2, #0]
	  temp = false;
 8003d5a:	4b66      	ldr	r3, [pc, #408]	@ (8003ef4 <StartDefaultTask+0x584>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
	}

	bool both = false;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
	// Current time
	unsigned long currentTime = millis();
 8003d66:	f7fe f82f 	bl	8001dc8 <millis>
 8003d6a:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170

	// Read the button states
	bool currentA = HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0;
 8003d6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d72:	4864      	ldr	r0, [pc, #400]	@ (8003f04 <StartDefaultTask+0x594>)
 8003d74:	f003 fd46 	bl	8007804 <HAL_GPIO_ReadPin>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
	bool currentB = HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0;
 8003d86:	2101      	movs	r1, #1
 8003d88:	485f      	ldr	r0, [pc, #380]	@ (8003f08 <StartDefaultTask+0x598>)
 8003d8a:	f003 fd3b 	bl	8007804 <HAL_GPIO_ReadPin>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	f887 316e 	strb.w	r3, [r7, #366]	@ 0x16e

	while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 8003d9c:	e01a      	b.n	8003dd4 <StartDefaultTask+0x464>
	  if (currentA) {
 8003d9e:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <StartDefaultTask+0x44c>
		if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 8003da6:	2101      	movs	r1, #1
 8003da8:	4857      	ldr	r0, [pc, #348]	@ (8003f08 <StartDefaultTask+0x598>)
 8003daa:	f003 fd2b 	bl	8007804 <HAL_GPIO_ReadPin>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10f      	bne.n	8003dd4 <StartDefaultTask+0x464>
		  both = true;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
		  break;
 8003dba:	e01b      	b.n	8003df4 <StartDefaultTask+0x484>
		}
	  }
	  else {
		if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0) {
 8003dbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003dc0:	4850      	ldr	r0, [pc, #320]	@ (8003f04 <StartDefaultTask+0x594>)
 8003dc2:	f003 fd1f 	bl	8007804 <HAL_GPIO_ReadPin>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d103      	bne.n	8003dd4 <StartDefaultTask+0x464>
		  both = true;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
		  break;
 8003dd2:	e00f      	b.n	8003df4 <StartDefaultTask+0x484>
	while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 8003dd4:	f7fd fff8 	bl	8001dc8 <millis>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b63      	cmp	r3, #99	@ 0x63
 8003de2:	d807      	bhi.n	8003df4 <StartDefaultTask+0x484>
 8003de4:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1d8      	bne.n	8003d9e <StartDefaultTask+0x42e>
 8003dec:	f897 316e 	ldrb.w	r3, [r7, #366]	@ 0x16e
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1d4      	bne.n	8003d9e <StartDefaultTask+0x42e>
		}
	  }
	}
	// Check if both buttons were pressed within the 50 ms window
	if (both && !micside) {
 8003df4:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f001 81f0 	beq.w	80051de <StartDefaultTask+0x186e>
 8003dfe:	4b43      	ldr	r3, [pc, #268]	@ (8003f0c <StartDefaultTask+0x59c>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f083 0301 	eor.w	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f001 81e8 	beq.w	80051de <StartDefaultTask+0x186e>
	  if (!on) { //mic tone and side gain
 8003e0e:	4b40      	ldr	r3, [pc, #256]	@ (8003f10 <StartDefaultTask+0x5a0>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	f083 0301 	eor.w	r3, r3, #1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d02e      	beq.n	8003e7a <StartDefaultTask+0x50a>
		micside = true;
 8003e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f0c <StartDefaultTask+0x59c>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	701a      	strb	r2, [r3, #0]
		on = true;
 8003e22:	4b3b      	ldr	r3, [pc, #236]	@ (8003f10 <StartDefaultTask+0x5a0>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
//		Serial2.print("x");
//		Serial2.print("m");
//		printFloat2(freq,3);
//		Serial2.print(micgain);
//		Serial2.println("");
		LCDPrint("x");
 8003e28:	483a      	ldr	r0, [pc, #232]	@ (8003f14 <StartDefaultTask+0x5a4>)
 8003e2a:	f7ff f8d7 	bl	8002fdc <LCDPrint>
		sprintf(toPrint, "%c%0.3f%d", 'm', freq, micgain);
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee0 <StartDefaultTask+0x570>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc fb68 	bl	8000508 <__aeabi_f2d>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4936      	ldr	r1, [pc, #216]	@ (8003f18 <StartDefaultTask+0x5a8>)
 8003e3e:	6809      	ldr	r1, [r1, #0]
 8003e40:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8003e44:	9102      	str	r1, [sp, #8]
 8003e46:	e9cd 2300 	strd	r2, r3, [sp]
 8003e4a:	226d      	movs	r2, #109	@ 0x6d
 8003e4c:	4933      	ldr	r1, [pc, #204]	@ (8003f1c <StartDefaultTask+0x5ac>)
 8003e4e:	f007 fe0d 	bl	800ba6c <siprintf>
		LCDPrint(toPrint);
 8003e52:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff f8c0 	bl	8002fdc <LCDPrint>

		last_mic = micgain;
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f18 <StartDefaultTask+0x5a8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2f      	ldr	r2, [pc, #188]	@ (8003f20 <StartDefaultTask+0x5b0>)
 8003e62:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 8003e64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e68:	f003 f8f2 	bl	8007050 <HAL_Delay>
		last = millis();
 8003e6c:	f7fd ffac 	bl	8001dc8 <millis>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef0 <StartDefaultTask+0x580>)
 8003e74:	6013      	str	r3, [r2, #0]
	  if (!on) { //mic tone and side gain
 8003e76:	f001 bc91 	b.w	800579c <StartDefaultTask+0x1e2c>
	  }
	  else { // Enter edit mode TODO
		toDisplay();
 8003e7a:	f7fd fd8d 	bl	8001998 <toDisplay>
		edit = true;
 8003e7e:	4b29      	ldr	r3, [pc, #164]	@ (8003f24 <StartDefaultTask+0x5b4>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
		pause = true;
 8003e84:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <StartDefaultTask+0x560>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8003e8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e8e:	f003 f8df 	bl	8007050 <HAL_Delay>
		bool both = false;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

		char str[8];
		if (dispCount == count) {
 8003e98:	4b23      	ldr	r3, [pc, #140]	@ (8003f28 <StartDefaultTask+0x5b8>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b23      	ldr	r3, [pc, #140]	@ (8003f2c <StartDefaultTask+0x5bc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d106      	bne.n	8003eb2 <StartDefaultTask+0x542>
		  str[0] = ':'; //EMPTY
 8003ea4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8003ea8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003eac:	223a      	movs	r2, #58	@ 0x3a
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e066      	b.n	8003f80 <StartDefaultTask+0x610>
		}
		else {
		  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003eb8:	e058      	b.n	8003f6c <StartDefaultTask+0x5fc>
 8003eba:	bf00      	nop
 8003ebc:	f3af 8000 	nop.w
 8003ec0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ec4:	3f50624d 	.word	0x3f50624d
 8003ec8:	20000738 	.word	0x20000738
 8003ecc:	20000760 	.word	0x20000760
 8003ed0:	20000010 	.word	0x20000010
 8003ed4:	0800e028 	.word	0x0800e028
 8003ed8:	20000004 	.word	0x20000004
 8003edc:	200006bc 	.word	0x200006bc
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	2000000c 	.word	0x2000000c
 8003ee8:	200006c0 	.word	0x200006c0
 8003eec:	20000008 	.word	0x20000008
 8003ef0:	20000770 	.word	0x20000770
 8003ef4:	20000728 	.word	0x20000728
 8003ef8:	0800e02c 	.word	0x0800e02c
 8003efc:	20000028 	.word	0x20000028
 8003f00:	2000002c 	.word	0x2000002c
 8003f04:	40011800 	.word	0x40011800
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	20000719 	.word	0x20000719
 8003f10:	200006cd 	.word	0x200006cd
 8003f14:	0800e03c 	.word	0x0800e03c
 8003f18:	20000014 	.word	0x20000014
 8003f1c:	0800e040 	.word	0x0800e040
 8003f20:	20000030 	.word	0x20000030
 8003f24:	200006cc 	.word	0x200006cc
 8003f28:	20000710 	.word	0x20000710
 8003f2c:	20000714 	.word	0x20000714
//			str[i] = EEPROM.read(eepDisplay[dispCount] + i);
			SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8003f30:	4bb1      	ldr	r3, [pc, #708]	@ (80041f8 <StartDefaultTask+0x888>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4ab1      	ldr	r2, [pc, #708]	@ (80041fc <StartDefaultTask+0x88c>)
 8003f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2301      	movs	r3, #1
 8003f44:	4aae      	ldr	r2, [pc, #696]	@ (8004200 <StartDefaultTask+0x890>)
 8003f46:	48af      	ldr	r0, [pc, #700]	@ (8004204 <StartDefaultTask+0x894>)
 8003f48:	f002 fc5a 	bl	8006800 <SPIF_ReadSector>
			str[i] = read[0];
 8003f4c:	4bac      	ldr	r3, [pc, #688]	@ (8004200 <StartDefaultTask+0x890>)
 8003f4e:	7819      	ldrb	r1, [r3, #0]
 8003f50:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8003f54:	f5a3 72ae 	sub.w	r2, r3, #348	@ 0x15c
 8003f58:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003f5c:	4413      	add	r3, r2
 8003f5e:	460a      	mov	r2, r1
 8003f60:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003f62:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003f66:	3301      	adds	r3, #1
 8003f68:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003f6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003f70:	2b06      	cmp	r3, #6
 8003f72:	dddd      	ble.n	8003f30 <StartDefaultTask+0x5c0>
		  }
		  str[7] = 0;
 8003f74:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8003f78:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	71da      	strb	r2, [r3, #7]
		}
//		float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
		SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8003f80:	4b9d      	ldr	r3, [pc, #628]	@ (80041f8 <StartDefaultTask+0x888>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a9d      	ldr	r2, [pc, #628]	@ (80041fc <StartDefaultTask+0x88c>)
 8003f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	2307      	movs	r3, #7
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	2301      	movs	r3, #1
 8003f92:	4a9b      	ldr	r2, [pc, #620]	@ (8004200 <StartDefaultTask+0x890>)
 8003f94:	489b      	ldr	r0, [pc, #620]	@ (8004204 <StartDefaultTask+0x894>)
 8003f96:	f002 fc33 	bl	8006800 <SPIF_ReadSector>
		int val1 = read[0];
 8003f9a:	4b99      	ldr	r3, [pc, #612]	@ (8004200 <StartDefaultTask+0x890>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
		SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8003fa2:	4b95      	ldr	r3, [pc, #596]	@ (80041f8 <StartDefaultTask+0x888>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a95      	ldr	r2, [pc, #596]	@ (80041fc <StartDefaultTask+0x88c>)
 8003fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fac:	4619      	mov	r1, r3
 8003fae:	2308      	movs	r3, #8
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4a92      	ldr	r2, [pc, #584]	@ (8004200 <StartDefaultTask+0x890>)
 8003fb6:	4893      	ldr	r0, [pc, #588]	@ (8004204 <StartDefaultTask+0x894>)
 8003fb8:	f002 fc22 	bl	8006800 <SPIF_ReadSector>
		int val2 = read[0];
 8003fbc:	4b90      	ldr	r3, [pc, #576]	@ (8004200 <StartDefaultTask+0x890>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
		float store = val1 + (.025 * val2);
 8003fc4:	f8d7 0168 	ldr.w	r0, [r7, #360]	@ 0x168
 8003fc8:	f7fc fa8c 	bl	80004e4 <__aeabi_i2d>
 8003fcc:	4604      	mov	r4, r0
 8003fce:	460d      	mov	r5, r1
 8003fd0:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8003fd4:	f7fc fa86 	bl	80004e4 <__aeabi_i2d>
 8003fd8:	a385      	add	r3, pc, #532	@ (adr r3, 80041f0 <StartDefaultTask+0x880>)
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f7fc faeb 	bl	80005b8 <__aeabi_dmul>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	4629      	mov	r1, r5
 8003fea:	f7fc f92f 	bl	800024c <__adddf3>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f7fc fdb7 	bl	8000b68 <__aeabi_d2f>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160

//		Serial2.print("e");
//		Serial2.print(str);
//		printFloat2(store,3);
//		Serial2.println("");
		sprintf(toPrint, "%c%s%0.3f", 'e', str, store);
 8004000:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 8004004:	f7fc fa80 	bl	8000508 <__aeabi_f2d>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8004010:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8004014:	e9cd 2300 	strd	r2, r3, [sp]
 8004018:	460b      	mov	r3, r1
 800401a:	2265      	movs	r2, #101	@ 0x65
 800401c:	497a      	ldr	r1, [pc, #488]	@ (8004208 <StartDefaultTask+0x898>)
 800401e:	f007 fd25 	bl	800ba6c <siprintf>
		LCDPrint(toPrint);
 8004022:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe ffd8 	bl	8002fdc <LCDPrint>

		while (true) {
		  // Current time
		  cursor = 0;
 800402c:	4b77      	ldr	r3, [pc, #476]	@ (800420c <StartDefaultTask+0x89c>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
		  unsigned long currentTime = millis();
 8004032:	f7fd fec9 	bl	8001dc8 <millis>
 8004036:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
		  static int lastDC = 0;
		  // Read the button states
		  bool currentA = HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0;
 800403a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800403e:	4874      	ldr	r0, [pc, #464]	@ (8004210 <StartDefaultTask+0x8a0>)
 8004040:	f003 fbe0 	bl	8007804 <HAL_GPIO_ReadPin>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
		  bool currentB = HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0;
 8004052:	2101      	movs	r1, #1
 8004054:	486f      	ldr	r0, [pc, #444]	@ (8004214 <StartDefaultTask+0x8a4>)
 8004056:	f003 fbd5 	bl	8007804 <HAL_GPIO_ReadPin>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

		  while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 8004068:	e01a      	b.n	80040a0 <StartDefaultTask+0x730>
			if (currentA) {
 800406a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <StartDefaultTask+0x718>
			  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 8004072:	2101      	movs	r1, #1
 8004074:	4867      	ldr	r0, [pc, #412]	@ (8004214 <StartDefaultTask+0x8a4>)
 8004076:	f003 fbc5 	bl	8007804 <HAL_GPIO_ReadPin>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10f      	bne.n	80040a0 <StartDefaultTask+0x730>
				both = true;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
				break;
 8004086:	e01b      	b.n	80040c0 <StartDefaultTask+0x750>
			  }
			}
			else {
			  if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0) {
 8004088:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800408c:	4860      	ldr	r0, [pc, #384]	@ (8004210 <StartDefaultTask+0x8a0>)
 800408e:	f003 fbb9 	bl	8007804 <HAL_GPIO_ReadPin>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <StartDefaultTask+0x730>
				both = true;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
				break;
 800409e:	e00f      	b.n	80040c0 <StartDefaultTask+0x750>
		  while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 80040a0:	f7fd fe92 	bl	8001dc8 <millis>
 80040a4:	4602      	mov	r2, r0
 80040a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b63      	cmp	r3, #99	@ 0x63
 80040ae:	d807      	bhi.n	80040c0 <StartDefaultTask+0x750>
 80040b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1d8      	bne.n	800406a <StartDefaultTask+0x6fa>
 80040b8:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1d4      	bne.n	800406a <StartDefaultTask+0x6fa>
			  }
			}
		  }

		  if (both) {
 80040c0:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f041 8051 	bne.w	800516c <StartDefaultTask+0x17fc>
			break;
		  }
		  else if (currentB) { //select to edit
 80040ca:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8642 	beq.w	8004d58 <StartDefaultTask+0x13e8>
			if (dispCount == count && count != 16) { // EMPTY add new one
 80040d4:	4b48      	ldr	r3, [pc, #288]	@ (80041f8 <StartDefaultTask+0x888>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004218 <StartDefaultTask+0x8a8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	f040 82dc 	bne.w	800469a <StartDefaultTask+0xd2a>
 80040e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004218 <StartDefaultTask+0x8a8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	f000 82d7 	beq.w	800469a <StartDefaultTask+0xd2a>
			  add = true;
 80040ec:	4b4b      	ldr	r3, [pc, #300]	@ (800421c <StartDefaultTask+0x8ac>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
			  int dM = 118;
 80040f2:	2376      	movs	r3, #118	@ 0x76
 80040f4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
			  int dK = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
			  char dN[8] = {' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,0};
 80040fe:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004102:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004106:	4a46      	ldr	r2, [pc, #280]	@ (8004220 <StartDefaultTask+0x8b0>)
 8004108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800410c:	e883 0003 	stmia.w	r3, {r0, r1}
			  HAL_Delay(100);
 8004110:	2064      	movs	r0, #100	@ 0x64
 8004112:	f002 ff9d 	bl	8007050 <HAL_Delay>

			  if (cursor < 7) { // moved to a char
 8004116:	4b3d      	ldr	r3, [pc, #244]	@ (800420c <StartDefaultTask+0x89c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b06      	cmp	r3, #6
 800411c:	dc2b      	bgt.n	8004176 <StartDefaultTask+0x806>
				if (dN[cursor] == ' ') {
 800411e:	4b3b      	ldr	r3, [pc, #236]	@ (800420c <StartDefaultTask+0x89c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004126:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	2b20      	cmp	r3, #32
 800412e:	d103      	bne.n	8004138 <StartDefaultTask+0x7c8>
				  charcount = 0;
 8004130:	4b3c      	ldr	r3, [pc, #240]	@ (8004224 <StartDefaultTask+0x8b4>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e032      	b.n	800419e <StartDefaultTask+0x82e>
				}
				else if (dN[cursor] < ':') {
 8004138:	4b34      	ldr	r3, [pc, #208]	@ (800420c <StartDefaultTask+0x89c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004140:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	2b39      	cmp	r3, #57	@ 0x39
 8004148:	d80a      	bhi.n	8004160 <StartDefaultTask+0x7f0>
				  charcount = dN[cursor] - '/';
 800414a:	4b30      	ldr	r3, [pc, #192]	@ (800420c <StartDefaultTask+0x89c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004152:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8004156:	5cd3      	ldrb	r3, [r2, r3]
 8004158:	3b2f      	subs	r3, #47	@ 0x2f
 800415a:	4a32      	ldr	r2, [pc, #200]	@ (8004224 <StartDefaultTask+0x8b4>)
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e01e      	b.n	800419e <StartDefaultTask+0x82e>
				}
				else {
				  charcount = dN[cursor] - '6';
 8004160:	4b2a      	ldr	r3, [pc, #168]	@ (800420c <StartDefaultTask+0x89c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004168:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 800416c:	5cd3      	ldrb	r3, [r2, r3]
 800416e:	3b36      	subs	r3, #54	@ 0x36
 8004170:	4a2c      	ldr	r2, [pc, #176]	@ (8004224 <StartDefaultTask+0x8b4>)
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	e013      	b.n	800419e <StartDefaultTask+0x82e>
				}
			  }
			  else if (cursor == 7) {
 8004176:	4b25      	ldr	r3, [pc, #148]	@ (800420c <StartDefaultTask+0x89c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b07      	cmp	r3, #7
 800417c:	d105      	bne.n	800418a <StartDefaultTask+0x81a>
				charcount = dM - 118;
 800417e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8004182:	3b76      	subs	r3, #118	@ 0x76
 8004184:	4a27      	ldr	r2, [pc, #156]	@ (8004224 <StartDefaultTask+0x8b4>)
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	e009      	b.n	800419e <StartDefaultTask+0x82e>
			  }
			  else {
				charcount = dK / 25;
 800418a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800418e:	4a26      	ldr	r2, [pc, #152]	@ (8004228 <StartDefaultTask+0x8b8>)
 8004190:	fb82 1203 	smull	r1, r2, r2, r3
 8004194:	10d2      	asrs	r2, r2, #3
 8004196:	17db      	asrs	r3, r3, #31
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	4a22      	ldr	r2, [pc, #136]	@ (8004224 <StartDefaultTask+0x8b4>)
 800419c:	6013      	str	r3, [r2, #0]
			  }

			  if (cursor < 7) { //
 800419e:	4b1b      	ldr	r3, [pc, #108]	@ (800420c <StartDefaultTask+0x89c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b06      	cmp	r3, #6
 80041a4:	dc4f      	bgt.n	8004246 <StartDefaultTask+0x8d6>
				if (charcount == 0) {
 80041a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004224 <StartDefaultTask+0x8b4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10c      	bne.n	80041c8 <StartDefaultTask+0x858>
				  dN[cursor] = (char)(charcount+32);
 80041ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004224 <StartDefaultTask+0x8b4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	4b15      	ldr	r3, [pc, #84]	@ (800420c <StartDefaultTask+0x89c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3220      	adds	r2, #32
 80041ba:	b2d1      	uxtb	r1, r2
 80041bc:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80041c0:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 80041c4:	54d1      	strb	r1, [r2, r3]
 80041c6:	e058      	b.n	800427a <StartDefaultTask+0x90a>
				}
				else if (charcount < 11) {
 80041c8:	4b16      	ldr	r3, [pc, #88]	@ (8004224 <StartDefaultTask+0x8b4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b0a      	cmp	r3, #10
 80041ce:	dc2d      	bgt.n	800422c <StartDefaultTask+0x8bc>
				  dN[cursor] = (char)(charcount+47);
 80041d0:	4b14      	ldr	r3, [pc, #80]	@ (8004224 <StartDefaultTask+0x8b4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <StartDefaultTask+0x89c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	322f      	adds	r2, #47	@ 0x2f
 80041dc:	b2d1      	uxtb	r1, r2
 80041de:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80041e2:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 80041e6:	54d1      	strb	r1, [r2, r3]
 80041e8:	e047      	b.n	800427a <StartDefaultTask+0x90a>
 80041ea:	bf00      	nop
 80041ec:	f3af 8000 	nop.w
 80041f0:	9999999a 	.word	0x9999999a
 80041f4:	3f999999 	.word	0x3f999999
 80041f8:	20000710 	.word	0x20000710
 80041fc:	200006d0 	.word	0x200006d0
 8004200:	2000072c 	.word	0x2000072c
 8004204:	2000069c 	.word	0x2000069c
 8004208:	0800e04c 	.word	0x0800e04c
 800420c:	2000071c 	.word	0x2000071c
 8004210:	40011800 	.word	0x40011800
 8004214:	40011000 	.word	0x40011000
 8004218:	20000714 	.word	0x20000714
 800421c:	2000071a 	.word	0x2000071a
 8004220:	0800e074 	.word	0x0800e074
 8004224:	20000720 	.word	0x20000720
 8004228:	51eb851f 	.word	0x51eb851f
				}
				else {
				  dN[cursor] = (char)(charcount+54);
 800422c:	4b9a      	ldr	r3, [pc, #616]	@ (8004498 <StartDefaultTask+0xb28>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	4b9a      	ldr	r3, [pc, #616]	@ (800449c <StartDefaultTask+0xb2c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3236      	adds	r2, #54	@ 0x36
 8004238:	b2d1      	uxtb	r1, r2
 800423a:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 800423e:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8004242:	54d1      	strb	r1, [r2, r3]
 8004244:	e019      	b.n	800427a <StartDefaultTask+0x90a>
				}
			  }
			  else if (cursor == 7) { //mhz
 8004246:	4b95      	ldr	r3, [pc, #596]	@ (800449c <StartDefaultTask+0xb2c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b07      	cmp	r3, #7
 800424c:	d10c      	bne.n	8004268 <StartDefaultTask+0x8f8>
				if (charcount > 9) {
 800424e:	4b92      	ldr	r3, [pc, #584]	@ (8004498 <StartDefaultTask+0xb28>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b09      	cmp	r3, #9
 8004254:	dd02      	ble.n	800425c <StartDefaultTask+0x8ec>
				  charcount = 9;
 8004256:	4b90      	ldr	r3, [pc, #576]	@ (8004498 <StartDefaultTask+0xb28>)
 8004258:	2209      	movs	r2, #9
 800425a:	601a      	str	r2, [r3, #0]
				}
				dM = 118 + charcount;
 800425c:	4b8e      	ldr	r3, [pc, #568]	@ (8004498 <StartDefaultTask+0xb28>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3376      	adds	r3, #118	@ 0x76
 8004262:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004266:	e008      	b.n	800427a <StartDefaultTask+0x90a>
			  }
			  else {
				dK = 25 * charcount;
 8004268:	4b8b      	ldr	r3, [pc, #556]	@ (8004498 <StartDefaultTask+0xb28>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009a      	lsls	r2, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
			  }

			  float pfreq = dM + (dK * .001);
 800427a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800427e:	f7fc f931 	bl	80004e4 <__aeabi_i2d>
 8004282:	4604      	mov	r4, r0
 8004284:	460d      	mov	r5, r1
 8004286:	f8d7 01b8 	ldr.w	r0, [r7, #440]	@ 0x1b8
 800428a:	f7fc f92b 	bl	80004e4 <__aeabi_i2d>
 800428e:	a380      	add	r3, pc, #512	@ (adr r3, 8004490 <StartDefaultTask+0xb20>)
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f7fc f990 	bl	80005b8 <__aeabi_dmul>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4620      	mov	r0, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	f7fb ffd4 	bl	800024c <__adddf3>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4610      	mov	r0, r2
 80042aa:	4619      	mov	r1, r3
 80042ac:	f7fc fc5c 	bl	8000b68 <__aeabi_d2f>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
//			  Serial2.print("a");
//			  Serial2.print(cursor);
//			  Serial2.print(dN);
//			  printFloat2(pfreq,3);
//			  Serial2.println("");
			  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 80042b6:	4b79      	ldr	r3, [pc, #484]	@ (800449c <StartDefaultTask+0xb2c>)
 80042b8:	681c      	ldr	r4, [r3, #0]
 80042ba:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 80042be:	f7fc f923 	bl	8000508 <__aeabi_f2d>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80042ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042ce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	4623      	mov	r3, r4
 80042d6:	2261      	movs	r2, #97	@ 0x61
 80042d8:	4971      	ldr	r1, [pc, #452]	@ (80044a0 <StartDefaultTask+0xb30>)
 80042da:	f007 fbc7 	bl	800ba6c <siprintf>
			  LCDPrint(toPrint);
 80042de:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fe7a 	bl	8002fdc <LCDPrint>

			  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press
 80042e8:	e129      	b.n	800453e <StartDefaultTask+0xbce>
				static int last_cursor = 0;
				static int last_cc = 0;
				if (last_cc != charcount) { // change the actual values of dN dM and dK, incrementing values
 80042ea:	4b6e      	ldr	r3, [pc, #440]	@ (80044a4 <StartDefaultTask+0xb34>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004498 <StartDefaultTask+0xb28>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	f000 8089 	beq.w	800440a <StartDefaultTask+0xa9a>
				  if (cursor < 7) { //
 80042f8:	4b68      	ldr	r3, [pc, #416]	@ (800449c <StartDefaultTask+0xb2c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b06      	cmp	r3, #6
 80042fe:	dc2e      	bgt.n	800435e <StartDefaultTask+0x9ee>
					if (charcount == 0) {
 8004300:	4b65      	ldr	r3, [pc, #404]	@ (8004498 <StartDefaultTask+0xb28>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10c      	bne.n	8004322 <StartDefaultTask+0x9b2>
					  dN[cursor] = (char)(charcount+32);
 8004308:	4b63      	ldr	r3, [pc, #396]	@ (8004498 <StartDefaultTask+0xb28>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4b63      	ldr	r3, [pc, #396]	@ (800449c <StartDefaultTask+0xb2c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3220      	adds	r2, #32
 8004314:	b2d1      	uxtb	r1, r2
 8004316:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 800431a:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 800431e:	54d1      	strb	r1, [r2, r3]
 8004320:	e037      	b.n	8004392 <StartDefaultTask+0xa22>
					}
					else if (charcount < 11) {
 8004322:	4b5d      	ldr	r3, [pc, #372]	@ (8004498 <StartDefaultTask+0xb28>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b0a      	cmp	r3, #10
 8004328:	dc0c      	bgt.n	8004344 <StartDefaultTask+0x9d4>
					  dN[cursor] = (char)(charcount+47);
 800432a:	4b5b      	ldr	r3, [pc, #364]	@ (8004498 <StartDefaultTask+0xb28>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	4b5a      	ldr	r3, [pc, #360]	@ (800449c <StartDefaultTask+0xb2c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	322f      	adds	r2, #47	@ 0x2f
 8004336:	b2d1      	uxtb	r1, r2
 8004338:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 800433c:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8004340:	54d1      	strb	r1, [r2, r3]
 8004342:	e026      	b.n	8004392 <StartDefaultTask+0xa22>
					}
					else {
					  dN[cursor] = (char)(charcount+54);
 8004344:	4b54      	ldr	r3, [pc, #336]	@ (8004498 <StartDefaultTask+0xb28>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	4b54      	ldr	r3, [pc, #336]	@ (800449c <StartDefaultTask+0xb2c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3236      	adds	r2, #54	@ 0x36
 8004350:	b2d1      	uxtb	r1, r2
 8004352:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004356:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 800435a:	54d1      	strb	r1, [r2, r3]
 800435c:	e019      	b.n	8004392 <StartDefaultTask+0xa22>
					}
				  }
				  else if (cursor == 7) { //mhz
 800435e:	4b4f      	ldr	r3, [pc, #316]	@ (800449c <StartDefaultTask+0xb2c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b07      	cmp	r3, #7
 8004364:	d10c      	bne.n	8004380 <StartDefaultTask+0xa10>
					if (charcount > 18) {
 8004366:	4b4c      	ldr	r3, [pc, #304]	@ (8004498 <StartDefaultTask+0xb28>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b12      	cmp	r3, #18
 800436c:	dd02      	ble.n	8004374 <StartDefaultTask+0xa04>
					  charcount = 18;
 800436e:	4b4a      	ldr	r3, [pc, #296]	@ (8004498 <StartDefaultTask+0xb28>)
 8004370:	2212      	movs	r2, #18
 8004372:	601a      	str	r2, [r3, #0]
					}
					dM = 118 + charcount;
 8004374:	4b48      	ldr	r3, [pc, #288]	@ (8004498 <StartDefaultTask+0xb28>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3376      	adds	r3, #118	@ 0x76
 800437a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800437e:	e008      	b.n	8004392 <StartDefaultTask+0xa22>
				  }
				  else {
					dK = 25 * charcount;
 8004380:	4b45      	ldr	r3, [pc, #276]	@ (8004498 <StartDefaultTask+0xb28>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009a      	lsls	r2, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
//				  Serial2.print("a");
//				  Serial2.print(cursor);
//				  Serial2.print(dN);
//				  printFloat2(pfreq,3);
//				  Serial2.println("");
				  float pfreq = dM + (dK * .001);
 8004392:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8004396:	f7fc f8a5 	bl	80004e4 <__aeabi_i2d>
 800439a:	4604      	mov	r4, r0
 800439c:	460d      	mov	r5, r1
 800439e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	@ 0x1b8
 80043a2:	f7fc f89f 	bl	80004e4 <__aeabi_i2d>
 80043a6:	a33a      	add	r3, pc, #232	@ (adr r3, 8004490 <StartDefaultTask+0xb20>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f7fc f904 	bl	80005b8 <__aeabi_dmul>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fb ff48 	bl	800024c <__adddf3>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	f7fc fbd0 	bl	8000b68 <__aeabi_d2f>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
				  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 80043ce:	4b33      	ldr	r3, [pc, #204]	@ (800449c <StartDefaultTask+0xb2c>)
 80043d0:	681c      	ldr	r4, [r3, #0]
 80043d2:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80043d6:	f7fc f897 	bl	8000508 <__aeabi_f2d>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80043e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	4623      	mov	r3, r4
 80043ee:	2261      	movs	r2, #97	@ 0x61
 80043f0:	492b      	ldr	r1, [pc, #172]	@ (80044a0 <StartDefaultTask+0xb30>)
 80043f2:	f007 fb3b 	bl	800ba6c <siprintf>
				  LCDPrint(toPrint);
 80043f6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fdee 	bl	8002fdc <LCDPrint>
				  last_cc = charcount;
 8004400:	4b25      	ldr	r3, [pc, #148]	@ (8004498 <StartDefaultTask+0xb28>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a27      	ldr	r2, [pc, #156]	@ (80044a4 <StartDefaultTask+0xb34>)
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	e099      	b.n	800453e <StartDefaultTask+0xbce>
				} ///////// case 1
				else if (last_cursor != cursor) { // change the value of charcount based on where we are
 800440a:	4b27      	ldr	r3, [pc, #156]	@ (80044a8 <StartDefaultTask+0xb38>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b23      	ldr	r3, [pc, #140]	@ (800449c <StartDefaultTask+0xb2c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	f000 8093 	beq.w	800453e <StartDefaultTask+0xbce>
				  if (cursor < 7) { // moved to a char
 8004418:	4b20      	ldr	r3, [pc, #128]	@ (800449c <StartDefaultTask+0xb2c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b06      	cmp	r3, #6
 800441e:	dc2b      	bgt.n	8004478 <StartDefaultTask+0xb08>
					if (dN[cursor] == ' ') {
 8004420:	4b1e      	ldr	r3, [pc, #120]	@ (800449c <StartDefaultTask+0xb2c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004428:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 800442c:	5cd3      	ldrb	r3, [r2, r3]
 800442e:	2b20      	cmp	r3, #32
 8004430:	d103      	bne.n	800443a <StartDefaultTask+0xaca>
					  charcount = 0;
 8004432:	4b19      	ldr	r3, [pc, #100]	@ (8004498 <StartDefaultTask+0xb28>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e042      	b.n	80044c0 <StartDefaultTask+0xb50>
					}
					else if (dN[cursor] < ':') {
 800443a:	4b18      	ldr	r3, [pc, #96]	@ (800449c <StartDefaultTask+0xb2c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004442:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8004446:	5cd3      	ldrb	r3, [r2, r3]
 8004448:	2b39      	cmp	r3, #57	@ 0x39
 800444a:	d80a      	bhi.n	8004462 <StartDefaultTask+0xaf2>
					  charcount = dN[cursor] - '/';
 800444c:	4b13      	ldr	r3, [pc, #76]	@ (800449c <StartDefaultTask+0xb2c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004454:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8004458:	5cd3      	ldrb	r3, [r2, r3]
 800445a:	3b2f      	subs	r3, #47	@ 0x2f
 800445c:	4a0e      	ldr	r2, [pc, #56]	@ (8004498 <StartDefaultTask+0xb28>)
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e02e      	b.n	80044c0 <StartDefaultTask+0xb50>
					}
					else {
					  charcount = dN[cursor] - '6';
 8004462:	4b0e      	ldr	r3, [pc, #56]	@ (800449c <StartDefaultTask+0xb2c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 800446a:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	3b36      	subs	r3, #54	@ 0x36
 8004472:	4a09      	ldr	r2, [pc, #36]	@ (8004498 <StartDefaultTask+0xb28>)
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e023      	b.n	80044c0 <StartDefaultTask+0xb50>
					}
				  }
				  else if (cursor == 7) {
 8004478:	4b08      	ldr	r3, [pc, #32]	@ (800449c <StartDefaultTask+0xb2c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b07      	cmp	r3, #7
 800447e:	d115      	bne.n	80044ac <StartDefaultTask+0xb3c>
					charcount = dM - 118;
 8004480:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8004484:	3b76      	subs	r3, #118	@ 0x76
 8004486:	4a04      	ldr	r2, [pc, #16]	@ (8004498 <StartDefaultTask+0xb28>)
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e019      	b.n	80044c0 <StartDefaultTask+0xb50>
 800448c:	f3af 8000 	nop.w
 8004490:	d2f1a9fc 	.word	0xd2f1a9fc
 8004494:	3f50624d 	.word	0x3f50624d
 8004498:	20000720 	.word	0x20000720
 800449c:	2000071c 	.word	0x2000071c
 80044a0:	0800e058 	.word	0x0800e058
 80044a4:	20000774 	.word	0x20000774
 80044a8:	20000778 	.word	0x20000778
				  }
				  else {
					charcount = dK / 25;
 80044ac:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80044b0:	4abf      	ldr	r2, [pc, #764]	@ (80047b0 <StartDefaultTask+0xe40>)
 80044b2:	fb82 1203 	smull	r1, r2, r2, r3
 80044b6:	10d2      	asrs	r2, r2, #3
 80044b8:	17db      	asrs	r3, r3, #31
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	4abd      	ldr	r2, [pc, #756]	@ (80047b4 <StartDefaultTask+0xe44>)
 80044be:	6013      	str	r3, [r2, #0]
//				  Serial2.print("a");
//				  Serial2.print(cursor);
//				  Serial2.print(dN);
//				  printFloat2(pfreq,3);
//				  Serial2.println("");
				  float pfreq = dM + (dK * .001);
 80044c0:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80044c4:	f7fc f80e 	bl	80004e4 <__aeabi_i2d>
 80044c8:	4604      	mov	r4, r0
 80044ca:	460d      	mov	r5, r1
 80044cc:	f8d7 01b8 	ldr.w	r0, [r7, #440]	@ 0x1b8
 80044d0:	f7fc f808 	bl	80004e4 <__aeabi_i2d>
 80044d4:	a3b2      	add	r3, pc, #712	@ (adr r3, 80047a0 <StartDefaultTask+0xe30>)
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f7fc f86d 	bl	80005b8 <__aeabi_dmul>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4620      	mov	r0, r4
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7fb feb1 	bl	800024c <__adddf3>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4610      	mov	r0, r2
 80044f0:	4619      	mov	r1, r3
 80044f2:	f7fc fb39 	bl	8000b68 <__aeabi_d2f>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
				  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 80044fc:	4bae      	ldr	r3, [pc, #696]	@ (80047b8 <StartDefaultTask+0xe48>)
 80044fe:	681c      	ldr	r4, [r3, #0]
 8004500:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8004504:	f7fc f800 	bl	8000508 <__aeabi_f2d>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8004510:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004514:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	4623      	mov	r3, r4
 800451c:	2261      	movs	r2, #97	@ 0x61
 800451e:	49a7      	ldr	r1, [pc, #668]	@ (80047bc <StartDefaultTask+0xe4c>)
 8004520:	f007 faa4 	bl	800ba6c <siprintf>
				  LCDPrint(toPrint);
 8004524:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004528:	4618      	mov	r0, r3
 800452a:	f7fe fd57 	bl	8002fdc <LCDPrint>
				  last_cc = charcount;
 800452e:	4ba1      	ldr	r3, [pc, #644]	@ (80047b4 <StartDefaultTask+0xe44>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4aa3      	ldr	r2, [pc, #652]	@ (80047c0 <StartDefaultTask+0xe50>)
 8004534:	6013      	str	r3, [r2, #0]
				  last_cursor = cursor;
 8004536:	4ba0      	ldr	r3, [pc, #640]	@ (80047b8 <StartDefaultTask+0xe48>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4aa2      	ldr	r2, [pc, #648]	@ (80047c4 <StartDefaultTask+0xe54>)
 800453c:	6013      	str	r3, [r2, #0]
			  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press
 800453e:	2101      	movs	r1, #1
 8004540:	48a1      	ldr	r0, [pc, #644]	@ (80047c8 <StartDefaultTask+0xe58>)
 8004542:	f003 f95f 	bl	8007804 <HAL_GPIO_ReadPin>
 8004546:	4603      	mov	r3, r0
 8004548:	2b01      	cmp	r3, #1
 800454a:	f43f aece 	beq.w	80042ea <StartDefaultTask+0x97a>
				} ///////// case 2
			  }
			  //Some functionality to add dN,dM,and dK to the eeprom
			  toAdd(dN,dM,dK);
 800454e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004552:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004556:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 800455a:	4618      	mov	r0, r3
 800455c:	f7fd fa5e 	bl	8001a1c <toAdd>
			  HAL_Delay(500);
 8004560:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004564:	f002 fd74 	bl	8007050 <HAL_Delay>
			  add = false;
 8004568:	4b98      	ldr	r3, [pc, #608]	@ (80047cc <StartDefaultTask+0xe5c>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
			  pause = false;
 800456e:	4b98      	ldr	r3, [pc, #608]	@ (80047d0 <StartDefaultTask+0xe60>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
			  toDisplay();
 8004574:	f7fd fa10 	bl	8001998 <toDisplay>

			  char str[8];
			  if (dispCount == count) {
 8004578:	4b96      	ldr	r3, [pc, #600]	@ (80047d4 <StartDefaultTask+0xe64>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b96      	ldr	r3, [pc, #600]	@ (80047d8 <StartDefaultTask+0xe68>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d106      	bne.n	8004592 <StartDefaultTask+0xc22>
				str[0] = ':'; //EMPTY
 8004584:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004588:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800458c:	223a      	movs	r2, #58	@ 0x3a
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e02b      	b.n	80045ea <StartDefaultTask+0xc7a>
			  }
			  else {
				for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8004598:	e01d      	b.n	80045d6 <StartDefaultTask+0xc66>
//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 800459a:	4b8e      	ldr	r3, [pc, #568]	@ (80047d4 <StartDefaultTask+0xe64>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a8f      	ldr	r2, [pc, #572]	@ (80047dc <StartDefaultTask+0xe6c>)
 80045a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a4:	4619      	mov	r1, r3
 80045a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2301      	movs	r3, #1
 80045ae:	4a8c      	ldr	r2, [pc, #560]	@ (80047e0 <StartDefaultTask+0xe70>)
 80045b0:	488c      	ldr	r0, [pc, #560]	@ (80047e4 <StartDefaultTask+0xe74>)
 80045b2:	f002 f925 	bl	8006800 <SPIF_ReadSector>
				  str[i] = read[0];
 80045b6:	4b8a      	ldr	r3, [pc, #552]	@ (80047e0 <StartDefaultTask+0xe70>)
 80045b8:	7819      	ldrb	r1, [r3, #0]
 80045ba:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80045be:	f5a3 72b6 	sub.w	r2, r3, #364	@ 0x16c
 80045c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80045c6:	4413      	add	r3, r2
 80045c8:	460a      	mov	r2, r1
 80045ca:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80045cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80045d0:	3301      	adds	r3, #1
 80045d2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80045d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80045da:	2b06      	cmp	r3, #6
 80045dc:	dddd      	ble.n	800459a <StartDefaultTask+0xc2a>
				}
				str[7] = 0;
 80045de:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80045e2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80045e6:	2200      	movs	r2, #0
 80045e8:	71da      	strb	r2, [r3, #7]
			  }
//			  float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
			  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 80045ea:	4b7a      	ldr	r3, [pc, #488]	@ (80047d4 <StartDefaultTask+0xe64>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a7b      	ldr	r2, [pc, #492]	@ (80047dc <StartDefaultTask+0xe6c>)
 80045f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f4:	4619      	mov	r1, r3
 80045f6:	2307      	movs	r3, #7
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	2301      	movs	r3, #1
 80045fc:	4a78      	ldr	r2, [pc, #480]	@ (80047e0 <StartDefaultTask+0xe70>)
 80045fe:	4879      	ldr	r0, [pc, #484]	@ (80047e4 <StartDefaultTask+0xe74>)
 8004600:	f002 f8fe 	bl	8006800 <SPIF_ReadSector>
		      int val1 = read[0];
 8004604:	4b76      	ldr	r3, [pc, #472]	@ (80047e0 <StartDefaultTask+0xe70>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 800460c:	4b71      	ldr	r3, [pc, #452]	@ (80047d4 <StartDefaultTask+0xe64>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a72      	ldr	r2, [pc, #456]	@ (80047dc <StartDefaultTask+0xe6c>)
 8004612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004616:	4619      	mov	r1, r3
 8004618:	2308      	movs	r3, #8
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2301      	movs	r3, #1
 800461e:	4a70      	ldr	r2, [pc, #448]	@ (80047e0 <StartDefaultTask+0xe70>)
 8004620:	4870      	ldr	r0, [pc, #448]	@ (80047e4 <StartDefaultTask+0xe74>)
 8004622:	f002 f8ed 	bl	8006800 <SPIF_ReadSector>
			  int val2 = read[0];
 8004626:	4b6e      	ldr	r3, [pc, #440]	@ (80047e0 <StartDefaultTask+0xe70>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
			  float store = val1 + (.025 * val2);
 800462e:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8004632:	f7fb ff57 	bl	80004e4 <__aeabi_i2d>
 8004636:	4604      	mov	r4, r0
 8004638:	460d      	mov	r5, r1
 800463a:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 800463e:	f7fb ff51 	bl	80004e4 <__aeabi_i2d>
 8004642:	a359      	add	r3, pc, #356	@ (adr r3, 80047a8 <StartDefaultTask+0xe38>)
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f7fb ffb6 	bl	80005b8 <__aeabi_dmul>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4620      	mov	r0, r4
 8004652:	4629      	mov	r1, r5
 8004654:	f7fb fdfa 	bl	800024c <__adddf3>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	f7fc fa82 	bl	8000b68 <__aeabi_d2f>
 8004664:	4603      	mov	r3, r0
 8004666:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
//			  Serial2.print("e");
//			  Serial2.print(str);
//			  Serial.print(str);
//			  printFloat2(store,3);
//			  Serial2.println("");
			  sprintf(toPrint, "%c%s%0.3f",'e',str,store);
 800466a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800466e:	f7fb ff4b 	bl	8000508 <__aeabi_f2d>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800467a:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 800467e:	e9cd 2300 	strd	r2, r3, [sp]
 8004682:	460b      	mov	r3, r1
 8004684:	2265      	movs	r2, #101	@ 0x65
 8004686:	4958      	ldr	r1, [pc, #352]	@ (80047e8 <StartDefaultTask+0xe78>)
 8004688:	f007 f9f0 	bl	800ba6c <siprintf>
			  LCDPrint(toPrint);
 800468c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fca3 	bl	8002fdc <LCDPrint>
			if (dispCount == count && count != 16) { // EMPTY add new one
 8004696:	f000 bcad 	b.w	8004ff4 <StartDefaultTask+0x1684>
			}
			else { // regular edit 2
			  add = true;
 800469a:	4b4c      	ldr	r3, [pc, #304]	@ (80047cc <StartDefaultTask+0xe5c>)
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
//			  int dM = EEPROM.read(eepDisplay[dispCount] + 7);
//			  int dK = EEPROM.read(eepDisplay[dispCount] + 8) * 25;
			  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 80046a0:	4b4c      	ldr	r3, [pc, #304]	@ (80047d4 <StartDefaultTask+0xe64>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a4d      	ldr	r2, [pc, #308]	@ (80047dc <StartDefaultTask+0xe6c>)
 80046a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046aa:	4619      	mov	r1, r3
 80046ac:	2307      	movs	r3, #7
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	2301      	movs	r3, #1
 80046b2:	4a4b      	ldr	r2, [pc, #300]	@ (80047e0 <StartDefaultTask+0xe70>)
 80046b4:	484b      	ldr	r0, [pc, #300]	@ (80047e4 <StartDefaultTask+0xe74>)
 80046b6:	f002 f8a3 	bl	8006800 <SPIF_ReadSector>
			  int dM = read[0];
 80046ba:	4b49      	ldr	r3, [pc, #292]	@ (80047e0 <StartDefaultTask+0xe70>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
			  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 80046c2:	4b44      	ldr	r3, [pc, #272]	@ (80047d4 <StartDefaultTask+0xe64>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a45      	ldr	r2, [pc, #276]	@ (80047dc <StartDefaultTask+0xe6c>)
 80046c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046cc:	4619      	mov	r1, r3
 80046ce:	2308      	movs	r3, #8
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2301      	movs	r3, #1
 80046d4:	4a42      	ldr	r2, [pc, #264]	@ (80047e0 <StartDefaultTask+0xe70>)
 80046d6:	4843      	ldr	r0, [pc, #268]	@ (80047e4 <StartDefaultTask+0xe74>)
 80046d8:	f002 f892 	bl	8006800 <SPIF_ReadSector>
			  int dK = read[0] * 25;
 80046dc:	4b40      	ldr	r3, [pc, #256]	@ (80047e0 <StartDefaultTask+0xe70>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	009a      	lsls	r2, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
			  char dN[8] = {' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,0};
 80046f0:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80046f4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80046f8:	4a3c      	ldr	r2, [pc, #240]	@ (80047ec <StartDefaultTask+0xe7c>)
 80046fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046fe:	e883 0003 	stmia.w	r3, {r0, r1}
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004702:	2300      	movs	r3, #0
 8004704:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004708:	e01d      	b.n	8004746 <StartDefaultTask+0xdd6>
//				dN[i] = EEPROM.read(eepDisplay[dispCount] + i);
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 800470a:	4b32      	ldr	r3, [pc, #200]	@ (80047d4 <StartDefaultTask+0xe64>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a33      	ldr	r2, [pc, #204]	@ (80047dc <StartDefaultTask+0xe6c>)
 8004710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004714:	4619      	mov	r1, r3
 8004716:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2301      	movs	r3, #1
 800471e:	4a30      	ldr	r2, [pc, #192]	@ (80047e0 <StartDefaultTask+0xe70>)
 8004720:	4830      	ldr	r0, [pc, #192]	@ (80047e4 <StartDefaultTask+0xe74>)
 8004722:	f002 f86d 	bl	8006800 <SPIF_ReadSector>
				dN[i] = read[0];
 8004726:	4b2e      	ldr	r3, [pc, #184]	@ (80047e0 <StartDefaultTask+0xe70>)
 8004728:	7819      	ldrb	r1, [r3, #0]
 800472a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800472e:	f5a3 72ba 	sub.w	r2, r3, #372	@ 0x174
 8004732:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004736:	4413      	add	r3, r2
 8004738:	460a      	mov	r2, r1
 800473a:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800473c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004740:	3301      	adds	r3, #1
 8004742:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004746:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800474a:	2b06      	cmp	r3, #6
 800474c:	dddd      	ble.n	800470a <StartDefaultTask+0xd9a>
			  }
			  HAL_Delay(100);
 800474e:	2064      	movs	r0, #100	@ 0x64
 8004750:	f002 fc7e 	bl	8007050 <HAL_Delay>

			  if (cursor < 7) { // moved to a char
 8004754:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <StartDefaultTask+0xe48>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b06      	cmp	r3, #6
 800475a:	dc53      	bgt.n	8004804 <StartDefaultTask+0xe94>
				if (dN[cursor] == ' ') {
 800475c:	4b16      	ldr	r3, [pc, #88]	@ (80047b8 <StartDefaultTask+0xe48>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004764:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004768:	5cd3      	ldrb	r3, [r2, r3]
 800476a:	2b20      	cmp	r3, #32
 800476c:	d103      	bne.n	8004776 <StartDefaultTask+0xe06>
				  charcount = 0;
 800476e:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <StartDefaultTask+0xe44>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e046      	b.n	8004804 <StartDefaultTask+0xe94>
				}
				else if (dN[cursor] < ':') {
 8004776:	4b10      	ldr	r3, [pc, #64]	@ (80047b8 <StartDefaultTask+0xe48>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 800477e:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004782:	5cd3      	ldrb	r3, [r2, r3]
 8004784:	2b39      	cmp	r3, #57	@ 0x39
 8004786:	d833      	bhi.n	80047f0 <StartDefaultTask+0xe80>
				  charcount = dN[cursor] - '/';
 8004788:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <StartDefaultTask+0xe48>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004790:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004794:	5cd3      	ldrb	r3, [r2, r3]
 8004796:	3b2f      	subs	r3, #47	@ 0x2f
 8004798:	4a06      	ldr	r2, [pc, #24]	@ (80047b4 <StartDefaultTask+0xe44>)
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e032      	b.n	8004804 <StartDefaultTask+0xe94>
 800479e:	bf00      	nop
 80047a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80047a4:	3f50624d 	.word	0x3f50624d
 80047a8:	9999999a 	.word	0x9999999a
 80047ac:	3f999999 	.word	0x3f999999
 80047b0:	51eb851f 	.word	0x51eb851f
 80047b4:	20000720 	.word	0x20000720
 80047b8:	2000071c 	.word	0x2000071c
 80047bc:	0800e058 	.word	0x0800e058
 80047c0:	20000774 	.word	0x20000774
 80047c4:	20000778 	.word	0x20000778
 80047c8:	40011000 	.word	0x40011000
 80047cc:	2000071a 	.word	0x2000071a
 80047d0:	20000010 	.word	0x20000010
 80047d4:	20000710 	.word	0x20000710
 80047d8:	20000714 	.word	0x20000714
 80047dc:	200006d0 	.word	0x200006d0
 80047e0:	2000072c 	.word	0x2000072c
 80047e4:	2000069c 	.word	0x2000069c
 80047e8:	0800e04c 	.word	0x0800e04c
 80047ec:	0800e074 	.word	0x0800e074
				}
				else {
				  charcount = dN[cursor] - '6';
 80047f0:	4ba7      	ldr	r3, [pc, #668]	@ (8004a90 <StartDefaultTask+0x1120>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80047f8:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 80047fc:	5cd3      	ldrb	r3, [r2, r3]
 80047fe:	3b36      	subs	r3, #54	@ 0x36
 8004800:	4aa4      	ldr	r2, [pc, #656]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004802:	6013      	str	r3, [r2, #0]
				}
			  }

			  if (cursor < 7) { //
 8004804:	4ba2      	ldr	r3, [pc, #648]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b06      	cmp	r3, #6
 800480a:	dc2e      	bgt.n	800486a <StartDefaultTask+0xefa>
				if (charcount == 0) {
 800480c:	4ba1      	ldr	r3, [pc, #644]	@ (8004a94 <StartDefaultTask+0x1124>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10c      	bne.n	800482e <StartDefaultTask+0xebe>
				  dN[cursor] = (char)(charcount+32);
 8004814:	4b9f      	ldr	r3, [pc, #636]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b9d      	ldr	r3, [pc, #628]	@ (8004a90 <StartDefaultTask+0x1120>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3220      	adds	r2, #32
 8004820:	b2d1      	uxtb	r1, r2
 8004822:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004826:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800482a:	54d1      	strb	r1, [r2, r3]
 800482c:	e037      	b.n	800489e <StartDefaultTask+0xf2e>
				}
				else if (charcount < 11) {
 800482e:	4b99      	ldr	r3, [pc, #612]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b0a      	cmp	r3, #10
 8004834:	dc0c      	bgt.n	8004850 <StartDefaultTask+0xee0>
				  dN[cursor] = (char)(charcount+47);
 8004836:	4b97      	ldr	r3, [pc, #604]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	4b94      	ldr	r3, [pc, #592]	@ (8004a90 <StartDefaultTask+0x1120>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	322f      	adds	r2, #47	@ 0x2f
 8004842:	b2d1      	uxtb	r1, r2
 8004844:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004848:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800484c:	54d1      	strb	r1, [r2, r3]
 800484e:	e026      	b.n	800489e <StartDefaultTask+0xf2e>
				}
				else {
				  dN[cursor] = (char)(charcount+54);
 8004850:	4b90      	ldr	r3, [pc, #576]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	4b8e      	ldr	r3, [pc, #568]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3236      	adds	r2, #54	@ 0x36
 800485c:	b2d1      	uxtb	r1, r2
 800485e:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004862:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004866:	54d1      	strb	r1, [r2, r3]
 8004868:	e019      	b.n	800489e <StartDefaultTask+0xf2e>
				}
			  }
			  else if (cursor == 7) { //mhz
 800486a:	4b89      	ldr	r3, [pc, #548]	@ (8004a90 <StartDefaultTask+0x1120>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b07      	cmp	r3, #7
 8004870:	d10c      	bne.n	800488c <StartDefaultTask+0xf1c>
				if (charcount > 9) {
 8004872:	4b88      	ldr	r3, [pc, #544]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b09      	cmp	r3, #9
 8004878:	dd02      	ble.n	8004880 <StartDefaultTask+0xf10>
				  charcount = 9;
 800487a:	4b86      	ldr	r3, [pc, #536]	@ (8004a94 <StartDefaultTask+0x1124>)
 800487c:	2209      	movs	r2, #9
 800487e:	601a      	str	r2, [r3, #0]
				}
				dM = 118 + charcount;
 8004880:	4b84      	ldr	r3, [pc, #528]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3376      	adds	r3, #118	@ 0x76
 8004886:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800488a:	e008      	b.n	800489e <StartDefaultTask+0xf2e>
			  }
			  else {
				dK = 25 * charcount;
 800488c:	4b81      	ldr	r3, [pc, #516]	@ (8004a94 <StartDefaultTask+0x1124>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009a      	lsls	r2, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
//			  Serial2.print("a");
//			  Serial2.print(cursor);
//			  Serial2.print(dN);
//			  printFloat2(pfreq,3);
//			  Serial2.println("");
			  float pfreq = dM + (dK * .001);
 800489e:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 80048a2:	f7fb fe1f 	bl	80004e4 <__aeabi_i2d>
 80048a6:	4604      	mov	r4, r0
 80048a8:	460d      	mov	r5, r1
 80048aa:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 80048ae:	f7fb fe19 	bl	80004e4 <__aeabi_i2d>
 80048b2:	a375      	add	r3, pc, #468	@ (adr r3, 8004a88 <StartDefaultTask+0x1118>)
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f7fb fe7e 	bl	80005b8 <__aeabi_dmul>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4620      	mov	r0, r4
 80048c2:	4629      	mov	r1, r5
 80048c4:	f7fb fcc2 	bl	800024c <__adddf3>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7fc f94a 	bl	8000b68 <__aeabi_d2f>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 80048da:	4b6d      	ldr	r3, [pc, #436]	@ (8004a90 <StartDefaultTask+0x1120>)
 80048dc:	681c      	ldr	r4, [r3, #0]
 80048de:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80048e2:	f7fb fe11 	bl	8000508 <__aeabi_f2d>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80048ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4623      	mov	r3, r4
 80048fa:	2261      	movs	r2, #97	@ 0x61
 80048fc:	4966      	ldr	r1, [pc, #408]	@ (8004a98 <StartDefaultTask+0x1128>)
 80048fe:	f007 f8b5 	bl	800ba6c <siprintf>
			  LCDPrint(toPrint);
 8004902:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe fb68 	bl	8002fdc <LCDPrint>

			  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press
 800490c:	e128      	b.n	8004b60 <StartDefaultTask+0x11f0>
				static int last_cursor = 0;
				static int last_cc = 0;
				if (last_cc != charcount) { // change the actual values of dN dM and dK, incrementing values WORKS
 800490e:	4b63      	ldr	r3, [pc, #396]	@ (8004a9c <StartDefaultTask+0x112c>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b60      	ldr	r3, [pc, #384]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	f000 8089 	beq.w	8004a2e <StartDefaultTask+0x10be>
				  if (cursor < 7) { //
 800491c:	4b5c      	ldr	r3, [pc, #368]	@ (8004a90 <StartDefaultTask+0x1120>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b06      	cmp	r3, #6
 8004922:	dc2e      	bgt.n	8004982 <StartDefaultTask+0x1012>
					if (charcount == 0) {
 8004924:	4b5b      	ldr	r3, [pc, #364]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10c      	bne.n	8004946 <StartDefaultTask+0xfd6>
					  dN[cursor] = (char)(charcount+32);
 800492c:	4b59      	ldr	r3, [pc, #356]	@ (8004a94 <StartDefaultTask+0x1124>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4b57      	ldr	r3, [pc, #348]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3220      	adds	r2, #32
 8004938:	b2d1      	uxtb	r1, r2
 800493a:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 800493e:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004942:	54d1      	strb	r1, [r2, r3]
 8004944:	e037      	b.n	80049b6 <StartDefaultTask+0x1046>
					}
					else if (charcount < 11) {
 8004946:	4b53      	ldr	r3, [pc, #332]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b0a      	cmp	r3, #10
 800494c:	dc0c      	bgt.n	8004968 <StartDefaultTask+0xff8>
					  dN[cursor] = (char)(charcount+47);
 800494e:	4b51      	ldr	r3, [pc, #324]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	4b4e      	ldr	r3, [pc, #312]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	322f      	adds	r2, #47	@ 0x2f
 800495a:	b2d1      	uxtb	r1, r2
 800495c:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004960:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004964:	54d1      	strb	r1, [r2, r3]
 8004966:	e026      	b.n	80049b6 <StartDefaultTask+0x1046>
					}
					else {
					  dN[cursor] = (char)(charcount+54);
 8004968:	4b4a      	ldr	r3, [pc, #296]	@ (8004a94 <StartDefaultTask+0x1124>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	4b48      	ldr	r3, [pc, #288]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3236      	adds	r2, #54	@ 0x36
 8004974:	b2d1      	uxtb	r1, r2
 8004976:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 800497a:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800497e:	54d1      	strb	r1, [r2, r3]
 8004980:	e019      	b.n	80049b6 <StartDefaultTask+0x1046>
					}
				  }
				  else if (cursor == 7) { //mhz
 8004982:	4b43      	ldr	r3, [pc, #268]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b07      	cmp	r3, #7
 8004988:	d10c      	bne.n	80049a4 <StartDefaultTask+0x1034>
					if (charcount > 18) {
 800498a:	4b42      	ldr	r3, [pc, #264]	@ (8004a94 <StartDefaultTask+0x1124>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b12      	cmp	r3, #18
 8004990:	dd02      	ble.n	8004998 <StartDefaultTask+0x1028>
					  charcount = 18;
 8004992:	4b40      	ldr	r3, [pc, #256]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004994:	2212      	movs	r2, #18
 8004996:	601a      	str	r2, [r3, #0]
					}
					dM = 118 + charcount;
 8004998:	4b3e      	ldr	r3, [pc, #248]	@ (8004a94 <StartDefaultTask+0x1124>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3376      	adds	r3, #118	@ 0x76
 800499e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80049a2:	e008      	b.n	80049b6 <StartDefaultTask+0x1046>
				  }
				  else {
					dK = 25 * charcount;
 80049a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004a94 <StartDefaultTask+0x1124>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009a      	lsls	r2, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
//				  Serial2.print("a");
//				  Serial2.print(cursor);
//				  Serial2.print(dN);
//				  printFloat2(pfreq,3);
//				  Serial2.println("");
				  float pfreq = dM + (dK * .001);
 80049b6:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 80049ba:	f7fb fd93 	bl	80004e4 <__aeabi_i2d>
 80049be:	4604      	mov	r4, r0
 80049c0:	460d      	mov	r5, r1
 80049c2:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 80049c6:	f7fb fd8d 	bl	80004e4 <__aeabi_i2d>
 80049ca:	a32f      	add	r3, pc, #188	@ (adr r3, 8004a88 <StartDefaultTask+0x1118>)
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	f7fb fdf2 	bl	80005b8 <__aeabi_dmul>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4620      	mov	r0, r4
 80049da:	4629      	mov	r1, r5
 80049dc:	f7fb fc36 	bl	800024c <__adddf3>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4610      	mov	r0, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	f7fc f8be 	bl	8000b68 <__aeabi_d2f>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
				  sprintf(toPrint,"%c%d%s%0.3f",'a',cursor,dN,pfreq);
 80049f2:	4b27      	ldr	r3, [pc, #156]	@ (8004a90 <StartDefaultTask+0x1120>)
 80049f4:	681c      	ldr	r4, [r3, #0]
 80049f6:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80049fa:	f7fb fd85 	bl	8000508 <__aeabi_f2d>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8004a06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	4623      	mov	r3, r4
 8004a12:	2261      	movs	r2, #97	@ 0x61
 8004a14:	4920      	ldr	r1, [pc, #128]	@ (8004a98 <StartDefaultTask+0x1128>)
 8004a16:	f007 f829 	bl	800ba6c <siprintf>
				  LCDPrint(toPrint);
 8004a1a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fadc 	bl	8002fdc <LCDPrint>
				  last_cc = charcount;
 8004a24:	4b1b      	ldr	r3, [pc, #108]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1c      	ldr	r2, [pc, #112]	@ (8004a9c <StartDefaultTask+0x112c>)
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e098      	b.n	8004b60 <StartDefaultTask+0x11f0>
				} ///////// case 1
				else if (last_cursor != cursor) { // change the value of charcount based on where we are WORKS????
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa0 <StartDefaultTask+0x1130>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b17      	ldr	r3, [pc, #92]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	f000 8092 	beq.w	8004b60 <StartDefaultTask+0x11f0>
				  if (cursor < 7) { // moved to a char
 8004a3c:	4b14      	ldr	r3, [pc, #80]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b06      	cmp	r3, #6
 8004a42:	dc3a      	bgt.n	8004aba <StartDefaultTask+0x114a>
					if (dN[cursor] == ' ') {
 8004a44:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004a4c:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004a50:	5cd3      	ldrb	r3, [r2, r3]
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d103      	bne.n	8004a5e <StartDefaultTask+0x10ee>
					  charcount = 0;
 8004a56:	4b0f      	ldr	r3, [pc, #60]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	e041      	b.n	8004ae2 <StartDefaultTask+0x1172>
					}
					else if (dN[cursor] < ':') {
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004a66:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004a6a:	5cd3      	ldrb	r3, [r2, r3]
 8004a6c:	2b39      	cmp	r3, #57	@ 0x39
 8004a6e:	d819      	bhi.n	8004aa4 <StartDefaultTask+0x1134>
					  charcount = dN[cursor] - '/';
 8004a70:	4b07      	ldr	r3, [pc, #28]	@ (8004a90 <StartDefaultTask+0x1120>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004a78:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004a7c:	5cd3      	ldrb	r3, [r2, r3]
 8004a7e:	3b2f      	subs	r3, #47	@ 0x2f
 8004a80:	4a04      	ldr	r2, [pc, #16]	@ (8004a94 <StartDefaultTask+0x1124>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e02d      	b.n	8004ae2 <StartDefaultTask+0x1172>
 8004a86:	bf00      	nop
 8004a88:	d2f1a9fc 	.word	0xd2f1a9fc
 8004a8c:	3f50624d 	.word	0x3f50624d
 8004a90:	2000071c 	.word	0x2000071c
 8004a94:	20000720 	.word	0x20000720
 8004a98:	0800e058 	.word	0x0800e058
 8004a9c:	2000077c 	.word	0x2000077c
 8004aa0:	20000780 	.word	0x20000780
					}
					else {
					  charcount = dN[cursor] - '6';
 8004aa4:	4bbe      	ldr	r3, [pc, #760]	@ (8004da0 <StartDefaultTask+0x1430>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8004aac:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004ab0:	5cd3      	ldrb	r3, [r2, r3]
 8004ab2:	3b36      	subs	r3, #54	@ 0x36
 8004ab4:	4abb      	ldr	r2, [pc, #748]	@ (8004da4 <StartDefaultTask+0x1434>)
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e013      	b.n	8004ae2 <StartDefaultTask+0x1172>
					}
				  }
				  else if (cursor == 7) {
 8004aba:	4bb9      	ldr	r3, [pc, #740]	@ (8004da0 <StartDefaultTask+0x1430>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b07      	cmp	r3, #7
 8004ac0:	d105      	bne.n	8004ace <StartDefaultTask+0x115e>
					charcount = dM - 118;
 8004ac2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004ac6:	3b76      	subs	r3, #118	@ 0x76
 8004ac8:	4ab6      	ldr	r2, [pc, #728]	@ (8004da4 <StartDefaultTask+0x1434>)
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	e009      	b.n	8004ae2 <StartDefaultTask+0x1172>
				  }
				  else {
					charcount = dK / 25;
 8004ace:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004ad2:	4ab5      	ldr	r2, [pc, #724]	@ (8004da8 <StartDefaultTask+0x1438>)
 8004ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8004ad8:	10d2      	asrs	r2, r2, #3
 8004ada:	17db      	asrs	r3, r3, #31
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	4ab1      	ldr	r2, [pc, #708]	@ (8004da4 <StartDefaultTask+0x1434>)
 8004ae0:	6013      	str	r3, [r2, #0]
//				  Serial2.print(cursor);
//				  Serial2.print(dN);
//				  printFloat2(pfreq,3);
//				  Serial2.println("");

				  float pfreq = dM + (dK * .001);
 8004ae2:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 8004ae6:	f7fb fcfd 	bl	80004e4 <__aeabi_i2d>
 8004aea:	4604      	mov	r4, r0
 8004aec:	460d      	mov	r5, r1
 8004aee:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 8004af2:	f7fb fcf7 	bl	80004e4 <__aeabi_i2d>
 8004af6:	a3a6      	add	r3, pc, #664	@ (adr r3, 8004d90 <StartDefaultTask+0x1420>)
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fd5c 	bl	80005b8 <__aeabi_dmul>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4620      	mov	r0, r4
 8004b06:	4629      	mov	r1, r5
 8004b08:	f7fb fba0 	bl	800024c <__adddf3>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4610      	mov	r0, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	f7fc f828 	bl	8000b68 <__aeabi_d2f>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
				  sprintf(toPrint,"%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8004b1e:	4ba0      	ldr	r3, [pc, #640]	@ (8004da0 <StartDefaultTask+0x1430>)
 8004b20:	681c      	ldr	r4, [r3, #0]
 8004b22:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8004b26:	f7fb fcef 	bl	8000508 <__aeabi_f2d>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8004b32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	4623      	mov	r3, r4
 8004b3e:	2261      	movs	r2, #97	@ 0x61
 8004b40:	499a      	ldr	r1, [pc, #616]	@ (8004dac <StartDefaultTask+0x143c>)
 8004b42:	f006 ff93 	bl	800ba6c <siprintf>
				  LCDPrint(toPrint);
 8004b46:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe fa46 	bl	8002fdc <LCDPrint>
				  last_cc = charcount;
 8004b50:	4b94      	ldr	r3, [pc, #592]	@ (8004da4 <StartDefaultTask+0x1434>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a96      	ldr	r2, [pc, #600]	@ (8004db0 <StartDefaultTask+0x1440>)
 8004b56:	6013      	str	r3, [r2, #0]
				  last_cursor = cursor;
 8004b58:	4b91      	ldr	r3, [pc, #580]	@ (8004da0 <StartDefaultTask+0x1430>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a95      	ldr	r2, [pc, #596]	@ (8004db4 <StartDefaultTask+0x1444>)
 8004b5e:	6013      	str	r3, [r2, #0]
			  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press
 8004b60:	2101      	movs	r1, #1
 8004b62:	4895      	ldr	r0, [pc, #596]	@ (8004db8 <StartDefaultTask+0x1448>)
 8004b64:	f002 fe4e 	bl	8007804 <HAL_GPIO_ReadPin>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	f43f aecf 	beq.w	800490e <StartDefaultTask+0xf9e>
				} ///////// case 2
			  }
			  //update the eeprom with new values
			  SPIF_EraseSector(&spif, eepDisplay[dispCount]);
 8004b70:	4b92      	ldr	r3, [pc, #584]	@ (8004dbc <StartDefaultTask+0x144c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a92      	ldr	r2, [pc, #584]	@ (8004dc0 <StartDefaultTask+0x1450>)
 8004b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4891      	ldr	r0, [pc, #580]	@ (8004dc4 <StartDefaultTask+0x1454>)
 8004b7e:	f001 fd52 	bl	8006626 <SPIF_EraseSector>
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004b82:	2300      	movs	r3, #0
 8004b84:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004b88:	e01c      	b.n	8004bc4 <StartDefaultTask+0x1254>
//				EEPROM.update(eepDisplay[dispCount] + i, dN[i]);
				write[0] = dN[i];
 8004b8a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004b8e:	f5a3 72ba 	sub.w	r2, r3, #372	@ 0x174
 8004b92:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004b96:	4413      	add	r3, r2
 8004b98:	781a      	ldrb	r2, [r3, #0]
 8004b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8004dc8 <StartDefaultTask+0x1458>)
 8004b9c:	701a      	strb	r2, [r3, #0]
				SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, i);
 8004b9e:	4b87      	ldr	r3, [pc, #540]	@ (8004dbc <StartDefaultTask+0x144c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a87      	ldr	r2, [pc, #540]	@ (8004dc0 <StartDefaultTask+0x1450>)
 8004ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	4a85      	ldr	r2, [pc, #532]	@ (8004dc8 <StartDefaultTask+0x1458>)
 8004bb4:	4883      	ldr	r0, [pc, #524]	@ (8004dc4 <StartDefaultTask+0x1454>)
 8004bb6:	f001 fdb9 	bl	800672c <SPIF_WriteSector>
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004bba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004bc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004bc8:	2b06      	cmp	r3, #6
 8004bca:	ddde      	ble.n	8004b8a <StartDefaultTask+0x121a>
			  }
//			  EEPROM.update(eepDisplay[dispCount] + 7, dM);
//			  EEPROM.update(eepDisplay[dispCount] + 8, dK/25);
			  write[0] = dM;
 8004bcc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8004dc8 <StartDefaultTask+0x1458>)
 8004bd4:	701a      	strb	r2, [r3, #0]
			  SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, 7);
 8004bd6:	4b79      	ldr	r3, [pc, #484]	@ (8004dbc <StartDefaultTask+0x144c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a79      	ldr	r2, [pc, #484]	@ (8004dc0 <StartDefaultTask+0x1450>)
 8004bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be0:	4619      	mov	r1, r3
 8004be2:	2307      	movs	r3, #7
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2301      	movs	r3, #1
 8004be8:	4a77      	ldr	r2, [pc, #476]	@ (8004dc8 <StartDefaultTask+0x1458>)
 8004bea:	4876      	ldr	r0, [pc, #472]	@ (8004dc4 <StartDefaultTask+0x1454>)
 8004bec:	f001 fd9e 	bl	800672c <SPIF_WriteSector>
			  write[0] = dK/25;
 8004bf0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004bf4:	4a6c      	ldr	r2, [pc, #432]	@ (8004da8 <StartDefaultTask+0x1438>)
 8004bf6:	fb82 1203 	smull	r1, r2, r2, r3
 8004bfa:	10d2      	asrs	r2, r2, #3
 8004bfc:	17db      	asrs	r3, r3, #31
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4b71      	ldr	r3, [pc, #452]	@ (8004dc8 <StartDefaultTask+0x1458>)
 8004c04:	701a      	strb	r2, [r3, #0]
			  SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, 8);
 8004c06:	4b6d      	ldr	r3, [pc, #436]	@ (8004dbc <StartDefaultTask+0x144c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a6d      	ldr	r2, [pc, #436]	@ (8004dc0 <StartDefaultTask+0x1450>)
 8004c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c10:	4619      	mov	r1, r3
 8004c12:	2308      	movs	r3, #8
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2301      	movs	r3, #1
 8004c18:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc8 <StartDefaultTask+0x1458>)
 8004c1a:	486a      	ldr	r0, [pc, #424]	@ (8004dc4 <StartDefaultTask+0x1454>)
 8004c1c:	f001 fd86 	bl	800672c <SPIF_WriteSector>

			  HAL_Delay(500);
 8004c20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c24:	f002 fa14 	bl	8007050 <HAL_Delay>
			  add = false;
 8004c28:	4b68      	ldr	r3, [pc, #416]	@ (8004dcc <StartDefaultTask+0x145c>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
			  pause = false;
 8004c2e:	4b68      	ldr	r3, [pc, #416]	@ (8004dd0 <StartDefaultTask+0x1460>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
			  toDisplay();
 8004c34:	f7fc feb0 	bl	8001998 <toDisplay>

			  char str[8];
			  if (dispCount == count) {
 8004c38:	4b60      	ldr	r3, [pc, #384]	@ (8004dbc <StartDefaultTask+0x144c>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4b65      	ldr	r3, [pc, #404]	@ (8004dd4 <StartDefaultTask+0x1464>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d106      	bne.n	8004c52 <StartDefaultTask+0x12e2>
				str[0] = ':'; //EMPTY
 8004c44:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004c48:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004c4c:	223a      	movs	r2, #58	@ 0x3a
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e02b      	b.n	8004caa <StartDefaultTask+0x133a>
			  }
			  else {
				for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004c52:	2300      	movs	r3, #0
 8004c54:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004c58:	e01d      	b.n	8004c96 <StartDefaultTask+0x1326>
//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8004c5a:	4b58      	ldr	r3, [pc, #352]	@ (8004dbc <StartDefaultTask+0x144c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a58      	ldr	r2, [pc, #352]	@ (8004dc0 <StartDefaultTask+0x1450>)
 8004c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c64:	4619      	mov	r1, r3
 8004c66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	4a5a      	ldr	r2, [pc, #360]	@ (8004dd8 <StartDefaultTask+0x1468>)
 8004c70:	4854      	ldr	r0, [pc, #336]	@ (8004dc4 <StartDefaultTask+0x1454>)
 8004c72:	f001 fdc5 	bl	8006800 <SPIF_ReadSector>
				  str[i] = read[0];
 8004c76:	4b58      	ldr	r3, [pc, #352]	@ (8004dd8 <StartDefaultTask+0x1468>)
 8004c78:	7819      	ldrb	r1, [r3, #0]
 8004c7a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004c7e:	f5a3 72be 	sub.w	r2, r3, #380	@ 0x17c
 8004c82:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004c86:	4413      	add	r3, r2
 8004c88:	460a      	mov	r2, r1
 8004c8a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004c8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004c90:	3301      	adds	r3, #1
 8004c92:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004c96:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	dddd      	ble.n	8004c5a <StartDefaultTask+0x12ea>
				}
				str[7] = 0;
 8004c9e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004ca2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	71da      	strb	r2, [r3, #7]
//			  Serial.print(str);
//			  printFloat2(store,3);
//			  Serial2.println("");

//			  float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
			  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004caa:	4b44      	ldr	r3, [pc, #272]	@ (8004dbc <StartDefaultTask+0x144c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a44      	ldr	r2, [pc, #272]	@ (8004dc0 <StartDefaultTask+0x1450>)
 8004cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	2307      	movs	r3, #7
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4a46      	ldr	r2, [pc, #280]	@ (8004dd8 <StartDefaultTask+0x1468>)
 8004cbe:	4841      	ldr	r0, [pc, #260]	@ (8004dc4 <StartDefaultTask+0x1454>)
 8004cc0:	f001 fd9e 	bl	8006800 <SPIF_ReadSector>
		      int val1 = read[0];
 8004cc4:	4b44      	ldr	r3, [pc, #272]	@ (8004dd8 <StartDefaultTask+0x1468>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8004ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8004dbc <StartDefaultTask+0x144c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8004dc0 <StartDefaultTask+0x1450>)
 8004cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	2308      	movs	r3, #8
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4a3e      	ldr	r2, [pc, #248]	@ (8004dd8 <StartDefaultTask+0x1468>)
 8004ce0:	4838      	ldr	r0, [pc, #224]	@ (8004dc4 <StartDefaultTask+0x1454>)
 8004ce2:	f001 fd8d 	bl	8006800 <SPIF_ReadSector>
			  int val2 = read[0];
 8004ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8004dd8 <StartDefaultTask+0x1468>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
			  float store = val1 + (.025 * val2);
 8004cee:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8004cf2:	f7fb fbf7 	bl	80004e4 <__aeabi_i2d>
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	460d      	mov	r5, r1
 8004cfa:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8004cfe:	f7fb fbf1 	bl	80004e4 <__aeabi_i2d>
 8004d02:	a325      	add	r3, pc, #148	@ (adr r3, 8004d98 <StartDefaultTask+0x1428>)
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f7fb fc56 	bl	80005b8 <__aeabi_dmul>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4620      	mov	r0, r4
 8004d12:	4629      	mov	r1, r5
 8004d14:	f7fb fa9a 	bl	800024c <__adddf3>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	f7fb ff22 	bl	8000b68 <__aeabi_d2f>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

			  sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 8004d2a:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8004d2e:	f7fb fbeb 	bl	8000508 <__aeabi_f2d>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8004d3a:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8004d3e:	e9cd 2300 	strd	r2, r3, [sp]
 8004d42:	460b      	mov	r3, r1
 8004d44:	2265      	movs	r2, #101	@ 0x65
 8004d46:	4925      	ldr	r1, [pc, #148]	@ (8004ddc <StartDefaultTask+0x146c>)
 8004d48:	f006 fe90 	bl	800ba6c <siprintf>
			  LCDPrint(toPrint);
 8004d4c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe f943 	bl	8002fdc <LCDPrint>
 8004d56:	e14d      	b.n	8004ff4 <StartDefaultTask+0x1684>
			}
		  }
		  else if (currentA) { //delete
 8004d58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8149 	beq.w	8004ff4 <StartDefaultTask+0x1684>
			if (dispCount != count) { // Not empty
 8004d62:	4b16      	ldr	r3, [pc, #88]	@ (8004dbc <StartDefaultTask+0x144c>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd4 <StartDefaultTask+0x1464>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	f000 80af 	beq.w	8004ece <StartDefaultTask+0x155e>
			  delc = 0;
 8004d70:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <StartDefaultTask+0x1470>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
			  del = true;
 8004d76:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <StartDefaultTask+0x1474>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	701a      	strb	r2, [r3, #0]
			  pause = true;
 8004d7c:	4b14      	ldr	r3, [pc, #80]	@ (8004dd0 <StartDefaultTask+0x1460>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	701a      	strb	r2, [r3, #0]
			  char dN[8];
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004d82:	2300      	movs	r3, #0
 8004d84:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004d88:	e04c      	b.n	8004e24 <StartDefaultTask+0x14b4>
 8004d8a:	bf00      	nop
 8004d8c:	f3af 8000 	nop.w
 8004d90:	d2f1a9fc 	.word	0xd2f1a9fc
 8004d94:	3f50624d 	.word	0x3f50624d
 8004d98:	9999999a 	.word	0x9999999a
 8004d9c:	3f999999 	.word	0x3f999999
 8004da0:	2000071c 	.word	0x2000071c
 8004da4:	20000720 	.word	0x20000720
 8004da8:	51eb851f 	.word	0x51eb851f
 8004dac:	0800e058 	.word	0x0800e058
 8004db0:	2000077c 	.word	0x2000077c
 8004db4:	20000780 	.word	0x20000780
 8004db8:	40011000 	.word	0x40011000
 8004dbc:	20000710 	.word	0x20000710
 8004dc0:	200006d0 	.word	0x200006d0
 8004dc4:	2000069c 	.word	0x2000069c
 8004dc8:	20000730 	.word	0x20000730
 8004dcc:	2000071a 	.word	0x2000071a
 8004dd0:	20000010 	.word	0x20000010
 8004dd4:	20000714 	.word	0x20000714
 8004dd8:	2000072c 	.word	0x2000072c
 8004ddc:	0800e04c 	.word	0x0800e04c
 8004de0:	20000724 	.word	0x20000724
 8004de4:	2000071b 	.word	0x2000071b
//				dN[i] = EEPROM.read(eepDisplay[dispCount] + i);
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8004de8:	4b91      	ldr	r3, [pc, #580]	@ (8005030 <StartDefaultTask+0x16c0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a91      	ldr	r2, [pc, #580]	@ (8005034 <StartDefaultTask+0x16c4>)
 8004dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df2:	4619      	mov	r1, r3
 8004df4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4a8e      	ldr	r2, [pc, #568]	@ (8005038 <StartDefaultTask+0x16c8>)
 8004dfe:	488f      	ldr	r0, [pc, #572]	@ (800503c <StartDefaultTask+0x16cc>)
 8004e00:	f001 fcfe 	bl	8006800 <SPIF_ReadSector>
				dN[i] = read[0];
 8004e04:	4b8c      	ldr	r3, [pc, #560]	@ (8005038 <StartDefaultTask+0x16c8>)
 8004e06:	7819      	ldrb	r1, [r3, #0]
 8004e08:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004e0c:	f5a3 72c6 	sub.w	r2, r3, #396	@ 0x18c
 8004e10:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004e14:	4413      	add	r3, r2
 8004e16:	460a      	mov	r2, r1
 8004e18:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004e1a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004e1e:	3301      	adds	r3, #1
 8004e20:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004e24:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004e28:	2b06      	cmp	r3, #6
 8004e2a:	dddd      	ble.n	8004de8 <StartDefaultTask+0x1478>
			  }
//			  Serial2.print("d");
//			  Serial2.print(delc);
//			  Serial2.print(dN);
//			  Serial2.println("");
			  sprintf(toPrint, "%c%d%s",'d',delc,dN);
 8004e2c:	4b84      	ldr	r3, [pc, #528]	@ (8005040 <StartDefaultTask+0x16d0>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8004e34:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	2264      	movs	r2, #100	@ 0x64
 8004e3e:	4981      	ldr	r1, [pc, #516]	@ (8005044 <StartDefaultTask+0x16d4>)
 8004e40:	f006 fe14 	bl	800ba6c <siprintf>
			  LCDPrint(toPrint);
 8004e44:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe f8c7 	bl	8002fdc <LCDPrint>
			  HAL_Delay(500);
 8004e4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e52:	f002 f8fd 	bl	8007050 <HAL_Delay>
			  while (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 1) {
 8004e56:	e01a      	b.n	8004e8e <StartDefaultTask+0x151e>
				static int last_delc = 0;
				if (last_delc != delc) {
 8004e58:	4b7b      	ldr	r3, [pc, #492]	@ (8005048 <StartDefaultTask+0x16d8>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b78      	ldr	r3, [pc, #480]	@ (8005040 <StartDefaultTask+0x16d0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d014      	beq.n	8004e8e <StartDefaultTask+0x151e>
//				  Serial2.print("d");
//				  Serial2.print(delc);
//				  Serial2.print(dN);
//				  Serial2.println("");
				  sprintf(toPrint, "%c%d%s",'d',delc,dN);
 8004e64:	4b76      	ldr	r3, [pc, #472]	@ (8005040 <StartDefaultTask+0x16d0>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8004e6c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	2264      	movs	r2, #100	@ 0x64
 8004e76:	4973      	ldr	r1, [pc, #460]	@ (8005044 <StartDefaultTask+0x16d4>)
 8004e78:	f006 fdf8 	bl	800ba6c <siprintf>
				  LCDPrint(toPrint);
 8004e7c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe f8ab 	bl	8002fdc <LCDPrint>
				  last_delc = delc;
 8004e86:	4b6e      	ldr	r3, [pc, #440]	@ (8005040 <StartDefaultTask+0x16d0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a6f      	ldr	r2, [pc, #444]	@ (8005048 <StartDefaultTask+0x16d8>)
 8004e8c:	6013      	str	r3, [r2, #0]
			  while (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 1) {
 8004e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e92:	486e      	ldr	r0, [pc, #440]	@ (800504c <StartDefaultTask+0x16dc>)
 8004e94:	f002 fcb6 	bl	8007804 <HAL_GPIO_ReadPin>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d0dc      	beq.n	8004e58 <StartDefaultTask+0x14e8>
				}
			  }
			  if (delc > 0) { //
 8004e9e:	4b68      	ldr	r3, [pc, #416]	@ (8005040 <StartDefaultTask+0x16d0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	dd07      	ble.n	8004eb6 <StartDefaultTask+0x1546>
				toDelete(eepDisplay[dispCount]);
 8004ea6:	4b62      	ldr	r3, [pc, #392]	@ (8005030 <StartDefaultTask+0x16c0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a62      	ldr	r2, [pc, #392]	@ (8005034 <StartDefaultTask+0x16c4>)
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fc fe11 	bl	8001ad8 <toDelete>
			  }
			  del = false;
 8004eb6:	4b66      	ldr	r3, [pc, #408]	@ (8005050 <StartDefaultTask+0x16e0>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
			  pause = false;
 8004ebc:	4b65      	ldr	r3, [pc, #404]	@ (8005054 <StartDefaultTask+0x16e4>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
			  toDisplay();
 8004ec2:	f7fc fd69 	bl	8001998 <toDisplay>
			  HAL_Delay(500);
 8004ec6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004eca:	f002 f8c1 	bl	8007050 <HAL_Delay>
			}
			char str[8];
			if (dispCount == count) {
 8004ece:	4b58      	ldr	r3, [pc, #352]	@ (8005030 <StartDefaultTask+0x16c0>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b61      	ldr	r3, [pc, #388]	@ (8005058 <StartDefaultTask+0x16e8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d106      	bne.n	8004ee8 <StartDefaultTask+0x1578>
			  str[0] = ':'; //EMPTY
 8004eda:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004ede:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004ee2:	223a      	movs	r2, #58	@ 0x3a
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e02b      	b.n	8004f40 <StartDefaultTask+0x15d0>
			}
			else {
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8004eee:	e01d      	b.n	8004f2c <StartDefaultTask+0x15bc>
//				str[i] = EEPROM.read(eepDisplay[dispCount] + i);
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8004ef0:	4b4f      	ldr	r3, [pc, #316]	@ (8005030 <StartDefaultTask+0x16c0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8005034 <StartDefaultTask+0x16c4>)
 8004ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efa:	4619      	mov	r1, r3
 8004efc:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2301      	movs	r3, #1
 8004f04:	4a4c      	ldr	r2, [pc, #304]	@ (8005038 <StartDefaultTask+0x16c8>)
 8004f06:	484d      	ldr	r0, [pc, #308]	@ (800503c <StartDefaultTask+0x16cc>)
 8004f08:	f001 fc7a 	bl	8006800 <SPIF_ReadSector>
				str[i] = read[0];
 8004f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8005038 <StartDefaultTask+0x16c8>)
 8004f0e:	7819      	ldrb	r1, [r3, #0]
 8004f10:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004f14:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 8004f18:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8004f1c:	4413      	add	r3, r2
 8004f1e:	460a      	mov	r2, r1
 8004f20:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004f22:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8004f26:	3301      	adds	r3, #1
 8004f28:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8004f2c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8004f30:	2b06      	cmp	r3, #6
 8004f32:	dddd      	ble.n	8004ef0 <StartDefaultTask+0x1580>
			  }
			  str[7] = 0;
 8004f34:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004f38:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	71da      	strb	r2, [r3, #7]
//			Serial.print(str);
//			printFloat2(store,3);
//			Serial2.println("");

//			float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
			SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004f40:	4b3b      	ldr	r3, [pc, #236]	@ (8005030 <StartDefaultTask+0x16c0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a3b      	ldr	r2, [pc, #236]	@ (8005034 <StartDefaultTask+0x16c4>)
 8004f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	2307      	movs	r3, #7
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2301      	movs	r3, #1
 8004f52:	4a39      	ldr	r2, [pc, #228]	@ (8005038 <StartDefaultTask+0x16c8>)
 8004f54:	4839      	ldr	r0, [pc, #228]	@ (800503c <StartDefaultTask+0x16cc>)
 8004f56:	f001 fc53 	bl	8006800 <SPIF_ReadSector>
		    int val1 = read[0];
 8004f5a:	4b37      	ldr	r3, [pc, #220]	@ (8005038 <StartDefaultTask+0x16c8>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
		    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8004f62:	4b33      	ldr	r3, [pc, #204]	@ (8005030 <StartDefaultTask+0x16c0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a33      	ldr	r2, [pc, #204]	@ (8005034 <StartDefaultTask+0x16c4>)
 8004f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	2308      	movs	r3, #8
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	2301      	movs	r3, #1
 8004f74:	4a30      	ldr	r2, [pc, #192]	@ (8005038 <StartDefaultTask+0x16c8>)
 8004f76:	4831      	ldr	r0, [pc, #196]	@ (800503c <StartDefaultTask+0x16cc>)
 8004f78:	f001 fc42 	bl	8006800 <SPIF_ReadSector>
			int val2 = read[0];
 8004f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005038 <StartDefaultTask+0x16c8>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
			float store = val1 + (.025 * val2);
 8004f84:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8004f88:	f7fb faac 	bl	80004e4 <__aeabi_i2d>
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	460d      	mov	r5, r1
 8004f90:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8004f94:	f7fb faa6 	bl	80004e4 <__aeabi_i2d>
 8004f98:	a323      	add	r3, pc, #140	@ (adr r3, 8005028 <StartDefaultTask+0x16b8>)
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f7fb fb0b 	bl	80005b8 <__aeabi_dmul>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb f94f 	bl	800024c <__adddf3>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f7fb fdd7 	bl	8000b68 <__aeabi_d2f>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

		    sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 8004fc0:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8004fc4:	f7fb faa0 	bl	8000508 <__aeabi_f2d>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8004fd0:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8004fd4:	e9cd 2300 	strd	r2, r3, [sp]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	2265      	movs	r2, #101	@ 0x65
 8004fdc:	491f      	ldr	r1, [pc, #124]	@ (800505c <StartDefaultTask+0x16ec>)
 8004fde:	f006 fd45 	bl	800ba6c <siprintf>
		    LCDPrint(toPrint);
 8004fe2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fd fff8 	bl	8002fdc <LCDPrint>
		    lastDC = dispCount;
 8004fec:	4b10      	ldr	r3, [pc, #64]	@ (8005030 <StartDefaultTask+0x16c0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8005060 <StartDefaultTask+0x16f0>)
 8004ff2:	6013      	str	r3, [r2, #0]
		  }

		  if (lastDC != dispCount) {
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <StartDefaultTask+0x16f0>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8005030 <StartDefaultTask+0x16c0>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	f43f a815 	beq.w	800402c <StartDefaultTask+0x6bc>
			char str[8];
			if (dispCount == count) {
 8005002:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <StartDefaultTask+0x16c0>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4b14      	ldr	r3, [pc, #80]	@ (8005058 <StartDefaultTask+0x16e8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d106      	bne.n	800501c <StartDefaultTask+0x16ac>
			  str[0] = ':'; //EMPTY
 800500e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005012:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005016:	223a      	movs	r2, #58	@ 0x3a
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e04b      	b.n	80050b4 <StartDefaultTask+0x1744>
			}
			else {
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800501c:	2300      	movs	r3, #0
 800501e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8005022:	e03d      	b.n	80050a0 <StartDefaultTask+0x1730>
 8005024:	f3af 8000 	nop.w
 8005028:	9999999a 	.word	0x9999999a
 800502c:	3f999999 	.word	0x3f999999
 8005030:	20000710 	.word	0x20000710
 8005034:	200006d0 	.word	0x200006d0
 8005038:	2000072c 	.word	0x2000072c
 800503c:	2000069c 	.word	0x2000069c
 8005040:	20000724 	.word	0x20000724
 8005044:	0800e064 	.word	0x0800e064
 8005048:	20000784 	.word	0x20000784
 800504c:	40011800 	.word	0x40011800
 8005050:	2000071b 	.word	0x2000071b
 8005054:	20000010 	.word	0x20000010
 8005058:	20000714 	.word	0x20000714
 800505c:	0800e04c 	.word	0x0800e04c
 8005060:	20000788 	.word	0x20000788
//				str[i] = EEPROM.read(eepDisplay[dispCount] + i);
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8005064:	4b9a      	ldr	r3, [pc, #616]	@ (80052d0 <StartDefaultTask+0x1960>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a9a      	ldr	r2, [pc, #616]	@ (80052d4 <StartDefaultTask+0x1964>)
 800506a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800506e:	4619      	mov	r1, r3
 8005070:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2301      	movs	r3, #1
 8005078:	4a97      	ldr	r2, [pc, #604]	@ (80052d8 <StartDefaultTask+0x1968>)
 800507a:	4898      	ldr	r0, [pc, #608]	@ (80052dc <StartDefaultTask+0x196c>)
 800507c:	f001 fbc0 	bl	8006800 <SPIF_ReadSector>
				str[i] = read[0];
 8005080:	4b95      	ldr	r3, [pc, #596]	@ (80052d8 <StartDefaultTask+0x1968>)
 8005082:	7819      	ldrb	r1, [r3, #0]
 8005084:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005088:	f5a3 72ca 	sub.w	r2, r3, #404	@ 0x194
 800508c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8005090:	4413      	add	r3, r2
 8005092:	460a      	mov	r2, r1
 8005094:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8005096:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800509a:	3301      	adds	r3, #1
 800509c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80050a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80050a4:	2b06      	cmp	r3, #6
 80050a6:	dddd      	ble.n	8005064 <StartDefaultTask+0x16f4>
			  }
			  str[7] = 0;
 80050a8:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80050ac:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80050b0:	2200      	movs	r2, #0
 80050b2:	71da      	strb	r2, [r3, #7]
//			Serial.print(str);
//			printFloat2(store,3);
//			Serial2.println("");

//			float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
			SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 80050b4:	4b86      	ldr	r3, [pc, #536]	@ (80052d0 <StartDefaultTask+0x1960>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a86      	ldr	r2, [pc, #536]	@ (80052d4 <StartDefaultTask+0x1964>)
 80050ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050be:	4619      	mov	r1, r3
 80050c0:	2307      	movs	r3, #7
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	2301      	movs	r3, #1
 80050c6:	4a84      	ldr	r2, [pc, #528]	@ (80052d8 <StartDefaultTask+0x1968>)
 80050c8:	4884      	ldr	r0, [pc, #528]	@ (80052dc <StartDefaultTask+0x196c>)
 80050ca:	f001 fb99 	bl	8006800 <SPIF_ReadSector>
		    int val1 = read[0];
 80050ce:	4b82      	ldr	r3, [pc, #520]	@ (80052d8 <StartDefaultTask+0x1968>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 80050d6:	4b7e      	ldr	r3, [pc, #504]	@ (80052d0 <StartDefaultTask+0x1960>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a7e      	ldr	r2, [pc, #504]	@ (80052d4 <StartDefaultTask+0x1964>)
 80050dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e0:	4619      	mov	r1, r3
 80050e2:	2308      	movs	r3, #8
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	2301      	movs	r3, #1
 80050e8:	4a7b      	ldr	r2, [pc, #492]	@ (80052d8 <StartDefaultTask+0x1968>)
 80050ea:	487c      	ldr	r0, [pc, #496]	@ (80052dc <StartDefaultTask+0x196c>)
 80050ec:	f001 fb88 	bl	8006800 <SPIF_ReadSector>
			int val2 = read[0];
 80050f0:	4b79      	ldr	r3, [pc, #484]	@ (80052d8 <StartDefaultTask+0x1968>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
			float store = val1 + (.025 * val2);
 80050f8:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80050fc:	f7fb f9f2 	bl	80004e4 <__aeabi_i2d>
 8005100:	4604      	mov	r4, r0
 8005102:	460d      	mov	r5, r1
 8005104:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8005108:	f7fb f9ec 	bl	80004e4 <__aeabi_i2d>
 800510c:	a36e      	add	r3, pc, #440	@ (adr r3, 80052c8 <StartDefaultTask+0x1958>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f7fb fa51 	bl	80005b8 <__aeabi_dmul>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4620      	mov	r0, r4
 800511c:	4629      	mov	r1, r5
 800511e:	f7fb f895 	bl	800024c <__adddf3>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4610      	mov	r0, r2
 8005128:	4619      	mov	r1, r3
 800512a:	f7fb fd1d 	bl	8000b68 <__aeabi_d2f>
 800512e:	4603      	mov	r3, r0
 8005130:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

		    sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 8005134:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8005138:	f7fb f9e6 	bl	8000508 <__aeabi_f2d>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8005144:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8005148:	e9cd 2300 	strd	r2, r3, [sp]
 800514c:	460b      	mov	r3, r1
 800514e:	2265      	movs	r2, #101	@ 0x65
 8005150:	4963      	ldr	r1, [pc, #396]	@ (80052e0 <StartDefaultTask+0x1970>)
 8005152:	f006 fc8b 	bl	800ba6c <siprintf>
		    LCDPrint(toPrint);
 8005156:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd ff3e 	bl	8002fdc <LCDPrint>
			lastDC = dispCount;
 8005160:	4b5b      	ldr	r3, [pc, #364]	@ (80052d0 <StartDefaultTask+0x1960>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a5f      	ldr	r2, [pc, #380]	@ (80052e4 <StartDefaultTask+0x1974>)
 8005166:	6013      	str	r3, [r2, #0]
		while (true) {
 8005168:	f7fe bf60 	b.w	800402c <StartDefaultTask+0x6bc>
			break;
 800516c:	bf00      	nop
		  }
		}
		edit = false;
 800516e:	4b5e      	ldr	r3, [pc, #376]	@ (80052e8 <StartDefaultTask+0x1978>)
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
		pause = false;
 8005174:	4b5d      	ldr	r3, [pc, #372]	@ (80052ec <StartDefaultTask+0x197c>)
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
		dispCount = 0;
 800517a:	4b55      	ldr	r3, [pc, #340]	@ (80052d0 <StartDefaultTask+0x1960>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
//		Serial2.print("f");
//		printFloat2(freq,3);
//		printFloat2(Standby,3);
//		Serial2.println("");

	    sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8005180:	4b5b      	ldr	r3, [pc, #364]	@ (80052f0 <StartDefaultTask+0x1980>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fb f9bf 	bl	8000508 <__aeabi_f2d>
 800518a:	4604      	mov	r4, r0
 800518c:	460d      	mov	r5, r1
 800518e:	4b59      	ldr	r3, [pc, #356]	@ (80052f4 <StartDefaultTask+0x1984>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fb f9b8 	bl	8000508 <__aeabi_f2d>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80051a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051a4:	e9cd 4500 	strd	r4, r5, [sp]
 80051a8:	2266      	movs	r2, #102	@ 0x66
 80051aa:	4953      	ldr	r1, [pc, #332]	@ (80052f8 <StartDefaultTask+0x1988>)
 80051ac:	f006 fc5e 	bl	800ba6c <siprintf>
	    LCDPrint(toPrint);
 80051b0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fd ff11 	bl	8002fdc <LCDPrint>

		freq_last = freq;
 80051ba:	4b4d      	ldr	r3, [pc, #308]	@ (80052f0 <StartDefaultTask+0x1980>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a4f      	ldr	r2, [pc, #316]	@ (80052fc <StartDefaultTask+0x198c>)
 80051c0:	6013      	str	r3, [r2, #0]
		sfreq_last = Standby;
 80051c2:	4b4c      	ldr	r3, [pc, #304]	@ (80052f4 <StartDefaultTask+0x1984>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005300 <StartDefaultTask+0x1990>)
 80051c8:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 80051ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80051ce:	f001 ff3f 	bl	8007050 <HAL_Delay>
		last = millis();
 80051d2:	f7fc fdf9 	bl	8001dc8 <millis>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005304 <StartDefaultTask+0x1994>)
 80051da:	6013      	str	r3, [r2, #0]
	  if (!on) { //mic tone and side gain
 80051dc:	e2de      	b.n	800579c <StartDefaultTask+0x1e2c>
		  delay(20);
		}
		*/
	  }
	}
	else if (both && micside) {
 80051de:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d033      	beq.n	800524e <StartDefaultTask+0x18de>
 80051e6:	4b48      	ldr	r3, [pc, #288]	@ (8005308 <StartDefaultTask+0x1998>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02f      	beq.n	800524e <StartDefaultTask+0x18de>
	  micside = false;
 80051ee:	4b46      	ldr	r3, [pc, #280]	@ (8005308 <StartDefaultTask+0x1998>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
	  pause = false;
 80051f4:	4b3d      	ldr	r3, [pc, #244]	@ (80052ec <StartDefaultTask+0x197c>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
//	  Serial2.print("f");
//	  printFloat2(freq,3);
//	  printFloat2(Standby,3);
//	  Serial2.println("");

	  sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 80051fa:	4b3d      	ldr	r3, [pc, #244]	@ (80052f0 <StartDefaultTask+0x1980>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fb f982 	bl	8000508 <__aeabi_f2d>
 8005204:	4604      	mov	r4, r0
 8005206:	460d      	mov	r5, r1
 8005208:	4b3a      	ldr	r3, [pc, #232]	@ (80052f4 <StartDefaultTask+0x1984>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7fb f97b 	bl	8000508 <__aeabi_f2d>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 800521a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800521e:	e9cd 4500 	strd	r4, r5, [sp]
 8005222:	2266      	movs	r2, #102	@ 0x66
 8005224:	4934      	ldr	r1, [pc, #208]	@ (80052f8 <StartDefaultTask+0x1988>)
 8005226:	f006 fc21 	bl	800ba6c <siprintf>
	  LCDPrint(toPrint);
 800522a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800522e:	4618      	mov	r0, r3
 8005230:	f7fd fed4 	bl	8002fdc <LCDPrint>

	  freq_last = freq;
 8005234:	4b2e      	ldr	r3, [pc, #184]	@ (80052f0 <StartDefaultTask+0x1980>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a30      	ldr	r2, [pc, #192]	@ (80052fc <StartDefaultTask+0x198c>)
 800523a:	6013      	str	r3, [r2, #0]
	  sfreq_last = Standby;
 800523c:	4b2d      	ldr	r3, [pc, #180]	@ (80052f4 <StartDefaultTask+0x1984>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2f      	ldr	r2, [pc, #188]	@ (8005300 <StartDefaultTask+0x1990>)
 8005242:	6013      	str	r3, [r2, #0]
	  HAL_Delay(500);
 8005244:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005248:	f001 ff02 	bl	8007050 <HAL_Delay>
 800524c:	e2a6      	b.n	800579c <StartDefaultTask+0x1e2c>
	}
	else if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0 && !pause) { // Check if button is pressed
 800524e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005252:	482e      	ldr	r0, [pc, #184]	@ (800530c <StartDefaultTask+0x199c>)
 8005254:	f002 fad6 	bl	8007804 <HAL_GPIO_ReadPin>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d160      	bne.n	8005320 <StartDefaultTask+0x19b0>
 800525e:	4b23      	ldr	r3, [pc, #140]	@ (80052ec <StartDefaultTask+0x197c>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	f083 0301 	eor.w	r3, r3, #1
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d059      	beq.n	8005320 <StartDefaultTask+0x19b0>
	  float temp = freq;
 800526c:	4b20      	ldr	r3, [pc, #128]	@ (80052f0 <StartDefaultTask+0x1980>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	  int tk = KHz;
 8005274:	4b26      	ldr	r3, [pc, #152]	@ (8005310 <StartDefaultTask+0x19a0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	  int tm = MHz;
 800527c:	4b25      	ldr	r3, [pc, #148]	@ (8005314 <StartDefaultTask+0x19a4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	  freq = Standby;
 8005284:	4b1b      	ldr	r3, [pc, #108]	@ (80052f4 <StartDefaultTask+0x1984>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a19      	ldr	r2, [pc, #100]	@ (80052f0 <StartDefaultTask+0x1980>)
 800528a:	6013      	str	r3, [r2, #0]
	  KHz = SK;
 800528c:	4b22      	ldr	r3, [pc, #136]	@ (8005318 <StartDefaultTask+0x19a8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1f      	ldr	r2, [pc, #124]	@ (8005310 <StartDefaultTask+0x19a0>)
 8005292:	6013      	str	r3, [r2, #0]
	  MHz = SM;
 8005294:	4b21      	ldr	r3, [pc, #132]	@ (800531c <StartDefaultTask+0x19ac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1e      	ldr	r2, [pc, #120]	@ (8005314 <StartDefaultTask+0x19a4>)
 800529a:	6013      	str	r3, [r2, #0]

	  Standby = temp;
 800529c:	4a15      	ldr	r2, [pc, #84]	@ (80052f4 <StartDefaultTask+0x1984>)
 800529e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052a2:	6013      	str	r3, [r2, #0]
	  SK = tk;
 80052a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005318 <StartDefaultTask+0x19a8>)
 80052a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80052aa:	6013      	str	r3, [r2, #0]
	  SM = tm;
 80052ac:	4a1b      	ldr	r2, [pc, #108]	@ (800531c <StartDefaultTask+0x19ac>)
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b2:	6013      	str	r3, [r2, #0]
	  HAL_Delay(500);
 80052b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80052b8:	f001 feca 	bl	8007050 <HAL_Delay>
	  last = millis();
 80052bc:	f7fc fd84 	bl	8001dc8 <millis>
 80052c0:	4603      	mov	r3, r0
 80052c2:	4a10      	ldr	r2, [pc, #64]	@ (8005304 <StartDefaultTask+0x1994>)
 80052c4:	6013      	str	r3, [r2, #0]
	else if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0 && !pause) { // Check if button is pressed
 80052c6:	e269      	b.n	800579c <StartDefaultTask+0x1e2c>
 80052c8:	9999999a 	.word	0x9999999a
 80052cc:	3f999999 	.word	0x3f999999
 80052d0:	20000710 	.word	0x20000710
 80052d4:	200006d0 	.word	0x200006d0
 80052d8:	2000072c 	.word	0x2000072c
 80052dc:	2000069c 	.word	0x2000069c
 80052e0:	0800e04c 	.word	0x0800e04c
 80052e4:	20000788 	.word	0x20000788
 80052e8:	200006cc 	.word	0x200006cc
 80052ec:	20000010 	.word	0x20000010
 80052f0:	20000000 	.word	0x20000000
 80052f4:	20000008 	.word	0x20000008
 80052f8:	0800e02c 	.word	0x0800e02c
 80052fc:	20000028 	.word	0x20000028
 8005300:	2000002c 	.word	0x2000002c
 8005304:	20000770 	.word	0x20000770
 8005308:	20000719 	.word	0x20000719
 800530c:	40011800 	.word	0x40011800
 8005310:	200006bc 	.word	0x200006bc
 8005314:	20000004 	.word	0x20000004
 8005318:	200006c0 	.word	0x200006c0
 800531c:	2000000c 	.word	0x2000000c
	}
	else if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) { // off/stored frequencies
 8005320:	2101      	movs	r1, #1
 8005322:	48a1      	ldr	r0, [pc, #644]	@ (80055a8 <StartDefaultTask+0x1c38>)
 8005324:	f002 fa6e 	bl	8007804 <HAL_GPIO_ReadPin>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 8236 	bne.w	800579c <StartDefaultTask+0x1e2c>
	  if (!on && !micside) {
 8005330:	4b9e      	ldr	r3, [pc, #632]	@ (80055ac <StartDefaultTask+0x1c3c>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f083 0301 	eor.w	r3, r3, #1
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d039      	beq.n	80053b2 <StartDefaultTask+0x1a42>
 800533e:	4b9c      	ldr	r3, [pc, #624]	@ (80055b0 <StartDefaultTask+0x1c40>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	f083 0301 	eor.w	r3, r3, #1
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d032      	beq.n	80053b2 <StartDefaultTask+0x1a42>
		on = true;
 800534c:	4b97      	ldr	r3, [pc, #604]	@ (80055ac <StartDefaultTask+0x1c3c>)
 800534e:	2201      	movs	r2, #1
 8005350:	701a      	strb	r2, [r3, #0]
		pause = false;
 8005352:	4b98      	ldr	r3, [pc, #608]	@ (80055b4 <StartDefaultTask+0x1c44>)
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
//		Serial2.print("x"); // turn on
//		Serial2.print("f");
//		printFloat2(freq,3);
//		printFloat2(Standby,3);
//		Serial2.println("");
		LCDPrint("x");
 8005358:	4897      	ldr	r0, [pc, #604]	@ (80055b8 <StartDefaultTask+0x1c48>)
 800535a:	f7fd fe3f 	bl	8002fdc <LCDPrint>
		sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 800535e:	4b97      	ldr	r3, [pc, #604]	@ (80055bc <StartDefaultTask+0x1c4c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb f8d0 	bl	8000508 <__aeabi_f2d>
 8005368:	4604      	mov	r4, r0
 800536a:	460d      	mov	r5, r1
 800536c:	4b94      	ldr	r3, [pc, #592]	@ (80055c0 <StartDefaultTask+0x1c50>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f7fb f8c9 	bl	8000508 <__aeabi_f2d>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 800537e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005382:	e9cd 4500 	strd	r4, r5, [sp]
 8005386:	2266      	movs	r2, #102	@ 0x66
 8005388:	498e      	ldr	r1, [pc, #568]	@ (80055c4 <StartDefaultTask+0x1c54>)
 800538a:	f006 fb6f 	bl	800ba6c <siprintf>
	    LCDPrint(toPrint);
 800538e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8005392:	4618      	mov	r0, r3
 8005394:	f7fd fe22 	bl	8002fdc <LCDPrint>
		freq_last = freq;
 8005398:	4b88      	ldr	r3, [pc, #544]	@ (80055bc <StartDefaultTask+0x1c4c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a8a      	ldr	r2, [pc, #552]	@ (80055c8 <StartDefaultTask+0x1c58>)
 800539e:	6013      	str	r3, [r2, #0]
		sfreq_last = Standby;
 80053a0:	4b87      	ldr	r3, [pc, #540]	@ (80055c0 <StartDefaultTask+0x1c50>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a89      	ldr	r2, [pc, #548]	@ (80055cc <StartDefaultTask+0x1c5c>)
 80053a6:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 80053a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80053ac:	f001 fe50 	bl	8007050 <HAL_Delay>
 80053b0:	e1ef      	b.n	8005792 <StartDefaultTask+0x1e22>
		// LOAD DATA, give old data from last session for display to load (can be done by just loading the data from eeprom into the global variables)
	  }
	  else { // it is already on
		unsigned long time = millis();
 80053b2:	f7fc fd09 	bl	8001dc8 <millis>
 80053b6:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
		while (true) {
		  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1 || (millis() - time > 3000)) {
 80053ba:	2101      	movs	r1, #1
 80053bc:	487a      	ldr	r0, [pc, #488]	@ (80055a8 <StartDefaultTask+0x1c38>)
 80053be:	f002 fa21 	bl	8007804 <HAL_GPIO_ReadPin>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d00a      	beq.n	80053de <StartDefaultTask+0x1a6e>
 80053c8:	f7fc fcfe 	bl	8001dc8 <millis>
 80053cc:	4602      	mov	r2, r0
 80053ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80053d8:	4293      	cmp	r3, r2
 80053da:	d800      	bhi.n	80053de <StartDefaultTask+0x1a6e>
 80053dc:	e7ed      	b.n	80053ba <StartDefaultTask+0x1a4a>
			break;
		  }
		}
		if (millis() - time > 3000) {
 80053de:	f7fc fcf3 	bl	8001dc8 <millis>
 80053e2:	4602      	mov	r2, r0
 80053e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d915      	bls.n	800541e <StartDefaultTask+0x1aae>
		  storestate();
 80053f2:	f7fc fb81 	bl	8001af8 <storestate>
		  on = false;
 80053f6:	4b6d      	ldr	r3, [pc, #436]	@ (80055ac <StartDefaultTask+0x1c3c>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
		  pause = true;
 80053fc:	4b6d      	ldr	r3, [pc, #436]	@ (80055b4 <StartDefaultTask+0x1c44>)
 80053fe:	2201      	movs	r2, #1
 8005400:	701a      	strb	r2, [r3, #0]
		  micside = false;
 8005402:	4b6b      	ldr	r3, [pc, #428]	@ (80055b0 <StartDefaultTask+0x1c40>)
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
		  bscroll = false;
 8005408:	4b71      	ldr	r3, [pc, #452]	@ (80055d0 <StartDefaultTask+0x1c60>)
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
		  //Serial2.print("o");
		  LCDPrint("o");
 800540e:	4871      	ldr	r0, [pc, #452]	@ (80055d4 <StartDefaultTask+0x1c64>)
 8005410:	f7fd fde4 	bl	8002fdc <LCDPrint>
		  HAL_Delay(3000);
 8005414:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8005418:	f001 fe1a 	bl	8007050 <HAL_Delay>
 800541c:	e1b9      	b.n	8005792 <StartDefaultTask+0x1e22>
		}
		else { // stored frequency mode
		  toDisplay();
 800541e:	f7fc fabb 	bl	8001998 <toDisplay>
		  if (eepDisplay[0] == -1) { // no mem exit
 8005422:	4b6d      	ldr	r3, [pc, #436]	@ (80055d8 <StartDefaultTask+0x1c68>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800542a:	d10a      	bne.n	8005442 <StartDefaultTask+0x1ad2>
			//Serial2.print("n");
			LCDPrint("n");
 800542c:	486b      	ldr	r0, [pc, #428]	@ (80055dc <StartDefaultTask+0x1c6c>)
 800542e:	f7fd fdd5 	bl	8002fdc <LCDPrint>
			HAL_Delay(500);
 8005432:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005436:	f001 fe0b 	bl	8007050 <HAL_Delay>
			temp = true;
 800543a:	4b69      	ldr	r3, [pc, #420]	@ (80055e0 <StartDefaultTask+0x1c70>)
 800543c:	2201      	movs	r2, #1
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	e1a7      	b.n	8005792 <StartDefaultTask+0x1e22>
		  }
		  else { // turn on stored frequency mode and stay until click again
			//initial print
			static int lastDC = 0;
			char str[8];
			for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8005442:	2300      	movs	r3, #0
 8005444:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8005448:	e01d      	b.n	8005486 <StartDefaultTask+0x1b16>
//			  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
		      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);;
 800544a:	4b66      	ldr	r3, [pc, #408]	@ (80055e4 <StartDefaultTask+0x1c74>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a62      	ldr	r2, [pc, #392]	@ (80055d8 <StartDefaultTask+0x1c68>)
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	4619      	mov	r1, r3
 8005456:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	2301      	movs	r3, #1
 800545e:	4a62      	ldr	r2, [pc, #392]	@ (80055e8 <StartDefaultTask+0x1c78>)
 8005460:	4862      	ldr	r0, [pc, #392]	@ (80055ec <StartDefaultTask+0x1c7c>)
 8005462:	f001 f9cd 	bl	8006800 <SPIF_ReadSector>
			  str[i] = read[0];
 8005466:	4b60      	ldr	r3, [pc, #384]	@ (80055e8 <StartDefaultTask+0x1c78>)
 8005468:	7819      	ldrb	r1, [r3, #0]
 800546a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800546e:	f5a3 72ce 	sub.w	r2, r3, #412	@ 0x19c
 8005472:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005476:	4413      	add	r3, r2
 8005478:	460a      	mov	r2, r1
 800547a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800547c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005480:	3301      	adds	r3, #1
 8005482:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8005486:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800548a:	2b06      	cmp	r3, #6
 800548c:	dddd      	ble.n	800544a <StartDefaultTask+0x1ada>
			}
			str[7] = 0;
 800548e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005492:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005496:	2200      	movs	r2, #0
 8005498:	71da      	strb	r2, [r3, #7]
//			Serial2.print(str);
//			printFloat2(store,3);
//			Serial2.println("");

//			float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
			SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 800549a:	4b52      	ldr	r3, [pc, #328]	@ (80055e4 <StartDefaultTask+0x1c74>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a4e      	ldr	r2, [pc, #312]	@ (80055d8 <StartDefaultTask+0x1c68>)
 80054a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a4:	4619      	mov	r1, r3
 80054a6:	2307      	movs	r3, #7
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	2301      	movs	r3, #1
 80054ac:	4a4e      	ldr	r2, [pc, #312]	@ (80055e8 <StartDefaultTask+0x1c78>)
 80054ae:	484f      	ldr	r0, [pc, #316]	@ (80055ec <StartDefaultTask+0x1c7c>)
 80054b0:	f001 f9a6 	bl	8006800 <SPIF_ReadSector>
		    int val1 = read[0];
 80054b4:	4b4c      	ldr	r3, [pc, #304]	@ (80055e8 <StartDefaultTask+0x1c78>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
		    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 80054bc:	4b49      	ldr	r3, [pc, #292]	@ (80055e4 <StartDefaultTask+0x1c74>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a45      	ldr	r2, [pc, #276]	@ (80055d8 <StartDefaultTask+0x1c68>)
 80054c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c6:	4619      	mov	r1, r3
 80054c8:	2308      	movs	r3, #8
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	2301      	movs	r3, #1
 80054ce:	4a46      	ldr	r2, [pc, #280]	@ (80055e8 <StartDefaultTask+0x1c78>)
 80054d0:	4846      	ldr	r0, [pc, #280]	@ (80055ec <StartDefaultTask+0x1c7c>)
 80054d2:	f001 f995 	bl	8006800 <SPIF_ReadSector>
			int val2 = read[0];
 80054d6:	4b44      	ldr	r3, [pc, #272]	@ (80055e8 <StartDefaultTask+0x1c78>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
			float store = val1 + (.025 * val2);
 80054de:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80054e2:	f7fa ffff 	bl	80004e4 <__aeabi_i2d>
 80054e6:	4604      	mov	r4, r0
 80054e8:	460d      	mov	r5, r1
 80054ea:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 80054ee:	f7fa fff9 	bl	80004e4 <__aeabi_i2d>
 80054f2:	a32b      	add	r3, pc, #172	@ (adr r3, 80055a0 <StartDefaultTask+0x1c30>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f7fb f85e 	bl	80005b8 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4620      	mov	r0, r4
 8005502:	4629      	mov	r1, r5
 8005504:	f7fa fea2 	bl	800024c <__adddf3>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	f7fb fb2a 	bl	8000b68 <__aeabi_d2f>
 8005514:	4603      	mov	r3, r0
 8005516:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

			sprintf(toPrint, "%c%s%0.3f", 'k', str, store);
 800551a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800551e:	f7fa fff3 	bl	8000508 <__aeabi_f2d>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800552a:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 800552e:	e9cd 2300 	strd	r2, r3, [sp]
 8005532:	460b      	mov	r3, r1
 8005534:	226b      	movs	r2, #107	@ 0x6b
 8005536:	492e      	ldr	r1, [pc, #184]	@ (80055f0 <StartDefaultTask+0x1c80>)
 8005538:	f006 fa98 	bl	800ba6c <siprintf>
			LCDPrint(toPrint);
 800553c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8005540:	4618      	mov	r0, r3
 8005542:	f7fd fd4b 	bl	8002fdc <LCDPrint>

			pause = true;
 8005546:	4b1b      	ldr	r3, [pc, #108]	@ (80055b4 <StartDefaultTask+0x1c44>)
 8005548:	2201      	movs	r2, #1
 800554a:	701a      	strb	r2, [r3, #0]
			bscroll = true;
 800554c:	4b20      	ldr	r3, [pc, #128]	@ (80055d0 <StartDefaultTask+0x1c60>)
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
			temp = true;
 8005552:	4b23      	ldr	r3, [pc, #140]	@ (80055e0 <StartDefaultTask+0x1c70>)
 8005554:	2201      	movs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]
			unsigned long timer = millis();
 8005558:	f7fc fc36 	bl	8001dc8 <millis>
 800555c:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
			bool valid = false;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
			//loop + scroll setup
			while (millis() - timer < 5000) {
 8005566:	e0c9      	b.n	80056fc <StartDefaultTask+0x1d8c>
			  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 8005568:	2101      	movs	r1, #1
 800556a:	480f      	ldr	r0, [pc, #60]	@ (80055a8 <StartDefaultTask+0x1c38>)
 800556c:	f002 f94a 	bl	8007804 <HAL_GPIO_ReadPin>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <StartDefaultTask+0x1c0e>
				valid = true;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
				break;
 800557c:	e0c9      	b.n	8005712 <StartDefaultTask+0x1da2>
			  }
			  if (lastDC != dispCount) {
 800557e:	4b1d      	ldr	r3, [pc, #116]	@ (80055f4 <StartDefaultTask+0x1c84>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b18      	ldr	r3, [pc, #96]	@ (80055e4 <StartDefaultTask+0x1c74>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	f000 80b8 	beq.w	80056fc <StartDefaultTask+0x1d8c>
				timer = millis();
 800558c:	f7fc fc1c 	bl	8001dc8 <millis>
 8005590:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
				char str[8];
				for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8005594:	2300      	movs	r3, #0
 8005596:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800559a:	e04b      	b.n	8005634 <StartDefaultTask+0x1cc4>
 800559c:	f3af 8000 	nop.w
 80055a0:	9999999a 	.word	0x9999999a
 80055a4:	3f999999 	.word	0x3f999999
 80055a8:	40011000 	.word	0x40011000
 80055ac:	200006cd 	.word	0x200006cd
 80055b0:	20000719 	.word	0x20000719
 80055b4:	20000010 	.word	0x20000010
 80055b8:	0800e03c 	.word	0x0800e03c
 80055bc:	20000000 	.word	0x20000000
 80055c0:	20000008 	.word	0x20000008
 80055c4:	0800e02c 	.word	0x0800e02c
 80055c8:	20000028 	.word	0x20000028
 80055cc:	2000002c 	.word	0x2000002c
 80055d0:	20000718 	.word	0x20000718
 80055d4:	0800e06c 	.word	0x0800e06c
 80055d8:	200006d0 	.word	0x200006d0
 80055dc:	0800e070 	.word	0x0800e070
 80055e0:	20000728 	.word	0x20000728
 80055e4:	20000710 	.word	0x20000710
 80055e8:	2000072c 	.word	0x2000072c
 80055ec:	2000069c 	.word	0x2000069c
 80055f0:	0800e04c 	.word	0x0800e04c
 80055f4:	2000078c 	.word	0x2000078c
//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
			      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 80055f8:	4bc1      	ldr	r3, [pc, #772]	@ (8005900 <StartDefaultTask+0x1f90>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4ac1      	ldr	r2, [pc, #772]	@ (8005904 <StartDefaultTask+0x1f94>)
 80055fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005602:	4619      	mov	r1, r3
 8005604:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	2301      	movs	r3, #1
 800560c:	4abe      	ldr	r2, [pc, #760]	@ (8005908 <StartDefaultTask+0x1f98>)
 800560e:	48bf      	ldr	r0, [pc, #764]	@ (800590c <StartDefaultTask+0x1f9c>)
 8005610:	f001 f8f6 	bl	8006800 <SPIF_ReadSector>
				  str[i] = read[0];
 8005614:	4bbc      	ldr	r3, [pc, #752]	@ (8005908 <StartDefaultTask+0x1f98>)
 8005616:	7819      	ldrb	r1, [r3, #0]
 8005618:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800561c:	f5a3 72d2 	sub.w	r2, r3, #420	@ 0x1a4
 8005620:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005624:	4413      	add	r3, r2
 8005626:	460a      	mov	r2, r1
 8005628:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800562a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800562e:	3301      	adds	r3, #1
 8005630:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005634:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005638:	2b06      	cmp	r3, #6
 800563a:	dddd      	ble.n	80055f8 <StartDefaultTask+0x1c88>
				}
				str[7] = 0;
 800563c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005640:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8005644:	2200      	movs	r2, #0
 8005646:	71da      	strb	r2, [r3, #7]
//				Serial2.print(str);
//				Serial.print(str);
//				printFloat2(store,3);
//				Serial2.println("");
//				float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8005648:	4bad      	ldr	r3, [pc, #692]	@ (8005900 <StartDefaultTask+0x1f90>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4aad      	ldr	r2, [pc, #692]	@ (8005904 <StartDefaultTask+0x1f94>)
 800564e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005652:	4619      	mov	r1, r3
 8005654:	2307      	movs	r3, #7
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	2301      	movs	r3, #1
 800565a:	4aab      	ldr	r2, [pc, #684]	@ (8005908 <StartDefaultTask+0x1f98>)
 800565c:	48ab      	ldr	r0, [pc, #684]	@ (800590c <StartDefaultTask+0x1f9c>)
 800565e:	f001 f8cf 	bl	8006800 <SPIF_ReadSector>
			    int val1 = read[0];
 8005662:	4ba9      	ldr	r3, [pc, #676]	@ (8005908 <StartDefaultTask+0x1f98>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 800566a:	4ba5      	ldr	r3, [pc, #660]	@ (8005900 <StartDefaultTask+0x1f90>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4aa5      	ldr	r2, [pc, #660]	@ (8005904 <StartDefaultTask+0x1f94>)
 8005670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005674:	4619      	mov	r1, r3
 8005676:	2308      	movs	r3, #8
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	2301      	movs	r3, #1
 800567c:	4aa2      	ldr	r2, [pc, #648]	@ (8005908 <StartDefaultTask+0x1f98>)
 800567e:	48a3      	ldr	r0, [pc, #652]	@ (800590c <StartDefaultTask+0x1f9c>)
 8005680:	f001 f8be 	bl	8006800 <SPIF_ReadSector>
				int val2 = read[0];
 8005684:	4ba0      	ldr	r3, [pc, #640]	@ (8005908 <StartDefaultTask+0x1f98>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
				float store = val1 + (.025 * val2);
 800568c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8005690:	f7fa ff28 	bl	80004e4 <__aeabi_i2d>
 8005694:	4604      	mov	r4, r0
 8005696:	460d      	mov	r5, r1
 8005698:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 800569c:	f7fa ff22 	bl	80004e4 <__aeabi_i2d>
 80056a0:	a395      	add	r3, pc, #596	@ (adr r3, 80058f8 <StartDefaultTask+0x1f88>)
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	f7fa ff87 	bl	80005b8 <__aeabi_dmul>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4620      	mov	r0, r4
 80056b0:	4629      	mov	r1, r5
 80056b2:	f7fa fdcb 	bl	800024c <__adddf3>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4610      	mov	r0, r2
 80056bc:	4619      	mov	r1, r3
 80056be:	f7fb fa53 	bl	8000b68 <__aeabi_d2f>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

				sprintf(toPrint, "%c%s%0.3f", 'k', str, store);
 80056c8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80056cc:	f7fa ff1c 	bl	8000508 <__aeabi_f2d>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80056d8:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80056dc:	e9cd 2300 	strd	r2, r3, [sp]
 80056e0:	460b      	mov	r3, r1
 80056e2:	226b      	movs	r2, #107	@ 0x6b
 80056e4:	498a      	ldr	r1, [pc, #552]	@ (8005910 <StartDefaultTask+0x1fa0>)
 80056e6:	f006 f9c1 	bl	800ba6c <siprintf>
				LCDPrint(toPrint);
 80056ea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fd fc74 	bl	8002fdc <LCDPrint>

				lastDC = dispCount;
 80056f4:	4b82      	ldr	r3, [pc, #520]	@ (8005900 <StartDefaultTask+0x1f90>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a86      	ldr	r2, [pc, #536]	@ (8005914 <StartDefaultTask+0x1fa4>)
 80056fa:	6013      	str	r3, [r2, #0]
			while (millis() - timer < 5000) {
 80056fc:	f7fc fb64 	bl	8001dc8 <millis>
 8005700:	4602      	mov	r2, r0
 8005702:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f241 3287 	movw	r2, #4999	@ 0x1387
 800570c:	4293      	cmp	r3, r2
 800570e:	f67f af2b 	bls.w	8005568 <StartDefaultTask+0x1bf8>
			  }
			}
			//post loop (pressed button)
			//change the standby to the stored that was selected and call it a day freq will update and display
			if (valid) {
 8005712:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8005716:	2b00      	cmp	r3, #0
 8005718:	d028      	beq.n	800576c <StartDefaultTask+0x1dfc>
//			  SM = EEPROM.read(eepDisplay[dispCount] + 7);
//			  SK = EEPROM.read(eepDisplay[dispCount] + 8) * 25;
			  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 800571a:	4b79      	ldr	r3, [pc, #484]	@ (8005900 <StartDefaultTask+0x1f90>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a79      	ldr	r2, [pc, #484]	@ (8005904 <StartDefaultTask+0x1f94>)
 8005720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005724:	4619      	mov	r1, r3
 8005726:	2307      	movs	r3, #7
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	2301      	movs	r3, #1
 800572c:	4a76      	ldr	r2, [pc, #472]	@ (8005908 <StartDefaultTask+0x1f98>)
 800572e:	4877      	ldr	r0, [pc, #476]	@ (800590c <StartDefaultTask+0x1f9c>)
 8005730:	f001 f866 	bl	8006800 <SPIF_ReadSector>
			  SM = read[0];
 8005734:	4b74      	ldr	r3, [pc, #464]	@ (8005908 <StartDefaultTask+0x1f98>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	4b77      	ldr	r3, [pc, #476]	@ (8005918 <StartDefaultTask+0x1fa8>)
 800573c:	601a      	str	r2, [r3, #0]
			  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 800573e:	4b70      	ldr	r3, [pc, #448]	@ (8005900 <StartDefaultTask+0x1f90>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a70      	ldr	r2, [pc, #448]	@ (8005904 <StartDefaultTask+0x1f94>)
 8005744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005748:	4619      	mov	r1, r3
 800574a:	2308      	movs	r3, #8
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	2301      	movs	r3, #1
 8005750:	4a6d      	ldr	r2, [pc, #436]	@ (8005908 <StartDefaultTask+0x1f98>)
 8005752:	486e      	ldr	r0, [pc, #440]	@ (800590c <StartDefaultTask+0x1f9c>)
 8005754:	f001 f854 	bl	8006800 <SPIF_ReadSector>
			  SK = read[0] * 25;
 8005758:	4b6b      	ldr	r3, [pc, #428]	@ (8005908 <StartDefaultTask+0x1f98>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009a      	lsls	r2, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	4a6c      	ldr	r2, [pc, #432]	@ (800591c <StartDefaultTask+0x1fac>)
 800576a:	6013      	str	r3, [r2, #0]
			}
			dispCount = 0;
 800576c:	4b64      	ldr	r3, [pc, #400]	@ (8005900 <StartDefaultTask+0x1f90>)
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
			lastDC = 0;
 8005772:	4b68      	ldr	r3, [pc, #416]	@ (8005914 <StartDefaultTask+0x1fa4>)
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
			pause = false;
 8005778:	4b69      	ldr	r3, [pc, #420]	@ (8005920 <StartDefaultTask+0x1fb0>)
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
			bscroll = false;
 800577e:	4b69      	ldr	r3, [pc, #420]	@ (8005924 <StartDefaultTask+0x1fb4>)
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
			HAL_Delay(500);
 8005784:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005788:	f001 fc62 	bl	8007050 <HAL_Delay>
			LCDPrint("f");
 800578c:	4866      	ldr	r0, [pc, #408]	@ (8005928 <StartDefaultTask+0x1fb8>)
 800578e:	f7fd fc25 	bl	8002fdc <LCDPrint>
		  }
		}
	  }
	  last = millis();
 8005792:	f7fc fb19 	bl	8001dc8 <millis>
 8005796:	4603      	mov	r3, r0
 8005798:	4a64      	ldr	r2, [pc, #400]	@ (800592c <StartDefaultTask+0x1fbc>)
 800579a:	6013      	str	r3, [r2, #0]
	}

	// If count has changed print the new value to serial
	if (vol != vol_last) { // mode v
 800579c:	4b64      	ldr	r3, [pc, #400]	@ (8005930 <StartDefaultTask+0x1fc0>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b64      	ldr	r3, [pc, #400]	@ (8005934 <StartDefaultTask+0x1fc4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d04e      	beq.n	8005846 <StartDefaultTask+0x1ed6>
	  int V = vol + 48;
 80057a8:	4b61      	ldr	r3, [pc, #388]	@ (8005930 <StartDefaultTask+0x1fc0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3330      	adds	r3, #48	@ 0x30
 80057ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	  int S = squelch + 48;
 80057b2:	4b61      	ldr	r3, [pc, #388]	@ (8005938 <StartDefaultTask+0x1fc8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3330      	adds	r3, #48	@ 0x30
 80057b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	  char v = (char)V;
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
	  char s = (char)S;
 80057c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c8:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
	  char VSfinal[3] = {v,s,0};
 80057cc:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80057d0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80057d4:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80057de:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80057e2:	f897 20de 	ldrb.w	r2, [r7, #222]	@ 0xde
 80057e6:	705a      	strb	r2, [r3, #1]
 80057e8:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80057ec:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80057f0:	2200      	movs	r2, #0
 80057f2:	709a      	strb	r2, [r3, #2]
	  Sender(VSfinal,2); //set vol/squelch
 80057f4:	f107 0320 	add.w	r3, r7, #32
 80057f8:	2102      	movs	r1, #2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fd ffbe 	bl	800377c <Sender>

//	  Serial2.print("v");
//	  printFloat2(freq,3);
//	  Serial2.print(vol);
//	  Serial2.println("");
	  sprintf(toPrint, "%c%0.3f%d", 'v', freq, vol);
 8005800:	4b4e      	ldr	r3, [pc, #312]	@ (800593c <StartDefaultTask+0x1fcc>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4618      	mov	r0, r3
 8005806:	f7fa fe7f 	bl	8000508 <__aeabi_f2d>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4948      	ldr	r1, [pc, #288]	@ (8005930 <StartDefaultTask+0x1fc0>)
 8005810:	6809      	ldr	r1, [r1, #0]
 8005812:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8005816:	9102      	str	r1, [sp, #8]
 8005818:	e9cd 2300 	strd	r2, r3, [sp]
 800581c:	2276      	movs	r2, #118	@ 0x76
 800581e:	4948      	ldr	r1, [pc, #288]	@ (8005940 <StartDefaultTask+0x1fd0>)
 8005820:	f006 f924 	bl	800ba6c <siprintf>
	  LCDPrint(toPrint);
 8005824:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8005828:	4618      	mov	r0, r3
 800582a:	f7fd fbd7 	bl	8002fdc <LCDPrint>

	  vol_last = vol;
 800582e:	4b40      	ldr	r3, [pc, #256]	@ (8005930 <StartDefaultTask+0x1fc0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a40      	ldr	r2, [pc, #256]	@ (8005934 <StartDefaultTask+0x1fc4>)
 8005834:	6013      	str	r3, [r2, #0]
	  last = millis();
 8005836:	f7fc fac7 	bl	8001dc8 <millis>
 800583a:	4603      	mov	r3, r0
 800583c:	4a3b      	ldr	r2, [pc, #236]	@ (800592c <StartDefaultTask+0x1fbc>)
 800583e:	6013      	str	r3, [r2, #0]
	  temp = true;
 8005840:	4b40      	ldr	r3, [pc, #256]	@ (8005944 <StartDefaultTask+0x1fd4>)
 8005842:	2201      	movs	r2, #1
 8005844:	701a      	strb	r2, [r3, #0]
	}
	if (squelch != squelch_last) { // mode s
 8005846:	4b3c      	ldr	r3, [pc, #240]	@ (8005938 <StartDefaultTask+0x1fc8>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b3f      	ldr	r3, [pc, #252]	@ (8005948 <StartDefaultTask+0x1fd8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d07c      	beq.n	800594c <StartDefaultTask+0x1fdc>
	  int V = vol + 48;
 8005852:	4b37      	ldr	r3, [pc, #220]	@ (8005930 <StartDefaultTask+0x1fc0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3330      	adds	r3, #48	@ 0x30
 8005858:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	  int S = squelch + 48;
 800585c:	4b36      	ldr	r3, [pc, #216]	@ (8005938 <StartDefaultTask+0x1fc8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3330      	adds	r3, #48	@ 0x30
 8005862:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	  char v = (char)V;
 8005866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800586a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
	  char s = (char)S;
 800586e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005872:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
	  char VSfinal[3] = {v,s,0};
 8005876:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800587a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800587e:	f897 20d3 	ldrb.w	r2, [r7, #211]	@ 0xd3
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005888:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800588c:	f897 20d2 	ldrb.w	r2, [r7, #210]	@ 0xd2
 8005890:	705a      	strb	r2, [r3, #1]
 8005892:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005896:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800589a:	2200      	movs	r2, #0
 800589c:	709a      	strb	r2, [r3, #2]
	  Sender(VSfinal,2);
 800589e:	f107 031c 	add.w	r3, r7, #28
 80058a2:	2102      	movs	r1, #2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fd ff69 	bl	800377c <Sender>

//	  Serial2.print("s");
//	  printFloat2(freq,3);
//	  Serial2.print(squelch); //set vol/squelch
//	  Serial2.println("");
	  sprintf(toPrint, "%c%0.3f%d", 's', freq, squelch);
 80058aa:	4b24      	ldr	r3, [pc, #144]	@ (800593c <StartDefaultTask+0x1fcc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fa fe2a 	bl	8000508 <__aeabi_f2d>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	491f      	ldr	r1, [pc, #124]	@ (8005938 <StartDefaultTask+0x1fc8>)
 80058ba:	6809      	ldr	r1, [r1, #0]
 80058bc:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80058c0:	9102      	str	r1, [sp, #8]
 80058c2:	e9cd 2300 	strd	r2, r3, [sp]
 80058c6:	2273      	movs	r2, #115	@ 0x73
 80058c8:	491d      	ldr	r1, [pc, #116]	@ (8005940 <StartDefaultTask+0x1fd0>)
 80058ca:	f006 f8cf 	bl	800ba6c <siprintf>
	  LCDPrint(toPrint);
 80058ce:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fd fb82 	bl	8002fdc <LCDPrint>

	  squelch_last = squelch;
 80058d8:	4b17      	ldr	r3, [pc, #92]	@ (8005938 <StartDefaultTask+0x1fc8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005948 <StartDefaultTask+0x1fd8>)
 80058de:	6013      	str	r3, [r2, #0]
	  last = millis();
 80058e0:	f7fc fa72 	bl	8001dc8 <millis>
 80058e4:	4603      	mov	r3, r0
 80058e6:	4a11      	ldr	r2, [pc, #68]	@ (800592c <StartDefaultTask+0x1fbc>)
 80058e8:	6013      	str	r3, [r2, #0]
	  temp = true;
 80058ea:	4b16      	ldr	r3, [pc, #88]	@ (8005944 <StartDefaultTask+0x1fd4>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	e02c      	b.n	800594c <StartDefaultTask+0x1fdc>
 80058f2:	bf00      	nop
 80058f4:	f3af 8000 	nop.w
 80058f8:	9999999a 	.word	0x9999999a
 80058fc:	3f999999 	.word	0x3f999999
 8005900:	20000710 	.word	0x20000710
 8005904:	200006d0 	.word	0x200006d0
 8005908:	2000072c 	.word	0x2000072c
 800590c:	2000069c 	.word	0x2000069c
 8005910:	0800e04c 	.word	0x0800e04c
 8005914:	2000078c 	.word	0x2000078c
 8005918:	2000000c 	.word	0x2000000c
 800591c:	200006c0 	.word	0x200006c0
 8005920:	20000010 	.word	0x20000010
 8005924:	20000718 	.word	0x20000718
 8005928:	0800e028 	.word	0x0800e028
 800592c:	20000770 	.word	0x20000770
 8005930:	200006c4 	.word	0x200006c4
 8005934:	20000790 	.word	0x20000790
 8005938:	200006c8 	.word	0x200006c8
 800593c:	20000000 	.word	0x20000000
 8005940:	0800e040 	.word	0x0800e040
 8005944:	20000728 	.word	0x20000728
 8005948:	20000794 	.word	0x20000794
	}
	if (freq != freq_last || Standby != sfreq_last) { // mode f
 800594c:	4bca      	ldr	r3, [pc, #808]	@ (8005c78 <StartDefaultTask+0x2308>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4aca      	ldr	r2, [pc, #808]	@ (8005c7c <StartDefaultTask+0x230c>)
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	4611      	mov	r1, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f7fb f99a 	bl	8000c90 <__aeabi_fcmpeq>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <StartDefaultTask+0x200a>
 8005962:	4bc7      	ldr	r3, [pc, #796]	@ (8005c80 <StartDefaultTask+0x2310>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4ac7      	ldr	r2, [pc, #796]	@ (8005c84 <StartDefaultTask+0x2314>)
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	4611      	mov	r1, r2
 800596c:	4618      	mov	r0, r3
 800596e:	f7fb f98f 	bl	8000c90 <__aeabi_fcmpeq>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	f040 80b2 	bne.w	8005ade <StartDefaultTask+0x216e>
	  int MA = MHz - 48;
 800597a:	4bc3      	ldr	r3, [pc, #780]	@ (8005c88 <StartDefaultTask+0x2318>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3b30      	subs	r3, #48	@ 0x30
 8005980:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  int KA = (KHz/25) + 48;
 8005984:	4bc1      	ldr	r3, [pc, #772]	@ (8005c8c <StartDefaultTask+0x231c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4ac1      	ldr	r2, [pc, #772]	@ (8005c90 <StartDefaultTask+0x2320>)
 800598a:	fb82 1203 	smull	r1, r2, r2, r3
 800598e:	10d2      	asrs	r2, r2, #3
 8005990:	17db      	asrs	r3, r3, #31
 8005992:	1ad2      	subs	r2, r2, r3
 8005994:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005998:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800599c:	3230      	adds	r2, #48	@ 0x30
 800599e:	601a      	str	r2, [r3, #0]
	  char m = (char)MA;
 80059a0:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80059a4:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80059a8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80059ac:	701a      	strb	r2, [r3, #0]
	  char k = (char)KA;
 80059ae:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80059b2:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 80059b6:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80059ba:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	701a      	strb	r2, [r3, #0]
	  char Mfinal[3] = {m,k,0};
 80059c2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80059c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80059ca:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80059ce:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 80059d2:	7812      	ldrb	r2, [r2, #0]
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80059da:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80059de:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80059e2:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 80059e6:	7812      	ldrb	r2, [r2, #0]
 80059e8:	705a      	strb	r2, [r3, #1]
 80059ea:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80059ee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80059f2:	2200      	movs	r2, #0
 80059f4:	709a      	strb	r2, [r3, #2]
	  Sender(Mfinal, 0); //set active
 80059f6:	f107 0318 	add.w	r3, r7, #24
 80059fa:	2100      	movs	r1, #0
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fd febd 	bl	800377c <Sender>

	  MA = SM - 48;
 8005a02:	4ba4      	ldr	r3, [pc, #656]	@ (8005c94 <StartDefaultTask+0x2324>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3b30      	subs	r3, #48	@ 0x30
 8005a08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  KA = (SK/25) + 48;
 8005a0c:	4ba2      	ldr	r3, [pc, #648]	@ (8005c98 <StartDefaultTask+0x2328>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a9f      	ldr	r2, [pc, #636]	@ (8005c90 <StartDefaultTask+0x2320>)
 8005a12:	fb82 1203 	smull	r1, r2, r2, r3
 8005a16:	10d2      	asrs	r2, r2, #3
 8005a18:	17db      	asrs	r3, r3, #31
 8005a1a:	1ad2      	subs	r2, r2, r3
 8005a1c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005a20:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005a24:	3230      	adds	r2, #48	@ 0x30
 8005a26:	601a      	str	r2, [r3, #0]
	  m = (char)MA;
 8005a28:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005a2c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8005a30:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8005a34:	701a      	strb	r2, [r3, #0]
	  k = (char)KA;
 8005a36:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005a3a:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8005a3e:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005a42:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	701a      	strb	r2, [r3, #0]
	  char Sfinal[3] = {m,k,0};
 8005a4a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005a4e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005a52:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005a56:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 8005a5a:	7812      	ldrb	r2, [r2, #0]
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005a62:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005a66:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005a6a:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8005a6e:	7812      	ldrb	r2, [r2, #0]
 8005a70:	705a      	strb	r2, [r3, #1]
 8005a72:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005a76:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	709a      	strb	r2, [r3, #2]
	  Sender(Sfinal, 1); //set standby
 8005a7e:	f107 0314 	add.w	r3, r7, #20
 8005a82:	2101      	movs	r1, #1
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fd fe79 	bl	800377c <Sender>

//	  Serial2.print("f");
//	  printFloat2(freq,3);
//	  printFloat2(Standby,3);
//	  Serial2.println("");
	  sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8005a8a:	4b7b      	ldr	r3, [pc, #492]	@ (8005c78 <StartDefaultTask+0x2308>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fa fd3a 	bl	8000508 <__aeabi_f2d>
 8005a94:	4604      	mov	r4, r0
 8005a96:	460d      	mov	r5, r1
 8005a98:	4b79      	ldr	r3, [pc, #484]	@ (8005c80 <StartDefaultTask+0x2310>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fa fd33 	bl	8000508 <__aeabi_f2d>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8005aaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005aae:	e9cd 4500 	strd	r4, r5, [sp]
 8005ab2:	2266      	movs	r2, #102	@ 0x66
 8005ab4:	4979      	ldr	r1, [pc, #484]	@ (8005c9c <StartDefaultTask+0x232c>)
 8005ab6:	f005 ffd9 	bl	800ba6c <siprintf>
	  LCDPrint(toPrint);
 8005aba:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fd fa8c 	bl	8002fdc <LCDPrint>

	  sfreq_last = Standby;
 8005ac4:	4b6e      	ldr	r3, [pc, #440]	@ (8005c80 <StartDefaultTask+0x2310>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8005c84 <StartDefaultTask+0x2314>)
 8005aca:	6013      	str	r3, [r2, #0]
	  freq_last = freq;
 8005acc:	4b6a      	ldr	r3, [pc, #424]	@ (8005c78 <StartDefaultTask+0x2308>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a6a      	ldr	r2, [pc, #424]	@ (8005c7c <StartDefaultTask+0x230c>)
 8005ad2:	6013      	str	r3, [r2, #0]
	  last = millis();
 8005ad4:	f7fc f978 	bl	8001dc8 <millis>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4a71      	ldr	r2, [pc, #452]	@ (8005ca0 <StartDefaultTask+0x2330>)
 8005adc:	6013      	str	r3, [r2, #0]
	}
	if (micgain != last_mic) {
 8005ade:	4b71      	ldr	r3, [pc, #452]	@ (8005ca4 <StartDefaultTask+0x2334>)
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	4b71      	ldr	r3, [pc, #452]	@ (8005ca8 <StartDefaultTask+0x2338>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d063      	beq.n	8005bb2 <StartDefaultTask+0x2242>
	  int M = micgain + 48;
 8005aea:	4b6e      	ldr	r3, [pc, #440]	@ (8005ca4 <StartDefaultTask+0x2334>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af6:	3230      	adds	r2, #48	@ 0x30
 8005af8:	601a      	str	r2, [r3, #0]
	  int S = sidetone + 48;
 8005afa:	4b6c      	ldr	r3, [pc, #432]	@ (8005cac <StartDefaultTask+0x233c>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005b02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005b06:	3230      	adds	r2, #48	@ 0x30
 8005b08:	601a      	str	r2, [r3, #0]
	  char m = (char)M;
 8005b0a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005b0e:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8005b12:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005b16:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	701a      	strb	r2, [r3, #0]
	  char s = (char)S;
 8005b1e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005b22:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8005b26:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005b2a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	701a      	strb	r2, [r3, #0]
	  char MSfinal[3] = {m,s,0};
 8005b32:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005b36:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005b3a:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005b3e:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 8005b42:	7812      	ldrb	r2, [r2, #0]
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005b4a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005b4e:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005b52:	f5a2 7287 	sub.w	r2, r2, #270	@ 0x10e
 8005b56:	7812      	ldrb	r2, [r2, #0]
 8005b58:	705a      	strb	r2, [r3, #1]
 8005b5a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005b5e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005b62:	2200      	movs	r2, #0
 8005b64:	709a      	strb	r2, [r3, #2]
	  Sender(MSfinal,3); //set vol/squelch
 8005b66:	f107 0310 	add.w	r3, r7, #16
 8005b6a:	2103      	movs	r1, #3
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fd fe05 	bl	800377c <Sender>

//	  Serial2.print("m");
//	  printFloat2(freq,3);
//	  Serial2.print(micgain);
//	  Serial2.println("");
	  sprintf(toPrint, "%c%0.3f%d", 'm', freq, micgain);
 8005b72:	4b41      	ldr	r3, [pc, #260]	@ (8005c78 <StartDefaultTask+0x2308>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fa fcc6 	bl	8000508 <__aeabi_f2d>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4948      	ldr	r1, [pc, #288]	@ (8005ca4 <StartDefaultTask+0x2334>)
 8005b82:	6809      	ldr	r1, [r1, #0]
 8005b84:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8005b88:	9102      	str	r1, [sp, #8]
 8005b8a:	e9cd 2300 	strd	r2, r3, [sp]
 8005b8e:	226d      	movs	r2, #109	@ 0x6d
 8005b90:	4947      	ldr	r1, [pc, #284]	@ (8005cb0 <StartDefaultTask+0x2340>)
 8005b92:	f005 ff6b 	bl	800ba6c <siprintf>
	  LCDPrint(toPrint);
 8005b96:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fd fa1e 	bl	8002fdc <LCDPrint>

	  last_mic = micgain;
 8005ba0:	4b40      	ldr	r3, [pc, #256]	@ (8005ca4 <StartDefaultTask+0x2334>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a40      	ldr	r2, [pc, #256]	@ (8005ca8 <StartDefaultTask+0x2338>)
 8005ba6:	6013      	str	r3, [r2, #0]
	  last = millis();
 8005ba8:	f7fc f90e 	bl	8001dc8 <millis>
 8005bac:	4603      	mov	r3, r0
 8005bae:	4a3c      	ldr	r2, [pc, #240]	@ (8005ca0 <StartDefaultTask+0x2330>)
 8005bb0:	6013      	str	r3, [r2, #0]
	}
	if (last_side != sidetone) {
 8005bb2:	4b40      	ldr	r3, [pc, #256]	@ (8005cb4 <StartDefaultTask+0x2344>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8005cac <StartDefaultTask+0x233c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	f43d aee0 	beq.w	8003980 <StartDefaultTask+0x10>
	  int M = micgain + 48;
 8005bc0:	4b38      	ldr	r3, [pc, #224]	@ (8005ca4 <StartDefaultTask+0x2334>)
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005bc8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005bcc:	3230      	adds	r2, #48	@ 0x30
 8005bce:	601a      	str	r2, [r3, #0]
	  int S = sidetone + 48;
 8005bd0:	4b36      	ldr	r3, [pc, #216]	@ (8005cac <StartDefaultTask+0x233c>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005bd8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005bdc:	3230      	adds	r2, #48	@ 0x30
 8005bde:	601a      	str	r2, [r3, #0]
	  char m = (char)M;
 8005be0:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005be4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8005be8:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005bec:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	701a      	strb	r2, [r3, #0]
	  char s = (char)S;
 8005bf4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005bf8:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8005bfc:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005c00:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	701a      	strb	r2, [r3, #0]
	  char MSfinal[3] = {m,s,0};
 8005c08:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005c0c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005c10:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005c14:	f2a2 1219 	subw	r2, r2, #281	@ 0x119
 8005c18:	7812      	ldrb	r2, [r2, #0]
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005c20:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005c24:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8005c28:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	705a      	strb	r2, [r3, #1]
 8005c30:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8005c34:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005c38:	2200      	movs	r2, #0
 8005c3a:	709a      	strb	r2, [r3, #2]
	  Sender(MSfinal,3); //set vol/squelch
 8005c3c:	f107 030c 	add.w	r3, r7, #12
 8005c40:	2103      	movs	r1, #3
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fd fd9a 	bl	800377c <Sender>
//	  Serial2.print("t");
//	  printFloat2(freq,3);
//	  Serial2.print(sidetone);
//	  Serial2.println("");

	  sprintf(toPrint, "%c%0.3f%d", 't', freq, sidetone);
 8005c48:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <StartDefaultTask+0x2308>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fa fc5b 	bl	8000508 <__aeabi_f2d>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4915      	ldr	r1, [pc, #84]	@ (8005cac <StartDefaultTask+0x233c>)
 8005c58:	6809      	ldr	r1, [r1, #0]
 8005c5a:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8005c5e:	9102      	str	r1, [sp, #8]
 8005c60:	e9cd 2300 	strd	r2, r3, [sp]
 8005c64:	2274      	movs	r2, #116	@ 0x74
 8005c66:	4912      	ldr	r1, [pc, #72]	@ (8005cb0 <StartDefaultTask+0x2340>)
 8005c68:	f005 ff00 	bl	800ba6c <siprintf>
	  LCDPrint(toPrint);
 8005c6c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fd f9b3 	bl	8002fdc <LCDPrint>
 8005c76:	e01f      	b.n	8005cb8 <StartDefaultTask+0x2348>
 8005c78:	20000000 	.word	0x20000000
 8005c7c:	20000028 	.word	0x20000028
 8005c80:	20000008 	.word	0x20000008
 8005c84:	2000002c 	.word	0x2000002c
 8005c88:	20000004 	.word	0x20000004
 8005c8c:	200006bc 	.word	0x200006bc
 8005c90:	51eb851f 	.word	0x51eb851f
 8005c94:	2000000c 	.word	0x2000000c
 8005c98:	200006c0 	.word	0x200006c0
 8005c9c:	0800e02c 	.word	0x0800e02c
 8005ca0:	20000770 	.word	0x20000770
 8005ca4:	20000014 	.word	0x20000014
 8005ca8:	20000030 	.word	0x20000030
 8005cac:	20000018 	.word	0x20000018
 8005cb0:	0800e040 	.word	0x0800e040
 8005cb4:	20000034 	.word	0x20000034

	  last_side = sidetone;
 8005cb8:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <StartDefaultTask+0x2360>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a05      	ldr	r2, [pc, #20]	@ (8005cd4 <StartDefaultTask+0x2364>)
 8005cbe:	6013      	str	r3, [r2, #0]
	  last = millis();
 8005cc0:	f7fc f882 	bl	8001dc8 <millis>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	4a04      	ldr	r2, [pc, #16]	@ (8005cd8 <StartDefaultTask+0x2368>)
 8005cc8:	6013      	str	r3, [r2, #0]
  {
 8005cca:	f7fd be59 	b.w	8003980 <StartDefaultTask+0x10>
 8005cce:	bf00      	nop
 8005cd0:	20000018 	.word	0x20000018
 8005cd4:	20000034 	.word	0x20000034
 8005cd8:	20000770 	.word	0x20000770

08005cdc <StartRxThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRxThread */
void StartRxThread(void const * argument)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRxThread */
  /* Infinite loop */
  uint8_t response = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	response = HAL_UART_Receive(&huart4, rxbuff, 1, 1000);
 8005ce8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005cec:	2201      	movs	r2, #1
 8005cee:	4925      	ldr	r1, [pc, #148]	@ (8005d84 <StartRxThread+0xa8>)
 8005cf0:	4825      	ldr	r0, [pc, #148]	@ (8005d88 <StartRxThread+0xac>)
 8005cf2:	f003 fafe 	bl	80092f2 <HAL_UART_Receive>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	73fb      	strb	r3, [r7, #15]
	if(response==HAL_OK) //if transfer is successful
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d12b      	bne.n	8005d58 <StartRxThread+0x7c>
	{
		if (faultcounter0 > 2)
 8005d00:	4b22      	ldr	r3, [pc, #136]	@ (8005d8c <StartRxThread+0xb0>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	dd02      	ble.n	8005d0e <StartRxThread+0x32>
		{
			glcd_clearline(7);
 8005d08:	2007      	movs	r0, #7
 8005d0a:	f7fb fd0f 	bl	800172c <glcd_clearline>
		}
		faultcounter0 = 0;
 8005d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8005d8c <StartRxThread+0xb0>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

		rxmsg[rxcount] = rxbuff[0];
 8005d14:	4b1e      	ldr	r3, [pc, #120]	@ (8005d90 <StartRxThread+0xb4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1a      	ldr	r2, [pc, #104]	@ (8005d84 <StartRxThread+0xa8>)
 8005d1a:	7811      	ldrb	r1, [r2, #0]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d94 <StartRxThread+0xb8>)
 8005d1e:	54d1      	strb	r1, [r2, r3]
		rxcount++;
 8005d20:	4b1b      	ldr	r3, [pc, #108]	@ (8005d90 <StartRxThread+0xb4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	4a1a      	ldr	r2, [pc, #104]	@ (8005d90 <StartRxThread+0xb4>)
 8005d28:	6013      	str	r3, [r2, #0]
		if (rxcount > 24) {
 8005d2a:	4b19      	ldr	r3, [pc, #100]	@ (8005d90 <StartRxThread+0xb4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b18      	cmp	r3, #24
 8005d30:	dd02      	ble.n	8005d38 <StartRxThread+0x5c>
			rxcount = 0;
 8005d32:	4b17      	ldr	r3, [pc, #92]	@ (8005d90 <StartRxThread+0xb4>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
		}

		if (rxbuff[0] == '\n')
 8005d38:	4b12      	ldr	r3, [pc, #72]	@ (8005d84 <StartRxThread+0xa8>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b0a      	cmp	r3, #10
 8005d3e:	d1d3      	bne.n	8005ce8 <StartRxThread+0xc>
		{
			rxmsg[rxcount] = 0;
 8005d40:	4b13      	ldr	r3, [pc, #76]	@ (8005d90 <StartRxThread+0xb4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a13      	ldr	r2, [pc, #76]	@ (8005d94 <StartRxThread+0xb8>)
 8005d46:	2100      	movs	r1, #0
 8005d48:	54d1      	strb	r1, [r2, r3]
			rxcount = 0;
 8005d4a:	4b11      	ldr	r3, [pc, #68]	@ (8005d90 <StartRxThread+0xb4>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
			rxfree = true;
 8005d50:	4b11      	ldr	r3, [pc, #68]	@ (8005d98 <StartRxThread+0xbc>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	e7c7      	b.n	8005ce8 <StartRxThread+0xc>
		}
	}
	else { // no message in 1 seconds
		__HAL_UART_FLUSH_DRREGISTER(&huart4);  // Clear the UART Data Register
 8005d58:	4b0b      	ldr	r3, [pc, #44]	@ (8005d88 <StartRxThread+0xac>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
		rxcount = 0;
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d90 <StartRxThread+0xb4>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
		faultcounter0++;
 8005d64:	4b09      	ldr	r3, [pc, #36]	@ (8005d8c <StartRxThread+0xb0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	4a08      	ldr	r2, [pc, #32]	@ (8005d8c <StartRxThread+0xb0>)
 8005d6c:	6013      	str	r3, [r2, #0]
		if (faultcounter0 > 2) {
 8005d6e:	4b07      	ldr	r3, [pc, #28]	@ (8005d8c <StartRxThread+0xb0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	ddb8      	ble.n	8005ce8 <StartRxThread+0xc>
			glcd_puts("Error 0", 0, 7);
 8005d76:	2207      	movs	r2, #7
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4808      	ldr	r0, [pc, #32]	@ (8005d9c <StartRxThread+0xc0>)
 8005d7c:	f7fb fa9a 	bl	80012b4 <glcd_puts>
	response = HAL_UART_Receive(&huart4, rxbuff, 1, 1000);
 8005d80:	e7b2      	b.n	8005ce8 <StartRxThread+0xc>
 8005d82:	bf00      	nop
 8005d84:	20000734 	.word	0x20000734
 8005d88:	2000052c 	.word	0x2000052c
 8005d8c:	20000758 	.word	0x20000758
 8005d90:	20000754 	.word	0x20000754
 8005d94:	20000738 	.word	0x20000738
 8005d98:	20000761 	.word	0x20000761
 8005d9c:	0800e07c 	.word	0x0800e07c

08005da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a04      	ldr	r2, [pc, #16]	@ (8005dc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d101      	bne.n	8005db6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005db2:	f001 f931 	bl	8007018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40001000 	.word	0x40001000

08005dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005dc8:	b672      	cpsid	i
}
 8005dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005dcc:	bf00      	nop
 8005dce:	e7fd      	b.n	8005dcc <Error_Handler+0x8>

08005dd0 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f001 f939 	bl	8007050 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8005dee:	e002      	b.n	8005df6 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8005df0:	2001      	movs	r0, #1
 8005df2:	f7ff ffed 	bl	8005dd0 <SPIF_Delay>
  while (Handle->Lock)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7b1b      	ldrb	r3, [r3, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f8      	bne.n	8005df0 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	731a      	strb	r2, [r3, #12]
}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	731a      	strb	r2, [r3, #12]
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6858      	ldr	r0, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f001 fcf8 	bl	8007832 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	e002      	b.n	8005e4e <SPIF_CsPin+0x2a>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b09      	cmp	r3, #9
 8005e52:	ddf9      	ble.n	8005e48 <SPIF_CsPin+0x24>
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b088      	sub	sp, #32
 8005e62:	af02      	add	r7, sp, #8
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	f002 fc4a 	bl	800871a <HAL_SPI_TransmitReceive>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b086      	sub	sp, #24
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
 8005ea6:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	f002 f9d4 	bl	8008264 <HAL_SPI_Transmit>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	f002 fafc 	bl	80084ea <HAL_SPI_Receive>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <SPIF_Receive+0x2c>
  {
    retVal = true;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8005f12:	2306      	movs	r3, #6
 8005f14:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8005f16:	2100      	movs	r1, #0
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff83 	bl	8005e24 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8005f1e:	f107 010c 	add.w	r1, r7, #12
 8005f22:	2364      	movs	r3, #100	@ 0x64
 8005f24:	2201      	movs	r2, #1
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ffb7 	bl	8005e9a <SPIF_Transmit>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f083 0301 	eor.w	r3, r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ff70 	bl	8005e24 <SPIF_CsPin>
  return retVal;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8005f56:	2301      	movs	r3, #1
 8005f58:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8005f5a:	2304      	movs	r3, #4
 8005f5c:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8005f5e:	2100      	movs	r1, #0
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff ff5f 	bl	8005e24 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8005f66:	f107 010c 	add.w	r1, r7, #12
 8005f6a:	2364      	movs	r3, #100	@ 0x64
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ff93 	bl	8005e9a <SPIF_Transmit>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f083 0301 	eor.w	r3, r3, #1
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8005f84:	2101      	movs	r1, #1
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff ff4c 	bl	8005e24 <SPIF_CsPin>
  return retVal;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af02      	add	r7, sp, #8
 8005f9c:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8005fa2:	f24a 5305 	movw	r3, #42245	@ 0xa505
 8005fa6:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ff3a 	bl	8005e24 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8005fb0:	f107 0208 	add.w	r2, r7, #8
 8005fb4:	f107 010c 	add.w	r1, r7, #12
 8005fb8:	2364      	movs	r3, #100	@ 0x64
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff ff4d 	bl	8005e5e <SPIF_TransmitReceive>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8005fca:	7a7b      	ldrb	r3, [r7, #9]
 8005fcc:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8005fce:	2101      	movs	r1, #1
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff ff27 	bl	8005e24 <SPIF_CsPin>
  return retVal;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8005fee:	f001 f825 	bl	800703c <HAL_GetTick>
 8005ff2:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	f7ff feeb 	bl	8005dd0 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8005ffa:	f001 f81f 	bl	800703c <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d90a      	bls.n	8006020 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff ffc3 	bl	8005f96 <SPIF_ReadReg1>
 8006010:	4603      	mov	r3, r0
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1ec      	bne.n	8005ff4 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 800601a:	2301      	movs	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
      break;
 800601e:	e000      	b.n	8006022 <SPIF_WaitForWriting+0x42>
      break;
 8006020:	bf00      	nop
    }
  }
  return retVal;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af02      	add	r7, sp, #8
 8006032:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8006034:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 8006038:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 800603e:	2100      	movs	r1, #0
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff feef 	bl	8005e24 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8006046:	f107 020c 	add.w	r2, r7, #12
 800604a:	f107 0110 	add.w	r1, r7, #16
 800604e:	2364      	movs	r3, #100	@ 0x64
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	2304      	movs	r3, #4
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff ff02 	bl	8005e5e <SPIF_TransmitReceive>
 800605a:	4603      	mov	r3, r0
 800605c:	f083 0301 	eor.w	r3, r3, #1
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8006066:	2101      	movs	r1, #1
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff fedb 	bl	8005e24 <SPIF_CsPin>
      break;
 800606e:	e16f      	b.n	8006350 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8006070:	2101      	movs	r1, #1
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fed6 	bl	8005e24 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8006078:	7b7a      	ldrb	r2, [r7, #13]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 800607e:	7bba      	ldrb	r2, [r7, #14]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8006084:	7bfa      	ldrb	r2, [r7, #15]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7a1b      	ldrb	r3, [r3, #8]
 800608e:	2bef      	cmp	r3, #239	@ 0xef
 8006090:	f000 80f0 	beq.w	8006274 <SPIF_FindChip+0x248>
 8006094:	2bef      	cmp	r3, #239	@ 0xef
 8006096:	f300 80e9 	bgt.w	800626c <SPIF_FindChip+0x240>
 800609a:	2bc8      	cmp	r3, #200	@ 0xc8
 800609c:	f300 80e6 	bgt.w	800626c <SPIF_FindChip+0x240>
 80060a0:	2b85      	cmp	r3, #133	@ 0x85
 80060a2:	da0c      	bge.n	80060be <SPIF_FindChip+0x92>
 80060a4:	2b62      	cmp	r3, #98	@ 0x62
 80060a6:	f000 80e7 	beq.w	8006278 <SPIF_FindChip+0x24c>
 80060aa:	2b62      	cmp	r3, #98	@ 0x62
 80060ac:	f300 80de 	bgt.w	800626c <SPIF_FindChip+0x240>
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	f300 80d9 	bgt.w	8006268 <SPIF_FindChip+0x23c>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f300 8090 	bgt.w	80061dc <SPIF_FindChip+0x1b0>
 80060bc:	e0d6      	b.n	800626c <SPIF_FindChip+0x240>
 80060be:	3b85      	subs	r3, #133	@ 0x85
 80060c0:	2b43      	cmp	r3, #67	@ 0x43
 80060c2:	f200 80d3 	bhi.w	800626c <SPIF_FindChip+0x240>
 80060c6:	a201      	add	r2, pc, #4	@ (adr r2, 80060cc <SPIF_FindChip+0xa0>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	0800627d 	.word	0x0800627d
 80060d0:	0800626d 	.word	0x0800626d
 80060d4:	0800626d 	.word	0x0800626d
 80060d8:	0800626d 	.word	0x0800626d
 80060dc:	0800627d 	.word	0x0800627d
 80060e0:	0800626d 	.word	0x0800626d
 80060e4:	0800626d 	.word	0x0800626d
 80060e8:	0800627d 	.word	0x0800627d
 80060ec:	0800626d 	.word	0x0800626d
 80060f0:	0800626d 	.word	0x0800626d
 80060f4:	0800626d 	.word	0x0800626d
 80060f8:	0800626d 	.word	0x0800626d
 80060fc:	0800626d 	.word	0x0800626d
 8006100:	0800626d 	.word	0x0800626d
 8006104:	0800626d 	.word	0x0800626d
 8006108:	0800626d 	.word	0x0800626d
 800610c:	0800626d 	.word	0x0800626d
 8006110:	0800626d 	.word	0x0800626d
 8006114:	0800626d 	.word	0x0800626d
 8006118:	0800626d 	.word	0x0800626d
 800611c:	0800626d 	.word	0x0800626d
 8006120:	0800626d 	.word	0x0800626d
 8006124:	0800626d 	.word	0x0800626d
 8006128:	0800626d 	.word	0x0800626d
 800612c:	0800627d 	.word	0x0800627d
 8006130:	0800626d 	.word	0x0800626d
 8006134:	0800627d 	.word	0x0800627d
 8006138:	0800626d 	.word	0x0800626d
 800613c:	0800627d 	.word	0x0800627d
 8006140:	0800626d 	.word	0x0800626d
 8006144:	0800626d 	.word	0x0800626d
 8006148:	0800626d 	.word	0x0800626d
 800614c:	0800626d 	.word	0x0800626d
 8006150:	0800626d 	.word	0x0800626d
 8006154:	0800626d 	.word	0x0800626d
 8006158:	0800626d 	.word	0x0800626d
 800615c:	0800626d 	.word	0x0800626d
 8006160:	0800626d 	.word	0x0800626d
 8006164:	0800626d 	.word	0x0800626d
 8006168:	0800626d 	.word	0x0800626d
 800616c:	0800627d 	.word	0x0800627d
 8006170:	0800626d 	.word	0x0800626d
 8006174:	0800626d 	.word	0x0800626d
 8006178:	0800626d 	.word	0x0800626d
 800617c:	0800626d 	.word	0x0800626d
 8006180:	0800626d 	.word	0x0800626d
 8006184:	0800626d 	.word	0x0800626d
 8006188:	0800626d 	.word	0x0800626d
 800618c:	0800626d 	.word	0x0800626d
 8006190:	0800626d 	.word	0x0800626d
 8006194:	0800626d 	.word	0x0800626d
 8006198:	0800626d 	.word	0x0800626d
 800619c:	0800626d 	.word	0x0800626d
 80061a0:	0800626d 	.word	0x0800626d
 80061a4:	0800626d 	.word	0x0800626d
 80061a8:	0800626d 	.word	0x0800626d
 80061ac:	0800626d 	.word	0x0800626d
 80061b0:	0800626d 	.word	0x0800626d
 80061b4:	0800627d 	.word	0x0800627d
 80061b8:	0800626d 	.word	0x0800626d
 80061bc:	0800626d 	.word	0x0800626d
 80061c0:	0800627d 	.word	0x0800627d
 80061c4:	0800626d 	.word	0x0800626d
 80061c8:	0800626d 	.word	0x0800626d
 80061cc:	0800626d 	.word	0x0800626d
 80061d0:	0800626d 	.word	0x0800626d
 80061d4:	0800626d 	.word	0x0800626d
 80061d8:	0800627d 	.word	0x0800627d
 80061dc:	3b01      	subs	r3, #1
 80061de:	2b1f      	cmp	r3, #31
 80061e0:	d844      	bhi.n	800626c <SPIF_FindChip+0x240>
 80061e2:	a201      	add	r2, pc, #4	@ (adr r2, 80061e8 <SPIF_FindChip+0x1bc>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	08006281 	.word	0x08006281
 80061ec:	0800626d 	.word	0x0800626d
 80061f0:	0800626d 	.word	0x0800626d
 80061f4:	08006281 	.word	0x08006281
 80061f8:	0800626d 	.word	0x0800626d
 80061fc:	0800626d 	.word	0x0800626d
 8006200:	0800626d 	.word	0x0800626d
 8006204:	0800626d 	.word	0x0800626d
 8006208:	0800626d 	.word	0x0800626d
 800620c:	0800626d 	.word	0x0800626d
 8006210:	0800626d 	.word	0x0800626d
 8006214:	0800626d 	.word	0x0800626d
 8006218:	0800626d 	.word	0x0800626d
 800621c:	0800626d 	.word	0x0800626d
 8006220:	0800626d 	.word	0x0800626d
 8006224:	0800626d 	.word	0x0800626d
 8006228:	0800626d 	.word	0x0800626d
 800622c:	0800626d 	.word	0x0800626d
 8006230:	0800626d 	.word	0x0800626d
 8006234:	0800626d 	.word	0x0800626d
 8006238:	0800626d 	.word	0x0800626d
 800623c:	0800626d 	.word	0x0800626d
 8006240:	0800626d 	.word	0x0800626d
 8006244:	0800626d 	.word	0x0800626d
 8006248:	0800626d 	.word	0x0800626d
 800624c:	0800626d 	.word	0x0800626d
 8006250:	0800626d 	.word	0x0800626d
 8006254:	08006281 	.word	0x08006281
 8006258:	0800626d 	.word	0x0800626d
 800625c:	0800626d 	.word	0x0800626d
 8006260:	0800626d 	.word	0x0800626d
 8006264:	08006281 	.word	0x08006281
 8006268:	2b37      	cmp	r3, #55	@ 0x37
 800626a:	d00b      	beq.n	8006284 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_BOYA:
      dprintf("BOYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8006272:	e008      	b.n	8006286 <SPIF_FindChip+0x25a>
      break;
 8006274:	bf00      	nop
 8006276:	e006      	b.n	8006286 <SPIF_FindChip+0x25a>
      break;
 8006278:	bf00      	nop
 800627a:	e004      	b.n	8006286 <SPIF_FindChip+0x25a>
      break;
 800627c:	bf00      	nop
 800627e:	e002      	b.n	8006286 <SPIF_FindChip+0x25a>
      break;
 8006280:	bf00      	nop
 8006282:	e000      	b.n	8006286 <SPIF_FindChip+0x25a>
      break;
 8006284:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	7a5b      	ldrb	r3, [r3, #9]
 800628a:	3b11      	subs	r3, #17
 800628c:	2b0f      	cmp	r3, #15
 800628e:	d84e      	bhi.n	800632e <SPIF_FindChip+0x302>
 8006290:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <SPIF_FindChip+0x26c>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062d9 	.word	0x080062d9
 800629c:	080062e1 	.word	0x080062e1
 80062a0:	080062e9 	.word	0x080062e9
 80062a4:	080062f1 	.word	0x080062f1
 80062a8:	080062f9 	.word	0x080062f9
 80062ac:	08006301 	.word	0x08006301
 80062b0:	08006309 	.word	0x08006309
 80062b4:	08006311 	.word	0x08006311
 80062b8:	0800631b 	.word	0x0800631b
 80062bc:	0800632f 	.word	0x0800632f
 80062c0:	0800632f 	.word	0x0800632f
 80062c4:	0800632f 	.word	0x0800632f
 80062c8:	0800632f 	.word	0x0800632f
 80062cc:	0800632f 	.word	0x0800632f
 80062d0:	0800632f 	.word	0x0800632f
 80062d4:	08006325 	.word	0x08006325
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 80062de:	e02a      	b.n	8006336 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2204      	movs	r2, #4
 80062e4:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80062e6:	e026      	b.n	8006336 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2208      	movs	r2, #8
 80062ec:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 80062ee:	e022      	b.n	8006336 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2210      	movs	r2, #16
 80062f4:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80062f6:	e01e      	b.n	8006336 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 80062fe:	e01a      	b.n	8006336 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2240      	movs	r2, #64	@ 0x40
 8006304:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 8006306:	e016      	b.n	8006336 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2280      	movs	r2, #128	@ 0x80
 800630c:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 800630e:	e012      	b.n	8006336 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006316:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 8006318:	e00d      	b.n	8006336 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006320:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8006322:	e008      	b.n	8006336 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800632a:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 800632c:	e003      	b.n	8006336 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8006334:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	011a      	lsls	r2, r3, #4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	031b      	lsls	r3, r3, #12
 8006346:	0a1a      	lsrs	r2, r3, #8
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 800634c:	2301      	movs	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop

0800635c <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	@ 0x28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 800636a:	2300      	movs	r3, #0
 800636c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8006370:	2300      	movs	r3, #0
 8006372:	623b      	str	r3, [r7, #32]
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800637a:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	429a      	cmp	r2, r3
 8006384:	f080 8084 	bcs.w	8006490 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	2bff      	cmp	r3, #255	@ 0xff
 800638c:	f200 8082 	bhi.w	8006494 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	429a      	cmp	r2, r3
 8006396:	d901      	bls.n	800639c <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a2:	4413      	add	r3, r2
 80063a4:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff fdad 	bl	8005f06 <SPIF_WriteEnable>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f083 0301 	eor.w	r3, r3, #1
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d16f      	bne.n	8006498 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80063b8:	2100      	movs	r1, #0
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff fd32 	bl	8005e24 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c8:	d322      	bcc.n	8006410 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80063ca:	2312      	movs	r3, #18
 80063cc:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	0e1b      	lsrs	r3, r3, #24
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	0c1b      	lsrs	r3, r3, #16
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	0a1b      	lsrs	r3, r3, #8
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80063ec:	f107 0114 	add.w	r1, r7, #20
 80063f0:	2364      	movs	r3, #100	@ 0x64
 80063f2:	2205      	movs	r2, #5
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f7ff fd50 	bl	8005e9a <SPIF_Transmit>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f083 0301 	eor.w	r3, r3, #1
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d023      	beq.n	800644e <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8006406:	2101      	movs	r1, #1
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff fd0b 	bl	8005e24 <SPIF_CsPin>
        break;
 800640e:	e044      	b.n	800649a <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8006410:	2302      	movs	r3, #2
 8006412:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	0c1b      	lsrs	r3, r3, #16
 8006418:	b2db      	uxtb	r3, r3
 800641a:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	b2db      	uxtb	r3, r3
 8006422:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 800642a:	f107 0114 	add.w	r1, r7, #20
 800642e:	2364      	movs	r3, #100	@ 0x64
 8006430:	2204      	movs	r2, #4
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff fd31 	bl	8005e9a <SPIF_Transmit>
 8006438:	4603      	mov	r3, r0
 800643a:	f083 0301 	eor.w	r3, r3, #1
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8006444:	2101      	movs	r1, #1
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fcec 	bl	8005e24 <SPIF_CsPin>
        break;
 800644c:	e025      	b.n	800649a <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 800644e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff fd1f 	bl	8005e9a <SPIF_Transmit>
 800645c:	4603      	mov	r3, r0
 800645e:	f083 0301 	eor.w	r3, r3, #1
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8006468:	2101      	movs	r1, #1
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7ff fcda 	bl	8005e24 <SPIF_CsPin>
      break;
 8006470:	e013      	b.n	800649a <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8006472:	2101      	movs	r1, #1
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff fcd5 	bl	8005e24 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 800647a:	2164      	movs	r1, #100	@ 0x64
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff fdaf 	bl	8005fe0 <SPIF_WaitForWriting>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800648e:	e004      	b.n	800649a <SPIF_WriteFn+0x13e>
      break;
 8006490:	bf00      	nop
 8006492:	e002      	b.n	800649a <SPIF_WriteFn+0x13e>
      break;
 8006494:	bf00      	nop
 8006496:	e000      	b.n	800649a <SPIF_WriteFn+0x13e>
      break;
 8006498:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7ff fd57 	bl	8005f4e <SPIF_WriteDisable>
  return retVal;
 80064a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3728      	adds	r7, #40	@ 0x28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 80064be:	2100      	movs	r1, #0
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff fcaf 	bl	8005e24 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ce:	d322      	bcc.n	8006516 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 80064d0:	2313      	movs	r3, #19
 80064d2:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	0e1b      	lsrs	r3, r3, #24
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	0c1b      	lsrs	r3, r3, #16
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80064f2:	f107 0110 	add.w	r1, r7, #16
 80064f6:	2364      	movs	r3, #100	@ 0x64
 80064f8:	2205      	movs	r2, #5
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff fccd 	bl	8005e9a <SPIF_Transmit>
 8006500:	4603      	mov	r3, r0
 8006502:	f083 0301 	eor.w	r3, r3, #1
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d023      	beq.n	8006554 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 800650c:	2101      	movs	r1, #1
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f7ff fc88 	bl	8005e24 <SPIF_CsPin>
        break;
 8006514:	e036      	b.n	8006584 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8006516:	2303      	movs	r3, #3
 8006518:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	0c1b      	lsrs	r3, r3, #16
 800651e:	b2db      	uxtb	r3, r3
 8006520:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	0a1b      	lsrs	r3, r3, #8
 8006526:	b2db      	uxtb	r3, r3
 8006528:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8006530:	f107 0110 	add.w	r1, r7, #16
 8006534:	2364      	movs	r3, #100	@ 0x64
 8006536:	2204      	movs	r2, #4
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff fcae 	bl	8005e9a <SPIF_Transmit>
 800653e:	4603      	mov	r3, r0
 8006540:	f083 0301 	eor.w	r3, r3, #1
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d004      	beq.n	8006554 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 800654a:	2101      	movs	r1, #1
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7ff fc69 	bl	8005e24 <SPIF_CsPin>
        break;
 8006552:	e017      	b.n	8006584 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8006554:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff fcb7 	bl	8005ed0 <SPIF_Receive>
 8006562:	4603      	mov	r3, r0
 8006564:	f083 0301 	eor.w	r3, r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d004      	beq.n	8006578 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 800656e:	2101      	movs	r1, #1
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff fc57 	bl	8005e24 <SPIF_CsPin>
      break;
 8006576:	e005      	b.n	8006584 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8006578:	2101      	movs	r1, #1
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff fc52 	bl	8005e24 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b086      	sub	sp, #24
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 800659c:	2300      	movs	r3, #0
 800659e:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d03a      	beq.n	800661c <SPIF_Init+0x8e>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d037      	beq.n	800661c <SPIF_Init+0x8e>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d034      	beq.n	800661c <SPIF_Init+0x8e>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	7a9b      	ldrb	r3, [r3, #10]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d030      	beq.n	800661c <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 80065ba:	2220      	movs	r2, #32
 80065bc:	2100      	movs	r1, #0
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f005 fb36 	bl	800bc30 <memset>
    Handle->HSpi = HSpi;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 80065d0:	887a      	ldrh	r2, [r7, #2]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 80065d6:	2101      	movs	r1, #1
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f7ff fc23 	bl	8005e24 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 80065de:	e002      	b.n	80065e6 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 80065e0:	2001      	movs	r0, #1
 80065e2:	f7ff fbf5 	bl	8005dd0 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 80065e6:	f000 fd29 	bl	800703c <HAL_GetTick>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b13      	cmp	r3, #19
 80065ee:	d9f7      	bls.n	80065e0 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7ff fcac 	bl	8005f4e <SPIF_WriteDisable>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f083 0301 	eor.w	r3, r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f7ff fd12 	bl	800602c <SPIF_FindChip>
 8006608:	4603      	mov	r3, r0
 800660a:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d004      	beq.n	800661c <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	729a      	strb	r2, [r3, #10]
 8006618:	e000      	b.n	800661c <SPIF_Init+0x8e>
      break;
 800661a:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 800661c:	7dfb      	ldrb	r3, [r7, #23]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff fbd8 	bl	8005de6 <SPIF_Lock>
  bool retVal = false;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d262      	bcs.n	8006710 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff fc5b 	bl	8005f06 <SPIF_WriteEnable>
 8006650:	4603      	mov	r3, r0
 8006652:	f083 0301 	eor.w	r3, r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d15b      	bne.n	8006714 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 800665c:	2100      	movs	r1, #0
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fbe0 	bl	8005e24 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800666c:	d322      	bcc.n	80066b4 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 800666e:	2321      	movs	r3, #33	@ 0x21
 8006670:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	0e1b      	lsrs	r3, r3, #24
 8006676:	b2db      	uxtb	r3, r3
 8006678:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	0c1b      	lsrs	r3, r3, #16
 800667e:	b2db      	uxtb	r3, r3
 8006680:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	b2db      	uxtb	r3, r3
 8006688:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8006690:	f107 0108 	add.w	r1, r7, #8
 8006694:	2364      	movs	r3, #100	@ 0x64
 8006696:	2205      	movs	r2, #5
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fbfe 	bl	8005e9a <SPIF_Transmit>
 800669e:	4603      	mov	r3, r0
 80066a0:	f083 0301 	eor.w	r3, r3, #1
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d023      	beq.n	80066f2 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80066aa:	2101      	movs	r1, #1
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff fbb9 	bl	8005e24 <SPIF_CsPin>
        break;
 80066b2:	e030      	b.n	8006716 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 80066b4:	2320      	movs	r3, #32
 80066b6:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	0c1b      	lsrs	r3, r3, #16
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80066ce:	f107 0108 	add.w	r1, r7, #8
 80066d2:	2364      	movs	r3, #100	@ 0x64
 80066d4:	2204      	movs	r2, #4
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff fbdf 	bl	8005e9a <SPIF_Transmit>
 80066dc:	4603      	mov	r3, r0
 80066de:	f083 0301 	eor.w	r3, r3, #1
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80066e8:	2101      	movs	r1, #1
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fb9a 	bl	8005e24 <SPIF_CsPin>
        break;
 80066f0:	e011      	b.n	8006716 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 80066f2:	2101      	movs	r1, #1
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff fb95 	bl	8005e24 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 80066fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff fc6e 	bl	8005fe0 <SPIF_WaitForWriting>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
 800670e:	e002      	b.n	8006716 <SPIF_EraseSector+0xf0>
      break;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <SPIF_EraseSector+0xf0>
      break;
 8006714:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff fc19 	bl	8005f4e <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff fb75 	bl	8005e0c <SPIF_UnLock>
  return retVal;
 8006722:	7dfb      	ldrb	r3, [r7, #23]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <SPIF_WriteSector>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WriteSector(SPIF_HandleTypeDef *Handle, uint32_t SectorNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08c      	sub	sp, #48	@ 0x30
 8006730:	af02      	add	r7, sp, #8
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f7ff fb53 	bl	8005de6 <SPIF_Lock>
  bool retVal = true;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  do
  {
    if (Offset >= SPIF_SECTOR_SIZE)
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674c:	d303      	bcc.n	8006756 <SPIF_WriteSector+0x2a>
    {
      retVal = false;
 800674e:	2300      	movs	r3, #0
 8006750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8006754:	e04b      	b.n	80067ee <SPIF_WriteSector+0xc2>
    }
    if (Size > (SPIF_SECTOR_SIZE - Offset))
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d903      	bls.n	800676a <SPIF_WriteSector+0x3e>
    {
      Size = SPIF_SECTOR_SIZE - Offset;
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8006768:	603b      	str	r3, [r7, #0]
    }
    uint32_t bytesWritten = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	623b      	str	r3, [r7, #32]
    uint32_t pageNumber = SectorNumber * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	61fb      	str	r3, [r7, #28]
    pageNumber += Offset / SPIF_PAGE_SIZE;
 8006774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006776:	0a1b      	lsrs	r3, r3, #8
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	61fb      	str	r3, [r7, #28]
    uint32_t remainingBytes = Size;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	61bb      	str	r3, [r7, #24]
    uint32_t pageOffset = Offset % SPIF_PAGE_SIZE;
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	b2db      	uxtb	r3, r3
 8006786:	617b      	str	r3, [r7, #20]
    while (remainingBytes > 0 && pageNumber < ((SectorNumber + 1) * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE)))
 8006788:	e028      	b.n	80067dc <SPIF_WriteSector+0xb0>
    {
      uint32_t bytesToWrite = (remainingBytes > (SPIF_PAGE_SIZE - pageOffset)) ? (SPIF_PAGE_SIZE - pageOffset) : remainingBytes;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4293      	cmp	r3, r2
 8006794:	bf28      	it	cs
 8006796:	4613      	movcs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
      if (SPIF_WriteFn(Handle, pageNumber, Data + bytesWritten, bytesToWrite, pageOffset) == false)
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	441a      	add	r2, r3
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	69f9      	ldr	r1, [r7, #28]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff fdd7 	bl	800635c <SPIF_WriteFn>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f083 0301 	eor.w	r3, r3, #1
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <SPIF_WriteSector+0x96>
      {
        retVal = false;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 80067c0:	e015      	b.n	80067ee <SPIF_WriteSector+0xc2>
      }
      bytesWritten += bytesToWrite;
 80067c2:	6a3a      	ldr	r2, [r7, #32]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	4413      	add	r3, r2
 80067c8:	623b      	str	r3, [r7, #32]
      remainingBytes -= bytesToWrite;
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	61bb      	str	r3, [r7, #24]
      pageNumber++;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3301      	adds	r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]
      pageOffset = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
    while (remainingBytes > 0 && pageNumber < ((SectorNumber + 1) * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE)))
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <SPIF_WriteSector+0xc2>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	3301      	adds	r3, #1
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d3cd      	bcc.n	800678a <SPIF_WriteSector+0x5e>
    }
  } while (0);
  SPIF_UnLock(Handle);
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff fb0c 	bl	8005e0c <SPIF_UnLock>
  return retVal;
 80067f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3728      	adds	r7, #40	@ 0x28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <SPIF_ReadSector>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadSector(SPIF_HandleTypeDef *Handle, uint32_t SectorNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff fae9 	bl	8005de6 <SPIF_Lock>
  bool retVal = false;
 8006814:	2300      	movs	r3, #0
 8006816:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_SectorToAddress(SectorNumber) + Offset;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	031b      	lsls	r3, r3, #12
 800681c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800681e:	4413      	add	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_SECTOR_SIZE - Offset;
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8006828:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	429a      	cmp	r2, r3
 8006830:	d901      	bls.n	8006836 <SPIF_ReadSector+0x36>
  {
    Size = maximum;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	69b9      	ldr	r1, [r7, #24]
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff fe35 	bl	80064ac <SPIF_ReadFn>
 8006842:	4603      	mov	r3, r0
 8006844:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff fae0 	bl	8005e0c <SPIF_UnLock>
  return retVal;
 800684c:	7ffb      	ldrb	r3, [r7, #31]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800685e:	4b18      	ldr	r3, [pc, #96]	@ (80068c0 <HAL_MspInit+0x68>)
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	4a17      	ldr	r2, [pc, #92]	@ (80068c0 <HAL_MspInit+0x68>)
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	6193      	str	r3, [r2, #24]
 800686a:	4b15      	ldr	r3, [pc, #84]	@ (80068c0 <HAL_MspInit+0x68>)
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	60bb      	str	r3, [r7, #8]
 8006874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006876:	4b12      	ldr	r3, [pc, #72]	@ (80068c0 <HAL_MspInit+0x68>)
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	4a11      	ldr	r2, [pc, #68]	@ (80068c0 <HAL_MspInit+0x68>)
 800687c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006880:	61d3      	str	r3, [r2, #28]
 8006882:	4b0f      	ldr	r3, [pc, #60]	@ (80068c0 <HAL_MspInit+0x68>)
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800688e:	2200      	movs	r2, #0
 8006890:	210f      	movs	r1, #15
 8006892:	f06f 0001 	mvn.w	r0, #1
 8006896:	f000 fcb4 	bl	8007202 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800689a:	4b0a      	ldr	r3, [pc, #40]	@ (80068c4 <HAL_MspInit+0x6c>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	4a04      	ldr	r2, [pc, #16]	@ (80068c4 <HAL_MspInit+0x6c>)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40021000 	.word	0x40021000
 80068c4:	40010000 	.word	0x40010000

080068c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	@ 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a22      	ldr	r2, [pc, #136]	@ (800696c <HAL_SPI_MspInit+0xa4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d13d      	bne.n	8006964 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80068e8:	4b21      	ldr	r3, [pc, #132]	@ (8006970 <HAL_SPI_MspInit+0xa8>)
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	4a20      	ldr	r2, [pc, #128]	@ (8006970 <HAL_SPI_MspInit+0xa8>)
 80068ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068f2:	6193      	str	r3, [r2, #24]
 80068f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006970 <HAL_SPI_MspInit+0xa8>)
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006900:	4b1b      	ldr	r3, [pc, #108]	@ (8006970 <HAL_SPI_MspInit+0xa8>)
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	4a1a      	ldr	r2, [pc, #104]	@ (8006970 <HAL_SPI_MspInit+0xa8>)
 8006906:	f043 0308 	orr.w	r3, r3, #8
 800690a:	6193      	str	r3, [r2, #24]
 800690c:	4b18      	ldr	r3, [pc, #96]	@ (8006970 <HAL_SPI_MspInit+0xa8>)
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	f003 0308 	and.w	r3, r3, #8
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8006918:	2328      	movs	r3, #40	@ 0x28
 800691a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800691c:	2302      	movs	r3, #2
 800691e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006920:	2303      	movs	r3, #3
 8006922:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006924:	f107 0314 	add.w	r3, r7, #20
 8006928:	4619      	mov	r1, r3
 800692a:	4812      	ldr	r0, [pc, #72]	@ (8006974 <HAL_SPI_MspInit+0xac>)
 800692c:	f000 fdd6 	bl	80074dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006930:	2310      	movs	r3, #16
 8006932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006934:	2300      	movs	r3, #0
 8006936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006938:	2300      	movs	r3, #0
 800693a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800693c:	f107 0314 	add.w	r3, r7, #20
 8006940:	4619      	mov	r1, r3
 8006942:	480c      	ldr	r0, [pc, #48]	@ (8006974 <HAL_SPI_MspInit+0xac>)
 8006944:	f000 fdca 	bl	80074dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8006948:	4b0b      	ldr	r3, [pc, #44]	@ (8006978 <HAL_SPI_MspInit+0xb0>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006954:	627b      	str	r3, [r7, #36]	@ 0x24
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	627b      	str	r3, [r7, #36]	@ 0x24
 800695e:	4a06      	ldr	r2, [pc, #24]	@ (8006978 <HAL_SPI_MspInit+0xb0>)
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006964:	bf00      	nop
 8006966:	3728      	adds	r7, #40	@ 0x28
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40013000 	.word	0x40013000
 8006970:	40021000 	.word	0x40021000
 8006974:	40010c00 	.word	0x40010c00
 8006978:	40010000 	.word	0x40010000

0800697c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b092      	sub	sp, #72	@ 0x48
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006984:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	605a      	str	r2, [r3, #4]
 800698e:	609a      	str	r2, [r3, #8]
 8006990:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4aa0      	ldr	r2, [pc, #640]	@ (8006c18 <HAL_UART_MspInit+0x29c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d13a      	bne.n	8006a12 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800699c:	4b9f      	ldr	r3, [pc, #636]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	4a9e      	ldr	r2, [pc, #632]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 80069a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069a6:	61d3      	str	r3, [r2, #28]
 80069a8:	4b9c      	ldr	r3, [pc, #624]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069b4:	4b99      	ldr	r3, [pc, #612]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	4a98      	ldr	r2, [pc, #608]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 80069ba:	f043 0310 	orr.w	r3, r3, #16
 80069be:	6193      	str	r3, [r2, #24]
 80069c0:	4b96      	ldr	r3, [pc, #600]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80069cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069d2:	2302      	movs	r3, #2
 80069d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069d6:	2303      	movs	r3, #3
 80069d8:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80069de:	4619      	mov	r1, r3
 80069e0:	488f      	ldr	r0, [pc, #572]	@ (8006c20 <HAL_UART_MspInit+0x2a4>)
 80069e2:	f000 fd7b 	bl	80074dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80069e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069ec:	2300      	movs	r3, #0
 80069ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80069f8:	4619      	mov	r1, r3
 80069fa:	4889      	ldr	r0, [pc, #548]	@ (8006c20 <HAL_UART_MspInit+0x2a4>)
 80069fc:	f000 fd6e 	bl	80074dc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8006a00:	2200      	movs	r2, #0
 8006a02:	2105      	movs	r1, #5
 8006a04:	2034      	movs	r0, #52	@ 0x34
 8006a06:	f000 fbfc 	bl	8007202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006a0a:	2034      	movs	r0, #52	@ 0x34
 8006a0c:	f000 fc15 	bl	800723a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006a10:	e0fd      	b.n	8006c0e <HAL_UART_MspInit+0x292>
  else if(huart->Instance==UART5)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a83      	ldr	r2, [pc, #524]	@ (8006c24 <HAL_UART_MspInit+0x2a8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d13d      	bne.n	8006a98 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006a1c:	4b7f      	ldr	r3, [pc, #508]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	4a7e      	ldr	r2, [pc, #504]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a26:	61d3      	str	r3, [r2, #28]
 8006a28:	4b7c      	ldr	r3, [pc, #496]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a34:	4b79      	ldr	r3, [pc, #484]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	4a78      	ldr	r2, [pc, #480]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006a3a:	f043 0310 	orr.w	r3, r3, #16
 8006a3e:	6193      	str	r3, [r2, #24]
 8006a40:	4b76      	ldr	r3, [pc, #472]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a4c:	4b73      	ldr	r3, [pc, #460]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	4a72      	ldr	r2, [pc, #456]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006a52:	f043 0320 	orr.w	r3, r3, #32
 8006a56:	6193      	str	r3, [r2, #24]
 8006a58:	4b70      	ldr	r3, [pc, #448]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	623b      	str	r3, [r7, #32]
 8006a62:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a68:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006a76:	4619      	mov	r1, r3
 8006a78:	4869      	ldr	r0, [pc, #420]	@ (8006c20 <HAL_UART_MspInit+0x2a4>)
 8006a7a:	f000 fd2f 	bl	80074dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a7e:	2304      	movs	r3, #4
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a82:	2300      	movs	r3, #0
 8006a84:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4865      	ldr	r0, [pc, #404]	@ (8006c28 <HAL_UART_MspInit+0x2ac>)
 8006a92:	f000 fd23 	bl	80074dc <HAL_GPIO_Init>
}
 8006a96:	e0ba      	b.n	8006c0e <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART1)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a63      	ldr	r2, [pc, #396]	@ (8006c2c <HAL_UART_MspInit+0x2b0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d132      	bne.n	8006b08 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006aac:	6193      	str	r3, [r2, #24]
 8006aae:	4b5b      	ldr	r3, [pc, #364]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ab6:	61fb      	str	r3, [r7, #28]
 8006ab8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aba:	4b58      	ldr	r3, [pc, #352]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	4a57      	ldr	r2, [pc, #348]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006ac0:	f043 0304 	orr.w	r3, r3, #4
 8006ac4:	6193      	str	r3, [r2, #24]
 8006ac6:	4b55      	ldr	r3, [pc, #340]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	61bb      	str	r3, [r7, #24]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ad6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006adc:	2303      	movs	r3, #3
 8006ade:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ae0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4852      	ldr	r0, [pc, #328]	@ (8006c30 <HAL_UART_MspInit+0x2b4>)
 8006ae8:	f000 fcf8 	bl	80074dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006af2:	2300      	movs	r3, #0
 8006af4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006afa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006afe:	4619      	mov	r1, r3
 8006b00:	484b      	ldr	r0, [pc, #300]	@ (8006c30 <HAL_UART_MspInit+0x2b4>)
 8006b02:	f000 fceb 	bl	80074dc <HAL_GPIO_Init>
}
 8006b06:	e082      	b.n	8006c0e <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART2)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a49      	ldr	r2, [pc, #292]	@ (8006c34 <HAL_UART_MspInit+0x2b8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d13e      	bne.n	8006b90 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b12:	4b42      	ldr	r3, [pc, #264]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	4a41      	ldr	r2, [pc, #260]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b1c:	61d3      	str	r3, [r2, #28]
 8006b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b2a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006b30:	f043 0320 	orr.w	r3, r3, #32
 8006b34:	6193      	str	r3, [r2, #24]
 8006b36:	4b39      	ldr	r3, [pc, #228]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006b42:	2320      	movs	r3, #32
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b46:	2302      	movs	r3, #2
 8006b48:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b4e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006b52:	4619      	mov	r1, r3
 8006b54:	4834      	ldr	r0, [pc, #208]	@ (8006c28 <HAL_UART_MspInit+0x2ac>)
 8006b56:	f000 fcc1 	bl	80074dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006b5a:	2340      	movs	r3, #64	@ 0x40
 8006b5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	482e      	ldr	r0, [pc, #184]	@ (8006c28 <HAL_UART_MspInit+0x2ac>)
 8006b6e:	f000 fcb5 	bl	80074dc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART2_ENABLE();
 8006b72:	4b31      	ldr	r3, [pc, #196]	@ (8006c38 <HAL_UART_MspInit+0x2bc>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b7a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b82:	f043 0308 	orr.w	r3, r3, #8
 8006b86:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b88:	4a2b      	ldr	r2, [pc, #172]	@ (8006c38 <HAL_UART_MspInit+0x2bc>)
 8006b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b8c:	6053      	str	r3, [r2, #4]
}
 8006b8e:	e03e      	b.n	8006c0e <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART3)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a29      	ldr	r2, [pc, #164]	@ (8006c3c <HAL_UART_MspInit+0x2c0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d139      	bne.n	8006c0e <HAL_UART_MspInit+0x292>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006b9a:	4b20      	ldr	r3, [pc, #128]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ba4:	61d3      	str	r3, [r2, #28]
 8006ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006bb8:	f043 0308 	orr.w	r3, r3, #8
 8006bbc:	6193      	str	r3, [r2, #24]
 8006bbe:	4b17      	ldr	r3, [pc, #92]	@ (8006c1c <HAL_UART_MspInit+0x2a0>)
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	f003 0308 	and.w	r3, r3, #8
 8006bc6:	60bb      	str	r3, [r7, #8]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bd8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4818      	ldr	r0, [pc, #96]	@ (8006c40 <HAL_UART_MspInit+0x2c4>)
 8006be0:	f000 fc7c 	bl	80074dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006be4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006be8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bea:	2300      	movs	r3, #0
 8006bec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bf2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4811      	ldr	r0, [pc, #68]	@ (8006c40 <HAL_UART_MspInit+0x2c4>)
 8006bfa:	f000 fc6f 	bl	80074dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2105      	movs	r1, #5
 8006c02:	2027      	movs	r0, #39	@ 0x27
 8006c04:	f000 fafd 	bl	8007202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006c08:	2027      	movs	r0, #39	@ 0x27
 8006c0a:	f000 fb16 	bl	800723a <HAL_NVIC_EnableIRQ>
}
 8006c0e:	bf00      	nop
 8006c10:	3748      	adds	r7, #72	@ 0x48
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	40004c00 	.word	0x40004c00
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	40011000 	.word	0x40011000
 8006c24:	40005000 	.word	0x40005000
 8006c28:	40011400 	.word	0x40011400
 8006c2c:	40013800 	.word	0x40013800
 8006c30:	40010800 	.word	0x40010800
 8006c34:	40004400 	.word	0x40004400
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40004800 	.word	0x40004800
 8006c40:	40010c00 	.word	0x40010c00

08006c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08e      	sub	sp, #56	@ 0x38
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006c5a:	4b34      	ldr	r3, [pc, #208]	@ (8006d2c <HAL_InitTick+0xe8>)
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	4a33      	ldr	r2, [pc, #204]	@ (8006d2c <HAL_InitTick+0xe8>)
 8006c60:	f043 0310 	orr.w	r3, r3, #16
 8006c64:	61d3      	str	r3, [r2, #28]
 8006c66:	4b31      	ldr	r3, [pc, #196]	@ (8006d2c <HAL_InitTick+0xe8>)
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006c72:	f107 0210 	add.w	r2, r7, #16
 8006c76:	f107 0314 	add.w	r3, r7, #20
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 fa1f 	bl	80080c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d103      	bne.n	8006c94 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006c8c:	f001 f9f0 	bl	8008070 <HAL_RCC_GetPCLK1Freq>
 8006c90:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c92:	e004      	b.n	8006c9e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006c94:	f001 f9ec 	bl	8008070 <HAL_RCC_GetPCLK1Freq>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca0:	4a23      	ldr	r2, [pc, #140]	@ (8006d30 <HAL_InitTick+0xec>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	0c9b      	lsrs	r3, r3, #18
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006cac:	4b21      	ldr	r3, [pc, #132]	@ (8006d34 <HAL_InitTick+0xf0>)
 8006cae:	4a22      	ldr	r2, [pc, #136]	@ (8006d38 <HAL_InitTick+0xf4>)
 8006cb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006cb2:	4b20      	ldr	r3, [pc, #128]	@ (8006d34 <HAL_InitTick+0xf0>)
 8006cb4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006cb8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006cba:	4a1e      	ldr	r2, [pc, #120]	@ (8006d34 <HAL_InitTick+0xf0>)
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8006d34 <HAL_InitTick+0xf0>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d34 <HAL_InitTick+0xf0>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ccc:	4b19      	ldr	r3, [pc, #100]	@ (8006d34 <HAL_InitTick+0xf0>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006cd2:	4818      	ldr	r0, [pc, #96]	@ (8006d34 <HAL_InitTick+0xf0>)
 8006cd4:	f001 ffca 	bl	8008c6c <HAL_TIM_Base_Init>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8006cde:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d11b      	bne.n	8006d1e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006ce6:	4813      	ldr	r0, [pc, #76]	@ (8006d34 <HAL_InitTick+0xf0>)
 8006ce8:	f002 f818 	bl	8008d1c <HAL_TIM_Base_Start_IT>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8006cf2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d111      	bne.n	8006d1e <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8006cfa:	2036      	movs	r0, #54	@ 0x36
 8006cfc:	f000 fa9d 	bl	800723a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b0f      	cmp	r3, #15
 8006d04:	d808      	bhi.n	8006d18 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8006d06:	2200      	movs	r2, #0
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	2036      	movs	r0, #54	@ 0x36
 8006d0c:	f000 fa79 	bl	8007202 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006d10:	4a0a      	ldr	r2, [pc, #40]	@ (8006d3c <HAL_InitTick+0xf8>)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	e002      	b.n	8006d1e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006d1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3738      	adds	r7, #56	@ 0x38
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	431bde83 	.word	0x431bde83
 8006d34:	20000798 	.word	0x20000798
 8006d38:	40001000 	.word	0x40001000
 8006d3c:	2000003c 	.word	0x2000003c

08006d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006d44:	bf00      	nop
 8006d46:	e7fd      	b.n	8006d44 <NMI_Handler+0x4>

08006d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d4c:	bf00      	nop
 8006d4e:	e7fd      	b.n	8006d4c <HardFault_Handler+0x4>

08006d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <MemManage_Handler+0x4>

08006d58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d5c:	bf00      	nop
 8006d5e:	e7fd      	b.n	8006d5c <BusFault_Handler+0x4>

08006d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <UsageFault_Handler+0x4>

08006d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d6c:	bf00      	nop
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_A2_Pin);
 8006d78:	2001      	movs	r0, #1
 8006d7a:	f000 fd73 	bl	8007864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006d7e:	bf00      	nop
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_A1_Pin);
 8006d86:	2002      	movs	r0, #2
 8006d88:	f000 fd6c 	bl	8007864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006d8c:	bf00      	nop
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_B1_Pin);
 8006d94:	2004      	movs	r0, #4
 8006d96:	f000 fd65 	bl	8007864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006d9a:	bf00      	nop
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_B2_Pin);
 8006da2:	2008      	movs	r0, #8
 8006da4:	f000 fd5e 	bl	8007864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006da8:	bf00      	nop
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006db0:	4802      	ldr	r0, [pc, #8]	@ (8006dbc <USART3_IRQHandler+0x10>)
 8006db2:	f002 fb31 	bl	8009418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006db6:	bf00      	nop
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	2000064c 	.word	0x2000064c

08006dc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_B1_Pin);
 8006dc4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006dc8:	f000 fd4c 	bl	8007864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_B2_Pin);
 8006dcc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006dd0:	f000 fd48 	bl	8007864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_A2_Pin);
 8006dd4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006dd8:	f000 fd44 	bl	8007864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_A1_Pin);
 8006ddc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006de0:	f000 fd40 	bl	8007864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006de4:	bf00      	nop
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006dec:	4802      	ldr	r0, [pc, #8]	@ (8006df8 <UART4_IRQHandler+0x10>)
 8006dee:	f002 fb13 	bl	8009418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006df2:	bf00      	nop
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	2000052c 	.word	0x2000052c

08006dfc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006e00:	4802      	ldr	r0, [pc, #8]	@ (8006e0c <TIM6_IRQHandler+0x10>)
 8006e02:	f001 ffeb 	bl	8008ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8006e06:	bf00      	nop
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000798 	.word	0x20000798

08006e10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return 1;
 8006e14:	2301      	movs	r3, #1
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr

08006e1e <_kill>:

int _kill(int pid, int sig)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e28:	f004 ff64 	bl	800bcf4 <__errno>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2216      	movs	r2, #22
 8006e30:	601a      	str	r2, [r3, #0]
  return -1;
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <_exit>:

void _exit (int status)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006e46:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff ffe7 	bl	8006e1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8006e50:	bf00      	nop
 8006e52:	e7fd      	b.n	8006e50 <_exit+0x12>

08006e54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e00a      	b.n	8006e7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006e66:	f3af 8000 	nop.w
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	60ba      	str	r2, [r7, #8]
 8006e72:	b2ca      	uxtb	r2, r1
 8006e74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	dbf0      	blt.n	8006e66 <_read+0x12>
  }

  return len;
 8006e84:	687b      	ldr	r3, [r7, #4]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b086      	sub	sp, #24
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e009      	b.n	8006eb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	60ba      	str	r2, [r7, #8]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	dbf1      	blt.n	8006ea0 <_write+0x12>
  }
  return len;
 8006ebc:	687b      	ldr	r3, [r7, #4]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <_close>:

int _close(int file)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006ece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr

08006edc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006eec:	605a      	str	r2, [r3, #4]
  return 0;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr

08006efa <_isatty>:

int _isatty(int file)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006f02:	2301      	movs	r3, #1
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr

08006f0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b085      	sub	sp, #20
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr
	...

08006f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f30:	4a14      	ldr	r2, [pc, #80]	@ (8006f84 <_sbrk+0x5c>)
 8006f32:	4b15      	ldr	r3, [pc, #84]	@ (8006f88 <_sbrk+0x60>)
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f3c:	4b13      	ldr	r3, [pc, #76]	@ (8006f8c <_sbrk+0x64>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f44:	4b11      	ldr	r3, [pc, #68]	@ (8006f8c <_sbrk+0x64>)
 8006f46:	4a12      	ldr	r2, [pc, #72]	@ (8006f90 <_sbrk+0x68>)
 8006f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f4a:	4b10      	ldr	r3, [pc, #64]	@ (8006f8c <_sbrk+0x64>)
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4413      	add	r3, r2
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d207      	bcs.n	8006f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f58:	f004 fecc 	bl	800bcf4 <__errno>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	220c      	movs	r2, #12
 8006f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f66:	e009      	b.n	8006f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f68:	4b08      	ldr	r3, [pc, #32]	@ (8006f8c <_sbrk+0x64>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f6e:	4b07      	ldr	r3, [pc, #28]	@ (8006f8c <_sbrk+0x64>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4413      	add	r3, r2
 8006f76:	4a05      	ldr	r2, [pc, #20]	@ (8006f8c <_sbrk+0x64>)
 8006f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	2000c000 	.word	0x2000c000
 8006f88:	00000400 	.word	0x00000400
 8006f8c:	200007e0 	.word	0x200007e0
 8006f90:	20001680 	.word	0x20001680

08006f94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f98:	bf00      	nop
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006fa0:	f7ff fff8 	bl	8006f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006fa4:	480b      	ldr	r0, [pc, #44]	@ (8006fd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006fa6:	490c      	ldr	r1, [pc, #48]	@ (8006fd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8006fdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8006faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fac:	e002      	b.n	8006fb4 <LoopCopyDataInit>

08006fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fb2:	3304      	adds	r3, #4

08006fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fb8:	d3f9      	bcc.n	8006fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fba:	4a09      	ldr	r2, [pc, #36]	@ (8006fe0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006fbc:	4c09      	ldr	r4, [pc, #36]	@ (8006fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fc0:	e001      	b.n	8006fc6 <LoopFillZerobss>

08006fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fc4:	3204      	adds	r2, #4

08006fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fc8:	d3fb      	bcc.n	8006fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006fca:	f004 fe99 	bl	800bd00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006fce:	f7fa ff03 	bl	8001dd8 <main>
  bx lr
 8006fd2:	4770      	bx	lr
  ldr r0, =_sdata
 8006fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006fd8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8006fdc:	0800ece8 	.word	0x0800ece8
  ldr r2, =_sbss
 8006fe0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8006fe4:	20001680 	.word	0x20001680

08006fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006fe8:	e7fe      	b.n	8006fe8 <ADC1_2_IRQHandler>
	...

08006fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ff0:	4b08      	ldr	r3, [pc, #32]	@ (8007014 <HAL_Init+0x28>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a07      	ldr	r2, [pc, #28]	@ (8007014 <HAL_Init+0x28>)
 8006ff6:	f043 0310 	orr.w	r3, r3, #16
 8006ffa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ffc:	2003      	movs	r0, #3
 8006ffe:	f000 f8f5 	bl	80071ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007002:	200f      	movs	r0, #15
 8007004:	f7ff fe1e 	bl	8006c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007008:	f7ff fc26 	bl	8006858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	40022000 	.word	0x40022000

08007018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800701c:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <HAL_IncTick+0x1c>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	4b05      	ldr	r3, [pc, #20]	@ (8007038 <HAL_IncTick+0x20>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4413      	add	r3, r2
 8007028:	4a03      	ldr	r2, [pc, #12]	@ (8007038 <HAL_IncTick+0x20>)
 800702a:	6013      	str	r3, [r2, #0]
}
 800702c:	bf00      	nop
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr
 8007034:	20000040 	.word	0x20000040
 8007038:	200007e4 	.word	0x200007e4

0800703c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  return uwTick;
 8007040:	4b02      	ldr	r3, [pc, #8]	@ (800704c <HAL_GetTick+0x10>)
 8007042:	681b      	ldr	r3, [r3, #0]
}
 8007044:	4618      	mov	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	bc80      	pop	{r7}
 800704a:	4770      	bx	lr
 800704c:	200007e4 	.word	0x200007e4

08007050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007058:	f7ff fff0 	bl	800703c <HAL_GetTick>
 800705c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007068:	d005      	beq.n	8007076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800706a:	4b0a      	ldr	r3, [pc, #40]	@ (8007094 <HAL_Delay+0x44>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4413      	add	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007076:	bf00      	nop
 8007078:	f7ff ffe0 	bl	800703c <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	429a      	cmp	r2, r3
 8007086:	d8f7      	bhi.n	8007078 <HAL_Delay+0x28>
  {
  }
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20000040 	.word	0x20000040

08007098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070a8:	4b0c      	ldr	r3, [pc, #48]	@ (80070dc <__NVIC_SetPriorityGrouping+0x44>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070b4:	4013      	ands	r3, r2
 80070b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80070c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070ca:	4a04      	ldr	r2, [pc, #16]	@ (80070dc <__NVIC_SetPriorityGrouping+0x44>)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	60d3      	str	r3, [r2, #12]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	e000ed00 	.word	0xe000ed00

080070e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070e4:	4b04      	ldr	r3, [pc, #16]	@ (80070f8 <__NVIC_GetPriorityGrouping+0x18>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	0a1b      	lsrs	r3, r3, #8
 80070ea:	f003 0307 	and.w	r3, r3, #7
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bc80      	pop	{r7}
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	e000ed00 	.word	0xe000ed00

080070fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710a:	2b00      	cmp	r3, #0
 800710c:	db0b      	blt.n	8007126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	f003 021f 	and.w	r2, r3, #31
 8007114:	4906      	ldr	r1, [pc, #24]	@ (8007130 <__NVIC_EnableIRQ+0x34>)
 8007116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800711a:	095b      	lsrs	r3, r3, #5
 800711c:	2001      	movs	r0, #1
 800711e:	fa00 f202 	lsl.w	r2, r0, r2
 8007122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	bc80      	pop	{r7}
 800712e:	4770      	bx	lr
 8007130:	e000e100 	.word	0xe000e100

08007134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	6039      	str	r1, [r7, #0]
 800713e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007144:	2b00      	cmp	r3, #0
 8007146:	db0a      	blt.n	800715e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	b2da      	uxtb	r2, r3
 800714c:	490c      	ldr	r1, [pc, #48]	@ (8007180 <__NVIC_SetPriority+0x4c>)
 800714e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007152:	0112      	lsls	r2, r2, #4
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	440b      	add	r3, r1
 8007158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800715c:	e00a      	b.n	8007174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	b2da      	uxtb	r2, r3
 8007162:	4908      	ldr	r1, [pc, #32]	@ (8007184 <__NVIC_SetPriority+0x50>)
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	3b04      	subs	r3, #4
 800716c:	0112      	lsls	r2, r2, #4
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	440b      	add	r3, r1
 8007172:	761a      	strb	r2, [r3, #24]
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	e000e100 	.word	0xe000e100
 8007184:	e000ed00 	.word	0xe000ed00

08007188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007188:	b480      	push	{r7}
 800718a:	b089      	sub	sp, #36	@ 0x24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f1c3 0307 	rsb	r3, r3, #7
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	bf28      	it	cs
 80071a6:	2304      	movcs	r3, #4
 80071a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	3304      	adds	r3, #4
 80071ae:	2b06      	cmp	r3, #6
 80071b0:	d902      	bls.n	80071b8 <NVIC_EncodePriority+0x30>
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	3b03      	subs	r3, #3
 80071b6:	e000      	b.n	80071ba <NVIC_EncodePriority+0x32>
 80071b8:	2300      	movs	r3, #0
 80071ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	fa02 f303 	lsl.w	r3, r2, r3
 80071c6:	43da      	mvns	r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	401a      	ands	r2, r3
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	fa01 f303 	lsl.w	r3, r1, r3
 80071da:	43d9      	mvns	r1, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071e0:	4313      	orrs	r3, r2
         );
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3724      	adds	r7, #36	@ 0x24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr

080071ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff ff4f 	bl	8007098 <__NVIC_SetPriorityGrouping>
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007202:	b580      	push	{r7, lr}
 8007204:	b086      	sub	sp, #24
 8007206:	af00      	add	r7, sp, #0
 8007208:	4603      	mov	r3, r0
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007214:	f7ff ff64 	bl	80070e0 <__NVIC_GetPriorityGrouping>
 8007218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	6978      	ldr	r0, [r7, #20]
 8007220:	f7ff ffb2 	bl	8007188 <NVIC_EncodePriority>
 8007224:	4602      	mov	r2, r0
 8007226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff ff81 	bl	8007134 <__NVIC_SetPriority>
}
 8007232:	bf00      	nop
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	4603      	mov	r3, r0
 8007242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff ff57 	bl	80070fc <__NVIC_EnableIRQ>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d008      	beq.n	8007280 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2204      	movs	r2, #4
 8007272:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e020      	b.n	80072c2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 020e 	bic.w	r2, r2, #14
 800728e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0201 	bic.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a8:	2101      	movs	r1, #1
 80072aa:	fa01 f202 	lsl.w	r2, r1, r2
 80072ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr

080072cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d005      	beq.n	80072f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2204      	movs	r2, #4
 80072e8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	73fb      	strb	r3, [r7, #15]
 80072ee:	e0d6      	b.n	800749e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 020e 	bic.w	r2, r2, #14
 80072fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	4b64      	ldr	r3, [pc, #400]	@ (80074a8 <HAL_DMA_Abort_IT+0x1dc>)
 8007318:	429a      	cmp	r2, r3
 800731a:	d958      	bls.n	80073ce <HAL_DMA_Abort_IT+0x102>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a62      	ldr	r2, [pc, #392]	@ (80074ac <HAL_DMA_Abort_IT+0x1e0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d04f      	beq.n	80073c6 <HAL_DMA_Abort_IT+0xfa>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a61      	ldr	r2, [pc, #388]	@ (80074b0 <HAL_DMA_Abort_IT+0x1e4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d048      	beq.n	80073c2 <HAL_DMA_Abort_IT+0xf6>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a5f      	ldr	r2, [pc, #380]	@ (80074b4 <HAL_DMA_Abort_IT+0x1e8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d040      	beq.n	80073bc <HAL_DMA_Abort_IT+0xf0>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a5e      	ldr	r2, [pc, #376]	@ (80074b8 <HAL_DMA_Abort_IT+0x1ec>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d038      	beq.n	80073b6 <HAL_DMA_Abort_IT+0xea>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a5c      	ldr	r2, [pc, #368]	@ (80074bc <HAL_DMA_Abort_IT+0x1f0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d030      	beq.n	80073b0 <HAL_DMA_Abort_IT+0xe4>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a5b      	ldr	r2, [pc, #364]	@ (80074c0 <HAL_DMA_Abort_IT+0x1f4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d028      	beq.n	80073aa <HAL_DMA_Abort_IT+0xde>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a52      	ldr	r2, [pc, #328]	@ (80074a8 <HAL_DMA_Abort_IT+0x1dc>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d020      	beq.n	80073a4 <HAL_DMA_Abort_IT+0xd8>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a57      	ldr	r2, [pc, #348]	@ (80074c4 <HAL_DMA_Abort_IT+0x1f8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d019      	beq.n	80073a0 <HAL_DMA_Abort_IT+0xd4>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a55      	ldr	r2, [pc, #340]	@ (80074c8 <HAL_DMA_Abort_IT+0x1fc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d012      	beq.n	800739c <HAL_DMA_Abort_IT+0xd0>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a54      	ldr	r2, [pc, #336]	@ (80074cc <HAL_DMA_Abort_IT+0x200>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00a      	beq.n	8007396 <HAL_DMA_Abort_IT+0xca>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a52      	ldr	r2, [pc, #328]	@ (80074d0 <HAL_DMA_Abort_IT+0x204>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d102      	bne.n	8007390 <HAL_DMA_Abort_IT+0xc4>
 800738a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800738e:	e01b      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 8007390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007394:	e018      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 8007396:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800739a:	e015      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 800739c:	2310      	movs	r3, #16
 800739e:	e013      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e011      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 80073a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073a8:	e00e      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 80073aa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80073ae:	e00b      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 80073b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80073b4:	e008      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 80073b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073ba:	e005      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 80073bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073c0:	e002      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 80073c2:	2310      	movs	r3, #16
 80073c4:	e000      	b.n	80073c8 <HAL_DMA_Abort_IT+0xfc>
 80073c6:	2301      	movs	r3, #1
 80073c8:	4a42      	ldr	r2, [pc, #264]	@ (80074d4 <HAL_DMA_Abort_IT+0x208>)
 80073ca:	6053      	str	r3, [r2, #4]
 80073cc:	e057      	b.n	800747e <HAL_DMA_Abort_IT+0x1b2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a36      	ldr	r2, [pc, #216]	@ (80074ac <HAL_DMA_Abort_IT+0x1e0>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d04f      	beq.n	8007478 <HAL_DMA_Abort_IT+0x1ac>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a34      	ldr	r2, [pc, #208]	@ (80074b0 <HAL_DMA_Abort_IT+0x1e4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d048      	beq.n	8007474 <HAL_DMA_Abort_IT+0x1a8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a33      	ldr	r2, [pc, #204]	@ (80074b4 <HAL_DMA_Abort_IT+0x1e8>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d040      	beq.n	800746e <HAL_DMA_Abort_IT+0x1a2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a31      	ldr	r2, [pc, #196]	@ (80074b8 <HAL_DMA_Abort_IT+0x1ec>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d038      	beq.n	8007468 <HAL_DMA_Abort_IT+0x19c>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a30      	ldr	r2, [pc, #192]	@ (80074bc <HAL_DMA_Abort_IT+0x1f0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d030      	beq.n	8007462 <HAL_DMA_Abort_IT+0x196>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a2e      	ldr	r2, [pc, #184]	@ (80074c0 <HAL_DMA_Abort_IT+0x1f4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d028      	beq.n	800745c <HAL_DMA_Abort_IT+0x190>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a26      	ldr	r2, [pc, #152]	@ (80074a8 <HAL_DMA_Abort_IT+0x1dc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d020      	beq.n	8007456 <HAL_DMA_Abort_IT+0x18a>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a2a      	ldr	r2, [pc, #168]	@ (80074c4 <HAL_DMA_Abort_IT+0x1f8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d019      	beq.n	8007452 <HAL_DMA_Abort_IT+0x186>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a29      	ldr	r2, [pc, #164]	@ (80074c8 <HAL_DMA_Abort_IT+0x1fc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d012      	beq.n	800744e <HAL_DMA_Abort_IT+0x182>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a27      	ldr	r2, [pc, #156]	@ (80074cc <HAL_DMA_Abort_IT+0x200>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00a      	beq.n	8007448 <HAL_DMA_Abort_IT+0x17c>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a26      	ldr	r2, [pc, #152]	@ (80074d0 <HAL_DMA_Abort_IT+0x204>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d102      	bne.n	8007442 <HAL_DMA_Abort_IT+0x176>
 800743c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007440:	e01b      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 8007442:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007446:	e018      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 8007448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800744c:	e015      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 800744e:	2310      	movs	r3, #16
 8007450:	e013      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 8007452:	2301      	movs	r3, #1
 8007454:	e011      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 8007456:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800745a:	e00e      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 800745c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007460:	e00b      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 8007462:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007466:	e008      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 8007468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800746c:	e005      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 800746e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007472:	e002      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 8007474:	2310      	movs	r3, #16
 8007476:	e000      	b.n	800747a <HAL_DMA_Abort_IT+0x1ae>
 8007478:	2301      	movs	r3, #1
 800747a:	4a17      	ldr	r2, [pc, #92]	@ (80074d8 <HAL_DMA_Abort_IT+0x20c>)
 800747c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
    } 
  }
  return status;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40020080 	.word	0x40020080
 80074ac:	40020008 	.word	0x40020008
 80074b0:	4002001c 	.word	0x4002001c
 80074b4:	40020030 	.word	0x40020030
 80074b8:	40020044 	.word	0x40020044
 80074bc:	40020058 	.word	0x40020058
 80074c0:	4002006c 	.word	0x4002006c
 80074c4:	40020408 	.word	0x40020408
 80074c8:	4002041c 	.word	0x4002041c
 80074cc:	40020430 	.word	0x40020430
 80074d0:	40020444 	.word	0x40020444
 80074d4:	40020400 	.word	0x40020400
 80074d8:	40020000 	.word	0x40020000

080074dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074dc:	b480      	push	{r7}
 80074de:	b08b      	sub	sp, #44	@ 0x2c
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80074e6:	2300      	movs	r3, #0
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80074ea:	2300      	movs	r3, #0
 80074ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074ee:	e179      	b.n	80077e4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80074f0:	2201      	movs	r2, #1
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	4013      	ands	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	429a      	cmp	r2, r3
 800750a:	f040 8168 	bne.w	80077de <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	4a96      	ldr	r2, [pc, #600]	@ (800776c <HAL_GPIO_Init+0x290>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d05e      	beq.n	80075d6 <HAL_GPIO_Init+0xfa>
 8007518:	4a94      	ldr	r2, [pc, #592]	@ (800776c <HAL_GPIO_Init+0x290>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d875      	bhi.n	800760a <HAL_GPIO_Init+0x12e>
 800751e:	4a94      	ldr	r2, [pc, #592]	@ (8007770 <HAL_GPIO_Init+0x294>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d058      	beq.n	80075d6 <HAL_GPIO_Init+0xfa>
 8007524:	4a92      	ldr	r2, [pc, #584]	@ (8007770 <HAL_GPIO_Init+0x294>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d86f      	bhi.n	800760a <HAL_GPIO_Init+0x12e>
 800752a:	4a92      	ldr	r2, [pc, #584]	@ (8007774 <HAL_GPIO_Init+0x298>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d052      	beq.n	80075d6 <HAL_GPIO_Init+0xfa>
 8007530:	4a90      	ldr	r2, [pc, #576]	@ (8007774 <HAL_GPIO_Init+0x298>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d869      	bhi.n	800760a <HAL_GPIO_Init+0x12e>
 8007536:	4a90      	ldr	r2, [pc, #576]	@ (8007778 <HAL_GPIO_Init+0x29c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d04c      	beq.n	80075d6 <HAL_GPIO_Init+0xfa>
 800753c:	4a8e      	ldr	r2, [pc, #568]	@ (8007778 <HAL_GPIO_Init+0x29c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d863      	bhi.n	800760a <HAL_GPIO_Init+0x12e>
 8007542:	4a8e      	ldr	r2, [pc, #568]	@ (800777c <HAL_GPIO_Init+0x2a0>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d046      	beq.n	80075d6 <HAL_GPIO_Init+0xfa>
 8007548:	4a8c      	ldr	r2, [pc, #560]	@ (800777c <HAL_GPIO_Init+0x2a0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d85d      	bhi.n	800760a <HAL_GPIO_Init+0x12e>
 800754e:	2b12      	cmp	r3, #18
 8007550:	d82a      	bhi.n	80075a8 <HAL_GPIO_Init+0xcc>
 8007552:	2b12      	cmp	r3, #18
 8007554:	d859      	bhi.n	800760a <HAL_GPIO_Init+0x12e>
 8007556:	a201      	add	r2, pc, #4	@ (adr r2, 800755c <HAL_GPIO_Init+0x80>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	080075d7 	.word	0x080075d7
 8007560:	080075b1 	.word	0x080075b1
 8007564:	080075c3 	.word	0x080075c3
 8007568:	08007605 	.word	0x08007605
 800756c:	0800760b 	.word	0x0800760b
 8007570:	0800760b 	.word	0x0800760b
 8007574:	0800760b 	.word	0x0800760b
 8007578:	0800760b 	.word	0x0800760b
 800757c:	0800760b 	.word	0x0800760b
 8007580:	0800760b 	.word	0x0800760b
 8007584:	0800760b 	.word	0x0800760b
 8007588:	0800760b 	.word	0x0800760b
 800758c:	0800760b 	.word	0x0800760b
 8007590:	0800760b 	.word	0x0800760b
 8007594:	0800760b 	.word	0x0800760b
 8007598:	0800760b 	.word	0x0800760b
 800759c:	0800760b 	.word	0x0800760b
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075cd 	.word	0x080075cd
 80075a8:	4a75      	ldr	r2, [pc, #468]	@ (8007780 <HAL_GPIO_Init+0x2a4>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d013      	beq.n	80075d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80075ae:	e02c      	b.n	800760a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	623b      	str	r3, [r7, #32]
          break;
 80075b6:	e029      	b.n	800760c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	3304      	adds	r3, #4
 80075be:	623b      	str	r3, [r7, #32]
          break;
 80075c0:	e024      	b.n	800760c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	3308      	adds	r3, #8
 80075c8:	623b      	str	r3, [r7, #32]
          break;
 80075ca:	e01f      	b.n	800760c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	330c      	adds	r3, #12
 80075d2:	623b      	str	r3, [r7, #32]
          break;
 80075d4:	e01a      	b.n	800760c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d102      	bne.n	80075e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80075de:	2304      	movs	r3, #4
 80075e0:	623b      	str	r3, [r7, #32]
          break;
 80075e2:	e013      	b.n	800760c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d105      	bne.n	80075f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80075ec:	2308      	movs	r3, #8
 80075ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	611a      	str	r2, [r3, #16]
          break;
 80075f6:	e009      	b.n	800760c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80075f8:	2308      	movs	r3, #8
 80075fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	615a      	str	r2, [r3, #20]
          break;
 8007602:	e003      	b.n	800760c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007604:	2300      	movs	r3, #0
 8007606:	623b      	str	r3, [r7, #32]
          break;
 8007608:	e000      	b.n	800760c <HAL_GPIO_Init+0x130>
          break;
 800760a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2bff      	cmp	r3, #255	@ 0xff
 8007610:	d801      	bhi.n	8007616 <HAL_GPIO_Init+0x13a>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	e001      	b.n	800761a <HAL_GPIO_Init+0x13e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3304      	adds	r3, #4
 800761a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2bff      	cmp	r3, #255	@ 0xff
 8007620:	d802      	bhi.n	8007628 <HAL_GPIO_Init+0x14c>
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	e002      	b.n	800762e <HAL_GPIO_Init+0x152>
 8007628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762a:	3b08      	subs	r3, #8
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	210f      	movs	r1, #15
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	fa01 f303 	lsl.w	r3, r1, r3
 800763c:	43db      	mvns	r3, r3
 800763e:	401a      	ands	r2, r3
 8007640:	6a39      	ldr	r1, [r7, #32]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	fa01 f303 	lsl.w	r3, r1, r3
 8007648:	431a      	orrs	r2, r3
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80c1 	beq.w	80077de <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800765c:	4b49      	ldr	r3, [pc, #292]	@ (8007784 <HAL_GPIO_Init+0x2a8>)
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	4a48      	ldr	r2, [pc, #288]	@ (8007784 <HAL_GPIO_Init+0x2a8>)
 8007662:	f043 0301 	orr.w	r3, r3, #1
 8007666:	6193      	str	r3, [r2, #24]
 8007668:	4b46      	ldr	r3, [pc, #280]	@ (8007784 <HAL_GPIO_Init+0x2a8>)
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	60bb      	str	r3, [r7, #8]
 8007672:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007674:	4a44      	ldr	r2, [pc, #272]	@ (8007788 <HAL_GPIO_Init+0x2ac>)
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	089b      	lsrs	r3, r3, #2
 800767a:	3302      	adds	r3, #2
 800767c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007680:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	220f      	movs	r2, #15
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	43db      	mvns	r3, r3
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4013      	ands	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a3c      	ldr	r2, [pc, #240]	@ (800778c <HAL_GPIO_Init+0x2b0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d01f      	beq.n	80076e0 <HAL_GPIO_Init+0x204>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a3b      	ldr	r2, [pc, #236]	@ (8007790 <HAL_GPIO_Init+0x2b4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d019      	beq.n	80076dc <HAL_GPIO_Init+0x200>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a3a      	ldr	r2, [pc, #232]	@ (8007794 <HAL_GPIO_Init+0x2b8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <HAL_GPIO_Init+0x1fc>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a39      	ldr	r2, [pc, #228]	@ (8007798 <HAL_GPIO_Init+0x2bc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00d      	beq.n	80076d4 <HAL_GPIO_Init+0x1f8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a38      	ldr	r2, [pc, #224]	@ (800779c <HAL_GPIO_Init+0x2c0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <HAL_GPIO_Init+0x1f4>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a37      	ldr	r2, [pc, #220]	@ (80077a0 <HAL_GPIO_Init+0x2c4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d101      	bne.n	80076cc <HAL_GPIO_Init+0x1f0>
 80076c8:	2305      	movs	r3, #5
 80076ca:	e00a      	b.n	80076e2 <HAL_GPIO_Init+0x206>
 80076cc:	2306      	movs	r3, #6
 80076ce:	e008      	b.n	80076e2 <HAL_GPIO_Init+0x206>
 80076d0:	2304      	movs	r3, #4
 80076d2:	e006      	b.n	80076e2 <HAL_GPIO_Init+0x206>
 80076d4:	2303      	movs	r3, #3
 80076d6:	e004      	b.n	80076e2 <HAL_GPIO_Init+0x206>
 80076d8:	2302      	movs	r3, #2
 80076da:	e002      	b.n	80076e2 <HAL_GPIO_Init+0x206>
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <HAL_GPIO_Init+0x206>
 80076e0:	2300      	movs	r3, #0
 80076e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e4:	f002 0203 	and.w	r2, r2, #3
 80076e8:	0092      	lsls	r2, r2, #2
 80076ea:	4093      	lsls	r3, r2
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80076f2:	4925      	ldr	r1, [pc, #148]	@ (8007788 <HAL_GPIO_Init+0x2ac>)
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	089b      	lsrs	r3, r3, #2
 80076f8:	3302      	adds	r3, #2
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d006      	beq.n	800771a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800770c:	4b25      	ldr	r3, [pc, #148]	@ (80077a4 <HAL_GPIO_Init+0x2c8>)
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	4924      	ldr	r1, [pc, #144]	@ (80077a4 <HAL_GPIO_Init+0x2c8>)
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	4313      	orrs	r3, r2
 8007716:	608b      	str	r3, [r1, #8]
 8007718:	e006      	b.n	8007728 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800771a:	4b22      	ldr	r3, [pc, #136]	@ (80077a4 <HAL_GPIO_Init+0x2c8>)
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	43db      	mvns	r3, r3
 8007722:	4920      	ldr	r1, [pc, #128]	@ (80077a4 <HAL_GPIO_Init+0x2c8>)
 8007724:	4013      	ands	r3, r2
 8007726:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d006      	beq.n	8007742 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007734:	4b1b      	ldr	r3, [pc, #108]	@ (80077a4 <HAL_GPIO_Init+0x2c8>)
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	491a      	ldr	r1, [pc, #104]	@ (80077a4 <HAL_GPIO_Init+0x2c8>)
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	4313      	orrs	r3, r2
 800773e:	60cb      	str	r3, [r1, #12]
 8007740:	e006      	b.n	8007750 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007742:	4b18      	ldr	r3, [pc, #96]	@ (80077a4 <HAL_GPIO_Init+0x2c8>)
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	43db      	mvns	r3, r3
 800774a:	4916      	ldr	r1, [pc, #88]	@ (80077a4 <HAL_GPIO_Init+0x2c8>)
 800774c:	4013      	ands	r3, r2
 800774e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d025      	beq.n	80077a8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800775c:	4b11      	ldr	r3, [pc, #68]	@ (80077a4 <HAL_GPIO_Init+0x2c8>)
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	4910      	ldr	r1, [pc, #64]	@ (80077a4 <HAL_GPIO_Init+0x2c8>)
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	4313      	orrs	r3, r2
 8007766:	604b      	str	r3, [r1, #4]
 8007768:	e025      	b.n	80077b6 <HAL_GPIO_Init+0x2da>
 800776a:	bf00      	nop
 800776c:	10320000 	.word	0x10320000
 8007770:	10310000 	.word	0x10310000
 8007774:	10220000 	.word	0x10220000
 8007778:	10210000 	.word	0x10210000
 800777c:	10120000 	.word	0x10120000
 8007780:	10110000 	.word	0x10110000
 8007784:	40021000 	.word	0x40021000
 8007788:	40010000 	.word	0x40010000
 800778c:	40010800 	.word	0x40010800
 8007790:	40010c00 	.word	0x40010c00
 8007794:	40011000 	.word	0x40011000
 8007798:	40011400 	.word	0x40011400
 800779c:	40011800 	.word	0x40011800
 80077a0:	40011c00 	.word	0x40011c00
 80077a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80077a8:	4b15      	ldr	r3, [pc, #84]	@ (8007800 <HAL_GPIO_Init+0x324>)
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	43db      	mvns	r3, r3
 80077b0:	4913      	ldr	r1, [pc, #76]	@ (8007800 <HAL_GPIO_Init+0x324>)
 80077b2:	4013      	ands	r3, r2
 80077b4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d006      	beq.n	80077d0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80077c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007800 <HAL_GPIO_Init+0x324>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	490e      	ldr	r1, [pc, #56]	@ (8007800 <HAL_GPIO_Init+0x324>)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	600b      	str	r3, [r1, #0]
 80077ce:	e006      	b.n	80077de <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80077d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007800 <HAL_GPIO_Init+0x324>)
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	43db      	mvns	r3, r3
 80077d8:	4909      	ldr	r1, [pc, #36]	@ (8007800 <HAL_GPIO_Init+0x324>)
 80077da:	4013      	ands	r3, r2
 80077dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	3301      	adds	r3, #1
 80077e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	fa22 f303 	lsr.w	r3, r2, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f47f ae7e 	bne.w	80074f0 <HAL_GPIO_Init+0x14>
  }
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	372c      	adds	r7, #44	@ 0x2c
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bc80      	pop	{r7}
 80077fe:	4770      	bx	lr
 8007800:	40010400 	.word	0x40010400

08007804 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	887b      	ldrh	r3, [r7, #2]
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
 8007820:	e001      	b.n	8007826 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr

08007832 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	460b      	mov	r3, r1
 800783c:	807b      	strh	r3, [r7, #2]
 800783e:	4613      	mov	r3, r2
 8007840:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007842:	787b      	ldrb	r3, [r7, #1]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007848:	887a      	ldrh	r2, [r7, #2]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800784e:	e003      	b.n	8007858 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007850:	887b      	ldrh	r3, [r7, #2]
 8007852:	041a      	lsls	r2, r3, #16
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	611a      	str	r2, [r3, #16]
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	bc80      	pop	{r7}
 8007860:	4770      	bx	lr
	...

08007864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800786e:	4b08      	ldr	r3, [pc, #32]	@ (8007890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007870:	695a      	ldr	r2, [r3, #20]
 8007872:	88fb      	ldrh	r3, [r7, #6]
 8007874:	4013      	ands	r3, r2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d006      	beq.n	8007888 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800787a:	4a05      	ldr	r2, [pc, #20]	@ (8007890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800787c:	88fb      	ldrh	r3, [r7, #6]
 800787e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	4618      	mov	r0, r3
 8007884:	f7fb fb0c 	bl	8002ea0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007888:	bf00      	nop
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40010400 	.word	0x40010400

08007894 <HAL_GPIOEx_ConfigEventout>:
  * @param  GPIO_PinSource Select the pin used to output the Cortex EVENTOUT signal.
  *   This parameter can be a value of @ref GPIOEx_EVENTOUT_PIN.
  * @retval None
  */
void HAL_GPIOEx_ConfigEventout(uint32_t GPIO_PortSource, uint32_t GPIO_PinSource)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));

  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT) | (AFIO_EVCR_PIN), (GPIO_PortSource) | (GPIO_PinSource));
 800789e:	4b07      	ldr	r3, [pc, #28]	@ (80078bc <HAL_GPIOEx_ConfigEventout+0x28>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	430b      	orrs	r3, r1
 80078ac:	4903      	ldr	r1, [pc, #12]	@ (80078bc <HAL_GPIOEx_ConfigEventout+0x28>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	600b      	str	r3, [r1, #0]
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bc80      	pop	{r7}
 80078ba:	4770      	bx	lr
 80078bc:	40010000 	.word	0x40010000

080078c0 <HAL_GPIOEx_EnableEventout>:
/**
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 80078c4:	4b04      	ldr	r3, [pc, #16]	@ (80078d8 <HAL_GPIOEx_EnableEventout+0x18>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a03      	ldr	r2, [pc, #12]	@ (80078d8 <HAL_GPIOEx_EnableEventout+0x18>)
 80078ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ce:	6013      	str	r3, [r2, #0]
}
 80078d0:	bf00      	nop
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr
 80078d8:	40010000 	.word	0x40010000

080078dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e272      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 8087 	beq.w	8007a0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078fc:	4b92      	ldr	r3, [pc, #584]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f003 030c 	and.w	r3, r3, #12
 8007904:	2b04      	cmp	r3, #4
 8007906:	d00c      	beq.n	8007922 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007908:	4b8f      	ldr	r3, [pc, #572]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f003 030c 	and.w	r3, r3, #12
 8007910:	2b08      	cmp	r3, #8
 8007912:	d112      	bne.n	800793a <HAL_RCC_OscConfig+0x5e>
 8007914:	4b8c      	ldr	r3, [pc, #560]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800791c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007920:	d10b      	bne.n	800793a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007922:	4b89      	ldr	r3, [pc, #548]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d06c      	beq.n	8007a08 <HAL_RCC_OscConfig+0x12c>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d168      	bne.n	8007a08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e24c      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007942:	d106      	bne.n	8007952 <HAL_RCC_OscConfig+0x76>
 8007944:	4b80      	ldr	r3, [pc, #512]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a7f      	ldr	r2, [pc, #508]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 800794a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	e02e      	b.n	80079b0 <HAL_RCC_OscConfig+0xd4>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10c      	bne.n	8007974 <HAL_RCC_OscConfig+0x98>
 800795a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a7a      	ldr	r2, [pc, #488]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	4b78      	ldr	r3, [pc, #480]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a77      	ldr	r2, [pc, #476]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 800796c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	e01d      	b.n	80079b0 <HAL_RCC_OscConfig+0xd4>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800797c:	d10c      	bne.n	8007998 <HAL_RCC_OscConfig+0xbc>
 800797e:	4b72      	ldr	r3, [pc, #456]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a71      	ldr	r2, [pc, #452]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	4b6f      	ldr	r3, [pc, #444]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a6e      	ldr	r2, [pc, #440]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	e00b      	b.n	80079b0 <HAL_RCC_OscConfig+0xd4>
 8007998:	4b6b      	ldr	r3, [pc, #428]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a6a      	ldr	r2, [pc, #424]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 800799e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	4b68      	ldr	r3, [pc, #416]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a67      	ldr	r2, [pc, #412]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 80079aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d013      	beq.n	80079e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b8:	f7ff fb40 	bl	800703c <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079be:	e008      	b.n	80079d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079c0:	f7ff fb3c 	bl	800703c <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b64      	cmp	r3, #100	@ 0x64
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e200      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d2:	4b5d      	ldr	r3, [pc, #372]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0f0      	beq.n	80079c0 <HAL_RCC_OscConfig+0xe4>
 80079de:	e014      	b.n	8007a0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e0:	f7ff fb2c 	bl	800703c <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079e8:	f7ff fb28 	bl	800703c <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b64      	cmp	r3, #100	@ 0x64
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e1ec      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079fa:	4b53      	ldr	r3, [pc, #332]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f0      	bne.n	80079e8 <HAL_RCC_OscConfig+0x10c>
 8007a06:	e000      	b.n	8007a0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d063      	beq.n	8007ade <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a16:	4b4c      	ldr	r3, [pc, #304]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f003 030c 	and.w	r3, r3, #12
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007a22:	4b49      	ldr	r3, [pc, #292]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f003 030c 	and.w	r3, r3, #12
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d11c      	bne.n	8007a68 <HAL_RCC_OscConfig+0x18c>
 8007a2e:	4b46      	ldr	r3, [pc, #280]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d116      	bne.n	8007a68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a3a:	4b43      	ldr	r3, [pc, #268]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <HAL_RCC_OscConfig+0x176>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d001      	beq.n	8007a52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e1c0      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a52:	4b3d      	ldr	r3, [pc, #244]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	4939      	ldr	r1, [pc, #228]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a66:	e03a      	b.n	8007ade <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d020      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a70:	4b36      	ldr	r3, [pc, #216]	@ (8007b4c <HAL_RCC_OscConfig+0x270>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a76:	f7ff fae1 	bl	800703c <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a7c:	e008      	b.n	8007a90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a7e:	f7ff fadd 	bl	800703c <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e1a1      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a90:	4b2d      	ldr	r3, [pc, #180]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f0      	beq.n	8007a7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	00db      	lsls	r3, r3, #3
 8007aaa:	4927      	ldr	r1, [pc, #156]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	600b      	str	r3, [r1, #0]
 8007ab0:	e015      	b.n	8007ade <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ab2:	4b26      	ldr	r3, [pc, #152]	@ (8007b4c <HAL_RCC_OscConfig+0x270>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab8:	f7ff fac0 	bl	800703c <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ac0:	f7ff fabc 	bl	800703c <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e180      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d03a      	beq.n	8007b60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d019      	beq.n	8007b26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007af2:	4b17      	ldr	r3, [pc, #92]	@ (8007b50 <HAL_RCC_OscConfig+0x274>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007af8:	f7ff faa0 	bl	800703c <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b00:	f7ff fa9c 	bl	800703c <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e160      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b12:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <HAL_RCC_OscConfig+0x26c>)
 8007b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0f0      	beq.n	8007b00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007b1e:	2001      	movs	r0, #1
 8007b20:	f000 fafe 	bl	8008120 <RCC_Delay>
 8007b24:	e01c      	b.n	8007b60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b26:	4b0a      	ldr	r3, [pc, #40]	@ (8007b50 <HAL_RCC_OscConfig+0x274>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b2c:	f7ff fa86 	bl	800703c <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b32:	e00f      	b.n	8007b54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b34:	f7ff fa82 	bl	800703c <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d908      	bls.n	8007b54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e146      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
 8007b46:	bf00      	nop
 8007b48:	40021000 	.word	0x40021000
 8007b4c:	42420000 	.word	0x42420000
 8007b50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b54:	4b92      	ldr	r3, [pc, #584]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e9      	bne.n	8007b34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80a6 	beq.w	8007cba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b72:	4b8b      	ldr	r3, [pc, #556]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10d      	bne.n	8007b9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b7e:	4b88      	ldr	r3, [pc, #544]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	4a87      	ldr	r2, [pc, #540]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b88:	61d3      	str	r3, [r2, #28]
 8007b8a:	4b85      	ldr	r3, [pc, #532]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b92:	60bb      	str	r3, [r7, #8]
 8007b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b96:	2301      	movs	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b9a:	4b82      	ldr	r3, [pc, #520]	@ (8007da4 <HAL_RCC_OscConfig+0x4c8>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d118      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8007da4 <HAL_RCC_OscConfig+0x4c8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a7e      	ldr	r2, [pc, #504]	@ (8007da4 <HAL_RCC_OscConfig+0x4c8>)
 8007bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bb2:	f7ff fa43 	bl	800703c <HAL_GetTick>
 8007bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bb8:	e008      	b.n	8007bcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bba:	f7ff fa3f 	bl	800703c <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b64      	cmp	r3, #100	@ 0x64
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e103      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bcc:	4b75      	ldr	r3, [pc, #468]	@ (8007da4 <HAL_RCC_OscConfig+0x4c8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0f0      	beq.n	8007bba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d106      	bne.n	8007bee <HAL_RCC_OscConfig+0x312>
 8007be0:	4b6f      	ldr	r3, [pc, #444]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	4a6e      	ldr	r2, [pc, #440]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	6213      	str	r3, [r2, #32]
 8007bec:	e02d      	b.n	8007c4a <HAL_RCC_OscConfig+0x36e>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10c      	bne.n	8007c10 <HAL_RCC_OscConfig+0x334>
 8007bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	4a69      	ldr	r2, [pc, #420]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007bfc:	f023 0301 	bic.w	r3, r3, #1
 8007c00:	6213      	str	r3, [r2, #32]
 8007c02:	4b67      	ldr	r3, [pc, #412]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	4a66      	ldr	r2, [pc, #408]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c08:	f023 0304 	bic.w	r3, r3, #4
 8007c0c:	6213      	str	r3, [r2, #32]
 8007c0e:	e01c      	b.n	8007c4a <HAL_RCC_OscConfig+0x36e>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b05      	cmp	r3, #5
 8007c16:	d10c      	bne.n	8007c32 <HAL_RCC_OscConfig+0x356>
 8007c18:	4b61      	ldr	r3, [pc, #388]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	4a60      	ldr	r2, [pc, #384]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c1e:	f043 0304 	orr.w	r3, r3, #4
 8007c22:	6213      	str	r3, [r2, #32]
 8007c24:	4b5e      	ldr	r3, [pc, #376]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	4a5d      	ldr	r2, [pc, #372]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c2a:	f043 0301 	orr.w	r3, r3, #1
 8007c2e:	6213      	str	r3, [r2, #32]
 8007c30:	e00b      	b.n	8007c4a <HAL_RCC_OscConfig+0x36e>
 8007c32:	4b5b      	ldr	r3, [pc, #364]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	4a5a      	ldr	r2, [pc, #360]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c38:	f023 0301 	bic.w	r3, r3, #1
 8007c3c:	6213      	str	r3, [r2, #32]
 8007c3e:	4b58      	ldr	r3, [pc, #352]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	4a57      	ldr	r2, [pc, #348]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c44:	f023 0304 	bic.w	r3, r3, #4
 8007c48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d015      	beq.n	8007c7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c52:	f7ff f9f3 	bl	800703c <HAL_GetTick>
 8007c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c58:	e00a      	b.n	8007c70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c5a:	f7ff f9ef 	bl	800703c <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e0b1      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c70:	4b4b      	ldr	r3, [pc, #300]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0ee      	beq.n	8007c5a <HAL_RCC_OscConfig+0x37e>
 8007c7c:	e014      	b.n	8007ca8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c7e:	f7ff f9dd 	bl	800703c <HAL_GetTick>
 8007c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c84:	e00a      	b.n	8007c9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c86:	f7ff f9d9 	bl	800703c <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d901      	bls.n	8007c9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e09b      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c9c:	4b40      	ldr	r3, [pc, #256]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1ee      	bne.n	8007c86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d105      	bne.n	8007cba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cae:	4b3c      	ldr	r3, [pc, #240]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	4a3b      	ldr	r2, [pc, #236]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007cb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 8087 	beq.w	8007dd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cc4:	4b36      	ldr	r3, [pc, #216]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f003 030c 	and.w	r3, r3, #12
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d061      	beq.n	8007d94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d146      	bne.n	8007d66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cd8:	4b33      	ldr	r3, [pc, #204]	@ (8007da8 <HAL_RCC_OscConfig+0x4cc>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cde:	f7ff f9ad 	bl	800703c <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ce6:	f7ff f9a9 	bl	800703c <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e06d      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cf8:	4b29      	ldr	r3, [pc, #164]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1f0      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d0c:	d108      	bne.n	8007d20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007d0e:	4b24      	ldr	r3, [pc, #144]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	4921      	ldr	r1, [pc, #132]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d20:	4b1f      	ldr	r3, [pc, #124]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a19      	ldr	r1, [r3, #32]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d30:	430b      	orrs	r3, r1
 8007d32:	491b      	ldr	r1, [pc, #108]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d38:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <HAL_RCC_OscConfig+0x4cc>)
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3e:	f7ff f97d 	bl	800703c <HAL_GetTick>
 8007d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d44:	e008      	b.n	8007d58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d46:	f7ff f979 	bl	800703c <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d901      	bls.n	8007d58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e03d      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d58:	4b11      	ldr	r3, [pc, #68]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0f0      	beq.n	8007d46 <HAL_RCC_OscConfig+0x46a>
 8007d64:	e035      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d66:	4b10      	ldr	r3, [pc, #64]	@ (8007da8 <HAL_RCC_OscConfig+0x4cc>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d6c:	f7ff f966 	bl	800703c <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d74:	f7ff f962 	bl	800703c <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e026      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d86:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <HAL_RCC_OscConfig+0x4c4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f0      	bne.n	8007d74 <HAL_RCC_OscConfig+0x498>
 8007d92:	e01e      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d107      	bne.n	8007dac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e019      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
 8007da0:	40021000 	.word	0x40021000
 8007da4:	40007000 	.word	0x40007000
 8007da8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007dac:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <HAL_RCC_OscConfig+0x500>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d106      	bne.n	8007dce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d001      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e000      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3718      	adds	r7, #24
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	40021000 	.word	0x40021000

08007de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e0d0      	b.n	8007f96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007df4:	4b6a      	ldr	r3, [pc, #424]	@ (8007fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0307 	and.w	r3, r3, #7
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d910      	bls.n	8007e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e02:	4b67      	ldr	r3, [pc, #412]	@ (8007fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f023 0207 	bic.w	r2, r3, #7
 8007e0a:	4965      	ldr	r1, [pc, #404]	@ (8007fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e12:	4b63      	ldr	r3, [pc, #396]	@ (8007fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d001      	beq.n	8007e24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e0b8      	b.n	8007f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d020      	beq.n	8007e72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0304 	and.w	r3, r3, #4
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e3c:	4b59      	ldr	r3, [pc, #356]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	4a58      	ldr	r2, [pc, #352]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007e46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0308 	and.w	r3, r3, #8
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e54:	4b53      	ldr	r3, [pc, #332]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	4a52      	ldr	r2, [pc, #328]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007e5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e60:	4b50      	ldr	r3, [pc, #320]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	494d      	ldr	r1, [pc, #308]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d040      	beq.n	8007f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d107      	bne.n	8007e96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e86:	4b47      	ldr	r3, [pc, #284]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d115      	bne.n	8007ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e07f      	b.n	8007f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d107      	bne.n	8007eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e9e:	4b41      	ldr	r3, [pc, #260]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d109      	bne.n	8007ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e073      	b.n	8007f96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eae:	4b3d      	ldr	r3, [pc, #244]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e06b      	b.n	8007f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ebe:	4b39      	ldr	r3, [pc, #228]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f023 0203 	bic.w	r2, r3, #3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	4936      	ldr	r1, [pc, #216]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ed0:	f7ff f8b4 	bl	800703c <HAL_GetTick>
 8007ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ed6:	e00a      	b.n	8007eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ed8:	f7ff f8b0 	bl	800703c <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e053      	b.n	8007f96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eee:	4b2d      	ldr	r3, [pc, #180]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f003 020c 	and.w	r2, r3, #12
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d1eb      	bne.n	8007ed8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f00:	4b27      	ldr	r3, [pc, #156]	@ (8007fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d210      	bcs.n	8007f30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f0e:	4b24      	ldr	r3, [pc, #144]	@ (8007fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f023 0207 	bic.w	r2, r3, #7
 8007f16:	4922      	ldr	r1, [pc, #136]	@ (8007fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f1e:	4b20      	ldr	r3, [pc, #128]	@ (8007fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d001      	beq.n	8007f30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e032      	b.n	8007f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d008      	beq.n	8007f4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f3c:	4b19      	ldr	r3, [pc, #100]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	4916      	ldr	r1, [pc, #88]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0308 	and.w	r3, r3, #8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d009      	beq.n	8007f6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f5a:	4b12      	ldr	r3, [pc, #72]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	490e      	ldr	r1, [pc, #56]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f6e:	f000 f821 	bl	8007fb4 <HAL_RCC_GetSysClockFreq>
 8007f72:	4602      	mov	r2, r0
 8007f74:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	091b      	lsrs	r3, r3, #4
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	490a      	ldr	r1, [pc, #40]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f80:	5ccb      	ldrb	r3, [r1, r3]
 8007f82:	fa22 f303 	lsr.w	r3, r2, r3
 8007f86:	4a09      	ldr	r2, [pc, #36]	@ (8007fac <HAL_RCC_ClockConfig+0x1cc>)
 8007f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007f8a:	4b09      	ldr	r3, [pc, #36]	@ (8007fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe fe58 	bl	8006c44 <HAL_InitTick>

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40022000 	.word	0x40022000
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	0800e93c 	.word	0x0800e93c
 8007fac:	20000038 	.word	0x20000038
 8007fb0:	2000003c 	.word	0x2000003c

08007fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60bb      	str	r3, [r7, #8]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007fce:	4b1e      	ldr	r3, [pc, #120]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x94>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f003 030c 	and.w	r3, r3, #12
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d002      	beq.n	8007fe4 <HAL_RCC_GetSysClockFreq+0x30>
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d003      	beq.n	8007fea <HAL_RCC_GetSysClockFreq+0x36>
 8007fe2:	e027      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007fe4:	4b19      	ldr	r3, [pc, #100]	@ (800804c <HAL_RCC_GetSysClockFreq+0x98>)
 8007fe6:	613b      	str	r3, [r7, #16]
      break;
 8007fe8:	e027      	b.n	800803a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	0c9b      	lsrs	r3, r3, #18
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	4a17      	ldr	r2, [pc, #92]	@ (8008050 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007ff4:	5cd3      	ldrb	r3, [r2, r3]
 8007ff6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d010      	beq.n	8008024 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008002:	4b11      	ldr	r3, [pc, #68]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x94>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	0c5b      	lsrs	r3, r3, #17
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	4a11      	ldr	r2, [pc, #68]	@ (8008054 <HAL_RCC_GetSysClockFreq+0xa0>)
 800800e:	5cd3      	ldrb	r3, [r2, r3]
 8008010:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a0d      	ldr	r2, [pc, #52]	@ (800804c <HAL_RCC_GetSysClockFreq+0x98>)
 8008016:	fb03 f202 	mul.w	r2, r3, r2
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	e004      	b.n	800802e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a0c      	ldr	r2, [pc, #48]	@ (8008058 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008028:	fb02 f303 	mul.w	r3, r2, r3
 800802c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	613b      	str	r3, [r7, #16]
      break;
 8008032:	e002      	b.n	800803a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008034:	4b05      	ldr	r3, [pc, #20]	@ (800804c <HAL_RCC_GetSysClockFreq+0x98>)
 8008036:	613b      	str	r3, [r7, #16]
      break;
 8008038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800803a:	693b      	ldr	r3, [r7, #16]
}
 800803c:	4618      	mov	r0, r3
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	bc80      	pop	{r7}
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40021000 	.word	0x40021000
 800804c:	007a1200 	.word	0x007a1200
 8008050:	0800e954 	.word	0x0800e954
 8008054:	0800e964 	.word	0x0800e964
 8008058:	003d0900 	.word	0x003d0900

0800805c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008060:	4b02      	ldr	r3, [pc, #8]	@ (800806c <HAL_RCC_GetHCLKFreq+0x10>)
 8008062:	681b      	ldr	r3, [r3, #0]
}
 8008064:	4618      	mov	r0, r3
 8008066:	46bd      	mov	sp, r7
 8008068:	bc80      	pop	{r7}
 800806a:	4770      	bx	lr
 800806c:	20000038 	.word	0x20000038

08008070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008074:	f7ff fff2 	bl	800805c <HAL_RCC_GetHCLKFreq>
 8008078:	4602      	mov	r2, r0
 800807a:	4b05      	ldr	r3, [pc, #20]	@ (8008090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	4903      	ldr	r1, [pc, #12]	@ (8008094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008086:	5ccb      	ldrb	r3, [r1, r3]
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800808c:	4618      	mov	r0, r3
 800808e:	bd80      	pop	{r7, pc}
 8008090:	40021000 	.word	0x40021000
 8008094:	0800e94c 	.word	0x0800e94c

08008098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800809c:	f7ff ffde 	bl	800805c <HAL_RCC_GetHCLKFreq>
 80080a0:	4602      	mov	r2, r0
 80080a2:	4b05      	ldr	r3, [pc, #20]	@ (80080b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	0adb      	lsrs	r3, r3, #11
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	4903      	ldr	r1, [pc, #12]	@ (80080bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80080ae:	5ccb      	ldrb	r3, [r1, r3]
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40021000 	.word	0x40021000
 80080bc:	0800e94c 	.word	0x0800e94c

080080c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	220f      	movs	r2, #15
 80080ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080d0:	4b11      	ldr	r3, [pc, #68]	@ (8008118 <HAL_RCC_GetClockConfig+0x58>)
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f003 0203 	and.w	r2, r3, #3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80080dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008118 <HAL_RCC_GetClockConfig+0x58>)
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80080e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008118 <HAL_RCC_GetClockConfig+0x58>)
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80080f4:	4b08      	ldr	r3, [pc, #32]	@ (8008118 <HAL_RCC_GetClockConfig+0x58>)
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	08db      	lsrs	r3, r3, #3
 80080fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008102:	4b06      	ldr	r3, [pc, #24]	@ (800811c <HAL_RCC_GetClockConfig+0x5c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0207 	and.w	r2, r3, #7
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr
 8008118:	40021000 	.word	0x40021000
 800811c:	40022000 	.word	0x40022000

08008120 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008128:	4b0a      	ldr	r3, [pc, #40]	@ (8008154 <RCC_Delay+0x34>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a0a      	ldr	r2, [pc, #40]	@ (8008158 <RCC_Delay+0x38>)
 800812e:	fba2 2303 	umull	r2, r3, r2, r3
 8008132:	0a5b      	lsrs	r3, r3, #9
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	fb02 f303 	mul.w	r3, r2, r3
 800813a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800813c:	bf00      	nop
  }
  while (Delay --);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1e5a      	subs	r2, r3, #1
 8008142:	60fa      	str	r2, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1f9      	bne.n	800813c <RCC_Delay+0x1c>
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr
 8008154:	20000038 	.word	0x20000038
 8008158:	10624dd3 	.word	0x10624dd3

0800815c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e076      	b.n	800825c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008172:	2b00      	cmp	r3, #0
 8008174:	d108      	bne.n	8008188 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800817e:	d009      	beq.n	8008194 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	61da      	str	r2, [r3, #28]
 8008186:	e005      	b.n	8008194 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fe fb8a 	bl	80068c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	431a      	orrs	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008204:	431a      	orrs	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008218:	ea42 0103 	orr.w	r1, r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008220:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	0c1a      	lsrs	r2, r3, #16
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f002 0204 	and.w	r2, r2, #4
 800823a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69da      	ldr	r2, [r3, #28]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800824a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	603b      	str	r3, [r7, #0]
 8008270:	4613      	mov	r3, r2
 8008272:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800827e:	2b01      	cmp	r3, #1
 8008280:	d101      	bne.n	8008286 <HAL_SPI_Transmit+0x22>
 8008282:	2302      	movs	r3, #2
 8008284:	e12d      	b.n	80084e2 <HAL_SPI_Transmit+0x27e>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800828e:	f7fe fed5 	bl	800703c <HAL_GetTick>
 8008292:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008294:	88fb      	ldrh	r3, [r7, #6]
 8008296:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d002      	beq.n	80082aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80082a4:	2302      	movs	r3, #2
 80082a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082a8:	e116      	b.n	80084d8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <HAL_SPI_Transmit+0x52>
 80082b0:	88fb      	ldrh	r3, [r7, #6]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082ba:	e10d      	b.n	80084d8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2203      	movs	r2, #3
 80082c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	88fa      	ldrh	r2, [r7, #6]
 80082d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	88fa      	ldrh	r2, [r7, #6]
 80082da:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008302:	d10f      	bne.n	8008324 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008312:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008322:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800832e:	2b40      	cmp	r3, #64	@ 0x40
 8008330:	d007      	beq.n	8008342 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008340:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800834a:	d14f      	bne.n	80083ec <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <HAL_SPI_Transmit+0xf6>
 8008354:	8afb      	ldrh	r3, [r7, #22]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d142      	bne.n	80083e0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800835e:	881a      	ldrh	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800836a:	1c9a      	adds	r2, r3, #2
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800837e:	e02f      	b.n	80083e0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b02      	cmp	r3, #2
 800838c:	d112      	bne.n	80083b4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008392:	881a      	ldrh	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839e:	1c9a      	adds	r2, r3, #2
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	3b01      	subs	r3, #1
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80083b2:	e015      	b.n	80083e0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083b4:	f7fe fe42 	bl	800703c <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d803      	bhi.n	80083cc <HAL_SPI_Transmit+0x168>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083ca:	d102      	bne.n	80083d2 <HAL_SPI_Transmit+0x16e>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80083de:	e07b      	b.n	80084d8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1ca      	bne.n	8008380 <HAL_SPI_Transmit+0x11c>
 80083ea:	e050      	b.n	800848e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <HAL_SPI_Transmit+0x196>
 80083f4:	8afb      	ldrh	r3, [r7, #22]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d144      	bne.n	8008484 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	330c      	adds	r3, #12
 8008404:	7812      	ldrb	r2, [r2, #0]
 8008406:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008416:	b29b      	uxth	r3, r3
 8008418:	3b01      	subs	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008420:	e030      	b.n	8008484 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b02      	cmp	r3, #2
 800842e:	d113      	bne.n	8008458 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	330c      	adds	r3, #12
 800843a:	7812      	ldrb	r2, [r2, #0]
 800843c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800844c:	b29b      	uxth	r3, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	b29a      	uxth	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008456:	e015      	b.n	8008484 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008458:	f7fe fdf0 	bl	800703c <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d803      	bhi.n	8008470 <HAL_SPI_Transmit+0x20c>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800846e:	d102      	bne.n	8008476 <HAL_SPI_Transmit+0x212>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008482:	e029      	b.n	80084d8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1c9      	bne.n	8008422 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fbcc 	bl	8008c30 <SPI_EndRxTxTransaction>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2220      	movs	r2, #32
 80084a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084ac:	2300      	movs	r3, #0
 80084ae:	613b      	str	r3, [r7, #16]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	613b      	str	r3, [r7, #16]
 80084c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	77fb      	strb	r3, [r7, #31]
 80084ce:	e003      	b.n	80084d8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80084e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3720      	adds	r7, #32
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b088      	sub	sp, #32
 80084ee:	af02      	add	r7, sp, #8
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	603b      	str	r3, [r7, #0]
 80084f6:	4613      	mov	r3, r2
 80084f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b01      	cmp	r3, #1
 8008508:	d002      	beq.n	8008510 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800850a:	2302      	movs	r3, #2
 800850c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800850e:	e0fb      	b.n	8008708 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008518:	d112      	bne.n	8008540 <HAL_SPI_Receive+0x56>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10e      	bne.n	8008540 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2204      	movs	r2, #4
 8008526:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800852a:	88fa      	ldrh	r2, [r7, #6]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	4613      	mov	r3, r2
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	68b9      	ldr	r1, [r7, #8]
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 f8ef 	bl	800871a <HAL_SPI_TransmitReceive>
 800853c:	4603      	mov	r3, r0
 800853e:	e0e8      	b.n	8008712 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <HAL_SPI_Receive+0x64>
 800854a:	2302      	movs	r3, #2
 800854c:	e0e1      	b.n	8008712 <HAL_SPI_Receive+0x228>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008556:	f7fe fd71 	bl	800703c <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <HAL_SPI_Receive+0x7e>
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d102      	bne.n	800856e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800856c:	e0cc      	b.n	8008708 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2204      	movs	r2, #4
 8008572:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	88fa      	ldrh	r2, [r7, #6]
 8008586:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	88fa      	ldrh	r2, [r7, #6]
 800858c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085b4:	d10f      	bne.n	80085d6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80085d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e0:	2b40      	cmp	r3, #64	@ 0x40
 80085e2:	d007      	beq.n	80085f4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d16a      	bne.n	80086d2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80085fc:	e032      	b.n	8008664 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b01      	cmp	r3, #1
 800860a:	d115      	bne.n	8008638 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f103 020c 	add.w	r2, r3, #12
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008618:	7812      	ldrb	r2, [r2, #0]
 800861a:	b2d2      	uxtb	r2, r2
 800861c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008636:	e015      	b.n	8008664 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008638:	f7fe fd00 	bl	800703c <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	429a      	cmp	r2, r3
 8008646:	d803      	bhi.n	8008650 <HAL_SPI_Receive+0x166>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800864e:	d102      	bne.n	8008656 <HAL_SPI_Receive+0x16c>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d106      	bne.n	8008664 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008662:	e051      	b.n	8008708 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008668:	b29b      	uxth	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1c7      	bne.n	80085fe <HAL_SPI_Receive+0x114>
 800866e:	e035      	b.n	80086dc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b01      	cmp	r3, #1
 800867c:	d113      	bne.n	80086a6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008688:	b292      	uxth	r2, r2
 800868a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	1c9a      	adds	r2, r3, #2
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800869a:	b29b      	uxth	r3, r3
 800869c:	3b01      	subs	r3, #1
 800869e:	b29a      	uxth	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086a4:	e015      	b.n	80086d2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086a6:	f7fe fcc9 	bl	800703c <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d803      	bhi.n	80086be <HAL_SPI_Receive+0x1d4>
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086bc:	d102      	bne.n	80086c4 <HAL_SPI_Receive+0x1da>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d106      	bne.n	80086d2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80086d0:	e01a      	b.n	8008708 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1c9      	bne.n	8008670 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 fa53 	bl	8008b8c <SPI_EndRxTransaction>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2220      	movs	r2, #32
 80086f0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	75fb      	strb	r3, [r7, #23]
 80086fe:	e003      	b.n	8008708 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008710:	7dfb      	ldrb	r3, [r7, #23]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b08c      	sub	sp, #48	@ 0x30
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	607a      	str	r2, [r7, #4]
 8008726:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008728:	2301      	movs	r3, #1
 800872a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <HAL_SPI_TransmitReceive+0x26>
 800873c:	2302      	movs	r3, #2
 800873e:	e198      	b.n	8008a72 <HAL_SPI_TransmitReceive+0x358>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008748:	f7fe fc78 	bl	800703c <HAL_GetTick>
 800874c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800875e:	887b      	ldrh	r3, [r7, #2]
 8008760:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008762:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008766:	2b01      	cmp	r3, #1
 8008768:	d00f      	beq.n	800878a <HAL_SPI_TransmitReceive+0x70>
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008770:	d107      	bne.n	8008782 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d103      	bne.n	8008782 <HAL_SPI_TransmitReceive+0x68>
 800877a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800877e:	2b04      	cmp	r3, #4
 8008780:	d003      	beq.n	800878a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008782:	2302      	movs	r3, #2
 8008784:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008788:	e16d      	b.n	8008a66 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <HAL_SPI_TransmitReceive+0x82>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <HAL_SPI_TransmitReceive+0x82>
 8008796:	887b      	ldrh	r3, [r7, #2]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d103      	bne.n	80087a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80087a2:	e160      	b.n	8008a66 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	d003      	beq.n	80087b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2205      	movs	r2, #5
 80087b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	887a      	ldrh	r2, [r7, #2]
 80087c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	887a      	ldrh	r2, [r7, #2]
 80087ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	887a      	ldrh	r2, [r7, #2]
 80087da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	887a      	ldrh	r2, [r7, #2]
 80087e0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f8:	2b40      	cmp	r3, #64	@ 0x40
 80087fa:	d007      	beq.n	800880c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800880a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008814:	d17c      	bne.n	8008910 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <HAL_SPI_TransmitReceive+0x10a>
 800881e:	8b7b      	ldrh	r3, [r7, #26]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d16a      	bne.n	80088fa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008828:	881a      	ldrh	r2, [r3, #0]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008834:	1c9a      	adds	r2, r3, #2
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800883e:	b29b      	uxth	r3, r3
 8008840:	3b01      	subs	r3, #1
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008848:	e057      	b.n	80088fa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b02      	cmp	r3, #2
 8008856:	d11b      	bne.n	8008890 <HAL_SPI_TransmitReceive+0x176>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800885c:	b29b      	uxth	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d016      	beq.n	8008890 <HAL_SPI_TransmitReceive+0x176>
 8008862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008864:	2b01      	cmp	r3, #1
 8008866:	d113      	bne.n	8008890 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886c:	881a      	ldrh	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008878:	1c9a      	adds	r2, r3, #2
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008882:	b29b      	uxth	r3, r3
 8008884:	3b01      	subs	r3, #1
 8008886:	b29a      	uxth	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b01      	cmp	r3, #1
 800889c:	d119      	bne.n	80088d2 <HAL_SPI_TransmitReceive+0x1b8>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d014      	beq.n	80088d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b2:	b292      	uxth	r2, r2
 80088b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ba:	1c9a      	adds	r2, r3, #2
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088ce:	2301      	movs	r3, #1
 80088d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80088d2:	f7fe fbb3 	bl	800703c <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088de:	429a      	cmp	r2, r3
 80088e0:	d80b      	bhi.n	80088fa <HAL_SPI_TransmitReceive+0x1e0>
 80088e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088e8:	d007      	beq.n	80088fa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80088f8:	e0b5      	b.n	8008a66 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088fe:	b29b      	uxth	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1a2      	bne.n	800884a <HAL_SPI_TransmitReceive+0x130>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008908:	b29b      	uxth	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d19d      	bne.n	800884a <HAL_SPI_TransmitReceive+0x130>
 800890e:	e080      	b.n	8008a12 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <HAL_SPI_TransmitReceive+0x204>
 8008918:	8b7b      	ldrh	r3, [r7, #26]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d16f      	bne.n	80089fe <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	330c      	adds	r3, #12
 8008928:	7812      	ldrb	r2, [r2, #0]
 800892a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800893a:	b29b      	uxth	r3, r3
 800893c:	3b01      	subs	r3, #1
 800893e:	b29a      	uxth	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008944:	e05b      	b.n	80089fe <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b02      	cmp	r3, #2
 8008952:	d11c      	bne.n	800898e <HAL_SPI_TransmitReceive+0x274>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008958:	b29b      	uxth	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d017      	beq.n	800898e <HAL_SPI_TransmitReceive+0x274>
 800895e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008960:	2b01      	cmp	r3, #1
 8008962:	d114      	bne.n	800898e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	330c      	adds	r3, #12
 800896e:	7812      	ldrb	r2, [r2, #0]
 8008970:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008980:	b29b      	uxth	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b01      	cmp	r3, #1
 800899a:	d119      	bne.n	80089d0 <HAL_SPI_TransmitReceive+0x2b6>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d014      	beq.n	80089d0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b0:	b2d2      	uxtb	r2, r2
 80089b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089cc:	2301      	movs	r3, #1
 80089ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80089d0:	f7fe fb34 	bl	800703c <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089dc:	429a      	cmp	r2, r3
 80089de:	d803      	bhi.n	80089e8 <HAL_SPI_TransmitReceive+0x2ce>
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089e6:	d102      	bne.n	80089ee <HAL_SPI_TransmitReceive+0x2d4>
 80089e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d107      	bne.n	80089fe <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80089fc:	e033      	b.n	8008a66 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d19e      	bne.n	8008946 <HAL_SPI_TransmitReceive+0x22c>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d199      	bne.n	8008946 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 f90a 	bl	8008c30 <SPI_EndRxTxTransaction>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d006      	beq.n	8008a30 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008a2e:	e01a      	b.n	8008a66 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10a      	bne.n	8008a4e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a38:	2300      	movs	r3, #0
 8008a3a:	617b      	str	r3, [r7, #20]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	617b      	str	r3, [r7, #20]
 8008a4c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a5c:	e003      	b.n	8008a66 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3730      	adds	r7, #48	@ 0x30
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b088      	sub	sp, #32
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a8c:	f7fe fad6 	bl	800703c <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a94:	1a9b      	subs	r3, r3, r2
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	4413      	add	r3, r2
 8008a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a9c:	f7fe face 	bl	800703c <HAL_GetTick>
 8008aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008aa2:	4b39      	ldr	r3, [pc, #228]	@ (8008b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	015b      	lsls	r3, r3, #5
 8008aa8:	0d1b      	lsrs	r3, r3, #20
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	fb02 f303 	mul.w	r3, r2, r3
 8008ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ab2:	e054      	b.n	8008b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008aba:	d050      	beq.n	8008b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008abc:	f7fe fabe 	bl	800703c <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d902      	bls.n	8008ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d13d      	bne.n	8008b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aea:	d111      	bne.n	8008b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008af4:	d004      	beq.n	8008b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008afe:	d107      	bne.n	8008b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b18:	d10f      	bne.n	8008b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e017      	b.n	8008b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b54:	2300      	movs	r3, #0
 8008b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4013      	ands	r3, r2
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	bf0c      	ite	eq
 8008b6e:	2301      	moveq	r3, #1
 8008b70:	2300      	movne	r3, #0
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	461a      	mov	r2, r3
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d19b      	bne.n	8008ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3720      	adds	r7, #32
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20000038 	.word	0x20000038

08008b8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af02      	add	r7, sp, #8
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ba0:	d111      	bne.n	8008bc6 <SPI_EndRxTransaction+0x3a>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008baa:	d004      	beq.n	8008bb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bb4:	d107      	bne.n	8008bc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bc4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008bce:	d117      	bne.n	8008c00 <SPI_EndRxTransaction+0x74>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bd8:	d112      	bne.n	8008c00 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2200      	movs	r2, #0
 8008be2:	2101      	movs	r1, #1
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff ff49 	bl	8008a7c <SPI_WaitFlagStateUntilTimeout>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01a      	beq.n	8008c26 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf4:	f043 0220 	orr.w	r2, r3, #32
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e013      	b.n	8008c28 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2200      	movs	r2, #0
 8008c08:	2180      	movs	r1, #128	@ 0x80
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f7ff ff36 	bl	8008a7c <SPI_WaitFlagStateUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d007      	beq.n	8008c26 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c1a:	f043 0220 	orr.w	r2, r3, #32
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e000      	b.n	8008c28 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2200      	movs	r2, #0
 8008c44:	2180      	movs	r1, #128	@ 0x80
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f7ff ff18 	bl	8008a7c <SPI_WaitFlagStateUntilTimeout>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d007      	beq.n	8008c62 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c56:	f043 0220 	orr.w	r2, r3, #32
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e000      	b.n	8008c64 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e041      	b.n	8008d02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d106      	bne.n	8008c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f839 	bl	8008d0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f000 f9c2 	bl	8009034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008d12:	bf00      	nop
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bc80      	pop	{r7}
 8008d1a:	4770      	bx	lr

08008d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d001      	beq.n	8008d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e044      	b.n	8008dbe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0201 	orr.w	r2, r2, #1
 8008d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc8 <HAL_TIM_Base_Start_IT+0xac>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d018      	beq.n	8008d88 <HAL_TIM_Base_Start_IT+0x6c>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8008dcc <HAL_TIM_Base_Start_IT+0xb0>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d013      	beq.n	8008d88 <HAL_TIM_Base_Start_IT+0x6c>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d68:	d00e      	beq.n	8008d88 <HAL_TIM_Base_Start_IT+0x6c>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a18      	ldr	r2, [pc, #96]	@ (8008dd0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d009      	beq.n	8008d88 <HAL_TIM_Base_Start_IT+0x6c>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a16      	ldr	r2, [pc, #88]	@ (8008dd4 <HAL_TIM_Base_Start_IT+0xb8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d004      	beq.n	8008d88 <HAL_TIM_Base_Start_IT+0x6c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a15      	ldr	r2, [pc, #84]	@ (8008dd8 <HAL_TIM_Base_Start_IT+0xbc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d111      	bne.n	8008dac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b06      	cmp	r3, #6
 8008d98:	d010      	beq.n	8008dbc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f042 0201 	orr.w	r2, r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008daa:	e007      	b.n	8008dbc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f042 0201 	orr.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bc80      	pop	{r7}
 8008dc6:	4770      	bx	lr
 8008dc8:	40012c00 	.word	0x40012c00
 8008dcc:	40013400 	.word	0x40013400
 8008dd0:	40000400 	.word	0x40000400
 8008dd4:	40000800 	.word	0x40000800
 8008dd8:	40000c00 	.word	0x40000c00

08008ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d122      	bne.n	8008e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f003 0302 	and.w	r3, r3, #2
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d11b      	bne.n	8008e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f06f 0202 	mvn.w	r2, #2
 8008e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f8ed 	bl	8008ffe <HAL_TIM_IC_CaptureCallback>
 8008e24:	e005      	b.n	8008e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f8e0 	bl	8008fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f8ef 	bl	8009010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b04      	cmp	r3, #4
 8008e44:	d122      	bne.n	8008e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	f003 0304 	and.w	r3, r3, #4
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	d11b      	bne.n	8008e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f06f 0204 	mvn.w	r2, #4
 8008e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2202      	movs	r2, #2
 8008e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f8c3 	bl	8008ffe <HAL_TIM_IC_CaptureCallback>
 8008e78:	e005      	b.n	8008e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f8b6 	bl	8008fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f8c5 	bl	8009010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b08      	cmp	r3, #8
 8008e98:	d122      	bne.n	8008ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f003 0308 	and.w	r3, r3, #8
 8008ea4:	2b08      	cmp	r3, #8
 8008ea6:	d11b      	bne.n	8008ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f06f 0208 	mvn.w	r2, #8
 8008eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2204      	movs	r2, #4
 8008eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f899 	bl	8008ffe <HAL_TIM_IC_CaptureCallback>
 8008ecc:	e005      	b.n	8008eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f88c 	bl	8008fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f89b 	bl	8009010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d122      	bne.n	8008f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f003 0310 	and.w	r3, r3, #16
 8008ef8:	2b10      	cmp	r3, #16
 8008efa:	d11b      	bne.n	8008f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f06f 0210 	mvn.w	r2, #16
 8008f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2208      	movs	r2, #8
 8008f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f86f 	bl	8008ffe <HAL_TIM_IC_CaptureCallback>
 8008f20:	e005      	b.n	8008f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f862 	bl	8008fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f871 	bl	8009010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d10e      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d107      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f06f 0201 	mvn.w	r2, #1
 8008f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7fc ff20 	bl	8005da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f6a:	2b80      	cmp	r3, #128	@ 0x80
 8008f6c:	d10e      	bne.n	8008f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f78:	2b80      	cmp	r3, #128	@ 0x80
 8008f7a:	d107      	bne.n	8008f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f8d7 	bl	800913a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f96:	2b40      	cmp	r3, #64	@ 0x40
 8008f98:	d10e      	bne.n	8008fb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa4:	2b40      	cmp	r3, #64	@ 0x40
 8008fa6:	d107      	bne.n	8008fb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f835 	bl	8009022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	d10e      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f003 0320 	and.w	r3, r3, #32
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	d107      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f06f 0220 	mvn.w	r2, #32
 8008fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f8a2 	bl	8009128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bc80      	pop	{r7}
 8008ffc:	4770      	bx	lr

08008ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr

08009010 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr

08009022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	bc80      	pop	{r7}
 8009032:	4770      	bx	lr

08009034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a33      	ldr	r2, [pc, #204]	@ (8009114 <TIM_Base_SetConfig+0xe0>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d013      	beq.n	8009074 <TIM_Base_SetConfig+0x40>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a32      	ldr	r2, [pc, #200]	@ (8009118 <TIM_Base_SetConfig+0xe4>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d00f      	beq.n	8009074 <TIM_Base_SetConfig+0x40>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800905a:	d00b      	beq.n	8009074 <TIM_Base_SetConfig+0x40>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a2f      	ldr	r2, [pc, #188]	@ (800911c <TIM_Base_SetConfig+0xe8>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d007      	beq.n	8009074 <TIM_Base_SetConfig+0x40>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a2e      	ldr	r2, [pc, #184]	@ (8009120 <TIM_Base_SetConfig+0xec>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d003      	beq.n	8009074 <TIM_Base_SetConfig+0x40>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a2d      	ldr	r2, [pc, #180]	@ (8009124 <TIM_Base_SetConfig+0xf0>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d108      	bne.n	8009086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4313      	orrs	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a22      	ldr	r2, [pc, #136]	@ (8009114 <TIM_Base_SetConfig+0xe0>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d013      	beq.n	80090b6 <TIM_Base_SetConfig+0x82>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a21      	ldr	r2, [pc, #132]	@ (8009118 <TIM_Base_SetConfig+0xe4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d00f      	beq.n	80090b6 <TIM_Base_SetConfig+0x82>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800909c:	d00b      	beq.n	80090b6 <TIM_Base_SetConfig+0x82>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a1e      	ldr	r2, [pc, #120]	@ (800911c <TIM_Base_SetConfig+0xe8>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d007      	beq.n	80090b6 <TIM_Base_SetConfig+0x82>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009120 <TIM_Base_SetConfig+0xec>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d003      	beq.n	80090b6 <TIM_Base_SetConfig+0x82>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a1c      	ldr	r2, [pc, #112]	@ (8009124 <TIM_Base_SetConfig+0xf0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d108      	bne.n	80090c8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a09      	ldr	r2, [pc, #36]	@ (8009114 <TIM_Base_SetConfig+0xe0>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d003      	beq.n	80090fc <TIM_Base_SetConfig+0xc8>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a08      	ldr	r2, [pc, #32]	@ (8009118 <TIM_Base_SetConfig+0xe4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d103      	bne.n	8009104 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	615a      	str	r2, [r3, #20]
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr
 8009114:	40012c00 	.word	0x40012c00
 8009118:	40013400 	.word	0x40013400
 800911c:	40000400 	.word	0x40000400
 8009120:	40000800 	.word	0x40000800
 8009124:	40000c00 	.word	0x40000c00

08009128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr

0800913a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009142:	bf00      	nop
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr

0800914c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e042      	b.n	80091e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d106      	bne.n	8009178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7fd fc02 	bl	800697c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2224      	movs	r2, #36	@ 0x24
 800917c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800918e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fe03 	bl	8009d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	691a      	ldr	r2, [r3, #16]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	695a      	ldr	r2, [r3, #20]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2220      	movs	r2, #32
 80091d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08a      	sub	sp, #40	@ 0x28
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b20      	cmp	r3, #32
 800920a:	d16d      	bne.n	80092e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <HAL_UART_Transmit+0x2c>
 8009212:	88fb      	ldrh	r3, [r7, #6]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e066      	b.n	80092ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2221      	movs	r2, #33	@ 0x21
 8009226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800922a:	f7fd ff07 	bl	800703c <HAL_GetTick>
 800922e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	88fa      	ldrh	r2, [r7, #6]
 8009234:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	88fa      	ldrh	r2, [r7, #6]
 800923a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009244:	d108      	bne.n	8009258 <HAL_UART_Transmit+0x6c>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	e003      	b.n	8009260 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800925c:	2300      	movs	r3, #0
 800925e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009260:	e02a      	b.n	80092b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2200      	movs	r2, #0
 800926a:	2180      	movs	r1, #128	@ 0x80
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fb8b 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e036      	b.n	80092ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10b      	bne.n	800929a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009290:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	3302      	adds	r3, #2
 8009296:	61bb      	str	r3, [r7, #24]
 8009298:	e007      	b.n	80092aa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	781a      	ldrb	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	3301      	adds	r3, #1
 80092a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	3b01      	subs	r3, #1
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092bc:	b29b      	uxth	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1cf      	bne.n	8009262 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2200      	movs	r2, #0
 80092ca:	2140      	movs	r1, #64	@ 0x40
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 fb5b 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e006      	b.n	80092ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2220      	movs	r2, #32
 80092e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e000      	b.n	80092ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80092e8:	2302      	movs	r3, #2
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3720      	adds	r7, #32
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b08a      	sub	sp, #40	@ 0x28
 80092f6:	af02      	add	r7, sp, #8
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	60b9      	str	r1, [r7, #8]
 80092fc:	603b      	str	r3, [r7, #0]
 80092fe:	4613      	mov	r3, r2
 8009300:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b20      	cmp	r3, #32
 8009310:	d17c      	bne.n	800940c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <HAL_UART_Receive+0x2c>
 8009318:	88fb      	ldrh	r3, [r7, #6]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e075      	b.n	800940e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2222      	movs	r2, #34	@ 0x22
 800932c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009336:	f7fd fe81 	bl	800703c <HAL_GetTick>
 800933a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	88fa      	ldrh	r2, [r7, #6]
 8009340:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	88fa      	ldrh	r2, [r7, #6]
 8009346:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009350:	d108      	bne.n	8009364 <HAL_UART_Receive+0x72>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d104      	bne.n	8009364 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800935a:	2300      	movs	r3, #0
 800935c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	61bb      	str	r3, [r7, #24]
 8009362:	e003      	b.n	800936c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009368:	2300      	movs	r3, #0
 800936a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800936c:	e043      	b.n	80093f6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2200      	movs	r2, #0
 8009376:	2120      	movs	r1, #32
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 fb05 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e042      	b.n	800940e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10c      	bne.n	80093a8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	b29b      	uxth	r3, r3
 8009396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939a:	b29a      	uxth	r2, r3
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	3302      	adds	r3, #2
 80093a4:	61bb      	str	r3, [r7, #24]
 80093a6:	e01f      	b.n	80093e8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093b0:	d007      	beq.n	80093c2 <HAL_UART_Receive+0xd0>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <HAL_UART_Receive+0xde>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	e008      	b.n	80093e2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	3301      	adds	r3, #1
 80093e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1b6      	bne.n	800936e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2220      	movs	r2, #32
 8009404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	e000      	b.n	800940e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800940c:	2302      	movs	r3, #2
  }
}
 800940e:	4618      	mov	r0, r3
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b0ba      	sub	sp, #232	@ 0xe8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800943e:	2300      	movs	r3, #0
 8009440:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009444:	2300      	movs	r3, #0
 8009446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800944a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10f      	bne.n	800947e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800945e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009462:	f003 0320 	and.w	r3, r3, #32
 8009466:	2b00      	cmp	r3, #0
 8009468:	d009      	beq.n	800947e <HAL_UART_IRQHandler+0x66>
 800946a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fbd1 	bl	8009c1e <UART_Receive_IT>
      return;
 800947c:	e25b      	b.n	8009936 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800947e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 80de 	beq.w	8009644 <HAL_UART_IRQHandler+0x22c>
 8009488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009498:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 80d1 	beq.w	8009644 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80094a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00b      	beq.n	80094c6 <HAL_UART_IRQHandler+0xae>
 80094ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d005      	beq.n	80094c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094be:	f043 0201 	orr.w	r2, r3, #1
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00b      	beq.n	80094ea <HAL_UART_IRQHandler+0xd2>
 80094d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d005      	beq.n	80094ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094e2:	f043 0202 	orr.w	r2, r3, #2
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00b      	beq.n	800950e <HAL_UART_IRQHandler+0xf6>
 80094f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009506:	f043 0204 	orr.w	r2, r3, #4
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800950e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009512:	f003 0308 	and.w	r3, r3, #8
 8009516:	2b00      	cmp	r3, #0
 8009518:	d011      	beq.n	800953e <HAL_UART_IRQHandler+0x126>
 800951a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d105      	bne.n	8009532 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009536:	f043 0208 	orr.w	r2, r3, #8
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 81f2 	beq.w	800992c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800954c:	f003 0320 	and.w	r3, r3, #32
 8009550:	2b00      	cmp	r3, #0
 8009552:	d008      	beq.n	8009566 <HAL_UART_IRQHandler+0x14e>
 8009554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009558:	f003 0320 	and.w	r3, r3, #32
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fb5c 	bl	8009c1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009570:	2b00      	cmp	r3, #0
 8009572:	bf14      	ite	ne
 8009574:	2301      	movne	r3, #1
 8009576:	2300      	moveq	r3, #0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009582:	f003 0308 	and.w	r3, r3, #8
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <HAL_UART_IRQHandler+0x17a>
 800958a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800958e:	2b00      	cmp	r3, #0
 8009590:	d04f      	beq.n	8009632 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fa66 	bl	8009a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d041      	beq.n	800962a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3314      	adds	r3, #20
 80095ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095b4:	e853 3f00 	ldrex	r3, [r3]
 80095b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80095bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3314      	adds	r3, #20
 80095ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80095d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80095d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80095de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80095ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1d9      	bne.n	80095a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d013      	beq.n	8009622 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095fe:	4a7e      	ldr	r2, [pc, #504]	@ (80097f8 <HAL_UART_IRQHandler+0x3e0>)
 8009600:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009606:	4618      	mov	r0, r3
 8009608:	f7fd fe60 	bl	80072cc <HAL_DMA_Abort_IT>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d016      	beq.n	8009640 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800961c:	4610      	mov	r0, r2
 800961e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009620:	e00e      	b.n	8009640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f99c 	bl	8009960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009628:	e00a      	b.n	8009640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f998 	bl	8009960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009630:	e006      	b.n	8009640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f994 	bl	8009960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800963e:	e175      	b.n	800992c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009640:	bf00      	nop
    return;
 8009642:	e173      	b.n	800992c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009648:	2b01      	cmp	r3, #1
 800964a:	f040 814f 	bne.w	80098ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800964e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009652:	f003 0310 	and.w	r3, r3, #16
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 8148 	beq.w	80098ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800965c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009660:	f003 0310 	and.w	r3, r3, #16
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 8141 	beq.w	80098ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800966a:	2300      	movs	r3, #0
 800966c:	60bb      	str	r3, [r7, #8]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60bb      	str	r3, [r7, #8]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	60bb      	str	r3, [r7, #8]
 800967e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 80b6 	beq.w	80097fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800969c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 8145 	beq.w	8009930 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80096aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096ae:	429a      	cmp	r2, r3
 80096b0:	f080 813e 	bcs.w	8009930 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	2b20      	cmp	r3, #32
 80096c4:	f000 8088 	beq.w	80097d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	330c      	adds	r3, #12
 80096ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80096de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	330c      	adds	r3, #12
 80096f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80096f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80096f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009700:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800970c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1d9      	bne.n	80096c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3314      	adds	r3, #20
 800971a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800971e:	e853 3f00 	ldrex	r3, [r3]
 8009722:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009724:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009726:	f023 0301 	bic.w	r3, r3, #1
 800972a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3314      	adds	r3, #20
 8009734:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009738:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800973c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009740:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800974a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e1      	bne.n	8009714 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3314      	adds	r3, #20
 8009756:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3314      	adds	r3, #20
 8009770:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009774:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009776:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009778:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800977a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800977c:	e841 2300 	strex	r3, r2, [r1]
 8009780:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009782:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e3      	bne.n	8009750 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	330c      	adds	r3, #12
 800979c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097a8:	f023 0310 	bic.w	r3, r3, #16
 80097ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	330c      	adds	r3, #12
 80097b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80097ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80097bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097c2:	e841 2300 	strex	r3, r2, [r1]
 80097c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1e3      	bne.n	8009796 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fd fd3f 	bl	8007256 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8bf 	bl	8009972 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097f4:	e09c      	b.n	8009930 <HAL_UART_IRQHandler+0x518>
 80097f6:	bf00      	nop
 80097f8:	08009b29 	.word	0x08009b29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009804:	b29b      	uxth	r3, r3
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009810:	b29b      	uxth	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 808e 	beq.w	8009934 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8089 	beq.w	8009934 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	330c      	adds	r3, #12
 8009828:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	e853 3f00 	ldrex	r3, [r3]
 8009830:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009838:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	330c      	adds	r3, #12
 8009842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009846:	647a      	str	r2, [r7, #68]	@ 0x44
 8009848:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800984c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e3      	bne.n	8009822 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3314      	adds	r3, #20
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	623b      	str	r3, [r7, #32]
   return(result);
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f023 0301 	bic.w	r3, r3, #1
 8009870:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3314      	adds	r3, #20
 800987a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800987e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800988c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e3      	bne.n	800985a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	330c      	adds	r3, #12
 80098a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0310 	bic.w	r3, r3, #16
 80098b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	330c      	adds	r3, #12
 80098c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80098c4:	61fa      	str	r2, [r7, #28]
 80098c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	69b9      	ldr	r1, [r7, #24]
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	617b      	str	r3, [r7, #20]
   return(result);
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e3      	bne.n	80098a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2202      	movs	r2, #2
 80098dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f844 	bl	8009972 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098ea:	e023      	b.n	8009934 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80098ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d009      	beq.n	800990c <HAL_UART_IRQHandler+0x4f4>
 80098f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f923 	bl	8009b50 <UART_Transmit_IT>
    return;
 800990a:	e014      	b.n	8009936 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00e      	beq.n	8009936 <HAL_UART_IRQHandler+0x51e>
 8009918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800991c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	d008      	beq.n	8009936 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f962 	bl	8009bee <UART_EndTransmit_IT>
    return;
 800992a:	e004      	b.n	8009936 <HAL_UART_IRQHandler+0x51e>
    return;
 800992c:	bf00      	nop
 800992e:	e002      	b.n	8009936 <HAL_UART_IRQHandler+0x51e>
      return;
 8009930:	bf00      	nop
 8009932:	e000      	b.n	8009936 <HAL_UART_IRQHandler+0x51e>
      return;
 8009934:	bf00      	nop
  }
}
 8009936:	37e8      	adds	r7, #232	@ 0xe8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	bc80      	pop	{r7}
 800994c:	4770      	bx	lr

0800994e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800994e:	b480      	push	{r7}
 8009950:	b083      	sub	sp, #12
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009956:	bf00      	nop
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	bc80      	pop	{r7}
 800995e:	4770      	bx	lr

08009960 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	bc80      	pop	{r7}
 8009970:	4770      	bx	lr

08009972 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009972:	b480      	push	{r7}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	460b      	mov	r3, r1
 800997c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800997e:	bf00      	nop
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	bc80      	pop	{r7}
 8009986:	4770      	bx	lr

08009988 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b090      	sub	sp, #64	@ 0x40
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	4613      	mov	r3, r2
 8009996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009998:	e050      	b.n	8009a3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800999a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800999c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099a0:	d04c      	beq.n	8009a3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80099a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d007      	beq.n	80099b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80099a8:	f7fd fb48 	bl	800703c <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d241      	bcs.n	8009a3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	330c      	adds	r3, #12
 80099be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80099ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	330c      	adds	r3, #12
 80099d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80099d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80099da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80099e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e5      	bne.n	80099b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3314      	adds	r3, #20
 80099f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	613b      	str	r3, [r7, #16]
   return(result);
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f023 0301 	bic.w	r3, r3, #1
 8009a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3314      	adds	r3, #20
 8009a0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a0c:	623a      	str	r2, [r7, #32]
 8009a0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	69f9      	ldr	r1, [r7, #28]
 8009a12:	6a3a      	ldr	r2, [r7, #32]
 8009a14:	e841 2300 	strex	r3, r2, [r1]
 8009a18:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e5      	bne.n	80099ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e00f      	b.n	8009a5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	4013      	ands	r3, r2
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	bf0c      	ite	eq
 8009a4c:	2301      	moveq	r3, #1
 8009a4e:	2300      	movne	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d09f      	beq.n	800999a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3740      	adds	r7, #64	@ 0x40
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b095      	sub	sp, #84	@ 0x54
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	330c      	adds	r3, #12
 8009a72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	330c      	adds	r3, #12
 8009a8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e5      	bne.n	8009a6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3314      	adds	r3, #20
 8009aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	f023 0301 	bic.w	r3, r3, #1
 8009ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3314      	adds	r3, #20
 8009abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ac0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ac8:	e841 2300 	strex	r3, r2, [r1]
 8009acc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1e5      	bne.n	8009aa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d119      	bne.n	8009b10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	330c      	adds	r3, #12
 8009ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	e853 3f00 	ldrex	r3, [r3]
 8009aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f023 0310 	bic.w	r3, r3, #16
 8009af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	330c      	adds	r3, #12
 8009afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009afc:	61ba      	str	r2, [r7, #24]
 8009afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	6979      	ldr	r1, [r7, #20]
 8009b02:	69ba      	ldr	r2, [r7, #24]
 8009b04:	e841 2300 	strex	r3, r2, [r1]
 8009b08:	613b      	str	r3, [r7, #16]
   return(result);
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e5      	bne.n	8009adc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009b1e:	bf00      	nop
 8009b20:	3754      	adds	r7, #84	@ 0x54
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bc80      	pop	{r7}
 8009b26:	4770      	bx	lr

08009b28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff ff0c 	bl	8009960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b48:	bf00      	nop
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b21      	cmp	r3, #33	@ 0x21
 8009b62:	d13e      	bne.n	8009be2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b6c:	d114      	bne.n	8009b98 <UART_Transmit_IT+0x48>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d110      	bne.n	8009b98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	461a      	mov	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	1c9a      	adds	r2, r3, #2
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	621a      	str	r2, [r3, #32]
 8009b96:	e008      	b.n	8009baa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	1c59      	adds	r1, r3, #1
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6211      	str	r1, [r2, #32]
 8009ba2:	781a      	ldrb	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10f      	bne.n	8009bde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68da      	ldr	r2, [r3, #12]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009bcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68da      	ldr	r2, [r3, #12]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	e000      	b.n	8009be4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009be2:	2302      	movs	r3, #2
  }
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bc80      	pop	{r7}
 8009bec:	4770      	bx	lr

08009bee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68da      	ldr	r2, [r3, #12]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7ff fe94 	bl	800993c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b08c      	sub	sp, #48	@ 0x30
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b22      	cmp	r3, #34	@ 0x22
 8009c30:	f040 80ae 	bne.w	8009d90 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c3c:	d117      	bne.n	8009c6e <UART_Receive_IT+0x50>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d113      	bne.n	8009c6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c66:	1c9a      	adds	r2, r3, #2
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c6c:	e026      	b.n	8009cbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009c74:	2300      	movs	r3, #0
 8009c76:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c80:	d007      	beq.n	8009c92 <UART_Receive_IT+0x74>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10a      	bne.n	8009ca0 <UART_Receive_IT+0x82>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d106      	bne.n	8009ca0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9c:	701a      	strb	r2, [r3, #0]
 8009c9e:	e008      	b.n	8009cb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d15d      	bne.n	8009d8c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f022 0220 	bic.w	r2, r2, #32
 8009cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	695a      	ldr	r2, [r3, #20]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f022 0201 	bic.w	r2, r2, #1
 8009cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2220      	movs	r2, #32
 8009d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d135      	bne.n	8009d82 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	330c      	adds	r3, #12
 8009d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	e853 3f00 	ldrex	r3, [r3]
 8009d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f023 0310 	bic.w	r3, r3, #16
 8009d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	330c      	adds	r3, #12
 8009d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d3c:	623a      	str	r2, [r7, #32]
 8009d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	69f9      	ldr	r1, [r7, #28]
 8009d42:	6a3a      	ldr	r2, [r7, #32]
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e5      	bne.n	8009d1c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0310 	and.w	r3, r3, #16
 8009d5a:	2b10      	cmp	r3, #16
 8009d5c:	d10a      	bne.n	8009d74 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60fb      	str	r3, [r7, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	60fb      	str	r3, [r7, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff fdf9 	bl	8009972 <HAL_UARTEx_RxEventCallback>
 8009d80:	e002      	b.n	8009d88 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff fde3 	bl	800994e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	e002      	b.n	8009d92 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	e000      	b.n	8009d92 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009d90:	2302      	movs	r3, #2
  }
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3730      	adds	r7, #48	@ 0x30
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
	...

08009d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68da      	ldr	r2, [r3, #12]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009dd6:	f023 030c 	bic.w	r3, r3, #12
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	68b9      	ldr	r1, [r7, #8]
 8009de0:	430b      	orrs	r3, r1
 8009de2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	699a      	ldr	r2, [r3, #24]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8009eb0 <UART_SetConfig+0x114>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d103      	bne.n	8009e0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009e04:	f7fe f948 	bl	8008098 <HAL_RCC_GetPCLK2Freq>
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	e002      	b.n	8009e12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009e0c:	f7fe f930 	bl	8008070 <HAL_RCC_GetPCLK1Freq>
 8009e10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	009a      	lsls	r2, r3, #2
 8009e1c:	441a      	add	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e28:	4a22      	ldr	r2, [pc, #136]	@ (8009eb4 <UART_SetConfig+0x118>)
 8009e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2e:	095b      	lsrs	r3, r3, #5
 8009e30:	0119      	lsls	r1, r3, #4
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	009a      	lsls	r2, r3, #2
 8009e3c:	441a      	add	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e48:	4b1a      	ldr	r3, [pc, #104]	@ (8009eb4 <UART_SetConfig+0x118>)
 8009e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8009e4e:	095b      	lsrs	r3, r3, #5
 8009e50:	2064      	movs	r0, #100	@ 0x64
 8009e52:	fb00 f303 	mul.w	r3, r0, r3
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	3332      	adds	r3, #50	@ 0x32
 8009e5c:	4a15      	ldr	r2, [pc, #84]	@ (8009eb4 <UART_SetConfig+0x118>)
 8009e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e62:	095b      	lsrs	r3, r3, #5
 8009e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e68:	4419      	add	r1, r3
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009a      	lsls	r2, r3, #2
 8009e74:	441a      	add	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e80:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb4 <UART_SetConfig+0x118>)
 8009e82:	fba3 0302 	umull	r0, r3, r3, r2
 8009e86:	095b      	lsrs	r3, r3, #5
 8009e88:	2064      	movs	r0, #100	@ 0x64
 8009e8a:	fb00 f303 	mul.w	r3, r0, r3
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	011b      	lsls	r3, r3, #4
 8009e92:	3332      	adds	r3, #50	@ 0x32
 8009e94:	4a07      	ldr	r2, [pc, #28]	@ (8009eb4 <UART_SetConfig+0x118>)
 8009e96:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9a:	095b      	lsrs	r3, r3, #5
 8009e9c:	f003 020f 	and.w	r2, r3, #15
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	440a      	add	r2, r1
 8009ea6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009ea8:	bf00      	nop
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	40013800 	.word	0x40013800
 8009eb4:	51eb851f 	.word	0x51eb851f

08009eb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009eca:	2b84      	cmp	r3, #132	@ 0x84
 8009ecc:	d005      	beq.n	8009eda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009ece:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3303      	adds	r3, #3
 8009ed8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009eda:	68fb      	ldr	r3, [r7, #12]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bc80      	pop	{r7}
 8009ee4:	4770      	bx	lr

08009ee6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009eea:	f000 fa79 	bl	800a3e0 <vTaskStartScheduler>
  
  return osOK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef6:	b089      	sub	sp, #36	@ 0x24
 8009ef8:	af04      	add	r7, sp, #16
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	695b      	ldr	r3, [r3, #20]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d020      	beq.n	8009f48 <osThreadCreate+0x54>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d01c      	beq.n	8009f48 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685c      	ldr	r4, [r3, #4]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	691e      	ldr	r6, [r3, #16]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff ffc9 	bl	8009eb8 <makeFreeRtosPriority>
 8009f26:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f30:	9202      	str	r2, [sp, #8]
 8009f32:	9301      	str	r3, [sp, #4]
 8009f34:	9100      	str	r1, [sp, #0]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	4632      	mov	r2, r6
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 f89c 	bl	800a07a <xTaskCreateStatic>
 8009f42:	4603      	mov	r3, r0
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	e01c      	b.n	8009f82 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685c      	ldr	r4, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f54:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff ffab 	bl	8009eb8 <makeFreeRtosPriority>
 8009f62:	4602      	mov	r2, r0
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	9301      	str	r3, [sp, #4]
 8009f6a:	9200      	str	r2, [sp, #0]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	4632      	mov	r2, r6
 8009f70:	4629      	mov	r1, r5
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 f8e0 	bl	800a138 <xTaskCreate>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d001      	beq.n	8009f82 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e000      	b.n	8009f84 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009f82:	68fb      	ldr	r3, [r7, #12]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f103 0208 	add.w	r2, r3, #8
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f103 0208 	add.w	r2, r3, #8
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f103 0208 	add.w	r2, r3, #8
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bc80      	pop	{r7}
 8009fc8:	4770      	bx	lr

08009fca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bc80      	pop	{r7}
 8009fe0:	4770      	bx	lr

08009fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b085      	sub	sp, #20
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	601a      	str	r2, [r3, #0]
}
 800a01e:	bf00      	nop
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	bc80      	pop	{r7}
 800a026:	4770      	bx	lr

0800a028 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	6892      	ldr	r2, [r2, #8]
 800a03e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	6852      	ldr	r2, [r2, #4]
 800a048:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	429a      	cmp	r2, r3
 800a052:	d103      	bne.n	800a05c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689a      	ldr	r2, [r3, #8]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	1e5a      	subs	r2, r3, #1
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	bc80      	pop	{r7}
 800a078:	4770      	bx	lr

0800a07a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b08e      	sub	sp, #56	@ 0x38
 800a07e:	af04      	add	r7, sp, #16
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
 800a086:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10b      	bne.n	800a0a6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0a0:	bf00      	nop
 800a0a2:	bf00      	nop
 800a0a4:	e7fd      	b.n	800a0a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10b      	bne.n	800a0c4 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	61fb      	str	r3, [r7, #28]
}
 800a0be:	bf00      	nop
 800a0c0:	bf00      	nop
 800a0c2:	e7fd      	b.n	800a0c0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a0c4:	23a8      	movs	r3, #168	@ 0xa8
 800a0c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2ba8      	cmp	r3, #168	@ 0xa8
 800a0cc:	d00b      	beq.n	800a0e6 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	61bb      	str	r3, [r7, #24]
}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	e7fd      	b.n	800a0e2 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d01e      	beq.n	800a12a <xTaskCreateStatic+0xb0>
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d01b      	beq.n	800a12a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a104:	2300      	movs	r3, #0
 800a106:	9303      	str	r3, [sp, #12]
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	9302      	str	r3, [sp, #8]
 800a10c:	f107 0314 	add.w	r3, r7, #20
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	68b9      	ldr	r1, [r7, #8]
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 f851 	bl	800a1c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a122:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a124:	f000 f8ee 	bl	800a304 <prvAddNewTaskToReadyList>
 800a128:	e001      	b.n	800a12e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a12e:	697b      	ldr	r3, [r7, #20]
	}
 800a130:	4618      	mov	r0, r3
 800a132:	3728      	adds	r7, #40	@ 0x28
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b08c      	sub	sp, #48	@ 0x30
 800a13c:	af04      	add	r7, sp, #16
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	4613      	mov	r3, r2
 800a146:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a148:	88fb      	ldrh	r3, [r7, #6]
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 fe1f 	bl	800ad90 <pvPortMalloc>
 800a152:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00e      	beq.n	800a178 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a15a:	20a8      	movs	r0, #168	@ 0xa8
 800a15c:	f000 fe18 	bl	800ad90 <pvPortMalloc>
 800a160:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d003      	beq.n	800a170 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a16e:	e005      	b.n	800a17c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a170:	6978      	ldr	r0, [r7, #20]
 800a172:	f000 fed5 	bl	800af20 <vPortFree>
 800a176:	e001      	b.n	800a17c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a178:	2300      	movs	r3, #0
 800a17a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d017      	beq.n	800a1b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a18a:	88fa      	ldrh	r2, [r7, #6]
 800a18c:	2300      	movs	r3, #0
 800a18e:	9303      	str	r3, [sp, #12]
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	9302      	str	r3, [sp, #8]
 800a194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f80f 	bl	800a1c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1a6:	69f8      	ldr	r0, [r7, #28]
 800a1a8:	f000 f8ac 	bl	800a304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	61bb      	str	r3, [r7, #24]
 800a1b0:	e002      	b.n	800a1b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a1b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a1b8:	69bb      	ldr	r3, [r7, #24]
	}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3720      	adds	r7, #32
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	461a      	mov	r2, r3
 800a1dc:	21a5      	movs	r1, #165	@ 0xa5
 800a1de:	f001 fd27 	bl	800bc30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	f023 0307 	bic.w	r3, r3, #7
 800a1fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	f003 0307 	and.w	r3, r3, #7
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00b      	beq.n	800a21e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	617b      	str	r3, [r7, #20]
}
 800a218:	bf00      	nop
 800a21a:	bf00      	nop
 800a21c:	e7fd      	b.n	800a21a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a21e:	2300      	movs	r3, #0
 800a220:	61fb      	str	r3, [r7, #28]
 800a222:	e012      	b.n	800a24a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	4413      	add	r3, r2
 800a22a:	7819      	ldrb	r1, [r3, #0]
 800a22c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	4413      	add	r3, r2
 800a232:	3334      	adds	r3, #52	@ 0x34
 800a234:	460a      	mov	r2, r1
 800a236:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	4413      	add	r3, r2
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d006      	beq.n	800a252 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	3301      	adds	r3, #1
 800a248:	61fb      	str	r3, [r7, #28]
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	2b0f      	cmp	r3, #15
 800a24e:	d9e9      	bls.n	800a224 <prvInitialiseNewTask+0x60>
 800a250:	e000      	b.n	800a254 <prvInitialiseNewTask+0x90>
		{
			break;
 800a252:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a256:	2200      	movs	r2, #0
 800a258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25e:	2b06      	cmp	r3, #6
 800a260:	d901      	bls.n	800a266 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a262:	2306      	movs	r3, #6
 800a264:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a26a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a270:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a274:	2200      	movs	r2, #0
 800a276:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	3304      	adds	r3, #4
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff fea4 	bl	8009fca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	3318      	adds	r3, #24
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff fe9f 	bl	8009fca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a290:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a294:	f1c3 0207 	rsb	r2, r3, #7
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	3354      	adds	r3, #84	@ 0x54
 800a2b6:	224c      	movs	r2, #76	@ 0x4c
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f001 fcb8 	bl	800bc30 <memset>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	4a0d      	ldr	r2, [pc, #52]	@ (800a2f8 <prvInitialiseNewTask+0x134>)
 800a2c4:	659a      	str	r2, [r3, #88]	@ 0x58
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	4a0c      	ldr	r2, [pc, #48]	@ (800a2fc <prvInitialiseNewTask+0x138>)
 800a2ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ce:	4a0c      	ldr	r2, [pc, #48]	@ (800a300 <prvInitialiseNewTask+0x13c>)
 800a2d0:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	68f9      	ldr	r1, [r7, #12]
 800a2d6:	69b8      	ldr	r0, [r7, #24]
 800a2d8:	f000 fba6 	bl	800aa28 <pxPortInitialiseStack>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2ee:	bf00      	nop
 800a2f0:	3720      	adds	r7, #32
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20001534 	.word	0x20001534
 800a2fc:	2000159c 	.word	0x2000159c
 800a300:	20001604 	.word	0x20001604

0800a304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a30c:	f000 fc7e 	bl	800ac0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a310:	4b2c      	ldr	r3, [pc, #176]	@ (800a3c4 <prvAddNewTaskToReadyList+0xc0>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3301      	adds	r3, #1
 800a316:	4a2b      	ldr	r2, [pc, #172]	@ (800a3c4 <prvAddNewTaskToReadyList+0xc0>)
 800a318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a31a:	4b2b      	ldr	r3, [pc, #172]	@ (800a3c8 <prvAddNewTaskToReadyList+0xc4>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d109      	bne.n	800a336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a322:	4a29      	ldr	r2, [pc, #164]	@ (800a3c8 <prvAddNewTaskToReadyList+0xc4>)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a328:	4b26      	ldr	r3, [pc, #152]	@ (800a3c4 <prvAddNewTaskToReadyList+0xc0>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d110      	bne.n	800a352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a330:	f000 fab2 	bl	800a898 <prvInitialiseTaskLists>
 800a334:	e00d      	b.n	800a352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a336:	4b25      	ldr	r3, [pc, #148]	@ (800a3cc <prvAddNewTaskToReadyList+0xc8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d109      	bne.n	800a352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a33e:	4b22      	ldr	r3, [pc, #136]	@ (800a3c8 <prvAddNewTaskToReadyList+0xc4>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a348:	429a      	cmp	r2, r3
 800a34a:	d802      	bhi.n	800a352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a34c:	4a1e      	ldr	r2, [pc, #120]	@ (800a3c8 <prvAddNewTaskToReadyList+0xc4>)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a352:	4b1f      	ldr	r3, [pc, #124]	@ (800a3d0 <prvAddNewTaskToReadyList+0xcc>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3301      	adds	r3, #1
 800a358:	4a1d      	ldr	r2, [pc, #116]	@ (800a3d0 <prvAddNewTaskToReadyList+0xcc>)
 800a35a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a35c:	4b1c      	ldr	r3, [pc, #112]	@ (800a3d0 <prvAddNewTaskToReadyList+0xcc>)
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a368:	2201      	movs	r2, #1
 800a36a:	409a      	lsls	r2, r3
 800a36c:	4b19      	ldr	r3, [pc, #100]	@ (800a3d4 <prvAddNewTaskToReadyList+0xd0>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4313      	orrs	r3, r2
 800a372:	4a18      	ldr	r2, [pc, #96]	@ (800a3d4 <prvAddNewTaskToReadyList+0xd0>)
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a37a:	4613      	mov	r3, r2
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4413      	add	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4a15      	ldr	r2, [pc, #84]	@ (800a3d8 <prvAddNewTaskToReadyList+0xd4>)
 800a384:	441a      	add	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	3304      	adds	r3, #4
 800a38a:	4619      	mov	r1, r3
 800a38c:	4610      	mov	r0, r2
 800a38e:	f7ff fe28 	bl	8009fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a392:	f000 fc6b 	bl	800ac6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a396:	4b0d      	ldr	r3, [pc, #52]	@ (800a3cc <prvAddNewTaskToReadyList+0xc8>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00e      	beq.n	800a3bc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a39e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c8 <prvAddNewTaskToReadyList+0xc4>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d207      	bcs.n	800a3bc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a3dc <prvAddNewTaskToReadyList+0xd8>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3bc:	bf00      	nop
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	200008e8 	.word	0x200008e8
 800a3c8:	200007e8 	.word	0x200007e8
 800a3cc:	200008f4 	.word	0x200008f4
 800a3d0:	20000904 	.word	0x20000904
 800a3d4:	200008f0 	.word	0x200008f0
 800a3d8:	200007ec 	.word	0x200007ec
 800a3dc:	e000ed04 	.word	0xe000ed04

0800a3e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08a      	sub	sp, #40	@ 0x28
 800a3e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a3ee:	463a      	mov	r2, r7
 800a3f0:	1d39      	adds	r1, r7, #4
 800a3f2:	f107 0308 	add.w	r3, r7, #8
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f6 fc7c 	bl	8000cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	9202      	str	r2, [sp, #8]
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	2300      	movs	r3, #0
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	2300      	movs	r3, #0
 800a40c:	460a      	mov	r2, r1
 800a40e:	4921      	ldr	r1, [pc, #132]	@ (800a494 <vTaskStartScheduler+0xb4>)
 800a410:	4821      	ldr	r0, [pc, #132]	@ (800a498 <vTaskStartScheduler+0xb8>)
 800a412:	f7ff fe32 	bl	800a07a <xTaskCreateStatic>
 800a416:	4603      	mov	r3, r0
 800a418:	4a20      	ldr	r2, [pc, #128]	@ (800a49c <vTaskStartScheduler+0xbc>)
 800a41a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a41c:	4b1f      	ldr	r3, [pc, #124]	@ (800a49c <vTaskStartScheduler+0xbc>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a424:	2301      	movs	r3, #1
 800a426:	617b      	str	r3, [r7, #20]
 800a428:	e001      	b.n	800a42e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a42a:	2300      	movs	r3, #0
 800a42c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d11b      	bne.n	800a46c <vTaskStartScheduler+0x8c>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	613b      	str	r3, [r7, #16]
}
 800a446:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a448:	4b15      	ldr	r3, [pc, #84]	@ (800a4a0 <vTaskStartScheduler+0xc0>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3354      	adds	r3, #84	@ 0x54
 800a44e:	4a15      	ldr	r2, [pc, #84]	@ (800a4a4 <vTaskStartScheduler+0xc4>)
 800a450:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a452:	4b15      	ldr	r3, [pc, #84]	@ (800a4a8 <vTaskStartScheduler+0xc8>)
 800a454:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a458:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a45a:	4b14      	ldr	r3, [pc, #80]	@ (800a4ac <vTaskStartScheduler+0xcc>)
 800a45c:	2201      	movs	r2, #1
 800a45e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a460:	4b13      	ldr	r3, [pc, #76]	@ (800a4b0 <vTaskStartScheduler+0xd0>)
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a466:	f000 fb5f 	bl	800ab28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a46a:	e00f      	b.n	800a48c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a472:	d10b      	bne.n	800a48c <vTaskStartScheduler+0xac>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	60fb      	str	r3, [r7, #12]
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	e7fd      	b.n	800a488 <vTaskStartScheduler+0xa8>
}
 800a48c:	bf00      	nop
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	0800e084 	.word	0x0800e084
 800a498:	0800a869 	.word	0x0800a869
 800a49c:	2000090c 	.word	0x2000090c
 800a4a0:	200007e8 	.word	0x200007e8
 800a4a4:	20000054 	.word	0x20000054
 800a4a8:	20000908 	.word	0x20000908
 800a4ac:	200008f4 	.word	0x200008f4
 800a4b0:	200008ec 	.word	0x200008ec

0800a4b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a4b8:	4b04      	ldr	r3, [pc, #16]	@ (800a4cc <vTaskSuspendAll+0x18>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	4a03      	ldr	r2, [pc, #12]	@ (800a4cc <vTaskSuspendAll+0x18>)
 800a4c0:	6013      	str	r3, [r2, #0]
}
 800a4c2:	bf00      	nop
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bc80      	pop	{r7}
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	20000910 	.word	0x20000910

0800a4d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a4de:	4b42      	ldr	r3, [pc, #264]	@ (800a5e8 <xTaskResumeAll+0x118>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10b      	bne.n	800a4fe <xTaskResumeAll+0x2e>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	603b      	str	r3, [r7, #0]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4fe:	f000 fb85 	bl	800ac0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a502:	4b39      	ldr	r3, [pc, #228]	@ (800a5e8 <xTaskResumeAll+0x118>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3b01      	subs	r3, #1
 800a508:	4a37      	ldr	r2, [pc, #220]	@ (800a5e8 <xTaskResumeAll+0x118>)
 800a50a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a50c:	4b36      	ldr	r3, [pc, #216]	@ (800a5e8 <xTaskResumeAll+0x118>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d161      	bne.n	800a5d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a514:	4b35      	ldr	r3, [pc, #212]	@ (800a5ec <xTaskResumeAll+0x11c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d05d      	beq.n	800a5d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a51c:	e02e      	b.n	800a57c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a51e:	4b34      	ldr	r3, [pc, #208]	@ (800a5f0 <xTaskResumeAll+0x120>)
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3318      	adds	r3, #24
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff fd7c 	bl	800a028 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3304      	adds	r3, #4
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff fd77 	bl	800a028 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53e:	2201      	movs	r2, #1
 800a540:	409a      	lsls	r2, r3
 800a542:	4b2c      	ldr	r3, [pc, #176]	@ (800a5f4 <xTaskResumeAll+0x124>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4313      	orrs	r3, r2
 800a548:	4a2a      	ldr	r2, [pc, #168]	@ (800a5f4 <xTaskResumeAll+0x124>)
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a550:	4613      	mov	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4a27      	ldr	r2, [pc, #156]	@ (800a5f8 <xTaskResumeAll+0x128>)
 800a55a:	441a      	add	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	3304      	adds	r3, #4
 800a560:	4619      	mov	r1, r3
 800a562:	4610      	mov	r0, r2
 800a564:	f7ff fd3d 	bl	8009fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a56c:	4b23      	ldr	r3, [pc, #140]	@ (800a5fc <xTaskResumeAll+0x12c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a572:	429a      	cmp	r2, r3
 800a574:	d302      	bcc.n	800a57c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a576:	4b22      	ldr	r3, [pc, #136]	@ (800a600 <xTaskResumeAll+0x130>)
 800a578:	2201      	movs	r2, #1
 800a57a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a57c:	4b1c      	ldr	r3, [pc, #112]	@ (800a5f0 <xTaskResumeAll+0x120>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1cc      	bne.n	800a51e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a58a:	f000 fa29 	bl	800a9e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a58e:	4b1d      	ldr	r3, [pc, #116]	@ (800a604 <xTaskResumeAll+0x134>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d010      	beq.n	800a5bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a59a:	f000 f845 	bl	800a628 <xTaskIncrementTick>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a5a4:	4b16      	ldr	r3, [pc, #88]	@ (800a600 <xTaskResumeAll+0x130>)
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1f1      	bne.n	800a59a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a5b6:	4b13      	ldr	r3, [pc, #76]	@ (800a604 <xTaskResumeAll+0x134>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a5bc:	4b10      	ldr	r3, [pc, #64]	@ (800a600 <xTaskResumeAll+0x130>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d009      	beq.n	800a5d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a5c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a608 <xTaskResumeAll+0x138>)
 800a5ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5d8:	f000 fb48 	bl	800ac6c <vPortExitCritical>

	return xAlreadyYielded;
 800a5dc:	68bb      	ldr	r3, [r7, #8]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20000910 	.word	0x20000910
 800a5ec:	200008e8 	.word	0x200008e8
 800a5f0:	200008a8 	.word	0x200008a8
 800a5f4:	200008f0 	.word	0x200008f0
 800a5f8:	200007ec 	.word	0x200007ec
 800a5fc:	200007e8 	.word	0x200007e8
 800a600:	200008fc 	.word	0x200008fc
 800a604:	200008f8 	.word	0x200008f8
 800a608:	e000ed04 	.word	0xe000ed04

0800a60c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a612:	4b04      	ldr	r3, [pc, #16]	@ (800a624 <xTaskGetTickCount+0x18>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a618:	687b      	ldr	r3, [r7, #4]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	bc80      	pop	{r7}
 800a622:	4770      	bx	lr
 800a624:	200008ec 	.word	0x200008ec

0800a628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a632:	4b51      	ldr	r3, [pc, #324]	@ (800a778 <xTaskIncrementTick+0x150>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	f040 808e 	bne.w	800a758 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a63c:	4b4f      	ldr	r3, [pc, #316]	@ (800a77c <xTaskIncrementTick+0x154>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3301      	adds	r3, #1
 800a642:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a644:	4a4d      	ldr	r2, [pc, #308]	@ (800a77c <xTaskIncrementTick+0x154>)
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d121      	bne.n	800a694 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a650:	4b4b      	ldr	r3, [pc, #300]	@ (800a780 <xTaskIncrementTick+0x158>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00b      	beq.n	800a672 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	603b      	str	r3, [r7, #0]
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	e7fd      	b.n	800a66e <xTaskIncrementTick+0x46>
 800a672:	4b43      	ldr	r3, [pc, #268]	@ (800a780 <xTaskIncrementTick+0x158>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	4b42      	ldr	r3, [pc, #264]	@ (800a784 <xTaskIncrementTick+0x15c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a40      	ldr	r2, [pc, #256]	@ (800a780 <xTaskIncrementTick+0x158>)
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	4a40      	ldr	r2, [pc, #256]	@ (800a784 <xTaskIncrementTick+0x15c>)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	4b40      	ldr	r3, [pc, #256]	@ (800a788 <xTaskIncrementTick+0x160>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3301      	adds	r3, #1
 800a68c:	4a3e      	ldr	r2, [pc, #248]	@ (800a788 <xTaskIncrementTick+0x160>)
 800a68e:	6013      	str	r3, [r2, #0]
 800a690:	f000 f9a6 	bl	800a9e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a694:	4b3d      	ldr	r3, [pc, #244]	@ (800a78c <xTaskIncrementTick+0x164>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d34d      	bcc.n	800a73a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a69e:	4b38      	ldr	r3, [pc, #224]	@ (800a780 <xTaskIncrementTick+0x158>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <xTaskIncrementTick+0x84>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e000      	b.n	800a6ae <xTaskIncrementTick+0x86>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d004      	beq.n	800a6bc <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6b2:	4b36      	ldr	r3, [pc, #216]	@ (800a78c <xTaskIncrementTick+0x164>)
 800a6b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a6b8:	601a      	str	r2, [r3, #0]
					break;
 800a6ba:	e03e      	b.n	800a73a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a6bc:	4b30      	ldr	r3, [pc, #192]	@ (800a780 <xTaskIncrementTick+0x158>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d203      	bcs.n	800a6dc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a6d4:	4a2d      	ldr	r2, [pc, #180]	@ (800a78c <xTaskIncrementTick+0x164>)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6013      	str	r3, [r2, #0]
						break;
 800a6da:	e02e      	b.n	800a73a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	3304      	adds	r3, #4
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff fca1 	bl	800a028 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d004      	beq.n	800a6f8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	3318      	adds	r3, #24
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7ff fc98 	bl	800a028 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	409a      	lsls	r2, r3
 800a700:	4b23      	ldr	r3, [pc, #140]	@ (800a790 <xTaskIncrementTick+0x168>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4313      	orrs	r3, r2
 800a706:	4a22      	ldr	r2, [pc, #136]	@ (800a790 <xTaskIncrementTick+0x168>)
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a70e:	4613      	mov	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4a1f      	ldr	r2, [pc, #124]	@ (800a794 <xTaskIncrementTick+0x16c>)
 800a718:	441a      	add	r2, r3
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	3304      	adds	r3, #4
 800a71e:	4619      	mov	r1, r3
 800a720:	4610      	mov	r0, r2
 800a722:	f7ff fc5e 	bl	8009fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a72a:	4b1b      	ldr	r3, [pc, #108]	@ (800a798 <xTaskIncrementTick+0x170>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a730:	429a      	cmp	r2, r3
 800a732:	d3b4      	bcc.n	800a69e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a734:	2301      	movs	r3, #1
 800a736:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a738:	e7b1      	b.n	800a69e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a73a:	4b17      	ldr	r3, [pc, #92]	@ (800a798 <xTaskIncrementTick+0x170>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a740:	4914      	ldr	r1, [pc, #80]	@ (800a794 <xTaskIncrementTick+0x16c>)
 800a742:	4613      	mov	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	440b      	add	r3, r1
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d907      	bls.n	800a762 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a752:	2301      	movs	r3, #1
 800a754:	617b      	str	r3, [r7, #20]
 800a756:	e004      	b.n	800a762 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a758:	4b10      	ldr	r3, [pc, #64]	@ (800a79c <xTaskIncrementTick+0x174>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3301      	adds	r3, #1
 800a75e:	4a0f      	ldr	r2, [pc, #60]	@ (800a79c <xTaskIncrementTick+0x174>)
 800a760:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a762:	4b0f      	ldr	r3, [pc, #60]	@ (800a7a0 <xTaskIncrementTick+0x178>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a76a:	2301      	movs	r3, #1
 800a76c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a76e:	697b      	ldr	r3, [r7, #20]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3718      	adds	r7, #24
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20000910 	.word	0x20000910
 800a77c:	200008ec 	.word	0x200008ec
 800a780:	200008a0 	.word	0x200008a0
 800a784:	200008a4 	.word	0x200008a4
 800a788:	20000900 	.word	0x20000900
 800a78c:	20000908 	.word	0x20000908
 800a790:	200008f0 	.word	0x200008f0
 800a794:	200007ec 	.word	0x200007ec
 800a798:	200007e8 	.word	0x200007e8
 800a79c:	200008f8 	.word	0x200008f8
 800a7a0:	200008fc 	.word	0x200008fc

0800a7a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a7aa:	4b29      	ldr	r3, [pc, #164]	@ (800a850 <vTaskSwitchContext+0xac>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a7b2:	4b28      	ldr	r3, [pc, #160]	@ (800a854 <vTaskSwitchContext+0xb0>)
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a7b8:	e045      	b.n	800a846 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800a7ba:	4b26      	ldr	r3, [pc, #152]	@ (800a854 <vTaskSwitchContext+0xb0>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a7c0:	4b25      	ldr	r3, [pc, #148]	@ (800a858 <vTaskSwitchContext+0xb4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	fab3 f383 	clz	r3, r3
 800a7cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a7ce:	7afb      	ldrb	r3, [r7, #11]
 800a7d0:	f1c3 031f 	rsb	r3, r3, #31
 800a7d4:	617b      	str	r3, [r7, #20]
 800a7d6:	4921      	ldr	r1, [pc, #132]	@ (800a85c <vTaskSwitchContext+0xb8>)
 800a7d8:	697a      	ldr	r2, [r7, #20]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	440b      	add	r3, r1
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10b      	bne.n	800a802 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	607b      	str	r3, [r7, #4]
}
 800a7fc:	bf00      	nop
 800a7fe:	bf00      	nop
 800a800:	e7fd      	b.n	800a7fe <vTaskSwitchContext+0x5a>
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	4613      	mov	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4a13      	ldr	r2, [pc, #76]	@ (800a85c <vTaskSwitchContext+0xb8>)
 800a80e:	4413      	add	r3, r2
 800a810:	613b      	str	r3, [r7, #16]
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	685a      	ldr	r2, [r3, #4]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	605a      	str	r2, [r3, #4]
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	3308      	adds	r3, #8
 800a824:	429a      	cmp	r2, r3
 800a826:	d104      	bne.n	800a832 <vTaskSwitchContext+0x8e>
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	605a      	str	r2, [r3, #4]
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	4a09      	ldr	r2, [pc, #36]	@ (800a860 <vTaskSwitchContext+0xbc>)
 800a83a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a83c:	4b08      	ldr	r3, [pc, #32]	@ (800a860 <vTaskSwitchContext+0xbc>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3354      	adds	r3, #84	@ 0x54
 800a842:	4a08      	ldr	r2, [pc, #32]	@ (800a864 <vTaskSwitchContext+0xc0>)
 800a844:	6013      	str	r3, [r2, #0]
}
 800a846:	bf00      	nop
 800a848:	371c      	adds	r7, #28
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bc80      	pop	{r7}
 800a84e:	4770      	bx	lr
 800a850:	20000910 	.word	0x20000910
 800a854:	200008fc 	.word	0x200008fc
 800a858:	200008f0 	.word	0x200008f0
 800a85c:	200007ec 	.word	0x200007ec
 800a860:	200007e8 	.word	0x200007e8
 800a864:	20000054 	.word	0x20000054

0800a868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a870:	f000 f852 	bl	800a918 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a874:	4b06      	ldr	r3, [pc, #24]	@ (800a890 <prvIdleTask+0x28>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d9f9      	bls.n	800a870 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a87c:	4b05      	ldr	r3, [pc, #20]	@ (800a894 <prvIdleTask+0x2c>)
 800a87e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a88c:	e7f0      	b.n	800a870 <prvIdleTask+0x8>
 800a88e:	bf00      	nop
 800a890:	200007ec 	.word	0x200007ec
 800a894:	e000ed04 	.word	0xe000ed04

0800a898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a89e:	2300      	movs	r3, #0
 800a8a0:	607b      	str	r3, [r7, #4]
 800a8a2:	e00c      	b.n	800a8be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4a12      	ldr	r2, [pc, #72]	@ (800a8f8 <prvInitialiseTaskLists+0x60>)
 800a8b0:	4413      	add	r3, r2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff fb6a 	bl	8009f8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	607b      	str	r3, [r7, #4]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b06      	cmp	r3, #6
 800a8c2:	d9ef      	bls.n	800a8a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8c4:	480d      	ldr	r0, [pc, #52]	@ (800a8fc <prvInitialiseTaskLists+0x64>)
 800a8c6:	f7ff fb61 	bl	8009f8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8ca:	480d      	ldr	r0, [pc, #52]	@ (800a900 <prvInitialiseTaskLists+0x68>)
 800a8cc:	f7ff fb5e 	bl	8009f8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8d0:	480c      	ldr	r0, [pc, #48]	@ (800a904 <prvInitialiseTaskLists+0x6c>)
 800a8d2:	f7ff fb5b 	bl	8009f8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a8d6:	480c      	ldr	r0, [pc, #48]	@ (800a908 <prvInitialiseTaskLists+0x70>)
 800a8d8:	f7ff fb58 	bl	8009f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8dc:	480b      	ldr	r0, [pc, #44]	@ (800a90c <prvInitialiseTaskLists+0x74>)
 800a8de:	f7ff fb55 	bl	8009f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a910 <prvInitialiseTaskLists+0x78>)
 800a8e4:	4a05      	ldr	r2, [pc, #20]	@ (800a8fc <prvInitialiseTaskLists+0x64>)
 800a8e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a914 <prvInitialiseTaskLists+0x7c>)
 800a8ea:	4a05      	ldr	r2, [pc, #20]	@ (800a900 <prvInitialiseTaskLists+0x68>)
 800a8ec:	601a      	str	r2, [r3, #0]
}
 800a8ee:	bf00      	nop
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	200007ec 	.word	0x200007ec
 800a8fc:	20000878 	.word	0x20000878
 800a900:	2000088c 	.word	0x2000088c
 800a904:	200008a8 	.word	0x200008a8
 800a908:	200008bc 	.word	0x200008bc
 800a90c:	200008d4 	.word	0x200008d4
 800a910:	200008a0 	.word	0x200008a0
 800a914:	200008a4 	.word	0x200008a4

0800a918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a91e:	e019      	b.n	800a954 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a920:	f000 f974 	bl	800ac0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a924:	4b10      	ldr	r3, [pc, #64]	@ (800a968 <prvCheckTasksWaitingTermination+0x50>)
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3304      	adds	r3, #4
 800a930:	4618      	mov	r0, r3
 800a932:	f7ff fb79 	bl	800a028 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a936:	4b0d      	ldr	r3, [pc, #52]	@ (800a96c <prvCheckTasksWaitingTermination+0x54>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	4a0b      	ldr	r2, [pc, #44]	@ (800a96c <prvCheckTasksWaitingTermination+0x54>)
 800a93e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a940:	4b0b      	ldr	r3, [pc, #44]	@ (800a970 <prvCheckTasksWaitingTermination+0x58>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3b01      	subs	r3, #1
 800a946:	4a0a      	ldr	r2, [pc, #40]	@ (800a970 <prvCheckTasksWaitingTermination+0x58>)
 800a948:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a94a:	f000 f98f 	bl	800ac6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f810 	bl	800a974 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a954:	4b06      	ldr	r3, [pc, #24]	@ (800a970 <prvCheckTasksWaitingTermination+0x58>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e1      	bne.n	800a920 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	200008bc 	.word	0x200008bc
 800a96c:	200008e8 	.word	0x200008e8
 800a970:	200008d0 	.word	0x200008d0

0800a974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3354      	adds	r3, #84	@ 0x54
 800a980:	4618      	mov	r0, r3
 800a982:	f001 f961 	bl	800bc48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d108      	bne.n	800a9a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a994:	4618      	mov	r0, r3
 800a996:	f000 fac3 	bl	800af20 <vPortFree>
				vPortFree( pxTCB );
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fac0 	bl	800af20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9a0:	e019      	b.n	800a9d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d103      	bne.n	800a9b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fab7 	bl	800af20 <vPortFree>
	}
 800a9b2:	e010      	b.n	800a9d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d00b      	beq.n	800a9d6 <prvDeleteTCB+0x62>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	60fb      	str	r3, [r7, #12]
}
 800a9d0:	bf00      	nop
 800a9d2:	bf00      	nop
 800a9d4:	e7fd      	b.n	800a9d2 <prvDeleteTCB+0x5e>
	}
 800a9d6:	bf00      	nop
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
	...

0800a9e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9e6:	4b0e      	ldr	r3, [pc, #56]	@ (800aa20 <prvResetNextTaskUnblockTime+0x40>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d101      	bne.n	800a9f4 <prvResetNextTaskUnblockTime+0x14>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e000      	b.n	800a9f6 <prvResetNextTaskUnblockTime+0x16>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d004      	beq.n	800aa04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800aa24 <prvResetNextTaskUnblockTime+0x44>)
 800a9fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa02:	e008      	b.n	800aa16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aa04:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <prvResetNextTaskUnblockTime+0x40>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	4a04      	ldr	r2, [pc, #16]	@ (800aa24 <prvResetNextTaskUnblockTime+0x44>)
 800aa14:	6013      	str	r3, [r2, #0]
}
 800aa16:	bf00      	nop
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bc80      	pop	{r7}
 800aa1e:	4770      	bx	lr
 800aa20:	200008a0 	.word	0x200008a0
 800aa24:	20000908 	.word	0x20000908

0800aa28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3b04      	subs	r3, #4
 800aa38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aa40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	3b04      	subs	r3, #4
 800aa46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	f023 0201 	bic.w	r2, r3, #1
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	3b04      	subs	r3, #4
 800aa56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa58:	4a08      	ldr	r2, [pc, #32]	@ (800aa7c <pxPortInitialiseStack+0x54>)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3b14      	subs	r3, #20
 800aa62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	3b20      	subs	r3, #32
 800aa6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa70:	68fb      	ldr	r3, [r7, #12]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr
 800aa7c:	0800aa81 	.word	0x0800aa81

0800aa80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa8a:	4b12      	ldr	r3, [pc, #72]	@ (800aad4 <prvTaskExitError+0x54>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa92:	d00b      	beq.n	800aaac <prvTaskExitError+0x2c>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	60fb      	str	r3, [r7, #12]
}
 800aaa6:	bf00      	nop
 800aaa8:	bf00      	nop
 800aaaa:	e7fd      	b.n	800aaa8 <prvTaskExitError+0x28>
	__asm volatile
 800aaac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	60bb      	str	r3, [r7, #8]
}
 800aabe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aac0:	bf00      	nop
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0fc      	beq.n	800aac2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aac8:	bf00      	nop
 800aaca:	bf00      	nop
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	bc80      	pop	{r7}
 800aad2:	4770      	bx	lr
 800aad4:	20000044 	.word	0x20000044
	...

0800aae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aae0:	4b07      	ldr	r3, [pc, #28]	@ (800ab00 <pxCurrentTCBConst2>)
 800aae2:	6819      	ldr	r1, [r3, #0]
 800aae4:	6808      	ldr	r0, [r1, #0]
 800aae6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aaea:	f380 8809 	msr	PSP, r0
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f04f 0000 	mov.w	r0, #0
 800aaf6:	f380 8811 	msr	BASEPRI, r0
 800aafa:	f04e 0e0d 	orr.w	lr, lr, #13
 800aafe:	4770      	bx	lr

0800ab00 <pxCurrentTCBConst2>:
 800ab00:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab04:	bf00      	nop
 800ab06:	bf00      	nop

0800ab08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ab08:	4806      	ldr	r0, [pc, #24]	@ (800ab24 <prvPortStartFirstTask+0x1c>)
 800ab0a:	6800      	ldr	r0, [r0, #0]
 800ab0c:	6800      	ldr	r0, [r0, #0]
 800ab0e:	f380 8808 	msr	MSP, r0
 800ab12:	b662      	cpsie	i
 800ab14:	b661      	cpsie	f
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	df00      	svc	0
 800ab20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab22:	bf00      	nop
 800ab24:	e000ed08 	.word	0xe000ed08

0800ab28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab2e:	4b32      	ldr	r3, [pc, #200]	@ (800abf8 <xPortStartScheduler+0xd0>)
 800ab30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	22ff      	movs	r2, #255	@ 0xff
 800ab3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab48:	78fb      	ldrb	r3, [r7, #3]
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	4b2a      	ldr	r3, [pc, #168]	@ (800abfc <xPortStartScheduler+0xd4>)
 800ab54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab56:	4b2a      	ldr	r3, [pc, #168]	@ (800ac00 <xPortStartScheduler+0xd8>)
 800ab58:	2207      	movs	r2, #7
 800ab5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab5c:	e009      	b.n	800ab72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ab5e:	4b28      	ldr	r3, [pc, #160]	@ (800ac00 <xPortStartScheduler+0xd8>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3b01      	subs	r3, #1
 800ab64:	4a26      	ldr	r2, [pc, #152]	@ (800ac00 <xPortStartScheduler+0xd8>)
 800ab66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab68:	78fb      	ldrb	r3, [r7, #3]
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	005b      	lsls	r3, r3, #1
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab7a:	2b80      	cmp	r3, #128	@ 0x80
 800ab7c:	d0ef      	beq.n	800ab5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab7e:	4b20      	ldr	r3, [pc, #128]	@ (800ac00 <xPortStartScheduler+0xd8>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f1c3 0307 	rsb	r3, r3, #7
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	d00b      	beq.n	800aba2 <xPortStartScheduler+0x7a>
	__asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	60bb      	str	r3, [r7, #8]
}
 800ab9c:	bf00      	nop
 800ab9e:	bf00      	nop
 800aba0:	e7fd      	b.n	800ab9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aba2:	4b17      	ldr	r3, [pc, #92]	@ (800ac00 <xPortStartScheduler+0xd8>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	021b      	lsls	r3, r3, #8
 800aba8:	4a15      	ldr	r2, [pc, #84]	@ (800ac00 <xPortStartScheduler+0xd8>)
 800abaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abac:	4b14      	ldr	r3, [pc, #80]	@ (800ac00 <xPortStartScheduler+0xd8>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800abb4:	4a12      	ldr	r2, [pc, #72]	@ (800ac00 <xPortStartScheduler+0xd8>)
 800abb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	b2da      	uxtb	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abc0:	4b10      	ldr	r3, [pc, #64]	@ (800ac04 <xPortStartScheduler+0xdc>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a0f      	ldr	r2, [pc, #60]	@ (800ac04 <xPortStartScheduler+0xdc>)
 800abc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800abca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abcc:	4b0d      	ldr	r3, [pc, #52]	@ (800ac04 <xPortStartScheduler+0xdc>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a0c      	ldr	r2, [pc, #48]	@ (800ac04 <xPortStartScheduler+0xdc>)
 800abd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800abd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800abd8:	f000 f8b8 	bl	800ad4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800abdc:	4b0a      	ldr	r3, [pc, #40]	@ (800ac08 <xPortStartScheduler+0xe0>)
 800abde:	2200      	movs	r2, #0
 800abe0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800abe2:	f7ff ff91 	bl	800ab08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800abe6:	f7ff fddd 	bl	800a7a4 <vTaskSwitchContext>
	prvTaskExitError();
 800abea:	f7ff ff49 	bl	800aa80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	e000e400 	.word	0xe000e400
 800abfc:	20000914 	.word	0x20000914
 800ac00:	20000918 	.word	0x20000918
 800ac04:	e000ed20 	.word	0xe000ed20
 800ac08:	20000044 	.word	0x20000044

0800ac0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	607b      	str	r3, [r7, #4]
}
 800ac24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac26:	4b0f      	ldr	r3, [pc, #60]	@ (800ac64 <vPortEnterCritical+0x58>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	4a0d      	ldr	r2, [pc, #52]	@ (800ac64 <vPortEnterCritical+0x58>)
 800ac2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac30:	4b0c      	ldr	r3, [pc, #48]	@ (800ac64 <vPortEnterCritical+0x58>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d110      	bne.n	800ac5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac38:	4b0b      	ldr	r3, [pc, #44]	@ (800ac68 <vPortEnterCritical+0x5c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <vPortEnterCritical+0x4e>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	603b      	str	r3, [r7, #0]
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop
 800ac58:	e7fd      	b.n	800ac56 <vPortEnterCritical+0x4a>
	}
}
 800ac5a:	bf00      	nop
 800ac5c:	370c      	adds	r7, #12
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bc80      	pop	{r7}
 800ac62:	4770      	bx	lr
 800ac64:	20000044 	.word	0x20000044
 800ac68:	e000ed04 	.word	0xe000ed04

0800ac6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac72:	4b12      	ldr	r3, [pc, #72]	@ (800acbc <vPortExitCritical+0x50>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10b      	bne.n	800ac92 <vPortExitCritical+0x26>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	607b      	str	r3, [r7, #4]
}
 800ac8c:	bf00      	nop
 800ac8e:	bf00      	nop
 800ac90:	e7fd      	b.n	800ac8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac92:	4b0a      	ldr	r3, [pc, #40]	@ (800acbc <vPortExitCritical+0x50>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	4a08      	ldr	r2, [pc, #32]	@ (800acbc <vPortExitCritical+0x50>)
 800ac9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac9c:	4b07      	ldr	r3, [pc, #28]	@ (800acbc <vPortExitCritical+0x50>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d105      	bne.n	800acb0 <vPortExitCritical+0x44>
 800aca4:	2300      	movs	r3, #0
 800aca6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800acae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bc80      	pop	{r7}
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	20000044 	.word	0x20000044

0800acc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800acc0:	f3ef 8009 	mrs	r0, PSP
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <pxCurrentTCBConst>)
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800acd0:	6010      	str	r0, [r2, #0]
 800acd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800acd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800acda:	f380 8811 	msr	BASEPRI, r0
 800acde:	f7ff fd61 	bl	800a7a4 <vTaskSwitchContext>
 800ace2:	f04f 0000 	mov.w	r0, #0
 800ace6:	f380 8811 	msr	BASEPRI, r0
 800acea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800acee:	6819      	ldr	r1, [r3, #0]
 800acf0:	6808      	ldr	r0, [r1, #0]
 800acf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800acf6:	f380 8809 	msr	PSP, r0
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	4770      	bx	lr

0800ad00 <pxCurrentTCBConst>:
 800ad00:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad04:	bf00      	nop
 800ad06:	bf00      	nop

0800ad08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	607b      	str	r3, [r7, #4]
}
 800ad20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad22:	f7ff fc81 	bl	800a628 <xTaskIncrementTick>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad2c:	4b06      	ldr	r3, [pc, #24]	@ (800ad48 <SysTick_Handler+0x40>)
 800ad2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	2300      	movs	r3, #0
 800ad36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	f383 8811 	msr	BASEPRI, r3
}
 800ad3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad40:	bf00      	nop
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	e000ed04 	.word	0xe000ed04

0800ad4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad50:	4b0a      	ldr	r3, [pc, #40]	@ (800ad7c <vPortSetupTimerInterrupt+0x30>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad56:	4b0a      	ldr	r3, [pc, #40]	@ (800ad80 <vPortSetupTimerInterrupt+0x34>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad5c:	4b09      	ldr	r3, [pc, #36]	@ (800ad84 <vPortSetupTimerInterrupt+0x38>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a09      	ldr	r2, [pc, #36]	@ (800ad88 <vPortSetupTimerInterrupt+0x3c>)
 800ad62:	fba2 2303 	umull	r2, r3, r2, r3
 800ad66:	099b      	lsrs	r3, r3, #6
 800ad68:	4a08      	ldr	r2, [pc, #32]	@ (800ad8c <vPortSetupTimerInterrupt+0x40>)
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad6e:	4b03      	ldr	r3, [pc, #12]	@ (800ad7c <vPortSetupTimerInterrupt+0x30>)
 800ad70:	2207      	movs	r2, #7
 800ad72:	601a      	str	r2, [r3, #0]
}
 800ad74:	bf00      	nop
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bc80      	pop	{r7}
 800ad7a:	4770      	bx	lr
 800ad7c:	e000e010 	.word	0xe000e010
 800ad80:	e000e018 	.word	0xe000e018
 800ad84:	20000038 	.word	0x20000038
 800ad88:	10624dd3 	.word	0x10624dd3
 800ad8c:	e000e014 	.word	0xe000e014

0800ad90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08a      	sub	sp, #40	@ 0x28
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad9c:	f7ff fb8a 	bl	800a4b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ada0:	4b5a      	ldr	r3, [pc, #360]	@ (800af0c <pvPortMalloc+0x17c>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ada8:	f000 f916 	bl	800afd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800adac:	4b58      	ldr	r3, [pc, #352]	@ (800af10 <pvPortMalloc+0x180>)
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4013      	ands	r3, r2
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f040 8090 	bne.w	800aeda <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d01e      	beq.n	800adfe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800adc0:	2208      	movs	r2, #8
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4413      	add	r3, r2
 800adc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f003 0307 	and.w	r3, r3, #7
 800adce:	2b00      	cmp	r3, #0
 800add0:	d015      	beq.n	800adfe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f023 0307 	bic.w	r3, r3, #7
 800add8:	3308      	adds	r3, #8
 800adda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f003 0307 	and.w	r3, r3, #7
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00b      	beq.n	800adfe <pvPortMalloc+0x6e>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	617b      	str	r3, [r7, #20]
}
 800adf8:	bf00      	nop
 800adfa:	bf00      	nop
 800adfc:	e7fd      	b.n	800adfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d06a      	beq.n	800aeda <pvPortMalloc+0x14a>
 800ae04:	4b43      	ldr	r3, [pc, #268]	@ (800af14 <pvPortMalloc+0x184>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d865      	bhi.n	800aeda <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae0e:	4b42      	ldr	r3, [pc, #264]	@ (800af18 <pvPortMalloc+0x188>)
 800ae10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae12:	4b41      	ldr	r3, [pc, #260]	@ (800af18 <pvPortMalloc+0x188>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae18:	e004      	b.n	800ae24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d903      	bls.n	800ae36 <pvPortMalloc+0xa6>
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1f1      	bne.n	800ae1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae36:	4b35      	ldr	r3, [pc, #212]	@ (800af0c <pvPortMalloc+0x17c>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d04c      	beq.n	800aeda <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2208      	movs	r2, #8
 800ae46:	4413      	add	r3, r2
 800ae48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	6a3b      	ldr	r3, [r7, #32]
 800ae50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	1ad2      	subs	r2, r2, r3
 800ae5a:	2308      	movs	r3, #8
 800ae5c:	005b      	lsls	r3, r3, #1
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d920      	bls.n	800aea4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4413      	add	r3, r2
 800ae68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	f003 0307 	and.w	r3, r3, #7
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <pvPortMalloc+0xfc>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	613b      	str	r3, [r7, #16]
}
 800ae86:	bf00      	nop
 800ae88:	bf00      	nop
 800ae8a:	e7fd      	b.n	800ae88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	1ad2      	subs	r2, r2, r3
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae9e:	69b8      	ldr	r0, [r7, #24]
 800aea0:	f000 f8fc 	bl	800b09c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aea4:	4b1b      	ldr	r3, [pc, #108]	@ (800af14 <pvPortMalloc+0x184>)
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	4a19      	ldr	r2, [pc, #100]	@ (800af14 <pvPortMalloc+0x184>)
 800aeb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aeb2:	4b18      	ldr	r3, [pc, #96]	@ (800af14 <pvPortMalloc+0x184>)
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	4b19      	ldr	r3, [pc, #100]	@ (800af1c <pvPortMalloc+0x18c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d203      	bcs.n	800aec6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aebe:	4b15      	ldr	r3, [pc, #84]	@ (800af14 <pvPortMalloc+0x184>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a16      	ldr	r2, [pc, #88]	@ (800af1c <pvPortMalloc+0x18c>)
 800aec4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec8:	685a      	ldr	r2, [r3, #4]
 800aeca:	4b11      	ldr	r3, [pc, #68]	@ (800af10 <pvPortMalloc+0x180>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	431a      	orrs	r2, r3
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed6:	2200      	movs	r2, #0
 800aed8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aeda:	f7ff faf9 	bl	800a4d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	f003 0307 	and.w	r3, r3, #7
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00b      	beq.n	800af00 <pvPortMalloc+0x170>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	60fb      	str	r3, [r7, #12]
}
 800aefa:	bf00      	nop
 800aefc:	bf00      	nop
 800aefe:	e7fd      	b.n	800aefc <pvPortMalloc+0x16c>
	return pvReturn;
 800af00:	69fb      	ldr	r3, [r7, #28]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3728      	adds	r7, #40	@ 0x28
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	20001524 	.word	0x20001524
 800af10:	20001530 	.word	0x20001530
 800af14:	20001528 	.word	0x20001528
 800af18:	2000151c 	.word	0x2000151c
 800af1c:	2000152c 	.word	0x2000152c

0800af20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d04a      	beq.n	800afc8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af32:	2308      	movs	r3, #8
 800af34:	425b      	negs	r3, r3
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	4413      	add	r3, r2
 800af3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	4b22      	ldr	r3, [pc, #136]	@ (800afd0 <vPortFree+0xb0>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4013      	ands	r3, r2
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10b      	bne.n	800af66 <vPortFree+0x46>
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	60fb      	str	r3, [r7, #12]
}
 800af60:	bf00      	nop
 800af62:	bf00      	nop
 800af64:	e7fd      	b.n	800af62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00b      	beq.n	800af86 <vPortFree+0x66>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	60bb      	str	r3, [r7, #8]
}
 800af80:	bf00      	nop
 800af82:	bf00      	nop
 800af84:	e7fd      	b.n	800af82 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	685a      	ldr	r2, [r3, #4]
 800af8a:	4b11      	ldr	r3, [pc, #68]	@ (800afd0 <vPortFree+0xb0>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4013      	ands	r3, r2
 800af90:	2b00      	cmp	r3, #0
 800af92:	d019      	beq.n	800afc8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d115      	bne.n	800afc8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	4b0b      	ldr	r3, [pc, #44]	@ (800afd0 <vPortFree+0xb0>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	43db      	mvns	r3, r3
 800afa6:	401a      	ands	r2, r3
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afac:	f7ff fa82 	bl	800a4b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	685a      	ldr	r2, [r3, #4]
 800afb4:	4b07      	ldr	r3, [pc, #28]	@ (800afd4 <vPortFree+0xb4>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4413      	add	r3, r2
 800afba:	4a06      	ldr	r2, [pc, #24]	@ (800afd4 <vPortFree+0xb4>)
 800afbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afbe:	6938      	ldr	r0, [r7, #16]
 800afc0:	f000 f86c 	bl	800b09c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800afc4:	f7ff fa84 	bl	800a4d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800afc8:	bf00      	nop
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	20001530 	.word	0x20001530
 800afd4:	20001528 	.word	0x20001528

0800afd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800afde:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800afe2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800afe4:	4b27      	ldr	r3, [pc, #156]	@ (800b084 <prvHeapInit+0xac>)
 800afe6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f003 0307 	and.w	r3, r3, #7
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00c      	beq.n	800b00c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3307      	adds	r3, #7
 800aff6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f023 0307 	bic.w	r3, r3, #7
 800affe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	4a1f      	ldr	r2, [pc, #124]	@ (800b084 <prvHeapInit+0xac>)
 800b008:	4413      	add	r3, r2
 800b00a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b010:	4a1d      	ldr	r2, [pc, #116]	@ (800b088 <prvHeapInit+0xb0>)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b016:	4b1c      	ldr	r3, [pc, #112]	@ (800b088 <prvHeapInit+0xb0>)
 800b018:	2200      	movs	r2, #0
 800b01a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	4413      	add	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b024:	2208      	movs	r2, #8
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	1a9b      	subs	r3, r3, r2
 800b02a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f023 0307 	bic.w	r3, r3, #7
 800b032:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4a15      	ldr	r2, [pc, #84]	@ (800b08c <prvHeapInit+0xb4>)
 800b038:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b03a:	4b14      	ldr	r3, [pc, #80]	@ (800b08c <prvHeapInit+0xb4>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2200      	movs	r2, #0
 800b040:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b042:	4b12      	ldr	r3, [pc, #72]	@ (800b08c <prvHeapInit+0xb4>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	1ad2      	subs	r2, r2, r3
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b058:	4b0c      	ldr	r3, [pc, #48]	@ (800b08c <prvHeapInit+0xb4>)
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	4a0a      	ldr	r2, [pc, #40]	@ (800b090 <prvHeapInit+0xb8>)
 800b066:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	4a09      	ldr	r2, [pc, #36]	@ (800b094 <prvHeapInit+0xbc>)
 800b06e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b070:	4b09      	ldr	r3, [pc, #36]	@ (800b098 <prvHeapInit+0xc0>)
 800b072:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b076:	601a      	str	r2, [r3, #0]
}
 800b078:	bf00      	nop
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bc80      	pop	{r7}
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	2000091c 	.word	0x2000091c
 800b088:	2000151c 	.word	0x2000151c
 800b08c:	20001524 	.word	0x20001524
 800b090:	2000152c 	.word	0x2000152c
 800b094:	20001528 	.word	0x20001528
 800b098:	20001530 	.word	0x20001530

0800b09c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0a4:	4b27      	ldr	r3, [pc, #156]	@ (800b144 <prvInsertBlockIntoFreeList+0xa8>)
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	e002      	b.n	800b0b0 <prvInsertBlockIntoFreeList+0x14>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d8f7      	bhi.n	800b0aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d108      	bne.n	800b0de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	441a      	add	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	441a      	add	r2, r3
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d118      	bne.n	800b124 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	4b14      	ldr	r3, [pc, #80]	@ (800b148 <prvInsertBlockIntoFreeList+0xac>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d00d      	beq.n	800b11a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685a      	ldr	r2, [r3, #4]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	441a      	add	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	e008      	b.n	800b12c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b11a:	4b0b      	ldr	r3, [pc, #44]	@ (800b148 <prvInsertBlockIntoFreeList+0xac>)
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	e003      	b.n	800b12c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	429a      	cmp	r2, r3
 800b132:	d002      	beq.n	800b13a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b13a:	bf00      	nop
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	bc80      	pop	{r7}
 800b142:	4770      	bx	lr
 800b144:	2000151c 	.word	0x2000151c
 800b148:	20001524 	.word	0x20001524

0800b14c <__cvt>:
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b152:	461d      	mov	r5, r3
 800b154:	bfbb      	ittet	lt
 800b156:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b15a:	461d      	movlt	r5, r3
 800b15c:	2300      	movge	r3, #0
 800b15e:	232d      	movlt	r3, #45	@ 0x2d
 800b160:	b088      	sub	sp, #32
 800b162:	4614      	mov	r4, r2
 800b164:	bfb8      	it	lt
 800b166:	4614      	movlt	r4, r2
 800b168:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b16a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b16c:	7013      	strb	r3, [r2, #0]
 800b16e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b170:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b174:	f023 0820 	bic.w	r8, r3, #32
 800b178:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b17c:	d005      	beq.n	800b18a <__cvt+0x3e>
 800b17e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b182:	d100      	bne.n	800b186 <__cvt+0x3a>
 800b184:	3601      	adds	r6, #1
 800b186:	2302      	movs	r3, #2
 800b188:	e000      	b.n	800b18c <__cvt+0x40>
 800b18a:	2303      	movs	r3, #3
 800b18c:	aa07      	add	r2, sp, #28
 800b18e:	9204      	str	r2, [sp, #16]
 800b190:	aa06      	add	r2, sp, #24
 800b192:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b196:	e9cd 3600 	strd	r3, r6, [sp]
 800b19a:	4622      	mov	r2, r4
 800b19c:	462b      	mov	r3, r5
 800b19e:	f000 fe7b 	bl	800be98 <_dtoa_r>
 800b1a2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	d119      	bne.n	800b1de <__cvt+0x92>
 800b1aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1ac:	07db      	lsls	r3, r3, #31
 800b1ae:	d50e      	bpl.n	800b1ce <__cvt+0x82>
 800b1b0:	eb00 0906 	add.w	r9, r0, r6
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	4629      	mov	r1, r5
 800b1bc:	f7f5 fc64 	bl	8000a88 <__aeabi_dcmpeq>
 800b1c0:	b108      	cbz	r0, 800b1c6 <__cvt+0x7a>
 800b1c2:	f8cd 901c 	str.w	r9, [sp, #28]
 800b1c6:	2230      	movs	r2, #48	@ 0x30
 800b1c8:	9b07      	ldr	r3, [sp, #28]
 800b1ca:	454b      	cmp	r3, r9
 800b1cc:	d31e      	bcc.n	800b20c <__cvt+0xc0>
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	9b07      	ldr	r3, [sp, #28]
 800b1d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b1d4:	1bdb      	subs	r3, r3, r7
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	b008      	add	sp, #32
 800b1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1e2:	eb00 0906 	add.w	r9, r0, r6
 800b1e6:	d1e5      	bne.n	800b1b4 <__cvt+0x68>
 800b1e8:	7803      	ldrb	r3, [r0, #0]
 800b1ea:	2b30      	cmp	r3, #48	@ 0x30
 800b1ec:	d10a      	bne.n	800b204 <__cvt+0xb8>
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	f7f5 fc47 	bl	8000a88 <__aeabi_dcmpeq>
 800b1fa:	b918      	cbnz	r0, 800b204 <__cvt+0xb8>
 800b1fc:	f1c6 0601 	rsb	r6, r6, #1
 800b200:	f8ca 6000 	str.w	r6, [sl]
 800b204:	f8da 3000 	ldr.w	r3, [sl]
 800b208:	4499      	add	r9, r3
 800b20a:	e7d3      	b.n	800b1b4 <__cvt+0x68>
 800b20c:	1c59      	adds	r1, r3, #1
 800b20e:	9107      	str	r1, [sp, #28]
 800b210:	701a      	strb	r2, [r3, #0]
 800b212:	e7d9      	b.n	800b1c8 <__cvt+0x7c>

0800b214 <__exponent>:
 800b214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b216:	2900      	cmp	r1, #0
 800b218:	bfb6      	itet	lt
 800b21a:	232d      	movlt	r3, #45	@ 0x2d
 800b21c:	232b      	movge	r3, #43	@ 0x2b
 800b21e:	4249      	neglt	r1, r1
 800b220:	2909      	cmp	r1, #9
 800b222:	7002      	strb	r2, [r0, #0]
 800b224:	7043      	strb	r3, [r0, #1]
 800b226:	dd29      	ble.n	800b27c <__exponent+0x68>
 800b228:	f10d 0307 	add.w	r3, sp, #7
 800b22c:	461d      	mov	r5, r3
 800b22e:	270a      	movs	r7, #10
 800b230:	fbb1 f6f7 	udiv	r6, r1, r7
 800b234:	461a      	mov	r2, r3
 800b236:	fb07 1416 	mls	r4, r7, r6, r1
 800b23a:	3430      	adds	r4, #48	@ 0x30
 800b23c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b240:	460c      	mov	r4, r1
 800b242:	2c63      	cmp	r4, #99	@ 0x63
 800b244:	4631      	mov	r1, r6
 800b246:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b24a:	dcf1      	bgt.n	800b230 <__exponent+0x1c>
 800b24c:	3130      	adds	r1, #48	@ 0x30
 800b24e:	1e94      	subs	r4, r2, #2
 800b250:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b254:	4623      	mov	r3, r4
 800b256:	1c41      	adds	r1, r0, #1
 800b258:	42ab      	cmp	r3, r5
 800b25a:	d30a      	bcc.n	800b272 <__exponent+0x5e>
 800b25c:	f10d 0309 	add.w	r3, sp, #9
 800b260:	1a9b      	subs	r3, r3, r2
 800b262:	42ac      	cmp	r4, r5
 800b264:	bf88      	it	hi
 800b266:	2300      	movhi	r3, #0
 800b268:	3302      	adds	r3, #2
 800b26a:	4403      	add	r3, r0
 800b26c:	1a18      	subs	r0, r3, r0
 800b26e:	b003      	add	sp, #12
 800b270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b272:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b276:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b27a:	e7ed      	b.n	800b258 <__exponent+0x44>
 800b27c:	2330      	movs	r3, #48	@ 0x30
 800b27e:	3130      	adds	r1, #48	@ 0x30
 800b280:	7083      	strb	r3, [r0, #2]
 800b282:	70c1      	strb	r1, [r0, #3]
 800b284:	1d03      	adds	r3, r0, #4
 800b286:	e7f1      	b.n	800b26c <__exponent+0x58>

0800b288 <_printf_float>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	b091      	sub	sp, #68	@ 0x44
 800b28e:	460c      	mov	r4, r1
 800b290:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b294:	4616      	mov	r6, r2
 800b296:	461f      	mov	r7, r3
 800b298:	4605      	mov	r5, r0
 800b29a:	f000 fcd1 	bl	800bc40 <_localeconv_r>
 800b29e:	6803      	ldr	r3, [r0, #0]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	9308      	str	r3, [sp, #32]
 800b2a4:	f7f4 ffc4 	bl	8000230 <strlen>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	930e      	str	r3, [sp, #56]	@ 0x38
 800b2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b2b0:	9009      	str	r0, [sp, #36]	@ 0x24
 800b2b2:	3307      	adds	r3, #7
 800b2b4:	f023 0307 	bic.w	r3, r3, #7
 800b2b8:	f103 0208 	add.w	r2, r3, #8
 800b2bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b2c0:	f8d4 b000 	ldr.w	fp, [r4]
 800b2c4:	f8c8 2000 	str.w	r2, [r8]
 800b2c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2d2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b2d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b2da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b2de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b2e2:	4b9c      	ldr	r3, [pc, #624]	@ (800b554 <_printf_float+0x2cc>)
 800b2e4:	f7f5 fc02 	bl	8000aec <__aeabi_dcmpun>
 800b2e8:	bb70      	cbnz	r0, 800b348 <_printf_float+0xc0>
 800b2ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b2ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b2f2:	4b98      	ldr	r3, [pc, #608]	@ (800b554 <_printf_float+0x2cc>)
 800b2f4:	f7f5 fbdc 	bl	8000ab0 <__aeabi_dcmple>
 800b2f8:	bb30      	cbnz	r0, 800b348 <_printf_float+0xc0>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	4640      	mov	r0, r8
 800b300:	4649      	mov	r1, r9
 800b302:	f7f5 fbcb 	bl	8000a9c <__aeabi_dcmplt>
 800b306:	b110      	cbz	r0, 800b30e <_printf_float+0x86>
 800b308:	232d      	movs	r3, #45	@ 0x2d
 800b30a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b30e:	4a92      	ldr	r2, [pc, #584]	@ (800b558 <_printf_float+0x2d0>)
 800b310:	4b92      	ldr	r3, [pc, #584]	@ (800b55c <_printf_float+0x2d4>)
 800b312:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b316:	bf94      	ite	ls
 800b318:	4690      	movls	r8, r2
 800b31a:	4698      	movhi	r8, r3
 800b31c:	2303      	movs	r3, #3
 800b31e:	f04f 0900 	mov.w	r9, #0
 800b322:	6123      	str	r3, [r4, #16]
 800b324:	f02b 0304 	bic.w	r3, fp, #4
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	4633      	mov	r3, r6
 800b32c:	4621      	mov	r1, r4
 800b32e:	4628      	mov	r0, r5
 800b330:	9700      	str	r7, [sp, #0]
 800b332:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b334:	f000 f9d4 	bl	800b6e0 <_printf_common>
 800b338:	3001      	adds	r0, #1
 800b33a:	f040 8090 	bne.w	800b45e <_printf_float+0x1d6>
 800b33e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b342:	b011      	add	sp, #68	@ 0x44
 800b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b348:	4642      	mov	r2, r8
 800b34a:	464b      	mov	r3, r9
 800b34c:	4640      	mov	r0, r8
 800b34e:	4649      	mov	r1, r9
 800b350:	f7f5 fbcc 	bl	8000aec <__aeabi_dcmpun>
 800b354:	b148      	cbz	r0, 800b36a <_printf_float+0xe2>
 800b356:	464b      	mov	r3, r9
 800b358:	2b00      	cmp	r3, #0
 800b35a:	bfb8      	it	lt
 800b35c:	232d      	movlt	r3, #45	@ 0x2d
 800b35e:	4a80      	ldr	r2, [pc, #512]	@ (800b560 <_printf_float+0x2d8>)
 800b360:	bfb8      	it	lt
 800b362:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b366:	4b7f      	ldr	r3, [pc, #508]	@ (800b564 <_printf_float+0x2dc>)
 800b368:	e7d3      	b.n	800b312 <_printf_float+0x8a>
 800b36a:	6863      	ldr	r3, [r4, #4]
 800b36c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b370:	1c5a      	adds	r2, r3, #1
 800b372:	d13f      	bne.n	800b3f4 <_printf_float+0x16c>
 800b374:	2306      	movs	r3, #6
 800b376:	6063      	str	r3, [r4, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b37e:	6023      	str	r3, [r4, #0]
 800b380:	9206      	str	r2, [sp, #24]
 800b382:	aa0e      	add	r2, sp, #56	@ 0x38
 800b384:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b388:	aa0d      	add	r2, sp, #52	@ 0x34
 800b38a:	9203      	str	r2, [sp, #12]
 800b38c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b390:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b394:	6863      	ldr	r3, [r4, #4]
 800b396:	4642      	mov	r2, r8
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	4628      	mov	r0, r5
 800b39c:	464b      	mov	r3, r9
 800b39e:	910a      	str	r1, [sp, #40]	@ 0x28
 800b3a0:	f7ff fed4 	bl	800b14c <__cvt>
 800b3a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b3a6:	4680      	mov	r8, r0
 800b3a8:	2947      	cmp	r1, #71	@ 0x47
 800b3aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b3ac:	d128      	bne.n	800b400 <_printf_float+0x178>
 800b3ae:	1cc8      	adds	r0, r1, #3
 800b3b0:	db02      	blt.n	800b3b8 <_printf_float+0x130>
 800b3b2:	6863      	ldr	r3, [r4, #4]
 800b3b4:	4299      	cmp	r1, r3
 800b3b6:	dd40      	ble.n	800b43a <_printf_float+0x1b2>
 800b3b8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b3bc:	fa5f fa8a 	uxtb.w	sl, sl
 800b3c0:	4652      	mov	r2, sl
 800b3c2:	3901      	subs	r1, #1
 800b3c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b3c8:	910d      	str	r1, [sp, #52]	@ 0x34
 800b3ca:	f7ff ff23 	bl	800b214 <__exponent>
 800b3ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3d0:	4681      	mov	r9, r0
 800b3d2:	1813      	adds	r3, r2, r0
 800b3d4:	2a01      	cmp	r2, #1
 800b3d6:	6123      	str	r3, [r4, #16]
 800b3d8:	dc02      	bgt.n	800b3e0 <_printf_float+0x158>
 800b3da:	6822      	ldr	r2, [r4, #0]
 800b3dc:	07d2      	lsls	r2, r2, #31
 800b3de:	d501      	bpl.n	800b3e4 <_printf_float+0x15c>
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	6123      	str	r3, [r4, #16]
 800b3e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d09e      	beq.n	800b32a <_printf_float+0xa2>
 800b3ec:	232d      	movs	r3, #45	@ 0x2d
 800b3ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f2:	e79a      	b.n	800b32a <_printf_float+0xa2>
 800b3f4:	2947      	cmp	r1, #71	@ 0x47
 800b3f6:	d1bf      	bne.n	800b378 <_printf_float+0xf0>
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1bd      	bne.n	800b378 <_printf_float+0xf0>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e7ba      	b.n	800b376 <_printf_float+0xee>
 800b400:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b404:	d9dc      	bls.n	800b3c0 <_printf_float+0x138>
 800b406:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b40a:	d118      	bne.n	800b43e <_printf_float+0x1b6>
 800b40c:	2900      	cmp	r1, #0
 800b40e:	6863      	ldr	r3, [r4, #4]
 800b410:	dd0b      	ble.n	800b42a <_printf_float+0x1a2>
 800b412:	6121      	str	r1, [r4, #16]
 800b414:	b913      	cbnz	r3, 800b41c <_printf_float+0x194>
 800b416:	6822      	ldr	r2, [r4, #0]
 800b418:	07d0      	lsls	r0, r2, #31
 800b41a:	d502      	bpl.n	800b422 <_printf_float+0x19a>
 800b41c:	3301      	adds	r3, #1
 800b41e:	440b      	add	r3, r1
 800b420:	6123      	str	r3, [r4, #16]
 800b422:	f04f 0900 	mov.w	r9, #0
 800b426:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b428:	e7dc      	b.n	800b3e4 <_printf_float+0x15c>
 800b42a:	b913      	cbnz	r3, 800b432 <_printf_float+0x1aa>
 800b42c:	6822      	ldr	r2, [r4, #0]
 800b42e:	07d2      	lsls	r2, r2, #31
 800b430:	d501      	bpl.n	800b436 <_printf_float+0x1ae>
 800b432:	3302      	adds	r3, #2
 800b434:	e7f4      	b.n	800b420 <_printf_float+0x198>
 800b436:	2301      	movs	r3, #1
 800b438:	e7f2      	b.n	800b420 <_printf_float+0x198>
 800b43a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b43e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b440:	4299      	cmp	r1, r3
 800b442:	db05      	blt.n	800b450 <_printf_float+0x1c8>
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	6121      	str	r1, [r4, #16]
 800b448:	07d8      	lsls	r0, r3, #31
 800b44a:	d5ea      	bpl.n	800b422 <_printf_float+0x19a>
 800b44c:	1c4b      	adds	r3, r1, #1
 800b44e:	e7e7      	b.n	800b420 <_printf_float+0x198>
 800b450:	2900      	cmp	r1, #0
 800b452:	bfcc      	ite	gt
 800b454:	2201      	movgt	r2, #1
 800b456:	f1c1 0202 	rsble	r2, r1, #2
 800b45a:	4413      	add	r3, r2
 800b45c:	e7e0      	b.n	800b420 <_printf_float+0x198>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	055a      	lsls	r2, r3, #21
 800b462:	d407      	bmi.n	800b474 <_printf_float+0x1ec>
 800b464:	6923      	ldr	r3, [r4, #16]
 800b466:	4642      	mov	r2, r8
 800b468:	4631      	mov	r1, r6
 800b46a:	4628      	mov	r0, r5
 800b46c:	47b8      	blx	r7
 800b46e:	3001      	adds	r0, #1
 800b470:	d12b      	bne.n	800b4ca <_printf_float+0x242>
 800b472:	e764      	b.n	800b33e <_printf_float+0xb6>
 800b474:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b478:	f240 80dc 	bls.w	800b634 <_printf_float+0x3ac>
 800b47c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b480:	2200      	movs	r2, #0
 800b482:	2300      	movs	r3, #0
 800b484:	f7f5 fb00 	bl	8000a88 <__aeabi_dcmpeq>
 800b488:	2800      	cmp	r0, #0
 800b48a:	d033      	beq.n	800b4f4 <_printf_float+0x26c>
 800b48c:	2301      	movs	r3, #1
 800b48e:	4631      	mov	r1, r6
 800b490:	4628      	mov	r0, r5
 800b492:	4a35      	ldr	r2, [pc, #212]	@ (800b568 <_printf_float+0x2e0>)
 800b494:	47b8      	blx	r7
 800b496:	3001      	adds	r0, #1
 800b498:	f43f af51 	beq.w	800b33e <_printf_float+0xb6>
 800b49c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b4a0:	4543      	cmp	r3, r8
 800b4a2:	db02      	blt.n	800b4aa <_printf_float+0x222>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	07d8      	lsls	r0, r3, #31
 800b4a8:	d50f      	bpl.n	800b4ca <_printf_float+0x242>
 800b4aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	47b8      	blx	r7
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	f43f af42 	beq.w	800b33e <_printf_float+0xb6>
 800b4ba:	f04f 0900 	mov.w	r9, #0
 800b4be:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b4c2:	f104 0a1a 	add.w	sl, r4, #26
 800b4c6:	45c8      	cmp	r8, r9
 800b4c8:	dc09      	bgt.n	800b4de <_printf_float+0x256>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	079b      	lsls	r3, r3, #30
 800b4ce:	f100 8102 	bmi.w	800b6d6 <_printf_float+0x44e>
 800b4d2:	68e0      	ldr	r0, [r4, #12]
 800b4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d6:	4298      	cmp	r0, r3
 800b4d8:	bfb8      	it	lt
 800b4da:	4618      	movlt	r0, r3
 800b4dc:	e731      	b.n	800b342 <_printf_float+0xba>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	4652      	mov	r2, sl
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	47b8      	blx	r7
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	f43f af28 	beq.w	800b33e <_printf_float+0xb6>
 800b4ee:	f109 0901 	add.w	r9, r9, #1
 800b4f2:	e7e8      	b.n	800b4c6 <_printf_float+0x23e>
 800b4f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	dc38      	bgt.n	800b56c <_printf_float+0x2e4>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4628      	mov	r0, r5
 800b500:	4a19      	ldr	r2, [pc, #100]	@ (800b568 <_printf_float+0x2e0>)
 800b502:	47b8      	blx	r7
 800b504:	3001      	adds	r0, #1
 800b506:	f43f af1a 	beq.w	800b33e <_printf_float+0xb6>
 800b50a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b50e:	ea59 0303 	orrs.w	r3, r9, r3
 800b512:	d102      	bne.n	800b51a <_printf_float+0x292>
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	07d9      	lsls	r1, r3, #31
 800b518:	d5d7      	bpl.n	800b4ca <_printf_float+0x242>
 800b51a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b51e:	4631      	mov	r1, r6
 800b520:	4628      	mov	r0, r5
 800b522:	47b8      	blx	r7
 800b524:	3001      	adds	r0, #1
 800b526:	f43f af0a 	beq.w	800b33e <_printf_float+0xb6>
 800b52a:	f04f 0a00 	mov.w	sl, #0
 800b52e:	f104 0b1a 	add.w	fp, r4, #26
 800b532:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b534:	425b      	negs	r3, r3
 800b536:	4553      	cmp	r3, sl
 800b538:	dc01      	bgt.n	800b53e <_printf_float+0x2b6>
 800b53a:	464b      	mov	r3, r9
 800b53c:	e793      	b.n	800b466 <_printf_float+0x1de>
 800b53e:	2301      	movs	r3, #1
 800b540:	465a      	mov	r2, fp
 800b542:	4631      	mov	r1, r6
 800b544:	4628      	mov	r0, r5
 800b546:	47b8      	blx	r7
 800b548:	3001      	adds	r0, #1
 800b54a:	f43f aef8 	beq.w	800b33e <_printf_float+0xb6>
 800b54e:	f10a 0a01 	add.w	sl, sl, #1
 800b552:	e7ee      	b.n	800b532 <_printf_float+0x2aa>
 800b554:	7fefffff 	.word	0x7fefffff
 800b558:	0800e966 	.word	0x0800e966
 800b55c:	0800e96a 	.word	0x0800e96a
 800b560:	0800e96e 	.word	0x0800e96e
 800b564:	0800e972 	.word	0x0800e972
 800b568:	0800e976 	.word	0x0800e976
 800b56c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b56e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b572:	4553      	cmp	r3, sl
 800b574:	bfa8      	it	ge
 800b576:	4653      	movge	r3, sl
 800b578:	2b00      	cmp	r3, #0
 800b57a:	4699      	mov	r9, r3
 800b57c:	dc36      	bgt.n	800b5ec <_printf_float+0x364>
 800b57e:	f04f 0b00 	mov.w	fp, #0
 800b582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b586:	f104 021a 	add.w	r2, r4, #26
 800b58a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b58c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b58e:	eba3 0309 	sub.w	r3, r3, r9
 800b592:	455b      	cmp	r3, fp
 800b594:	dc31      	bgt.n	800b5fa <_printf_float+0x372>
 800b596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b598:	459a      	cmp	sl, r3
 800b59a:	dc3a      	bgt.n	800b612 <_printf_float+0x38a>
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	07da      	lsls	r2, r3, #31
 800b5a0:	d437      	bmi.n	800b612 <_printf_float+0x38a>
 800b5a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5a4:	ebaa 0903 	sub.w	r9, sl, r3
 800b5a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5aa:	ebaa 0303 	sub.w	r3, sl, r3
 800b5ae:	4599      	cmp	r9, r3
 800b5b0:	bfa8      	it	ge
 800b5b2:	4699      	movge	r9, r3
 800b5b4:	f1b9 0f00 	cmp.w	r9, #0
 800b5b8:	dc33      	bgt.n	800b622 <_printf_float+0x39a>
 800b5ba:	f04f 0800 	mov.w	r8, #0
 800b5be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5c2:	f104 0b1a 	add.w	fp, r4, #26
 800b5c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5c8:	ebaa 0303 	sub.w	r3, sl, r3
 800b5cc:	eba3 0309 	sub.w	r3, r3, r9
 800b5d0:	4543      	cmp	r3, r8
 800b5d2:	f77f af7a 	ble.w	800b4ca <_printf_float+0x242>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	465a      	mov	r2, fp
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4628      	mov	r0, r5
 800b5de:	47b8      	blx	r7
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	f43f aeac 	beq.w	800b33e <_printf_float+0xb6>
 800b5e6:	f108 0801 	add.w	r8, r8, #1
 800b5ea:	e7ec      	b.n	800b5c6 <_printf_float+0x33e>
 800b5ec:	4642      	mov	r2, r8
 800b5ee:	4631      	mov	r1, r6
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	47b8      	blx	r7
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	d1c2      	bne.n	800b57e <_printf_float+0x2f6>
 800b5f8:	e6a1      	b.n	800b33e <_printf_float+0xb6>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4628      	mov	r0, r5
 800b600:	920a      	str	r2, [sp, #40]	@ 0x28
 800b602:	47b8      	blx	r7
 800b604:	3001      	adds	r0, #1
 800b606:	f43f ae9a 	beq.w	800b33e <_printf_float+0xb6>
 800b60a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b60c:	f10b 0b01 	add.w	fp, fp, #1
 800b610:	e7bb      	b.n	800b58a <_printf_float+0x302>
 800b612:	4631      	mov	r1, r6
 800b614:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b618:	4628      	mov	r0, r5
 800b61a:	47b8      	blx	r7
 800b61c:	3001      	adds	r0, #1
 800b61e:	d1c0      	bne.n	800b5a2 <_printf_float+0x31a>
 800b620:	e68d      	b.n	800b33e <_printf_float+0xb6>
 800b622:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b624:	464b      	mov	r3, r9
 800b626:	4631      	mov	r1, r6
 800b628:	4628      	mov	r0, r5
 800b62a:	4442      	add	r2, r8
 800b62c:	47b8      	blx	r7
 800b62e:	3001      	adds	r0, #1
 800b630:	d1c3      	bne.n	800b5ba <_printf_float+0x332>
 800b632:	e684      	b.n	800b33e <_printf_float+0xb6>
 800b634:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b638:	f1ba 0f01 	cmp.w	sl, #1
 800b63c:	dc01      	bgt.n	800b642 <_printf_float+0x3ba>
 800b63e:	07db      	lsls	r3, r3, #31
 800b640:	d536      	bpl.n	800b6b0 <_printf_float+0x428>
 800b642:	2301      	movs	r3, #1
 800b644:	4642      	mov	r2, r8
 800b646:	4631      	mov	r1, r6
 800b648:	4628      	mov	r0, r5
 800b64a:	47b8      	blx	r7
 800b64c:	3001      	adds	r0, #1
 800b64e:	f43f ae76 	beq.w	800b33e <_printf_float+0xb6>
 800b652:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b656:	4631      	mov	r1, r6
 800b658:	4628      	mov	r0, r5
 800b65a:	47b8      	blx	r7
 800b65c:	3001      	adds	r0, #1
 800b65e:	f43f ae6e 	beq.w	800b33e <_printf_float+0xb6>
 800b662:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b666:	2200      	movs	r2, #0
 800b668:	2300      	movs	r3, #0
 800b66a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b66e:	f7f5 fa0b 	bl	8000a88 <__aeabi_dcmpeq>
 800b672:	b9c0      	cbnz	r0, 800b6a6 <_printf_float+0x41e>
 800b674:	4653      	mov	r3, sl
 800b676:	f108 0201 	add.w	r2, r8, #1
 800b67a:	4631      	mov	r1, r6
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b8      	blx	r7
 800b680:	3001      	adds	r0, #1
 800b682:	d10c      	bne.n	800b69e <_printf_float+0x416>
 800b684:	e65b      	b.n	800b33e <_printf_float+0xb6>
 800b686:	2301      	movs	r3, #1
 800b688:	465a      	mov	r2, fp
 800b68a:	4631      	mov	r1, r6
 800b68c:	4628      	mov	r0, r5
 800b68e:	47b8      	blx	r7
 800b690:	3001      	adds	r0, #1
 800b692:	f43f ae54 	beq.w	800b33e <_printf_float+0xb6>
 800b696:	f108 0801 	add.w	r8, r8, #1
 800b69a:	45d0      	cmp	r8, sl
 800b69c:	dbf3      	blt.n	800b686 <_printf_float+0x3fe>
 800b69e:	464b      	mov	r3, r9
 800b6a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b6a4:	e6e0      	b.n	800b468 <_printf_float+0x1e0>
 800b6a6:	f04f 0800 	mov.w	r8, #0
 800b6aa:	f104 0b1a 	add.w	fp, r4, #26
 800b6ae:	e7f4      	b.n	800b69a <_printf_float+0x412>
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	4642      	mov	r2, r8
 800b6b4:	e7e1      	b.n	800b67a <_printf_float+0x3f2>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	464a      	mov	r2, r9
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b8      	blx	r7
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	f43f ae3c 	beq.w	800b33e <_printf_float+0xb6>
 800b6c6:	f108 0801 	add.w	r8, r8, #1
 800b6ca:	68e3      	ldr	r3, [r4, #12]
 800b6cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b6ce:	1a5b      	subs	r3, r3, r1
 800b6d0:	4543      	cmp	r3, r8
 800b6d2:	dcf0      	bgt.n	800b6b6 <_printf_float+0x42e>
 800b6d4:	e6fd      	b.n	800b4d2 <_printf_float+0x24a>
 800b6d6:	f04f 0800 	mov.w	r8, #0
 800b6da:	f104 0919 	add.w	r9, r4, #25
 800b6de:	e7f4      	b.n	800b6ca <_printf_float+0x442>

0800b6e0 <_printf_common>:
 800b6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e4:	4616      	mov	r6, r2
 800b6e6:	4698      	mov	r8, r3
 800b6e8:	688a      	ldr	r2, [r1, #8]
 800b6ea:	690b      	ldr	r3, [r1, #16]
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	bfb8      	it	lt
 800b6f2:	4613      	movlt	r3, r2
 800b6f4:	6033      	str	r3, [r6, #0]
 800b6f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b700:	b10a      	cbz	r2, 800b706 <_printf_common+0x26>
 800b702:	3301      	adds	r3, #1
 800b704:	6033      	str	r3, [r6, #0]
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	0699      	lsls	r1, r3, #26
 800b70a:	bf42      	ittt	mi
 800b70c:	6833      	ldrmi	r3, [r6, #0]
 800b70e:	3302      	addmi	r3, #2
 800b710:	6033      	strmi	r3, [r6, #0]
 800b712:	6825      	ldr	r5, [r4, #0]
 800b714:	f015 0506 	ands.w	r5, r5, #6
 800b718:	d106      	bne.n	800b728 <_printf_common+0x48>
 800b71a:	f104 0a19 	add.w	sl, r4, #25
 800b71e:	68e3      	ldr	r3, [r4, #12]
 800b720:	6832      	ldr	r2, [r6, #0]
 800b722:	1a9b      	subs	r3, r3, r2
 800b724:	42ab      	cmp	r3, r5
 800b726:	dc2b      	bgt.n	800b780 <_printf_common+0xa0>
 800b728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b72c:	6822      	ldr	r2, [r4, #0]
 800b72e:	3b00      	subs	r3, #0
 800b730:	bf18      	it	ne
 800b732:	2301      	movne	r3, #1
 800b734:	0692      	lsls	r2, r2, #26
 800b736:	d430      	bmi.n	800b79a <_printf_common+0xba>
 800b738:	4641      	mov	r1, r8
 800b73a:	4638      	mov	r0, r7
 800b73c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b740:	47c8      	blx	r9
 800b742:	3001      	adds	r0, #1
 800b744:	d023      	beq.n	800b78e <_printf_common+0xae>
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	6922      	ldr	r2, [r4, #16]
 800b74a:	f003 0306 	and.w	r3, r3, #6
 800b74e:	2b04      	cmp	r3, #4
 800b750:	bf14      	ite	ne
 800b752:	2500      	movne	r5, #0
 800b754:	6833      	ldreq	r3, [r6, #0]
 800b756:	f04f 0600 	mov.w	r6, #0
 800b75a:	bf08      	it	eq
 800b75c:	68e5      	ldreq	r5, [r4, #12]
 800b75e:	f104 041a 	add.w	r4, r4, #26
 800b762:	bf08      	it	eq
 800b764:	1aed      	subeq	r5, r5, r3
 800b766:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b76a:	bf08      	it	eq
 800b76c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b770:	4293      	cmp	r3, r2
 800b772:	bfc4      	itt	gt
 800b774:	1a9b      	subgt	r3, r3, r2
 800b776:	18ed      	addgt	r5, r5, r3
 800b778:	42b5      	cmp	r5, r6
 800b77a:	d11a      	bne.n	800b7b2 <_printf_common+0xd2>
 800b77c:	2000      	movs	r0, #0
 800b77e:	e008      	b.n	800b792 <_printf_common+0xb2>
 800b780:	2301      	movs	r3, #1
 800b782:	4652      	mov	r2, sl
 800b784:	4641      	mov	r1, r8
 800b786:	4638      	mov	r0, r7
 800b788:	47c8      	blx	r9
 800b78a:	3001      	adds	r0, #1
 800b78c:	d103      	bne.n	800b796 <_printf_common+0xb6>
 800b78e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b796:	3501      	adds	r5, #1
 800b798:	e7c1      	b.n	800b71e <_printf_common+0x3e>
 800b79a:	2030      	movs	r0, #48	@ 0x30
 800b79c:	18e1      	adds	r1, r4, r3
 800b79e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7a8:	4422      	add	r2, r4
 800b7aa:	3302      	adds	r3, #2
 800b7ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7b0:	e7c2      	b.n	800b738 <_printf_common+0x58>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	4641      	mov	r1, r8
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	47c8      	blx	r9
 800b7bc:	3001      	adds	r0, #1
 800b7be:	d0e6      	beq.n	800b78e <_printf_common+0xae>
 800b7c0:	3601      	adds	r6, #1
 800b7c2:	e7d9      	b.n	800b778 <_printf_common+0x98>

0800b7c4 <_printf_i>:
 800b7c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c8:	7e0f      	ldrb	r7, [r1, #24]
 800b7ca:	4691      	mov	r9, r2
 800b7cc:	2f78      	cmp	r7, #120	@ 0x78
 800b7ce:	4680      	mov	r8, r0
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	469a      	mov	sl, r3
 800b7d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7da:	d807      	bhi.n	800b7ec <_printf_i+0x28>
 800b7dc:	2f62      	cmp	r7, #98	@ 0x62
 800b7de:	d80a      	bhi.n	800b7f6 <_printf_i+0x32>
 800b7e0:	2f00      	cmp	r7, #0
 800b7e2:	f000 80d3 	beq.w	800b98c <_printf_i+0x1c8>
 800b7e6:	2f58      	cmp	r7, #88	@ 0x58
 800b7e8:	f000 80ba 	beq.w	800b960 <_printf_i+0x19c>
 800b7ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7f4:	e03a      	b.n	800b86c <_printf_i+0xa8>
 800b7f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7fa:	2b15      	cmp	r3, #21
 800b7fc:	d8f6      	bhi.n	800b7ec <_printf_i+0x28>
 800b7fe:	a101      	add	r1, pc, #4	@ (adr r1, 800b804 <_printf_i+0x40>)
 800b800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b804:	0800b85d 	.word	0x0800b85d
 800b808:	0800b871 	.word	0x0800b871
 800b80c:	0800b7ed 	.word	0x0800b7ed
 800b810:	0800b7ed 	.word	0x0800b7ed
 800b814:	0800b7ed 	.word	0x0800b7ed
 800b818:	0800b7ed 	.word	0x0800b7ed
 800b81c:	0800b871 	.word	0x0800b871
 800b820:	0800b7ed 	.word	0x0800b7ed
 800b824:	0800b7ed 	.word	0x0800b7ed
 800b828:	0800b7ed 	.word	0x0800b7ed
 800b82c:	0800b7ed 	.word	0x0800b7ed
 800b830:	0800b973 	.word	0x0800b973
 800b834:	0800b89b 	.word	0x0800b89b
 800b838:	0800b92d 	.word	0x0800b92d
 800b83c:	0800b7ed 	.word	0x0800b7ed
 800b840:	0800b7ed 	.word	0x0800b7ed
 800b844:	0800b995 	.word	0x0800b995
 800b848:	0800b7ed 	.word	0x0800b7ed
 800b84c:	0800b89b 	.word	0x0800b89b
 800b850:	0800b7ed 	.word	0x0800b7ed
 800b854:	0800b7ed 	.word	0x0800b7ed
 800b858:	0800b935 	.word	0x0800b935
 800b85c:	6833      	ldr	r3, [r6, #0]
 800b85e:	1d1a      	adds	r2, r3, #4
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6032      	str	r2, [r6, #0]
 800b864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b86c:	2301      	movs	r3, #1
 800b86e:	e09e      	b.n	800b9ae <_printf_i+0x1ea>
 800b870:	6833      	ldr	r3, [r6, #0]
 800b872:	6820      	ldr	r0, [r4, #0]
 800b874:	1d19      	adds	r1, r3, #4
 800b876:	6031      	str	r1, [r6, #0]
 800b878:	0606      	lsls	r6, r0, #24
 800b87a:	d501      	bpl.n	800b880 <_printf_i+0xbc>
 800b87c:	681d      	ldr	r5, [r3, #0]
 800b87e:	e003      	b.n	800b888 <_printf_i+0xc4>
 800b880:	0645      	lsls	r5, r0, #25
 800b882:	d5fb      	bpl.n	800b87c <_printf_i+0xb8>
 800b884:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b888:	2d00      	cmp	r5, #0
 800b88a:	da03      	bge.n	800b894 <_printf_i+0xd0>
 800b88c:	232d      	movs	r3, #45	@ 0x2d
 800b88e:	426d      	negs	r5, r5
 800b890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b894:	230a      	movs	r3, #10
 800b896:	4859      	ldr	r0, [pc, #356]	@ (800b9fc <_printf_i+0x238>)
 800b898:	e011      	b.n	800b8be <_printf_i+0xfa>
 800b89a:	6821      	ldr	r1, [r4, #0]
 800b89c:	6833      	ldr	r3, [r6, #0]
 800b89e:	0608      	lsls	r0, r1, #24
 800b8a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8a4:	d402      	bmi.n	800b8ac <_printf_i+0xe8>
 800b8a6:	0649      	lsls	r1, r1, #25
 800b8a8:	bf48      	it	mi
 800b8aa:	b2ad      	uxthmi	r5, r5
 800b8ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8ae:	6033      	str	r3, [r6, #0]
 800b8b0:	bf14      	ite	ne
 800b8b2:	230a      	movne	r3, #10
 800b8b4:	2308      	moveq	r3, #8
 800b8b6:	4851      	ldr	r0, [pc, #324]	@ (800b9fc <_printf_i+0x238>)
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8be:	6866      	ldr	r6, [r4, #4]
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	bfa8      	it	ge
 800b8c4:	6821      	ldrge	r1, [r4, #0]
 800b8c6:	60a6      	str	r6, [r4, #8]
 800b8c8:	bfa4      	itt	ge
 800b8ca:	f021 0104 	bicge.w	r1, r1, #4
 800b8ce:	6021      	strge	r1, [r4, #0]
 800b8d0:	b90d      	cbnz	r5, 800b8d6 <_printf_i+0x112>
 800b8d2:	2e00      	cmp	r6, #0
 800b8d4:	d04b      	beq.n	800b96e <_printf_i+0x1aa>
 800b8d6:	4616      	mov	r6, r2
 800b8d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8dc:	fb03 5711 	mls	r7, r3, r1, r5
 800b8e0:	5dc7      	ldrb	r7, [r0, r7]
 800b8e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8e6:	462f      	mov	r7, r5
 800b8e8:	42bb      	cmp	r3, r7
 800b8ea:	460d      	mov	r5, r1
 800b8ec:	d9f4      	bls.n	800b8d8 <_printf_i+0x114>
 800b8ee:	2b08      	cmp	r3, #8
 800b8f0:	d10b      	bne.n	800b90a <_printf_i+0x146>
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	07df      	lsls	r7, r3, #31
 800b8f6:	d508      	bpl.n	800b90a <_printf_i+0x146>
 800b8f8:	6923      	ldr	r3, [r4, #16]
 800b8fa:	6861      	ldr	r1, [r4, #4]
 800b8fc:	4299      	cmp	r1, r3
 800b8fe:	bfde      	ittt	le
 800b900:	2330      	movle	r3, #48	@ 0x30
 800b902:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b906:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b90a:	1b92      	subs	r2, r2, r6
 800b90c:	6122      	str	r2, [r4, #16]
 800b90e:	464b      	mov	r3, r9
 800b910:	4621      	mov	r1, r4
 800b912:	4640      	mov	r0, r8
 800b914:	f8cd a000 	str.w	sl, [sp]
 800b918:	aa03      	add	r2, sp, #12
 800b91a:	f7ff fee1 	bl	800b6e0 <_printf_common>
 800b91e:	3001      	adds	r0, #1
 800b920:	d14a      	bne.n	800b9b8 <_printf_i+0x1f4>
 800b922:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b926:	b004      	add	sp, #16
 800b928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	f043 0320 	orr.w	r3, r3, #32
 800b932:	6023      	str	r3, [r4, #0]
 800b934:	2778      	movs	r7, #120	@ 0x78
 800b936:	4832      	ldr	r0, [pc, #200]	@ (800ba00 <_printf_i+0x23c>)
 800b938:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	6831      	ldr	r1, [r6, #0]
 800b940:	061f      	lsls	r7, r3, #24
 800b942:	f851 5b04 	ldr.w	r5, [r1], #4
 800b946:	d402      	bmi.n	800b94e <_printf_i+0x18a>
 800b948:	065f      	lsls	r7, r3, #25
 800b94a:	bf48      	it	mi
 800b94c:	b2ad      	uxthmi	r5, r5
 800b94e:	6031      	str	r1, [r6, #0]
 800b950:	07d9      	lsls	r1, r3, #31
 800b952:	bf44      	itt	mi
 800b954:	f043 0320 	orrmi.w	r3, r3, #32
 800b958:	6023      	strmi	r3, [r4, #0]
 800b95a:	b11d      	cbz	r5, 800b964 <_printf_i+0x1a0>
 800b95c:	2310      	movs	r3, #16
 800b95e:	e7ab      	b.n	800b8b8 <_printf_i+0xf4>
 800b960:	4826      	ldr	r0, [pc, #152]	@ (800b9fc <_printf_i+0x238>)
 800b962:	e7e9      	b.n	800b938 <_printf_i+0x174>
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	f023 0320 	bic.w	r3, r3, #32
 800b96a:	6023      	str	r3, [r4, #0]
 800b96c:	e7f6      	b.n	800b95c <_printf_i+0x198>
 800b96e:	4616      	mov	r6, r2
 800b970:	e7bd      	b.n	800b8ee <_printf_i+0x12a>
 800b972:	6833      	ldr	r3, [r6, #0]
 800b974:	6825      	ldr	r5, [r4, #0]
 800b976:	1d18      	adds	r0, r3, #4
 800b978:	6961      	ldr	r1, [r4, #20]
 800b97a:	6030      	str	r0, [r6, #0]
 800b97c:	062e      	lsls	r6, r5, #24
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	d501      	bpl.n	800b986 <_printf_i+0x1c2>
 800b982:	6019      	str	r1, [r3, #0]
 800b984:	e002      	b.n	800b98c <_printf_i+0x1c8>
 800b986:	0668      	lsls	r0, r5, #25
 800b988:	d5fb      	bpl.n	800b982 <_printf_i+0x1be>
 800b98a:	8019      	strh	r1, [r3, #0]
 800b98c:	2300      	movs	r3, #0
 800b98e:	4616      	mov	r6, r2
 800b990:	6123      	str	r3, [r4, #16]
 800b992:	e7bc      	b.n	800b90e <_printf_i+0x14a>
 800b994:	6833      	ldr	r3, [r6, #0]
 800b996:	2100      	movs	r1, #0
 800b998:	1d1a      	adds	r2, r3, #4
 800b99a:	6032      	str	r2, [r6, #0]
 800b99c:	681e      	ldr	r6, [r3, #0]
 800b99e:	6862      	ldr	r2, [r4, #4]
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f000 f9d4 	bl	800bd4e <memchr>
 800b9a6:	b108      	cbz	r0, 800b9ac <_printf_i+0x1e8>
 800b9a8:	1b80      	subs	r0, r0, r6
 800b9aa:	6060      	str	r0, [r4, #4]
 800b9ac:	6863      	ldr	r3, [r4, #4]
 800b9ae:	6123      	str	r3, [r4, #16]
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9b6:	e7aa      	b.n	800b90e <_printf_i+0x14a>
 800b9b8:	4632      	mov	r2, r6
 800b9ba:	4649      	mov	r1, r9
 800b9bc:	4640      	mov	r0, r8
 800b9be:	6923      	ldr	r3, [r4, #16]
 800b9c0:	47d0      	blx	sl
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	d0ad      	beq.n	800b922 <_printf_i+0x15e>
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	079b      	lsls	r3, r3, #30
 800b9ca:	d413      	bmi.n	800b9f4 <_printf_i+0x230>
 800b9cc:	68e0      	ldr	r0, [r4, #12]
 800b9ce:	9b03      	ldr	r3, [sp, #12]
 800b9d0:	4298      	cmp	r0, r3
 800b9d2:	bfb8      	it	lt
 800b9d4:	4618      	movlt	r0, r3
 800b9d6:	e7a6      	b.n	800b926 <_printf_i+0x162>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	4632      	mov	r2, r6
 800b9dc:	4649      	mov	r1, r9
 800b9de:	4640      	mov	r0, r8
 800b9e0:	47d0      	blx	sl
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	d09d      	beq.n	800b922 <_printf_i+0x15e>
 800b9e6:	3501      	adds	r5, #1
 800b9e8:	68e3      	ldr	r3, [r4, #12]
 800b9ea:	9903      	ldr	r1, [sp, #12]
 800b9ec:	1a5b      	subs	r3, r3, r1
 800b9ee:	42ab      	cmp	r3, r5
 800b9f0:	dcf2      	bgt.n	800b9d8 <_printf_i+0x214>
 800b9f2:	e7eb      	b.n	800b9cc <_printf_i+0x208>
 800b9f4:	2500      	movs	r5, #0
 800b9f6:	f104 0619 	add.w	r6, r4, #25
 800b9fa:	e7f5      	b.n	800b9e8 <_printf_i+0x224>
 800b9fc:	0800e978 	.word	0x0800e978
 800ba00:	0800e989 	.word	0x0800e989

0800ba04 <sniprintf>:
 800ba04:	b40c      	push	{r2, r3}
 800ba06:	b530      	push	{r4, r5, lr}
 800ba08:	4b17      	ldr	r3, [pc, #92]	@ (800ba68 <sniprintf+0x64>)
 800ba0a:	1e0c      	subs	r4, r1, #0
 800ba0c:	681d      	ldr	r5, [r3, #0]
 800ba0e:	b09d      	sub	sp, #116	@ 0x74
 800ba10:	da08      	bge.n	800ba24 <sniprintf+0x20>
 800ba12:	238b      	movs	r3, #139	@ 0x8b
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba18:	602b      	str	r3, [r5, #0]
 800ba1a:	b01d      	add	sp, #116	@ 0x74
 800ba1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba20:	b002      	add	sp, #8
 800ba22:	4770      	bx	lr
 800ba24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ba28:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ba2c:	bf0c      	ite	eq
 800ba2e:	4623      	moveq	r3, r4
 800ba30:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800ba34:	9304      	str	r3, [sp, #16]
 800ba36:	9307      	str	r3, [sp, #28]
 800ba38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ba3c:	9002      	str	r0, [sp, #8]
 800ba3e:	9006      	str	r0, [sp, #24]
 800ba40:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ba44:	4628      	mov	r0, r5
 800ba46:	ab21      	add	r3, sp, #132	@ 0x84
 800ba48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ba4a:	a902      	add	r1, sp, #8
 800ba4c:	9301      	str	r3, [sp, #4]
 800ba4e:	f001 f88f 	bl	800cb70 <_svfiprintf_r>
 800ba52:	1c43      	adds	r3, r0, #1
 800ba54:	bfbc      	itt	lt
 800ba56:	238b      	movlt	r3, #139	@ 0x8b
 800ba58:	602b      	strlt	r3, [r5, #0]
 800ba5a:	2c00      	cmp	r4, #0
 800ba5c:	d0dd      	beq.n	800ba1a <sniprintf+0x16>
 800ba5e:	2200      	movs	r2, #0
 800ba60:	9b02      	ldr	r3, [sp, #8]
 800ba62:	701a      	strb	r2, [r3, #0]
 800ba64:	e7d9      	b.n	800ba1a <sniprintf+0x16>
 800ba66:	bf00      	nop
 800ba68:	20000054 	.word	0x20000054

0800ba6c <siprintf>:
 800ba6c:	b40e      	push	{r1, r2, r3}
 800ba6e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba72:	b500      	push	{lr}
 800ba74:	b09c      	sub	sp, #112	@ 0x70
 800ba76:	ab1d      	add	r3, sp, #116	@ 0x74
 800ba78:	9002      	str	r0, [sp, #8]
 800ba7a:	9006      	str	r0, [sp, #24]
 800ba7c:	9107      	str	r1, [sp, #28]
 800ba7e:	9104      	str	r1, [sp, #16]
 800ba80:	4808      	ldr	r0, [pc, #32]	@ (800baa4 <siprintf+0x38>)
 800ba82:	4909      	ldr	r1, [pc, #36]	@ (800baa8 <siprintf+0x3c>)
 800ba84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba88:	9105      	str	r1, [sp, #20]
 800ba8a:	6800      	ldr	r0, [r0, #0]
 800ba8c:	a902      	add	r1, sp, #8
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	f001 f86e 	bl	800cb70 <_svfiprintf_r>
 800ba94:	2200      	movs	r2, #0
 800ba96:	9b02      	ldr	r3, [sp, #8]
 800ba98:	701a      	strb	r2, [r3, #0]
 800ba9a:	b01c      	add	sp, #112	@ 0x70
 800ba9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800baa0:	b003      	add	sp, #12
 800baa2:	4770      	bx	lr
 800baa4:	20000054 	.word	0x20000054
 800baa8:	ffff0208 	.word	0xffff0208

0800baac <std>:
 800baac:	2300      	movs	r3, #0
 800baae:	b510      	push	{r4, lr}
 800bab0:	4604      	mov	r4, r0
 800bab2:	e9c0 3300 	strd	r3, r3, [r0]
 800bab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800baba:	6083      	str	r3, [r0, #8]
 800babc:	8181      	strh	r1, [r0, #12]
 800babe:	6643      	str	r3, [r0, #100]	@ 0x64
 800bac0:	81c2      	strh	r2, [r0, #14]
 800bac2:	6183      	str	r3, [r0, #24]
 800bac4:	4619      	mov	r1, r3
 800bac6:	2208      	movs	r2, #8
 800bac8:	305c      	adds	r0, #92	@ 0x5c
 800baca:	f000 f8b1 	bl	800bc30 <memset>
 800bace:	4b0d      	ldr	r3, [pc, #52]	@ (800bb04 <std+0x58>)
 800bad0:	6224      	str	r4, [r4, #32]
 800bad2:	6263      	str	r3, [r4, #36]	@ 0x24
 800bad4:	4b0c      	ldr	r3, [pc, #48]	@ (800bb08 <std+0x5c>)
 800bad6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bad8:	4b0c      	ldr	r3, [pc, #48]	@ (800bb0c <std+0x60>)
 800bada:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800badc:	4b0c      	ldr	r3, [pc, #48]	@ (800bb10 <std+0x64>)
 800bade:	6323      	str	r3, [r4, #48]	@ 0x30
 800bae0:	4b0c      	ldr	r3, [pc, #48]	@ (800bb14 <std+0x68>)
 800bae2:	429c      	cmp	r4, r3
 800bae4:	d006      	beq.n	800baf4 <std+0x48>
 800bae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800baea:	4294      	cmp	r4, r2
 800baec:	d002      	beq.n	800baf4 <std+0x48>
 800baee:	33d0      	adds	r3, #208	@ 0xd0
 800baf0:	429c      	cmp	r4, r3
 800baf2:	d105      	bne.n	800bb00 <std+0x54>
 800baf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800baf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bafc:	f000 b924 	b.w	800bd48 <__retarget_lock_init_recursive>
 800bb00:	bd10      	pop	{r4, pc}
 800bb02:	bf00      	nop
 800bb04:	0800d725 	.word	0x0800d725
 800bb08:	0800d747 	.word	0x0800d747
 800bb0c:	0800d77f 	.word	0x0800d77f
 800bb10:	0800d7a3 	.word	0x0800d7a3
 800bb14:	20001534 	.word	0x20001534

0800bb18 <stdio_exit_handler>:
 800bb18:	4a02      	ldr	r2, [pc, #8]	@ (800bb24 <stdio_exit_handler+0xc>)
 800bb1a:	4903      	ldr	r1, [pc, #12]	@ (800bb28 <stdio_exit_handler+0x10>)
 800bb1c:	4803      	ldr	r0, [pc, #12]	@ (800bb2c <stdio_exit_handler+0x14>)
 800bb1e:	f000 b869 	b.w	800bbf4 <_fwalk_sglue>
 800bb22:	bf00      	nop
 800bb24:	20000048 	.word	0x20000048
 800bb28:	0800cfbd 	.word	0x0800cfbd
 800bb2c:	20000058 	.word	0x20000058

0800bb30 <cleanup_stdio>:
 800bb30:	6841      	ldr	r1, [r0, #4]
 800bb32:	4b0c      	ldr	r3, [pc, #48]	@ (800bb64 <cleanup_stdio+0x34>)
 800bb34:	b510      	push	{r4, lr}
 800bb36:	4299      	cmp	r1, r3
 800bb38:	4604      	mov	r4, r0
 800bb3a:	d001      	beq.n	800bb40 <cleanup_stdio+0x10>
 800bb3c:	f001 fa3e 	bl	800cfbc <_fflush_r>
 800bb40:	68a1      	ldr	r1, [r4, #8]
 800bb42:	4b09      	ldr	r3, [pc, #36]	@ (800bb68 <cleanup_stdio+0x38>)
 800bb44:	4299      	cmp	r1, r3
 800bb46:	d002      	beq.n	800bb4e <cleanup_stdio+0x1e>
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f001 fa37 	bl	800cfbc <_fflush_r>
 800bb4e:	68e1      	ldr	r1, [r4, #12]
 800bb50:	4b06      	ldr	r3, [pc, #24]	@ (800bb6c <cleanup_stdio+0x3c>)
 800bb52:	4299      	cmp	r1, r3
 800bb54:	d004      	beq.n	800bb60 <cleanup_stdio+0x30>
 800bb56:	4620      	mov	r0, r4
 800bb58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb5c:	f001 ba2e 	b.w	800cfbc <_fflush_r>
 800bb60:	bd10      	pop	{r4, pc}
 800bb62:	bf00      	nop
 800bb64:	20001534 	.word	0x20001534
 800bb68:	2000159c 	.word	0x2000159c
 800bb6c:	20001604 	.word	0x20001604

0800bb70 <global_stdio_init.part.0>:
 800bb70:	b510      	push	{r4, lr}
 800bb72:	4b0b      	ldr	r3, [pc, #44]	@ (800bba0 <global_stdio_init.part.0+0x30>)
 800bb74:	4c0b      	ldr	r4, [pc, #44]	@ (800bba4 <global_stdio_init.part.0+0x34>)
 800bb76:	4a0c      	ldr	r2, [pc, #48]	@ (800bba8 <global_stdio_init.part.0+0x38>)
 800bb78:	4620      	mov	r0, r4
 800bb7a:	601a      	str	r2, [r3, #0]
 800bb7c:	2104      	movs	r1, #4
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f7ff ff94 	bl	800baac <std>
 800bb84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bb88:	2201      	movs	r2, #1
 800bb8a:	2109      	movs	r1, #9
 800bb8c:	f7ff ff8e 	bl	800baac <std>
 800bb90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb94:	2202      	movs	r2, #2
 800bb96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb9a:	2112      	movs	r1, #18
 800bb9c:	f7ff bf86 	b.w	800baac <std>
 800bba0:	2000166c 	.word	0x2000166c
 800bba4:	20001534 	.word	0x20001534
 800bba8:	0800bb19 	.word	0x0800bb19

0800bbac <__sfp_lock_acquire>:
 800bbac:	4801      	ldr	r0, [pc, #4]	@ (800bbb4 <__sfp_lock_acquire+0x8>)
 800bbae:	f000 b8cc 	b.w	800bd4a <__retarget_lock_acquire_recursive>
 800bbb2:	bf00      	nop
 800bbb4:	20001675 	.word	0x20001675

0800bbb8 <__sfp_lock_release>:
 800bbb8:	4801      	ldr	r0, [pc, #4]	@ (800bbc0 <__sfp_lock_release+0x8>)
 800bbba:	f000 b8c7 	b.w	800bd4c <__retarget_lock_release_recursive>
 800bbbe:	bf00      	nop
 800bbc0:	20001675 	.word	0x20001675

0800bbc4 <__sinit>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	f7ff fff0 	bl	800bbac <__sfp_lock_acquire>
 800bbcc:	6a23      	ldr	r3, [r4, #32]
 800bbce:	b11b      	cbz	r3, 800bbd8 <__sinit+0x14>
 800bbd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbd4:	f7ff bff0 	b.w	800bbb8 <__sfp_lock_release>
 800bbd8:	4b04      	ldr	r3, [pc, #16]	@ (800bbec <__sinit+0x28>)
 800bbda:	6223      	str	r3, [r4, #32]
 800bbdc:	4b04      	ldr	r3, [pc, #16]	@ (800bbf0 <__sinit+0x2c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1f5      	bne.n	800bbd0 <__sinit+0xc>
 800bbe4:	f7ff ffc4 	bl	800bb70 <global_stdio_init.part.0>
 800bbe8:	e7f2      	b.n	800bbd0 <__sinit+0xc>
 800bbea:	bf00      	nop
 800bbec:	0800bb31 	.word	0x0800bb31
 800bbf0:	2000166c 	.word	0x2000166c

0800bbf4 <_fwalk_sglue>:
 800bbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf8:	4607      	mov	r7, r0
 800bbfa:	4688      	mov	r8, r1
 800bbfc:	4614      	mov	r4, r2
 800bbfe:	2600      	movs	r6, #0
 800bc00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc04:	f1b9 0901 	subs.w	r9, r9, #1
 800bc08:	d505      	bpl.n	800bc16 <_fwalk_sglue+0x22>
 800bc0a:	6824      	ldr	r4, [r4, #0]
 800bc0c:	2c00      	cmp	r4, #0
 800bc0e:	d1f7      	bne.n	800bc00 <_fwalk_sglue+0xc>
 800bc10:	4630      	mov	r0, r6
 800bc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc16:	89ab      	ldrh	r3, [r5, #12]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d907      	bls.n	800bc2c <_fwalk_sglue+0x38>
 800bc1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc20:	3301      	adds	r3, #1
 800bc22:	d003      	beq.n	800bc2c <_fwalk_sglue+0x38>
 800bc24:	4629      	mov	r1, r5
 800bc26:	4638      	mov	r0, r7
 800bc28:	47c0      	blx	r8
 800bc2a:	4306      	orrs	r6, r0
 800bc2c:	3568      	adds	r5, #104	@ 0x68
 800bc2e:	e7e9      	b.n	800bc04 <_fwalk_sglue+0x10>

0800bc30 <memset>:
 800bc30:	4603      	mov	r3, r0
 800bc32:	4402      	add	r2, r0
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d100      	bne.n	800bc3a <memset+0xa>
 800bc38:	4770      	bx	lr
 800bc3a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc3e:	e7f9      	b.n	800bc34 <memset+0x4>

0800bc40 <_localeconv_r>:
 800bc40:	4800      	ldr	r0, [pc, #0]	@ (800bc44 <_localeconv_r+0x4>)
 800bc42:	4770      	bx	lr
 800bc44:	20000194 	.word	0x20000194

0800bc48 <_reclaim_reent>:
 800bc48:	4b29      	ldr	r3, [pc, #164]	@ (800bcf0 <_reclaim_reent+0xa8>)
 800bc4a:	b570      	push	{r4, r5, r6, lr}
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4604      	mov	r4, r0
 800bc50:	4283      	cmp	r3, r0
 800bc52:	d04b      	beq.n	800bcec <_reclaim_reent+0xa4>
 800bc54:	69c3      	ldr	r3, [r0, #28]
 800bc56:	b1ab      	cbz	r3, 800bc84 <_reclaim_reent+0x3c>
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	b16b      	cbz	r3, 800bc78 <_reclaim_reent+0x30>
 800bc5c:	2500      	movs	r5, #0
 800bc5e:	69e3      	ldr	r3, [r4, #28]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	5959      	ldr	r1, [r3, r5]
 800bc64:	2900      	cmp	r1, #0
 800bc66:	d13b      	bne.n	800bce0 <_reclaim_reent+0x98>
 800bc68:	3504      	adds	r5, #4
 800bc6a:	2d80      	cmp	r5, #128	@ 0x80
 800bc6c:	d1f7      	bne.n	800bc5e <_reclaim_reent+0x16>
 800bc6e:	69e3      	ldr	r3, [r4, #28]
 800bc70:	4620      	mov	r0, r4
 800bc72:	68d9      	ldr	r1, [r3, #12]
 800bc74:	f000 fed8 	bl	800ca28 <_free_r>
 800bc78:	69e3      	ldr	r3, [r4, #28]
 800bc7a:	6819      	ldr	r1, [r3, #0]
 800bc7c:	b111      	cbz	r1, 800bc84 <_reclaim_reent+0x3c>
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f000 fed2 	bl	800ca28 <_free_r>
 800bc84:	6961      	ldr	r1, [r4, #20]
 800bc86:	b111      	cbz	r1, 800bc8e <_reclaim_reent+0x46>
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f000 fecd 	bl	800ca28 <_free_r>
 800bc8e:	69e1      	ldr	r1, [r4, #28]
 800bc90:	b111      	cbz	r1, 800bc98 <_reclaim_reent+0x50>
 800bc92:	4620      	mov	r0, r4
 800bc94:	f000 fec8 	bl	800ca28 <_free_r>
 800bc98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bc9a:	b111      	cbz	r1, 800bca2 <_reclaim_reent+0x5a>
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f000 fec3 	bl	800ca28 <_free_r>
 800bca2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bca4:	b111      	cbz	r1, 800bcac <_reclaim_reent+0x64>
 800bca6:	4620      	mov	r0, r4
 800bca8:	f000 febe 	bl	800ca28 <_free_r>
 800bcac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bcae:	b111      	cbz	r1, 800bcb6 <_reclaim_reent+0x6e>
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f000 feb9 	bl	800ca28 <_free_r>
 800bcb6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bcb8:	b111      	cbz	r1, 800bcc0 <_reclaim_reent+0x78>
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f000 feb4 	bl	800ca28 <_free_r>
 800bcc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bcc2:	b111      	cbz	r1, 800bcca <_reclaim_reent+0x82>
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f000 feaf 	bl	800ca28 <_free_r>
 800bcca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bccc:	b111      	cbz	r1, 800bcd4 <_reclaim_reent+0x8c>
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f000 feaa 	bl	800ca28 <_free_r>
 800bcd4:	6a23      	ldr	r3, [r4, #32]
 800bcd6:	b14b      	cbz	r3, 800bcec <_reclaim_reent+0xa4>
 800bcd8:	4620      	mov	r0, r4
 800bcda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bcde:	4718      	bx	r3
 800bce0:	680e      	ldr	r6, [r1, #0]
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 fea0 	bl	800ca28 <_free_r>
 800bce8:	4631      	mov	r1, r6
 800bcea:	e7bb      	b.n	800bc64 <_reclaim_reent+0x1c>
 800bcec:	bd70      	pop	{r4, r5, r6, pc}
 800bcee:	bf00      	nop
 800bcf0:	20000054 	.word	0x20000054

0800bcf4 <__errno>:
 800bcf4:	4b01      	ldr	r3, [pc, #4]	@ (800bcfc <__errno+0x8>)
 800bcf6:	6818      	ldr	r0, [r3, #0]
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	20000054 	.word	0x20000054

0800bd00 <__libc_init_array>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	2600      	movs	r6, #0
 800bd04:	4d0c      	ldr	r5, [pc, #48]	@ (800bd38 <__libc_init_array+0x38>)
 800bd06:	4c0d      	ldr	r4, [pc, #52]	@ (800bd3c <__libc_init_array+0x3c>)
 800bd08:	1b64      	subs	r4, r4, r5
 800bd0a:	10a4      	asrs	r4, r4, #2
 800bd0c:	42a6      	cmp	r6, r4
 800bd0e:	d109      	bne.n	800bd24 <__libc_init_array+0x24>
 800bd10:	f002 f8f8 	bl	800df04 <_init>
 800bd14:	2600      	movs	r6, #0
 800bd16:	4d0a      	ldr	r5, [pc, #40]	@ (800bd40 <__libc_init_array+0x40>)
 800bd18:	4c0a      	ldr	r4, [pc, #40]	@ (800bd44 <__libc_init_array+0x44>)
 800bd1a:	1b64      	subs	r4, r4, r5
 800bd1c:	10a4      	asrs	r4, r4, #2
 800bd1e:	42a6      	cmp	r6, r4
 800bd20:	d105      	bne.n	800bd2e <__libc_init_array+0x2e>
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd28:	4798      	blx	r3
 800bd2a:	3601      	adds	r6, #1
 800bd2c:	e7ee      	b.n	800bd0c <__libc_init_array+0xc>
 800bd2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd32:	4798      	blx	r3
 800bd34:	3601      	adds	r6, #1
 800bd36:	e7f2      	b.n	800bd1e <__libc_init_array+0x1e>
 800bd38:	0800ece0 	.word	0x0800ece0
 800bd3c:	0800ece0 	.word	0x0800ece0
 800bd40:	0800ece0 	.word	0x0800ece0
 800bd44:	0800ece4 	.word	0x0800ece4

0800bd48 <__retarget_lock_init_recursive>:
 800bd48:	4770      	bx	lr

0800bd4a <__retarget_lock_acquire_recursive>:
 800bd4a:	4770      	bx	lr

0800bd4c <__retarget_lock_release_recursive>:
 800bd4c:	4770      	bx	lr

0800bd4e <memchr>:
 800bd4e:	4603      	mov	r3, r0
 800bd50:	b510      	push	{r4, lr}
 800bd52:	b2c9      	uxtb	r1, r1
 800bd54:	4402      	add	r2, r0
 800bd56:	4293      	cmp	r3, r2
 800bd58:	4618      	mov	r0, r3
 800bd5a:	d101      	bne.n	800bd60 <memchr+0x12>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e003      	b.n	800bd68 <memchr+0x1a>
 800bd60:	7804      	ldrb	r4, [r0, #0]
 800bd62:	3301      	adds	r3, #1
 800bd64:	428c      	cmp	r4, r1
 800bd66:	d1f6      	bne.n	800bd56 <memchr+0x8>
 800bd68:	bd10      	pop	{r4, pc}

0800bd6a <memcpy>:
 800bd6a:	440a      	add	r2, r1
 800bd6c:	4291      	cmp	r1, r2
 800bd6e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bd72:	d100      	bne.n	800bd76 <memcpy+0xc>
 800bd74:	4770      	bx	lr
 800bd76:	b510      	push	{r4, lr}
 800bd78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd7c:	4291      	cmp	r1, r2
 800bd7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd82:	d1f9      	bne.n	800bd78 <memcpy+0xe>
 800bd84:	bd10      	pop	{r4, pc}

0800bd86 <quorem>:
 800bd86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8a:	6903      	ldr	r3, [r0, #16]
 800bd8c:	690c      	ldr	r4, [r1, #16]
 800bd8e:	4607      	mov	r7, r0
 800bd90:	42a3      	cmp	r3, r4
 800bd92:	db7e      	blt.n	800be92 <quorem+0x10c>
 800bd94:	3c01      	subs	r4, #1
 800bd96:	00a3      	lsls	r3, r4, #2
 800bd98:	f100 0514 	add.w	r5, r0, #20
 800bd9c:	f101 0814 	add.w	r8, r1, #20
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdbc:	d32e      	bcc.n	800be1c <quorem+0x96>
 800bdbe:	f04f 0a00 	mov.w	sl, #0
 800bdc2:	46c4      	mov	ip, r8
 800bdc4:	46ae      	mov	lr, r5
 800bdc6:	46d3      	mov	fp, sl
 800bdc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdcc:	b298      	uxth	r0, r3
 800bdce:	fb06 a000 	mla	r0, r6, r0, sl
 800bdd2:	0c1b      	lsrs	r3, r3, #16
 800bdd4:	0c02      	lsrs	r2, r0, #16
 800bdd6:	fb06 2303 	mla	r3, r6, r3, r2
 800bdda:	f8de 2000 	ldr.w	r2, [lr]
 800bdde:	b280      	uxth	r0, r0
 800bde0:	b292      	uxth	r2, r2
 800bde2:	1a12      	subs	r2, r2, r0
 800bde4:	445a      	add	r2, fp
 800bde6:	f8de 0000 	ldr.w	r0, [lr]
 800bdea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bdf4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bdf8:	b292      	uxth	r2, r2
 800bdfa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bdfe:	45e1      	cmp	r9, ip
 800be00:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be04:	f84e 2b04 	str.w	r2, [lr], #4
 800be08:	d2de      	bcs.n	800bdc8 <quorem+0x42>
 800be0a:	9b00      	ldr	r3, [sp, #0]
 800be0c:	58eb      	ldr	r3, [r5, r3]
 800be0e:	b92b      	cbnz	r3, 800be1c <quorem+0x96>
 800be10:	9b01      	ldr	r3, [sp, #4]
 800be12:	3b04      	subs	r3, #4
 800be14:	429d      	cmp	r5, r3
 800be16:	461a      	mov	r2, r3
 800be18:	d32f      	bcc.n	800be7a <quorem+0xf4>
 800be1a:	613c      	str	r4, [r7, #16]
 800be1c:	4638      	mov	r0, r7
 800be1e:	f001 fb79 	bl	800d514 <__mcmp>
 800be22:	2800      	cmp	r0, #0
 800be24:	db25      	blt.n	800be72 <quorem+0xec>
 800be26:	4629      	mov	r1, r5
 800be28:	2000      	movs	r0, #0
 800be2a:	f858 2b04 	ldr.w	r2, [r8], #4
 800be2e:	f8d1 c000 	ldr.w	ip, [r1]
 800be32:	fa1f fe82 	uxth.w	lr, r2
 800be36:	fa1f f38c 	uxth.w	r3, ip
 800be3a:	eba3 030e 	sub.w	r3, r3, lr
 800be3e:	4403      	add	r3, r0
 800be40:	0c12      	lsrs	r2, r2, #16
 800be42:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be46:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be50:	45c1      	cmp	r9, r8
 800be52:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be56:	f841 3b04 	str.w	r3, [r1], #4
 800be5a:	d2e6      	bcs.n	800be2a <quorem+0xa4>
 800be5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be64:	b922      	cbnz	r2, 800be70 <quorem+0xea>
 800be66:	3b04      	subs	r3, #4
 800be68:	429d      	cmp	r5, r3
 800be6a:	461a      	mov	r2, r3
 800be6c:	d30b      	bcc.n	800be86 <quorem+0x100>
 800be6e:	613c      	str	r4, [r7, #16]
 800be70:	3601      	adds	r6, #1
 800be72:	4630      	mov	r0, r6
 800be74:	b003      	add	sp, #12
 800be76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7a:	6812      	ldr	r2, [r2, #0]
 800be7c:	3b04      	subs	r3, #4
 800be7e:	2a00      	cmp	r2, #0
 800be80:	d1cb      	bne.n	800be1a <quorem+0x94>
 800be82:	3c01      	subs	r4, #1
 800be84:	e7c6      	b.n	800be14 <quorem+0x8e>
 800be86:	6812      	ldr	r2, [r2, #0]
 800be88:	3b04      	subs	r3, #4
 800be8a:	2a00      	cmp	r2, #0
 800be8c:	d1ef      	bne.n	800be6e <quorem+0xe8>
 800be8e:	3c01      	subs	r4, #1
 800be90:	e7ea      	b.n	800be68 <quorem+0xe2>
 800be92:	2000      	movs	r0, #0
 800be94:	e7ee      	b.n	800be74 <quorem+0xee>
	...

0800be98 <_dtoa_r>:
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	4614      	mov	r4, r2
 800be9e:	461d      	mov	r5, r3
 800bea0:	69c7      	ldr	r7, [r0, #28]
 800bea2:	b097      	sub	sp, #92	@ 0x5c
 800bea4:	4683      	mov	fp, r0
 800bea6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800beaa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800beac:	b97f      	cbnz	r7, 800bece <_dtoa_r+0x36>
 800beae:	2010      	movs	r0, #16
 800beb0:	f000 ff5a 	bl	800cd68 <malloc>
 800beb4:	4602      	mov	r2, r0
 800beb6:	f8cb 001c 	str.w	r0, [fp, #28]
 800beba:	b920      	cbnz	r0, 800bec6 <_dtoa_r+0x2e>
 800bebc:	21ef      	movs	r1, #239	@ 0xef
 800bebe:	4ba8      	ldr	r3, [pc, #672]	@ (800c160 <_dtoa_r+0x2c8>)
 800bec0:	48a8      	ldr	r0, [pc, #672]	@ (800c164 <_dtoa_r+0x2cc>)
 800bec2:	f001 fd11 	bl	800d8e8 <__assert_func>
 800bec6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800beca:	6007      	str	r7, [r0, #0]
 800becc:	60c7      	str	r7, [r0, #12]
 800bece:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bed2:	6819      	ldr	r1, [r3, #0]
 800bed4:	b159      	cbz	r1, 800beee <_dtoa_r+0x56>
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	2301      	movs	r3, #1
 800beda:	4093      	lsls	r3, r2
 800bedc:	604a      	str	r2, [r1, #4]
 800bede:	608b      	str	r3, [r1, #8]
 800bee0:	4658      	mov	r0, fp
 800bee2:	f001 f8df 	bl	800d0a4 <_Bfree>
 800bee6:	2200      	movs	r2, #0
 800bee8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800beec:	601a      	str	r2, [r3, #0]
 800beee:	1e2b      	subs	r3, r5, #0
 800bef0:	bfaf      	iteee	ge
 800bef2:	2300      	movge	r3, #0
 800bef4:	2201      	movlt	r2, #1
 800bef6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800befa:	9303      	strlt	r3, [sp, #12]
 800befc:	bfa8      	it	ge
 800befe:	6033      	strge	r3, [r6, #0]
 800bf00:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bf04:	4b98      	ldr	r3, [pc, #608]	@ (800c168 <_dtoa_r+0x2d0>)
 800bf06:	bfb8      	it	lt
 800bf08:	6032      	strlt	r2, [r6, #0]
 800bf0a:	ea33 0308 	bics.w	r3, r3, r8
 800bf0e:	d112      	bne.n	800bf36 <_dtoa_r+0x9e>
 800bf10:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf14:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bf16:	6013      	str	r3, [r2, #0]
 800bf18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bf1c:	4323      	orrs	r3, r4
 800bf1e:	f000 8550 	beq.w	800c9c2 <_dtoa_r+0xb2a>
 800bf22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bf24:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c16c <_dtoa_r+0x2d4>
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 8552 	beq.w	800c9d2 <_dtoa_r+0xb3a>
 800bf2e:	f10a 0303 	add.w	r3, sl, #3
 800bf32:	f000 bd4c 	b.w	800c9ce <_dtoa_r+0xb36>
 800bf36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bf3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf42:	2200      	movs	r2, #0
 800bf44:	2300      	movs	r3, #0
 800bf46:	f7f4 fd9f 	bl	8000a88 <__aeabi_dcmpeq>
 800bf4a:	4607      	mov	r7, r0
 800bf4c:	b158      	cbz	r0, 800bf66 <_dtoa_r+0xce>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bf56:	b113      	cbz	r3, 800bf5e <_dtoa_r+0xc6>
 800bf58:	4b85      	ldr	r3, [pc, #532]	@ (800c170 <_dtoa_r+0x2d8>)
 800bf5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c174 <_dtoa_r+0x2dc>
 800bf62:	f000 bd36 	b.w	800c9d2 <_dtoa_r+0xb3a>
 800bf66:	ab14      	add	r3, sp, #80	@ 0x50
 800bf68:	9301      	str	r3, [sp, #4]
 800bf6a:	ab15      	add	r3, sp, #84	@ 0x54
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	4658      	mov	r0, fp
 800bf70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf74:	f001 fb7e 	bl	800d674 <__d2b>
 800bf78:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bf7c:	4681      	mov	r9, r0
 800bf7e:	2e00      	cmp	r6, #0
 800bf80:	d077      	beq.n	800c072 <_dtoa_r+0x1da>
 800bf82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf88:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf90:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf94:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf98:	9712      	str	r7, [sp, #72]	@ 0x48
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4b76      	ldr	r3, [pc, #472]	@ (800c178 <_dtoa_r+0x2e0>)
 800bfa0:	f7f4 f952 	bl	8000248 <__aeabi_dsub>
 800bfa4:	a368      	add	r3, pc, #416	@ (adr r3, 800c148 <_dtoa_r+0x2b0>)
 800bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfaa:	f7f4 fb05 	bl	80005b8 <__aeabi_dmul>
 800bfae:	a368      	add	r3, pc, #416	@ (adr r3, 800c150 <_dtoa_r+0x2b8>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 f94a 	bl	800024c <__adddf3>
 800bfb8:	4604      	mov	r4, r0
 800bfba:	4630      	mov	r0, r6
 800bfbc:	460d      	mov	r5, r1
 800bfbe:	f7f4 fa91 	bl	80004e4 <__aeabi_i2d>
 800bfc2:	a365      	add	r3, pc, #404	@ (adr r3, 800c158 <_dtoa_r+0x2c0>)
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f7f4 faf6 	bl	80005b8 <__aeabi_dmul>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	f7f4 f93a 	bl	800024c <__adddf3>
 800bfd8:	4604      	mov	r4, r0
 800bfda:	460d      	mov	r5, r1
 800bfdc:	f7f4 fd9c 	bl	8000b18 <__aeabi_d2iz>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	4629      	mov	r1, r5
 800bfea:	f7f4 fd57 	bl	8000a9c <__aeabi_dcmplt>
 800bfee:	b140      	cbz	r0, 800c002 <_dtoa_r+0x16a>
 800bff0:	4638      	mov	r0, r7
 800bff2:	f7f4 fa77 	bl	80004e4 <__aeabi_i2d>
 800bff6:	4622      	mov	r2, r4
 800bff8:	462b      	mov	r3, r5
 800bffa:	f7f4 fd45 	bl	8000a88 <__aeabi_dcmpeq>
 800bffe:	b900      	cbnz	r0, 800c002 <_dtoa_r+0x16a>
 800c000:	3f01      	subs	r7, #1
 800c002:	2f16      	cmp	r7, #22
 800c004:	d853      	bhi.n	800c0ae <_dtoa_r+0x216>
 800c006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c00a:	4b5c      	ldr	r3, [pc, #368]	@ (800c17c <_dtoa_r+0x2e4>)
 800c00c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	f7f4 fd42 	bl	8000a9c <__aeabi_dcmplt>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d04a      	beq.n	800c0b2 <_dtoa_r+0x21a>
 800c01c:	2300      	movs	r3, #0
 800c01e:	3f01      	subs	r7, #1
 800c020:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c022:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c024:	1b9b      	subs	r3, r3, r6
 800c026:	1e5a      	subs	r2, r3, #1
 800c028:	bf46      	itte	mi
 800c02a:	f1c3 0801 	rsbmi	r8, r3, #1
 800c02e:	2300      	movmi	r3, #0
 800c030:	f04f 0800 	movpl.w	r8, #0
 800c034:	9209      	str	r2, [sp, #36]	@ 0x24
 800c036:	bf48      	it	mi
 800c038:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c03a:	2f00      	cmp	r7, #0
 800c03c:	db3b      	blt.n	800c0b6 <_dtoa_r+0x21e>
 800c03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c040:	970e      	str	r7, [sp, #56]	@ 0x38
 800c042:	443b      	add	r3, r7
 800c044:	9309      	str	r3, [sp, #36]	@ 0x24
 800c046:	2300      	movs	r3, #0
 800c048:	930a      	str	r3, [sp, #40]	@ 0x28
 800c04a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	d866      	bhi.n	800c11e <_dtoa_r+0x286>
 800c050:	2b05      	cmp	r3, #5
 800c052:	bfc4      	itt	gt
 800c054:	3b04      	subgt	r3, #4
 800c056:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c058:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c05a:	bfc8      	it	gt
 800c05c:	2400      	movgt	r4, #0
 800c05e:	f1a3 0302 	sub.w	r3, r3, #2
 800c062:	bfd8      	it	le
 800c064:	2401      	movle	r4, #1
 800c066:	2b03      	cmp	r3, #3
 800c068:	d864      	bhi.n	800c134 <_dtoa_r+0x29c>
 800c06a:	e8df f003 	tbb	[pc, r3]
 800c06e:	382b      	.short	0x382b
 800c070:	5636      	.short	0x5636
 800c072:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c076:	441e      	add	r6, r3
 800c078:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c07c:	2b20      	cmp	r3, #32
 800c07e:	bfc1      	itttt	gt
 800c080:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c084:	fa08 f803 	lslgt.w	r8, r8, r3
 800c088:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c08c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c090:	bfd6      	itet	le
 800c092:	f1c3 0320 	rsble	r3, r3, #32
 800c096:	ea48 0003 	orrgt.w	r0, r8, r3
 800c09a:	fa04 f003 	lslle.w	r0, r4, r3
 800c09e:	f7f4 fa11 	bl	80004c4 <__aeabi_ui2d>
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c0a8:	3e01      	subs	r6, #1
 800c0aa:	9212      	str	r2, [sp, #72]	@ 0x48
 800c0ac:	e775      	b.n	800bf9a <_dtoa_r+0x102>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e7b6      	b.n	800c020 <_dtoa_r+0x188>
 800c0b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c0b4:	e7b5      	b.n	800c022 <_dtoa_r+0x18a>
 800c0b6:	427b      	negs	r3, r7
 800c0b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	eba8 0807 	sub.w	r8, r8, r7
 800c0c0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c0c2:	e7c2      	b.n	800c04a <_dtoa_r+0x1b2>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	dc35      	bgt.n	800c13a <_dtoa_r+0x2a2>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c0d6:	9221      	str	r2, [sp, #132]	@ 0x84
 800c0d8:	e00b      	b.n	800c0f2 <_dtoa_r+0x25a>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e7f3      	b.n	800c0c6 <_dtoa_r+0x22e>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c0e4:	18fb      	adds	r3, r7, r3
 800c0e6:	9308      	str	r3, [sp, #32]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	9307      	str	r3, [sp, #28]
 800c0ee:	bfb8      	it	lt
 800c0f0:	2301      	movlt	r3, #1
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	2204      	movs	r2, #4
 800c0f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c0fa:	f102 0514 	add.w	r5, r2, #20
 800c0fe:	429d      	cmp	r5, r3
 800c100:	d91f      	bls.n	800c142 <_dtoa_r+0x2aa>
 800c102:	6041      	str	r1, [r0, #4]
 800c104:	4658      	mov	r0, fp
 800c106:	f000 ff8d 	bl	800d024 <_Balloc>
 800c10a:	4682      	mov	sl, r0
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d139      	bne.n	800c184 <_dtoa_r+0x2ec>
 800c110:	4602      	mov	r2, r0
 800c112:	f240 11af 	movw	r1, #431	@ 0x1af
 800c116:	4b1a      	ldr	r3, [pc, #104]	@ (800c180 <_dtoa_r+0x2e8>)
 800c118:	e6d2      	b.n	800bec0 <_dtoa_r+0x28>
 800c11a:	2301      	movs	r3, #1
 800c11c:	e7e0      	b.n	800c0e0 <_dtoa_r+0x248>
 800c11e:	2401      	movs	r4, #1
 800c120:	2300      	movs	r3, #0
 800c122:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c124:	9320      	str	r3, [sp, #128]	@ 0x80
 800c126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c12a:	2200      	movs	r2, #0
 800c12c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c130:	2312      	movs	r3, #18
 800c132:	e7d0      	b.n	800c0d6 <_dtoa_r+0x23e>
 800c134:	2301      	movs	r3, #1
 800c136:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c138:	e7f5      	b.n	800c126 <_dtoa_r+0x28e>
 800c13a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c13c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c140:	e7d7      	b.n	800c0f2 <_dtoa_r+0x25a>
 800c142:	3101      	adds	r1, #1
 800c144:	0052      	lsls	r2, r2, #1
 800c146:	e7d8      	b.n	800c0fa <_dtoa_r+0x262>
 800c148:	636f4361 	.word	0x636f4361
 800c14c:	3fd287a7 	.word	0x3fd287a7
 800c150:	8b60c8b3 	.word	0x8b60c8b3
 800c154:	3fc68a28 	.word	0x3fc68a28
 800c158:	509f79fb 	.word	0x509f79fb
 800c15c:	3fd34413 	.word	0x3fd34413
 800c160:	0800e9a7 	.word	0x0800e9a7
 800c164:	0800e9be 	.word	0x0800e9be
 800c168:	7ff00000 	.word	0x7ff00000
 800c16c:	0800e9a3 	.word	0x0800e9a3
 800c170:	0800e977 	.word	0x0800e977
 800c174:	0800e976 	.word	0x0800e976
 800c178:	3ff80000 	.word	0x3ff80000
 800c17c:	0800eac8 	.word	0x0800eac8
 800c180:	0800ea16 	.word	0x0800ea16
 800c184:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c188:	6018      	str	r0, [r3, #0]
 800c18a:	9b07      	ldr	r3, [sp, #28]
 800c18c:	2b0e      	cmp	r3, #14
 800c18e:	f200 80a4 	bhi.w	800c2da <_dtoa_r+0x442>
 800c192:	2c00      	cmp	r4, #0
 800c194:	f000 80a1 	beq.w	800c2da <_dtoa_r+0x442>
 800c198:	2f00      	cmp	r7, #0
 800c19a:	dd33      	ble.n	800c204 <_dtoa_r+0x36c>
 800c19c:	4b86      	ldr	r3, [pc, #536]	@ (800c3b8 <_dtoa_r+0x520>)
 800c19e:	f007 020f 	and.w	r2, r7, #15
 800c1a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1a6:	05f8      	lsls	r0, r7, #23
 800c1a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c1ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c1b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c1b4:	d516      	bpl.n	800c1e4 <_dtoa_r+0x34c>
 800c1b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1ba:	4b80      	ldr	r3, [pc, #512]	@ (800c3bc <_dtoa_r+0x524>)
 800c1bc:	2603      	movs	r6, #3
 800c1be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1c2:	f7f4 fb23 	bl	800080c <__aeabi_ddiv>
 800c1c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1ca:	f004 040f 	and.w	r4, r4, #15
 800c1ce:	4d7b      	ldr	r5, [pc, #492]	@ (800c3bc <_dtoa_r+0x524>)
 800c1d0:	b954      	cbnz	r4, 800c1e8 <_dtoa_r+0x350>
 800c1d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1da:	f7f4 fb17 	bl	800080c <__aeabi_ddiv>
 800c1de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1e2:	e028      	b.n	800c236 <_dtoa_r+0x39e>
 800c1e4:	2602      	movs	r6, #2
 800c1e6:	e7f2      	b.n	800c1ce <_dtoa_r+0x336>
 800c1e8:	07e1      	lsls	r1, r4, #31
 800c1ea:	d508      	bpl.n	800c1fe <_dtoa_r+0x366>
 800c1ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1f4:	f7f4 f9e0 	bl	80005b8 <__aeabi_dmul>
 800c1f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1fc:	3601      	adds	r6, #1
 800c1fe:	1064      	asrs	r4, r4, #1
 800c200:	3508      	adds	r5, #8
 800c202:	e7e5      	b.n	800c1d0 <_dtoa_r+0x338>
 800c204:	f000 80d2 	beq.w	800c3ac <_dtoa_r+0x514>
 800c208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c20c:	427c      	negs	r4, r7
 800c20e:	4b6a      	ldr	r3, [pc, #424]	@ (800c3b8 <_dtoa_r+0x520>)
 800c210:	f004 020f 	and.w	r2, r4, #15
 800c214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	f7f4 f9cc 	bl	80005b8 <__aeabi_dmul>
 800c220:	2602      	movs	r6, #2
 800c222:	2300      	movs	r3, #0
 800c224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c228:	4d64      	ldr	r5, [pc, #400]	@ (800c3bc <_dtoa_r+0x524>)
 800c22a:	1124      	asrs	r4, r4, #4
 800c22c:	2c00      	cmp	r4, #0
 800c22e:	f040 80b2 	bne.w	800c396 <_dtoa_r+0x4fe>
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1d3      	bne.n	800c1de <_dtoa_r+0x346>
 800c236:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c23a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 80b7 	beq.w	800c3b0 <_dtoa_r+0x518>
 800c242:	2200      	movs	r2, #0
 800c244:	4620      	mov	r0, r4
 800c246:	4629      	mov	r1, r5
 800c248:	4b5d      	ldr	r3, [pc, #372]	@ (800c3c0 <_dtoa_r+0x528>)
 800c24a:	f7f4 fc27 	bl	8000a9c <__aeabi_dcmplt>
 800c24e:	2800      	cmp	r0, #0
 800c250:	f000 80ae 	beq.w	800c3b0 <_dtoa_r+0x518>
 800c254:	9b07      	ldr	r3, [sp, #28]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 80aa 	beq.w	800c3b0 <_dtoa_r+0x518>
 800c25c:	9b08      	ldr	r3, [sp, #32]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	dd37      	ble.n	800c2d2 <_dtoa_r+0x43a>
 800c262:	1e7b      	subs	r3, r7, #1
 800c264:	4620      	mov	r0, r4
 800c266:	9304      	str	r3, [sp, #16]
 800c268:	2200      	movs	r2, #0
 800c26a:	4629      	mov	r1, r5
 800c26c:	4b55      	ldr	r3, [pc, #340]	@ (800c3c4 <_dtoa_r+0x52c>)
 800c26e:	f7f4 f9a3 	bl	80005b8 <__aeabi_dmul>
 800c272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c276:	9c08      	ldr	r4, [sp, #32]
 800c278:	3601      	adds	r6, #1
 800c27a:	4630      	mov	r0, r6
 800c27c:	f7f4 f932 	bl	80004e4 <__aeabi_i2d>
 800c280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c284:	f7f4 f998 	bl	80005b8 <__aeabi_dmul>
 800c288:	2200      	movs	r2, #0
 800c28a:	4b4f      	ldr	r3, [pc, #316]	@ (800c3c8 <_dtoa_r+0x530>)
 800c28c:	f7f3 ffde 	bl	800024c <__adddf3>
 800c290:	4605      	mov	r5, r0
 800c292:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c296:	2c00      	cmp	r4, #0
 800c298:	f040 809a 	bne.w	800c3d0 <_dtoa_r+0x538>
 800c29c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	4b4a      	ldr	r3, [pc, #296]	@ (800c3cc <_dtoa_r+0x534>)
 800c2a4:	f7f3 ffd0 	bl	8000248 <__aeabi_dsub>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2b0:	462a      	mov	r2, r5
 800c2b2:	4633      	mov	r3, r6
 800c2b4:	f7f4 fc10 	bl	8000ad8 <__aeabi_dcmpgt>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	f040 828e 	bne.w	800c7da <_dtoa_r+0x942>
 800c2be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2c2:	462a      	mov	r2, r5
 800c2c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2c8:	f7f4 fbe8 	bl	8000a9c <__aeabi_dcmplt>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	f040 8127 	bne.w	800c520 <_dtoa_r+0x688>
 800c2d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c2d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c2da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f2c0 8163 	blt.w	800c5a8 <_dtoa_r+0x710>
 800c2e2:	2f0e      	cmp	r7, #14
 800c2e4:	f300 8160 	bgt.w	800c5a8 <_dtoa_r+0x710>
 800c2e8:	4b33      	ldr	r3, [pc, #204]	@ (800c3b8 <_dtoa_r+0x520>)
 800c2ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c2f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	da03      	bge.n	800c304 <_dtoa_r+0x46c>
 800c2fc:	9b07      	ldr	r3, [sp, #28]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f340 8100 	ble.w	800c504 <_dtoa_r+0x66c>
 800c304:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c308:	4656      	mov	r6, sl
 800c30a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c30e:	4620      	mov	r0, r4
 800c310:	4629      	mov	r1, r5
 800c312:	f7f4 fa7b 	bl	800080c <__aeabi_ddiv>
 800c316:	f7f4 fbff 	bl	8000b18 <__aeabi_d2iz>
 800c31a:	4680      	mov	r8, r0
 800c31c:	f7f4 f8e2 	bl	80004e4 <__aeabi_i2d>
 800c320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c324:	f7f4 f948 	bl	80005b8 <__aeabi_dmul>
 800c328:	4602      	mov	r2, r0
 800c32a:	460b      	mov	r3, r1
 800c32c:	4620      	mov	r0, r4
 800c32e:	4629      	mov	r1, r5
 800c330:	f7f3 ff8a 	bl	8000248 <__aeabi_dsub>
 800c334:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c338:	9d07      	ldr	r5, [sp, #28]
 800c33a:	f806 4b01 	strb.w	r4, [r6], #1
 800c33e:	eba6 040a 	sub.w	r4, r6, sl
 800c342:	42a5      	cmp	r5, r4
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	f040 8116 	bne.w	800c578 <_dtoa_r+0x6e0>
 800c34c:	f7f3 ff7e 	bl	800024c <__adddf3>
 800c350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c354:	4604      	mov	r4, r0
 800c356:	460d      	mov	r5, r1
 800c358:	f7f4 fbbe 	bl	8000ad8 <__aeabi_dcmpgt>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	f040 80f8 	bne.w	800c552 <_dtoa_r+0x6ba>
 800c362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c366:	4620      	mov	r0, r4
 800c368:	4629      	mov	r1, r5
 800c36a:	f7f4 fb8d 	bl	8000a88 <__aeabi_dcmpeq>
 800c36e:	b118      	cbz	r0, 800c378 <_dtoa_r+0x4e0>
 800c370:	f018 0f01 	tst.w	r8, #1
 800c374:	f040 80ed 	bne.w	800c552 <_dtoa_r+0x6ba>
 800c378:	4649      	mov	r1, r9
 800c37a:	4658      	mov	r0, fp
 800c37c:	f000 fe92 	bl	800d0a4 <_Bfree>
 800c380:	2300      	movs	r3, #0
 800c382:	7033      	strb	r3, [r6, #0]
 800c384:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c386:	3701      	adds	r7, #1
 800c388:	601f      	str	r7, [r3, #0]
 800c38a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 8320 	beq.w	800c9d2 <_dtoa_r+0xb3a>
 800c392:	601e      	str	r6, [r3, #0]
 800c394:	e31d      	b.n	800c9d2 <_dtoa_r+0xb3a>
 800c396:	07e2      	lsls	r2, r4, #31
 800c398:	d505      	bpl.n	800c3a6 <_dtoa_r+0x50e>
 800c39a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c39e:	f7f4 f90b 	bl	80005b8 <__aeabi_dmul>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	3601      	adds	r6, #1
 800c3a6:	1064      	asrs	r4, r4, #1
 800c3a8:	3508      	adds	r5, #8
 800c3aa:	e73f      	b.n	800c22c <_dtoa_r+0x394>
 800c3ac:	2602      	movs	r6, #2
 800c3ae:	e742      	b.n	800c236 <_dtoa_r+0x39e>
 800c3b0:	9c07      	ldr	r4, [sp, #28]
 800c3b2:	9704      	str	r7, [sp, #16]
 800c3b4:	e761      	b.n	800c27a <_dtoa_r+0x3e2>
 800c3b6:	bf00      	nop
 800c3b8:	0800eac8 	.word	0x0800eac8
 800c3bc:	0800eaa0 	.word	0x0800eaa0
 800c3c0:	3ff00000 	.word	0x3ff00000
 800c3c4:	40240000 	.word	0x40240000
 800c3c8:	401c0000 	.word	0x401c0000
 800c3cc:	40140000 	.word	0x40140000
 800c3d0:	4b70      	ldr	r3, [pc, #448]	@ (800c594 <_dtoa_r+0x6fc>)
 800c3d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3dc:	4454      	add	r4, sl
 800c3de:	2900      	cmp	r1, #0
 800c3e0:	d045      	beq.n	800c46e <_dtoa_r+0x5d6>
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	496c      	ldr	r1, [pc, #432]	@ (800c598 <_dtoa_r+0x700>)
 800c3e6:	f7f4 fa11 	bl	800080c <__aeabi_ddiv>
 800c3ea:	4633      	mov	r3, r6
 800c3ec:	462a      	mov	r2, r5
 800c3ee:	f7f3 ff2b 	bl	8000248 <__aeabi_dsub>
 800c3f2:	4656      	mov	r6, sl
 800c3f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3fc:	f7f4 fb8c 	bl	8000b18 <__aeabi_d2iz>
 800c400:	4605      	mov	r5, r0
 800c402:	f7f4 f86f 	bl	80004e4 <__aeabi_i2d>
 800c406:	4602      	mov	r2, r0
 800c408:	460b      	mov	r3, r1
 800c40a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c40e:	f7f3 ff1b 	bl	8000248 <__aeabi_dsub>
 800c412:	4602      	mov	r2, r0
 800c414:	460b      	mov	r3, r1
 800c416:	3530      	adds	r5, #48	@ 0x30
 800c418:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c41c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c420:	f806 5b01 	strb.w	r5, [r6], #1
 800c424:	f7f4 fb3a 	bl	8000a9c <__aeabi_dcmplt>
 800c428:	2800      	cmp	r0, #0
 800c42a:	d163      	bne.n	800c4f4 <_dtoa_r+0x65c>
 800c42c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c430:	2000      	movs	r0, #0
 800c432:	495a      	ldr	r1, [pc, #360]	@ (800c59c <_dtoa_r+0x704>)
 800c434:	f7f3 ff08 	bl	8000248 <__aeabi_dsub>
 800c438:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c43c:	f7f4 fb2e 	bl	8000a9c <__aeabi_dcmplt>
 800c440:	2800      	cmp	r0, #0
 800c442:	f040 8087 	bne.w	800c554 <_dtoa_r+0x6bc>
 800c446:	42a6      	cmp	r6, r4
 800c448:	f43f af43 	beq.w	800c2d2 <_dtoa_r+0x43a>
 800c44c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c450:	2200      	movs	r2, #0
 800c452:	4b53      	ldr	r3, [pc, #332]	@ (800c5a0 <_dtoa_r+0x708>)
 800c454:	f7f4 f8b0 	bl	80005b8 <__aeabi_dmul>
 800c458:	2200      	movs	r2, #0
 800c45a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c462:	4b4f      	ldr	r3, [pc, #316]	@ (800c5a0 <_dtoa_r+0x708>)
 800c464:	f7f4 f8a8 	bl	80005b8 <__aeabi_dmul>
 800c468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c46c:	e7c4      	b.n	800c3f8 <_dtoa_r+0x560>
 800c46e:	4631      	mov	r1, r6
 800c470:	4628      	mov	r0, r5
 800c472:	f7f4 f8a1 	bl	80005b8 <__aeabi_dmul>
 800c476:	4656      	mov	r6, sl
 800c478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c47c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c482:	f7f4 fb49 	bl	8000b18 <__aeabi_d2iz>
 800c486:	4605      	mov	r5, r0
 800c488:	f7f4 f82c 	bl	80004e4 <__aeabi_i2d>
 800c48c:	4602      	mov	r2, r0
 800c48e:	460b      	mov	r3, r1
 800c490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c494:	f7f3 fed8 	bl	8000248 <__aeabi_dsub>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	3530      	adds	r5, #48	@ 0x30
 800c49e:	f806 5b01 	strb.w	r5, [r6], #1
 800c4a2:	42a6      	cmp	r6, r4
 800c4a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4a8:	f04f 0200 	mov.w	r2, #0
 800c4ac:	d124      	bne.n	800c4f8 <_dtoa_r+0x660>
 800c4ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c4b2:	4b39      	ldr	r3, [pc, #228]	@ (800c598 <_dtoa_r+0x700>)
 800c4b4:	f7f3 feca 	bl	800024c <__adddf3>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4c0:	f7f4 fb0a 	bl	8000ad8 <__aeabi_dcmpgt>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d145      	bne.n	800c554 <_dtoa_r+0x6bc>
 800c4c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	4932      	ldr	r1, [pc, #200]	@ (800c598 <_dtoa_r+0x700>)
 800c4d0:	f7f3 feba 	bl	8000248 <__aeabi_dsub>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4dc:	f7f4 fade 	bl	8000a9c <__aeabi_dcmplt>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	f43f aef6 	beq.w	800c2d2 <_dtoa_r+0x43a>
 800c4e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c4e8:	1e73      	subs	r3, r6, #1
 800c4ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4f0:	2b30      	cmp	r3, #48	@ 0x30
 800c4f2:	d0f8      	beq.n	800c4e6 <_dtoa_r+0x64e>
 800c4f4:	9f04      	ldr	r7, [sp, #16]
 800c4f6:	e73f      	b.n	800c378 <_dtoa_r+0x4e0>
 800c4f8:	4b29      	ldr	r3, [pc, #164]	@ (800c5a0 <_dtoa_r+0x708>)
 800c4fa:	f7f4 f85d 	bl	80005b8 <__aeabi_dmul>
 800c4fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c502:	e7bc      	b.n	800c47e <_dtoa_r+0x5e6>
 800c504:	d10c      	bne.n	800c520 <_dtoa_r+0x688>
 800c506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c50a:	2200      	movs	r2, #0
 800c50c:	4b25      	ldr	r3, [pc, #148]	@ (800c5a4 <_dtoa_r+0x70c>)
 800c50e:	f7f4 f853 	bl	80005b8 <__aeabi_dmul>
 800c512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c516:	f7f4 fad5 	bl	8000ac4 <__aeabi_dcmpge>
 800c51a:	2800      	cmp	r0, #0
 800c51c:	f000 815b 	beq.w	800c7d6 <_dtoa_r+0x93e>
 800c520:	2400      	movs	r4, #0
 800c522:	4625      	mov	r5, r4
 800c524:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c526:	4656      	mov	r6, sl
 800c528:	43db      	mvns	r3, r3
 800c52a:	9304      	str	r3, [sp, #16]
 800c52c:	2700      	movs	r7, #0
 800c52e:	4621      	mov	r1, r4
 800c530:	4658      	mov	r0, fp
 800c532:	f000 fdb7 	bl	800d0a4 <_Bfree>
 800c536:	2d00      	cmp	r5, #0
 800c538:	d0dc      	beq.n	800c4f4 <_dtoa_r+0x65c>
 800c53a:	b12f      	cbz	r7, 800c548 <_dtoa_r+0x6b0>
 800c53c:	42af      	cmp	r7, r5
 800c53e:	d003      	beq.n	800c548 <_dtoa_r+0x6b0>
 800c540:	4639      	mov	r1, r7
 800c542:	4658      	mov	r0, fp
 800c544:	f000 fdae 	bl	800d0a4 <_Bfree>
 800c548:	4629      	mov	r1, r5
 800c54a:	4658      	mov	r0, fp
 800c54c:	f000 fdaa 	bl	800d0a4 <_Bfree>
 800c550:	e7d0      	b.n	800c4f4 <_dtoa_r+0x65c>
 800c552:	9704      	str	r7, [sp, #16]
 800c554:	4633      	mov	r3, r6
 800c556:	461e      	mov	r6, r3
 800c558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c55c:	2a39      	cmp	r2, #57	@ 0x39
 800c55e:	d107      	bne.n	800c570 <_dtoa_r+0x6d8>
 800c560:	459a      	cmp	sl, r3
 800c562:	d1f8      	bne.n	800c556 <_dtoa_r+0x6be>
 800c564:	9a04      	ldr	r2, [sp, #16]
 800c566:	3201      	adds	r2, #1
 800c568:	9204      	str	r2, [sp, #16]
 800c56a:	2230      	movs	r2, #48	@ 0x30
 800c56c:	f88a 2000 	strb.w	r2, [sl]
 800c570:	781a      	ldrb	r2, [r3, #0]
 800c572:	3201      	adds	r2, #1
 800c574:	701a      	strb	r2, [r3, #0]
 800c576:	e7bd      	b.n	800c4f4 <_dtoa_r+0x65c>
 800c578:	2200      	movs	r2, #0
 800c57a:	4b09      	ldr	r3, [pc, #36]	@ (800c5a0 <_dtoa_r+0x708>)
 800c57c:	f7f4 f81c 	bl	80005b8 <__aeabi_dmul>
 800c580:	2200      	movs	r2, #0
 800c582:	2300      	movs	r3, #0
 800c584:	4604      	mov	r4, r0
 800c586:	460d      	mov	r5, r1
 800c588:	f7f4 fa7e 	bl	8000a88 <__aeabi_dcmpeq>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	f43f aebc 	beq.w	800c30a <_dtoa_r+0x472>
 800c592:	e6f1      	b.n	800c378 <_dtoa_r+0x4e0>
 800c594:	0800eac8 	.word	0x0800eac8
 800c598:	3fe00000 	.word	0x3fe00000
 800c59c:	3ff00000 	.word	0x3ff00000
 800c5a0:	40240000 	.word	0x40240000
 800c5a4:	40140000 	.word	0x40140000
 800c5a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c5aa:	2a00      	cmp	r2, #0
 800c5ac:	f000 80db 	beq.w	800c766 <_dtoa_r+0x8ce>
 800c5b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c5b2:	2a01      	cmp	r2, #1
 800c5b4:	f300 80bf 	bgt.w	800c736 <_dtoa_r+0x89e>
 800c5b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c5ba:	2a00      	cmp	r2, #0
 800c5bc:	f000 80b7 	beq.w	800c72e <_dtoa_r+0x896>
 800c5c0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c5c4:	4646      	mov	r6, r8
 800c5c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c5c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5ca:	2101      	movs	r1, #1
 800c5cc:	441a      	add	r2, r3
 800c5ce:	4658      	mov	r0, fp
 800c5d0:	4498      	add	r8, r3
 800c5d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5d4:	f000 fe1a 	bl	800d20c <__i2b>
 800c5d8:	4605      	mov	r5, r0
 800c5da:	b15e      	cbz	r6, 800c5f4 <_dtoa_r+0x75c>
 800c5dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	dd08      	ble.n	800c5f4 <_dtoa_r+0x75c>
 800c5e2:	42b3      	cmp	r3, r6
 800c5e4:	bfa8      	it	ge
 800c5e6:	4633      	movge	r3, r6
 800c5e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5ea:	eba8 0803 	sub.w	r8, r8, r3
 800c5ee:	1af6      	subs	r6, r6, r3
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5f6:	b1f3      	cbz	r3, 800c636 <_dtoa_r+0x79e>
 800c5f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 80b7 	beq.w	800c76e <_dtoa_r+0x8d6>
 800c600:	b18c      	cbz	r4, 800c626 <_dtoa_r+0x78e>
 800c602:	4629      	mov	r1, r5
 800c604:	4622      	mov	r2, r4
 800c606:	4658      	mov	r0, fp
 800c608:	f000 febe 	bl	800d388 <__pow5mult>
 800c60c:	464a      	mov	r2, r9
 800c60e:	4601      	mov	r1, r0
 800c610:	4605      	mov	r5, r0
 800c612:	4658      	mov	r0, fp
 800c614:	f000 fe10 	bl	800d238 <__multiply>
 800c618:	4649      	mov	r1, r9
 800c61a:	9004      	str	r0, [sp, #16]
 800c61c:	4658      	mov	r0, fp
 800c61e:	f000 fd41 	bl	800d0a4 <_Bfree>
 800c622:	9b04      	ldr	r3, [sp, #16]
 800c624:	4699      	mov	r9, r3
 800c626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c628:	1b1a      	subs	r2, r3, r4
 800c62a:	d004      	beq.n	800c636 <_dtoa_r+0x79e>
 800c62c:	4649      	mov	r1, r9
 800c62e:	4658      	mov	r0, fp
 800c630:	f000 feaa 	bl	800d388 <__pow5mult>
 800c634:	4681      	mov	r9, r0
 800c636:	2101      	movs	r1, #1
 800c638:	4658      	mov	r0, fp
 800c63a:	f000 fde7 	bl	800d20c <__i2b>
 800c63e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c640:	4604      	mov	r4, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 81c9 	beq.w	800c9da <_dtoa_r+0xb42>
 800c648:	461a      	mov	r2, r3
 800c64a:	4601      	mov	r1, r0
 800c64c:	4658      	mov	r0, fp
 800c64e:	f000 fe9b 	bl	800d388 <__pow5mult>
 800c652:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c654:	4604      	mov	r4, r0
 800c656:	2b01      	cmp	r3, #1
 800c658:	f300 808f 	bgt.w	800c77a <_dtoa_r+0x8e2>
 800c65c:	9b02      	ldr	r3, [sp, #8]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f040 8087 	bne.w	800c772 <_dtoa_r+0x8da>
 800c664:	9b03      	ldr	r3, [sp, #12]
 800c666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	f040 8083 	bne.w	800c776 <_dtoa_r+0x8de>
 800c670:	9b03      	ldr	r3, [sp, #12]
 800c672:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c676:	0d1b      	lsrs	r3, r3, #20
 800c678:	051b      	lsls	r3, r3, #20
 800c67a:	b12b      	cbz	r3, 800c688 <_dtoa_r+0x7f0>
 800c67c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c67e:	f108 0801 	add.w	r8, r8, #1
 800c682:	3301      	adds	r3, #1
 800c684:	9309      	str	r3, [sp, #36]	@ 0x24
 800c686:	2301      	movs	r3, #1
 800c688:	930a      	str	r3, [sp, #40]	@ 0x28
 800c68a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f000 81aa 	beq.w	800c9e6 <_dtoa_r+0xb4e>
 800c692:	6923      	ldr	r3, [r4, #16]
 800c694:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c698:	6918      	ldr	r0, [r3, #16]
 800c69a:	f000 fd6b 	bl	800d174 <__hi0bits>
 800c69e:	f1c0 0020 	rsb	r0, r0, #32
 800c6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a4:	4418      	add	r0, r3
 800c6a6:	f010 001f 	ands.w	r0, r0, #31
 800c6aa:	d071      	beq.n	800c790 <_dtoa_r+0x8f8>
 800c6ac:	f1c0 0320 	rsb	r3, r0, #32
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	dd65      	ble.n	800c780 <_dtoa_r+0x8e8>
 800c6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b6:	f1c0 001c 	rsb	r0, r0, #28
 800c6ba:	4403      	add	r3, r0
 800c6bc:	4480      	add	r8, r0
 800c6be:	4406      	add	r6, r0
 800c6c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6c2:	f1b8 0f00 	cmp.w	r8, #0
 800c6c6:	dd05      	ble.n	800c6d4 <_dtoa_r+0x83c>
 800c6c8:	4649      	mov	r1, r9
 800c6ca:	4642      	mov	r2, r8
 800c6cc:	4658      	mov	r0, fp
 800c6ce:	f000 feb5 	bl	800d43c <__lshift>
 800c6d2:	4681      	mov	r9, r0
 800c6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	dd05      	ble.n	800c6e6 <_dtoa_r+0x84e>
 800c6da:	4621      	mov	r1, r4
 800c6dc:	461a      	mov	r2, r3
 800c6de:	4658      	mov	r0, fp
 800c6e0:	f000 feac 	bl	800d43c <__lshift>
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d053      	beq.n	800c794 <_dtoa_r+0x8fc>
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	4648      	mov	r0, r9
 800c6f0:	f000 ff10 	bl	800d514 <__mcmp>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	da4d      	bge.n	800c794 <_dtoa_r+0x8fc>
 800c6f8:	1e7b      	subs	r3, r7, #1
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	9304      	str	r3, [sp, #16]
 800c6fe:	220a      	movs	r2, #10
 800c700:	2300      	movs	r3, #0
 800c702:	4658      	mov	r0, fp
 800c704:	f000 fcf0 	bl	800d0e8 <__multadd>
 800c708:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c70a:	4681      	mov	r9, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f000 816c 	beq.w	800c9ea <_dtoa_r+0xb52>
 800c712:	2300      	movs	r3, #0
 800c714:	4629      	mov	r1, r5
 800c716:	220a      	movs	r2, #10
 800c718:	4658      	mov	r0, fp
 800c71a:	f000 fce5 	bl	800d0e8 <__multadd>
 800c71e:	9b08      	ldr	r3, [sp, #32]
 800c720:	4605      	mov	r5, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	dc61      	bgt.n	800c7ea <_dtoa_r+0x952>
 800c726:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c728:	2b02      	cmp	r3, #2
 800c72a:	dc3b      	bgt.n	800c7a4 <_dtoa_r+0x90c>
 800c72c:	e05d      	b.n	800c7ea <_dtoa_r+0x952>
 800c72e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c730:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c734:	e746      	b.n	800c5c4 <_dtoa_r+0x72c>
 800c736:	9b07      	ldr	r3, [sp, #28]
 800c738:	1e5c      	subs	r4, r3, #1
 800c73a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c73c:	42a3      	cmp	r3, r4
 800c73e:	bfbf      	itttt	lt
 800c740:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c742:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c744:	1ae3      	sublt	r3, r4, r3
 800c746:	18d2      	addlt	r2, r2, r3
 800c748:	bfa8      	it	ge
 800c74a:	1b1c      	subge	r4, r3, r4
 800c74c:	9b07      	ldr	r3, [sp, #28]
 800c74e:	bfbe      	ittt	lt
 800c750:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c752:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c754:	2400      	movlt	r4, #0
 800c756:	2b00      	cmp	r3, #0
 800c758:	bfb5      	itete	lt
 800c75a:	eba8 0603 	sublt.w	r6, r8, r3
 800c75e:	4646      	movge	r6, r8
 800c760:	2300      	movlt	r3, #0
 800c762:	9b07      	ldrge	r3, [sp, #28]
 800c764:	e730      	b.n	800c5c8 <_dtoa_r+0x730>
 800c766:	4646      	mov	r6, r8
 800c768:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c76a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c76c:	e735      	b.n	800c5da <_dtoa_r+0x742>
 800c76e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c770:	e75c      	b.n	800c62c <_dtoa_r+0x794>
 800c772:	2300      	movs	r3, #0
 800c774:	e788      	b.n	800c688 <_dtoa_r+0x7f0>
 800c776:	9b02      	ldr	r3, [sp, #8]
 800c778:	e786      	b.n	800c688 <_dtoa_r+0x7f0>
 800c77a:	2300      	movs	r3, #0
 800c77c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c77e:	e788      	b.n	800c692 <_dtoa_r+0x7fa>
 800c780:	d09f      	beq.n	800c6c2 <_dtoa_r+0x82a>
 800c782:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c784:	331c      	adds	r3, #28
 800c786:	441a      	add	r2, r3
 800c788:	4498      	add	r8, r3
 800c78a:	441e      	add	r6, r3
 800c78c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c78e:	e798      	b.n	800c6c2 <_dtoa_r+0x82a>
 800c790:	4603      	mov	r3, r0
 800c792:	e7f6      	b.n	800c782 <_dtoa_r+0x8ea>
 800c794:	9b07      	ldr	r3, [sp, #28]
 800c796:	9704      	str	r7, [sp, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	dc20      	bgt.n	800c7de <_dtoa_r+0x946>
 800c79c:	9308      	str	r3, [sp, #32]
 800c79e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	dd1e      	ble.n	800c7e2 <_dtoa_r+0x94a>
 800c7a4:	9b08      	ldr	r3, [sp, #32]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f47f aebc 	bne.w	800c524 <_dtoa_r+0x68c>
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	2205      	movs	r2, #5
 800c7b0:	4658      	mov	r0, fp
 800c7b2:	f000 fc99 	bl	800d0e8 <__multadd>
 800c7b6:	4601      	mov	r1, r0
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	4648      	mov	r0, r9
 800c7bc:	f000 feaa 	bl	800d514 <__mcmp>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	f77f aeaf 	ble.w	800c524 <_dtoa_r+0x68c>
 800c7c6:	2331      	movs	r3, #49	@ 0x31
 800c7c8:	4656      	mov	r6, sl
 800c7ca:	f806 3b01 	strb.w	r3, [r6], #1
 800c7ce:	9b04      	ldr	r3, [sp, #16]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	9304      	str	r3, [sp, #16]
 800c7d4:	e6aa      	b.n	800c52c <_dtoa_r+0x694>
 800c7d6:	9c07      	ldr	r4, [sp, #28]
 800c7d8:	9704      	str	r7, [sp, #16]
 800c7da:	4625      	mov	r5, r4
 800c7dc:	e7f3      	b.n	800c7c6 <_dtoa_r+0x92e>
 800c7de:	9b07      	ldr	r3, [sp, #28]
 800c7e0:	9308      	str	r3, [sp, #32]
 800c7e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 8104 	beq.w	800c9f2 <_dtoa_r+0xb5a>
 800c7ea:	2e00      	cmp	r6, #0
 800c7ec:	dd05      	ble.n	800c7fa <_dtoa_r+0x962>
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	4632      	mov	r2, r6
 800c7f2:	4658      	mov	r0, fp
 800c7f4:	f000 fe22 	bl	800d43c <__lshift>
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d05a      	beq.n	800c8b6 <_dtoa_r+0xa1e>
 800c800:	4658      	mov	r0, fp
 800c802:	6869      	ldr	r1, [r5, #4]
 800c804:	f000 fc0e 	bl	800d024 <_Balloc>
 800c808:	4606      	mov	r6, r0
 800c80a:	b928      	cbnz	r0, 800c818 <_dtoa_r+0x980>
 800c80c:	4602      	mov	r2, r0
 800c80e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c812:	4b83      	ldr	r3, [pc, #524]	@ (800ca20 <_dtoa_r+0xb88>)
 800c814:	f7ff bb54 	b.w	800bec0 <_dtoa_r+0x28>
 800c818:	692a      	ldr	r2, [r5, #16]
 800c81a:	f105 010c 	add.w	r1, r5, #12
 800c81e:	3202      	adds	r2, #2
 800c820:	0092      	lsls	r2, r2, #2
 800c822:	300c      	adds	r0, #12
 800c824:	f7ff faa1 	bl	800bd6a <memcpy>
 800c828:	2201      	movs	r2, #1
 800c82a:	4631      	mov	r1, r6
 800c82c:	4658      	mov	r0, fp
 800c82e:	f000 fe05 	bl	800d43c <__lshift>
 800c832:	462f      	mov	r7, r5
 800c834:	4605      	mov	r5, r0
 800c836:	f10a 0301 	add.w	r3, sl, #1
 800c83a:	9307      	str	r3, [sp, #28]
 800c83c:	9b08      	ldr	r3, [sp, #32]
 800c83e:	4453      	add	r3, sl
 800c840:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c842:	9b02      	ldr	r3, [sp, #8]
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	930a      	str	r3, [sp, #40]	@ 0x28
 800c84a:	9b07      	ldr	r3, [sp, #28]
 800c84c:	4621      	mov	r1, r4
 800c84e:	3b01      	subs	r3, #1
 800c850:	4648      	mov	r0, r9
 800c852:	9302      	str	r3, [sp, #8]
 800c854:	f7ff fa97 	bl	800bd86 <quorem>
 800c858:	4639      	mov	r1, r7
 800c85a:	9008      	str	r0, [sp, #32]
 800c85c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c860:	4648      	mov	r0, r9
 800c862:	f000 fe57 	bl	800d514 <__mcmp>
 800c866:	462a      	mov	r2, r5
 800c868:	9009      	str	r0, [sp, #36]	@ 0x24
 800c86a:	4621      	mov	r1, r4
 800c86c:	4658      	mov	r0, fp
 800c86e:	f000 fe6d 	bl	800d54c <__mdiff>
 800c872:	68c2      	ldr	r2, [r0, #12]
 800c874:	4606      	mov	r6, r0
 800c876:	bb02      	cbnz	r2, 800c8ba <_dtoa_r+0xa22>
 800c878:	4601      	mov	r1, r0
 800c87a:	4648      	mov	r0, r9
 800c87c:	f000 fe4a 	bl	800d514 <__mcmp>
 800c880:	4602      	mov	r2, r0
 800c882:	4631      	mov	r1, r6
 800c884:	4658      	mov	r0, fp
 800c886:	920c      	str	r2, [sp, #48]	@ 0x30
 800c888:	f000 fc0c 	bl	800d0a4 <_Bfree>
 800c88c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c88e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c890:	9e07      	ldr	r6, [sp, #28]
 800c892:	ea43 0102 	orr.w	r1, r3, r2
 800c896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c898:	4319      	orrs	r1, r3
 800c89a:	d110      	bne.n	800c8be <_dtoa_r+0xa26>
 800c89c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c8a0:	d029      	beq.n	800c8f6 <_dtoa_r+0xa5e>
 800c8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	dd02      	ble.n	800c8ae <_dtoa_r+0xa16>
 800c8a8:	9b08      	ldr	r3, [sp, #32]
 800c8aa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c8ae:	9b02      	ldr	r3, [sp, #8]
 800c8b0:	f883 8000 	strb.w	r8, [r3]
 800c8b4:	e63b      	b.n	800c52e <_dtoa_r+0x696>
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	e7bb      	b.n	800c832 <_dtoa_r+0x99a>
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	e7e1      	b.n	800c882 <_dtoa_r+0x9ea>
 800c8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	db04      	blt.n	800c8ce <_dtoa_r+0xa36>
 800c8c4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c8c6:	430b      	orrs	r3, r1
 800c8c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c8ca:	430b      	orrs	r3, r1
 800c8cc:	d120      	bne.n	800c910 <_dtoa_r+0xa78>
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	dded      	ble.n	800c8ae <_dtoa_r+0xa16>
 800c8d2:	4649      	mov	r1, r9
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	4658      	mov	r0, fp
 800c8d8:	f000 fdb0 	bl	800d43c <__lshift>
 800c8dc:	4621      	mov	r1, r4
 800c8de:	4681      	mov	r9, r0
 800c8e0:	f000 fe18 	bl	800d514 <__mcmp>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	dc03      	bgt.n	800c8f0 <_dtoa_r+0xa58>
 800c8e8:	d1e1      	bne.n	800c8ae <_dtoa_r+0xa16>
 800c8ea:	f018 0f01 	tst.w	r8, #1
 800c8ee:	d0de      	beq.n	800c8ae <_dtoa_r+0xa16>
 800c8f0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c8f4:	d1d8      	bne.n	800c8a8 <_dtoa_r+0xa10>
 800c8f6:	2339      	movs	r3, #57	@ 0x39
 800c8f8:	9a02      	ldr	r2, [sp, #8]
 800c8fa:	7013      	strb	r3, [r2, #0]
 800c8fc:	4633      	mov	r3, r6
 800c8fe:	461e      	mov	r6, r3
 800c900:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c904:	3b01      	subs	r3, #1
 800c906:	2a39      	cmp	r2, #57	@ 0x39
 800c908:	d052      	beq.n	800c9b0 <_dtoa_r+0xb18>
 800c90a:	3201      	adds	r2, #1
 800c90c:	701a      	strb	r2, [r3, #0]
 800c90e:	e60e      	b.n	800c52e <_dtoa_r+0x696>
 800c910:	2a00      	cmp	r2, #0
 800c912:	dd07      	ble.n	800c924 <_dtoa_r+0xa8c>
 800c914:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c918:	d0ed      	beq.n	800c8f6 <_dtoa_r+0xa5e>
 800c91a:	9a02      	ldr	r2, [sp, #8]
 800c91c:	f108 0301 	add.w	r3, r8, #1
 800c920:	7013      	strb	r3, [r2, #0]
 800c922:	e604      	b.n	800c52e <_dtoa_r+0x696>
 800c924:	9b07      	ldr	r3, [sp, #28]
 800c926:	9a07      	ldr	r2, [sp, #28]
 800c928:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c92c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c92e:	4293      	cmp	r3, r2
 800c930:	d028      	beq.n	800c984 <_dtoa_r+0xaec>
 800c932:	4649      	mov	r1, r9
 800c934:	2300      	movs	r3, #0
 800c936:	220a      	movs	r2, #10
 800c938:	4658      	mov	r0, fp
 800c93a:	f000 fbd5 	bl	800d0e8 <__multadd>
 800c93e:	42af      	cmp	r7, r5
 800c940:	4681      	mov	r9, r0
 800c942:	f04f 0300 	mov.w	r3, #0
 800c946:	f04f 020a 	mov.w	r2, #10
 800c94a:	4639      	mov	r1, r7
 800c94c:	4658      	mov	r0, fp
 800c94e:	d107      	bne.n	800c960 <_dtoa_r+0xac8>
 800c950:	f000 fbca 	bl	800d0e8 <__multadd>
 800c954:	4607      	mov	r7, r0
 800c956:	4605      	mov	r5, r0
 800c958:	9b07      	ldr	r3, [sp, #28]
 800c95a:	3301      	adds	r3, #1
 800c95c:	9307      	str	r3, [sp, #28]
 800c95e:	e774      	b.n	800c84a <_dtoa_r+0x9b2>
 800c960:	f000 fbc2 	bl	800d0e8 <__multadd>
 800c964:	4629      	mov	r1, r5
 800c966:	4607      	mov	r7, r0
 800c968:	2300      	movs	r3, #0
 800c96a:	220a      	movs	r2, #10
 800c96c:	4658      	mov	r0, fp
 800c96e:	f000 fbbb 	bl	800d0e8 <__multadd>
 800c972:	4605      	mov	r5, r0
 800c974:	e7f0      	b.n	800c958 <_dtoa_r+0xac0>
 800c976:	9b08      	ldr	r3, [sp, #32]
 800c978:	2700      	movs	r7, #0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	bfcc      	ite	gt
 800c97e:	461e      	movgt	r6, r3
 800c980:	2601      	movle	r6, #1
 800c982:	4456      	add	r6, sl
 800c984:	4649      	mov	r1, r9
 800c986:	2201      	movs	r2, #1
 800c988:	4658      	mov	r0, fp
 800c98a:	f000 fd57 	bl	800d43c <__lshift>
 800c98e:	4621      	mov	r1, r4
 800c990:	4681      	mov	r9, r0
 800c992:	f000 fdbf 	bl	800d514 <__mcmp>
 800c996:	2800      	cmp	r0, #0
 800c998:	dcb0      	bgt.n	800c8fc <_dtoa_r+0xa64>
 800c99a:	d102      	bne.n	800c9a2 <_dtoa_r+0xb0a>
 800c99c:	f018 0f01 	tst.w	r8, #1
 800c9a0:	d1ac      	bne.n	800c8fc <_dtoa_r+0xa64>
 800c9a2:	4633      	mov	r3, r6
 800c9a4:	461e      	mov	r6, r3
 800c9a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9aa:	2a30      	cmp	r2, #48	@ 0x30
 800c9ac:	d0fa      	beq.n	800c9a4 <_dtoa_r+0xb0c>
 800c9ae:	e5be      	b.n	800c52e <_dtoa_r+0x696>
 800c9b0:	459a      	cmp	sl, r3
 800c9b2:	d1a4      	bne.n	800c8fe <_dtoa_r+0xa66>
 800c9b4:	9b04      	ldr	r3, [sp, #16]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	9304      	str	r3, [sp, #16]
 800c9ba:	2331      	movs	r3, #49	@ 0x31
 800c9bc:	f88a 3000 	strb.w	r3, [sl]
 800c9c0:	e5b5      	b.n	800c52e <_dtoa_r+0x696>
 800c9c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c9c4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ca24 <_dtoa_r+0xb8c>
 800c9c8:	b11b      	cbz	r3, 800c9d2 <_dtoa_r+0xb3a>
 800c9ca:	f10a 0308 	add.w	r3, sl, #8
 800c9ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c9d0:	6013      	str	r3, [r2, #0]
 800c9d2:	4650      	mov	r0, sl
 800c9d4:	b017      	add	sp, #92	@ 0x5c
 800c9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	f77f ae3d 	ble.w	800c65c <_dtoa_r+0x7c4>
 800c9e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	e65b      	b.n	800c6a2 <_dtoa_r+0x80a>
 800c9ea:	9b08      	ldr	r3, [sp, #32]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f77f aed6 	ble.w	800c79e <_dtoa_r+0x906>
 800c9f2:	4656      	mov	r6, sl
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4648      	mov	r0, r9
 800c9f8:	f7ff f9c5 	bl	800bd86 <quorem>
 800c9fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca00:	9b08      	ldr	r3, [sp, #32]
 800ca02:	f806 8b01 	strb.w	r8, [r6], #1
 800ca06:	eba6 020a 	sub.w	r2, r6, sl
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	ddb3      	ble.n	800c976 <_dtoa_r+0xade>
 800ca0e:	4649      	mov	r1, r9
 800ca10:	2300      	movs	r3, #0
 800ca12:	220a      	movs	r2, #10
 800ca14:	4658      	mov	r0, fp
 800ca16:	f000 fb67 	bl	800d0e8 <__multadd>
 800ca1a:	4681      	mov	r9, r0
 800ca1c:	e7ea      	b.n	800c9f4 <_dtoa_r+0xb5c>
 800ca1e:	bf00      	nop
 800ca20:	0800ea16 	.word	0x0800ea16
 800ca24:	0800e99a 	.word	0x0800e99a

0800ca28 <_free_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	d040      	beq.n	800cab2 <_free_r+0x8a>
 800ca30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca34:	1f0c      	subs	r4, r1, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	bfb8      	it	lt
 800ca3a:	18e4      	addlt	r4, r4, r3
 800ca3c:	f000 fae6 	bl	800d00c <__malloc_lock>
 800ca40:	4a1c      	ldr	r2, [pc, #112]	@ (800cab4 <_free_r+0x8c>)
 800ca42:	6813      	ldr	r3, [r2, #0]
 800ca44:	b933      	cbnz	r3, 800ca54 <_free_r+0x2c>
 800ca46:	6063      	str	r3, [r4, #4]
 800ca48:	6014      	str	r4, [r2, #0]
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca50:	f000 bae2 	b.w	800d018 <__malloc_unlock>
 800ca54:	42a3      	cmp	r3, r4
 800ca56:	d908      	bls.n	800ca6a <_free_r+0x42>
 800ca58:	6820      	ldr	r0, [r4, #0]
 800ca5a:	1821      	adds	r1, r4, r0
 800ca5c:	428b      	cmp	r3, r1
 800ca5e:	bf01      	itttt	eq
 800ca60:	6819      	ldreq	r1, [r3, #0]
 800ca62:	685b      	ldreq	r3, [r3, #4]
 800ca64:	1809      	addeq	r1, r1, r0
 800ca66:	6021      	streq	r1, [r4, #0]
 800ca68:	e7ed      	b.n	800ca46 <_free_r+0x1e>
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	b10b      	cbz	r3, 800ca74 <_free_r+0x4c>
 800ca70:	42a3      	cmp	r3, r4
 800ca72:	d9fa      	bls.n	800ca6a <_free_r+0x42>
 800ca74:	6811      	ldr	r1, [r2, #0]
 800ca76:	1850      	adds	r0, r2, r1
 800ca78:	42a0      	cmp	r0, r4
 800ca7a:	d10b      	bne.n	800ca94 <_free_r+0x6c>
 800ca7c:	6820      	ldr	r0, [r4, #0]
 800ca7e:	4401      	add	r1, r0
 800ca80:	1850      	adds	r0, r2, r1
 800ca82:	4283      	cmp	r3, r0
 800ca84:	6011      	str	r1, [r2, #0]
 800ca86:	d1e0      	bne.n	800ca4a <_free_r+0x22>
 800ca88:	6818      	ldr	r0, [r3, #0]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	4408      	add	r0, r1
 800ca8e:	6010      	str	r0, [r2, #0]
 800ca90:	6053      	str	r3, [r2, #4]
 800ca92:	e7da      	b.n	800ca4a <_free_r+0x22>
 800ca94:	d902      	bls.n	800ca9c <_free_r+0x74>
 800ca96:	230c      	movs	r3, #12
 800ca98:	602b      	str	r3, [r5, #0]
 800ca9a:	e7d6      	b.n	800ca4a <_free_r+0x22>
 800ca9c:	6820      	ldr	r0, [r4, #0]
 800ca9e:	1821      	adds	r1, r4, r0
 800caa0:	428b      	cmp	r3, r1
 800caa2:	bf01      	itttt	eq
 800caa4:	6819      	ldreq	r1, [r3, #0]
 800caa6:	685b      	ldreq	r3, [r3, #4]
 800caa8:	1809      	addeq	r1, r1, r0
 800caaa:	6021      	streq	r1, [r4, #0]
 800caac:	6063      	str	r3, [r4, #4]
 800caae:	6054      	str	r4, [r2, #4]
 800cab0:	e7cb      	b.n	800ca4a <_free_r+0x22>
 800cab2:	bd38      	pop	{r3, r4, r5, pc}
 800cab4:	2000167c 	.word	0x2000167c

0800cab8 <__ssputs_r>:
 800cab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cabc:	461f      	mov	r7, r3
 800cabe:	688e      	ldr	r6, [r1, #8]
 800cac0:	4682      	mov	sl, r0
 800cac2:	42be      	cmp	r6, r7
 800cac4:	460c      	mov	r4, r1
 800cac6:	4690      	mov	r8, r2
 800cac8:	680b      	ldr	r3, [r1, #0]
 800caca:	d82d      	bhi.n	800cb28 <__ssputs_r+0x70>
 800cacc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cad0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cad4:	d026      	beq.n	800cb24 <__ssputs_r+0x6c>
 800cad6:	6965      	ldr	r5, [r4, #20]
 800cad8:	6909      	ldr	r1, [r1, #16]
 800cada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cade:	eba3 0901 	sub.w	r9, r3, r1
 800cae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cae6:	1c7b      	adds	r3, r7, #1
 800cae8:	444b      	add	r3, r9
 800caea:	106d      	asrs	r5, r5, #1
 800caec:	429d      	cmp	r5, r3
 800caee:	bf38      	it	cc
 800caf0:	461d      	movcc	r5, r3
 800caf2:	0553      	lsls	r3, r2, #21
 800caf4:	d527      	bpl.n	800cb46 <__ssputs_r+0x8e>
 800caf6:	4629      	mov	r1, r5
 800caf8:	f000 f960 	bl	800cdbc <_malloc_r>
 800cafc:	4606      	mov	r6, r0
 800cafe:	b360      	cbz	r0, 800cb5a <__ssputs_r+0xa2>
 800cb00:	464a      	mov	r2, r9
 800cb02:	6921      	ldr	r1, [r4, #16]
 800cb04:	f7ff f931 	bl	800bd6a <memcpy>
 800cb08:	89a3      	ldrh	r3, [r4, #12]
 800cb0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb12:	81a3      	strh	r3, [r4, #12]
 800cb14:	6126      	str	r6, [r4, #16]
 800cb16:	444e      	add	r6, r9
 800cb18:	6026      	str	r6, [r4, #0]
 800cb1a:	463e      	mov	r6, r7
 800cb1c:	6165      	str	r5, [r4, #20]
 800cb1e:	eba5 0509 	sub.w	r5, r5, r9
 800cb22:	60a5      	str	r5, [r4, #8]
 800cb24:	42be      	cmp	r6, r7
 800cb26:	d900      	bls.n	800cb2a <__ssputs_r+0x72>
 800cb28:	463e      	mov	r6, r7
 800cb2a:	4632      	mov	r2, r6
 800cb2c:	4641      	mov	r1, r8
 800cb2e:	6820      	ldr	r0, [r4, #0]
 800cb30:	f000 fe69 	bl	800d806 <memmove>
 800cb34:	2000      	movs	r0, #0
 800cb36:	68a3      	ldr	r3, [r4, #8]
 800cb38:	1b9b      	subs	r3, r3, r6
 800cb3a:	60a3      	str	r3, [r4, #8]
 800cb3c:	6823      	ldr	r3, [r4, #0]
 800cb3e:	4433      	add	r3, r6
 800cb40:	6023      	str	r3, [r4, #0]
 800cb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb46:	462a      	mov	r2, r5
 800cb48:	f000 fe2f 	bl	800d7aa <_realloc_r>
 800cb4c:	4606      	mov	r6, r0
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d1e0      	bne.n	800cb14 <__ssputs_r+0x5c>
 800cb52:	4650      	mov	r0, sl
 800cb54:	6921      	ldr	r1, [r4, #16]
 800cb56:	f7ff ff67 	bl	800ca28 <_free_r>
 800cb5a:	230c      	movs	r3, #12
 800cb5c:	f8ca 3000 	str.w	r3, [sl]
 800cb60:	89a3      	ldrh	r3, [r4, #12]
 800cb62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb6a:	81a3      	strh	r3, [r4, #12]
 800cb6c:	e7e9      	b.n	800cb42 <__ssputs_r+0x8a>
	...

0800cb70 <_svfiprintf_r>:
 800cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	4698      	mov	r8, r3
 800cb76:	898b      	ldrh	r3, [r1, #12]
 800cb78:	4607      	mov	r7, r0
 800cb7a:	061b      	lsls	r3, r3, #24
 800cb7c:	460d      	mov	r5, r1
 800cb7e:	4614      	mov	r4, r2
 800cb80:	b09d      	sub	sp, #116	@ 0x74
 800cb82:	d510      	bpl.n	800cba6 <_svfiprintf_r+0x36>
 800cb84:	690b      	ldr	r3, [r1, #16]
 800cb86:	b973      	cbnz	r3, 800cba6 <_svfiprintf_r+0x36>
 800cb88:	2140      	movs	r1, #64	@ 0x40
 800cb8a:	f000 f917 	bl	800cdbc <_malloc_r>
 800cb8e:	6028      	str	r0, [r5, #0]
 800cb90:	6128      	str	r0, [r5, #16]
 800cb92:	b930      	cbnz	r0, 800cba2 <_svfiprintf_r+0x32>
 800cb94:	230c      	movs	r3, #12
 800cb96:	603b      	str	r3, [r7, #0]
 800cb98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb9c:	b01d      	add	sp, #116	@ 0x74
 800cb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba2:	2340      	movs	r3, #64	@ 0x40
 800cba4:	616b      	str	r3, [r5, #20]
 800cba6:	2300      	movs	r3, #0
 800cba8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbaa:	2320      	movs	r3, #32
 800cbac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbb0:	2330      	movs	r3, #48	@ 0x30
 800cbb2:	f04f 0901 	mov.w	r9, #1
 800cbb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cd54 <_svfiprintf_r+0x1e4>
 800cbbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbc2:	4623      	mov	r3, r4
 800cbc4:	469a      	mov	sl, r3
 800cbc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbca:	b10a      	cbz	r2, 800cbd0 <_svfiprintf_r+0x60>
 800cbcc:	2a25      	cmp	r2, #37	@ 0x25
 800cbce:	d1f9      	bne.n	800cbc4 <_svfiprintf_r+0x54>
 800cbd0:	ebba 0b04 	subs.w	fp, sl, r4
 800cbd4:	d00b      	beq.n	800cbee <_svfiprintf_r+0x7e>
 800cbd6:	465b      	mov	r3, fp
 800cbd8:	4622      	mov	r2, r4
 800cbda:	4629      	mov	r1, r5
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f7ff ff6b 	bl	800cab8 <__ssputs_r>
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	f000 80a7 	beq.w	800cd36 <_svfiprintf_r+0x1c6>
 800cbe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbea:	445a      	add	r2, fp
 800cbec:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbee:	f89a 3000 	ldrb.w	r3, [sl]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f000 809f 	beq.w	800cd36 <_svfiprintf_r+0x1c6>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cbfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc02:	f10a 0a01 	add.w	sl, sl, #1
 800cc06:	9304      	str	r3, [sp, #16]
 800cc08:	9307      	str	r3, [sp, #28]
 800cc0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc0e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc10:	4654      	mov	r4, sl
 800cc12:	2205      	movs	r2, #5
 800cc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc18:	484e      	ldr	r0, [pc, #312]	@ (800cd54 <_svfiprintf_r+0x1e4>)
 800cc1a:	f7ff f898 	bl	800bd4e <memchr>
 800cc1e:	9a04      	ldr	r2, [sp, #16]
 800cc20:	b9d8      	cbnz	r0, 800cc5a <_svfiprintf_r+0xea>
 800cc22:	06d0      	lsls	r0, r2, #27
 800cc24:	bf44      	itt	mi
 800cc26:	2320      	movmi	r3, #32
 800cc28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc2c:	0711      	lsls	r1, r2, #28
 800cc2e:	bf44      	itt	mi
 800cc30:	232b      	movmi	r3, #43	@ 0x2b
 800cc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc36:	f89a 3000 	ldrb.w	r3, [sl]
 800cc3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc3c:	d015      	beq.n	800cc6a <_svfiprintf_r+0xfa>
 800cc3e:	4654      	mov	r4, sl
 800cc40:	2000      	movs	r0, #0
 800cc42:	f04f 0c0a 	mov.w	ip, #10
 800cc46:	9a07      	ldr	r2, [sp, #28]
 800cc48:	4621      	mov	r1, r4
 800cc4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc4e:	3b30      	subs	r3, #48	@ 0x30
 800cc50:	2b09      	cmp	r3, #9
 800cc52:	d94b      	bls.n	800ccec <_svfiprintf_r+0x17c>
 800cc54:	b1b0      	cbz	r0, 800cc84 <_svfiprintf_r+0x114>
 800cc56:	9207      	str	r2, [sp, #28]
 800cc58:	e014      	b.n	800cc84 <_svfiprintf_r+0x114>
 800cc5a:	eba0 0308 	sub.w	r3, r0, r8
 800cc5e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc62:	4313      	orrs	r3, r2
 800cc64:	46a2      	mov	sl, r4
 800cc66:	9304      	str	r3, [sp, #16]
 800cc68:	e7d2      	b.n	800cc10 <_svfiprintf_r+0xa0>
 800cc6a:	9b03      	ldr	r3, [sp, #12]
 800cc6c:	1d19      	adds	r1, r3, #4
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	9103      	str	r1, [sp, #12]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	bfbb      	ittet	lt
 800cc76:	425b      	neglt	r3, r3
 800cc78:	f042 0202 	orrlt.w	r2, r2, #2
 800cc7c:	9307      	strge	r3, [sp, #28]
 800cc7e:	9307      	strlt	r3, [sp, #28]
 800cc80:	bfb8      	it	lt
 800cc82:	9204      	strlt	r2, [sp, #16]
 800cc84:	7823      	ldrb	r3, [r4, #0]
 800cc86:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc88:	d10a      	bne.n	800cca0 <_svfiprintf_r+0x130>
 800cc8a:	7863      	ldrb	r3, [r4, #1]
 800cc8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc8e:	d132      	bne.n	800ccf6 <_svfiprintf_r+0x186>
 800cc90:	9b03      	ldr	r3, [sp, #12]
 800cc92:	3402      	adds	r4, #2
 800cc94:	1d1a      	adds	r2, r3, #4
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	9203      	str	r2, [sp, #12]
 800cc9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc9e:	9305      	str	r3, [sp, #20]
 800cca0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cd58 <_svfiprintf_r+0x1e8>
 800cca4:	2203      	movs	r2, #3
 800cca6:	4650      	mov	r0, sl
 800cca8:	7821      	ldrb	r1, [r4, #0]
 800ccaa:	f7ff f850 	bl	800bd4e <memchr>
 800ccae:	b138      	cbz	r0, 800ccc0 <_svfiprintf_r+0x150>
 800ccb0:	2240      	movs	r2, #64	@ 0x40
 800ccb2:	9b04      	ldr	r3, [sp, #16]
 800ccb4:	eba0 000a 	sub.w	r0, r0, sl
 800ccb8:	4082      	lsls	r2, r0
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	3401      	adds	r4, #1
 800ccbe:	9304      	str	r3, [sp, #16]
 800ccc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc4:	2206      	movs	r2, #6
 800ccc6:	4825      	ldr	r0, [pc, #148]	@ (800cd5c <_svfiprintf_r+0x1ec>)
 800ccc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cccc:	f7ff f83f 	bl	800bd4e <memchr>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d036      	beq.n	800cd42 <_svfiprintf_r+0x1d2>
 800ccd4:	4b22      	ldr	r3, [pc, #136]	@ (800cd60 <_svfiprintf_r+0x1f0>)
 800ccd6:	bb1b      	cbnz	r3, 800cd20 <_svfiprintf_r+0x1b0>
 800ccd8:	9b03      	ldr	r3, [sp, #12]
 800ccda:	3307      	adds	r3, #7
 800ccdc:	f023 0307 	bic.w	r3, r3, #7
 800cce0:	3308      	adds	r3, #8
 800cce2:	9303      	str	r3, [sp, #12]
 800cce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce6:	4433      	add	r3, r6
 800cce8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccea:	e76a      	b.n	800cbc2 <_svfiprintf_r+0x52>
 800ccec:	460c      	mov	r4, r1
 800ccee:	2001      	movs	r0, #1
 800ccf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccf4:	e7a8      	b.n	800cc48 <_svfiprintf_r+0xd8>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	f04f 0c0a 	mov.w	ip, #10
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	3401      	adds	r4, #1
 800cd00:	9305      	str	r3, [sp, #20]
 800cd02:	4620      	mov	r0, r4
 800cd04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd08:	3a30      	subs	r2, #48	@ 0x30
 800cd0a:	2a09      	cmp	r2, #9
 800cd0c:	d903      	bls.n	800cd16 <_svfiprintf_r+0x1a6>
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d0c6      	beq.n	800cca0 <_svfiprintf_r+0x130>
 800cd12:	9105      	str	r1, [sp, #20]
 800cd14:	e7c4      	b.n	800cca0 <_svfiprintf_r+0x130>
 800cd16:	4604      	mov	r4, r0
 800cd18:	2301      	movs	r3, #1
 800cd1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd1e:	e7f0      	b.n	800cd02 <_svfiprintf_r+0x192>
 800cd20:	ab03      	add	r3, sp, #12
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	462a      	mov	r2, r5
 800cd26:	4638      	mov	r0, r7
 800cd28:	4b0e      	ldr	r3, [pc, #56]	@ (800cd64 <_svfiprintf_r+0x1f4>)
 800cd2a:	a904      	add	r1, sp, #16
 800cd2c:	f7fe faac 	bl	800b288 <_printf_float>
 800cd30:	1c42      	adds	r2, r0, #1
 800cd32:	4606      	mov	r6, r0
 800cd34:	d1d6      	bne.n	800cce4 <_svfiprintf_r+0x174>
 800cd36:	89ab      	ldrh	r3, [r5, #12]
 800cd38:	065b      	lsls	r3, r3, #25
 800cd3a:	f53f af2d 	bmi.w	800cb98 <_svfiprintf_r+0x28>
 800cd3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd40:	e72c      	b.n	800cb9c <_svfiprintf_r+0x2c>
 800cd42:	ab03      	add	r3, sp, #12
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	462a      	mov	r2, r5
 800cd48:	4638      	mov	r0, r7
 800cd4a:	4b06      	ldr	r3, [pc, #24]	@ (800cd64 <_svfiprintf_r+0x1f4>)
 800cd4c:	a904      	add	r1, sp, #16
 800cd4e:	f7fe fd39 	bl	800b7c4 <_printf_i>
 800cd52:	e7ed      	b.n	800cd30 <_svfiprintf_r+0x1c0>
 800cd54:	0800ea27 	.word	0x0800ea27
 800cd58:	0800ea2d 	.word	0x0800ea2d
 800cd5c:	0800ea31 	.word	0x0800ea31
 800cd60:	0800b289 	.word	0x0800b289
 800cd64:	0800cab9 	.word	0x0800cab9

0800cd68 <malloc>:
 800cd68:	4b02      	ldr	r3, [pc, #8]	@ (800cd74 <malloc+0xc>)
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	6818      	ldr	r0, [r3, #0]
 800cd6e:	f000 b825 	b.w	800cdbc <_malloc_r>
 800cd72:	bf00      	nop
 800cd74:	20000054 	.word	0x20000054

0800cd78 <sbrk_aligned>:
 800cd78:	b570      	push	{r4, r5, r6, lr}
 800cd7a:	4e0f      	ldr	r6, [pc, #60]	@ (800cdb8 <sbrk_aligned+0x40>)
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	6831      	ldr	r1, [r6, #0]
 800cd80:	4605      	mov	r5, r0
 800cd82:	b911      	cbnz	r1, 800cd8a <sbrk_aligned+0x12>
 800cd84:	f000 fd8e 	bl	800d8a4 <_sbrk_r>
 800cd88:	6030      	str	r0, [r6, #0]
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	f000 fd89 	bl	800d8a4 <_sbrk_r>
 800cd92:	1c43      	adds	r3, r0, #1
 800cd94:	d103      	bne.n	800cd9e <sbrk_aligned+0x26>
 800cd96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	bd70      	pop	{r4, r5, r6, pc}
 800cd9e:	1cc4      	adds	r4, r0, #3
 800cda0:	f024 0403 	bic.w	r4, r4, #3
 800cda4:	42a0      	cmp	r0, r4
 800cda6:	d0f8      	beq.n	800cd9a <sbrk_aligned+0x22>
 800cda8:	1a21      	subs	r1, r4, r0
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f000 fd7a 	bl	800d8a4 <_sbrk_r>
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	d1f2      	bne.n	800cd9a <sbrk_aligned+0x22>
 800cdb4:	e7ef      	b.n	800cd96 <sbrk_aligned+0x1e>
 800cdb6:	bf00      	nop
 800cdb8:	20001678 	.word	0x20001678

0800cdbc <_malloc_r>:
 800cdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc0:	1ccd      	adds	r5, r1, #3
 800cdc2:	f025 0503 	bic.w	r5, r5, #3
 800cdc6:	3508      	adds	r5, #8
 800cdc8:	2d0c      	cmp	r5, #12
 800cdca:	bf38      	it	cc
 800cdcc:	250c      	movcc	r5, #12
 800cdce:	2d00      	cmp	r5, #0
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	db01      	blt.n	800cdd8 <_malloc_r+0x1c>
 800cdd4:	42a9      	cmp	r1, r5
 800cdd6:	d904      	bls.n	800cde2 <_malloc_r+0x26>
 800cdd8:	230c      	movs	r3, #12
 800cdda:	6033      	str	r3, [r6, #0]
 800cddc:	2000      	movs	r0, #0
 800cdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cde2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ceb8 <_malloc_r+0xfc>
 800cde6:	f000 f911 	bl	800d00c <__malloc_lock>
 800cdea:	f8d8 3000 	ldr.w	r3, [r8]
 800cdee:	461c      	mov	r4, r3
 800cdf0:	bb44      	cbnz	r4, 800ce44 <_malloc_r+0x88>
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f7ff ffbf 	bl	800cd78 <sbrk_aligned>
 800cdfa:	1c43      	adds	r3, r0, #1
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	d158      	bne.n	800ceb2 <_malloc_r+0xf6>
 800ce00:	f8d8 4000 	ldr.w	r4, [r8]
 800ce04:	4627      	mov	r7, r4
 800ce06:	2f00      	cmp	r7, #0
 800ce08:	d143      	bne.n	800ce92 <_malloc_r+0xd6>
 800ce0a:	2c00      	cmp	r4, #0
 800ce0c:	d04b      	beq.n	800cea6 <_malloc_r+0xea>
 800ce0e:	6823      	ldr	r3, [r4, #0]
 800ce10:	4639      	mov	r1, r7
 800ce12:	4630      	mov	r0, r6
 800ce14:	eb04 0903 	add.w	r9, r4, r3
 800ce18:	f000 fd44 	bl	800d8a4 <_sbrk_r>
 800ce1c:	4581      	cmp	r9, r0
 800ce1e:	d142      	bne.n	800cea6 <_malloc_r+0xea>
 800ce20:	6821      	ldr	r1, [r4, #0]
 800ce22:	4630      	mov	r0, r6
 800ce24:	1a6d      	subs	r5, r5, r1
 800ce26:	4629      	mov	r1, r5
 800ce28:	f7ff ffa6 	bl	800cd78 <sbrk_aligned>
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	d03a      	beq.n	800cea6 <_malloc_r+0xea>
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	442b      	add	r3, r5
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	f8d8 3000 	ldr.w	r3, [r8]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	bb62      	cbnz	r2, 800ce98 <_malloc_r+0xdc>
 800ce3e:	f8c8 7000 	str.w	r7, [r8]
 800ce42:	e00f      	b.n	800ce64 <_malloc_r+0xa8>
 800ce44:	6822      	ldr	r2, [r4, #0]
 800ce46:	1b52      	subs	r2, r2, r5
 800ce48:	d420      	bmi.n	800ce8c <_malloc_r+0xd0>
 800ce4a:	2a0b      	cmp	r2, #11
 800ce4c:	d917      	bls.n	800ce7e <_malloc_r+0xc2>
 800ce4e:	1961      	adds	r1, r4, r5
 800ce50:	42a3      	cmp	r3, r4
 800ce52:	6025      	str	r5, [r4, #0]
 800ce54:	bf18      	it	ne
 800ce56:	6059      	strne	r1, [r3, #4]
 800ce58:	6863      	ldr	r3, [r4, #4]
 800ce5a:	bf08      	it	eq
 800ce5c:	f8c8 1000 	streq.w	r1, [r8]
 800ce60:	5162      	str	r2, [r4, r5]
 800ce62:	604b      	str	r3, [r1, #4]
 800ce64:	4630      	mov	r0, r6
 800ce66:	f000 f8d7 	bl	800d018 <__malloc_unlock>
 800ce6a:	f104 000b 	add.w	r0, r4, #11
 800ce6e:	1d23      	adds	r3, r4, #4
 800ce70:	f020 0007 	bic.w	r0, r0, #7
 800ce74:	1ac2      	subs	r2, r0, r3
 800ce76:	bf1c      	itt	ne
 800ce78:	1a1b      	subne	r3, r3, r0
 800ce7a:	50a3      	strne	r3, [r4, r2]
 800ce7c:	e7af      	b.n	800cdde <_malloc_r+0x22>
 800ce7e:	6862      	ldr	r2, [r4, #4]
 800ce80:	42a3      	cmp	r3, r4
 800ce82:	bf0c      	ite	eq
 800ce84:	f8c8 2000 	streq.w	r2, [r8]
 800ce88:	605a      	strne	r2, [r3, #4]
 800ce8a:	e7eb      	b.n	800ce64 <_malloc_r+0xa8>
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	6864      	ldr	r4, [r4, #4]
 800ce90:	e7ae      	b.n	800cdf0 <_malloc_r+0x34>
 800ce92:	463c      	mov	r4, r7
 800ce94:	687f      	ldr	r7, [r7, #4]
 800ce96:	e7b6      	b.n	800ce06 <_malloc_r+0x4a>
 800ce98:	461a      	mov	r2, r3
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	42a3      	cmp	r3, r4
 800ce9e:	d1fb      	bne.n	800ce98 <_malloc_r+0xdc>
 800cea0:	2300      	movs	r3, #0
 800cea2:	6053      	str	r3, [r2, #4]
 800cea4:	e7de      	b.n	800ce64 <_malloc_r+0xa8>
 800cea6:	230c      	movs	r3, #12
 800cea8:	4630      	mov	r0, r6
 800ceaa:	6033      	str	r3, [r6, #0]
 800ceac:	f000 f8b4 	bl	800d018 <__malloc_unlock>
 800ceb0:	e794      	b.n	800cddc <_malloc_r+0x20>
 800ceb2:	6005      	str	r5, [r0, #0]
 800ceb4:	e7d6      	b.n	800ce64 <_malloc_r+0xa8>
 800ceb6:	bf00      	nop
 800ceb8:	2000167c 	.word	0x2000167c

0800cebc <__sflush_r>:
 800cebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec2:	0716      	lsls	r6, r2, #28
 800cec4:	4605      	mov	r5, r0
 800cec6:	460c      	mov	r4, r1
 800cec8:	d454      	bmi.n	800cf74 <__sflush_r+0xb8>
 800ceca:	684b      	ldr	r3, [r1, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	dc02      	bgt.n	800ced6 <__sflush_r+0x1a>
 800ced0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	dd48      	ble.n	800cf68 <__sflush_r+0xac>
 800ced6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ced8:	2e00      	cmp	r6, #0
 800ceda:	d045      	beq.n	800cf68 <__sflush_r+0xac>
 800cedc:	2300      	movs	r3, #0
 800cede:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cee2:	682f      	ldr	r7, [r5, #0]
 800cee4:	6a21      	ldr	r1, [r4, #32]
 800cee6:	602b      	str	r3, [r5, #0]
 800cee8:	d030      	beq.n	800cf4c <__sflush_r+0x90>
 800ceea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ceec:	89a3      	ldrh	r3, [r4, #12]
 800ceee:	0759      	lsls	r1, r3, #29
 800cef0:	d505      	bpl.n	800cefe <__sflush_r+0x42>
 800cef2:	6863      	ldr	r3, [r4, #4]
 800cef4:	1ad2      	subs	r2, r2, r3
 800cef6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cef8:	b10b      	cbz	r3, 800cefe <__sflush_r+0x42>
 800cefa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cefc:	1ad2      	subs	r2, r2, r3
 800cefe:	2300      	movs	r3, #0
 800cf00:	4628      	mov	r0, r5
 800cf02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf04:	6a21      	ldr	r1, [r4, #32]
 800cf06:	47b0      	blx	r6
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	d106      	bne.n	800cf1c <__sflush_r+0x60>
 800cf0e:	6829      	ldr	r1, [r5, #0]
 800cf10:	291d      	cmp	r1, #29
 800cf12:	d82b      	bhi.n	800cf6c <__sflush_r+0xb0>
 800cf14:	4a28      	ldr	r2, [pc, #160]	@ (800cfb8 <__sflush_r+0xfc>)
 800cf16:	410a      	asrs	r2, r1
 800cf18:	07d6      	lsls	r6, r2, #31
 800cf1a:	d427      	bmi.n	800cf6c <__sflush_r+0xb0>
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	6062      	str	r2, [r4, #4]
 800cf20:	6922      	ldr	r2, [r4, #16]
 800cf22:	04d9      	lsls	r1, r3, #19
 800cf24:	6022      	str	r2, [r4, #0]
 800cf26:	d504      	bpl.n	800cf32 <__sflush_r+0x76>
 800cf28:	1c42      	adds	r2, r0, #1
 800cf2a:	d101      	bne.n	800cf30 <__sflush_r+0x74>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	b903      	cbnz	r3, 800cf32 <__sflush_r+0x76>
 800cf30:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf34:	602f      	str	r7, [r5, #0]
 800cf36:	b1b9      	cbz	r1, 800cf68 <__sflush_r+0xac>
 800cf38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf3c:	4299      	cmp	r1, r3
 800cf3e:	d002      	beq.n	800cf46 <__sflush_r+0x8a>
 800cf40:	4628      	mov	r0, r5
 800cf42:	f7ff fd71 	bl	800ca28 <_free_r>
 800cf46:	2300      	movs	r3, #0
 800cf48:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf4a:	e00d      	b.n	800cf68 <__sflush_r+0xac>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	4628      	mov	r0, r5
 800cf50:	47b0      	blx	r6
 800cf52:	4602      	mov	r2, r0
 800cf54:	1c50      	adds	r0, r2, #1
 800cf56:	d1c9      	bne.n	800ceec <__sflush_r+0x30>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d0c6      	beq.n	800ceec <__sflush_r+0x30>
 800cf5e:	2b1d      	cmp	r3, #29
 800cf60:	d001      	beq.n	800cf66 <__sflush_r+0xaa>
 800cf62:	2b16      	cmp	r3, #22
 800cf64:	d11d      	bne.n	800cfa2 <__sflush_r+0xe6>
 800cf66:	602f      	str	r7, [r5, #0]
 800cf68:	2000      	movs	r0, #0
 800cf6a:	e021      	b.n	800cfb0 <__sflush_r+0xf4>
 800cf6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf70:	b21b      	sxth	r3, r3
 800cf72:	e01a      	b.n	800cfaa <__sflush_r+0xee>
 800cf74:	690f      	ldr	r7, [r1, #16]
 800cf76:	2f00      	cmp	r7, #0
 800cf78:	d0f6      	beq.n	800cf68 <__sflush_r+0xac>
 800cf7a:	0793      	lsls	r3, r2, #30
 800cf7c:	bf18      	it	ne
 800cf7e:	2300      	movne	r3, #0
 800cf80:	680e      	ldr	r6, [r1, #0]
 800cf82:	bf08      	it	eq
 800cf84:	694b      	ldreq	r3, [r1, #20]
 800cf86:	1bf6      	subs	r6, r6, r7
 800cf88:	600f      	str	r7, [r1, #0]
 800cf8a:	608b      	str	r3, [r1, #8]
 800cf8c:	2e00      	cmp	r6, #0
 800cf8e:	ddeb      	ble.n	800cf68 <__sflush_r+0xac>
 800cf90:	4633      	mov	r3, r6
 800cf92:	463a      	mov	r2, r7
 800cf94:	4628      	mov	r0, r5
 800cf96:	6a21      	ldr	r1, [r4, #32]
 800cf98:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cf9c:	47e0      	blx	ip
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	dc07      	bgt.n	800cfb2 <__sflush_r+0xf6>
 800cfa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfae:	81a3      	strh	r3, [r4, #12]
 800cfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfb2:	4407      	add	r7, r0
 800cfb4:	1a36      	subs	r6, r6, r0
 800cfb6:	e7e9      	b.n	800cf8c <__sflush_r+0xd0>
 800cfb8:	dfbffffe 	.word	0xdfbffffe

0800cfbc <_fflush_r>:
 800cfbc:	b538      	push	{r3, r4, r5, lr}
 800cfbe:	690b      	ldr	r3, [r1, #16]
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	b913      	cbnz	r3, 800cfcc <_fflush_r+0x10>
 800cfc6:	2500      	movs	r5, #0
 800cfc8:	4628      	mov	r0, r5
 800cfca:	bd38      	pop	{r3, r4, r5, pc}
 800cfcc:	b118      	cbz	r0, 800cfd6 <_fflush_r+0x1a>
 800cfce:	6a03      	ldr	r3, [r0, #32]
 800cfd0:	b90b      	cbnz	r3, 800cfd6 <_fflush_r+0x1a>
 800cfd2:	f7fe fdf7 	bl	800bbc4 <__sinit>
 800cfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d0f3      	beq.n	800cfc6 <_fflush_r+0xa>
 800cfde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cfe0:	07d0      	lsls	r0, r2, #31
 800cfe2:	d404      	bmi.n	800cfee <_fflush_r+0x32>
 800cfe4:	0599      	lsls	r1, r3, #22
 800cfe6:	d402      	bmi.n	800cfee <_fflush_r+0x32>
 800cfe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfea:	f7fe feae 	bl	800bd4a <__retarget_lock_acquire_recursive>
 800cfee:	4628      	mov	r0, r5
 800cff0:	4621      	mov	r1, r4
 800cff2:	f7ff ff63 	bl	800cebc <__sflush_r>
 800cff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cff8:	4605      	mov	r5, r0
 800cffa:	07da      	lsls	r2, r3, #31
 800cffc:	d4e4      	bmi.n	800cfc8 <_fflush_r+0xc>
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	059b      	lsls	r3, r3, #22
 800d002:	d4e1      	bmi.n	800cfc8 <_fflush_r+0xc>
 800d004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d006:	f7fe fea1 	bl	800bd4c <__retarget_lock_release_recursive>
 800d00a:	e7dd      	b.n	800cfc8 <_fflush_r+0xc>

0800d00c <__malloc_lock>:
 800d00c:	4801      	ldr	r0, [pc, #4]	@ (800d014 <__malloc_lock+0x8>)
 800d00e:	f7fe be9c 	b.w	800bd4a <__retarget_lock_acquire_recursive>
 800d012:	bf00      	nop
 800d014:	20001674 	.word	0x20001674

0800d018 <__malloc_unlock>:
 800d018:	4801      	ldr	r0, [pc, #4]	@ (800d020 <__malloc_unlock+0x8>)
 800d01a:	f7fe be97 	b.w	800bd4c <__retarget_lock_release_recursive>
 800d01e:	bf00      	nop
 800d020:	20001674 	.word	0x20001674

0800d024 <_Balloc>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	69c6      	ldr	r6, [r0, #28]
 800d028:	4604      	mov	r4, r0
 800d02a:	460d      	mov	r5, r1
 800d02c:	b976      	cbnz	r6, 800d04c <_Balloc+0x28>
 800d02e:	2010      	movs	r0, #16
 800d030:	f7ff fe9a 	bl	800cd68 <malloc>
 800d034:	4602      	mov	r2, r0
 800d036:	61e0      	str	r0, [r4, #28]
 800d038:	b920      	cbnz	r0, 800d044 <_Balloc+0x20>
 800d03a:	216b      	movs	r1, #107	@ 0x6b
 800d03c:	4b17      	ldr	r3, [pc, #92]	@ (800d09c <_Balloc+0x78>)
 800d03e:	4818      	ldr	r0, [pc, #96]	@ (800d0a0 <_Balloc+0x7c>)
 800d040:	f000 fc52 	bl	800d8e8 <__assert_func>
 800d044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d048:	6006      	str	r6, [r0, #0]
 800d04a:	60c6      	str	r6, [r0, #12]
 800d04c:	69e6      	ldr	r6, [r4, #28]
 800d04e:	68f3      	ldr	r3, [r6, #12]
 800d050:	b183      	cbz	r3, 800d074 <_Balloc+0x50>
 800d052:	69e3      	ldr	r3, [r4, #28]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d05a:	b9b8      	cbnz	r0, 800d08c <_Balloc+0x68>
 800d05c:	2101      	movs	r1, #1
 800d05e:	fa01 f605 	lsl.w	r6, r1, r5
 800d062:	1d72      	adds	r2, r6, #5
 800d064:	4620      	mov	r0, r4
 800d066:	0092      	lsls	r2, r2, #2
 800d068:	f000 fc5c 	bl	800d924 <_calloc_r>
 800d06c:	b160      	cbz	r0, 800d088 <_Balloc+0x64>
 800d06e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d072:	e00e      	b.n	800d092 <_Balloc+0x6e>
 800d074:	2221      	movs	r2, #33	@ 0x21
 800d076:	2104      	movs	r1, #4
 800d078:	4620      	mov	r0, r4
 800d07a:	f000 fc53 	bl	800d924 <_calloc_r>
 800d07e:	69e3      	ldr	r3, [r4, #28]
 800d080:	60f0      	str	r0, [r6, #12]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1e4      	bne.n	800d052 <_Balloc+0x2e>
 800d088:	2000      	movs	r0, #0
 800d08a:	bd70      	pop	{r4, r5, r6, pc}
 800d08c:	6802      	ldr	r2, [r0, #0]
 800d08e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d092:	2300      	movs	r3, #0
 800d094:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d098:	e7f7      	b.n	800d08a <_Balloc+0x66>
 800d09a:	bf00      	nop
 800d09c:	0800e9a7 	.word	0x0800e9a7
 800d0a0:	0800ea38 	.word	0x0800ea38

0800d0a4 <_Bfree>:
 800d0a4:	b570      	push	{r4, r5, r6, lr}
 800d0a6:	69c6      	ldr	r6, [r0, #28]
 800d0a8:	4605      	mov	r5, r0
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	b976      	cbnz	r6, 800d0cc <_Bfree+0x28>
 800d0ae:	2010      	movs	r0, #16
 800d0b0:	f7ff fe5a 	bl	800cd68 <malloc>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	61e8      	str	r0, [r5, #28]
 800d0b8:	b920      	cbnz	r0, 800d0c4 <_Bfree+0x20>
 800d0ba:	218f      	movs	r1, #143	@ 0x8f
 800d0bc:	4b08      	ldr	r3, [pc, #32]	@ (800d0e0 <_Bfree+0x3c>)
 800d0be:	4809      	ldr	r0, [pc, #36]	@ (800d0e4 <_Bfree+0x40>)
 800d0c0:	f000 fc12 	bl	800d8e8 <__assert_func>
 800d0c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0c8:	6006      	str	r6, [r0, #0]
 800d0ca:	60c6      	str	r6, [r0, #12]
 800d0cc:	b13c      	cbz	r4, 800d0de <_Bfree+0x3a>
 800d0ce:	69eb      	ldr	r3, [r5, #28]
 800d0d0:	6862      	ldr	r2, [r4, #4]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0d8:	6021      	str	r1, [r4, #0]
 800d0da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0de:	bd70      	pop	{r4, r5, r6, pc}
 800d0e0:	0800e9a7 	.word	0x0800e9a7
 800d0e4:	0800ea38 	.word	0x0800ea38

0800d0e8 <__multadd>:
 800d0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ec:	4607      	mov	r7, r0
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	461e      	mov	r6, r3
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	690d      	ldr	r5, [r1, #16]
 800d0f6:	f101 0c14 	add.w	ip, r1, #20
 800d0fa:	f8dc 3000 	ldr.w	r3, [ip]
 800d0fe:	3001      	adds	r0, #1
 800d100:	b299      	uxth	r1, r3
 800d102:	fb02 6101 	mla	r1, r2, r1, r6
 800d106:	0c1e      	lsrs	r6, r3, #16
 800d108:	0c0b      	lsrs	r3, r1, #16
 800d10a:	fb02 3306 	mla	r3, r2, r6, r3
 800d10e:	b289      	uxth	r1, r1
 800d110:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d114:	4285      	cmp	r5, r0
 800d116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d11a:	f84c 1b04 	str.w	r1, [ip], #4
 800d11e:	dcec      	bgt.n	800d0fa <__multadd+0x12>
 800d120:	b30e      	cbz	r6, 800d166 <__multadd+0x7e>
 800d122:	68a3      	ldr	r3, [r4, #8]
 800d124:	42ab      	cmp	r3, r5
 800d126:	dc19      	bgt.n	800d15c <__multadd+0x74>
 800d128:	6861      	ldr	r1, [r4, #4]
 800d12a:	4638      	mov	r0, r7
 800d12c:	3101      	adds	r1, #1
 800d12e:	f7ff ff79 	bl	800d024 <_Balloc>
 800d132:	4680      	mov	r8, r0
 800d134:	b928      	cbnz	r0, 800d142 <__multadd+0x5a>
 800d136:	4602      	mov	r2, r0
 800d138:	21ba      	movs	r1, #186	@ 0xba
 800d13a:	4b0c      	ldr	r3, [pc, #48]	@ (800d16c <__multadd+0x84>)
 800d13c:	480c      	ldr	r0, [pc, #48]	@ (800d170 <__multadd+0x88>)
 800d13e:	f000 fbd3 	bl	800d8e8 <__assert_func>
 800d142:	6922      	ldr	r2, [r4, #16]
 800d144:	f104 010c 	add.w	r1, r4, #12
 800d148:	3202      	adds	r2, #2
 800d14a:	0092      	lsls	r2, r2, #2
 800d14c:	300c      	adds	r0, #12
 800d14e:	f7fe fe0c 	bl	800bd6a <memcpy>
 800d152:	4621      	mov	r1, r4
 800d154:	4638      	mov	r0, r7
 800d156:	f7ff ffa5 	bl	800d0a4 <_Bfree>
 800d15a:	4644      	mov	r4, r8
 800d15c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d160:	3501      	adds	r5, #1
 800d162:	615e      	str	r6, [r3, #20]
 800d164:	6125      	str	r5, [r4, #16]
 800d166:	4620      	mov	r0, r4
 800d168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d16c:	0800ea16 	.word	0x0800ea16
 800d170:	0800ea38 	.word	0x0800ea38

0800d174 <__hi0bits>:
 800d174:	4603      	mov	r3, r0
 800d176:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d17a:	bf3a      	itte	cc
 800d17c:	0403      	lslcc	r3, r0, #16
 800d17e:	2010      	movcc	r0, #16
 800d180:	2000      	movcs	r0, #0
 800d182:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d186:	bf3c      	itt	cc
 800d188:	021b      	lslcc	r3, r3, #8
 800d18a:	3008      	addcc	r0, #8
 800d18c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d190:	bf3c      	itt	cc
 800d192:	011b      	lslcc	r3, r3, #4
 800d194:	3004      	addcc	r0, #4
 800d196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d19a:	bf3c      	itt	cc
 800d19c:	009b      	lslcc	r3, r3, #2
 800d19e:	3002      	addcc	r0, #2
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	db05      	blt.n	800d1b0 <__hi0bits+0x3c>
 800d1a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d1a8:	f100 0001 	add.w	r0, r0, #1
 800d1ac:	bf08      	it	eq
 800d1ae:	2020      	moveq	r0, #32
 800d1b0:	4770      	bx	lr

0800d1b2 <__lo0bits>:
 800d1b2:	6803      	ldr	r3, [r0, #0]
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	f013 0007 	ands.w	r0, r3, #7
 800d1ba:	d00b      	beq.n	800d1d4 <__lo0bits+0x22>
 800d1bc:	07d9      	lsls	r1, r3, #31
 800d1be:	d421      	bmi.n	800d204 <__lo0bits+0x52>
 800d1c0:	0798      	lsls	r0, r3, #30
 800d1c2:	bf49      	itett	mi
 800d1c4:	085b      	lsrmi	r3, r3, #1
 800d1c6:	089b      	lsrpl	r3, r3, #2
 800d1c8:	2001      	movmi	r0, #1
 800d1ca:	6013      	strmi	r3, [r2, #0]
 800d1cc:	bf5c      	itt	pl
 800d1ce:	2002      	movpl	r0, #2
 800d1d0:	6013      	strpl	r3, [r2, #0]
 800d1d2:	4770      	bx	lr
 800d1d4:	b299      	uxth	r1, r3
 800d1d6:	b909      	cbnz	r1, 800d1dc <__lo0bits+0x2a>
 800d1d8:	2010      	movs	r0, #16
 800d1da:	0c1b      	lsrs	r3, r3, #16
 800d1dc:	b2d9      	uxtb	r1, r3
 800d1de:	b909      	cbnz	r1, 800d1e4 <__lo0bits+0x32>
 800d1e0:	3008      	adds	r0, #8
 800d1e2:	0a1b      	lsrs	r3, r3, #8
 800d1e4:	0719      	lsls	r1, r3, #28
 800d1e6:	bf04      	itt	eq
 800d1e8:	091b      	lsreq	r3, r3, #4
 800d1ea:	3004      	addeq	r0, #4
 800d1ec:	0799      	lsls	r1, r3, #30
 800d1ee:	bf04      	itt	eq
 800d1f0:	089b      	lsreq	r3, r3, #2
 800d1f2:	3002      	addeq	r0, #2
 800d1f4:	07d9      	lsls	r1, r3, #31
 800d1f6:	d403      	bmi.n	800d200 <__lo0bits+0x4e>
 800d1f8:	085b      	lsrs	r3, r3, #1
 800d1fa:	f100 0001 	add.w	r0, r0, #1
 800d1fe:	d003      	beq.n	800d208 <__lo0bits+0x56>
 800d200:	6013      	str	r3, [r2, #0]
 800d202:	4770      	bx	lr
 800d204:	2000      	movs	r0, #0
 800d206:	4770      	bx	lr
 800d208:	2020      	movs	r0, #32
 800d20a:	4770      	bx	lr

0800d20c <__i2b>:
 800d20c:	b510      	push	{r4, lr}
 800d20e:	460c      	mov	r4, r1
 800d210:	2101      	movs	r1, #1
 800d212:	f7ff ff07 	bl	800d024 <_Balloc>
 800d216:	4602      	mov	r2, r0
 800d218:	b928      	cbnz	r0, 800d226 <__i2b+0x1a>
 800d21a:	f240 1145 	movw	r1, #325	@ 0x145
 800d21e:	4b04      	ldr	r3, [pc, #16]	@ (800d230 <__i2b+0x24>)
 800d220:	4804      	ldr	r0, [pc, #16]	@ (800d234 <__i2b+0x28>)
 800d222:	f000 fb61 	bl	800d8e8 <__assert_func>
 800d226:	2301      	movs	r3, #1
 800d228:	6144      	str	r4, [r0, #20]
 800d22a:	6103      	str	r3, [r0, #16]
 800d22c:	bd10      	pop	{r4, pc}
 800d22e:	bf00      	nop
 800d230:	0800ea16 	.word	0x0800ea16
 800d234:	0800ea38 	.word	0x0800ea38

0800d238 <__multiply>:
 800d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d23c:	4614      	mov	r4, r2
 800d23e:	690a      	ldr	r2, [r1, #16]
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	460f      	mov	r7, r1
 800d244:	429a      	cmp	r2, r3
 800d246:	bfa2      	ittt	ge
 800d248:	4623      	movge	r3, r4
 800d24a:	460c      	movge	r4, r1
 800d24c:	461f      	movge	r7, r3
 800d24e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d252:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d256:	68a3      	ldr	r3, [r4, #8]
 800d258:	6861      	ldr	r1, [r4, #4]
 800d25a:	eb0a 0609 	add.w	r6, sl, r9
 800d25e:	42b3      	cmp	r3, r6
 800d260:	b085      	sub	sp, #20
 800d262:	bfb8      	it	lt
 800d264:	3101      	addlt	r1, #1
 800d266:	f7ff fedd 	bl	800d024 <_Balloc>
 800d26a:	b930      	cbnz	r0, 800d27a <__multiply+0x42>
 800d26c:	4602      	mov	r2, r0
 800d26e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d272:	4b43      	ldr	r3, [pc, #268]	@ (800d380 <__multiply+0x148>)
 800d274:	4843      	ldr	r0, [pc, #268]	@ (800d384 <__multiply+0x14c>)
 800d276:	f000 fb37 	bl	800d8e8 <__assert_func>
 800d27a:	f100 0514 	add.w	r5, r0, #20
 800d27e:	462b      	mov	r3, r5
 800d280:	2200      	movs	r2, #0
 800d282:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d286:	4543      	cmp	r3, r8
 800d288:	d321      	bcc.n	800d2ce <__multiply+0x96>
 800d28a:	f107 0114 	add.w	r1, r7, #20
 800d28e:	f104 0214 	add.w	r2, r4, #20
 800d292:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d296:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d29a:	9302      	str	r3, [sp, #8]
 800d29c:	1b13      	subs	r3, r2, r4
 800d29e:	3b15      	subs	r3, #21
 800d2a0:	f023 0303 	bic.w	r3, r3, #3
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	f104 0715 	add.w	r7, r4, #21
 800d2aa:	42ba      	cmp	r2, r7
 800d2ac:	bf38      	it	cc
 800d2ae:	2304      	movcc	r3, #4
 800d2b0:	9301      	str	r3, [sp, #4]
 800d2b2:	9b02      	ldr	r3, [sp, #8]
 800d2b4:	9103      	str	r1, [sp, #12]
 800d2b6:	428b      	cmp	r3, r1
 800d2b8:	d80c      	bhi.n	800d2d4 <__multiply+0x9c>
 800d2ba:	2e00      	cmp	r6, #0
 800d2bc:	dd03      	ble.n	800d2c6 <__multiply+0x8e>
 800d2be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d05a      	beq.n	800d37c <__multiply+0x144>
 800d2c6:	6106      	str	r6, [r0, #16]
 800d2c8:	b005      	add	sp, #20
 800d2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ce:	f843 2b04 	str.w	r2, [r3], #4
 800d2d2:	e7d8      	b.n	800d286 <__multiply+0x4e>
 800d2d4:	f8b1 a000 	ldrh.w	sl, [r1]
 800d2d8:	f1ba 0f00 	cmp.w	sl, #0
 800d2dc:	d023      	beq.n	800d326 <__multiply+0xee>
 800d2de:	46a9      	mov	r9, r5
 800d2e0:	f04f 0c00 	mov.w	ip, #0
 800d2e4:	f104 0e14 	add.w	lr, r4, #20
 800d2e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2ec:	f8d9 3000 	ldr.w	r3, [r9]
 800d2f0:	fa1f fb87 	uxth.w	fp, r7
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	fb0a 330b 	mla	r3, sl, fp, r3
 800d2fa:	4463      	add	r3, ip
 800d2fc:	f8d9 c000 	ldr.w	ip, [r9]
 800d300:	0c3f      	lsrs	r7, r7, #16
 800d302:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d306:	fb0a c707 	mla	r7, sl, r7, ip
 800d30a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d30e:	b29b      	uxth	r3, r3
 800d310:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d314:	4572      	cmp	r2, lr
 800d316:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d31a:	f849 3b04 	str.w	r3, [r9], #4
 800d31e:	d8e3      	bhi.n	800d2e8 <__multiply+0xb0>
 800d320:	9b01      	ldr	r3, [sp, #4]
 800d322:	f845 c003 	str.w	ip, [r5, r3]
 800d326:	9b03      	ldr	r3, [sp, #12]
 800d328:	3104      	adds	r1, #4
 800d32a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d32e:	f1b9 0f00 	cmp.w	r9, #0
 800d332:	d021      	beq.n	800d378 <__multiply+0x140>
 800d334:	46ae      	mov	lr, r5
 800d336:	f04f 0a00 	mov.w	sl, #0
 800d33a:	682b      	ldr	r3, [r5, #0]
 800d33c:	f104 0c14 	add.w	ip, r4, #20
 800d340:	f8bc b000 	ldrh.w	fp, [ip]
 800d344:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d348:	b29b      	uxth	r3, r3
 800d34a:	fb09 770b 	mla	r7, r9, fp, r7
 800d34e:	4457      	add	r7, sl
 800d350:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d354:	f84e 3b04 	str.w	r3, [lr], #4
 800d358:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d35c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d360:	f8be 3000 	ldrh.w	r3, [lr]
 800d364:	4562      	cmp	r2, ip
 800d366:	fb09 330a 	mla	r3, r9, sl, r3
 800d36a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d36e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d372:	d8e5      	bhi.n	800d340 <__multiply+0x108>
 800d374:	9f01      	ldr	r7, [sp, #4]
 800d376:	51eb      	str	r3, [r5, r7]
 800d378:	3504      	adds	r5, #4
 800d37a:	e79a      	b.n	800d2b2 <__multiply+0x7a>
 800d37c:	3e01      	subs	r6, #1
 800d37e:	e79c      	b.n	800d2ba <__multiply+0x82>
 800d380:	0800ea16 	.word	0x0800ea16
 800d384:	0800ea38 	.word	0x0800ea38

0800d388 <__pow5mult>:
 800d388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d38c:	4615      	mov	r5, r2
 800d38e:	f012 0203 	ands.w	r2, r2, #3
 800d392:	4607      	mov	r7, r0
 800d394:	460e      	mov	r6, r1
 800d396:	d007      	beq.n	800d3a8 <__pow5mult+0x20>
 800d398:	4c25      	ldr	r4, [pc, #148]	@ (800d430 <__pow5mult+0xa8>)
 800d39a:	3a01      	subs	r2, #1
 800d39c:	2300      	movs	r3, #0
 800d39e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3a2:	f7ff fea1 	bl	800d0e8 <__multadd>
 800d3a6:	4606      	mov	r6, r0
 800d3a8:	10ad      	asrs	r5, r5, #2
 800d3aa:	d03d      	beq.n	800d428 <__pow5mult+0xa0>
 800d3ac:	69fc      	ldr	r4, [r7, #28]
 800d3ae:	b97c      	cbnz	r4, 800d3d0 <__pow5mult+0x48>
 800d3b0:	2010      	movs	r0, #16
 800d3b2:	f7ff fcd9 	bl	800cd68 <malloc>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	61f8      	str	r0, [r7, #28]
 800d3ba:	b928      	cbnz	r0, 800d3c8 <__pow5mult+0x40>
 800d3bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d3c0:	4b1c      	ldr	r3, [pc, #112]	@ (800d434 <__pow5mult+0xac>)
 800d3c2:	481d      	ldr	r0, [pc, #116]	@ (800d438 <__pow5mult+0xb0>)
 800d3c4:	f000 fa90 	bl	800d8e8 <__assert_func>
 800d3c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3cc:	6004      	str	r4, [r0, #0]
 800d3ce:	60c4      	str	r4, [r0, #12]
 800d3d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d3d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3d8:	b94c      	cbnz	r4, 800d3ee <__pow5mult+0x66>
 800d3da:	f240 2171 	movw	r1, #625	@ 0x271
 800d3de:	4638      	mov	r0, r7
 800d3e0:	f7ff ff14 	bl	800d20c <__i2b>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3ec:	6003      	str	r3, [r0, #0]
 800d3ee:	f04f 0900 	mov.w	r9, #0
 800d3f2:	07eb      	lsls	r3, r5, #31
 800d3f4:	d50a      	bpl.n	800d40c <__pow5mult+0x84>
 800d3f6:	4631      	mov	r1, r6
 800d3f8:	4622      	mov	r2, r4
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	f7ff ff1c 	bl	800d238 <__multiply>
 800d400:	4680      	mov	r8, r0
 800d402:	4631      	mov	r1, r6
 800d404:	4638      	mov	r0, r7
 800d406:	f7ff fe4d 	bl	800d0a4 <_Bfree>
 800d40a:	4646      	mov	r6, r8
 800d40c:	106d      	asrs	r5, r5, #1
 800d40e:	d00b      	beq.n	800d428 <__pow5mult+0xa0>
 800d410:	6820      	ldr	r0, [r4, #0]
 800d412:	b938      	cbnz	r0, 800d424 <__pow5mult+0x9c>
 800d414:	4622      	mov	r2, r4
 800d416:	4621      	mov	r1, r4
 800d418:	4638      	mov	r0, r7
 800d41a:	f7ff ff0d 	bl	800d238 <__multiply>
 800d41e:	6020      	str	r0, [r4, #0]
 800d420:	f8c0 9000 	str.w	r9, [r0]
 800d424:	4604      	mov	r4, r0
 800d426:	e7e4      	b.n	800d3f2 <__pow5mult+0x6a>
 800d428:	4630      	mov	r0, r6
 800d42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d42e:	bf00      	nop
 800d430:	0800ea94 	.word	0x0800ea94
 800d434:	0800e9a7 	.word	0x0800e9a7
 800d438:	0800ea38 	.word	0x0800ea38

0800d43c <__lshift>:
 800d43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d440:	460c      	mov	r4, r1
 800d442:	4607      	mov	r7, r0
 800d444:	4691      	mov	r9, r2
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	6849      	ldr	r1, [r1, #4]
 800d44a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d44e:	68a3      	ldr	r3, [r4, #8]
 800d450:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d454:	f108 0601 	add.w	r6, r8, #1
 800d458:	42b3      	cmp	r3, r6
 800d45a:	db0b      	blt.n	800d474 <__lshift+0x38>
 800d45c:	4638      	mov	r0, r7
 800d45e:	f7ff fde1 	bl	800d024 <_Balloc>
 800d462:	4605      	mov	r5, r0
 800d464:	b948      	cbnz	r0, 800d47a <__lshift+0x3e>
 800d466:	4602      	mov	r2, r0
 800d468:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d46c:	4b27      	ldr	r3, [pc, #156]	@ (800d50c <__lshift+0xd0>)
 800d46e:	4828      	ldr	r0, [pc, #160]	@ (800d510 <__lshift+0xd4>)
 800d470:	f000 fa3a 	bl	800d8e8 <__assert_func>
 800d474:	3101      	adds	r1, #1
 800d476:	005b      	lsls	r3, r3, #1
 800d478:	e7ee      	b.n	800d458 <__lshift+0x1c>
 800d47a:	2300      	movs	r3, #0
 800d47c:	f100 0114 	add.w	r1, r0, #20
 800d480:	f100 0210 	add.w	r2, r0, #16
 800d484:	4618      	mov	r0, r3
 800d486:	4553      	cmp	r3, sl
 800d488:	db33      	blt.n	800d4f2 <__lshift+0xb6>
 800d48a:	6920      	ldr	r0, [r4, #16]
 800d48c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d490:	f104 0314 	add.w	r3, r4, #20
 800d494:	f019 091f 	ands.w	r9, r9, #31
 800d498:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d49c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4a0:	d02b      	beq.n	800d4fa <__lshift+0xbe>
 800d4a2:	468a      	mov	sl, r1
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f1c9 0e20 	rsb	lr, r9, #32
 800d4aa:	6818      	ldr	r0, [r3, #0]
 800d4ac:	fa00 f009 	lsl.w	r0, r0, r9
 800d4b0:	4310      	orrs	r0, r2
 800d4b2:	f84a 0b04 	str.w	r0, [sl], #4
 800d4b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ba:	459c      	cmp	ip, r3
 800d4bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4c0:	d8f3      	bhi.n	800d4aa <__lshift+0x6e>
 800d4c2:	ebac 0304 	sub.w	r3, ip, r4
 800d4c6:	3b15      	subs	r3, #21
 800d4c8:	f023 0303 	bic.w	r3, r3, #3
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	f104 0015 	add.w	r0, r4, #21
 800d4d2:	4584      	cmp	ip, r0
 800d4d4:	bf38      	it	cc
 800d4d6:	2304      	movcc	r3, #4
 800d4d8:	50ca      	str	r2, [r1, r3]
 800d4da:	b10a      	cbz	r2, 800d4e0 <__lshift+0xa4>
 800d4dc:	f108 0602 	add.w	r6, r8, #2
 800d4e0:	3e01      	subs	r6, #1
 800d4e2:	4638      	mov	r0, r7
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	612e      	str	r6, [r5, #16]
 800d4e8:	f7ff fddc 	bl	800d0a4 <_Bfree>
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	e7c5      	b.n	800d486 <__lshift+0x4a>
 800d4fa:	3904      	subs	r1, #4
 800d4fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d500:	459c      	cmp	ip, r3
 800d502:	f841 2f04 	str.w	r2, [r1, #4]!
 800d506:	d8f9      	bhi.n	800d4fc <__lshift+0xc0>
 800d508:	e7ea      	b.n	800d4e0 <__lshift+0xa4>
 800d50a:	bf00      	nop
 800d50c:	0800ea16 	.word	0x0800ea16
 800d510:	0800ea38 	.word	0x0800ea38

0800d514 <__mcmp>:
 800d514:	4603      	mov	r3, r0
 800d516:	690a      	ldr	r2, [r1, #16]
 800d518:	6900      	ldr	r0, [r0, #16]
 800d51a:	b530      	push	{r4, r5, lr}
 800d51c:	1a80      	subs	r0, r0, r2
 800d51e:	d10e      	bne.n	800d53e <__mcmp+0x2a>
 800d520:	3314      	adds	r3, #20
 800d522:	3114      	adds	r1, #20
 800d524:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d528:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d52c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d530:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d534:	4295      	cmp	r5, r2
 800d536:	d003      	beq.n	800d540 <__mcmp+0x2c>
 800d538:	d205      	bcs.n	800d546 <__mcmp+0x32>
 800d53a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d53e:	bd30      	pop	{r4, r5, pc}
 800d540:	42a3      	cmp	r3, r4
 800d542:	d3f3      	bcc.n	800d52c <__mcmp+0x18>
 800d544:	e7fb      	b.n	800d53e <__mcmp+0x2a>
 800d546:	2001      	movs	r0, #1
 800d548:	e7f9      	b.n	800d53e <__mcmp+0x2a>
	...

0800d54c <__mdiff>:
 800d54c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d550:	4689      	mov	r9, r1
 800d552:	4606      	mov	r6, r0
 800d554:	4611      	mov	r1, r2
 800d556:	4648      	mov	r0, r9
 800d558:	4614      	mov	r4, r2
 800d55a:	f7ff ffdb 	bl	800d514 <__mcmp>
 800d55e:	1e05      	subs	r5, r0, #0
 800d560:	d112      	bne.n	800d588 <__mdiff+0x3c>
 800d562:	4629      	mov	r1, r5
 800d564:	4630      	mov	r0, r6
 800d566:	f7ff fd5d 	bl	800d024 <_Balloc>
 800d56a:	4602      	mov	r2, r0
 800d56c:	b928      	cbnz	r0, 800d57a <__mdiff+0x2e>
 800d56e:	f240 2137 	movw	r1, #567	@ 0x237
 800d572:	4b3e      	ldr	r3, [pc, #248]	@ (800d66c <__mdiff+0x120>)
 800d574:	483e      	ldr	r0, [pc, #248]	@ (800d670 <__mdiff+0x124>)
 800d576:	f000 f9b7 	bl	800d8e8 <__assert_func>
 800d57a:	2301      	movs	r3, #1
 800d57c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d580:	4610      	mov	r0, r2
 800d582:	b003      	add	sp, #12
 800d584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d588:	bfbc      	itt	lt
 800d58a:	464b      	movlt	r3, r9
 800d58c:	46a1      	movlt	r9, r4
 800d58e:	4630      	mov	r0, r6
 800d590:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d594:	bfba      	itte	lt
 800d596:	461c      	movlt	r4, r3
 800d598:	2501      	movlt	r5, #1
 800d59a:	2500      	movge	r5, #0
 800d59c:	f7ff fd42 	bl	800d024 <_Balloc>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	b918      	cbnz	r0, 800d5ac <__mdiff+0x60>
 800d5a4:	f240 2145 	movw	r1, #581	@ 0x245
 800d5a8:	4b30      	ldr	r3, [pc, #192]	@ (800d66c <__mdiff+0x120>)
 800d5aa:	e7e3      	b.n	800d574 <__mdiff+0x28>
 800d5ac:	f100 0b14 	add.w	fp, r0, #20
 800d5b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d5b4:	f109 0310 	add.w	r3, r9, #16
 800d5b8:	60c5      	str	r5, [r0, #12]
 800d5ba:	f04f 0c00 	mov.w	ip, #0
 800d5be:	f109 0514 	add.w	r5, r9, #20
 800d5c2:	46d9      	mov	r9, fp
 800d5c4:	6926      	ldr	r6, [r4, #16]
 800d5c6:	f104 0e14 	add.w	lr, r4, #20
 800d5ca:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d5ce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	9b01      	ldr	r3, [sp, #4]
 800d5d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d5da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d5de:	b281      	uxth	r1, r0
 800d5e0:	9301      	str	r3, [sp, #4]
 800d5e2:	fa1f f38a 	uxth.w	r3, sl
 800d5e6:	1a5b      	subs	r3, r3, r1
 800d5e8:	0c00      	lsrs	r0, r0, #16
 800d5ea:	4463      	add	r3, ip
 800d5ec:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d5f0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d5fa:	4576      	cmp	r6, lr
 800d5fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d600:	f849 3b04 	str.w	r3, [r9], #4
 800d604:	d8e6      	bhi.n	800d5d4 <__mdiff+0x88>
 800d606:	1b33      	subs	r3, r6, r4
 800d608:	3b15      	subs	r3, #21
 800d60a:	f023 0303 	bic.w	r3, r3, #3
 800d60e:	3415      	adds	r4, #21
 800d610:	3304      	adds	r3, #4
 800d612:	42a6      	cmp	r6, r4
 800d614:	bf38      	it	cc
 800d616:	2304      	movcc	r3, #4
 800d618:	441d      	add	r5, r3
 800d61a:	445b      	add	r3, fp
 800d61c:	461e      	mov	r6, r3
 800d61e:	462c      	mov	r4, r5
 800d620:	4544      	cmp	r4, r8
 800d622:	d30e      	bcc.n	800d642 <__mdiff+0xf6>
 800d624:	f108 0103 	add.w	r1, r8, #3
 800d628:	1b49      	subs	r1, r1, r5
 800d62a:	f021 0103 	bic.w	r1, r1, #3
 800d62e:	3d03      	subs	r5, #3
 800d630:	45a8      	cmp	r8, r5
 800d632:	bf38      	it	cc
 800d634:	2100      	movcc	r1, #0
 800d636:	440b      	add	r3, r1
 800d638:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d63c:	b199      	cbz	r1, 800d666 <__mdiff+0x11a>
 800d63e:	6117      	str	r7, [r2, #16]
 800d640:	e79e      	b.n	800d580 <__mdiff+0x34>
 800d642:	46e6      	mov	lr, ip
 800d644:	f854 1b04 	ldr.w	r1, [r4], #4
 800d648:	fa1f fc81 	uxth.w	ip, r1
 800d64c:	44f4      	add	ip, lr
 800d64e:	0c08      	lsrs	r0, r1, #16
 800d650:	4471      	add	r1, lr
 800d652:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d656:	b289      	uxth	r1, r1
 800d658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d65c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d660:	f846 1b04 	str.w	r1, [r6], #4
 800d664:	e7dc      	b.n	800d620 <__mdiff+0xd4>
 800d666:	3f01      	subs	r7, #1
 800d668:	e7e6      	b.n	800d638 <__mdiff+0xec>
 800d66a:	bf00      	nop
 800d66c:	0800ea16 	.word	0x0800ea16
 800d670:	0800ea38 	.word	0x0800ea38

0800d674 <__d2b>:
 800d674:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d678:	2101      	movs	r1, #1
 800d67a:	4690      	mov	r8, r2
 800d67c:	4699      	mov	r9, r3
 800d67e:	9e08      	ldr	r6, [sp, #32]
 800d680:	f7ff fcd0 	bl	800d024 <_Balloc>
 800d684:	4604      	mov	r4, r0
 800d686:	b930      	cbnz	r0, 800d696 <__d2b+0x22>
 800d688:	4602      	mov	r2, r0
 800d68a:	f240 310f 	movw	r1, #783	@ 0x30f
 800d68e:	4b23      	ldr	r3, [pc, #140]	@ (800d71c <__d2b+0xa8>)
 800d690:	4823      	ldr	r0, [pc, #140]	@ (800d720 <__d2b+0xac>)
 800d692:	f000 f929 	bl	800d8e8 <__assert_func>
 800d696:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d69a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d69e:	b10d      	cbz	r5, 800d6a4 <__d2b+0x30>
 800d6a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d6a4:	9301      	str	r3, [sp, #4]
 800d6a6:	f1b8 0300 	subs.w	r3, r8, #0
 800d6aa:	d024      	beq.n	800d6f6 <__d2b+0x82>
 800d6ac:	4668      	mov	r0, sp
 800d6ae:	9300      	str	r3, [sp, #0]
 800d6b0:	f7ff fd7f 	bl	800d1b2 <__lo0bits>
 800d6b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d6b8:	b1d8      	cbz	r0, 800d6f2 <__d2b+0x7e>
 800d6ba:	f1c0 0320 	rsb	r3, r0, #32
 800d6be:	fa02 f303 	lsl.w	r3, r2, r3
 800d6c2:	430b      	orrs	r3, r1
 800d6c4:	40c2      	lsrs	r2, r0
 800d6c6:	6163      	str	r3, [r4, #20]
 800d6c8:	9201      	str	r2, [sp, #4]
 800d6ca:	9b01      	ldr	r3, [sp, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	bf0c      	ite	eq
 800d6d0:	2201      	moveq	r2, #1
 800d6d2:	2202      	movne	r2, #2
 800d6d4:	61a3      	str	r3, [r4, #24]
 800d6d6:	6122      	str	r2, [r4, #16]
 800d6d8:	b1ad      	cbz	r5, 800d706 <__d2b+0x92>
 800d6da:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d6de:	4405      	add	r5, r0
 800d6e0:	6035      	str	r5, [r6, #0]
 800d6e2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e8:	6018      	str	r0, [r3, #0]
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	b002      	add	sp, #8
 800d6ee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d6f2:	6161      	str	r1, [r4, #20]
 800d6f4:	e7e9      	b.n	800d6ca <__d2b+0x56>
 800d6f6:	a801      	add	r0, sp, #4
 800d6f8:	f7ff fd5b 	bl	800d1b2 <__lo0bits>
 800d6fc:	9b01      	ldr	r3, [sp, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	6163      	str	r3, [r4, #20]
 800d702:	3020      	adds	r0, #32
 800d704:	e7e7      	b.n	800d6d6 <__d2b+0x62>
 800d706:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d70a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d70e:	6030      	str	r0, [r6, #0]
 800d710:	6918      	ldr	r0, [r3, #16]
 800d712:	f7ff fd2f 	bl	800d174 <__hi0bits>
 800d716:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d71a:	e7e4      	b.n	800d6e6 <__d2b+0x72>
 800d71c:	0800ea16 	.word	0x0800ea16
 800d720:	0800ea38 	.word	0x0800ea38

0800d724 <__sread>:
 800d724:	b510      	push	{r4, lr}
 800d726:	460c      	mov	r4, r1
 800d728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d72c:	f000 f8a8 	bl	800d880 <_read_r>
 800d730:	2800      	cmp	r0, #0
 800d732:	bfab      	itete	ge
 800d734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d736:	89a3      	ldrhlt	r3, [r4, #12]
 800d738:	181b      	addge	r3, r3, r0
 800d73a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d73e:	bfac      	ite	ge
 800d740:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d742:	81a3      	strhlt	r3, [r4, #12]
 800d744:	bd10      	pop	{r4, pc}

0800d746 <__swrite>:
 800d746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d74a:	461f      	mov	r7, r3
 800d74c:	898b      	ldrh	r3, [r1, #12]
 800d74e:	4605      	mov	r5, r0
 800d750:	05db      	lsls	r3, r3, #23
 800d752:	460c      	mov	r4, r1
 800d754:	4616      	mov	r6, r2
 800d756:	d505      	bpl.n	800d764 <__swrite+0x1e>
 800d758:	2302      	movs	r3, #2
 800d75a:	2200      	movs	r2, #0
 800d75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d760:	f000 f87c 	bl	800d85c <_lseek_r>
 800d764:	89a3      	ldrh	r3, [r4, #12]
 800d766:	4632      	mov	r2, r6
 800d768:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d76c:	81a3      	strh	r3, [r4, #12]
 800d76e:	4628      	mov	r0, r5
 800d770:	463b      	mov	r3, r7
 800d772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d77a:	f000 b8a3 	b.w	800d8c4 <_write_r>

0800d77e <__sseek>:
 800d77e:	b510      	push	{r4, lr}
 800d780:	460c      	mov	r4, r1
 800d782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d786:	f000 f869 	bl	800d85c <_lseek_r>
 800d78a:	1c43      	adds	r3, r0, #1
 800d78c:	89a3      	ldrh	r3, [r4, #12]
 800d78e:	bf15      	itete	ne
 800d790:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d79a:	81a3      	strheq	r3, [r4, #12]
 800d79c:	bf18      	it	ne
 800d79e:	81a3      	strhne	r3, [r4, #12]
 800d7a0:	bd10      	pop	{r4, pc}

0800d7a2 <__sclose>:
 800d7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7a6:	f000 b849 	b.w	800d83c <_close_r>

0800d7aa <_realloc_r>:
 800d7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ae:	4680      	mov	r8, r0
 800d7b0:	4615      	mov	r5, r2
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	b921      	cbnz	r1, 800d7c0 <_realloc_r+0x16>
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	f7ff bafe 	b.w	800cdbc <_malloc_r>
 800d7c0:	b92a      	cbnz	r2, 800d7ce <_realloc_r+0x24>
 800d7c2:	f7ff f931 	bl	800ca28 <_free_r>
 800d7c6:	2400      	movs	r4, #0
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ce:	f000 f8cf 	bl	800d970 <_malloc_usable_size_r>
 800d7d2:	4285      	cmp	r5, r0
 800d7d4:	4606      	mov	r6, r0
 800d7d6:	d802      	bhi.n	800d7de <_realloc_r+0x34>
 800d7d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d7dc:	d8f4      	bhi.n	800d7c8 <_realloc_r+0x1e>
 800d7de:	4629      	mov	r1, r5
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	f7ff faeb 	bl	800cdbc <_malloc_r>
 800d7e6:	4607      	mov	r7, r0
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d0ec      	beq.n	800d7c6 <_realloc_r+0x1c>
 800d7ec:	42b5      	cmp	r5, r6
 800d7ee:	462a      	mov	r2, r5
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	bf28      	it	cs
 800d7f4:	4632      	movcs	r2, r6
 800d7f6:	f7fe fab8 	bl	800bd6a <memcpy>
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	4640      	mov	r0, r8
 800d7fe:	f7ff f913 	bl	800ca28 <_free_r>
 800d802:	463c      	mov	r4, r7
 800d804:	e7e0      	b.n	800d7c8 <_realloc_r+0x1e>

0800d806 <memmove>:
 800d806:	4288      	cmp	r0, r1
 800d808:	b510      	push	{r4, lr}
 800d80a:	eb01 0402 	add.w	r4, r1, r2
 800d80e:	d902      	bls.n	800d816 <memmove+0x10>
 800d810:	4284      	cmp	r4, r0
 800d812:	4623      	mov	r3, r4
 800d814:	d807      	bhi.n	800d826 <memmove+0x20>
 800d816:	1e43      	subs	r3, r0, #1
 800d818:	42a1      	cmp	r1, r4
 800d81a:	d008      	beq.n	800d82e <memmove+0x28>
 800d81c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d820:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d824:	e7f8      	b.n	800d818 <memmove+0x12>
 800d826:	4601      	mov	r1, r0
 800d828:	4402      	add	r2, r0
 800d82a:	428a      	cmp	r2, r1
 800d82c:	d100      	bne.n	800d830 <memmove+0x2a>
 800d82e:	bd10      	pop	{r4, pc}
 800d830:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d834:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d838:	e7f7      	b.n	800d82a <memmove+0x24>
	...

0800d83c <_close_r>:
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	2300      	movs	r3, #0
 800d840:	4d05      	ldr	r5, [pc, #20]	@ (800d858 <_close_r+0x1c>)
 800d842:	4604      	mov	r4, r0
 800d844:	4608      	mov	r0, r1
 800d846:	602b      	str	r3, [r5, #0]
 800d848:	f7f9 fb3d 	bl	8006ec6 <_close>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d102      	bne.n	800d856 <_close_r+0x1a>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	b103      	cbz	r3, 800d856 <_close_r+0x1a>
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	bd38      	pop	{r3, r4, r5, pc}
 800d858:	20001670 	.word	0x20001670

0800d85c <_lseek_r>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	4604      	mov	r4, r0
 800d860:	4608      	mov	r0, r1
 800d862:	4611      	mov	r1, r2
 800d864:	2200      	movs	r2, #0
 800d866:	4d05      	ldr	r5, [pc, #20]	@ (800d87c <_lseek_r+0x20>)
 800d868:	602a      	str	r2, [r5, #0]
 800d86a:	461a      	mov	r2, r3
 800d86c:	f7f9 fb4f 	bl	8006f0e <_lseek>
 800d870:	1c43      	adds	r3, r0, #1
 800d872:	d102      	bne.n	800d87a <_lseek_r+0x1e>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	b103      	cbz	r3, 800d87a <_lseek_r+0x1e>
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	bd38      	pop	{r3, r4, r5, pc}
 800d87c:	20001670 	.word	0x20001670

0800d880 <_read_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4604      	mov	r4, r0
 800d884:	4608      	mov	r0, r1
 800d886:	4611      	mov	r1, r2
 800d888:	2200      	movs	r2, #0
 800d88a:	4d05      	ldr	r5, [pc, #20]	@ (800d8a0 <_read_r+0x20>)
 800d88c:	602a      	str	r2, [r5, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	f7f9 fae0 	bl	8006e54 <_read>
 800d894:	1c43      	adds	r3, r0, #1
 800d896:	d102      	bne.n	800d89e <_read_r+0x1e>
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	b103      	cbz	r3, 800d89e <_read_r+0x1e>
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	bd38      	pop	{r3, r4, r5, pc}
 800d8a0:	20001670 	.word	0x20001670

0800d8a4 <_sbrk_r>:
 800d8a4:	b538      	push	{r3, r4, r5, lr}
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	4d05      	ldr	r5, [pc, #20]	@ (800d8c0 <_sbrk_r+0x1c>)
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	4608      	mov	r0, r1
 800d8ae:	602b      	str	r3, [r5, #0]
 800d8b0:	f7f9 fb3a 	bl	8006f28 <_sbrk>
 800d8b4:	1c43      	adds	r3, r0, #1
 800d8b6:	d102      	bne.n	800d8be <_sbrk_r+0x1a>
 800d8b8:	682b      	ldr	r3, [r5, #0]
 800d8ba:	b103      	cbz	r3, 800d8be <_sbrk_r+0x1a>
 800d8bc:	6023      	str	r3, [r4, #0]
 800d8be:	bd38      	pop	{r3, r4, r5, pc}
 800d8c0:	20001670 	.word	0x20001670

0800d8c4 <_write_r>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	4608      	mov	r0, r1
 800d8ca:	4611      	mov	r1, r2
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	4d05      	ldr	r5, [pc, #20]	@ (800d8e4 <_write_r+0x20>)
 800d8d0:	602a      	str	r2, [r5, #0]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	f7f9 fadb 	bl	8006e8e <_write>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d102      	bne.n	800d8e2 <_write_r+0x1e>
 800d8dc:	682b      	ldr	r3, [r5, #0]
 800d8de:	b103      	cbz	r3, 800d8e2 <_write_r+0x1e>
 800d8e0:	6023      	str	r3, [r4, #0]
 800d8e2:	bd38      	pop	{r3, r4, r5, pc}
 800d8e4:	20001670 	.word	0x20001670

0800d8e8 <__assert_func>:
 800d8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8ea:	4614      	mov	r4, r2
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	4b09      	ldr	r3, [pc, #36]	@ (800d914 <__assert_func+0x2c>)
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	68d8      	ldr	r0, [r3, #12]
 800d8f6:	b954      	cbnz	r4, 800d90e <__assert_func+0x26>
 800d8f8:	4b07      	ldr	r3, [pc, #28]	@ (800d918 <__assert_func+0x30>)
 800d8fa:	461c      	mov	r4, r3
 800d8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d900:	9100      	str	r1, [sp, #0]
 800d902:	462b      	mov	r3, r5
 800d904:	4905      	ldr	r1, [pc, #20]	@ (800d91c <__assert_func+0x34>)
 800d906:	f000 f83b 	bl	800d980 <fiprintf>
 800d90a:	f000 f858 	bl	800d9be <abort>
 800d90e:	4b04      	ldr	r3, [pc, #16]	@ (800d920 <__assert_func+0x38>)
 800d910:	e7f4      	b.n	800d8fc <__assert_func+0x14>
 800d912:	bf00      	nop
 800d914:	20000054 	.word	0x20000054
 800d918:	0800ecd6 	.word	0x0800ecd6
 800d91c:	0800eca8 	.word	0x0800eca8
 800d920:	0800ec9b 	.word	0x0800ec9b

0800d924 <_calloc_r>:
 800d924:	b570      	push	{r4, r5, r6, lr}
 800d926:	fba1 5402 	umull	r5, r4, r1, r2
 800d92a:	b93c      	cbnz	r4, 800d93c <_calloc_r+0x18>
 800d92c:	4629      	mov	r1, r5
 800d92e:	f7ff fa45 	bl	800cdbc <_malloc_r>
 800d932:	4606      	mov	r6, r0
 800d934:	b928      	cbnz	r0, 800d942 <_calloc_r+0x1e>
 800d936:	2600      	movs	r6, #0
 800d938:	4630      	mov	r0, r6
 800d93a:	bd70      	pop	{r4, r5, r6, pc}
 800d93c:	220c      	movs	r2, #12
 800d93e:	6002      	str	r2, [r0, #0]
 800d940:	e7f9      	b.n	800d936 <_calloc_r+0x12>
 800d942:	462a      	mov	r2, r5
 800d944:	4621      	mov	r1, r4
 800d946:	f7fe f973 	bl	800bc30 <memset>
 800d94a:	e7f5      	b.n	800d938 <_calloc_r+0x14>

0800d94c <__ascii_mbtowc>:
 800d94c:	b082      	sub	sp, #8
 800d94e:	b901      	cbnz	r1, 800d952 <__ascii_mbtowc+0x6>
 800d950:	a901      	add	r1, sp, #4
 800d952:	b142      	cbz	r2, 800d966 <__ascii_mbtowc+0x1a>
 800d954:	b14b      	cbz	r3, 800d96a <__ascii_mbtowc+0x1e>
 800d956:	7813      	ldrb	r3, [r2, #0]
 800d958:	600b      	str	r3, [r1, #0]
 800d95a:	7812      	ldrb	r2, [r2, #0]
 800d95c:	1e10      	subs	r0, r2, #0
 800d95e:	bf18      	it	ne
 800d960:	2001      	movne	r0, #1
 800d962:	b002      	add	sp, #8
 800d964:	4770      	bx	lr
 800d966:	4610      	mov	r0, r2
 800d968:	e7fb      	b.n	800d962 <__ascii_mbtowc+0x16>
 800d96a:	f06f 0001 	mvn.w	r0, #1
 800d96e:	e7f8      	b.n	800d962 <__ascii_mbtowc+0x16>

0800d970 <_malloc_usable_size_r>:
 800d970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d974:	1f18      	subs	r0, r3, #4
 800d976:	2b00      	cmp	r3, #0
 800d978:	bfbc      	itt	lt
 800d97a:	580b      	ldrlt	r3, [r1, r0]
 800d97c:	18c0      	addlt	r0, r0, r3
 800d97e:	4770      	bx	lr

0800d980 <fiprintf>:
 800d980:	b40e      	push	{r1, r2, r3}
 800d982:	b503      	push	{r0, r1, lr}
 800d984:	4601      	mov	r1, r0
 800d986:	ab03      	add	r3, sp, #12
 800d988:	4805      	ldr	r0, [pc, #20]	@ (800d9a0 <fiprintf+0x20>)
 800d98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d98e:	6800      	ldr	r0, [r0, #0]
 800d990:	9301      	str	r3, [sp, #4]
 800d992:	f000 f843 	bl	800da1c <_vfiprintf_r>
 800d996:	b002      	add	sp, #8
 800d998:	f85d eb04 	ldr.w	lr, [sp], #4
 800d99c:	b003      	add	sp, #12
 800d99e:	4770      	bx	lr
 800d9a0:	20000054 	.word	0x20000054

0800d9a4 <__ascii_wctomb>:
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	4608      	mov	r0, r1
 800d9a8:	b141      	cbz	r1, 800d9bc <__ascii_wctomb+0x18>
 800d9aa:	2aff      	cmp	r2, #255	@ 0xff
 800d9ac:	d904      	bls.n	800d9b8 <__ascii_wctomb+0x14>
 800d9ae:	228a      	movs	r2, #138	@ 0x8a
 800d9b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9b4:	601a      	str	r2, [r3, #0]
 800d9b6:	4770      	bx	lr
 800d9b8:	2001      	movs	r0, #1
 800d9ba:	700a      	strb	r2, [r1, #0]
 800d9bc:	4770      	bx	lr

0800d9be <abort>:
 800d9be:	2006      	movs	r0, #6
 800d9c0:	b508      	push	{r3, lr}
 800d9c2:	f000 fa83 	bl	800decc <raise>
 800d9c6:	2001      	movs	r0, #1
 800d9c8:	f7f9 fa39 	bl	8006e3e <_exit>

0800d9cc <__sfputc_r>:
 800d9cc:	6893      	ldr	r3, [r2, #8]
 800d9ce:	b410      	push	{r4}
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	6093      	str	r3, [r2, #8]
 800d9d6:	da07      	bge.n	800d9e8 <__sfputc_r+0x1c>
 800d9d8:	6994      	ldr	r4, [r2, #24]
 800d9da:	42a3      	cmp	r3, r4
 800d9dc:	db01      	blt.n	800d9e2 <__sfputc_r+0x16>
 800d9de:	290a      	cmp	r1, #10
 800d9e0:	d102      	bne.n	800d9e8 <__sfputc_r+0x1c>
 800d9e2:	bc10      	pop	{r4}
 800d9e4:	f000 b932 	b.w	800dc4c <__swbuf_r>
 800d9e8:	6813      	ldr	r3, [r2, #0]
 800d9ea:	1c58      	adds	r0, r3, #1
 800d9ec:	6010      	str	r0, [r2, #0]
 800d9ee:	7019      	strb	r1, [r3, #0]
 800d9f0:	4608      	mov	r0, r1
 800d9f2:	bc10      	pop	{r4}
 800d9f4:	4770      	bx	lr

0800d9f6 <__sfputs_r>:
 800d9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f8:	4606      	mov	r6, r0
 800d9fa:	460f      	mov	r7, r1
 800d9fc:	4614      	mov	r4, r2
 800d9fe:	18d5      	adds	r5, r2, r3
 800da00:	42ac      	cmp	r4, r5
 800da02:	d101      	bne.n	800da08 <__sfputs_r+0x12>
 800da04:	2000      	movs	r0, #0
 800da06:	e007      	b.n	800da18 <__sfputs_r+0x22>
 800da08:	463a      	mov	r2, r7
 800da0a:	4630      	mov	r0, r6
 800da0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da10:	f7ff ffdc 	bl	800d9cc <__sfputc_r>
 800da14:	1c43      	adds	r3, r0, #1
 800da16:	d1f3      	bne.n	800da00 <__sfputs_r+0xa>
 800da18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da1c <_vfiprintf_r>:
 800da1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da20:	460d      	mov	r5, r1
 800da22:	4614      	mov	r4, r2
 800da24:	4698      	mov	r8, r3
 800da26:	4606      	mov	r6, r0
 800da28:	b09d      	sub	sp, #116	@ 0x74
 800da2a:	b118      	cbz	r0, 800da34 <_vfiprintf_r+0x18>
 800da2c:	6a03      	ldr	r3, [r0, #32]
 800da2e:	b90b      	cbnz	r3, 800da34 <_vfiprintf_r+0x18>
 800da30:	f7fe f8c8 	bl	800bbc4 <__sinit>
 800da34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da36:	07d9      	lsls	r1, r3, #31
 800da38:	d405      	bmi.n	800da46 <_vfiprintf_r+0x2a>
 800da3a:	89ab      	ldrh	r3, [r5, #12]
 800da3c:	059a      	lsls	r2, r3, #22
 800da3e:	d402      	bmi.n	800da46 <_vfiprintf_r+0x2a>
 800da40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da42:	f7fe f982 	bl	800bd4a <__retarget_lock_acquire_recursive>
 800da46:	89ab      	ldrh	r3, [r5, #12]
 800da48:	071b      	lsls	r3, r3, #28
 800da4a:	d501      	bpl.n	800da50 <_vfiprintf_r+0x34>
 800da4c:	692b      	ldr	r3, [r5, #16]
 800da4e:	b99b      	cbnz	r3, 800da78 <_vfiprintf_r+0x5c>
 800da50:	4629      	mov	r1, r5
 800da52:	4630      	mov	r0, r6
 800da54:	f000 f938 	bl	800dcc8 <__swsetup_r>
 800da58:	b170      	cbz	r0, 800da78 <_vfiprintf_r+0x5c>
 800da5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da5c:	07dc      	lsls	r4, r3, #31
 800da5e:	d504      	bpl.n	800da6a <_vfiprintf_r+0x4e>
 800da60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da64:	b01d      	add	sp, #116	@ 0x74
 800da66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6a:	89ab      	ldrh	r3, [r5, #12]
 800da6c:	0598      	lsls	r0, r3, #22
 800da6e:	d4f7      	bmi.n	800da60 <_vfiprintf_r+0x44>
 800da70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da72:	f7fe f96b 	bl	800bd4c <__retarget_lock_release_recursive>
 800da76:	e7f3      	b.n	800da60 <_vfiprintf_r+0x44>
 800da78:	2300      	movs	r3, #0
 800da7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800da7c:	2320      	movs	r3, #32
 800da7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da82:	2330      	movs	r3, #48	@ 0x30
 800da84:	f04f 0901 	mov.w	r9, #1
 800da88:	f8cd 800c 	str.w	r8, [sp, #12]
 800da8c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800dc38 <_vfiprintf_r+0x21c>
 800da90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da94:	4623      	mov	r3, r4
 800da96:	469a      	mov	sl, r3
 800da98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da9c:	b10a      	cbz	r2, 800daa2 <_vfiprintf_r+0x86>
 800da9e:	2a25      	cmp	r2, #37	@ 0x25
 800daa0:	d1f9      	bne.n	800da96 <_vfiprintf_r+0x7a>
 800daa2:	ebba 0b04 	subs.w	fp, sl, r4
 800daa6:	d00b      	beq.n	800dac0 <_vfiprintf_r+0xa4>
 800daa8:	465b      	mov	r3, fp
 800daaa:	4622      	mov	r2, r4
 800daac:	4629      	mov	r1, r5
 800daae:	4630      	mov	r0, r6
 800dab0:	f7ff ffa1 	bl	800d9f6 <__sfputs_r>
 800dab4:	3001      	adds	r0, #1
 800dab6:	f000 80a7 	beq.w	800dc08 <_vfiprintf_r+0x1ec>
 800daba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dabc:	445a      	add	r2, fp
 800dabe:	9209      	str	r2, [sp, #36]	@ 0x24
 800dac0:	f89a 3000 	ldrb.w	r3, [sl]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f000 809f 	beq.w	800dc08 <_vfiprintf_r+0x1ec>
 800daca:	2300      	movs	r3, #0
 800dacc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dad4:	f10a 0a01 	add.w	sl, sl, #1
 800dad8:	9304      	str	r3, [sp, #16]
 800dada:	9307      	str	r3, [sp, #28]
 800dadc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dae0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dae2:	4654      	mov	r4, sl
 800dae4:	2205      	movs	r2, #5
 800dae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daea:	4853      	ldr	r0, [pc, #332]	@ (800dc38 <_vfiprintf_r+0x21c>)
 800daec:	f7fe f92f 	bl	800bd4e <memchr>
 800daf0:	9a04      	ldr	r2, [sp, #16]
 800daf2:	b9d8      	cbnz	r0, 800db2c <_vfiprintf_r+0x110>
 800daf4:	06d1      	lsls	r1, r2, #27
 800daf6:	bf44      	itt	mi
 800daf8:	2320      	movmi	r3, #32
 800dafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dafe:	0713      	lsls	r3, r2, #28
 800db00:	bf44      	itt	mi
 800db02:	232b      	movmi	r3, #43	@ 0x2b
 800db04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db08:	f89a 3000 	ldrb.w	r3, [sl]
 800db0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800db0e:	d015      	beq.n	800db3c <_vfiprintf_r+0x120>
 800db10:	4654      	mov	r4, sl
 800db12:	2000      	movs	r0, #0
 800db14:	f04f 0c0a 	mov.w	ip, #10
 800db18:	9a07      	ldr	r2, [sp, #28]
 800db1a:	4621      	mov	r1, r4
 800db1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db20:	3b30      	subs	r3, #48	@ 0x30
 800db22:	2b09      	cmp	r3, #9
 800db24:	d94b      	bls.n	800dbbe <_vfiprintf_r+0x1a2>
 800db26:	b1b0      	cbz	r0, 800db56 <_vfiprintf_r+0x13a>
 800db28:	9207      	str	r2, [sp, #28]
 800db2a:	e014      	b.n	800db56 <_vfiprintf_r+0x13a>
 800db2c:	eba0 0308 	sub.w	r3, r0, r8
 800db30:	fa09 f303 	lsl.w	r3, r9, r3
 800db34:	4313      	orrs	r3, r2
 800db36:	46a2      	mov	sl, r4
 800db38:	9304      	str	r3, [sp, #16]
 800db3a:	e7d2      	b.n	800dae2 <_vfiprintf_r+0xc6>
 800db3c:	9b03      	ldr	r3, [sp, #12]
 800db3e:	1d19      	adds	r1, r3, #4
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	9103      	str	r1, [sp, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	bfbb      	ittet	lt
 800db48:	425b      	neglt	r3, r3
 800db4a:	f042 0202 	orrlt.w	r2, r2, #2
 800db4e:	9307      	strge	r3, [sp, #28]
 800db50:	9307      	strlt	r3, [sp, #28]
 800db52:	bfb8      	it	lt
 800db54:	9204      	strlt	r2, [sp, #16]
 800db56:	7823      	ldrb	r3, [r4, #0]
 800db58:	2b2e      	cmp	r3, #46	@ 0x2e
 800db5a:	d10a      	bne.n	800db72 <_vfiprintf_r+0x156>
 800db5c:	7863      	ldrb	r3, [r4, #1]
 800db5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800db60:	d132      	bne.n	800dbc8 <_vfiprintf_r+0x1ac>
 800db62:	9b03      	ldr	r3, [sp, #12]
 800db64:	3402      	adds	r4, #2
 800db66:	1d1a      	adds	r2, r3, #4
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	9203      	str	r2, [sp, #12]
 800db6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db70:	9305      	str	r3, [sp, #20]
 800db72:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800dc3c <_vfiprintf_r+0x220>
 800db76:	2203      	movs	r2, #3
 800db78:	4650      	mov	r0, sl
 800db7a:	7821      	ldrb	r1, [r4, #0]
 800db7c:	f7fe f8e7 	bl	800bd4e <memchr>
 800db80:	b138      	cbz	r0, 800db92 <_vfiprintf_r+0x176>
 800db82:	2240      	movs	r2, #64	@ 0x40
 800db84:	9b04      	ldr	r3, [sp, #16]
 800db86:	eba0 000a 	sub.w	r0, r0, sl
 800db8a:	4082      	lsls	r2, r0
 800db8c:	4313      	orrs	r3, r2
 800db8e:	3401      	adds	r4, #1
 800db90:	9304      	str	r3, [sp, #16]
 800db92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db96:	2206      	movs	r2, #6
 800db98:	4829      	ldr	r0, [pc, #164]	@ (800dc40 <_vfiprintf_r+0x224>)
 800db9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db9e:	f7fe f8d6 	bl	800bd4e <memchr>
 800dba2:	2800      	cmp	r0, #0
 800dba4:	d03f      	beq.n	800dc26 <_vfiprintf_r+0x20a>
 800dba6:	4b27      	ldr	r3, [pc, #156]	@ (800dc44 <_vfiprintf_r+0x228>)
 800dba8:	bb1b      	cbnz	r3, 800dbf2 <_vfiprintf_r+0x1d6>
 800dbaa:	9b03      	ldr	r3, [sp, #12]
 800dbac:	3307      	adds	r3, #7
 800dbae:	f023 0307 	bic.w	r3, r3, #7
 800dbb2:	3308      	adds	r3, #8
 800dbb4:	9303      	str	r3, [sp, #12]
 800dbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbb8:	443b      	add	r3, r7
 800dbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbbc:	e76a      	b.n	800da94 <_vfiprintf_r+0x78>
 800dbbe:	460c      	mov	r4, r1
 800dbc0:	2001      	movs	r0, #1
 800dbc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbc6:	e7a8      	b.n	800db1a <_vfiprintf_r+0xfe>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	f04f 0c0a 	mov.w	ip, #10
 800dbce:	4619      	mov	r1, r3
 800dbd0:	3401      	adds	r4, #1
 800dbd2:	9305      	str	r3, [sp, #20]
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbda:	3a30      	subs	r2, #48	@ 0x30
 800dbdc:	2a09      	cmp	r2, #9
 800dbde:	d903      	bls.n	800dbe8 <_vfiprintf_r+0x1cc>
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d0c6      	beq.n	800db72 <_vfiprintf_r+0x156>
 800dbe4:	9105      	str	r1, [sp, #20]
 800dbe6:	e7c4      	b.n	800db72 <_vfiprintf_r+0x156>
 800dbe8:	4604      	mov	r4, r0
 800dbea:	2301      	movs	r3, #1
 800dbec:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbf0:	e7f0      	b.n	800dbd4 <_vfiprintf_r+0x1b8>
 800dbf2:	ab03      	add	r3, sp, #12
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	462a      	mov	r2, r5
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	4b13      	ldr	r3, [pc, #76]	@ (800dc48 <_vfiprintf_r+0x22c>)
 800dbfc:	a904      	add	r1, sp, #16
 800dbfe:	f7fd fb43 	bl	800b288 <_printf_float>
 800dc02:	4607      	mov	r7, r0
 800dc04:	1c78      	adds	r0, r7, #1
 800dc06:	d1d6      	bne.n	800dbb6 <_vfiprintf_r+0x19a>
 800dc08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc0a:	07d9      	lsls	r1, r3, #31
 800dc0c:	d405      	bmi.n	800dc1a <_vfiprintf_r+0x1fe>
 800dc0e:	89ab      	ldrh	r3, [r5, #12]
 800dc10:	059a      	lsls	r2, r3, #22
 800dc12:	d402      	bmi.n	800dc1a <_vfiprintf_r+0x1fe>
 800dc14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc16:	f7fe f899 	bl	800bd4c <__retarget_lock_release_recursive>
 800dc1a:	89ab      	ldrh	r3, [r5, #12]
 800dc1c:	065b      	lsls	r3, r3, #25
 800dc1e:	f53f af1f 	bmi.w	800da60 <_vfiprintf_r+0x44>
 800dc22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc24:	e71e      	b.n	800da64 <_vfiprintf_r+0x48>
 800dc26:	ab03      	add	r3, sp, #12
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	462a      	mov	r2, r5
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	4b06      	ldr	r3, [pc, #24]	@ (800dc48 <_vfiprintf_r+0x22c>)
 800dc30:	a904      	add	r1, sp, #16
 800dc32:	f7fd fdc7 	bl	800b7c4 <_printf_i>
 800dc36:	e7e4      	b.n	800dc02 <_vfiprintf_r+0x1e6>
 800dc38:	0800ea27 	.word	0x0800ea27
 800dc3c:	0800ea2d 	.word	0x0800ea2d
 800dc40:	0800ea31 	.word	0x0800ea31
 800dc44:	0800b289 	.word	0x0800b289
 800dc48:	0800d9f7 	.word	0x0800d9f7

0800dc4c <__swbuf_r>:
 800dc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc4e:	460e      	mov	r6, r1
 800dc50:	4614      	mov	r4, r2
 800dc52:	4605      	mov	r5, r0
 800dc54:	b118      	cbz	r0, 800dc5e <__swbuf_r+0x12>
 800dc56:	6a03      	ldr	r3, [r0, #32]
 800dc58:	b90b      	cbnz	r3, 800dc5e <__swbuf_r+0x12>
 800dc5a:	f7fd ffb3 	bl	800bbc4 <__sinit>
 800dc5e:	69a3      	ldr	r3, [r4, #24]
 800dc60:	60a3      	str	r3, [r4, #8]
 800dc62:	89a3      	ldrh	r3, [r4, #12]
 800dc64:	071a      	lsls	r2, r3, #28
 800dc66:	d501      	bpl.n	800dc6c <__swbuf_r+0x20>
 800dc68:	6923      	ldr	r3, [r4, #16]
 800dc6a:	b943      	cbnz	r3, 800dc7e <__swbuf_r+0x32>
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f000 f82a 	bl	800dcc8 <__swsetup_r>
 800dc74:	b118      	cbz	r0, 800dc7e <__swbuf_r+0x32>
 800dc76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	6922      	ldr	r2, [r4, #16]
 800dc82:	b2f6      	uxtb	r6, r6
 800dc84:	1a98      	subs	r0, r3, r2
 800dc86:	6963      	ldr	r3, [r4, #20]
 800dc88:	4637      	mov	r7, r6
 800dc8a:	4283      	cmp	r3, r0
 800dc8c:	dc05      	bgt.n	800dc9a <__swbuf_r+0x4e>
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4628      	mov	r0, r5
 800dc92:	f7ff f993 	bl	800cfbc <_fflush_r>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	d1ed      	bne.n	800dc76 <__swbuf_r+0x2a>
 800dc9a:	68a3      	ldr	r3, [r4, #8]
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	60a3      	str	r3, [r4, #8]
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	6022      	str	r2, [r4, #0]
 800dca6:	701e      	strb	r6, [r3, #0]
 800dca8:	6962      	ldr	r2, [r4, #20]
 800dcaa:	1c43      	adds	r3, r0, #1
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d004      	beq.n	800dcba <__swbuf_r+0x6e>
 800dcb0:	89a3      	ldrh	r3, [r4, #12]
 800dcb2:	07db      	lsls	r3, r3, #31
 800dcb4:	d5e1      	bpl.n	800dc7a <__swbuf_r+0x2e>
 800dcb6:	2e0a      	cmp	r6, #10
 800dcb8:	d1df      	bne.n	800dc7a <__swbuf_r+0x2e>
 800dcba:	4621      	mov	r1, r4
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	f7ff f97d 	bl	800cfbc <_fflush_r>
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	d0d9      	beq.n	800dc7a <__swbuf_r+0x2e>
 800dcc6:	e7d6      	b.n	800dc76 <__swbuf_r+0x2a>

0800dcc8 <__swsetup_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4b29      	ldr	r3, [pc, #164]	@ (800dd70 <__swsetup_r+0xa8>)
 800dccc:	4605      	mov	r5, r0
 800dcce:	6818      	ldr	r0, [r3, #0]
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	b118      	cbz	r0, 800dcdc <__swsetup_r+0x14>
 800dcd4:	6a03      	ldr	r3, [r0, #32]
 800dcd6:	b90b      	cbnz	r3, 800dcdc <__swsetup_r+0x14>
 800dcd8:	f7fd ff74 	bl	800bbc4 <__sinit>
 800dcdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce0:	0719      	lsls	r1, r3, #28
 800dce2:	d422      	bmi.n	800dd2a <__swsetup_r+0x62>
 800dce4:	06da      	lsls	r2, r3, #27
 800dce6:	d407      	bmi.n	800dcf8 <__swsetup_r+0x30>
 800dce8:	2209      	movs	r2, #9
 800dcea:	602a      	str	r2, [r5, #0]
 800dcec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcf4:	81a3      	strh	r3, [r4, #12]
 800dcf6:	e033      	b.n	800dd60 <__swsetup_r+0x98>
 800dcf8:	0758      	lsls	r0, r3, #29
 800dcfa:	d512      	bpl.n	800dd22 <__swsetup_r+0x5a>
 800dcfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcfe:	b141      	cbz	r1, 800dd12 <__swsetup_r+0x4a>
 800dd00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd04:	4299      	cmp	r1, r3
 800dd06:	d002      	beq.n	800dd0e <__swsetup_r+0x46>
 800dd08:	4628      	mov	r0, r5
 800dd0a:	f7fe fe8d 	bl	800ca28 <_free_r>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd12:	89a3      	ldrh	r3, [r4, #12]
 800dd14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd18:	81a3      	strh	r3, [r4, #12]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	6063      	str	r3, [r4, #4]
 800dd1e:	6923      	ldr	r3, [r4, #16]
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	89a3      	ldrh	r3, [r4, #12]
 800dd24:	f043 0308 	orr.w	r3, r3, #8
 800dd28:	81a3      	strh	r3, [r4, #12]
 800dd2a:	6923      	ldr	r3, [r4, #16]
 800dd2c:	b94b      	cbnz	r3, 800dd42 <__swsetup_r+0x7a>
 800dd2e:	89a3      	ldrh	r3, [r4, #12]
 800dd30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd38:	d003      	beq.n	800dd42 <__swsetup_r+0x7a>
 800dd3a:	4621      	mov	r1, r4
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	f000 f83e 	bl	800ddbe <__smakebuf_r>
 800dd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd46:	f013 0201 	ands.w	r2, r3, #1
 800dd4a:	d00a      	beq.n	800dd62 <__swsetup_r+0x9a>
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	60a2      	str	r2, [r4, #8]
 800dd50:	6962      	ldr	r2, [r4, #20]
 800dd52:	4252      	negs	r2, r2
 800dd54:	61a2      	str	r2, [r4, #24]
 800dd56:	6922      	ldr	r2, [r4, #16]
 800dd58:	b942      	cbnz	r2, 800dd6c <__swsetup_r+0xa4>
 800dd5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd5e:	d1c5      	bne.n	800dcec <__swsetup_r+0x24>
 800dd60:	bd38      	pop	{r3, r4, r5, pc}
 800dd62:	0799      	lsls	r1, r3, #30
 800dd64:	bf58      	it	pl
 800dd66:	6962      	ldrpl	r2, [r4, #20]
 800dd68:	60a2      	str	r2, [r4, #8]
 800dd6a:	e7f4      	b.n	800dd56 <__swsetup_r+0x8e>
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	e7f7      	b.n	800dd60 <__swsetup_r+0x98>
 800dd70:	20000054 	.word	0x20000054

0800dd74 <__swhatbuf_r>:
 800dd74:	b570      	push	{r4, r5, r6, lr}
 800dd76:	460c      	mov	r4, r1
 800dd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd7c:	4615      	mov	r5, r2
 800dd7e:	2900      	cmp	r1, #0
 800dd80:	461e      	mov	r6, r3
 800dd82:	b096      	sub	sp, #88	@ 0x58
 800dd84:	da0c      	bge.n	800dda0 <__swhatbuf_r+0x2c>
 800dd86:	89a3      	ldrh	r3, [r4, #12]
 800dd88:	2100      	movs	r1, #0
 800dd8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd8e:	bf14      	ite	ne
 800dd90:	2340      	movne	r3, #64	@ 0x40
 800dd92:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd96:	2000      	movs	r0, #0
 800dd98:	6031      	str	r1, [r6, #0]
 800dd9a:	602b      	str	r3, [r5, #0]
 800dd9c:	b016      	add	sp, #88	@ 0x58
 800dd9e:	bd70      	pop	{r4, r5, r6, pc}
 800dda0:	466a      	mov	r2, sp
 800dda2:	f000 f849 	bl	800de38 <_fstat_r>
 800dda6:	2800      	cmp	r0, #0
 800dda8:	dbed      	blt.n	800dd86 <__swhatbuf_r+0x12>
 800ddaa:	9901      	ldr	r1, [sp, #4]
 800ddac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ddb0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ddb4:	4259      	negs	r1, r3
 800ddb6:	4159      	adcs	r1, r3
 800ddb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddbc:	e7eb      	b.n	800dd96 <__swhatbuf_r+0x22>

0800ddbe <__smakebuf_r>:
 800ddbe:	898b      	ldrh	r3, [r1, #12]
 800ddc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddc2:	079d      	lsls	r5, r3, #30
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	d507      	bpl.n	800ddda <__smakebuf_r+0x1c>
 800ddca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ddce:	6023      	str	r3, [r4, #0]
 800ddd0:	6123      	str	r3, [r4, #16]
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	6163      	str	r3, [r4, #20]
 800ddd6:	b003      	add	sp, #12
 800ddd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddda:	466a      	mov	r2, sp
 800dddc:	ab01      	add	r3, sp, #4
 800ddde:	f7ff ffc9 	bl	800dd74 <__swhatbuf_r>
 800dde2:	9f00      	ldr	r7, [sp, #0]
 800dde4:	4605      	mov	r5, r0
 800dde6:	4639      	mov	r1, r7
 800dde8:	4630      	mov	r0, r6
 800ddea:	f7fe ffe7 	bl	800cdbc <_malloc_r>
 800ddee:	b948      	cbnz	r0, 800de04 <__smakebuf_r+0x46>
 800ddf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddf4:	059a      	lsls	r2, r3, #22
 800ddf6:	d4ee      	bmi.n	800ddd6 <__smakebuf_r+0x18>
 800ddf8:	f023 0303 	bic.w	r3, r3, #3
 800ddfc:	f043 0302 	orr.w	r3, r3, #2
 800de00:	81a3      	strh	r3, [r4, #12]
 800de02:	e7e2      	b.n	800ddca <__smakebuf_r+0xc>
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de0e:	81a3      	strh	r3, [r4, #12]
 800de10:	9b01      	ldr	r3, [sp, #4]
 800de12:	6020      	str	r0, [r4, #0]
 800de14:	b15b      	cbz	r3, 800de2e <__smakebuf_r+0x70>
 800de16:	4630      	mov	r0, r6
 800de18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de1c:	f000 f81e 	bl	800de5c <_isatty_r>
 800de20:	b128      	cbz	r0, 800de2e <__smakebuf_r+0x70>
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	f023 0303 	bic.w	r3, r3, #3
 800de28:	f043 0301 	orr.w	r3, r3, #1
 800de2c:	81a3      	strh	r3, [r4, #12]
 800de2e:	89a3      	ldrh	r3, [r4, #12]
 800de30:	431d      	orrs	r5, r3
 800de32:	81a5      	strh	r5, [r4, #12]
 800de34:	e7cf      	b.n	800ddd6 <__smakebuf_r+0x18>
	...

0800de38 <_fstat_r>:
 800de38:	b538      	push	{r3, r4, r5, lr}
 800de3a:	2300      	movs	r3, #0
 800de3c:	4d06      	ldr	r5, [pc, #24]	@ (800de58 <_fstat_r+0x20>)
 800de3e:	4604      	mov	r4, r0
 800de40:	4608      	mov	r0, r1
 800de42:	4611      	mov	r1, r2
 800de44:	602b      	str	r3, [r5, #0]
 800de46:	f7f9 f849 	bl	8006edc <_fstat>
 800de4a:	1c43      	adds	r3, r0, #1
 800de4c:	d102      	bne.n	800de54 <_fstat_r+0x1c>
 800de4e:	682b      	ldr	r3, [r5, #0]
 800de50:	b103      	cbz	r3, 800de54 <_fstat_r+0x1c>
 800de52:	6023      	str	r3, [r4, #0]
 800de54:	bd38      	pop	{r3, r4, r5, pc}
 800de56:	bf00      	nop
 800de58:	20001670 	.word	0x20001670

0800de5c <_isatty_r>:
 800de5c:	b538      	push	{r3, r4, r5, lr}
 800de5e:	2300      	movs	r3, #0
 800de60:	4d05      	ldr	r5, [pc, #20]	@ (800de78 <_isatty_r+0x1c>)
 800de62:	4604      	mov	r4, r0
 800de64:	4608      	mov	r0, r1
 800de66:	602b      	str	r3, [r5, #0]
 800de68:	f7f9 f847 	bl	8006efa <_isatty>
 800de6c:	1c43      	adds	r3, r0, #1
 800de6e:	d102      	bne.n	800de76 <_isatty_r+0x1a>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	b103      	cbz	r3, 800de76 <_isatty_r+0x1a>
 800de74:	6023      	str	r3, [r4, #0]
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	20001670 	.word	0x20001670

0800de7c <_raise_r>:
 800de7c:	291f      	cmp	r1, #31
 800de7e:	b538      	push	{r3, r4, r5, lr}
 800de80:	4605      	mov	r5, r0
 800de82:	460c      	mov	r4, r1
 800de84:	d904      	bls.n	800de90 <_raise_r+0x14>
 800de86:	2316      	movs	r3, #22
 800de88:	6003      	str	r3, [r0, #0]
 800de8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de8e:	bd38      	pop	{r3, r4, r5, pc}
 800de90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de92:	b112      	cbz	r2, 800de9a <_raise_r+0x1e>
 800de94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de98:	b94b      	cbnz	r3, 800deae <_raise_r+0x32>
 800de9a:	4628      	mov	r0, r5
 800de9c:	f000 f830 	bl	800df00 <_getpid_r>
 800dea0:	4622      	mov	r2, r4
 800dea2:	4601      	mov	r1, r0
 800dea4:	4628      	mov	r0, r5
 800dea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deaa:	f000 b817 	b.w	800dedc <_kill_r>
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d00a      	beq.n	800dec8 <_raise_r+0x4c>
 800deb2:	1c59      	adds	r1, r3, #1
 800deb4:	d103      	bne.n	800debe <_raise_r+0x42>
 800deb6:	2316      	movs	r3, #22
 800deb8:	6003      	str	r3, [r0, #0]
 800deba:	2001      	movs	r0, #1
 800debc:	e7e7      	b.n	800de8e <_raise_r+0x12>
 800debe:	2100      	movs	r1, #0
 800dec0:	4620      	mov	r0, r4
 800dec2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dec6:	4798      	blx	r3
 800dec8:	2000      	movs	r0, #0
 800deca:	e7e0      	b.n	800de8e <_raise_r+0x12>

0800decc <raise>:
 800decc:	4b02      	ldr	r3, [pc, #8]	@ (800ded8 <raise+0xc>)
 800dece:	4601      	mov	r1, r0
 800ded0:	6818      	ldr	r0, [r3, #0]
 800ded2:	f7ff bfd3 	b.w	800de7c <_raise_r>
 800ded6:	bf00      	nop
 800ded8:	20000054 	.word	0x20000054

0800dedc <_kill_r>:
 800dedc:	b538      	push	{r3, r4, r5, lr}
 800dede:	2300      	movs	r3, #0
 800dee0:	4d06      	ldr	r5, [pc, #24]	@ (800defc <_kill_r+0x20>)
 800dee2:	4604      	mov	r4, r0
 800dee4:	4608      	mov	r0, r1
 800dee6:	4611      	mov	r1, r2
 800dee8:	602b      	str	r3, [r5, #0]
 800deea:	f7f8 ff98 	bl	8006e1e <_kill>
 800deee:	1c43      	adds	r3, r0, #1
 800def0:	d102      	bne.n	800def8 <_kill_r+0x1c>
 800def2:	682b      	ldr	r3, [r5, #0]
 800def4:	b103      	cbz	r3, 800def8 <_kill_r+0x1c>
 800def6:	6023      	str	r3, [r4, #0]
 800def8:	bd38      	pop	{r3, r4, r5, pc}
 800defa:	bf00      	nop
 800defc:	20001670 	.word	0x20001670

0800df00 <_getpid_r>:
 800df00:	f7f8 bf86 	b.w	8006e10 <_getpid>

0800df04 <_init>:
 800df04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df06:	bf00      	nop
 800df08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df0a:	bc08      	pop	{r3}
 800df0c:	469e      	mov	lr, r3
 800df0e:	4770      	bx	lr

0800df10 <_fini>:
 800df10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df12:	bf00      	nop
 800df14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df16:	bc08      	pop	{r3}
 800df18:	469e      	mov	lr, r3
 800df1a:	4770      	bx	lr
