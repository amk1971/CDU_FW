
RCU_NAV_Feedback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d430  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  0800d620  0800d620  0000e620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3a8  0800e3a8  000101f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3a8  0800e3a8  0000f3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3b0  0800e3b0  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3b0  0800e3b0  0000f3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3b4  0800e3b4  0000f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800e3b8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  200001f8  0800e5b0  000101f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001660  0800e5b0  00010660  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018793  00000000  00000000  00010221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a57  00000000  00000000  000289b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  0002c410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001d79b  00000000  00000000  0002da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001ad98  00000000  00000000  0004b223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a67c8  00000000  00000000  00065fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010c783  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000011d1  00000000  00000000  0010c7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f40  00000000  00000000  0010d998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001148d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001f8 	.word	0x200001f8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800d608 	.word	0x0800d608

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001fc 	.word	0x200001fc
 800022c:	0800d608 	.word	0x0800d608

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__gesf2>:
 8000c08:	f04f 3cff 	mov.w	ip, #4294967295
 8000c0c:	e006      	b.n	8000c1c <__cmpsf2+0x4>
 8000c0e:	bf00      	nop

08000c10 <__lesf2>:
 8000c10:	f04f 0c01 	mov.w	ip, #1
 8000c14:	e002      	b.n	8000c1c <__cmpsf2+0x4>
 8000c16:	bf00      	nop

08000c18 <__cmpsf2>:
 8000c18:	f04f 0c01 	mov.w	ip, #1
 8000c1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d011      	beq.n	8000c58 <__cmpsf2+0x40>
 8000c34:	b001      	add	sp, #4
 8000c36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c3a:	bf18      	it	ne
 8000c3c:	ea90 0f01 	teqne	r0, r1
 8000c40:	bf58      	it	pl
 8000c42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c46:	bf88      	it	hi
 8000c48:	17c8      	asrhi	r0, r1, #31
 8000c4a:	bf38      	it	cc
 8000c4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c50:	bf18      	it	ne
 8000c52:	f040 0001 	orrne.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	d102      	bne.n	8000c64 <__cmpsf2+0x4c>
 8000c5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c62:	d105      	bne.n	8000c70 <__cmpsf2+0x58>
 8000c64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c68:	d1e4      	bne.n	8000c34 <__cmpsf2+0x1c>
 8000c6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c6e:	d0e1      	beq.n	8000c34 <__cmpsf2+0x1c>
 8000c70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_cfrcmple>:
 8000c78:	4684      	mov	ip, r0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	4661      	mov	r1, ip
 8000c7e:	e7ff      	b.n	8000c80 <__aeabi_cfcmpeq>

08000c80 <__aeabi_cfcmpeq>:
 8000c80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c82:	f7ff ffc9 	bl	8000c18 <__cmpsf2>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	bf48      	it	mi
 8000c8a:	f110 0f00 	cmnmi.w	r0, #0
 8000c8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c90 <__aeabi_fcmpeq>:
 8000c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c94:	f7ff fff4 	bl	8000c80 <__aeabi_cfcmpeq>
 8000c98:	bf0c      	ite	eq
 8000c9a:	2001      	moveq	r0, #1
 8000c9c:	2000      	movne	r0, #0
 8000c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_fcmplt>:
 8000ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca8:	f7ff ffea 	bl	8000c80 <__aeabi_cfcmpeq>
 8000cac:	bf34      	ite	cc
 8000cae:	2001      	movcc	r0, #1
 8000cb0:	2000      	movcs	r0, #0
 8000cb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_fcmple>:
 8000cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cbc:	f7ff ffe0 	bl	8000c80 <__aeabi_cfcmpeq>
 8000cc0:	bf94      	ite	ls
 8000cc2:	2001      	movls	r0, #1
 8000cc4:	2000      	movhi	r0, #0
 8000cc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cca:	bf00      	nop

08000ccc <__aeabi_fcmpge>:
 8000ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd0:	f7ff ffd2 	bl	8000c78 <__aeabi_cfrcmple>
 8000cd4:	bf94      	ite	ls
 8000cd6:	2001      	movls	r0, #1
 8000cd8:	2000      	movhi	r0, #0
 8000cda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fcmpgt>:
 8000ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce4:	f7ff ffc8 	bl	8000c78 <__aeabi_cfrcmple>
 8000ce8:	bf34      	ite	cc
 8000cea:	2001      	movcc	r0, #1
 8000cec:	2000      	movcs	r0, #0
 8000cee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cf2:	bf00      	nop

08000cf4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a06      	ldr	r2, [pc, #24]	@ (8000d1c <vApplicationGetIdleTaskMemory+0x28>)
 8000d04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000214 	.word	0x20000214
 8000d20:	200002b4 	.word	0x200002b4

08000d24 <Delay>:
#include "glcd.h"

void Delay(int t) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    t *= 10;
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
    while (t) {
 8000d38:	e002      	b.n	8000d40 <Delay+0x1c>
        t--;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
    while (t) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f9      	bne.n	8000d3a <Delay+0x16>
    }
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
	...

08000d54 <send_command>:

void send_command(unsigned char command) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff ffe0 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);  // E_PIN_NUMBER=RESET
 8000d64:	4b66      	ldr	r3, [pc, #408]	@ (8000f00 <send_command+0x1ac>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a65      	ldr	r2, [pc, #404]	@ (8000f00 <send_command+0x1ac>)
 8000d6a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000d6e:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ffd7 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 8000d76:	4b62      	ldr	r3, [pc, #392]	@ (8000f00 <send_command+0x1ac>)
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	4a61      	ldr	r2, [pc, #388]	@ (8000f00 <send_command+0x1ac>)
 8000d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d80:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff ffce 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 8000d88:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <send_command+0x1ac>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8000f00 <send_command+0x1ac>)
 8000d8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d92:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff ffc5 	bl	8000d24 <Delay>
    SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8000d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8000f04 <send_command+0x1b0>)
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4a59      	ldr	r2, [pc, #356]	@ (8000f04 <send_command+0x1b0>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff ffbc 	bl	8000d24 <Delay>
    SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 8000dac:	4b55      	ldr	r3, [pc, #340]	@ (8000f04 <send_command+0x1b0>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	4a54      	ldr	r2, [pc, #336]	@ (8000f04 <send_command+0x1b0>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff ffb3 	bl	8000d24 <Delay>

    // Clear data lines
    DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8000dbe:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <send_command+0x1b4>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	4a51      	ldr	r2, [pc, #324]	@ (8000f08 <send_command+0x1b4>)
 8000dc4:	f023 0302 	bic.w	r3, r3, #2
 8000dc8:	60d3      	str	r3, [r2, #12]
    DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 8000dca:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <send_command+0x1ac>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	4a4c      	ldr	r2, [pc, #304]	@ (8000f00 <send_command+0x1ac>)
 8000dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000dd4:	60d3      	str	r3, [r2, #12]
    DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8000dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8000f0c <send_command+0x1b8>)
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	4a4c      	ldr	r2, [pc, #304]	@ (8000f0c <send_command+0x1b8>)
 8000ddc:	f023 0320 	bic.w	r3, r3, #32
 8000de0:	60d3      	str	r3, [r2, #12]
    DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8000de2:	4b49      	ldr	r3, [pc, #292]	@ (8000f08 <send_command+0x1b4>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	4a48      	ldr	r2, [pc, #288]	@ (8000f08 <send_command+0x1b4>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	60d3      	str	r3, [r2, #12]
    DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8000dee:	4b47      	ldr	r3, [pc, #284]	@ (8000f0c <send_command+0x1b8>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	4a46      	ldr	r2, [pc, #280]	@ (8000f0c <send_command+0x1b8>)
 8000df4:	f023 0310 	bic.w	r3, r3, #16
 8000df8:	60d3      	str	r3, [r2, #12]
    DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8000dfa:	4b42      	ldr	r3, [pc, #264]	@ (8000f04 <send_command+0x1b0>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	4a41      	ldr	r2, [pc, #260]	@ (8000f04 <send_command+0x1b0>)
 8000e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000e04:	60d3      	str	r3, [r2, #12]
    DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8000e06:	4b3f      	ldr	r3, [pc, #252]	@ (8000f04 <send_command+0x1b0>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f04 <send_command+0x1b0>)
 8000e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e10:	60d3      	str	r3, [r2, #12]
    DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8000e12:	4b3c      	ldr	r3, [pc, #240]	@ (8000f04 <send_command+0x1b0>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	4a3b      	ldr	r2, [pc, #236]	@ (8000f04 <send_command+0x1b0>)
 8000e18:	f023 0320 	bic.w	r3, r3, #32
 8000e1c:	60d3      	str	r3, [r2, #12]

    Delay(T);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f7ff ff80 	bl	8000d24 <Delay>
    CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <send_command+0x1ac>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	4a35      	ldr	r2, [pc, #212]	@ (8000f00 <send_command+0x1ac>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2e:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff ff77 	bl	8000d24 <Delay>

    // Set data lines with the command
    if (command & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <send_command+0xf8>
 8000e40:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <send_command+0x1b4>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <send_command+0x1b4>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	60d3      	str	r3, [r2, #12]
    if (command & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <send_command+0x10e>
 8000e56:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <send_command+0x1ac>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	4a29      	ldr	r2, [pc, #164]	@ (8000f00 <send_command+0x1ac>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e60:	60d3      	str	r3, [r2, #12]
    if (command & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d005      	beq.n	8000e78 <send_command+0x124>
 8000e6c:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <send_command+0x1b8>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	4a26      	ldr	r2, [pc, #152]	@ (8000f0c <send_command+0x1b8>)
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	60d3      	str	r3, [r2, #12]
    if (command & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <send_command+0x13a>
 8000e82:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <send_command+0x1b4>)
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	4a20      	ldr	r2, [pc, #128]	@ (8000f08 <send_command+0x1b4>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	60d3      	str	r3, [r2, #12]
    if (command & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <send_command+0x150>
 8000e98:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <send_command+0x1b8>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <send_command+0x1b8>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	60d3      	str	r3, [r2, #12]
    if (command & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <send_command+0x166>
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <send_command+0x1b0>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <send_command+0x1b0>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb8:	60d3      	str	r3, [r2, #12]
    if (command & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d005      	beq.n	8000ed0 <send_command+0x17c>
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <send_command+0x1b0>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <send_command+0x1b0>)
 8000eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ece:	60d3      	str	r3, [r2, #12]
    if (command & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da05      	bge.n	8000ee4 <send_command+0x190>
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <send_command+0x1b0>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <send_command+0x1b0>)
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	60d3      	str	r3, [r2, #12]

    Delay(T);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff ff1d 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8000eea:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <send_command+0x1ac>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <send_command+0x1ac>)
 8000ef0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000ef4:	60d3      	str	r3, [r2, #12]
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40011800 	.word	0x40011800
 8000f04:	40010800 	.word	0x40010800
 8000f08:	40010c00 	.word	0x40010c00
 8000f0c:	40011000 	.word	0x40011000

08000f10 <glcd_on>:

void glcd_on(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    Delay(T);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff ff05 	bl	8000d24 <Delay>
    send_command(0x3F);     // GLCD on
 8000f1a:	203f      	movs	r0, #63	@ 0x3f
 8000f1c:	f7ff ff1a 	bl	8000d54 <send_command>
    send_command(0x40);     // SET Cursor on Y=0
 8000f20:	2040      	movs	r0, #64	@ 0x40
 8000f22:	f7ff ff17 	bl	8000d54 <send_command>
    send_command(0xB8);     // SET Page on X=0, Line=0
 8000f26:	20b8      	movs	r0, #184	@ 0xb8
 8000f28:	f7ff ff14 	bl	8000d54 <send_command>
    send_command(0xC0);     // Display Start Line=0xC0
 8000f2c:	20c0      	movs	r0, #192	@ 0xc0
 8000f2e:	f7ff ff11 	bl	8000d54 <send_command>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <glcd_off>:

void glcd_off(void) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
    Delay(T);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff fef2 	bl	8000d24 <Delay>
    send_command(0x3E);
 8000f40:	203e      	movs	r0, #62	@ 0x3e
 8000f42:	f7ff ff07 	bl	8000d54 <send_command>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <glcd_putchar>:

void glcd_putchar(unsigned char data, unsigned char j) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	460a      	mov	r2, r1
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	71bb      	strb	r3, [r7, #6]
    if (j < 64) {
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f60:	f200 80d2 	bhi.w	8001108 <glcd_putchar+0x1bc>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);   // E_PIN_NUMBER=RESET
 8000f64:	4b64      	ldr	r3, [pc, #400]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a63      	ldr	r2, [pc, #396]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f6a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f6e:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fed7 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER);  // RW_PIN_NUMBER=RESET
 8000f76:	4b60      	ldr	r3, [pc, #384]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	4a5f      	ldr	r2, [pc, #380]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f80:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff fece 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << DI_PIN_NUMBER);   // DI_PIN_NUMBER=SET
 8000f88:	4b5b      	ldr	r3, [pc, #364]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a5a      	ldr	r2, [pc, #360]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f92:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fec5 	bl	8000d24 <Delay>
        SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8000f9a:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <glcd_putchar+0x1b0>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	4a57      	ldr	r2, [pc, #348]	@ (80010fc <glcd_putchar+0x1b0>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff febc 	bl	8000d24 <Delay>
        SECO2_PORT->ODR &= ~(1 << CS2_PIN_NUMBER);// CS2_PIN_NUMBER=RESET
 8000fac:	4b53      	ldr	r3, [pc, #332]	@ (80010fc <glcd_putchar+0x1b0>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	@ (80010fc <glcd_putchar+0x1b0>)
 8000fb2:	f023 0308 	bic.w	r3, r3, #8
 8000fb6:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff feb3 	bl	8000d24 <Delay>

        // Clear data lines
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8000fbe:	4b50      	ldr	r3, [pc, #320]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fc4:	f023 0302 	bic.w	r3, r3, #2
 8000fc8:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 8000fca:	4b4b      	ldr	r3, [pc, #300]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	4a4a      	ldr	r2, [pc, #296]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fd4:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8000fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8001104 <glcd_putchar+0x1b8>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	4a4a      	ldr	r2, [pc, #296]	@ (8001104 <glcd_putchar+0x1b8>)
 8000fdc:	f023 0320 	bic.w	r3, r3, #32
 8000fe0:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8000fe2:	4b47      	ldr	r3, [pc, #284]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	4a46      	ldr	r2, [pc, #280]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8000fee:	4b45      	ldr	r3, [pc, #276]	@ (8001104 <glcd_putchar+0x1b8>)
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	4a44      	ldr	r2, [pc, #272]	@ (8001104 <glcd_putchar+0x1b8>)
 8000ff4:	f023 0310 	bic.w	r3, r3, #16
 8000ff8:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8000ffa:	4b40      	ldr	r3, [pc, #256]	@ (80010fc <glcd_putchar+0x1b0>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80010fc <glcd_putchar+0x1b0>)
 8001000:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001004:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8001006:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <glcd_putchar+0x1b0>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	4a3c      	ldr	r2, [pc, #240]	@ (80010fc <glcd_putchar+0x1b0>)
 800100c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001010:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8001012:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <glcd_putchar+0x1b0>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	4a39      	ldr	r2, [pc, #228]	@ (80010fc <glcd_putchar+0x1b0>)
 8001018:	f023 0320 	bic.w	r3, r3, #32
 800101c:	60d3      	str	r3, [r2, #12]

        Delay(T);
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff fe80 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8001024:	4b34      	ldr	r3, [pc, #208]	@ (80010f8 <glcd_putchar+0x1ac>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4a33      	ldr	r2, [pc, #204]	@ (80010f8 <glcd_putchar+0x1ac>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800102e:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fe77 	bl	8000d24 <Delay>

        // Set data lines with the data
        if (data & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <glcd_putchar+0x100>
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <glcd_putchar+0x1b4>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <glcd_putchar+0x1b4>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	60d3      	str	r3, [r2, #12]
        if (data & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <glcd_putchar+0x116>
 8001056:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <glcd_putchar+0x1ac>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	4a27      	ldr	r2, [pc, #156]	@ (80010f8 <glcd_putchar+0x1ac>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001060:	60d3      	str	r3, [r2, #12]
        if (data & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <glcd_putchar+0x12c>
 800106c:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <glcd_putchar+0x1b8>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	4a24      	ldr	r2, [pc, #144]	@ (8001104 <glcd_putchar+0x1b8>)
 8001072:	f043 0320 	orr.w	r3, r3, #32
 8001076:	60d3      	str	r3, [r2, #12]
        if (data & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <glcd_putchar+0x142>
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <glcd_putchar+0x1b4>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	4a1e      	ldr	r2, [pc, #120]	@ (8001100 <glcd_putchar+0x1b4>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	60d3      	str	r3, [r2, #12]
        if (data & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <glcd_putchar+0x158>
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <glcd_putchar+0x1b8>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4a19      	ldr	r2, [pc, #100]	@ (8001104 <glcd_putchar+0x1b8>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	60d3      	str	r3, [r2, #12]
        if (data & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <glcd_putchar+0x16e>
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <glcd_putchar+0x1b0>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <glcd_putchar+0x1b0>)
 80010b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b8:	60d3      	str	r3, [r2, #12]
        if (data & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <glcd_putchar+0x184>
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <glcd_putchar+0x1b0>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <glcd_putchar+0x1b0>)
 80010ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ce:	60d3      	str	r3, [r2, #12]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da05      	bge.n	80010e4 <glcd_putchar+0x198>
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <glcd_putchar+0x1b0>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <glcd_putchar+0x1b0>)
 80010de:	f043 0320 	orr.w	r3, r3, #32
 80010e2:	60d3      	str	r3, [r2, #12]

        Delay(T);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fe1d 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 80010ea:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <glcd_putchar+0x1ac>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	4a02      	ldr	r2, [pc, #8]	@ (80010f8 <glcd_putchar+0x1ac>)
 80010f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80010f4:	60d3      	str	r3, [r2, #12]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);

        Delay(T);
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
    }
}
 80010f6:	e0d0      	b.n	800129a <glcd_putchar+0x34e>
 80010f8:	40011800 	.word	0x40011800
 80010fc:	40010800 	.word	0x40010800
 8001100:	40010c00 	.word	0x40010c00
 8001104:	40011000 	.word	0x40011000
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);   // E_PIN_NUMBER=RESET
 8001108:	4b66      	ldr	r3, [pc, #408]	@ (80012a4 <glcd_putchar+0x358>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a65      	ldr	r2, [pc, #404]	@ (80012a4 <glcd_putchar+0x358>)
 800110e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001112:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fe05 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER);  // RW_PIN_NUMBER=RESET
 800111a:	4b62      	ldr	r3, [pc, #392]	@ (80012a4 <glcd_putchar+0x358>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	4a61      	ldr	r2, [pc, #388]	@ (80012a4 <glcd_putchar+0x358>)
 8001120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001124:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fdfc 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << DI_PIN_NUMBER);   // DI_PIN_NUMBER=SET
 800112c:	4b5d      	ldr	r3, [pc, #372]	@ (80012a4 <glcd_putchar+0x358>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	4a5c      	ldr	r2, [pc, #368]	@ (80012a4 <glcd_putchar+0x358>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001136:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff fdf3 	bl	8000d24 <Delay>
        SECO1_PORT->ODR &= ~(1 << CS1_PIN_NUMBER);// CS1_PIN_NUMBER=RESET
 800113e:	4b5a      	ldr	r3, [pc, #360]	@ (80012a8 <glcd_putchar+0x35c>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	4a59      	ldr	r2, [pc, #356]	@ (80012a8 <glcd_putchar+0x35c>)
 8001144:	f023 0310 	bic.w	r3, r3, #16
 8001148:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff fdea 	bl	8000d24 <Delay>
        SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 8001150:	4b55      	ldr	r3, [pc, #340]	@ (80012a8 <glcd_putchar+0x35c>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4a54      	ldr	r2, [pc, #336]	@ (80012a8 <glcd_putchar+0x35c>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff fde1 	bl	8000d24 <Delay>
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8001162:	4b52      	ldr	r3, [pc, #328]	@ (80012ac <glcd_putchar+0x360>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	4a51      	ldr	r2, [pc, #324]	@ (80012ac <glcd_putchar+0x360>)
 8001168:	f023 0302 	bic.w	r3, r3, #2
 800116c:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 800116e:	4b4d      	ldr	r3, [pc, #308]	@ (80012a4 <glcd_putchar+0x358>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	4a4c      	ldr	r2, [pc, #304]	@ (80012a4 <glcd_putchar+0x358>)
 8001174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001178:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 800117a:	4b4d      	ldr	r3, [pc, #308]	@ (80012b0 <glcd_putchar+0x364>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	4a4c      	ldr	r2, [pc, #304]	@ (80012b0 <glcd_putchar+0x364>)
 8001180:	f023 0320 	bic.w	r3, r3, #32
 8001184:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8001186:	4b49      	ldr	r3, [pc, #292]	@ (80012ac <glcd_putchar+0x360>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	4a48      	ldr	r2, [pc, #288]	@ (80012ac <glcd_putchar+0x360>)
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8001192:	4b47      	ldr	r3, [pc, #284]	@ (80012b0 <glcd_putchar+0x364>)
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	4a46      	ldr	r2, [pc, #280]	@ (80012b0 <glcd_putchar+0x364>)
 8001198:	f023 0310 	bic.w	r3, r3, #16
 800119c:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 800119e:	4b42      	ldr	r3, [pc, #264]	@ (80012a8 <glcd_putchar+0x35c>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4a41      	ldr	r2, [pc, #260]	@ (80012a8 <glcd_putchar+0x35c>)
 80011a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011a8:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 80011aa:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <glcd_putchar+0x35c>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	4a3e      	ldr	r2, [pc, #248]	@ (80012a8 <glcd_putchar+0x35c>)
 80011b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011b4:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 80011b6:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <glcd_putchar+0x35c>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	4a3b      	ldr	r2, [pc, #236]	@ (80012a8 <glcd_putchar+0x35c>)
 80011bc:	f023 0320 	bic.w	r3, r3, #32
 80011c0:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fdae 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 80011c8:	4b36      	ldr	r3, [pc, #216]	@ (80012a4 <glcd_putchar+0x358>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4a35      	ldr	r2, [pc, #212]	@ (80012a4 <glcd_putchar+0x358>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d2:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff fda5 	bl	8000d24 <Delay>
        if (data & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <glcd_putchar+0x2a4>
 80011e4:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <glcd_putchar+0x360>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a30      	ldr	r2, [pc, #192]	@ (80012ac <glcd_putchar+0x360>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	60d3      	str	r3, [r2, #12]
        if (data & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <glcd_putchar+0x2ba>
 80011fa:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <glcd_putchar+0x358>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	4a29      	ldr	r2, [pc, #164]	@ (80012a4 <glcd_putchar+0x358>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001204:	60d3      	str	r3, [r2, #12]
        if (data & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <glcd_putchar+0x2d0>
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <glcd_putchar+0x364>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4a26      	ldr	r2, [pc, #152]	@ (80012b0 <glcd_putchar+0x364>)
 8001216:	f043 0320 	orr.w	r3, r3, #32
 800121a:	60d3      	str	r3, [r2, #12]
        if (data & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <glcd_putchar+0x2e6>
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <glcd_putchar+0x360>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4a20      	ldr	r2, [pc, #128]	@ (80012ac <glcd_putchar+0x360>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	60d3      	str	r3, [r2, #12]
        if (data & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <glcd_putchar+0x2fc>
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <glcd_putchar+0x364>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <glcd_putchar+0x364>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	60d3      	str	r3, [r2, #12]
        if (data & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <glcd_putchar+0x312>
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <glcd_putchar+0x35c>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <glcd_putchar+0x35c>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800125c:	60d3      	str	r3, [r2, #12]
        if (data & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <glcd_putchar+0x328>
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <glcd_putchar+0x35c>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <glcd_putchar+0x35c>)
 800126e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001272:	60d3      	str	r3, [r2, #12]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	da05      	bge.n	8001288 <glcd_putchar+0x33c>
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <glcd_putchar+0x35c>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <glcd_putchar+0x35c>)
 8001282:	f043 0320 	orr.w	r3, r3, #32
 8001286:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff fd4b 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <glcd_putchar+0x358>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <glcd_putchar+0x358>)
 8001294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001298:	60d3      	str	r3, [r2, #12]
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40011800 	.word	0x40011800
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40010c00 	.word	0x40010c00
 80012b0:	40011000 	.word	0x40011000

080012b4 <glcd_puts>:

void glcd_puts(char *str, char x, char y) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
 80012c0:	4613      	mov	r3, r2
 80012c2:	70bb      	strb	r3, [r7, #2]
    Delay(T);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fd2d 	bl	8000d24 <Delay>
    int i, j;
    while (*str != 0) {
 80012ca:	e030      	b.n	800132e <glcd_puts+0x7a>
        i = (8 * (*str));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	60fb      	str	r3, [r7, #12]
        j = i + 7;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3307      	adds	r3, #7
 80012d8:	60bb      	str	r3, [r7, #8]
        for (; i <= j; i++) {
 80012da:	e021      	b.n	8001320 <glcd_puts+0x6c>
            glcd_gotoxy(x, y);
 80012dc:	78ba      	ldrb	r2, [r7, #2]
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f82e 	bl	8001344 <glcd_gotoxy>
            glcd_putchar(Font[i], x);
 80012e8:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <glcd_puts+0x8c>)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	78fa      	ldrb	r2, [r7, #3]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe29 	bl	8000f4c <glcd_putchar>
            ++x;
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	3301      	adds	r3, #1
 80012fe:	70fb      	strb	r3, [r7, #3]
            if (x > 121) {
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b79      	cmp	r3, #121	@ 0x79
 8001304:	d909      	bls.n	800131a <glcd_puts+0x66>
                if (i % 8 == 0) {
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	2b00      	cmp	r3, #0
 800130e:	d104      	bne.n	800131a <glcd_puts+0x66>
                    ++y;
 8001310:	78bb      	ldrb	r3, [r7, #2]
 8001312:	3301      	adds	r3, #1
 8001314:	70bb      	strb	r3, [r7, #2]
                    x = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	70fb      	strb	r3, [r7, #3]
        for (; i <= j; i++) {
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	429a      	cmp	r2, r3
 8001326:	ddd9      	ble.n	80012dc <glcd_puts+0x28>
                }
            }
        }
        str++;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
    while (*str != 0) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1ca      	bne.n	80012cc <glcd_puts+0x18>
    }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	0800d77c 	.word	0x0800d77c

08001344 <glcd_gotoxy>:
        glcd_gotoxy(x, y);
        glcd_putImage(point, x);
    }
}

void glcd_gotoxy(unsigned char x, unsigned char y) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	460a      	mov	r2, r1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	71bb      	strb	r3, [r7, #6]
    Delay(T);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fce5 	bl	8000d24 <Delay>
    goto_row(y);
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f808 	bl	8001372 <goto_row>
    goto_column(x);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f81b 	bl	80013a0 <goto_column>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <goto_row>:

void goto_row(unsigned char y) {
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fcd1 	bl	8000d24 <Delay>
    y = (y | 0xB8) & 0xBF;
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f063 0347 	orn	r3, r3, #71	@ 0x47
 800138e:	71fb      	strb	r3, [r7, #7]
    send_command(y);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fcde 	bl	8000d54 <send_command>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <goto_column>:

void goto_column(unsigned char x) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff fcba 	bl	8000d24 <Delay>

    if (x < 64) {
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80013b4:	f200 80da 	bhi.w	800156c <goto_column+0x1cc>
        x = (x | 0x40) & 0x7F;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013c4:	71fb      	strb	r3, [r7, #7]
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 80013c6:	4b65      	ldr	r3, [pc, #404]	@ (800155c <goto_column+0x1bc>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	4a64      	ldr	r2, [pc, #400]	@ (800155c <goto_column+0x1bc>)
 80013cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80013d0:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fca6 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 80013d8:	4b60      	ldr	r3, [pc, #384]	@ (800155c <goto_column+0x1bc>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a5f      	ldr	r2, [pc, #380]	@ (800155c <goto_column+0x1bc>)
 80013de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013e2:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff fc9d 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 80013ea:	4b5c      	ldr	r3, [pc, #368]	@ (800155c <goto_column+0x1bc>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	4a5b      	ldr	r2, [pc, #364]	@ (800155c <goto_column+0x1bc>)
 80013f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80013f4:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f7ff fc94 	bl	8000d24 <Delay>
        SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 80013fc:	4b58      	ldr	r3, [pc, #352]	@ (8001560 <goto_column+0x1c0>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4a57      	ldr	r2, [pc, #348]	@ (8001560 <goto_column+0x1c0>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff fc8b 	bl	8000d24 <Delay>
        SECO2_PORT->ODR &= ~(1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=RESET
 800140e:	4b54      	ldr	r3, [pc, #336]	@ (8001560 <goto_column+0x1c0>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4a53      	ldr	r2, [pc, #332]	@ (8001560 <goto_column+0x1c0>)
 8001414:	f023 0308 	bic.w	r3, r3, #8
 8001418:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fc82 	bl	8000d24 <Delay>

        // Clear data lines
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8001420:	4b50      	ldr	r3, [pc, #320]	@ (8001564 <goto_column+0x1c4>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a4f      	ldr	r2, [pc, #316]	@ (8001564 <goto_column+0x1c4>)
 8001426:	f023 0302 	bic.w	r3, r3, #2
 800142a:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 800142c:	4b4b      	ldr	r3, [pc, #300]	@ (800155c <goto_column+0x1bc>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a4a      	ldr	r2, [pc, #296]	@ (800155c <goto_column+0x1bc>)
 8001432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001436:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8001438:	4b4b      	ldr	r3, [pc, #300]	@ (8001568 <goto_column+0x1c8>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a4a      	ldr	r2, [pc, #296]	@ (8001568 <goto_column+0x1c8>)
 800143e:	f023 0320 	bic.w	r3, r3, #32
 8001442:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8001444:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <goto_column+0x1c4>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4a46      	ldr	r2, [pc, #280]	@ (8001564 <goto_column+0x1c4>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8001450:	4b45      	ldr	r3, [pc, #276]	@ (8001568 <goto_column+0x1c8>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a44      	ldr	r2, [pc, #272]	@ (8001568 <goto_column+0x1c8>)
 8001456:	f023 0310 	bic.w	r3, r3, #16
 800145a:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 800145c:	4b40      	ldr	r3, [pc, #256]	@ (8001560 <goto_column+0x1c0>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	4a3f      	ldr	r2, [pc, #252]	@ (8001560 <goto_column+0x1c0>)
 8001462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001466:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8001468:	4b3d      	ldr	r3, [pc, #244]	@ (8001560 <goto_column+0x1c0>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4a3c      	ldr	r2, [pc, #240]	@ (8001560 <goto_column+0x1c0>)
 800146e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001472:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8001474:	4b3a      	ldr	r3, [pc, #232]	@ (8001560 <goto_column+0x1c0>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a39      	ldr	r2, [pc, #228]	@ (8001560 <goto_column+0x1c0>)
 800147a:	f023 0320 	bic.w	r3, r3, #32
 800147e:	60d3      	str	r3, [r2, #12]

        Delay(T);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fc4f 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8001486:	4b35      	ldr	r3, [pc, #212]	@ (800155c <goto_column+0x1bc>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	4a34      	ldr	r2, [pc, #208]	@ (800155c <goto_column+0x1bc>)
 800148c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001490:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fc46 	bl	8000d24 <Delay>

        // Set data lines with the value of x
        if (x & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <goto_column+0x10e>
 80014a2:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <goto_column+0x1c4>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001564 <goto_column+0x1c4>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	60d3      	str	r3, [r2, #12]
        if (x & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <goto_column+0x124>
 80014b8:	4b28      	ldr	r3, [pc, #160]	@ (800155c <goto_column+0x1bc>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a27      	ldr	r2, [pc, #156]	@ (800155c <goto_column+0x1bc>)
 80014be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c2:	60d3      	str	r3, [r2, #12]
        if (x & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <goto_column+0x13a>
 80014ce:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <goto_column+0x1c8>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	4a25      	ldr	r2, [pc, #148]	@ (8001568 <goto_column+0x1c8>)
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	60d3      	str	r3, [r2, #12]
        if (x & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <goto_column+0x150>
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <goto_column+0x1c4>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <goto_column+0x1c4>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	60d3      	str	r3, [r2, #12]
        if (x & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <goto_column+0x166>
 80014fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <goto_column+0x1c8>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001568 <goto_column+0x1c8>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	60d3      	str	r3, [r2, #12]
        if (x & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <goto_column+0x17c>
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <goto_column+0x1c0>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <goto_column+0x1c0>)
 8001516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800151a:	60d3      	str	r3, [r2, #12]
        if (x & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <goto_column+0x192>
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <goto_column+0x1c0>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	4a0d      	ldr	r2, [pc, #52]	@ (8001560 <goto_column+0x1c0>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001530:	60d3      	str	r3, [r2, #12]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	da05      	bge.n	8001546 <goto_column+0x1a6>
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <goto_column+0x1c0>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	4a08      	ldr	r2, [pc, #32]	@ (8001560 <goto_column+0x1c0>)
 8001540:	f043 0320 	orr.w	r3, r3, #32
 8001544:	60d3      	str	r3, [r2, #12]

        Delay(T);
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff fbec 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <goto_column+0x1bc>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4a02      	ldr	r2, [pc, #8]	@ (800155c <goto_column+0x1bc>)
 8001552:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001556:	60d3      	str	r3, [r2, #12]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);

        Delay(T);
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
    }
}
 8001558:	e0db      	b.n	8001712 <goto_column+0x372>
 800155a:	bf00      	nop
 800155c:	40011800 	.word	0x40011800
 8001560:	40010800 	.word	0x40010800
 8001564:	40010c00 	.word	0x40010c00
 8001568:	40011000 	.word	0x40011000
        x -= 64;
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	3b40      	subs	r3, #64	@ 0x40
 8001570:	71fb      	strb	r3, [r7, #7]
        x = (x | 0x40) & 0x7F;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800157e:	71fb      	strb	r3, [r7, #7]
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8001580:	4b66      	ldr	r3, [pc, #408]	@ (800171c <goto_column+0x37c>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4a65      	ldr	r2, [pc, #404]	@ (800171c <goto_column+0x37c>)
 8001586:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800158a:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff fbc9 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 8001592:	4b62      	ldr	r3, [pc, #392]	@ (800171c <goto_column+0x37c>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	4a61      	ldr	r2, [pc, #388]	@ (800171c <goto_column+0x37c>)
 8001598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800159c:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff fbc0 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 80015a4:	4b5d      	ldr	r3, [pc, #372]	@ (800171c <goto_column+0x37c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a5c      	ldr	r2, [pc, #368]	@ (800171c <goto_column+0x37c>)
 80015aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015ae:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fbb7 	bl	8000d24 <Delay>
        SECO1_PORT->ODR &= ~(1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=RESET
 80015b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001720 <goto_column+0x380>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	4a59      	ldr	r2, [pc, #356]	@ (8001720 <goto_column+0x380>)
 80015bc:	f023 0310 	bic.w	r3, r3, #16
 80015c0:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fbae 	bl	8000d24 <Delay>
        SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 80015c8:	4b55      	ldr	r3, [pc, #340]	@ (8001720 <goto_column+0x380>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a54      	ldr	r2, [pc, #336]	@ (8001720 <goto_column+0x380>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fba5 	bl	8000d24 <Delay>
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 80015da:	4b52      	ldr	r3, [pc, #328]	@ (8001724 <goto_column+0x384>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	4a51      	ldr	r2, [pc, #324]	@ (8001724 <goto_column+0x384>)
 80015e0:	f023 0302 	bic.w	r3, r3, #2
 80015e4:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 80015e6:	4b4d      	ldr	r3, [pc, #308]	@ (800171c <goto_column+0x37c>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4a4c      	ldr	r2, [pc, #304]	@ (800171c <goto_column+0x37c>)
 80015ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015f0:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 80015f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001728 <goto_column+0x388>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001728 <goto_column+0x388>)
 80015f8:	f023 0320 	bic.w	r3, r3, #32
 80015fc:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 80015fe:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <goto_column+0x384>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4a48      	ldr	r2, [pc, #288]	@ (8001724 <goto_column+0x384>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 800160a:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <goto_column+0x388>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4a46      	ldr	r2, [pc, #280]	@ (8001728 <goto_column+0x388>)
 8001610:	f023 0310 	bic.w	r3, r3, #16
 8001614:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8001616:	4b42      	ldr	r3, [pc, #264]	@ (8001720 <goto_column+0x380>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4a41      	ldr	r2, [pc, #260]	@ (8001720 <goto_column+0x380>)
 800161c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001620:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8001622:	4b3f      	ldr	r3, [pc, #252]	@ (8001720 <goto_column+0x380>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4a3e      	ldr	r2, [pc, #248]	@ (8001720 <goto_column+0x380>)
 8001628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800162c:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 800162e:	4b3c      	ldr	r3, [pc, #240]	@ (8001720 <goto_column+0x380>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	4a3b      	ldr	r2, [pc, #236]	@ (8001720 <goto_column+0x380>)
 8001634:	f023 0320 	bic.w	r3, r3, #32
 8001638:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fb72 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8001640:	4b36      	ldr	r3, [pc, #216]	@ (800171c <goto_column+0x37c>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a35      	ldr	r2, [pc, #212]	@ (800171c <goto_column+0x37c>)
 8001646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800164a:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff fb69 	bl	8000d24 <Delay>
        if (x & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <goto_column+0x2c8>
 800165c:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <goto_column+0x384>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <goto_column+0x384>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	60d3      	str	r3, [r2, #12]
        if (x & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <goto_column+0x2de>
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <goto_column+0x37c>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	4a29      	ldr	r2, [pc, #164]	@ (800171c <goto_column+0x37c>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167c:	60d3      	str	r3, [r2, #12]
        if (x & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <goto_column+0x2f4>
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <goto_column+0x388>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <goto_column+0x388>)
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	60d3      	str	r3, [r2, #12]
        if (x & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <goto_column+0x30a>
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <goto_column+0x384>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	4a20      	ldr	r2, [pc, #128]	@ (8001724 <goto_column+0x384>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	60d3      	str	r3, [r2, #12]
        if (x & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <goto_column+0x320>
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <goto_column+0x388>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <goto_column+0x388>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	60d3      	str	r3, [r2, #12]
        if (x & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <goto_column+0x336>
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <goto_column+0x380>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	4a14      	ldr	r2, [pc, #80]	@ (8001720 <goto_column+0x380>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d4:	60d3      	str	r3, [r2, #12]
        if (x & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <goto_column+0x34c>
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <goto_column+0x380>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001720 <goto_column+0x380>)
 80016e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ea:	60d3      	str	r3, [r2, #12]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da05      	bge.n	8001700 <goto_column+0x360>
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <goto_column+0x380>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <goto_column+0x380>)
 80016fa:	f043 0320 	orr.w	r3, r3, #32
 80016fe:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff fb0f 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8001706:	4b05      	ldr	r3, [pc, #20]	@ (800171c <goto_column+0x37c>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	4a04      	ldr	r2, [pc, #16]	@ (800171c <goto_column+0x37c>)
 800170c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001710:	60d3      	str	r3, [r2, #12]
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40011800 	.word	0x40011800
 8001720:	40010800 	.word	0x40010800
 8001724:	40010c00 	.word	0x40010c00
 8001728:	40011000 	.word	0x40011000

0800172c <glcd_clearline>:

void glcd_clearline(unsigned line) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    Delay(T);
 8001734:	2001      	movs	r0, #1
 8001736:	f7ff faf5 	bl	8000d24 <Delay>
    int i;
    glcd_gotoxy(0, line); // At start of line of left side
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4619      	mov	r1, r3
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fdff 	bl	8001344 <glcd_gotoxy>
    SECO1_PORT->ODR = SECO1_PORT->ODR | 1 << (CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8001746:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <glcd_clearline+0x94>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <glcd_clearline+0x94>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff fae6 	bl	8000d24 <Delay>
    SECO2_PORT->ODR = SECO2_PORT->ODR & ~(1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=RESET
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <glcd_clearline+0x94>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4a18      	ldr	r2, [pc, #96]	@ (80017c0 <glcd_clearline+0x94>)
 800175e:	f023 0308 	bic.w	r3, r3, #8
 8001762:	60d3      	str	r3, [r2, #12]

    for (i = 0; i < 64; i++) {
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e00a      	b.n	8001780 <glcd_clearline+0x54>
        glcd_putchar(0, 0); // Print 0 for Delete Left section
 800176a:	2100      	movs	r1, #0
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff fbed 	bl	8000f4c <glcd_putchar>
        glcd_putchar(0, 64); // Print 0 for Delete Right section
 8001772:	2140      	movs	r1, #64	@ 0x40
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fbe9 	bl	8000f4c <glcd_putchar>
    for (i = 0; i < 64; i++) {
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b3f      	cmp	r3, #63	@ 0x3f
 8001784:	ddf1      	ble.n	800176a <glcd_clearline+0x3e>
    }
    glcd_gotoxy(64, line); // At start of line of right side
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4619      	mov	r1, r3
 800178c:	2040      	movs	r0, #64	@ 0x40
 800178e:	f7ff fdd9 	bl	8001344 <glcd_gotoxy>
    for (i = 0; i < 64; i++) {
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e00a      	b.n	80017ae <glcd_clearline+0x82>
        glcd_putchar(0, 0); // Print 0 for Delete Left section
 8001798:	2100      	movs	r1, #0
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fbd6 	bl	8000f4c <glcd_putchar>
        glcd_putchar(0, 64); // Print 0 for Delete Right section
 80017a0:	2140      	movs	r1, #64	@ 0x40
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fbd2 	bl	8000f4c <glcd_putchar>
    for (i = 0; i < 64; i++) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017b2:	ddf1      	ble.n	8001798 <glcd_clearline+0x6c>
    }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40010800 	.word	0x40010800

080017c4 <glcd_clear_all>:

void glcd_clear_all() {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 8; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	e006      	b.n	80017de <glcd_clear_all+0x1a>
        glcd_clearline(i);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ffaa 	bl	800172c <glcd_clearline>
    for (i = 0; i < 8; i++)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3301      	adds	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b07      	cmp	r3, #7
 80017e2:	ddf5      	ble.n	80017d0 <glcd_clear_all+0xc>
    send_command(0x40); // SET Cursor on Y=0
 80017e4:	2040      	movs	r0, #64	@ 0x40
 80017e6:	f7ff fab5 	bl	8000d54 <send_command>
    send_command(0xB8); // SET Page on X=0, Line=0
 80017ea:	20b8      	movs	r0, #184	@ 0xb8
 80017ec:	f7ff fab2 	bl	8000d54 <send_command>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <GLCD_INIT>:
	}
}
//-------------------------------------
//Function For Initialize GLCD Pins
// Function For Initialize GLCD Pins
void GLCD_INIT(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    // Enable clock for GPIO ports A, B, C, D, and E
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_APB2ENR_IOPDEN | RCC_APB2ENR_IOPEEN;
 80017fc:	4b61      	ldr	r3, [pc, #388]	@ (8001984 <GLCD_INIT+0x18c>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a60      	ldr	r2, [pc, #384]	@ (8001984 <GLCD_INIT+0x18c>)
 8001802:	f043 037c 	orr.w	r3, r3, #124	@ 0x7c
 8001806:	6193      	str	r3, [r2, #24]

    // Set the pin modes to output for DATA_PORT and CTRL_PORT
    // GPIOA: D5, D6, D7 (PA7, PA6, PA5), CS1 (PA4), CS2 (PA3), RESET (PA2)
    DATA5_PORT->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8001808:	4b5f      	ldr	r3, [pc, #380]	@ (8001988 <GLCD_INIT+0x190>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a5e      	ldr	r2, [pc, #376]	@ (8001988 <GLCD_INIT+0x190>)
 800180e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001812:	6013      	str	r3, [r2, #0]
    DATA5_PORT->CRL |= GPIO_CRL_MODE7_0;
 8001814:	4b5c      	ldr	r3, [pc, #368]	@ (8001988 <GLCD_INIT+0x190>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a5b      	ldr	r2, [pc, #364]	@ (8001988 <GLCD_INIT+0x190>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181e:	6013      	str	r3, [r2, #0]
    DATA6_PORT->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8001820:	4b59      	ldr	r3, [pc, #356]	@ (8001988 <GLCD_INIT+0x190>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a58      	ldr	r2, [pc, #352]	@ (8001988 <GLCD_INIT+0x190>)
 8001826:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800182a:	6013      	str	r3, [r2, #0]
    DATA6_PORT->CRL |= GPIO_CRL_MODE6_0;
 800182c:	4b56      	ldr	r3, [pc, #344]	@ (8001988 <GLCD_INIT+0x190>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a55      	ldr	r2, [pc, #340]	@ (8001988 <GLCD_INIT+0x190>)
 8001832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001836:	6013      	str	r3, [r2, #0]
    DATA7_PORT->CRL &= ~(GPIO_CRL_MODE5 | GPIO_CRL_CNF5);
 8001838:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <GLCD_INIT+0x190>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a52      	ldr	r2, [pc, #328]	@ (8001988 <GLCD_INIT+0x190>)
 800183e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001842:	6013      	str	r3, [r2, #0]
    DATA7_PORT->CRL |= GPIO_CRL_MODE5_0;
 8001844:	4b50      	ldr	r3, [pc, #320]	@ (8001988 <GLCD_INIT+0x190>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a4f      	ldr	r2, [pc, #316]	@ (8001988 <GLCD_INIT+0x190>)
 800184a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800184e:	6013      	str	r3, [r2, #0]

    SECO1_PORT->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4 | GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8001850:	4b4d      	ldr	r3, [pc, #308]	@ (8001988 <GLCD_INIT+0x190>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a4c      	ldr	r2, [pc, #304]	@ (8001988 <GLCD_INIT+0x190>)
 8001856:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 800185a:	6013      	str	r3, [r2, #0]
    SECO1_PORT->CRL |= (GPIO_CRL_MODE4_0 | GPIO_CRL_MODE3_0);
 800185c:	4b4a      	ldr	r3, [pc, #296]	@ (8001988 <GLCD_INIT+0x190>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a49      	ldr	r2, [pc, #292]	@ (8001988 <GLCD_INIT+0x190>)
 8001862:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 8001866:	6013      	str	r3, [r2, #0]

    RESET_PORT->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8001868:	4b47      	ldr	r3, [pc, #284]	@ (8001988 <GLCD_INIT+0x190>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a46      	ldr	r2, [pc, #280]	@ (8001988 <GLCD_INIT+0x190>)
 800186e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001872:	6013      	str	r3, [r2, #0]
    RESET_PORT->CRL |= GPIO_CRL_MODE2_0;
 8001874:	4b44      	ldr	r3, [pc, #272]	@ (8001988 <GLCD_INIT+0x190>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a43      	ldr	r2, [pc, #268]	@ (8001988 <GLCD_INIT+0x190>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187e:	6013      	str	r3, [r2, #0]

    // GPIOB: D0, D3 (PB1, PB0)
    DATA0_PORT->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1 | GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8001880:	4b42      	ldr	r3, [pc, #264]	@ (800198c <GLCD_INIT+0x194>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a41      	ldr	r2, [pc, #260]	@ (800198c <GLCD_INIT+0x194>)
 8001886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800188a:	6013      	str	r3, [r2, #0]
    DATA0_PORT->CRL |= (GPIO_CRL_MODE1_0 | GPIO_CRL_MODE0_0);
 800188c:	4b3f      	ldr	r3, [pc, #252]	@ (800198c <GLCD_INIT+0x194>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a3e      	ldr	r2, [pc, #248]	@ (800198c <GLCD_INIT+0x194>)
 8001892:	f043 0311 	orr.w	r3, r3, #17
 8001896:	6013      	str	r3, [r2, #0]

    // GPIOE: D1, DI, RW, E (PE7, PE10, PE8, PE9)
    DATA1_PORT->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8001898:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <GLCD_INIT+0x198>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3c      	ldr	r2, [pc, #240]	@ (8001990 <GLCD_INIT+0x198>)
 800189e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80018a2:	6013      	str	r3, [r2, #0]
    DATA1_PORT->CRL |= GPIO_CRL_MODE7_0;
 80018a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <GLCD_INIT+0x198>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a39      	ldr	r2, [pc, #228]	@ (8001990 <GLCD_INIT+0x198>)
 80018aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	6013      	str	r3, [r2, #0]
    CTRL_PORT->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10 | GPIO_CRH_MODE8 | GPIO_CRH_CNF8 | GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 80018b0:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <GLCD_INIT+0x198>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a36      	ldr	r2, [pc, #216]	@ (8001990 <GLCD_INIT+0x198>)
 80018b6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80018ba:	f023 030f 	bic.w	r3, r3, #15
 80018be:	6053      	str	r3, [r2, #4]
    CTRL_PORT->CRH |= (GPIO_CRH_MODE10_0 | GPIO_CRH_MODE8_0 | GPIO_CRH_MODE9_0);
 80018c0:	4b33      	ldr	r3, [pc, #204]	@ (8001990 <GLCD_INIT+0x198>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a32      	ldr	r2, [pc, #200]	@ (8001990 <GLCD_INIT+0x198>)
 80018c6:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6053      	str	r3, [r2, #4]

    // GPIOC: D2, D4 (PC5, PC4)
    DATA2_PORT->CRL &= ~(GPIO_CRL_MODE5 | GPIO_CRL_CNF5);
 80018d0:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <GLCD_INIT+0x19c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001994 <GLCD_INIT+0x19c>)
 80018d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80018da:	6013      	str	r3, [r2, #0]
    DATA2_PORT->CRL |= GPIO_CRL_MODE5_0;
 80018dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <GLCD_INIT+0x19c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001994 <GLCD_INIT+0x19c>)
 80018e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018e6:	6013      	str	r3, [r2, #0]
    DATA4_PORT->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4);
 80018e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <GLCD_INIT+0x19c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a29      	ldr	r2, [pc, #164]	@ (8001994 <GLCD_INIT+0x19c>)
 80018ee:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80018f2:	6013      	str	r3, [r2, #0]
    DATA4_PORT->CRL |= GPIO_CRL_MODE4_0;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <GLCD_INIT+0x19c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a26      	ldr	r2, [pc, #152]	@ (8001994 <GLCD_INIT+0x19c>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fe:	6013      	str	r3, [r2, #0]

    // Reset data and control ports
    DATA0_PORT->BSRR = (1 << (D0_PIN_NUMBER + 16));
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <GLCD_INIT+0x194>)
 8001902:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001906:	611a      	str	r2, [r3, #16]
    DATA1_PORT->BSRR = (1 << (D1_PIN_NUMBER + 16));
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <GLCD_INIT+0x198>)
 800190a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800190e:	611a      	str	r2, [r3, #16]
    DATA2_PORT->BSRR = (1 << (D2_PIN_NUMBER + 16));
 8001910:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <GLCD_INIT+0x19c>)
 8001912:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001916:	611a      	str	r2, [r3, #16]
    DATA3_PORT->BSRR = (1 << (D3_PIN_NUMBER + 16));
 8001918:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <GLCD_INIT+0x194>)
 800191a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800191e:	611a      	str	r2, [r3, #16]
    DATA4_PORT->BSRR = (1 << (D4_PIN_NUMBER + 16));
 8001920:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <GLCD_INIT+0x19c>)
 8001922:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001926:	611a      	str	r2, [r3, #16]
    DATA5_PORT->BSRR = (1 << (D5_PIN_NUMBER + 16));
 8001928:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <GLCD_INIT+0x190>)
 800192a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800192e:	611a      	str	r2, [r3, #16]
    DATA6_PORT->BSRR = (1 << (D6_PIN_NUMBER + 16));
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <GLCD_INIT+0x190>)
 8001932:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001936:	611a      	str	r2, [r3, #16]
    DATA7_PORT->BSRR = (1 << (D7_PIN_NUMBER + 16));
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <GLCD_INIT+0x190>)
 800193a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800193e:	611a      	str	r2, [r3, #16]
    SECO1_PORT->BSRR = (1 << (CS1_PIN_NUMBER + 16));
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <GLCD_INIT+0x190>)
 8001942:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001946:	611a      	str	r2, [r3, #16]
    SECO2_PORT->BSRR = (1 << (CS2_PIN_NUMBER + 16));
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <GLCD_INIT+0x190>)
 800194a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800194e:	611a      	str	r2, [r3, #16]
    RESET_PORT->BSRR = (1 << (RESET_PIN_NUMBER + 16));
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <GLCD_INIT+0x190>)
 8001952:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001956:	611a      	str	r2, [r3, #16]

    // Reset the GLCD
    RESET_PORT->BSRR = (1 << RESET_PIN_NUMBER); // Set reset pin high
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <GLCD_INIT+0x190>)
 800195a:	2204      	movs	r2, #4
 800195c:	611a      	str	r2, [r3, #16]
    Delay(10); // Wait for a short period
 800195e:	200a      	movs	r0, #10
 8001960:	f7ff f9e0 	bl	8000d24 <Delay>
    RESET_PORT->BSRR = (1 << (RESET_PIN_NUMBER + 16)); // Set reset pin low
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <GLCD_INIT+0x190>)
 8001966:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800196a:	611a      	str	r2, [r3, #16]
    Delay(10); // Wait for a short period
 800196c:	200a      	movs	r0, #10
 800196e:	f7ff f9d9 	bl	8000d24 <Delay>
    RESET_PORT->BSRR = (1 << RESET_PIN_NUMBER); // Set reset pin high
 8001972:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <GLCD_INIT+0x190>)
 8001974:	2204      	movs	r2, #4
 8001976:	611a      	str	r2, [r3, #16]
    Delay(10); // Wait for a short period
 8001978:	200a      	movs	r0, #10
 800197a:	f7ff f9d3 	bl	8000d24 <Delay>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40011800 	.word	0x40011800
 8001994:	40011000 	.word	0x40011000

08001998 <toDisplay>:
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */
// TODO begin

void toDisplay() {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af02      	add	r7, sp, #8
	for (int i = 0; i < 16; ++i) {
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	e008      	b.n	80019b6 <toDisplay+0x1e>
		eepDisplay[i] = -1;
 80019a4:	4a19      	ldr	r2, [pc, #100]	@ (8001a0c <toDisplay+0x74>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 16; ++i) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	ddf3      	ble.n	80019a4 <toDisplay+0xc>
	}
	count = 0;
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <toDisplay+0x78>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	e019      	b.n	80019fc <toDisplay+0x64>
		SPIF_ReadSector(&spif, i, read, 1, 0);
 80019c8:	6839      	ldr	r1, [r7, #0]
 80019ca:	2300      	movs	r3, #0
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	4a10      	ldr	r2, [pc, #64]	@ (8001a14 <toDisplay+0x7c>)
 80019d2:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <toDisplay+0x80>)
 80019d4:	f004 fae2 	bl	8005f9c <SPIF_ReadSector>
		if (read[0] != 255) {
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <toDisplay+0x7c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2bff      	cmp	r3, #255	@ 0xff
 80019de:	d00a      	beq.n	80019f6 <toDisplay+0x5e>
			eepDisplay[count] = i;
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <toDisplay+0x78>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4909      	ldr	r1, [pc, #36]	@ (8001a0c <toDisplay+0x74>)
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			count++;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <toDisplay+0x78>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4a07      	ldr	r2, [pc, #28]	@ (8001a10 <toDisplay+0x78>)
 80019f4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 16; i++) {
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	dde2      	ble.n	80019c8 <toDisplay+0x30>
		}
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200006ac 	.word	0x200006ac
 8001a10:	200006f0 	.word	0x200006f0
 8001a14:	2000070c 	.word	0x2000070c
 8001a18:	20000678 	.word	0x20000678

08001a1c <toAdd>:
  //          count++;
  //        }
  //      }
  //    }

void toAdd(const char* dN, int dM, int dK) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 16; i ++) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e044      	b.n	8001ab8 <toAdd+0x9c>
	SPIF_ReadSector(&spif, i, read, 1, 0);
 8001a2e:	6979      	ldr	r1, [r7, #20]
 8001a30:	2300      	movs	r3, #0
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2301      	movs	r3, #1
 8001a36:	4a24      	ldr	r2, [pc, #144]	@ (8001ac8 <toAdd+0xac>)
 8001a38:	4824      	ldr	r0, [pc, #144]	@ (8001acc <toAdd+0xb0>)
 8001a3a:	f004 faaf 	bl	8005f9c <SPIF_ReadSector>
    if (read[0] == 255) {
 8001a3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <toAdd+0xac>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2bff      	cmp	r3, #255	@ 0xff
 8001a44:	d135      	bne.n	8001ab2 <toAdd+0x96>
      for (int j = 0; j < 7; j++) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	e010      	b.n	8001a6e <toAdd+0x52>
    	write[0] = dN[j];
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <toAdd+0xb4>)
 8001a56:	701a      	strb	r2, [r3, #0]
    	SPIF_WriteSector(&spif, i, write, 1, j);
 8001a58:	6979      	ldr	r1, [r7, #20]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad0 <toAdd+0xb4>)
 8001a62:	481a      	ldr	r0, [pc, #104]	@ (8001acc <toAdd+0xb0>)
 8001a64:	f004 fa30 	bl	8005ec8 <SPIF_WriteSector>
      for (int j = 0; j < 7; j++) {
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b06      	cmp	r3, #6
 8001a72:	ddeb      	ble.n	8001a4c <toAdd+0x30>
      }
	  write[0] = dM;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <toAdd+0xb4>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, i, write, 1, 7);
 8001a7c:	6979      	ldr	r1, [r7, #20]
 8001a7e:	2307      	movs	r3, #7
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <toAdd+0xb4>)
 8001a86:	4811      	ldr	r0, [pc, #68]	@ (8001acc <toAdd+0xb0>)
 8001a88:	f004 fa1e 	bl	8005ec8 <SPIF_WriteSector>
	  write[0] = dK/25;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <toAdd+0xb8>)
 8001a90:	fb82 1203 	smull	r1, r2, r2, r3
 8001a94:	10d2      	asrs	r2, r2, #3
 8001a96:	17db      	asrs	r3, r3, #31
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <toAdd+0xb4>)
 8001a9e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, i, write, 1, 8);
 8001aa0:	6979      	ldr	r1, [r7, #20]
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <toAdd+0xb4>)
 8001aaa:	4808      	ldr	r0, [pc, #32]	@ (8001acc <toAdd+0xb0>)
 8001aac:	f004 fa0c 	bl	8005ec8 <SPIF_WriteSector>
      break;
 8001ab0:	e006      	b.n	8001ac0 <toAdd+0xa4>
  for (int i = 0; i < 16; i ++) {
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	ddb7      	ble.n	8001a2e <toAdd+0x12>
    }
  }
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000070c 	.word	0x2000070c
 8001acc:	20000678 	.word	0x20000678
 8001ad0:	20000710 	.word	0x20000710
 8001ad4:	51eb851f 	.word	0x51eb851f

08001ad8 <toDelete>:
//        break;
//      }
//    }
//  }

void toDelete(int index) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	SPIF_EraseSector(&spif, index);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <toDelete+0x1c>)
 8001ae6:	f004 f96c 	bl	8005dc2 <SPIF_EraseSector>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000678 	.word	0x20000678

08001af8 <storestate>:
//    for (int i = 0; i <  9; i++) {
//      EEPROM.update(index+i, 0xFF);
//    }
//  }

  void storestate() { // called when turned off
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af02      	add	r7, sp, #8
	  SPIF_EraseSector(&spif, 20);
 8001afe:	2114      	movs	r1, #20
 8001b00:	482b      	ldr	r0, [pc, #172]	@ (8001bb0 <storestate+0xb8>)
 8001b02:	f004 f95e 	bl	8005dc2 <SPIF_EraseSector>
	  write[0] = MHz;
 8001b06:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <storestate+0xbc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb8 <storestate+0xc0>)
 8001b0e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 0);
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2301      	movs	r3, #1
 8001b16:	4a28      	ldr	r2, [pc, #160]	@ (8001bb8 <storestate+0xc0>)
 8001b18:	2114      	movs	r1, #20
 8001b1a:	4825      	ldr	r0, [pc, #148]	@ (8001bb0 <storestate+0xb8>)
 8001b1c:	f004 f9d4 	bl	8005ec8 <SPIF_WriteSector>
	  write[0] = KHz/25;
 8001b20:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <storestate+0xc4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a26      	ldr	r2, [pc, #152]	@ (8001bc0 <storestate+0xc8>)
 8001b26:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2a:	10d2      	asrs	r2, r2, #3
 8001b2c:	17db      	asrs	r3, r3, #31
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b21      	ldr	r3, [pc, #132]	@ (8001bb8 <storestate+0xc0>)
 8001b34:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 1);
 8001b36:	2301      	movs	r3, #1
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <storestate+0xc0>)
 8001b3e:	2114      	movs	r1, #20
 8001b40:	481b      	ldr	r0, [pc, #108]	@ (8001bb0 <storestate+0xb8>)
 8001b42:	f004 f9c1 	bl	8005ec8 <SPIF_WriteSector>
	  write[0] = SM;
 8001b46:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <storestate+0xcc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <storestate+0xc0>)
 8001b4e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 2);
 8001b50:	2302      	movs	r3, #2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2301      	movs	r3, #1
 8001b56:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <storestate+0xc0>)
 8001b58:	2114      	movs	r1, #20
 8001b5a:	4815      	ldr	r0, [pc, #84]	@ (8001bb0 <storestate+0xb8>)
 8001b5c:	f004 f9b4 	bl	8005ec8 <SPIF_WriteSector>
	  write[0] = SK/25;
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <storestate+0xd0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <storestate+0xc8>)
 8001b66:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6a:	10d2      	asrs	r2, r2, #3
 8001b6c:	17db      	asrs	r3, r3, #31
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <storestate+0xc0>)
 8001b74:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 3);
 8001b76:	2303      	movs	r3, #3
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <storestate+0xc0>)
 8001b7e:	2114      	movs	r1, #20
 8001b80:	480b      	ldr	r0, [pc, #44]	@ (8001bb0 <storestate+0xb8>)
 8001b82:	f004 f9a1 	bl	8005ec8 <SPIF_WriteSector>
	  write[0] = vol;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <storestate+0xd4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <storestate+0xc0>)
 8001b8e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 4);
 8001b90:	2304      	movs	r3, #4
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	4a08      	ldr	r2, [pc, #32]	@ (8001bb8 <storestate+0xc0>)
 8001b98:	2114      	movs	r1, #20
 8001b9a:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <storestate+0xb8>)
 8001b9c:	f004 f994 	bl	8005ec8 <SPIF_WriteSector>
	  write[0] = obs;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <storestate+0xd8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <storestate+0xc0>)
 8001ba8:	701a      	strb	r2, [r3, #0]
  }
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000678 	.word	0x20000678
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000710 	.word	0x20000710
 8001bbc:	2000069c 	.word	0x2000069c
 8001bc0:	51eb851f 	.word	0x51eb851f
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	200006a0 	.word	0x200006a0
 8001bcc:	200006a4 	.word	0x200006a4
 8001bd0:	200006fc 	.word	0x200006fc
 8001bd4:	00000000 	.word	0x00000000

08001bd8 <loadstate>:

  void loadstate() { // called on startup
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af02      	add	r7, sp, #8
	  SPIF_ReadSector(&spif, 20, read, 1, 0);
 8001bde:	2300      	movs	r3, #0
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2301      	movs	r3, #1
 8001be4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d20 <loadstate+0x148>)
 8001be6:	2114      	movs	r1, #20
 8001be8:	484e      	ldr	r0, [pc, #312]	@ (8001d24 <loadstate+0x14c>)
 8001bea:	f004 f9d7 	bl	8005f9c <SPIF_ReadSector>
	  MHz = read[0];
 8001bee:	4b4c      	ldr	r3, [pc, #304]	@ (8001d20 <loadstate+0x148>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8001d28 <loadstate+0x150>)
 8001bf6:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 1);
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	4a48      	ldr	r2, [pc, #288]	@ (8001d20 <loadstate+0x148>)
 8001c00:	2114      	movs	r1, #20
 8001c02:	4848      	ldr	r0, [pc, #288]	@ (8001d24 <loadstate+0x14c>)
 8001c04:	f004 f9ca 	bl	8005f9c <SPIF_ReadSector>
	  KHz = read[0] * 25;
 8001c08:	4b45      	ldr	r3, [pc, #276]	@ (8001d20 <loadstate+0x148>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	4a44      	ldr	r2, [pc, #272]	@ (8001d2c <loadstate+0x154>)
 8001c1a:	6013      	str	r3, [r2, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 2);
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2301      	movs	r3, #1
 8001c22:	4a3f      	ldr	r2, [pc, #252]	@ (8001d20 <loadstate+0x148>)
 8001c24:	2114      	movs	r1, #20
 8001c26:	483f      	ldr	r0, [pc, #252]	@ (8001d24 <loadstate+0x14c>)
 8001c28:	f004 f9b8 	bl	8005f9c <SPIF_ReadSector>
	  SM = read[0];
 8001c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d20 <loadstate+0x148>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b3f      	ldr	r3, [pc, #252]	@ (8001d30 <loadstate+0x158>)
 8001c34:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 3);
 8001c36:	2303      	movs	r3, #3
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4a38      	ldr	r2, [pc, #224]	@ (8001d20 <loadstate+0x148>)
 8001c3e:	2114      	movs	r1, #20
 8001c40:	4838      	ldr	r0, [pc, #224]	@ (8001d24 <loadstate+0x14c>)
 8001c42:	f004 f9ab 	bl	8005f9c <SPIF_ReadSector>
	  SK = read[0] * 25;
 8001c46:	4b36      	ldr	r3, [pc, #216]	@ (8001d20 <loadstate+0x148>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	009a      	lsls	r2, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	4a37      	ldr	r2, [pc, #220]	@ (8001d34 <loadstate+0x15c>)
 8001c58:	6013      	str	r3, [r2, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 4);
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4a2f      	ldr	r2, [pc, #188]	@ (8001d20 <loadstate+0x148>)
 8001c62:	2114      	movs	r1, #20
 8001c64:	482f      	ldr	r0, [pc, #188]	@ (8001d24 <loadstate+0x14c>)
 8001c66:	f004 f999 	bl	8005f9c <SPIF_ReadSector>
	  vol = read[0];
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <loadstate+0x148>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b31      	ldr	r3, [pc, #196]	@ (8001d38 <loadstate+0x160>)
 8001c72:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 5);
 8001c74:	2305      	movs	r3, #5
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	4a29      	ldr	r2, [pc, #164]	@ (8001d20 <loadstate+0x148>)
 8001c7c:	2114      	movs	r1, #20
 8001c7e:	4829      	ldr	r0, [pc, #164]	@ (8001d24 <loadstate+0x14c>)
 8001c80:	f004 f98c 	bl	8005f9c <SPIF_ReadSector>
	  obs = read[0];
 8001c84:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <loadstate+0x148>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <loadstate+0x164>)
 8001c8c:	601a      	str	r2, [r3, #0]
      freq = MHz + (.001 * KHz);
 8001c8e:	4b26      	ldr	r3, [pc, #152]	@ (8001d28 <loadstate+0x150>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc26 	bl	80004e4 <__aeabi_i2d>
 8001c98:	4604      	mov	r4, r0
 8001c9a:	460d      	mov	r5, r1
 8001c9c:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <loadstate+0x154>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc1f 	bl	80004e4 <__aeabi_i2d>
 8001ca6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001d18 <loadstate+0x140>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	f7fe fc84 	bl	80005b8 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fac8 	bl	800024c <__adddf3>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe ff50 	bl	8000b68 <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a1d      	ldr	r2, [pc, #116]	@ (8001d40 <loadstate+0x168>)
 8001ccc:	6013      	str	r3, [r2, #0]
      Standby = SM + (.001 * SK);
 8001cce:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <loadstate+0x158>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc06 	bl	80004e4 <__aeabi_i2d>
 8001cd8:	4604      	mov	r4, r0
 8001cda:	460d      	mov	r5, r1
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <loadstate+0x15c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fbff 	bl	80004e4 <__aeabi_i2d>
 8001ce6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001d18 <loadstate+0x140>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fc64 	bl	80005b8 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe faa8 	bl	800024c <__adddf3>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe ff30 	bl	8000b68 <__aeabi_d2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d44 <loadstate+0x16c>)
 8001d0c:	6013      	str	r3, [r2, #0]
  }
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bdb0      	pop	{r4, r5, r7, pc}
 8001d14:	f3af 8000 	nop.w
 8001d18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d1c:	3f50624d 	.word	0x3f50624d
 8001d20:	2000070c 	.word	0x2000070c
 8001d24:	20000678 	.word	0x20000678
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	2000069c 	.word	0x2000069c
 8001d30:	20000008 	.word	0x20000008
 8001d34:	200006a0 	.word	0x200006a0
 8001d38:	200006a4 	.word	0x200006a4
 8001d3c:	200006fc 	.word	0x200006fc
 8001d40:	20000698 	.word	0x20000698
 8001d44:	20000004 	.word	0x20000004

08001d48 <millis>:
  uint32_t millis() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	  return xTaskGetTickCount();
 8001d4c:	f007 ffe2 	bl	8009d14 <xTaskGetTickCount>
 8001d50:	4603      	mov	r3, r0
  };
 8001d52:	4618      	mov	r0, r3
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
osThreadId Task2handler;
void task2_init(void const * argument);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
//        // Process data from UART4
//        rxmsg[rxcount] = rxbuff[0];
//        rxcount++;
//        response = HAL_UART_Receive_IT(&huart4, rxbuff, 1); // Restart UART4 reception
//    } else
    	if (huart->Instance == UART5) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <HAL_UART_RxCpltCallback+0x44>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d113      	bne.n	8001d92 <HAL_UART_RxCpltCallback+0x3a>
        // Process data from UART5
        rxmsgcdu[rxcountcdu] = rxbuffcdu[0];
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <HAL_UART_RxCpltCallback+0x48>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <HAL_UART_RxCpltCallback+0x4c>)
 8001d70:	7811      	ldrb	r1, [r2, #0]
 8001d72:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <HAL_UART_RxCpltCallback+0x50>)
 8001d74:	54d1      	strb	r1, [r2, r3]
        rxcountcdu++;
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_UART_RxCpltCallback+0x48>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	4a08      	ldr	r2, [pc, #32]	@ (8001da0 <HAL_UART_RxCpltCallback+0x48>)
 8001d7e:	6013      	str	r3, [r2, #0]
        responseCDU = HAL_UART_Receive_IT(&huart5, rxbuffcdu, 1); // Restart UART5 reception
 8001d80:	2201      	movs	r2, #1
 8001d82:	4908      	ldr	r1, [pc, #32]	@ (8001da4 <HAL_UART_RxCpltCallback+0x4c>)
 8001d84:	4809      	ldr	r0, [pc, #36]	@ (8001dac <HAL_UART_RxCpltCallback+0x54>)
 8001d86:	f006 fe82 	bl	8008a8e <HAL_UART_Receive_IT>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <HAL_UART_RxCpltCallback+0x58>)
 8001d90:	701a      	strb	r2, [r3, #0]
    }
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40005000 	.word	0x40005000
 8001da0:	20000770 	.word	0x20000770
 8001da4:	20000750 	.word	0x20000750
 8001da8:	20000754 	.word	0x20000754
 8001dac:	20000554 	.word	0x20000554
 8001db0:	2000074c 	.word	0x2000074c

08001db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db4:	b5b0      	push	{r4, r5, r7, lr}
 8001db6:	b08e      	sub	sp, #56	@ 0x38
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dba:	f004 fce5 	bl	8006788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbe:	f000 f861 	bl	8001e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc2:	f000 f9a7 	bl	8002114 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001dc6:	f000 f927 	bl	8002018 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001dca:	f000 f89b 	bl	8001f04 <MX_SPI1_Init>
  MX_UART4_Init();
 8001dce:	f000 f8cf 	bl	8001f70 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001dd2:	f000 f94b 	bl	800206c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001dd6:	f000 f973 	bl	80020c0 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001dda:	f000 f8f3 	bl	8001fc4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  SPIF_Init(&spif, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8001dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001de2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e5c <main+0xa8>)
 8001de4:	491e      	ldr	r1, [pc, #120]	@ (8001e60 <main+0xac>)
 8001de6:	481f      	ldr	r0, [pc, #124]	@ (8001e64 <main+0xb0>)
 8001de8:	f003 ff9f 	bl	8005d2a <SPIF_Init>
  toDisplay();
 8001dec:	f7ff fdd4 	bl	8001998 <toDisplay>
  GLCD_INIT();
 8001df0:	f7ff fd02 	bl	80017f8 <GLCD_INIT>
  loadstate();
 8001df4:	f7ff fef0 	bl	8001bd8 <loadstate>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  responseCDU = HAL_UART_Receive_IT(&huart5, rxbuffcdu, 1); // Start UART5 in interrupt mode
 8001df8:	2201      	movs	r2, #1
 8001dfa:	491b      	ldr	r1, [pc, #108]	@ (8001e68 <main+0xb4>)
 8001dfc:	481b      	ldr	r0, [pc, #108]	@ (8001e6c <main+0xb8>)
 8001dfe:	f006 fe46 	bl	8008a8e <HAL_UART_Receive_IT>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <main+0xbc>)
 8001e08:	701a      	strb	r2, [r3, #0]
//  response = HAL_UART_Receive_IT(&huart4, rxbuff, 1); // Start UART4 in interrupt mode


  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <main+0xc0>)
 8001e0c:	f107 041c 	add.w	r4, r7, #28
 8001e10:	461d      	mov	r5, r3
 8001e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f007 fbf5 	bl	8009614 <osThreadCreate>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <main+0xc4>)
 8001e2e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
//  osThreadDef(Task2, task2_init, osPriorityNormal, 0, 128);
//  Task2handler = osThreadCreate(osThread(Task2), NULL);
  /* USER CODE END RTOS_THREADS */
  osThreadDef(Task3, task3_init, osPriorityNormal, 0, 128);	//128 is stack size (in bytes) requirements for the thread function.
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <main+0xc8>)
 8001e32:	463c      	mov	r4, r7
 8001e34:	461d      	mov	r5, r3
 8001e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3handler = osThreadCreate(osThread(Task3), NULL);
 8001e42:	463b      	mov	r3, r7
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f007 fbe4 	bl	8009614 <osThreadCreate>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e80 <main+0xcc>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8001e52:	f007 fbd8 	bl	8009606 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e56:	bf00      	nop
 8001e58:	e7fd      	b.n	8001e56 <main+0xa2>
 8001e5a:	bf00      	nop
 8001e5c:	40010c00 	.word	0x40010c00
 8001e60:	200004b4 	.word	0x200004b4
 8001e64:	20000678 	.word	0x20000678
 8001e68:	20000750 	.word	0x20000750
 8001e6c:	20000554 	.word	0x20000554
 8001e70:	2000074c 	.word	0x2000074c
 8001e74:	0800d62c 	.word	0x0800d62c
 8001e78:	20000674 	.word	0x20000674
 8001e7c:	0800d650 	.word	0x0800d650
 8001e80:	20000714 	.word	0x20000714

08001e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b090      	sub	sp, #64	@ 0x40
 8001e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8a:	f107 0318 	add.w	r3, r7, #24
 8001e8e:	2228      	movs	r2, #40	@ 0x28
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f009 fa8f 	bl	800b3b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eae:	2310      	movs	r3, #16
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001eba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 0318 	add.w	r3, r7, #24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 f8d7 	bl	8007078 <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001ed0:	f003 fa1a 	bl	8005308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2101      	movs	r1, #1
 8001eec:	4618      	mov	r0, r3
 8001eee:	f005 fb45 	bl	800757c <HAL_RCC_ClockConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001ef8:	f003 fa06 	bl	8005308 <Error_Handler>
  }
}
 8001efc:	bf00      	nop
 8001efe:	3740      	adds	r7, #64	@ 0x40
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f08:	4b17      	ldr	r3, [pc, #92]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f0a:	4a18      	ldr	r2, [pc, #96]	@ (8001f6c <MX_SPI1_Init+0x68>)
 8001f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f16:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f38:	2218      	movs	r2, #24
 8001f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f48:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f50:	220a      	movs	r2, #10
 8001f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f54:	4804      	ldr	r0, [pc, #16]	@ (8001f68 <MX_SPI1_Init+0x64>)
 8001f56:	f005 fccf 	bl	80078f8 <HAL_SPI_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f60:	f003 f9d2 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200004b4 	.word	0x200004b4
 8001f6c:	40013000 	.word	0x40013000

08001f70 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <MX_UART4_Init+0x4c>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <MX_UART4_Init+0x50>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <MX_UART4_Init+0x4c>)
 8001f7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <MX_UART4_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <MX_UART4_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <MX_UART4_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <MX_UART4_Init+0x4c>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <MX_UART4_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <MX_UART4_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	@ (8001fbc <MX_UART4_Init+0x4c>)
 8001fa8:	f006 fc9e 	bl	80088e8 <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001fb2:	f003 f9a9 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000050c 	.word	0x2000050c
 8001fc0:	40004c00 	.word	0x40004c00

08001fc4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <MX_UART5_Init+0x4c>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <MX_UART5_Init+0x50>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <MX_UART5_Init+0x4c>)
 8001fd0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001fd4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <MX_UART5_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <MX_UART5_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <MX_UART5_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <MX_UART5_Init+0x4c>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <MX_UART5_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <MX_UART5_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	@ (8002010 <MX_UART5_Init+0x4c>)
 8001ffc:	f006 fc74 	bl	80088e8 <HAL_UART_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002006:	f003 f97f 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000554 	.word	0x20000554
 8002014:	40005000 	.word	0x40005000

08002018 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <MX_USART1_UART_Init+0x50>)
 8002020:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 8002024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002028:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 8002050:	f006 fc4a 	bl	80088e8 <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800205a:	f003 f955 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000059c 	.word	0x2000059c
 8002068:	40013800 	.word	0x40013800

0800206c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002072:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <MX_USART2_UART_Init+0x50>)
 8002074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002078:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800207c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 80020a4:	f006 fc20 	bl	80088e8 <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ae:	f003 f92b 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200005e4 	.word	0x200005e4
 80020bc:	40004400 	.word	0x40004400

080020c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <MX_USART3_UART_Init+0x50>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020e6:	220c      	movs	r2, #12
 80020e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020f8:	f006 fbf6 	bl	80088e8 <HAL_UART_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002102:	f003 f901 	bl	8005308 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000062c 	.word	0x2000062c
 8002110:	40004800 	.word	0x40004800

08002114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	@ 0x28
 8002118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211a:	f107 0318 	add.w	r3, r7, #24
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002128:	4bb4      	ldr	r3, [pc, #720]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	4ab3      	ldr	r2, [pc, #716]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 800212e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002132:	6193      	str	r3, [r2, #24]
 8002134:	4bb1      	ldr	r3, [pc, #708]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002140:	4bae      	ldr	r3, [pc, #696]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4aad      	ldr	r2, [pc, #692]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 8002146:	f043 0310 	orr.w	r3, r3, #16
 800214a:	6193      	str	r3, [r2, #24]
 800214c:	4bab      	ldr	r3, [pc, #684]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	4ba8      	ldr	r3, [pc, #672]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	4aa7      	ldr	r2, [pc, #668]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6193      	str	r3, [r2, #24]
 8002164:	4ba5      	ldr	r3, [pc, #660]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002170:	4ba2      	ldr	r3, [pc, #648]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4aa1      	ldr	r2, [pc, #644]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 8002176:	f043 0308 	orr.w	r3, r3, #8
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b9f      	ldr	r3, [pc, #636]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002188:	4b9c      	ldr	r3, [pc, #624]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a9b      	ldr	r2, [pc, #620]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 800218e:	f043 0320 	orr.w	r3, r3, #32
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b99      	ldr	r3, [pc, #612]	@ (80023fc <MX_GPIO_Init+0x2e8>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RELAY3_Pin|MCU_DTR3_Pin|LCD_DB1_Pin|LCD_RW_Pin
 80021a0:	2200      	movs	r2, #0
 80021a2:	f240 7194 	movw	r1, #1940	@ 0x794
 80021a6:	4896      	ldr	r0, [pc, #600]	@ (8002400 <MX_GPIO_Init+0x2ec>)
 80021a8:	f004 ff11 	bl	8006fce <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_DI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BKL_Pin|LCD_RESET_Pin|LCD_CS2_Pin|LCD_CS1_Pin
 80021ac:	2200      	movs	r2, #0
 80021ae:	f649 11fe 	movw	r1, #39422	@ 0x99fe
 80021b2:	4894      	ldr	r0, [pc, #592]	@ (8002404 <MX_GPIO_Init+0x2f0>)
 80021b4:	f004 ff0b 	bl	8006fce <HAL_GPIO_WritePin>
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|KEY_COL4_Pin
                          |KEY_COL7_Pin|KEY_COL6_Pin|KEY_COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB4_Pin|LCD_DB2_Pin|KEY_COL0_Pin|KEY_COL3_Pin
 80021b8:	2200      	movs	r2, #0
 80021ba:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 80021be:	4892      	ldr	r0, [pc, #584]	@ (8002408 <MX_GPIO_Init+0x2f4>)
 80021c0:	f004 ff05 	bl	8006fce <HAL_GPIO_WritePin>
                          |KEY_COL2_Pin|KEY_COL5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DB3_Pin|LCD_DB0_Pin|MCU_DTR2_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 80021c4:	2200      	movs	r2, #0
 80021c6:	f240 2183 	movw	r1, #643	@ 0x283
 80021ca:	4890      	ldr	r0, [pc, #576]	@ (800240c <MX_GPIO_Init+0x2f8>)
 80021cc:	f004 feff 	bl	8006fce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEY_COL1_Pin|KEY_COL9_Pin|RELAY1_Pin|MCU_DTR1_Pin
 80021d0:	2200      	movs	r2, #0
 80021d2:	f248 0199 	movw	r1, #32921	@ 0x8099
 80021d6:	488e      	ldr	r0, [pc, #568]	@ (8002410 <MX_GPIO_Init+0x2fc>)
 80021d8:	f004 fef9 	bl	8006fce <HAL_GPIO_WritePin>
                          |RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RELAY3_Pin MCU_DTR3_Pin LCD_DB1_Pin LCD_RW_Pin
                           LCD_E_Pin LCD_DI_Pin */
  GPIO_InitStruct.Pin = RELAY3_Pin|MCU_DTR3_Pin|LCD_DB1_Pin|LCD_RW_Pin
 80021dc:	f240 7394 	movw	r3, #1940	@ 0x794
 80021e0:	61bb      	str	r3, [r7, #24]
                          |LCD_E_Pin|LCD_DI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2302      	movs	r3, #2
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4882      	ldr	r0, [pc, #520]	@ (8002400 <MX_GPIO_Init+0x2ec>)
 80021f6:	f004 fd3f 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_DSR3_Pin GP_SW4_Pin GP_SW5_Pin GP_SW1_Pin
                           GP_SW2_Pin GP_SW3_Pin RIGHT_SW_Pin */
  GPIO_InitStruct.Pin = MCU_DSR3_Pin|GP_SW4_Pin|GP_SW5_Pin|GP_SW1_Pin
 80021fa:	f647 0368 	movw	r3, #30824	@ 0x7868
 80021fe:	61bb      	str	r3, [r7, #24]
                          |GP_SW2_Pin|GP_SW3_Pin|RIGHT_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002208:	f107 0318 	add.w	r3, r7, #24
 800220c:	4619      	mov	r1, r3
 800220e:	487c      	ldr	r0, [pc, #496]	@ (8002400 <MX_GPIO_Init+0x2ec>)
 8002210:	f004 fd32 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP_SW6_Pin LEFT_SW_Pin */
  GPIO_InitStruct.Pin = GP_SW6_Pin|LEFT_SW_Pin;
 8002214:	f242 0301 	movw	r3, #8193	@ 0x2001
 8002218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002222:	f107 0318 	add.w	r3, r7, #24
 8002226:	4619      	mov	r1, r3
 8002228:	4877      	ldr	r0, [pc, #476]	@ (8002408 <MX_GPIO_Init+0x2f4>)
 800222a:	f004 fd25 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800222e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002234:	2303      	movs	r3, #3
 8002236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002238:	f107 0318 	add.w	r3, r7, #24
 800223c:	4619      	mov	r1, r3
 800223e:	4872      	ldr	r0, [pc, #456]	@ (8002408 <MX_GPIO_Init+0x2f4>)
 8002240:	f004 fd1a 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_A1_Pin LEFT_B1_Pin LEFT_B2_Pin */
  GPIO_InitStruct.Pin = LEFT_A1_Pin|LEFT_B1_Pin|LEFT_B2_Pin;
 8002244:	230e      	movs	r3, #14
 8002246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002248:	4b72      	ldr	r3, [pc, #456]	@ (8002414 <MX_GPIO_Init+0x300>)
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	4619      	mov	r1, r3
 8002256:	486c      	ldr	r0, [pc, #432]	@ (8002408 <MX_GPIO_Init+0x2f4>)
 8002258:	f004 fd0e 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_A2_Pin */
  GPIO_InitStruct.Pin = LEFT_A2_Pin;
 800225c:	2301      	movs	r3, #1
 800225e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002260:	4b6c      	ldr	r3, [pc, #432]	@ (8002414 <MX_GPIO_Init+0x300>)
 8002262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEFT_A2_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 0318 	add.w	r3, r7, #24
 800226c:	4619      	mov	r1, r3
 800226e:	4865      	ldr	r0, [pc, #404]	@ (8002404 <MX_GPIO_Init+0x2f0>)
 8002270:	f004 fd02 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BKL_Pin LCD_RESET_Pin LCD_CS2_Pin LCD_CS1_Pin
                           LCD_DB7_Pin LCD_DB6_Pin LCD_DB5_Pin KEY_COL4_Pin
                           KEY_COL7_Pin KEY_COL6_Pin KEY_COL8_Pin */
  GPIO_InitStruct.Pin = LCD_BKL_Pin|LCD_RESET_Pin|LCD_CS2_Pin|LCD_CS1_Pin
 8002274:	f649 13fe 	movw	r3, #39422	@ 0x99fe
 8002278:	61bb      	str	r3, [r7, #24]
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|KEY_COL4_Pin
                          |KEY_COL7_Pin|KEY_COL6_Pin|KEY_COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227a:	2301      	movs	r3, #1
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2302      	movs	r3, #2
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	4619      	mov	r1, r3
 800228c:	485d      	ldr	r0, [pc, #372]	@ (8002404 <MX_GPIO_Init+0x2f0>)
 800228e:	f004 fcf3 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB4_Pin LCD_DB2_Pin KEY_COL0_Pin KEY_COL3_Pin
                           KEY_COL2_Pin KEY_COL5_Pin */
  GPIO_InitStruct.Pin = LCD_DB4_Pin|LCD_DB2_Pin|KEY_COL0_Pin|KEY_COL3_Pin
 8002292:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8002296:	61bb      	str	r3, [r7, #24]
                          |KEY_COL2_Pin|KEY_COL5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2302      	movs	r3, #2
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a4:	f107 0318 	add.w	r3, r7, #24
 80022a8:	4619      	mov	r1, r3
 80022aa:	4857      	ldr	r0, [pc, #348]	@ (8002408 <MX_GPIO_Init+0x2f4>)
 80022ac:	f004 fce4 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB3_Pin LCD_DB0_Pin MCU_DTR2_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DB3_Pin|LCD_DB0_Pin|MCU_DTR2_Pin|FLASH_CS_Pin;
 80022b0:	f240 2383 	movw	r3, #643	@ 0x283
 80022b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2302      	movs	r3, #2
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f107 0318 	add.w	r3, r7, #24
 80022c6:	4619      	mov	r1, r3
 80022c8:	4850      	ldr	r0, [pc, #320]	@ (800240c <MX_GPIO_Init+0x2f8>)
 80022ca:	f004 fcd5 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin KEY_ROW1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|KEY_ROW1_Pin;
 80022ce:	f248 0304 	movw	r3, #32772	@ 0x8004
 80022d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022dc:	f107 0318 	add.w	r3, r7, #24
 80022e0:	4619      	mov	r1, r3
 80022e2:	484a      	ldr	r0, [pc, #296]	@ (800240c <MX_GPIO_Init+0x2f8>)
 80022e4:	f004 fcc8 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_A1_Pin */
  GPIO_InitStruct.Pin = RIGHT_A1_Pin;
 80022e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ee:	4b49      	ldr	r3, [pc, #292]	@ (8002414 <MX_GPIO_Init+0x300>)
 80022f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RIGHT_A1_GPIO_Port, &GPIO_InitStruct);
 80022f6:	f107 0318 	add.w	r3, r7, #24
 80022fa:	4619      	mov	r1, r3
 80022fc:	4840      	ldr	r0, [pc, #256]	@ (8002400 <MX_GPIO_Init+0x2ec>)
 80022fe:	f004 fcbb 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_B1_Pin RIGHT_B2_Pin RIGHT_A2_Pin */
  GPIO_InitStruct.Pin = RIGHT_B1_Pin|RIGHT_B2_Pin|RIGHT_A2_Pin;
 8002302:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002308:	4b42      	ldr	r3, [pc, #264]	@ (8002414 <MX_GPIO_Init+0x300>)
 800230a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	f107 0318 	add.w	r3, r7, #24
 8002314:	4619      	mov	r1, r3
 8002316:	483d      	ldr	r0, [pc, #244]	@ (800240c <MX_GPIO_Init+0x2f8>)
 8002318:	f004 fcae 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_ROW0_Pin KEY_ROW3_Pin KEY_ROW2_Pin KEY_ROW5_Pin
                           KEY_ROW4_Pin KEY_ROW7_Pin KEY_ROW6_Pin MCU_DSR1_Pin */
  GPIO_InitStruct.Pin = KEY_ROW0_Pin|KEY_ROW3_Pin|KEY_ROW2_Pin|KEY_ROW5_Pin
 800231c:	f647 7302 	movw	r3, #32514	@ 0x7f02
 8002320:	61bb      	str	r3, [r7, #24]
                          |KEY_ROW4_Pin|KEY_ROW7_Pin|KEY_ROW6_Pin|MCU_DSR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232a:	f107 0318 	add.w	r3, r7, #24
 800232e:	4619      	mov	r1, r3
 8002330:	4837      	ldr	r0, [pc, #220]	@ (8002410 <MX_GPIO_Init+0x2fc>)
 8002332:	f004 fca1 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_COL1_Pin KEY_COL9_Pin RELAY1_Pin MCU_DTR1_Pin
                           RELAY2_Pin */
  GPIO_InitStruct.Pin = KEY_COL1_Pin|KEY_COL9_Pin|RELAY1_Pin|MCU_DTR1_Pin
 8002336:	f248 0399 	movw	r3, #32921	@ 0x8099
 800233a:	61bb      	str	r3, [r7, #24]
                          |RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233c:	2301      	movs	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2302      	movs	r3, #2
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002348:	f107 0318 	add.w	r3, r7, #24
 800234c:	4619      	mov	r1, r3
 800234e:	4830      	ldr	r0, [pc, #192]	@ (8002410 <MX_GPIO_Init+0x2fc>)
 8002350:	f004 fc92 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002354:	2340      	movs	r3, #64	@ 0x40
 8002356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2302      	movs	r3, #2
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002360:	f107 0318 	add.w	r3, r7, #24
 8002364:	4619      	mov	r1, r3
 8002366:	4829      	ldr	r0, [pc, #164]	@ (800240c <MX_GPIO_Init+0x2f8>)
 8002368:	f004 fc86 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800236c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002372:	2303      	movs	r3, #3
 8002374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 0318 	add.w	r3, r7, #24
 800237a:	4619      	mov	r1, r3
 800237c:	4823      	ldr	r0, [pc, #140]	@ (800240c <MX_GPIO_Init+0x2f8>)
 800237e:	f004 fc7b 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002382:	2303      	movs	r3, #3
 8002384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002386:	2303      	movs	r3, #3
 8002388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800238a:	f107 0318 	add.w	r3, r7, #24
 800238e:	4619      	mov	r1, r3
 8002390:	481b      	ldr	r0, [pc, #108]	@ (8002400 <MX_GPIO_Init+0x2ec>)
 8002392:	f004 fc71 	bl	8006c78 <HAL_GPIO_Init>

  /*Configures the port and pin on which the EVENTOUT Cortex signal will be connected */
  HAL_GPIOEx_ConfigEventout(AFIO_EVENTOUT_PORT_B, AFIO_EVENTOUT_PIN_6);
 8002396:	2106      	movs	r1, #6
 8002398:	2010      	movs	r0, #16
 800239a:	f004 fe49 	bl	8007030 <HAL_GPIOEx_ConfigEventout>

  /*Enables the Event Output */
  HAL_GPIOEx_EnableEventout();
 800239e:	f004 fe5d 	bl	800705c <HAL_GPIOEx_EnableEventout>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2105      	movs	r1, #5
 80023a6:	2006      	movs	r0, #6
 80023a8:	f004 faf9 	bl	800699e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023ac:	2006      	movs	r0, #6
 80023ae:	f004 fb12 	bl	80069d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2105      	movs	r1, #5
 80023b6:	2007      	movs	r0, #7
 80023b8:	f004 faf1 	bl	800699e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80023bc:	2007      	movs	r0, #7
 80023be:	f004 fb0a 	bl	80069d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2105      	movs	r1, #5
 80023c6:	2008      	movs	r0, #8
 80023c8:	f004 fae9 	bl	800699e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80023cc:	2008      	movs	r0, #8
 80023ce:	f004 fb02 	bl	80069d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2105      	movs	r1, #5
 80023d6:	2009      	movs	r0, #9
 80023d8:	f004 fae1 	bl	800699e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80023dc:	2009      	movs	r0, #9
 80023de:	f004 fafa 	bl	80069d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2105      	movs	r1, #5
 80023e6:	2028      	movs	r0, #40	@ 0x28
 80023e8:	f004 fad9 	bl	800699e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023ec:	2028      	movs	r0, #40	@ 0x28
 80023ee:	f004 faf2 	bl	80069d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023f2:	bf00      	nop
 80023f4:	3728      	adds	r7, #40	@ 0x28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	40011800 	.word	0x40011800
 8002404:	40010800 	.word	0x40010800
 8002408:	40011000 	.word	0x40011000
 800240c:	40010c00 	.word	0x40010c00
 8002410:	40011400 	.word	0x40011400
 8002414:	10110000 	.word	0x10110000

08002418 <read_encoder>:

/* USER CODE BEGIN 4 */

void read_encoder() { // MHz right outer knob HERE
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 800241e:	4b34      	ldr	r3, [pc, #208]	@ (80024f0 <read_encoder+0xd8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	f083 0301 	eor.w	r3, r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d05d      	beq.n	80024e8 <read_encoder+0xd0>
    static uint8_t old_AB = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; //{0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0}; // Lookup table

    old_AB <<=2;  // Remember previous state
 800242c:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <read_encoder+0xdc>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b2f      	ldr	r3, [pc, #188]	@ (80024f4 <read_encoder+0xdc>)
 8002436:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(RIGHT_A2_GPIO_Port, RIGHT_A2_Pin)) old_AB |= 0x02; // Add current state of pin A
 8002438:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800243c:	482e      	ldr	r0, [pc, #184]	@ (80024f8 <read_encoder+0xe0>)
 800243e:	f004 fdaf 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <read_encoder+0x3e>
 8002448:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <read_encoder+0xdc>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <read_encoder+0xdc>)
 8002454:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(RIGHT_B2_GPIO_Port, RIGHT_B2_Pin)) old_AB |= 0x01; // Add current state of pin B
 8002456:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800245a:	4827      	ldr	r0, [pc, #156]	@ (80024f8 <read_encoder+0xe0>)
 800245c:	f004 fda0 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <read_encoder+0x5c>
 8002466:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <read_encoder+0xdc>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	b2da      	uxtb	r2, r3
 8002470:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <read_encoder+0xdc>)
 8002472:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_AB & 0x0f )];
 8002474:	4b1f      	ldr	r3, [pc, #124]	@ (80024f4 <read_encoder+0xdc>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	4a1f      	ldr	r2, [pc, #124]	@ (80024fc <read_encoder+0xe4>)
 800247e:	56d3      	ldrsb	r3, [r2, r3]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <read_encoder+0xe8>)
 8002484:	f993 3000 	ldrsb.w	r3, [r3]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4413      	add	r3, r2
 800248c:	b2db      	uxtb	r3, r3
 800248e:	b25a      	sxtb	r2, r3
 8002490:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <read_encoder+0xe8>)
 8002492:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 0 ) {        // Four steps forward
 8002494:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <read_encoder+0xe8>)
 8002496:	f993 3000 	ldrsb.w	r3, [r3]
 800249a:	2b00      	cmp	r3, #0
 800249c:	dd0f      	ble.n	80024be <read_encoder+0xa6>
      int changevalue = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	603b      	str	r3, [r7, #0]
      if (SM < 117) {
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <read_encoder+0xec>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b74      	cmp	r3, #116	@ 0x74
 80024a8:	dc05      	bgt.n	80024b6 <read_encoder+0x9e>
        SM = SM + changevalue;              // Update counter
 80024aa:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <read_encoder+0xec>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	4a14      	ldr	r2, [pc, #80]	@ (8002504 <read_encoder+0xec>)
 80024b4:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <read_encoder+0xe8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
        SM = SM + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 80024bc:	e014      	b.n	80024e8 <read_encoder+0xd0>
    else if( encval < 0 ) {        // Four steps backward
 80024be:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <read_encoder+0xe8>)
 80024c0:	f993 3000 	ldrsb.w	r3, [r3]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da0f      	bge.n	80024e8 <read_encoder+0xd0>
      int changevalue = -1;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
 80024cc:	607b      	str	r3, [r7, #4]
      if (SM > 108) {
 80024ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <read_encoder+0xec>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b6c      	cmp	r3, #108	@ 0x6c
 80024d4:	dd05      	ble.n	80024e2 <read_encoder+0xca>
        SM = SM + changevalue;              // Update counter
 80024d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <read_encoder+0xec>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	4a09      	ldr	r2, [pc, #36]	@ (8002504 <read_encoder+0xec>)
 80024e0:	6013      	str	r3, [r2, #0]
      encval = 0;
 80024e2:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <read_encoder+0xe8>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000000c 	.word	0x2000000c
 80024f4:	2000000d 	.word	0x2000000d
 80024f8:	40010c00 	.word	0x40010c00
 80024fc:	0800df7c 	.word	0x0800df7c
 8002500:	20000718 	.word	0x20000718
 8002504:	20000008 	.word	0x20000008

08002508 <read_encoder2>:

void read_encoder2() { // KHz right inner knob
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 800250e:	4b35      	ldr	r3, [pc, #212]	@ (80025e4 <read_encoder2+0xdc>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	f083 0301 	eor.w	r3, r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d05f      	beq.n	80025dc <read_encoder2+0xd4>
    static uint8_t old_GH = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

    old_GH <<=2;  // Remember previous state
 800251c:	4b32      	ldr	r3, [pc, #200]	@ (80025e8 <read_encoder2+0xe0>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b30      	ldr	r3, [pc, #192]	@ (80025e8 <read_encoder2+0xe0>)
 8002526:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(RIGHT_A1_GPIO_Port, RIGHT_A1_Pin)) old_GH |= 0x02; // Add current state of pin G
 8002528:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800252c:	482f      	ldr	r0, [pc, #188]	@ (80025ec <read_encoder2+0xe4>)
 800252e:	f004 fd37 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <read_encoder2+0x3e>
 8002538:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <read_encoder2+0xe0>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b29      	ldr	r3, [pc, #164]	@ (80025e8 <read_encoder2+0xe0>)
 8002544:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(RIGHT_B1_GPIO_Port, RIGHT_B1_Pin)) old_GH |= 0x01; // Add current state of pin H
 8002546:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800254a:	4829      	ldr	r0, [pc, #164]	@ (80025f0 <read_encoder2+0xe8>)
 800254c:	f004 fd28 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <read_encoder2+0x5c>
 8002556:	4b24      	ldr	r3, [pc, #144]	@ (80025e8 <read_encoder2+0xe0>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	b2da      	uxtb	r2, r3
 8002560:	4b21      	ldr	r3, [pc, #132]	@ (80025e8 <read_encoder2+0xe0>)
 8002562:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_GH & 0x0f )];
 8002564:	4b20      	ldr	r3, [pc, #128]	@ (80025e8 <read_encoder2+0xe0>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	4a21      	ldr	r2, [pc, #132]	@ (80025f4 <read_encoder2+0xec>)
 800256e:	56d3      	ldrsb	r3, [r2, r3]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4b21      	ldr	r3, [pc, #132]	@ (80025f8 <read_encoder2+0xf0>)
 8002574:	f993 3000 	ldrsb.w	r3, [r3]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4413      	add	r3, r2
 800257c:	b2db      	uxtb	r3, r3
 800257e:	b25a      	sxtb	r2, r3
 8002580:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <read_encoder2+0xf0>)
 8002582:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 0 ) {        // Four steps forward
 8002584:	4b1c      	ldr	r3, [pc, #112]	@ (80025f8 <read_encoder2+0xf0>)
 8002586:	f993 3000 	ldrsb.w	r3, [r3]
 800258a:	2b00      	cmp	r3, #0
 800258c:	dd11      	ble.n	80025b2 <read_encoder2+0xaa>
      int changevalue = 50;
 800258e:	2332      	movs	r3, #50	@ 0x32
 8002590:	603b      	str	r3, [r7, #0]
      if (SK < 950) {
 8002592:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <read_encoder2+0xf4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800259a:	4293      	cmp	r3, r2
 800259c:	dc05      	bgt.n	80025aa <read_encoder2+0xa2>
        SK = SK + changevalue;              // Update counter
 800259e:	4b17      	ldr	r3, [pc, #92]	@ (80025fc <read_encoder2+0xf4>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a15      	ldr	r2, [pc, #84]	@ (80025fc <read_encoder2+0xf4>)
 80025a8:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 80025aa:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <read_encoder2+0xf0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
        SK = SK + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 80025b0:	e014      	b.n	80025dc <read_encoder2+0xd4>
    else if( encval < 0 ) {        // Four steps backward
 80025b2:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <read_encoder2+0xf0>)
 80025b4:	f993 3000 	ldrsb.w	r3, [r3]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	da0f      	bge.n	80025dc <read_encoder2+0xd4>
      int changevalue = -50;
 80025bc:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 80025c0:	607b      	str	r3, [r7, #4]
      if (SK > 0) {
 80025c2:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <read_encoder2+0xf4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	dd05      	ble.n	80025d6 <read_encoder2+0xce>
        SK = SK + changevalue;              // Update counter
 80025ca:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <read_encoder2+0xf4>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a0a      	ldr	r2, [pc, #40]	@ (80025fc <read_encoder2+0xf4>)
 80025d4:	6013      	str	r3, [r2, #0]
      encval = 0;
 80025d6:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <read_encoder2+0xf0>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2000000c 	.word	0x2000000c
 80025e8:	2000000e 	.word	0x2000000e
 80025ec:	40011800 	.word	0x40011800
 80025f0:	40010c00 	.word	0x40010c00
 80025f4:	0800df8c 	.word	0x0800df8c
 80025f8:	20000719 	.word	0x20000719
 80025fc:	200006a0 	.word	0x200006a0

08002600 <read_encoder3>:

void read_encoder3() { // volume left inner knob
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 8002606:	4b34      	ldr	r3, [pc, #208]	@ (80026d8 <read_encoder3+0xd8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05c      	beq.n	80026ce <read_encoder3+0xce>
    static uint8_t old_CD = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

    old_CD <<=2;  // Remember previous state
 8002614:	4b31      	ldr	r3, [pc, #196]	@ (80026dc <read_encoder3+0xdc>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b2f      	ldr	r3, [pc, #188]	@ (80026dc <read_encoder3+0xdc>)
 800261e:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 8002620:	2102      	movs	r1, #2
 8002622:	482f      	ldr	r0, [pc, #188]	@ (80026e0 <read_encoder3+0xe0>)
 8002624:	f004 fcbc 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <read_encoder3+0x3c>
 800262e:	4b2b      	ldr	r3, [pc, #172]	@ (80026dc <read_encoder3+0xdc>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	b2da      	uxtb	r2, r3
 8002638:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <read_encoder3+0xdc>)
 800263a:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 800263c:	2104      	movs	r1, #4
 800263e:	4828      	ldr	r0, [pc, #160]	@ (80026e0 <read_encoder3+0xe0>)
 8002640:	f004 fcae 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <read_encoder3+0x58>
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <read_encoder3+0xdc>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4b21      	ldr	r3, [pc, #132]	@ (80026dc <read_encoder3+0xdc>)
 8002656:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_CD & 0x0f )];
 8002658:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <read_encoder3+0xdc>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	4a20      	ldr	r2, [pc, #128]	@ (80026e4 <read_encoder3+0xe4>)
 8002662:	56d3      	ldrsb	r3, [r2, r3]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4b20      	ldr	r3, [pc, #128]	@ (80026e8 <read_encoder3+0xe8>)
 8002668:	f993 3000 	ldrsb.w	r3, [r3]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	4413      	add	r3, r2
 8002670:	b2db      	uxtb	r3, r3
 8002672:	b25a      	sxtb	r2, r3
 8002674:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <read_encoder3+0xe8>)
 8002676:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 1 ) {        // Four steps forward
 8002678:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <read_encoder3+0xe8>)
 800267a:	f993 3000 	ldrsb.w	r3, [r3]
 800267e:	2b01      	cmp	r3, #1
 8002680:	dd0f      	ble.n	80026a2 <read_encoder3+0xa2>
      int changevalue = 1;
 8002682:	2301      	movs	r3, #1
 8002684:	603b      	str	r3, [r7, #0]
      if (vol < 20) {
 8002686:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <read_encoder3+0xec>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b13      	cmp	r3, #19
 800268c:	dc05      	bgt.n	800269a <read_encoder3+0x9a>
        vol = vol + changevalue;              // Update counter
 800268e:	4b17      	ldr	r3, [pc, #92]	@ (80026ec <read_encoder3+0xec>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	4413      	add	r3, r2
 8002696:	4a15      	ldr	r2, [pc, #84]	@ (80026ec <read_encoder3+0xec>)
 8002698:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 800269a:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <read_encoder3+0xe8>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
        vol = vol + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 80026a0:	e015      	b.n	80026ce <read_encoder3+0xce>
    else if( encval < -1 ) {        // Four steps backward
 80026a2:	4b11      	ldr	r3, [pc, #68]	@ (80026e8 <read_encoder3+0xe8>)
 80026a4:	f993 3000 	ldrsb.w	r3, [r3]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	da0f      	bge.n	80026ce <read_encoder3+0xce>
      int changevalue = -1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	607b      	str	r3, [r7, #4]
      if (vol > 0) {
 80026b4:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <read_encoder3+0xec>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	dd05      	ble.n	80026c8 <read_encoder3+0xc8>
        vol = vol + changevalue;              // Update counter
 80026bc:	4b0b      	ldr	r3, [pc, #44]	@ (80026ec <read_encoder3+0xec>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <read_encoder3+0xec>)
 80026c6:	6013      	str	r3, [r2, #0]
      encval = 0;
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <read_encoder3+0xe8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000000c 	.word	0x2000000c
 80026dc:	2000000f 	.word	0x2000000f
 80026e0:	40011000 	.word	0x40011000
 80026e4:	0800df9c 	.word	0x0800df9c
 80026e8:	2000071a 	.word	0x2000071a
 80026ec:	200006a4 	.word	0x200006a4

080026f0 <read_encoder4>:

void read_encoder4() { // squelch left outer knob
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 80026f6:	4b34      	ldr	r3, [pc, #208]	@ (80027c8 <read_encoder4+0xd8>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05d      	beq.n	80027c0 <read_encoder4+0xd0>
    static uint8_t old_IJ = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

    old_IJ <<=2;  // Remember previous state
 8002704:	4b31      	ldr	r3, [pc, #196]	@ (80027cc <read_encoder4+0xdc>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	b2da      	uxtb	r2, r3
 800270c:	4b2f      	ldr	r3, [pc, #188]	@ (80027cc <read_encoder4+0xdc>)
 800270e:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(LEFT_A2_GPIO_Port, LEFT_A2_Pin)) old_IJ |= 0x02; // Add current state of pin I
 8002710:	2101      	movs	r1, #1
 8002712:	482f      	ldr	r0, [pc, #188]	@ (80027d0 <read_encoder4+0xe0>)
 8002714:	f004 fc44 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <read_encoder4+0x3c>
 800271e:	4b2b      	ldr	r3, [pc, #172]	@ (80027cc <read_encoder4+0xdc>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	b2da      	uxtb	r2, r3
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <read_encoder4+0xdc>)
 800272a:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(LEFT_B2_GPIO_Port, LEFT_B2_Pin)) old_IJ |= 0x01; // Add current state of pin J
 800272c:	2108      	movs	r1, #8
 800272e:	4829      	ldr	r0, [pc, #164]	@ (80027d4 <read_encoder4+0xe4>)
 8002730:	f004 fc36 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <read_encoder4+0x58>
 800273a:	4b24      	ldr	r3, [pc, #144]	@ (80027cc <read_encoder4+0xdc>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b21      	ldr	r3, [pc, #132]	@ (80027cc <read_encoder4+0xdc>)
 8002746:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_IJ & 0x0f )];
 8002748:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <read_encoder4+0xdc>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	4a21      	ldr	r2, [pc, #132]	@ (80027d8 <read_encoder4+0xe8>)
 8002752:	56d3      	ldrsb	r3, [r2, r3]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4b21      	ldr	r3, [pc, #132]	@ (80027dc <read_encoder4+0xec>)
 8002758:	f993 3000 	ldrsb.w	r3, [r3]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4413      	add	r3, r2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	b25a      	sxtb	r2, r3
 8002764:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <read_encoder4+0xec>)
 8002766:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 1 ) {        // Four steps forward
 8002768:	4b1c      	ldr	r3, [pc, #112]	@ (80027dc <read_encoder4+0xec>)
 800276a:	f993 3000 	ldrsb.w	r3, [r3]
 800276e:	2b01      	cmp	r3, #1
 8002770:	dd10      	ble.n	8002794 <read_encoder4+0xa4>
      int changevalue = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	603b      	str	r3, [r7, #0]
      if (obs < 359) {
 8002776:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <read_encoder4+0xf0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f5b3 7fb3 	cmp.w	r3, #358	@ 0x166
 800277e:	dc05      	bgt.n	800278c <read_encoder4+0x9c>
        obs = obs + changevalue;              // Update counter
 8002780:	4b17      	ldr	r3, [pc, #92]	@ (80027e0 <read_encoder4+0xf0>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4413      	add	r3, r2
 8002788:	4a15      	ldr	r2, [pc, #84]	@ (80027e0 <read_encoder4+0xf0>)
 800278a:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <read_encoder4+0xec>)
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
        obs = obs + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 8002792:	e015      	b.n	80027c0 <read_encoder4+0xd0>
    else if( encval < -1 ) {        // Four steps backward
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <read_encoder4+0xec>)
 8002796:	f993 3000 	ldrsb.w	r3, [r3]
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279e:	da0f      	bge.n	80027c0 <read_encoder4+0xd0>
      int changevalue = -1;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	607b      	str	r3, [r7, #4]
      if (obs > 0) {
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <read_encoder4+0xf0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	dd05      	ble.n	80027ba <read_encoder4+0xca>
        obs = obs + changevalue;              // Update counter
 80027ae:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <read_encoder4+0xf0>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <read_encoder4+0xf0>)
 80027b8:	6013      	str	r3, [r2, #0]
      encval = 0;
 80027ba:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <read_encoder4+0xec>)
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000000c 	.word	0x2000000c
 80027cc:	20000010 	.word	0x20000010
 80027d0:	40010800 	.word	0x40010800
 80027d4:	40011000 	.word	0x40011000
 80027d8:	0800dfac 	.word	0x0800dfac
 80027dc:	2000071b 	.word	0x2000071b
 80027e0:	200006fc 	.word	0x200006fc

080027e4 <scroll>:

void scroll() { // scroll left inner knob
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 80027ea:	4b32      	ldr	r3, [pc, #200]	@ (80028b4 <scroll+0xd0>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b30      	ldr	r3, [pc, #192]	@ (80028b4 <scroll+0xd0>)
 80027f4:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 80027f6:	2102      	movs	r1, #2
 80027f8:	482f      	ldr	r0, [pc, #188]	@ (80028b8 <scroll+0xd4>)
 80027fa:	f004 fbd1 	bl	8006fa0 <HAL_GPIO_ReadPin>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <scroll+0x2e>
 8002804:	4b2b      	ldr	r3, [pc, #172]	@ (80028b4 <scroll+0xd0>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4b29      	ldr	r3, [pc, #164]	@ (80028b4 <scroll+0xd0>)
 8002810:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 8002812:	2104      	movs	r1, #4
 8002814:	4828      	ldr	r0, [pc, #160]	@ (80028b8 <scroll+0xd4>)
 8002816:	f004 fbc3 	bl	8006fa0 <HAL_GPIO_ReadPin>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <scroll+0x4a>
 8002820:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <scroll+0xd0>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b22      	ldr	r3, [pc, #136]	@ (80028b4 <scroll+0xd0>)
 800282c:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 800282e:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <scroll+0xd0>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	4a21      	ldr	r2, [pc, #132]	@ (80028bc <scroll+0xd8>)
 8002838:	56d3      	ldrsb	r3, [r2, r3]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <scroll+0xdc>)
 800283e:	f993 3000 	ldrsb.w	r3, [r3]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4413      	add	r3, r2
 8002846:	b2db      	uxtb	r3, r3
 8002848:	b25a      	sxtb	r2, r3
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <scroll+0xdc>)
 800284c:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 800284e:	4b1c      	ldr	r3, [pc, #112]	@ (80028c0 <scroll+0xdc>)
 8002850:	f993 3000 	ldrsb.w	r3, [r3]
 8002854:	2b01      	cmp	r3, #1
 8002856:	dd12      	ble.n	800287e <scroll+0x9a>
    int changevalue = 1;
 8002858:	2301      	movs	r3, #1
 800285a:	603b      	str	r3, [r7, #0]
    if (dispCount < count-1) {
 800285c:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <scroll+0xe0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	1e5a      	subs	r2, r3, #1
 8002862:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <scroll+0xe4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	dd05      	ble.n	8002876 <scroll+0x92>
      dispCount = dispCount + changevalue;              // Update counter
 800286a:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <scroll+0xe4>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	4413      	add	r3, r2
 8002872:	4a15      	ldr	r2, [pc, #84]	@ (80028c8 <scroll+0xe4>)
 8002874:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002876:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <scroll+0xdc>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
    if (dispCount > 0) {
      dispCount = dispCount + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 800287c:	e015      	b.n	80028aa <scroll+0xc6>
  else if( encval < -1 ) {        // Four steps backward
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <scroll+0xdc>)
 8002880:	f993 3000 	ldrsb.w	r3, [r3]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	da0f      	bge.n	80028aa <scroll+0xc6>
    int changevalue = -1;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	607b      	str	r3, [r7, #4]
    if (dispCount > 0) {
 8002890:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <scroll+0xe4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	dd05      	ble.n	80028a4 <scroll+0xc0>
      dispCount = dispCount + changevalue;              // Update counter
 8002898:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <scroll+0xe4>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	4a09      	ldr	r2, [pc, #36]	@ (80028c8 <scroll+0xe4>)
 80028a2:	6013      	str	r3, [r2, #0]
    encval = 0;
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <scroll+0xdc>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000011 	.word	0x20000011
 80028b8:	40011000 	.word	0x40011000
 80028bc:	0800dfbc 	.word	0x0800dfbc
 80028c0:	2000071c 	.word	0x2000071c
 80028c4:	200006f0 	.word	0x200006f0
 80028c8:	200006ec 	.word	0x200006ec

080028cc <scroll2>:
void scroll2() { // scroll left inner knob
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 80028d2:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <scroll2+0xcc>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b2f      	ldr	r3, [pc, #188]	@ (8002998 <scroll2+0xcc>)
 80028dc:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 80028de:	2102      	movs	r1, #2
 80028e0:	482e      	ldr	r0, [pc, #184]	@ (800299c <scroll2+0xd0>)
 80028e2:	f004 fb5d 	bl	8006fa0 <HAL_GPIO_ReadPin>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <scroll2+0x2e>
 80028ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <scroll2+0xcc>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b28      	ldr	r3, [pc, #160]	@ (8002998 <scroll2+0xcc>)
 80028f8:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 80028fa:	2104      	movs	r1, #4
 80028fc:	4827      	ldr	r0, [pc, #156]	@ (800299c <scroll2+0xd0>)
 80028fe:	f004 fb4f 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <scroll2+0x4a>
 8002908:	4b23      	ldr	r3, [pc, #140]	@ (8002998 <scroll2+0xcc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4b21      	ldr	r3, [pc, #132]	@ (8002998 <scroll2+0xcc>)
 8002914:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 8002916:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <scroll2+0xcc>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	4a20      	ldr	r2, [pc, #128]	@ (80029a0 <scroll2+0xd4>)
 8002920:	56d3      	ldrsb	r3, [r2, r3]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <scroll2+0xd8>)
 8002926:	f993 3000 	ldrsb.w	r3, [r3]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4413      	add	r3, r2
 800292e:	b2db      	uxtb	r3, r3
 8002930:	b25a      	sxtb	r2, r3
 8002932:	4b1c      	ldr	r3, [pc, #112]	@ (80029a4 <scroll2+0xd8>)
 8002934:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002936:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <scroll2+0xd8>)
 8002938:	f993 3000 	ldrsb.w	r3, [r3]
 800293c:	2b01      	cmp	r3, #1
 800293e:	dd11      	ble.n	8002964 <scroll2+0x98>
    int changevalue = 1;
 8002940:	2301      	movs	r3, #1
 8002942:	603b      	str	r3, [r7, #0]
    if (dispCount < count) {
 8002944:	4b18      	ldr	r3, [pc, #96]	@ (80029a8 <scroll2+0xdc>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <scroll2+0xe0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	da05      	bge.n	800295c <scroll2+0x90>
      dispCount = dispCount + changevalue;              // Update counter
 8002950:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <scroll2+0xdc>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4413      	add	r3, r2
 8002958:	4a13      	ldr	r2, [pc, #76]	@ (80029a8 <scroll2+0xdc>)
 800295a:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <scroll2+0xd8>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
    if (dispCount > 0) {
      dispCount = dispCount + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002962:	e015      	b.n	8002990 <scroll2+0xc4>
  else if( encval < -1 ) {        // Four steps backward
 8002964:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <scroll2+0xd8>)
 8002966:	f993 3000 	ldrsb.w	r3, [r3]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	da0f      	bge.n	8002990 <scroll2+0xc4>
    int changevalue = -1;
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
 8002974:	607b      	str	r3, [r7, #4]
    if (dispCount > 0) {
 8002976:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <scroll2+0xdc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	dd05      	ble.n	800298a <scroll2+0xbe>
      dispCount = dispCount + changevalue;              // Update counter
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <scroll2+0xdc>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	4a08      	ldr	r2, [pc, #32]	@ (80029a8 <scroll2+0xdc>)
 8002988:	6013      	str	r3, [r2, #0]
    encval = 0;
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <scroll2+0xd8>)
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000012 	.word	0x20000012
 800299c:	40011000 	.word	0x40011000
 80029a0:	0800dfcc 	.word	0x0800dfcc
 80029a4:	2000071d 	.word	0x2000071d
 80029a8:	200006ec 	.word	0x200006ec
 80029ac:	200006f0 	.word	0x200006f0

080029b0 <cursormove>:
void cursormove() { // micgain left inner knob
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 80029b6:	4b30      	ldr	r3, [pc, #192]	@ (8002a78 <cursormove+0xc8>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4b2e      	ldr	r3, [pc, #184]	@ (8002a78 <cursormove+0xc8>)
 80029c0:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 80029c2:	2102      	movs	r1, #2
 80029c4:	482d      	ldr	r0, [pc, #180]	@ (8002a7c <cursormove+0xcc>)
 80029c6:	f004 faeb 	bl	8006fa0 <HAL_GPIO_ReadPin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <cursormove+0x2e>
 80029d0:	4b29      	ldr	r3, [pc, #164]	@ (8002a78 <cursormove+0xc8>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4b27      	ldr	r3, [pc, #156]	@ (8002a78 <cursormove+0xc8>)
 80029dc:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 80029de:	2104      	movs	r1, #4
 80029e0:	4826      	ldr	r0, [pc, #152]	@ (8002a7c <cursormove+0xcc>)
 80029e2:	f004 fadd 	bl	8006fa0 <HAL_GPIO_ReadPin>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <cursormove+0x4a>
 80029ec:	4b22      	ldr	r3, [pc, #136]	@ (8002a78 <cursormove+0xc8>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4b20      	ldr	r3, [pc, #128]	@ (8002a78 <cursormove+0xc8>)
 80029f8:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 80029fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002a78 <cursormove+0xc8>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	4a1f      	ldr	r2, [pc, #124]	@ (8002a80 <cursormove+0xd0>)
 8002a04:	56d3      	ldrsb	r3, [r2, r3]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <cursormove+0xd4>)
 8002a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	b25a      	sxtb	r2, r3
 8002a16:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <cursormove+0xd4>)
 8002a18:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <cursormove+0xd4>)
 8002a1c:	f993 3000 	ldrsb.w	r3, [r3]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	dd0f      	ble.n	8002a44 <cursormove+0x94>
    int changevalue = 1;
 8002a24:	2301      	movs	r3, #1
 8002a26:	603b      	str	r3, [r7, #0]
    if (cursor < 8) {
 8002a28:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <cursormove+0xd8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b07      	cmp	r3, #7
 8002a2e:	dc05      	bgt.n	8002a3c <cursormove+0x8c>
      cursor = cursor + changevalue;              // Update counter
 8002a30:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <cursormove+0xd8>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	4a13      	ldr	r2, [pc, #76]	@ (8002a88 <cursormove+0xd8>)
 8002a3a:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <cursormove+0xd4>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
    if (cursor > 0) {
      cursor = cursor + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002a42:	e015      	b.n	8002a70 <cursormove+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 8002a44:	4b0f      	ldr	r3, [pc, #60]	@ (8002a84 <cursormove+0xd4>)
 8002a46:	f993 3000 	ldrsb.w	r3, [r3]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	da0f      	bge.n	8002a70 <cursormove+0xc0>
    int changevalue = -1;
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	607b      	str	r3, [r7, #4]
    if (cursor > 0) {
 8002a56:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <cursormove+0xd8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	dd05      	ble.n	8002a6a <cursormove+0xba>
      cursor = cursor + changevalue;              // Update counter
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <cursormove+0xd8>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	4a08      	ldr	r2, [pc, #32]	@ (8002a88 <cursormove+0xd8>)
 8002a68:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <cursormove+0xd4>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000013 	.word	0x20000013
 8002a7c:	40011000 	.word	0x40011000
 8002a80:	0800dfdc 	.word	0x0800dfdc
 8002a84:	2000071e 	.word	0x2000071e
 8002a88:	200006f8 	.word	0x200006f8

08002a8c <delmove>:
void delmove() { // micgain left inner knob
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 8002a92:	4b30      	ldr	r3, [pc, #192]	@ (8002b54 <delmove+0xc8>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b54 <delmove+0xc8>)
 8002a9c:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	482d      	ldr	r0, [pc, #180]	@ (8002b58 <delmove+0xcc>)
 8002aa2:	f004 fa7d 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <delmove+0x2e>
 8002aac:	4b29      	ldr	r3, [pc, #164]	@ (8002b54 <delmove+0xc8>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <delmove+0xc8>)
 8002ab8:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 8002aba:	2104      	movs	r1, #4
 8002abc:	4826      	ldr	r0, [pc, #152]	@ (8002b58 <delmove+0xcc>)
 8002abe:	f004 fa6f 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <delmove+0x4a>
 8002ac8:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <delmove+0xc8>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <delmove+0xc8>)
 8002ad4:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b54 <delmove+0xc8>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4a1f      	ldr	r2, [pc, #124]	@ (8002b5c <delmove+0xd0>)
 8002ae0:	56d3      	ldrsb	r3, [r2, r3]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b60 <delmove+0xd4>)
 8002ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	b25a      	sxtb	r2, r3
 8002af2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <delmove+0xd4>)
 8002af4:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002af6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <delmove+0xd4>)
 8002af8:	f993 3000 	ldrsb.w	r3, [r3]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	dd0f      	ble.n	8002b20 <delmove+0x94>
    int changevalue = 1;
 8002b00:	2301      	movs	r3, #1
 8002b02:	603b      	str	r3, [r7, #0]
    if (delc < 1) {
 8002b04:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <delmove+0xd8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	dc05      	bgt.n	8002b18 <delmove+0x8c>
      delc = delc + changevalue;              // Update counter
 8002b0c:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <delmove+0xd8>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	4a13      	ldr	r2, [pc, #76]	@ (8002b64 <delmove+0xd8>)
 8002b16:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <delmove+0xd4>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
    if (delc > 0) {
      delc = delc + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002b1e:	e015      	b.n	8002b4c <delmove+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 8002b20:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <delmove+0xd4>)
 8002b22:	f993 3000 	ldrsb.w	r3, [r3]
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	da0f      	bge.n	8002b4c <delmove+0xc0>
    int changevalue = -1;
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b30:	607b      	str	r3, [r7, #4]
    if (delc > 0) {
 8002b32:	4b0c      	ldr	r3, [pc, #48]	@ (8002b64 <delmove+0xd8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	dd05      	ble.n	8002b46 <delmove+0xba>
      delc = delc + changevalue;              // Update counter
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <delmove+0xd8>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	4a08      	ldr	r2, [pc, #32]	@ (8002b64 <delmove+0xd8>)
 8002b44:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <delmove+0xd4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000014 	.word	0x20000014
 8002b58:	40011000 	.word	0x40011000
 8002b5c:	0800dfec 	.word	0x0800dfec
 8002b60:	2000071f 	.word	0x2000071f
 8002b64:	20000704 	.word	0x20000704

08002b68 <charmove>:
void charmove() { // sidetone left outer knob
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_IJ = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_IJ <<=2;  // Remember previous state
 8002b6e:	4b30      	ldr	r3, [pc, #192]	@ (8002c30 <charmove+0xc8>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4b2e      	ldr	r3, [pc, #184]	@ (8002c30 <charmove+0xc8>)
 8002b78:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A2_GPIO_Port, LEFT_A2_Pin)) old_IJ |= 0x02; // Add current state of pin I
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	482d      	ldr	r0, [pc, #180]	@ (8002c34 <charmove+0xcc>)
 8002b7e:	f004 fa0f 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <charmove+0x2e>
 8002b88:	4b29      	ldr	r3, [pc, #164]	@ (8002c30 <charmove+0xc8>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <charmove+0xc8>)
 8002b94:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B2_GPIO_Port, LEFT_B2_Pin)) old_IJ |= 0x01; // Add current state of pin J
 8002b96:	2108      	movs	r1, #8
 8002b98:	4827      	ldr	r0, [pc, #156]	@ (8002c38 <charmove+0xd0>)
 8002b9a:	f004 fa01 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <charmove+0x4a>
 8002ba4:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <charmove+0xc8>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4b20      	ldr	r3, [pc, #128]	@ (8002c30 <charmove+0xc8>)
 8002bb0:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_IJ & 0x0f )];
 8002bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <charmove+0xc8>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	4a20      	ldr	r2, [pc, #128]	@ (8002c3c <charmove+0xd4>)
 8002bbc:	56d3      	ldrsb	r3, [r2, r3]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c40 <charmove+0xd8>)
 8002bc2:	f993 3000 	ldrsb.w	r3, [r3]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	b25a      	sxtb	r2, r3
 8002bce:	4b1c      	ldr	r3, [pc, #112]	@ (8002c40 <charmove+0xd8>)
 8002bd0:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <charmove+0xd8>)
 8002bd4:	f993 3000 	ldrsb.w	r3, [r3]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	dd0f      	ble.n	8002bfc <charmove+0x94>
    int changevalue = 1;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	603b      	str	r3, [r7, #0]
    if (charcount < 39) {
 8002be0:	4b18      	ldr	r3, [pc, #96]	@ (8002c44 <charmove+0xdc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b26      	cmp	r3, #38	@ 0x26
 8002be6:	dc05      	bgt.n	8002bf4 <charmove+0x8c>
      charcount = charcount + changevalue;              // Update counter
 8002be8:	4b16      	ldr	r3, [pc, #88]	@ (8002c44 <charmove+0xdc>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a14      	ldr	r2, [pc, #80]	@ (8002c44 <charmove+0xdc>)
 8002bf2:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <charmove+0xd8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
    if (charcount > 0) {
      charcount = charcount + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002bfa:	e015      	b.n	8002c28 <charmove+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 8002bfc:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <charmove+0xd8>)
 8002bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	da0f      	bge.n	8002c28 <charmove+0xc0>
    int changevalue = -1;
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0c:	607b      	str	r3, [r7, #4]
    if (charcount > 0) {
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <charmove+0xdc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	dd05      	ble.n	8002c22 <charmove+0xba>
      charcount = charcount + changevalue;              // Update counter
 8002c16:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <charmove+0xdc>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a09      	ldr	r2, [pc, #36]	@ (8002c44 <charmove+0xdc>)
 8002c20:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002c22:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <charmove+0xd8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000015 	.word	0x20000015
 8002c34:	40010800 	.word	0x40010800
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	0800dffc 	.word	0x0800dffc
 8002c40:	20000720 	.word	0x20000720
 8002c44:	20000700 	.word	0x20000700

08002c48 <leftinnerknob>:

void leftinnerknob() {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  if (bscroll) {
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <leftinnerknob+0x44>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <leftinnerknob+0x12>
    scroll();
 8002c54:	f7ff fdc6 	bl	80027e4 <scroll>
    scroll2();
  }
  else {
    read_encoder3();
  }
}
 8002c58:	e016      	b.n	8002c88 <leftinnerknob+0x40>
  else if (del) {
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <leftinnerknob+0x48>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <leftinnerknob+0x20>
    delmove();
 8002c62:	f7ff ff13 	bl	8002a8c <delmove>
}
 8002c66:	e00f      	b.n	8002c88 <leftinnerknob+0x40>
  else if (add) {
 8002c68:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <leftinnerknob+0x4c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <leftinnerknob+0x2e>
    cursormove(); //flipped
 8002c70:	f7ff fe9e 	bl	80029b0 <cursormove>
}
 8002c74:	e008      	b.n	8002c88 <leftinnerknob+0x40>
  else if (edit) {
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <leftinnerknob+0x50>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <leftinnerknob+0x3c>
    scroll2();
 8002c7e:	f7ff fe25 	bl	80028cc <scroll2>
}
 8002c82:	e001      	b.n	8002c88 <leftinnerknob+0x40>
    read_encoder3();
 8002c84:	f7ff fcbc 	bl	8002600 <read_encoder3>
}
 8002c88:	bf00      	nop
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	200006f4 	.word	0x200006f4
 8002c90:	200006f6 	.word	0x200006f6
 8002c94:	200006f5 	.word	0x200006f5
 8002c98:	200006a8 	.word	0x200006a8

08002c9c <leftouterknob>:

void leftouterknob() {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  if (add) {
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <leftouterknob+0x1c>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <leftouterknob+0x12>
    charmove(); //flipped
 8002ca8:	f7ff ff5e 	bl	8002b68 <charmove>
  }
  else {
    read_encoder4();
  }
}
 8002cac:	e001      	b.n	8002cb2 <leftouterknob+0x16>
    read_encoder4();
 8002cae:	f7ff fd1f 	bl	80026f0 <read_encoder4>
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200006f5 	.word	0x200006f5

08002cbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LEFT_A2_Pin) { // LEFT 2 could be 8 idk
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d102      	bne.n	8002cd2 <HAL_GPIO_EXTI_Callback+0x16>
		leftouterknob();
 8002ccc:	f7ff ffe6 	bl	8002c9c <leftouterknob>
		read_encoder();
	}
	else if (GPIO_Pin == RIGHT_B2_Pin) { // RIGHT 2
		read_encoder();
	}
}
 8002cd0:	e02c      	b.n	8002d2c <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == LEFT_B2_Pin) { // LEFT 2
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d102      	bne.n	8002cde <HAL_GPIO_EXTI_Callback+0x22>
		leftouterknob();
 8002cd8:	f7ff ffe0 	bl	8002c9c <leftouterknob>
}
 8002cdc:	e026      	b.n	8002d2c <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == LEFT_A1_Pin) { // LEFT 1
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d102      	bne.n	8002cea <HAL_GPIO_EXTI_Callback+0x2e>
		leftinnerknob();
 8002ce4:	f7ff ffb0 	bl	8002c48 <leftinnerknob>
}
 8002ce8:	e020      	b.n	8002d2c <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == LEFT_B1_Pin) { // LEFT 1
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d102      	bne.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x3a>
		leftinnerknob();
 8002cf0:	f7ff ffaa 	bl	8002c48 <leftinnerknob>
}
 8002cf4:	e01a      	b.n	8002d2c <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_A1_Pin) { // RIGHT 1
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cfc:	d102      	bne.n	8002d04 <HAL_GPIO_EXTI_Callback+0x48>
		read_encoder2();
 8002cfe:	f7ff fc03 	bl	8002508 <read_encoder2>
}
 8002d02:	e013      	b.n	8002d2c <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_B1_Pin) { // RIGHT 1
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d0a:	d102      	bne.n	8002d12 <HAL_GPIO_EXTI_Callback+0x56>
		read_encoder2();
 8002d0c:	f7ff fbfc 	bl	8002508 <read_encoder2>
}
 8002d10:	e00c      	b.n	8002d2c <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_A2_Pin) { // RIGHT 2
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d18:	d102      	bne.n	8002d20 <HAL_GPIO_EXTI_Callback+0x64>
		read_encoder();
 8002d1a:	f7ff fb7d 	bl	8002418 <read_encoder>
}
 8002d1e:	e005      	b.n	8002d2c <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_B2_Pin) { // RIGHT 2
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d26:	d101      	bne.n	8002d2c <HAL_GPIO_EXTI_Callback+0x70>
		read_encoder();
 8002d28:	f7ff fb76 	bl	8002418 <read_encoder>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <checksum>:

void checksum(const char* str, char* result) {
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
    unsigned int sum = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
    const char* ptr = str;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60bb      	str	r3, [r7, #8]

    if (*ptr != '\0') {
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00c      	beq.n	8002d68 <checksum+0x34>
        ptr += 6;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3306      	adds	r3, #6
 8002d52:	60bb      	str	r3, [r7, #8]
    }

    while (*ptr != '\0') {
 8002d54:	e008      	b.n	8002d68 <checksum+0x34>
        sum += *ptr;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
        ptr++;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	3301      	adds	r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
    while (*ptr != '\0') {
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f2      	bne.n	8002d56 <checksum+0x22>
    }

    sum &= 0xFF;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	60fb      	str	r3, [r7, #12]

    result[0] = ((sum >> 4) & 0xF) + 0x30;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3330      	adds	r3, #48	@ 0x30
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	701a      	strb	r2, [r3, #0]
    result[1] = (sum & 0xF) + 0x30;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	3230      	adds	r2, #48	@ 0x30
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

    result[2] = '\0';
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	3302      	adds	r3, #2
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <concatTwoChars>:

void concatTwoChars(char* base, const char* woo) {
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
    while (*base) { // Move to the end of the base string
 8002dba:	e002      	b.n	8002dc2 <concatTwoChars+0x12>
        base++;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	607b      	str	r3, [r7, #4]
    while (*base) { // Move to the end of the base string
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f8      	bne.n	8002dbc <concatTwoChars+0xc>
    }
    while (*woo) { // Copy the characters from toAdd
 8002dca:	e009      	b.n	8002de0 <concatTwoChars+0x30>
        *base = *woo;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	701a      	strb	r2, [r3, #0]
        base++;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
        woo++;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	603b      	str	r3, [r7, #0]
    while (*woo) { // Copy the characters from toAdd
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f1      	bne.n	8002dcc <concatTwoChars+0x1c>
    }
    *base = '\0'; // Null terminate the resulting string
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <LCDPrint>:

void LCDPrint(char* str) { //TODO Should be done needs testing, issues should not be here though
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b09c      	sub	sp, #112	@ 0x70
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	if (str[0] == 'x') {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b78      	cmp	r3, #120	@ 0x78
 8002e06:	d109      	bne.n	8002e1c <LCDPrint+0x24>
	  glcd_on();
 8002e08:	f7fe f882 	bl	8000f10 <glcd_on>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	2102      	movs	r1, #2
 8002e10:	489e      	ldr	r0, [pc, #632]	@ (800308c <LCDPrint+0x294>)
 8002e12:	f004 f8dc 	bl	8006fce <HAL_GPIO_WritePin>
	  glcd_clear_all();
 8002e16:	f7fe fcd5 	bl	80017c4 <glcd_clear_all>
	  }
	  else {
		glcd_puts("N", 118, 3);
	  }
	}
}
 8002e1a:	e2d0      	b.n	80033be <LCDPrint+0x5c6>
	else if (str[0] == 'o') {
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b6f      	cmp	r3, #111	@ 0x6f
 8002e22:	d107      	bne.n	8002e34 <LCDPrint+0x3c>
      glcd_off();
 8002e24:	f7fe f887 	bl	8000f36 <glcd_off>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4897      	ldr	r0, [pc, #604]	@ (800308c <LCDPrint+0x294>)
 8002e2e:	f004 f8ce 	bl	8006fce <HAL_GPIO_WritePin>
}
 8002e32:	e2c4      	b.n	80033be <LCDPrint+0x5c6>
	else if (str[0] == 'f') { //frequency
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b66      	cmp	r3, #102	@ 0x66
 8002e3a:	f040 8091 	bne.w	8002f60 <LCDPrint+0x168>
	  sprintf(str0, "%0.3f", freq);
 8002e3e:	4b94      	ldr	r3, [pc, #592]	@ (8003090 <LCDPrint+0x298>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd fb60 	bl	8000508 <__aeabi_f2d>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8002e50:	4990      	ldr	r1, [pc, #576]	@ (8003094 <LCDPrint+0x29c>)
 8002e52:	f008 fa4d 	bl	800b2f0 <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 8002e56:	4b90      	ldr	r3, [pc, #576]	@ (8003098 <LCDPrint+0x2a0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fb54 	bl	8000508 <__aeabi_f2d>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8002e68:	498a      	ldr	r1, [pc, #552]	@ (8003094 <LCDPrint+0x29c>)
 8002e6a:	f008 fa41 	bl	800b2f0 <siprintf>
	  glcd_puts("A", 2, 2);
 8002e6e:	2202      	movs	r2, #2
 8002e70:	2102      	movs	r1, #2
 8002e72:	488a      	ldr	r0, [pc, #552]	@ (800309c <LCDPrint+0x2a4>)
 8002e74:	f7fe fa1e 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 8002e78:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	210b      	movs	r1, #11
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe fa17 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 2);
 8002e86:	2202      	movs	r2, #2
 8002e88:	2122      	movs	r1, #34	@ 0x22
 8002e8a:	4885      	ldr	r0, [pc, #532]	@ (80030a0 <LCDPrint+0x2a8>)
 8002e8c:	f7fe fa12 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 8002e90:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e94:	3304      	adds	r3, #4
 8002e96:	2202      	movs	r2, #2
 8002e98:	2126      	movs	r1, #38	@ 0x26
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fa0a 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	213e      	movs	r1, #62	@ 0x3e
 8002ea4:	487f      	ldr	r0, [pc, #508]	@ (80030a4 <LCDPrint+0x2ac>)
 8002ea6:	f7fe fa05 	bl	80012b4 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 8002eaa:	2202      	movs	r2, #2
 8002eac:	2142      	movs	r1, #66	@ 0x42
 8002eae:	487e      	ldr	r0, [pc, #504]	@ (80030a8 <LCDPrint+0x2b0>)
 8002eb0:	f7fe fa00 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 8002eb4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002eb8:	2202      	movs	r2, #2
 8002eba:	214b      	movs	r1, #75	@ 0x4b
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe f9f9 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 2);
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	2162      	movs	r1, #98	@ 0x62
 8002ec6:	4876      	ldr	r0, [pc, #472]	@ (80030a0 <LCDPrint+0x2a8>)
 8002ec8:	f7fe f9f4 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 8002ecc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	2166      	movs	r1, #102	@ 0x66
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe f9ec 	bl	80012b4 <glcd_puts>
	  glcd_clearline(3);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f7fe fc25 	bl	800172c <glcd_clearline>
	  sprintf(str2, "%d", vol);
 8002ee2:	4b72      	ldr	r3, [pc, #456]	@ (80030ac <LCDPrint+0x2b4>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002eea:	4971      	ldr	r1, [pc, #452]	@ (80030b0 <LCDPrint+0x2b8>)
 8002eec:	4618      	mov	r0, r3
 8002eee:	f008 f9ff 	bl	800b2f0 <siprintf>
	  sprintf(str3, "%03d", obs);
 8002ef2:	4b70      	ldr	r3, [pc, #448]	@ (80030b4 <LCDPrint+0x2bc>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002efa:	496f      	ldr	r1, [pc, #444]	@ (80030b8 <LCDPrint+0x2c0>)
 8002efc:	4618      	mov	r0, r3
 8002efe:	f008 f9f7 	bl	800b2f0 <siprintf>
	  glcd_puts("Vol ", 2, 5);
 8002f02:	2205      	movs	r2, #5
 8002f04:	2102      	movs	r1, #2
 8002f06:	486d      	ldr	r0, [pc, #436]	@ (80030bc <LCDPrint+0x2c4>)
 8002f08:	f7fe f9d4 	bl	80012b4 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 8002f0c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002f10:	2205      	movs	r2, #5
 8002f12:	211e      	movs	r1, #30
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe f9cd 	bl	80012b4 <glcd_puts>
	  if (vol < 10) {
 8002f1a:	4b64      	ldr	r3, [pc, #400]	@ (80030ac <LCDPrint+0x2b4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b09      	cmp	r3, #9
 8002f20:	dc04      	bgt.n	8002f2c <LCDPrint+0x134>
	  	 glcd_puts(" ", 38, 5);
 8002f22:	2205      	movs	r2, #5
 8002f24:	2126      	movs	r1, #38	@ 0x26
 8002f26:	485f      	ldr	r0, [pc, #380]	@ (80030a4 <LCDPrint+0x2ac>)
 8002f28:	f7fe f9c4 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 8002f2c:	2205      	movs	r2, #5
 8002f2e:	2138      	movs	r1, #56	@ 0x38
 8002f30:	485c      	ldr	r0, [pc, #368]	@ (80030a4 <LCDPrint+0x2ac>)
 8002f32:	f7fe f9bf 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 8002f36:	2205      	movs	r2, #5
 8002f38:	213e      	movs	r1, #62	@ 0x3e
 8002f3a:	485a      	ldr	r0, [pc, #360]	@ (80030a4 <LCDPrint+0x2ac>)
 8002f3c:	f7fe f9ba 	bl	80012b4 <glcd_puts>
	  glcd_puts("OBS ", 66, 5);
 8002f40:	2205      	movs	r2, #5
 8002f42:	2142      	movs	r1, #66	@ 0x42
 8002f44:	485e      	ldr	r0, [pc, #376]	@ (80030c0 <LCDPrint+0x2c8>)
 8002f46:	f7fe f9b5 	bl	80012b4 <glcd_puts>
	  glcd_puts(str3, 94, 5);
 8002f4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f4e:	2205      	movs	r2, #5
 8002f50:	215e      	movs	r1, #94	@ 0x5e
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe f9ae 	bl	80012b4 <glcd_puts>
	  glcd_clearline(6);
 8002f58:	2006      	movs	r0, #6
 8002f5a:	f7fe fbe7 	bl	800172c <glcd_clearline>
}
 8002f5e:	e22e      	b.n	80033be <LCDPrint+0x5c6>
	else if (str[0] == 'v') {
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b76      	cmp	r3, #118	@ 0x76
 8002f66:	f040 80ad 	bne.w	80030c4 <LCDPrint+0x2cc>
	  sprintf(str0, "%0.3f", freq);
 8002f6a:	4b49      	ldr	r3, [pc, #292]	@ (8003090 <LCDPrint+0x298>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd faca 	bl	8000508 <__aeabi_f2d>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002f7c:	4945      	ldr	r1, [pc, #276]	@ (8003094 <LCDPrint+0x29c>)
 8002f7e:	f008 f9b7 	bl	800b2f0 <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 8002f82:	4b45      	ldr	r3, [pc, #276]	@ (8003098 <LCDPrint+0x2a0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fabe 	bl	8000508 <__aeabi_f2d>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002f94:	493f      	ldr	r1, [pc, #252]	@ (8003094 <LCDPrint+0x29c>)
 8002f96:	f008 f9ab 	bl	800b2f0 <siprintf>
	  glcd_puts("A", 2, 2);
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	483f      	ldr	r0, [pc, #252]	@ (800309c <LCDPrint+0x2a4>)
 8002fa0:	f7fe f988 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 8002fa4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fa8:	2202      	movs	r2, #2
 8002faa:	210b      	movs	r1, #11
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fe f981 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 2);
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	2122      	movs	r1, #34	@ 0x22
 8002fb6:	483a      	ldr	r0, [pc, #232]	@ (80030a0 <LCDPrint+0x2a8>)
 8002fb8:	f7fe f97c 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 8002fbc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	2126      	movs	r1, #38	@ 0x26
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe f974 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 8002fcc:	2202      	movs	r2, #2
 8002fce:	213e      	movs	r1, #62	@ 0x3e
 8002fd0:	4834      	ldr	r0, [pc, #208]	@ (80030a4 <LCDPrint+0x2ac>)
 8002fd2:	f7fe f96f 	bl	80012b4 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	2142      	movs	r1, #66	@ 0x42
 8002fda:	4833      	ldr	r0, [pc, #204]	@ (80030a8 <LCDPrint+0x2b0>)
 8002fdc:	f7fe f96a 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 8002fe0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	214b      	movs	r1, #75	@ 0x4b
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe f963 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 2);
 8002fee:	2202      	movs	r2, #2
 8002ff0:	2162      	movs	r1, #98	@ 0x62
 8002ff2:	482b      	ldr	r0, [pc, #172]	@ (80030a0 <LCDPrint+0x2a8>)
 8002ff4:	f7fe f95e 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 8002ff8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2202      	movs	r2, #2
 8003000:	2166      	movs	r1, #102	@ 0x66
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe f956 	bl	80012b4 <glcd_puts>
	  glcd_clearline(3);
 8003008:	2003      	movs	r0, #3
 800300a:	f7fe fb8f 	bl	800172c <glcd_clearline>
	  sprintf(str2, "%d", vol);
 800300e:	4b27      	ldr	r3, [pc, #156]	@ (80030ac <LCDPrint+0x2b4>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003016:	4926      	ldr	r1, [pc, #152]	@ (80030b0 <LCDPrint+0x2b8>)
 8003018:	4618      	mov	r0, r3
 800301a:	f008 f969 	bl	800b2f0 <siprintf>
	  sprintf(str3, "%03d", obs);
 800301e:	4b25      	ldr	r3, [pc, #148]	@ (80030b4 <LCDPrint+0x2bc>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003026:	4924      	ldr	r1, [pc, #144]	@ (80030b8 <LCDPrint+0x2c0>)
 8003028:	4618      	mov	r0, r3
 800302a:	f008 f961 	bl	800b2f0 <siprintf>
	  glcd_puts("Vol ", 2, 5);
 800302e:	2205      	movs	r2, #5
 8003030:	2102      	movs	r1, #2
 8003032:	4822      	ldr	r0, [pc, #136]	@ (80030bc <LCDPrint+0x2c4>)
 8003034:	f7fe f93e 	bl	80012b4 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 8003038:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800303c:	2205      	movs	r2, #5
 800303e:	211e      	movs	r1, #30
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe f937 	bl	80012b4 <glcd_puts>
	  if (vol < 10) {
 8003046:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <LCDPrint+0x2b4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b09      	cmp	r3, #9
 800304c:	dc04      	bgt.n	8003058 <LCDPrint+0x260>
		 glcd_puts(" ", 38, 5);
 800304e:	2205      	movs	r2, #5
 8003050:	2126      	movs	r1, #38	@ 0x26
 8003052:	4814      	ldr	r0, [pc, #80]	@ (80030a4 <LCDPrint+0x2ac>)
 8003054:	f7fe f92e 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 8003058:	2205      	movs	r2, #5
 800305a:	2138      	movs	r1, #56	@ 0x38
 800305c:	4811      	ldr	r0, [pc, #68]	@ (80030a4 <LCDPrint+0x2ac>)
 800305e:	f7fe f929 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 8003062:	2205      	movs	r2, #5
 8003064:	213e      	movs	r1, #62	@ 0x3e
 8003066:	480f      	ldr	r0, [pc, #60]	@ (80030a4 <LCDPrint+0x2ac>)
 8003068:	f7fe f924 	bl	80012b4 <glcd_puts>
	  glcd_puts("OBS ", 66, 5);
 800306c:	2205      	movs	r2, #5
 800306e:	2142      	movs	r1, #66	@ 0x42
 8003070:	4813      	ldr	r0, [pc, #76]	@ (80030c0 <LCDPrint+0x2c8>)
 8003072:	f7fe f91f 	bl	80012b4 <glcd_puts>
	  glcd_puts(str3, 94, 5);
 8003076:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800307a:	2205      	movs	r2, #5
 800307c:	215e      	movs	r1, #94	@ 0x5e
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe f918 	bl	80012b4 <glcd_puts>
	  glcd_clearline(6);
 8003084:	2006      	movs	r0, #6
 8003086:	f7fe fb51 	bl	800172c <glcd_clearline>
}
 800308a:	e198      	b.n	80033be <LCDPrint+0x5c6>
 800308c:	40010800 	.word	0x40010800
 8003090:	20000698 	.word	0x20000698
 8003094:	0800d66c 	.word	0x0800d66c
 8003098:	20000004 	.word	0x20000004
 800309c:	0800d674 	.word	0x0800d674
 80030a0:	0800d678 	.word	0x0800d678
 80030a4:	0800d67c 	.word	0x0800d67c
 80030a8:	0800d680 	.word	0x0800d680
 80030ac:	200006a4 	.word	0x200006a4
 80030b0:	0800d684 	.word	0x0800d684
 80030b4:	200006fc 	.word	0x200006fc
 80030b8:	0800d688 	.word	0x0800d688
 80030bc:	0800d690 	.word	0x0800d690
 80030c0:	0800d698 	.word	0x0800d698
	else if (str[0] == 'b') {
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b62      	cmp	r3, #98	@ 0x62
 80030ca:	f040 8091 	bne.w	80031f0 <LCDPrint+0x3f8>
	  sprintf(str0, "%0.3f", freq);
 80030ce:	4bbe      	ldr	r3, [pc, #760]	@ (80033c8 <LCDPrint+0x5d0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fa18 	bl	8000508 <__aeabi_f2d>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	f107 0020 	add.w	r0, r7, #32
 80030e0:	49ba      	ldr	r1, [pc, #744]	@ (80033cc <LCDPrint+0x5d4>)
 80030e2:	f008 f905 	bl	800b2f0 <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 80030e6:	4bba      	ldr	r3, [pc, #744]	@ (80033d0 <LCDPrint+0x5d8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fa0c 	bl	8000508 <__aeabi_f2d>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	f107 0018 	add.w	r0, r7, #24
 80030f8:	49b4      	ldr	r1, [pc, #720]	@ (80033cc <LCDPrint+0x5d4>)
 80030fa:	f008 f8f9 	bl	800b2f0 <siprintf>
	  glcd_puts("A", 2, 2);
 80030fe:	2202      	movs	r2, #2
 8003100:	2102      	movs	r1, #2
 8003102:	48b4      	ldr	r0, [pc, #720]	@ (80033d4 <LCDPrint+0x5dc>)
 8003104:	f7fe f8d6 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 8003108:	f107 0320 	add.w	r3, r7, #32
 800310c:	2202      	movs	r2, #2
 800310e:	210b      	movs	r1, #11
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe f8cf 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 2);
 8003116:	2202      	movs	r2, #2
 8003118:	2122      	movs	r1, #34	@ 0x22
 800311a:	48af      	ldr	r0, [pc, #700]	@ (80033d8 <LCDPrint+0x5e0>)
 800311c:	f7fe f8ca 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 8003120:	f107 0320 	add.w	r3, r7, #32
 8003124:	3304      	adds	r3, #4
 8003126:	2202      	movs	r2, #2
 8003128:	2126      	movs	r1, #38	@ 0x26
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe f8c2 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 8003130:	2202      	movs	r2, #2
 8003132:	213e      	movs	r1, #62	@ 0x3e
 8003134:	48a9      	ldr	r0, [pc, #676]	@ (80033dc <LCDPrint+0x5e4>)
 8003136:	f7fe f8bd 	bl	80012b4 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 800313a:	2202      	movs	r2, #2
 800313c:	2142      	movs	r1, #66	@ 0x42
 800313e:	48a8      	ldr	r0, [pc, #672]	@ (80033e0 <LCDPrint+0x5e8>)
 8003140:	f7fe f8b8 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 8003144:	f107 0318 	add.w	r3, r7, #24
 8003148:	2202      	movs	r2, #2
 800314a:	214b      	movs	r1, #75	@ 0x4b
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe f8b1 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 2);
 8003152:	2202      	movs	r2, #2
 8003154:	2162      	movs	r1, #98	@ 0x62
 8003156:	48a0      	ldr	r0, [pc, #640]	@ (80033d8 <LCDPrint+0x5e0>)
 8003158:	f7fe f8ac 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 800315c:	f107 0318 	add.w	r3, r7, #24
 8003160:	3304      	adds	r3, #4
 8003162:	2202      	movs	r2, #2
 8003164:	2166      	movs	r1, #102	@ 0x66
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe f8a4 	bl	80012b4 <glcd_puts>
	  glcd_clearline(3);
 800316c:	2003      	movs	r0, #3
 800316e:	f7fe fadd 	bl	800172c <glcd_clearline>
	  sprintf(str2, "%d", vol);
 8003172:	4b9c      	ldr	r3, [pc, #624]	@ (80033e4 <LCDPrint+0x5ec>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	f107 0310 	add.w	r3, r7, #16
 800317a:	499b      	ldr	r1, [pc, #620]	@ (80033e8 <LCDPrint+0x5f0>)
 800317c:	4618      	mov	r0, r3
 800317e:	f008 f8b7 	bl	800b2f0 <siprintf>
	  sprintf(str3, "%03d", obs);
 8003182:	4b9a      	ldr	r3, [pc, #616]	@ (80033ec <LCDPrint+0x5f4>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	4999      	ldr	r1, [pc, #612]	@ (80033f0 <LCDPrint+0x5f8>)
 800318c:	4618      	mov	r0, r3
 800318e:	f008 f8af 	bl	800b2f0 <siprintf>
	  glcd_puts("Vol ", 2, 5);
 8003192:	2205      	movs	r2, #5
 8003194:	2102      	movs	r1, #2
 8003196:	4897      	ldr	r0, [pc, #604]	@ (80033f4 <LCDPrint+0x5fc>)
 8003198:	f7fe f88c 	bl	80012b4 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 800319c:	f107 0310 	add.w	r3, r7, #16
 80031a0:	2205      	movs	r2, #5
 80031a2:	211e      	movs	r1, #30
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe f885 	bl	80012b4 <glcd_puts>
	  if (vol < 10) {
 80031aa:	4b8e      	ldr	r3, [pc, #568]	@ (80033e4 <LCDPrint+0x5ec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b09      	cmp	r3, #9
 80031b0:	dc04      	bgt.n	80031bc <LCDPrint+0x3c4>
		 glcd_puts(" ", 38, 5);
 80031b2:	2205      	movs	r2, #5
 80031b4:	2126      	movs	r1, #38	@ 0x26
 80031b6:	4889      	ldr	r0, [pc, #548]	@ (80033dc <LCDPrint+0x5e4>)
 80031b8:	f7fe f87c 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 80031bc:	2205      	movs	r2, #5
 80031be:	2138      	movs	r1, #56	@ 0x38
 80031c0:	4886      	ldr	r0, [pc, #536]	@ (80033dc <LCDPrint+0x5e4>)
 80031c2:	f7fe f877 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 80031c6:	2205      	movs	r2, #5
 80031c8:	213e      	movs	r1, #62	@ 0x3e
 80031ca:	4884      	ldr	r0, [pc, #528]	@ (80033dc <LCDPrint+0x5e4>)
 80031cc:	f7fe f872 	bl	80012b4 <glcd_puts>
	  glcd_puts("OBS ", 66, 5);
 80031d0:	2205      	movs	r2, #5
 80031d2:	2142      	movs	r1, #66	@ 0x42
 80031d4:	4888      	ldr	r0, [pc, #544]	@ (80033f8 <LCDPrint+0x600>)
 80031d6:	f7fe f86d 	bl	80012b4 <glcd_puts>
	  glcd_puts(str3, 94, 5);
 80031da:	f107 0308 	add.w	r3, r7, #8
 80031de:	2205      	movs	r2, #5
 80031e0:	215e      	movs	r1, #94	@ 0x5e
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe f866 	bl	80012b4 <glcd_puts>
	  glcd_clearline(6);
 80031e8:	2006      	movs	r0, #6
 80031ea:	f7fe fa9f 	bl	800172c <glcd_clearline>
}
 80031ee:	e0e6      	b.n	80033be <LCDPrint+0x5c6>
	else if (str[0] == 'k'){ // scroll
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b6b      	cmp	r3, #107	@ 0x6b
 80031f6:	d124      	bne.n	8003242 <LCDPrint+0x44a>
	  glcd_clear_all();
 80031f8:	f7fe fae4 	bl	80017c4 <glcd_clear_all>
	  glcd_puts(str+1, 2, 3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3301      	adds	r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	2102      	movs	r1, #2
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe f855 	bl	80012b4 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 800320a:	2203      	movs	r2, #3
 800320c:	213a      	movs	r1, #58	@ 0x3a
 800320e:	487b      	ldr	r0, [pc, #492]	@ (80033fc <LCDPrint+0x604>)
 8003210:	f7fe f850 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+8, 75, 3);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3308      	adds	r3, #8
 8003218:	2203      	movs	r2, #3
 800321a:	214b      	movs	r1, #75	@ 0x4b
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe f849 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 3);
 8003222:	2203      	movs	r2, #3
 8003224:	2162      	movs	r1, #98	@ 0x62
 8003226:	486c      	ldr	r0, [pc, #432]	@ (80033d8 <LCDPrint+0x5e0>)
 8003228:	f7fe f844 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+12, 102, 3);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	330c      	adds	r3, #12
 8003230:	2203      	movs	r2, #3
 8003232:	2166      	movs	r1, #102	@ 0x66
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe f83d 	bl	80012b4 <glcd_puts>
	  glcd_clearline(4);
 800323a:	2004      	movs	r0, #4
 800323c:	f7fe fa76 	bl	800172c <glcd_clearline>
}
 8003240:	e0bd      	b.n	80033be <LCDPrint+0x5c6>
	else if (str[0] == 'n') {// no mem
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b6e      	cmp	r3, #110	@ 0x6e
 8003248:	d109      	bne.n	800325e <LCDPrint+0x466>
	  glcd_clear_all();
 800324a:	f7fe fabb 	bl	80017c4 <glcd_clear_all>
	  str = "NO MEM";
 800324e:	4b6c      	ldr	r3, [pc, #432]	@ (8003400 <LCDPrint+0x608>)
 8003250:	607b      	str	r3, [r7, #4]
	  glcd_puts(str, 66, 3);
 8003252:	2203      	movs	r2, #3
 8003254:	2142      	movs	r1, #66	@ 0x42
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe f82c 	bl	80012b4 <glcd_puts>
}
 800325c:	e0af      	b.n	80033be <LCDPrint+0x5c6>
	else if (str[0] == 'e') {
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b65      	cmp	r3, #101	@ 0x65
 8003264:	d131      	bne.n	80032ca <LCDPrint+0x4d2>
	  glcd_clear_all();
 8003266:	f7fe faad 	bl	80017c4 <glcd_clear_all>
	  if (str[1] == ':') {
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3301      	adds	r3, #1
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b3a      	cmp	r3, #58	@ 0x3a
 8003272:	d107      	bne.n	8003284 <LCDPrint+0x48c>
		str = "EMPTY";
 8003274:	4b63      	ldr	r3, [pc, #396]	@ (8003404 <LCDPrint+0x60c>)
 8003276:	607b      	str	r3, [r7, #4]
		glcd_puts(str, 66, 3);
 8003278:	2203      	movs	r2, #3
 800327a:	2142      	movs	r1, #66	@ 0x42
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fe f819 	bl	80012b4 <glcd_puts>
}
 8003282:	e09c      	b.n	80033be <LCDPrint+0x5c6>
		glcd_puts(str+1, 2, 3);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3301      	adds	r3, #1
 8003288:	2203      	movs	r2, #3
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe f811 	bl	80012b4 <glcd_puts>
		glcd_puts("   ", 58, 3);
 8003292:	2203      	movs	r2, #3
 8003294:	213a      	movs	r1, #58	@ 0x3a
 8003296:	4859      	ldr	r0, [pc, #356]	@ (80033fc <LCDPrint+0x604>)
 8003298:	f7fe f80c 	bl	80012b4 <glcd_puts>
		glcd_puts(str+8, 75, 3);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3308      	adds	r3, #8
 80032a0:	2203      	movs	r2, #3
 80032a2:	214b      	movs	r1, #75	@ 0x4b
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe f805 	bl	80012b4 <glcd_puts>
		glcd_puts(".", 98, 3);
 80032aa:	2203      	movs	r2, #3
 80032ac:	2162      	movs	r1, #98	@ 0x62
 80032ae:	484a      	ldr	r0, [pc, #296]	@ (80033d8 <LCDPrint+0x5e0>)
 80032b0:	f7fe f800 	bl	80012b4 <glcd_puts>
		glcd_puts(str+12, 102, 3);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	330c      	adds	r3, #12
 80032b8:	2203      	movs	r2, #3
 80032ba:	2166      	movs	r1, #102	@ 0x66
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd fff9 	bl	80012b4 <glcd_puts>
		glcd_clearline(4);
 80032c2:	2004      	movs	r0, #4
 80032c4:	f7fe fa32 	bl	800172c <glcd_clearline>
}
 80032c8:	e079      	b.n	80033be <LCDPrint+0x5c6>
	else if (str[0] == 'a') {
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b61      	cmp	r3, #97	@ 0x61
 80032d0:	d14b      	bne.n	800336a <LCDPrint+0x572>
      glcd_clear_all();
 80032d2:	f7fe fa77 	bl	80017c4 <glcd_clear_all>
	  glcd_puts(str+2, 2, 3);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3302      	adds	r3, #2
 80032da:	2203      	movs	r2, #3
 80032dc:	2102      	movs	r1, #2
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd ffe8 	bl	80012b4 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 80032e4:	2203      	movs	r2, #3
 80032e6:	213a      	movs	r1, #58	@ 0x3a
 80032e8:	4844      	ldr	r0, [pc, #272]	@ (80033fc <LCDPrint+0x604>)
 80032ea:	f7fd ffe3 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+9, 75, 3);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3309      	adds	r3, #9
 80032f2:	2203      	movs	r2, #3
 80032f4:	214b      	movs	r1, #75	@ 0x4b
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd ffdc 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 3);
 80032fc:	2203      	movs	r2, #3
 80032fe:	2162      	movs	r1, #98	@ 0x62
 8003300:	4835      	ldr	r0, [pc, #212]	@ (80033d8 <LCDPrint+0x5e0>)
 8003302:	f7fd ffd7 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+13, 102, 3);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	330d      	adds	r3, #13
 800330a:	2203      	movs	r2, #3
 800330c:	2166      	movs	r1, #102	@ 0x66
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd ffd0 	bl	80012b4 <glcd_puts>
	  glcd_clearline(4);
 8003314:	2004      	movs	r0, #4
 8003316:	f7fe fa09 	bl	800172c <glcd_clearline>
	  int cursor = str[1] - '0';
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3301      	adds	r3, #1
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	3b30      	subs	r3, #48	@ 0x30
 8003322:	66bb      	str	r3, [r7, #104]	@ 0x68
	  if (cursor == 7) {
 8003324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003326:	2b07      	cmp	r3, #7
 8003328:	d105      	bne.n	8003336 <LCDPrint+0x53e>
		glcd_puts("___", 75, 4);
 800332a:	2204      	movs	r2, #4
 800332c:	214b      	movs	r1, #75	@ 0x4b
 800332e:	4836      	ldr	r0, [pc, #216]	@ (8003408 <LCDPrint+0x610>)
 8003330:	f7fd ffc0 	bl	80012b4 <glcd_puts>
 8003334:	e007      	b.n	8003346 <LCDPrint+0x54e>
	  else if (cursor == 8) {
 8003336:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003338:	2b08      	cmp	r3, #8
 800333a:	d104      	bne.n	8003346 <LCDPrint+0x54e>
		glcd_puts("___", 102, 4);
 800333c:	2204      	movs	r2, #4
 800333e:	2166      	movs	r1, #102	@ 0x66
 8003340:	4831      	ldr	r0, [pc, #196]	@ (8003408 <LCDPrint+0x610>)
 8003342:	f7fd ffb7 	bl	80012b4 <glcd_puts>
	  if (cursor >= 0 && cursor <= 6) {
 8003346:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003348:	2b00      	cmp	r3, #0
 800334a:	db38      	blt.n	80033be <LCDPrint+0x5c6>
 800334c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800334e:	2b06      	cmp	r3, #6
 8003350:	dc35      	bgt.n	80033be <LCDPrint+0x5c6>
		glcd_puts("_", 2+(cursor*8), 4);
 8003352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003354:	b2db      	uxtb	r3, r3
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	3302      	adds	r3, #2
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2204      	movs	r2, #4
 8003360:	4619      	mov	r1, r3
 8003362:	482a      	ldr	r0, [pc, #168]	@ (800340c <LCDPrint+0x614>)
 8003364:	f7fd ffa6 	bl	80012b4 <glcd_puts>
}
 8003368:	e029      	b.n	80033be <LCDPrint+0x5c6>
	else if (str[0] == 'd') {
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b64      	cmp	r3, #100	@ 0x64
 8003370:	d125      	bne.n	80033be <LCDPrint+0x5c6>
	  glcd_clear_all();
 8003372:	f7fe fa27 	bl	80017c4 <glcd_clear_all>
	  glcd_puts(str+2, 2, 3);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3302      	adds	r3, #2
 800337a:	2203      	movs	r2, #3
 800337c:	2102      	movs	r1, #2
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd ff98 	bl	80012b4 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 8003384:	2203      	movs	r2, #3
 8003386:	213a      	movs	r1, #58	@ 0x3a
 8003388:	481c      	ldr	r0, [pc, #112]	@ (80033fc <LCDPrint+0x604>)
 800338a:	f7fd ff93 	bl	80012b4 <glcd_puts>
	  glcd_puts("Delete ", 66, 3);
 800338e:	2203      	movs	r2, #3
 8003390:	2142      	movs	r1, #66	@ 0x42
 8003392:	481f      	ldr	r0, [pc, #124]	@ (8003410 <LCDPrint+0x618>)
 8003394:	f7fd ff8e 	bl	80012b4 <glcd_puts>
	  int yn = str[1] - '0';
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3301      	adds	r3, #1
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	3b30      	subs	r3, #48	@ 0x30
 80033a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  if (yn == 1) {
 80033a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <LCDPrint+0x5bc>
		glcd_puts("Y", 118, 3);
 80033a8:	2203      	movs	r2, #3
 80033aa:	2176      	movs	r1, #118	@ 0x76
 80033ac:	4819      	ldr	r0, [pc, #100]	@ (8003414 <LCDPrint+0x61c>)
 80033ae:	f7fd ff81 	bl	80012b4 <glcd_puts>
}
 80033b2:	e004      	b.n	80033be <LCDPrint+0x5c6>
		glcd_puts("N", 118, 3);
 80033b4:	2203      	movs	r2, #3
 80033b6:	2176      	movs	r1, #118	@ 0x76
 80033b8:	4817      	ldr	r0, [pc, #92]	@ (8003418 <LCDPrint+0x620>)
 80033ba:	f7fd ff7b 	bl	80012b4 <glcd_puts>
}
 80033be:	bf00      	nop
 80033c0:	3770      	adds	r7, #112	@ 0x70
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000698 	.word	0x20000698
 80033cc:	0800d66c 	.word	0x0800d66c
 80033d0:	20000004 	.word	0x20000004
 80033d4:	0800d674 	.word	0x0800d674
 80033d8:	0800d678 	.word	0x0800d678
 80033dc:	0800d67c 	.word	0x0800d67c
 80033e0:	0800d680 	.word	0x0800d680
 80033e4:	200006a4 	.word	0x200006a4
 80033e8:	0800d684 	.word	0x0800d684
 80033ec:	200006fc 	.word	0x200006fc
 80033f0:	0800d688 	.word	0x0800d688
 80033f4:	0800d690 	.word	0x0800d690
 80033f8:	0800d698 	.word	0x0800d698
 80033fc:	0800d6a0 	.word	0x0800d6a0
 8003400:	0800d6a4 	.word	0x0800d6a4
 8003404:	0800d6ac 	.word	0x0800d6ac
 8003408:	0800d6b4 	.word	0x0800d6b4
 800340c:	0800d6b8 	.word	0x0800d6b8
 8003410:	0800d6bc 	.word	0x0800d6bc
 8003414:	0800d6c4 	.word	0x0800d6c4
 8003418:	0800d6c8 	.word	0x0800d6c8

0800341c <Sender>:

void Sender(const char * str, int mode) { //TODO
 800341c:	b580      	push	{r7, lr}
 800341e:	b092      	sub	sp, #72	@ 0x48
 8003420:	af02      	add	r7, sp, #8
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
    char crlf[] = {'\r','\n', 0};
 8003426:	4a69      	ldr	r2, [pc, #420]	@ (80035cc <Sender+0x1b0>)
 8003428:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	4611      	mov	r1, r2
 8003430:	8019      	strh	r1, [r3, #0]
 8003432:	3302      	adds	r3, #2
 8003434:	0c12      	lsrs	r2, r2, #16
 8003436:	701a      	strb	r2, [r3, #0]
    uint8_t str2[25]; // Array to hold the constructed string in ASCII

    memset(str2, 0, sizeof(str2)); // Initialize the array with zeros
 8003438:	f107 031c 	add.w	r3, r7, #28
 800343c:	2219      	movs	r2, #25
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f007 ffb8 	bl	800b3b6 <memset>

    if (mode == 0) {
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d12d      	bne.n	80034a8 <Sender+0x8c>
        char m = str[0];
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        char k = str[1];
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3301      	adds	r3, #1
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        snprintf((char*)str2, sizeof(str2), "$PMRRV27%c%cN", m, k);
 800345e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8003462:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003466:	f107 001c 	add.w	r0, r7, #28
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	4a58      	ldr	r2, [pc, #352]	@ (80035d0 <Sender+0x1b4>)
 8003470:	2119      	movs	r1, #25
 8003472:	f007 ff09 	bl	800b288 <sniprintf>
        char end2[3];
        checksum((char*)str2, end2);
 8003476:	f107 0218 	add.w	r2, r7, #24
 800347a:	f107 031c 	add.w	r3, r7, #28
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fc57 	bl	8002d34 <checksum>
        concatTwoChars((char*)str2, end2);
 8003486:	f107 0218 	add.w	r2, r7, #24
 800348a:	f107 031c 	add.w	r3, r7, #28
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fc8d 	bl	8002db0 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8003496:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800349a:	f107 031c 	add.w	r3, r7, #28
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fc85 	bl	8002db0 <concatTwoChars>
 80034a6:	e07b      	b.n	80035a0 <Sender+0x184>
    } else if (mode == 1) {
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d12d      	bne.n	800350a <Sender+0xee>
        char m = str[0];
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        char k = str[1];
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3301      	adds	r3, #1
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        snprintf((char*)str2, sizeof(str2), "$PMRRV28%c%cN", m, k);
 80034c0:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80034c4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80034c8:	f107 001c 	add.w	r0, r7, #28
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	4613      	mov	r3, r2
 80034d0:	4a40      	ldr	r2, [pc, #256]	@ (80035d4 <Sender+0x1b8>)
 80034d2:	2119      	movs	r1, #25
 80034d4:	f007 fed8 	bl	800b288 <sniprintf>
        char end3[3];
        checksum((char*)str2, end3);
 80034d8:	f107 0214 	add.w	r2, r7, #20
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fc26 	bl	8002d34 <checksum>
        concatTwoChars((char*)str2, end3);
 80034e8:	f107 0214 	add.w	r2, r7, #20
 80034ec:	f107 031c 	add.w	r3, r7, #28
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fc5c 	bl	8002db0 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 80034f8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80034fc:	f107 031c 	add.w	r3, r7, #28
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fc54 	bl	8002db0 <concatTwoChars>
 8003508:	e04a      	b.n	80035a0 <Sender+0x184>
    } else if (mode == 2) {
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d124      	bne.n	800355a <Sender+0x13e>
        char v = str[0];
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        snprintf((char*)str2, sizeof(str2), "$PMRRV73%c", v);
 8003518:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800351c:	f107 001c 	add.w	r0, r7, #28
 8003520:	4a2d      	ldr	r2, [pc, #180]	@ (80035d8 <Sender+0x1bc>)
 8003522:	2119      	movs	r1, #25
 8003524:	f007 feb0 	bl	800b288 <sniprintf>
        char end4[3];
        checksum((char*)str2, end4);
 8003528:	f107 0210 	add.w	r2, r7, #16
 800352c:	f107 031c 	add.w	r3, r7, #28
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fbfe 	bl	8002d34 <checksum>
        concatTwoChars((char*)str2, end4);
 8003538:	f107 0210 	add.w	r2, r7, #16
 800353c:	f107 031c 	add.w	r3, r7, #28
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fc34 	bl	8002db0 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8003548:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fc2c 	bl	8002db0 <concatTwoChars>
 8003558:	e022      	b.n	80035a0 <Sender+0x184>
    } else if (mode == 3) {
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d11f      	bne.n	80035a0 <Sender+0x184>
        snprintf((char*)str2, sizeof(str2), "$PMRRV34%03d", obs);
 8003560:	4b1e      	ldr	r3, [pc, #120]	@ (80035dc <Sender+0x1c0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f107 001c 	add.w	r0, r7, #28
 8003568:	4a1d      	ldr	r2, [pc, #116]	@ (80035e0 <Sender+0x1c4>)
 800356a:	2119      	movs	r1, #25
 800356c:	f007 fe8c 	bl	800b288 <sniprintf>
        char end5[3];
        checksum((char*)str2, end5);
 8003570:	f107 020c 	add.w	r2, r7, #12
 8003574:	f107 031c 	add.w	r3, r7, #28
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fbda 	bl	8002d34 <checksum>
        concatTwoChars((char*)str2, end5);
 8003580:	f107 020c 	add.w	r2, r7, #12
 8003584:	f107 031c 	add.w	r3, r7, #28
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fc10 	bl	8002db0 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8003590:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003594:	f107 031c 	add.w	r3, r7, #28
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fc08 	bl	8002db0 <concatTwoChars>
    }

    HAL_UART_Transmit(&huart4, str2, strlen((char*)str2), 500);
 80035a0:	f107 031c 	add.w	r3, r7, #28
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc fe43 	bl	8000230 <strlen>
 80035aa:	4603      	mov	r3, r0
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	f107 011c 	add.w	r1, r7, #28
 80035b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80035b6:	480b      	ldr	r0, [pc, #44]	@ (80035e4 <Sender+0x1c8>)
 80035b8:	f005 f9e6 	bl	8008988 <HAL_UART_Transmit>
    HAL_Delay(100);
 80035bc:	2064      	movs	r0, #100	@ 0x64
 80035be:	f003 f915 	bl	80067ec <HAL_Delay>
}
 80035c2:	bf00      	nop
 80035c4:	3740      	adds	r7, #64	@ 0x40
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	0800d708 	.word	0x0800d708
 80035d0:	0800d6cc 	.word	0x0800d6cc
 80035d4:	0800d6dc 	.word	0x0800d6dc
 80035d8:	0800d6ec 	.word	0x0800d6ec
 80035dc:	200006fc 	.word	0x200006fc
 80035e0:	0800d6f8 	.word	0x0800d6f8
 80035e4:	2000050c 	.word	0x2000050c

080035e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80035e8:	b5b0      	push	{r4, r5, r7, lr}
 80035ea:	b0dc      	sub	sp, #368	@ 0x170
 80035ec:	af04      	add	r7, sp, #16
 80035ee:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80035f2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80035f6:	6018      	str	r0, [r3, #0]
		static unsigned long last = 0;
	    static float freq_last = 108.000;
		static float sfreq_last = 108.000;
		static int vol_last = 0;
		static int obs_last = 0;
		freq = MHz + (.001 * KHz);
 80035f8:	4b77      	ldr	r3, [pc, #476]	@ (80037d8 <StartDefaultTask+0x1f0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fc ff71 	bl	80004e4 <__aeabi_i2d>
 8003602:	4604      	mov	r4, r0
 8003604:	460d      	mov	r5, r1
 8003606:	4b75      	ldr	r3, [pc, #468]	@ (80037dc <StartDefaultTask+0x1f4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc ff6a 	bl	80004e4 <__aeabi_i2d>
 8003610:	a36f      	add	r3, pc, #444	@ (adr r3, 80037d0 <StartDefaultTask+0x1e8>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	f7fc ffcf 	bl	80005b8 <__aeabi_dmul>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4620      	mov	r0, r4
 8003620:	4629      	mov	r1, r5
 8003622:	f7fc fe13 	bl	800024c <__adddf3>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f7fd fa9b 	bl	8000b68 <__aeabi_d2f>
 8003632:	4603      	mov	r3, r0
 8003634:	4a6a      	ldr	r2, [pc, #424]	@ (80037e0 <StartDefaultTask+0x1f8>)
 8003636:	6013      	str	r3, [r2, #0]
		Standby = SM + (.001 * SK);
 8003638:	4b6a      	ldr	r3, [pc, #424]	@ (80037e4 <StartDefaultTask+0x1fc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7fc ff51 	bl	80004e4 <__aeabi_i2d>
 8003642:	4604      	mov	r4, r0
 8003644:	460d      	mov	r5, r1
 8003646:	4b68      	ldr	r3, [pc, #416]	@ (80037e8 <StartDefaultTask+0x200>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ff4a 	bl	80004e4 <__aeabi_i2d>
 8003650:	a35f      	add	r3, pc, #380	@ (adr r3, 80037d0 <StartDefaultTask+0x1e8>)
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f7fc ffaf 	bl	80005b8 <__aeabi_dmul>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4620      	mov	r0, r4
 8003660:	4629      	mov	r1, r5
 8003662:	f7fc fdf3 	bl	800024c <__adddf3>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	f7fd fa7b 	bl	8000b68 <__aeabi_d2f>
 8003672:	4603      	mov	r3, r0
 8003674:	4a5d      	ldr	r2, [pc, #372]	@ (80037ec <StartDefaultTask+0x204>)
 8003676:	6013      	str	r3, [r2, #0]
		if (millis() - last > 2000 && temp) { // if time between action > 2 send freq in NOTE: will need to add a check later as some actions cant be exited.
 8003678:	f7fe fb66 	bl	8001d48 <millis>
 800367c:	4602      	mov	r2, r0
 800367e:	4b5c      	ldr	r3, [pc, #368]	@ (80037f0 <StartDefaultTask+0x208>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003688:	d92b      	bls.n	80036e2 <StartDefaultTask+0xfa>
 800368a:	4b5a      	ldr	r3, [pc, #360]	@ (80037f4 <StartDefaultTask+0x20c>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d027      	beq.n	80036e2 <StartDefaultTask+0xfa>
	//	  Serial2.print("f");
	//	  printFloat2(freq,3);
	//	  printFloat2(Standby,3);
	//	  Serial2.println("");
		  sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8003692:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <StartDefaultTask+0x1f8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc ff36 	bl	8000508 <__aeabi_f2d>
 800369c:	4604      	mov	r4, r0
 800369e:	460d      	mov	r5, r1
 80036a0:	4b52      	ldr	r3, [pc, #328]	@ (80037ec <StartDefaultTask+0x204>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc ff2f 	bl	8000508 <__aeabi_f2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80036b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036b6:	e9cd 4500 	strd	r4, r5, [sp]
 80036ba:	2266      	movs	r2, #102	@ 0x66
 80036bc:	494e      	ldr	r1, [pc, #312]	@ (80037f8 <StartDefaultTask+0x210>)
 80036be:	f007 fe17 	bl	800b2f0 <siprintf>
		  LCDPrint(toPrint);
 80036c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fb96 	bl	8002df8 <LCDPrint>

		  freq_last = freq;
 80036cc:	4b44      	ldr	r3, [pc, #272]	@ (80037e0 <StartDefaultTask+0x1f8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a4a      	ldr	r2, [pc, #296]	@ (80037fc <StartDefaultTask+0x214>)
 80036d2:	6013      	str	r3, [r2, #0]
		  sfreq_last = Standby;
 80036d4:	4b45      	ldr	r3, [pc, #276]	@ (80037ec <StartDefaultTask+0x204>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a49      	ldr	r2, [pc, #292]	@ (8003800 <StartDefaultTask+0x218>)
 80036da:	6013      	str	r3, [r2, #0]
		  temp = false;
 80036dc:	4b45      	ldr	r3, [pc, #276]	@ (80037f4 <StartDefaultTask+0x20c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
		}

		bool both = false;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
		// Current time
		unsigned long currentTime = millis();
 80036e8:	f7fe fb2e 	bl	8001d48 <millis>
 80036ec:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

		// Read the button states
		bool currentA = HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0;
 80036f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036f4:	4843      	ldr	r0, [pc, #268]	@ (8003804 <StartDefaultTask+0x21c>)
 80036f6:	f003 fc53 	bl	8006fa0 <HAL_GPIO_ReadPin>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		bool currentB = HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0;
 8003708:	2101      	movs	r1, #1
 800370a:	483f      	ldr	r0, [pc, #252]	@ (8003808 <StartDefaultTask+0x220>)
 800370c:	f003 fc48 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

		while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 800371e:	e01a      	b.n	8003756 <StartDefaultTask+0x16e>
		  if (currentA) {
 8003720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <StartDefaultTask+0x156>
			if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 8003728:	2101      	movs	r1, #1
 800372a:	4837      	ldr	r0, [pc, #220]	@ (8003808 <StartDefaultTask+0x220>)
 800372c:	f003 fc38 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <StartDefaultTask+0x16e>
			  both = true;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
			  break;
 800373c:	e01b      	b.n	8003776 <StartDefaultTask+0x18e>
			}
		  }
		  else {
			if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0) {
 800373e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003742:	4830      	ldr	r0, [pc, #192]	@ (8003804 <StartDefaultTask+0x21c>)
 8003744:	f003 fc2c 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <StartDefaultTask+0x16e>
			  both = true;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
			  break;
 8003754:	e00f      	b.n	8003776 <StartDefaultTask+0x18e>
		while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 8003756:	f7fe faf7 	bl	8001d48 <millis>
 800375a:	4602      	mov	r2, r0
 800375c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b63      	cmp	r3, #99	@ 0x63
 8003764:	d807      	bhi.n	8003776 <StartDefaultTask+0x18e>
 8003766:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1d8      	bne.n	8003720 <StartDefaultTask+0x138>
 800376e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1d4      	bne.n	8003720 <StartDefaultTask+0x138>
			}
		  }
		}
		// Check if both buttons were pressed within the 50 ms window
		if (both) {
 8003776:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800377a:	2b00      	cmp	r3, #0
 800377c:	f001 81e2 	beq.w	8004b44 <StartDefaultTask+0x155c>
		  if (on) { // Enter edit mode TODO
 8003780:	4b22      	ldr	r3, [pc, #136]	@ (800380c <StartDefaultTask+0x224>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f001 8457 	beq.w	8005038 <StartDefaultTask+0x1a50>
			toDisplay();
 800378a:	f7fe f905 	bl	8001998 <toDisplay>
			edit = true;
 800378e:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <StartDefaultTask+0x228>)
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
			pause = true;
 8003794:	4b1f      	ldr	r3, [pc, #124]	@ (8003814 <StartDefaultTask+0x22c>)
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
			HAL_Delay(500);
 800379a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800379e:	f003 f825 	bl	80067ec <HAL_Delay>
			bool both = false;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e

			char str[8];
			if (dispCount == count) {
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <StartDefaultTask+0x230>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <StartDefaultTask+0x234>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <StartDefaultTask+0x1da>
			  str[0] = ':'; //EMPTY
 80037b4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80037b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037bc:	223a      	movs	r2, #58	@ 0x3a
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e056      	b.n	8003870 <StartDefaultTask+0x288>
			}
			else {
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80037c2:	2300      	movs	r3, #0
 80037c4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80037c8:	e048      	b.n	800385c <StartDefaultTask+0x274>
 80037ca:	bf00      	nop
 80037cc:	f3af 8000 	nop.w
 80037d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80037d4:	3f50624d 	.word	0x3f50624d
 80037d8:	20000000 	.word	0x20000000
 80037dc:	2000069c 	.word	0x2000069c
 80037e0:	20000698 	.word	0x20000698
 80037e4:	20000008 	.word	0x20000008
 80037e8:	200006a0 	.word	0x200006a0
 80037ec:	20000004 	.word	0x20000004
 80037f0:	20000724 	.word	0x20000724
 80037f4:	20000708 	.word	0x20000708
 80037f8:	0800d70c 	.word	0x0800d70c
 80037fc:	20000018 	.word	0x20000018
 8003800:	2000001c 	.word	0x2000001c
 8003804:	40011800 	.word	0x40011800
 8003808:	40011000 	.word	0x40011000
 800380c:	200006a9 	.word	0x200006a9
 8003810:	200006a8 	.word	0x200006a8
 8003814:	2000000c 	.word	0x2000000c
 8003818:	200006ec 	.word	0x200006ec
 800381c:	200006f0 	.word	0x200006f0
	//			str[i] = EEPROM.read(eepDisplay[dispCount] + i);
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8003820:	4bb1      	ldr	r3, [pc, #708]	@ (8003ae8 <StartDefaultTask+0x500>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4ab1      	ldr	r2, [pc, #708]	@ (8003aec <StartDefaultTask+0x504>)
 8003826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382a:	4619      	mov	r1, r3
 800382c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	2301      	movs	r3, #1
 8003834:	4aae      	ldr	r2, [pc, #696]	@ (8003af0 <StartDefaultTask+0x508>)
 8003836:	48af      	ldr	r0, [pc, #700]	@ (8003af4 <StartDefaultTask+0x50c>)
 8003838:	f002 fbb0 	bl	8005f9c <SPIF_ReadSector>
				str[i] = read[0];
 800383c:	4bac      	ldr	r3, [pc, #688]	@ (8003af0 <StartDefaultTask+0x508>)
 800383e:	7819      	ldrb	r1, [r3, #0]
 8003840:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8003844:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8003848:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800384c:	4413      	add	r3, r2
 800384e:	460a      	mov	r2, r1
 8003850:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003852:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003856:	3301      	adds	r3, #1
 8003858:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800385c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003860:	2b06      	cmp	r3, #6
 8003862:	dddd      	ble.n	8003820 <StartDefaultTask+0x238>
			  }
			  str[7] = 0;
 8003864:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8003868:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800386c:	2200      	movs	r2, #0
 800386e:	71da      	strb	r2, [r3, #7]
			}
	//		float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
			SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8003870:	4b9d      	ldr	r3, [pc, #628]	@ (8003ae8 <StartDefaultTask+0x500>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a9d      	ldr	r2, [pc, #628]	@ (8003aec <StartDefaultTask+0x504>)
 8003876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387a:	4619      	mov	r1, r3
 800387c:	2307      	movs	r3, #7
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	2301      	movs	r3, #1
 8003882:	4a9b      	ldr	r2, [pc, #620]	@ (8003af0 <StartDefaultTask+0x508>)
 8003884:	489b      	ldr	r0, [pc, #620]	@ (8003af4 <StartDefaultTask+0x50c>)
 8003886:	f002 fb89 	bl	8005f9c <SPIF_ReadSector>
			int val1 = read[0];
 800388a:	4b99      	ldr	r3, [pc, #612]	@ (8003af0 <StartDefaultTask+0x508>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
			SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8003892:	4b95      	ldr	r3, [pc, #596]	@ (8003ae8 <StartDefaultTask+0x500>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a95      	ldr	r2, [pc, #596]	@ (8003aec <StartDefaultTask+0x504>)
 8003898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389c:	4619      	mov	r1, r3
 800389e:	2308      	movs	r3, #8
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2301      	movs	r3, #1
 80038a4:	4a92      	ldr	r2, [pc, #584]	@ (8003af0 <StartDefaultTask+0x508>)
 80038a6:	4893      	ldr	r0, [pc, #588]	@ (8003af4 <StartDefaultTask+0x50c>)
 80038a8:	f002 fb78 	bl	8005f9c <SPIF_ReadSector>
			int val2 = read[0];
 80038ac:	4b90      	ldr	r3, [pc, #576]	@ (8003af0 <StartDefaultTask+0x508>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			float store = val1 + (.025 * val2);
 80038b4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80038b8:	f7fc fe14 	bl	80004e4 <__aeabi_i2d>
 80038bc:	4604      	mov	r4, r0
 80038be:	460d      	mov	r5, r1
 80038c0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80038c4:	f7fc fe0e 	bl	80004e4 <__aeabi_i2d>
 80038c8:	a385      	add	r3, pc, #532	@ (adr r3, 8003ae0 <StartDefaultTask+0x4f8>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f7fc fe73 	bl	80005b8 <__aeabi_dmul>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4620      	mov	r0, r4
 80038d8:	4629      	mov	r1, r5
 80038da:	f7fc fcb7 	bl	800024c <__adddf3>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	f7fd f93f 	bl	8000b68 <__aeabi_d2f>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

	//		Serial2.print("e");
	//		Serial2.print(str);
	//		printFloat2(store,3);
	//		Serial2.println("");
			sprintf(toPrint, "%c%s%0.3f", 'e', str, store);
 80038f0:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80038f4:	f7fc fe08 	bl	8000508 <__aeabi_f2d>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003900:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003904:	e9cd 2300 	strd	r2, r3, [sp]
 8003908:	460b      	mov	r3, r1
 800390a:	2265      	movs	r2, #101	@ 0x65
 800390c:	497a      	ldr	r1, [pc, #488]	@ (8003af8 <StartDefaultTask+0x510>)
 800390e:	f007 fcef 	bl	800b2f0 <siprintf>
			LCDPrint(toPrint);
 8003912:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fa6e 	bl	8002df8 <LCDPrint>

			while (true) {
			  // Current time
			  unsigned long currentTime = millis();
 800391c:	f7fe fa14 	bl	8001d48 <millis>
 8003920:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
			  static int lastDC = 0;
			  // Read the button states
			  bool currentA = HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0;
 8003924:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003928:	4874      	ldr	r0, [pc, #464]	@ (8003afc <StartDefaultTask+0x514>)
 800392a:	f003 fb39 	bl	8006fa0 <HAL_GPIO_ReadPin>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
			  bool currentB = HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0;
 800393c:	2101      	movs	r1, #1
 800393e:	4870      	ldr	r0, [pc, #448]	@ (8003b00 <StartDefaultTask+0x518>)
 8003940:	f003 fb2e 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

			  while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 8003952:	e01a      	b.n	800398a <StartDefaultTask+0x3a2>
				if (currentA) {
 8003954:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <StartDefaultTask+0x38a>
				  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 800395c:	2101      	movs	r1, #1
 800395e:	4868      	ldr	r0, [pc, #416]	@ (8003b00 <StartDefaultTask+0x518>)
 8003960:	f003 fb1e 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10f      	bne.n	800398a <StartDefaultTask+0x3a2>
					both = true;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
					break;
 8003970:	e01b      	b.n	80039aa <StartDefaultTask+0x3c2>
				  }
				}
				else {
				  if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0) {
 8003972:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003976:	4861      	ldr	r0, [pc, #388]	@ (8003afc <StartDefaultTask+0x514>)
 8003978:	f003 fb12 	bl	8006fa0 <HAL_GPIO_ReadPin>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <StartDefaultTask+0x3a2>
					both = true;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
					break;
 8003988:	e00f      	b.n	80039aa <StartDefaultTask+0x3c2>
			  while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 800398a:	f7fe f9dd 	bl	8001d48 <millis>
 800398e:	4602      	mov	r2, r0
 8003990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b63      	cmp	r3, #99	@ 0x63
 8003998:	d807      	bhi.n	80039aa <StartDefaultTask+0x3c2>
 800399a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1d8      	bne.n	8003954 <StartDefaultTask+0x36c>
 80039a2:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1d4      	bne.n	8003954 <StartDefaultTask+0x36c>
				  }
				}
			  }

			  if (both) {
 80039aa:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f041 806c 	bne.w	8004a8c <StartDefaultTask+0x14a4>
				break;
			  }
			  else if (currentB) { //select to edit
 80039b4:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8690 	beq.w	80046de <StartDefaultTask+0x10f6>
				cursor = 0;
 80039be:	4b51      	ldr	r3, [pc, #324]	@ (8003b04 <StartDefaultTask+0x51c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
				if (dispCount == count && count != 16) { // EMPTY add new one
 80039c4:	4b48      	ldr	r3, [pc, #288]	@ (8003ae8 <StartDefaultTask+0x500>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003b08 <StartDefaultTask+0x520>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	f040 82e4 	bne.w	8003f9a <StartDefaultTask+0x9b2>
 80039d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003b08 <StartDefaultTask+0x520>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	f000 82df 	beq.w	8003f9a <StartDefaultTask+0x9b2>
				  add = true;
 80039dc:	4b4b      	ldr	r3, [pc, #300]	@ (8003b0c <StartDefaultTask+0x524>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
				  int dM = 108;
 80039e2:	236c      	movs	r3, #108	@ 0x6c
 80039e4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
				  int dK = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				  char dN[8] = {' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,0};
 80039ee:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80039f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039f6:	4a46      	ldr	r2, [pc, #280]	@ (8003b10 <StartDefaultTask+0x528>)
 80039f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039fc:	e883 0003 	stmia.w	r3, {r0, r1}
				  HAL_Delay(100);
 8003a00:	2064      	movs	r0, #100	@ 0x64
 8003a02:	f002 fef3 	bl	80067ec <HAL_Delay>

				  if (cursor < 7) { // moved to a char
 8003a06:	4b3f      	ldr	r3, [pc, #252]	@ (8003b04 <StartDefaultTask+0x51c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	dc2b      	bgt.n	8003a66 <StartDefaultTask+0x47e>
					if (dN[cursor] == ' ') {
 8003a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b04 <StartDefaultTask+0x51c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003a16:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d103      	bne.n	8003a28 <StartDefaultTask+0x440>
					  charcount = 0;
 8003a20:	4b3c      	ldr	r3, [pc, #240]	@ (8003b14 <StartDefaultTask+0x52c>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e032      	b.n	8003a8e <StartDefaultTask+0x4a6>
					}
					else if (dN[cursor] < ':') {
 8003a28:	4b36      	ldr	r3, [pc, #216]	@ (8003b04 <StartDefaultTask+0x51c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003a30:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003a34:	5cd3      	ldrb	r3, [r2, r3]
 8003a36:	2b39      	cmp	r3, #57	@ 0x39
 8003a38:	d80a      	bhi.n	8003a50 <StartDefaultTask+0x468>
					  charcount = dN[cursor] - '/';
 8003a3a:	4b32      	ldr	r3, [pc, #200]	@ (8003b04 <StartDefaultTask+0x51c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003a42:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003a46:	5cd3      	ldrb	r3, [r2, r3]
 8003a48:	3b2f      	subs	r3, #47	@ 0x2f
 8003a4a:	4a32      	ldr	r2, [pc, #200]	@ (8003b14 <StartDefaultTask+0x52c>)
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e01e      	b.n	8003a8e <StartDefaultTask+0x4a6>
					}
					else {
					  charcount = dN[cursor] - '6';
 8003a50:	4b2c      	ldr	r3, [pc, #176]	@ (8003b04 <StartDefaultTask+0x51c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003a58:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003a5c:	5cd3      	ldrb	r3, [r2, r3]
 8003a5e:	3b36      	subs	r3, #54	@ 0x36
 8003a60:	4a2c      	ldr	r2, [pc, #176]	@ (8003b14 <StartDefaultTask+0x52c>)
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	e013      	b.n	8003a8e <StartDefaultTask+0x4a6>
					}
				  }
				  else if (cursor == 7) {
 8003a66:	4b27      	ldr	r3, [pc, #156]	@ (8003b04 <StartDefaultTask+0x51c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b07      	cmp	r3, #7
 8003a6c:	d105      	bne.n	8003a7a <StartDefaultTask+0x492>
					charcount = dM - 108;
 8003a6e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003a72:	3b6c      	subs	r3, #108	@ 0x6c
 8003a74:	4a27      	ldr	r2, [pc, #156]	@ (8003b14 <StartDefaultTask+0x52c>)
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	e009      	b.n	8003a8e <StartDefaultTask+0x4a6>
				  }
				  else {
					charcount = dK / 50;
 8003a7a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003a7e:	4a26      	ldr	r2, [pc, #152]	@ (8003b18 <StartDefaultTask+0x530>)
 8003a80:	fb82 1203 	smull	r1, r2, r2, r3
 8003a84:	1112      	asrs	r2, r2, #4
 8003a86:	17db      	asrs	r3, r3, #31
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	4a22      	ldr	r2, [pc, #136]	@ (8003b14 <StartDefaultTask+0x52c>)
 8003a8c:	6013      	str	r3, [r2, #0]
				  }

				  if (cursor < 7) { //
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b04 <StartDefaultTask+0x51c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	dc4f      	bgt.n	8003b36 <StartDefaultTask+0x54e>
					if (charcount == 0) {
 8003a96:	4b1f      	ldr	r3, [pc, #124]	@ (8003b14 <StartDefaultTask+0x52c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10c      	bne.n	8003ab8 <StartDefaultTask+0x4d0>
					  dN[cursor] = (char)(charcount+32);
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <StartDefaultTask+0x52c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b17      	ldr	r3, [pc, #92]	@ (8003b04 <StartDefaultTask+0x51c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3220      	adds	r2, #32
 8003aaa:	b2d1      	uxtb	r1, r2
 8003aac:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003ab0:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003ab4:	54d1      	strb	r1, [r2, r3]
 8003ab6:	e05d      	b.n	8003b74 <StartDefaultTask+0x58c>
					}
					else if (charcount < 11) {
 8003ab8:	4b16      	ldr	r3, [pc, #88]	@ (8003b14 <StartDefaultTask+0x52c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b0a      	cmp	r3, #10
 8003abe:	dc2d      	bgt.n	8003b1c <StartDefaultTask+0x534>
					  dN[cursor] = (char)(charcount+47);
 8003ac0:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <StartDefaultTask+0x52c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b04 <StartDefaultTask+0x51c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	322f      	adds	r2, #47	@ 0x2f
 8003acc:	b2d1      	uxtb	r1, r2
 8003ace:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003ad2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003ad6:	54d1      	strb	r1, [r2, r3]
 8003ad8:	e04c      	b.n	8003b74 <StartDefaultTask+0x58c>
 8003ada:	bf00      	nop
 8003adc:	f3af 8000 	nop.w
 8003ae0:	9999999a 	.word	0x9999999a
 8003ae4:	3f999999 	.word	0x3f999999
 8003ae8:	200006ec 	.word	0x200006ec
 8003aec:	200006ac 	.word	0x200006ac
 8003af0:	2000070c 	.word	0x2000070c
 8003af4:	20000678 	.word	0x20000678
 8003af8:	0800d71c 	.word	0x0800d71c
 8003afc:	40011800 	.word	0x40011800
 8003b00:	40011000 	.word	0x40011000
 8003b04:	200006f8 	.word	0x200006f8
 8003b08:	200006f0 	.word	0x200006f0
 8003b0c:	200006f5 	.word	0x200006f5
 8003b10:	0800d764 	.word	0x0800d764
 8003b14:	20000700 	.word	0x20000700
 8003b18:	51eb851f 	.word	0x51eb851f
					}
					else {
					  dN[cursor] = (char)(charcount+54);
 8003b1c:	4b9e      	ldr	r3, [pc, #632]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4b9e      	ldr	r3, [pc, #632]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3236      	adds	r2, #54	@ 0x36
 8003b28:	b2d1      	uxtb	r1, r2
 8003b2a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003b2e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003b32:	54d1      	strb	r1, [r2, r3]
 8003b34:	e01e      	b.n	8003b74 <StartDefaultTask+0x58c>
					}
				  }
				  else if (cursor == 7) { //mhz
 8003b36:	4b99      	ldr	r3, [pc, #612]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b07      	cmp	r3, #7
 8003b3c:	d10c      	bne.n	8003b58 <StartDefaultTask+0x570>
					if (charcount > 9) {
 8003b3e:	4b96      	ldr	r3, [pc, #600]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b09      	cmp	r3, #9
 8003b44:	dd02      	ble.n	8003b4c <StartDefaultTask+0x564>
					  charcount = 9;
 8003b46:	4b94      	ldr	r3, [pc, #592]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003b48:	2209      	movs	r2, #9
 8003b4a:	601a      	str	r2, [r3, #0]
					}
					dM = 108 + charcount;
 8003b4c:	4b92      	ldr	r3, [pc, #584]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	336c      	adds	r3, #108	@ 0x6c
 8003b52:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003b56:	e00d      	b.n	8003b74 <StartDefaultTask+0x58c>
				  }
				  else {
				    if (charcount > 19) {
 8003b58:	4b8f      	ldr	r3, [pc, #572]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b13      	cmp	r3, #19
 8003b5e:	dd02      	ble.n	8003b66 <StartDefaultTask+0x57e>
					  charcount = 19;
 8003b60:	4b8d      	ldr	r3, [pc, #564]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003b62:	2213      	movs	r2, #19
 8003b64:	601a      	str	r2, [r3, #0]
				    }
					dK = 50 * charcount;
 8003b66:	4b8c      	ldr	r3, [pc, #560]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2232      	movs	r2, #50	@ 0x32
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
 8003b70:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				  }

				  float pfreq = dM + (dK * .001);
 8003b74:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8003b78:	f7fc fcb4 	bl	80004e4 <__aeabi_i2d>
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	460d      	mov	r5, r1
 8003b80:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8003b84:	f7fc fcae 	bl	80004e4 <__aeabi_i2d>
 8003b88:	a381      	add	r3, pc, #516	@ (adr r3, 8003d90 <StartDefaultTask+0x7a8>)
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f7fc fd13 	bl	80005b8 <__aeabi_dmul>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4620      	mov	r0, r4
 8003b98:	4629      	mov	r1, r5
 8003b9a:	f7fc fb57 	bl	800024c <__adddf3>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f7fc ffdf 	bl	8000b68 <__aeabi_d2f>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	//			  Serial2.print("a");
	//			  Serial2.print(cursor);
	//			  Serial2.print(dN);
	//			  printFloat2(pfreq,3);
	//			  Serial2.println("");
				  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8003bb0:	4b7a      	ldr	r3, [pc, #488]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003bb2:	681c      	ldr	r4, [r3, #0]
 8003bb4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8003bb8:	f7fc fca6 	bl	8000508 <__aeabi_f2d>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003bc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bc8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	4623      	mov	r3, r4
 8003bd0:	2261      	movs	r2, #97	@ 0x61
 8003bd2:	4973      	ldr	r1, [pc, #460]	@ (8003da0 <StartDefaultTask+0x7b8>)
 8003bd4:	f007 fb8c 	bl	800b2f0 <siprintf>
				  LCDPrint(toPrint);
 8003bd8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff f90b 	bl	8002df8 <LCDPrint>

				  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press TODO might need to swap highs and lows
 8003be2:	e12c      	b.n	8003e3e <StartDefaultTask+0x856>
					static int last_cursor = 0;
					static int last_cc = 0;
					if (last_cc != charcount) { // change the actual values of dN dM and dK, incrementing values
 8003be4:	4b6f      	ldr	r3, [pc, #444]	@ (8003da4 <StartDefaultTask+0x7bc>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b6b      	ldr	r3, [pc, #428]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	f000 808e 	beq.w	8003d0e <StartDefaultTask+0x726>
					  if (cursor < 7) { //
 8003bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	dc2e      	bgt.n	8003c58 <StartDefaultTask+0x670>
						if (charcount == 0) {
 8003bfa:	4b67      	ldr	r3, [pc, #412]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10c      	bne.n	8003c1c <StartDefaultTask+0x634>
						  dN[cursor] = (char)(charcount+32);
 8003c02:	4b65      	ldr	r3, [pc, #404]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	4b64      	ldr	r3, [pc, #400]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3220      	adds	r2, #32
 8003c0e:	b2d1      	uxtb	r1, r2
 8003c10:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003c14:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003c18:	54d1      	strb	r1, [r2, r3]
 8003c1a:	e03c      	b.n	8003c96 <StartDefaultTask+0x6ae>
						}
						else if (charcount < 11) {
 8003c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b0a      	cmp	r3, #10
 8003c22:	dc0c      	bgt.n	8003c3e <StartDefaultTask+0x656>
						  dN[cursor] = (char)(charcount+47);
 8003c24:	4b5c      	ldr	r3, [pc, #368]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	322f      	adds	r2, #47	@ 0x2f
 8003c30:	b2d1      	uxtb	r1, r2
 8003c32:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003c36:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003c3a:	54d1      	strb	r1, [r2, r3]
 8003c3c:	e02b      	b.n	8003c96 <StartDefaultTask+0x6ae>
						}
						else {
						  dN[cursor] = (char)(charcount+54);
 8003c3e:	4b56      	ldr	r3, [pc, #344]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	4b55      	ldr	r3, [pc, #340]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3236      	adds	r2, #54	@ 0x36
 8003c4a:	b2d1      	uxtb	r1, r2
 8003c4c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003c50:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003c54:	54d1      	strb	r1, [r2, r3]
 8003c56:	e01e      	b.n	8003c96 <StartDefaultTask+0x6ae>
						}
					  }
					  else if (cursor == 7) { //mhz
 8003c58:	4b50      	ldr	r3, [pc, #320]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b07      	cmp	r3, #7
 8003c5e:	d10c      	bne.n	8003c7a <StartDefaultTask+0x692>
						if (charcount > 9) {
 8003c60:	4b4d      	ldr	r3, [pc, #308]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b09      	cmp	r3, #9
 8003c66:	dd02      	ble.n	8003c6e <StartDefaultTask+0x686>
						  charcount = 9;
 8003c68:	4b4b      	ldr	r3, [pc, #300]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003c6a:	2209      	movs	r2, #9
 8003c6c:	601a      	str	r2, [r3, #0]
						}
						dM = 108 + charcount;
 8003c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	336c      	adds	r3, #108	@ 0x6c
 8003c74:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003c78:	e00d      	b.n	8003c96 <StartDefaultTask+0x6ae>
					  }
					  else {
		                if (charcount > 19) {
 8003c7a:	4b47      	ldr	r3, [pc, #284]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b13      	cmp	r3, #19
 8003c80:	dd02      	ble.n	8003c88 <StartDefaultTask+0x6a0>
		                  charcount = 19;
 8003c82:	4b45      	ldr	r3, [pc, #276]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003c84:	2213      	movs	r2, #19
 8003c86:	601a      	str	r2, [r3, #0]
		                }
						dK = 50 * charcount;
 8003c88:	4b43      	ldr	r3, [pc, #268]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2232      	movs	r2, #50	@ 0x32
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
	//				  Serial2.print("a");
	//				  Serial2.print(cursor);
	//				  Serial2.print(dN);
	//				  printFloat2(pfreq,3);
	//				  Serial2.println("");
					  float pfreq = dM + (dK * .001);
 8003c96:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8003c9a:	f7fc fc23 	bl	80004e4 <__aeabi_i2d>
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	460d      	mov	r5, r1
 8003ca2:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8003ca6:	f7fc fc1d 	bl	80004e4 <__aeabi_i2d>
 8003caa:	a339      	add	r3, pc, #228	@ (adr r3, 8003d90 <StartDefaultTask+0x7a8>)
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	f7fc fc82 	bl	80005b8 <__aeabi_dmul>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4620      	mov	r0, r4
 8003cba:	4629      	mov	r1, r5
 8003cbc:	f7fc fac6 	bl	800024c <__adddf3>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f7fc ff4e 	bl	8000b68 <__aeabi_d2f>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
					  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8003cd2:	4b32      	ldr	r3, [pc, #200]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003cd4:	681c      	ldr	r4, [r3, #0]
 8003cd6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8003cda:	f7fc fc15 	bl	8000508 <__aeabi_f2d>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003ce6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	4623      	mov	r3, r4
 8003cf2:	2261      	movs	r2, #97	@ 0x61
 8003cf4:	492a      	ldr	r1, [pc, #168]	@ (8003da0 <StartDefaultTask+0x7b8>)
 8003cf6:	f007 fafb 	bl	800b2f0 <siprintf>
					  LCDPrint(toPrint);
 8003cfa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff f87a 	bl	8002df8 <LCDPrint>
					  last_cc = charcount;
 8003d04:	4b24      	ldr	r3, [pc, #144]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a26      	ldr	r2, [pc, #152]	@ (8003da4 <StartDefaultTask+0x7bc>)
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	e097      	b.n	8003e3e <StartDefaultTask+0x856>
					} ///////// case 1
					else if (last_cursor != cursor) { // change the value of charcount based on where we are
 8003d0e:	4b26      	ldr	r3, [pc, #152]	@ (8003da8 <StartDefaultTask+0x7c0>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4b22      	ldr	r3, [pc, #136]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	f000 8091 	beq.w	8003e3e <StartDefaultTask+0x856>
					  if (cursor < 7) { // moved to a char
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	dc2b      	bgt.n	8003d7c <StartDefaultTask+0x794>
						if (dN[cursor] == ' ') {
 8003d24:	4b1d      	ldr	r3, [pc, #116]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003d2c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003d30:	5cd3      	ldrb	r3, [r2, r3]
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d103      	bne.n	8003d3e <StartDefaultTask+0x756>
						  charcount = 0;
 8003d36:	4b18      	ldr	r3, [pc, #96]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e040      	b.n	8003dc0 <StartDefaultTask+0x7d8>
						}
						else if (dN[cursor] < ':') {
 8003d3e:	4b17      	ldr	r3, [pc, #92]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003d46:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003d4a:	5cd3      	ldrb	r3, [r2, r3]
 8003d4c:	2b39      	cmp	r3, #57	@ 0x39
 8003d4e:	d80a      	bhi.n	8003d66 <StartDefaultTask+0x77e>
						  charcount = dN[cursor] - '/';
 8003d50:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003d58:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003d5c:	5cd3      	ldrb	r3, [r2, r3]
 8003d5e:	3b2f      	subs	r3, #47	@ 0x2f
 8003d60:	4a0d      	ldr	r2, [pc, #52]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e02c      	b.n	8003dc0 <StartDefaultTask+0x7d8>
						}
						else {
						  charcount = dN[cursor] - '6';
 8003d66:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003d6e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003d72:	5cd3      	ldrb	r3, [r2, r3]
 8003d74:	3b36      	subs	r3, #54	@ 0x36
 8003d76:	4a08      	ldr	r2, [pc, #32]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e021      	b.n	8003dc0 <StartDefaultTask+0x7d8>
						}
					  }
					  else if (cursor == 7) {
 8003d7c:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <StartDefaultTask+0x7b4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	d113      	bne.n	8003dac <StartDefaultTask+0x7c4>
						charcount = dM - 108;
 8003d84:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003d88:	3b6c      	subs	r3, #108	@ 0x6c
 8003d8a:	4a03      	ldr	r2, [pc, #12]	@ (8003d98 <StartDefaultTask+0x7b0>)
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e017      	b.n	8003dc0 <StartDefaultTask+0x7d8>
 8003d90:	d2f1a9fc 	.word	0xd2f1a9fc
 8003d94:	3f50624d 	.word	0x3f50624d
 8003d98:	20000700 	.word	0x20000700
 8003d9c:	200006f8 	.word	0x200006f8
 8003da0:	0800d728 	.word	0x0800d728
 8003da4:	20000728 	.word	0x20000728
 8003da8:	2000072c 	.word	0x2000072c
					  }
					  else {
						charcount = dK / 50;
 8003dac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003db0:	4abf      	ldr	r2, [pc, #764]	@ (80040b0 <StartDefaultTask+0xac8>)
 8003db2:	fb82 1203 	smull	r1, r2, r2, r3
 8003db6:	1112      	asrs	r2, r2, #4
 8003db8:	17db      	asrs	r3, r3, #31
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	4abd      	ldr	r2, [pc, #756]	@ (80040b4 <StartDefaultTask+0xacc>)
 8003dbe:	6013      	str	r3, [r2, #0]
	//				  Serial2.print("a");
	//				  Serial2.print(cursor);
	//				  Serial2.print(dN);
	//				  printFloat2(pfreq,3);
	//				  Serial2.println("");
					  float pfreq = dM + (dK * .001);
 8003dc0:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8003dc4:	f7fc fb8e 	bl	80004e4 <__aeabi_i2d>
 8003dc8:	4604      	mov	r4, r0
 8003dca:	460d      	mov	r5, r1
 8003dcc:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8003dd0:	f7fc fb88 	bl	80004e4 <__aeabi_i2d>
 8003dd4:	a3b2      	add	r3, pc, #712	@ (adr r3, 80040a0 <StartDefaultTask+0xab8>)
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f7fc fbed 	bl	80005b8 <__aeabi_dmul>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4620      	mov	r0, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7fc fa31 	bl	800024c <__adddf3>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4610      	mov	r0, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	f7fc feb9 	bl	8000b68 <__aeabi_d2f>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8003dfc:	4bae      	ldr	r3, [pc, #696]	@ (80040b8 <StartDefaultTask+0xad0>)
 8003dfe:	681c      	ldr	r4, [r3, #0]
 8003e00:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8003e04:	f7fc fb80 	bl	8000508 <__aeabi_f2d>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003e10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e14:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	2261      	movs	r2, #97	@ 0x61
 8003e1e:	49a7      	ldr	r1, [pc, #668]	@ (80040bc <StartDefaultTask+0xad4>)
 8003e20:	f007 fa66 	bl	800b2f0 <siprintf>
					  LCDPrint(toPrint);
 8003e24:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe ffe5 	bl	8002df8 <LCDPrint>
					  last_cc = charcount;
 8003e2e:	4ba1      	ldr	r3, [pc, #644]	@ (80040b4 <StartDefaultTask+0xacc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4aa3      	ldr	r2, [pc, #652]	@ (80040c0 <StartDefaultTask+0xad8>)
 8003e34:	6013      	str	r3, [r2, #0]
					  last_cursor = cursor;
 8003e36:	4ba0      	ldr	r3, [pc, #640]	@ (80040b8 <StartDefaultTask+0xad0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4aa2      	ldr	r2, [pc, #648]	@ (80040c4 <StartDefaultTask+0xadc>)
 8003e3c:	6013      	str	r3, [r2, #0]
				  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press TODO might need to swap highs and lows
 8003e3e:	2101      	movs	r1, #1
 8003e40:	48a1      	ldr	r0, [pc, #644]	@ (80040c8 <StartDefaultTask+0xae0>)
 8003e42:	f003 f8ad 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	f43f aecb 	beq.w	8003be4 <StartDefaultTask+0x5fc>
					} ///////// case 2
				  }
				  //Some functionality to add dN,dM,and dK to the eeprom
				  toAdd(dN,dM,dK);
 8003e4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003e52:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8003e56:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd fdde 	bl	8001a1c <toAdd>
				  HAL_Delay(500);
 8003e60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e64:	f002 fcc2 	bl	80067ec <HAL_Delay>
				  add = false;
 8003e68:	4b98      	ldr	r3, [pc, #608]	@ (80040cc <StartDefaultTask+0xae4>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
				  pause = false;
 8003e6e:	4b98      	ldr	r3, [pc, #608]	@ (80040d0 <StartDefaultTask+0xae8>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
				  toDisplay();
 8003e74:	f7fd fd90 	bl	8001998 <toDisplay>

				  char str[8];
				  if (dispCount == count) {
 8003e78:	4b96      	ldr	r3, [pc, #600]	@ (80040d4 <StartDefaultTask+0xaec>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b96      	ldr	r3, [pc, #600]	@ (80040d8 <StartDefaultTask+0xaf0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d106      	bne.n	8003e92 <StartDefaultTask+0x8aa>
					str[0] = ':'; //EMPTY
 8003e84:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8003e88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e8c:	223a      	movs	r2, #58	@ 0x3a
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e02b      	b.n	8003eea <StartDefaultTask+0x902>
				  }
				  else {
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003e92:	2300      	movs	r3, #0
 8003e94:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003e98:	e01d      	b.n	8003ed6 <StartDefaultTask+0x8ee>
	//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
					  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8003e9a:	4b8e      	ldr	r3, [pc, #568]	@ (80040d4 <StartDefaultTask+0xaec>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a8f      	ldr	r2, [pc, #572]	@ (80040dc <StartDefaultTask+0xaf4>)
 8003ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2301      	movs	r3, #1
 8003eae:	4a8c      	ldr	r2, [pc, #560]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8003eb0:	488c      	ldr	r0, [pc, #560]	@ (80040e4 <StartDefaultTask+0xafc>)
 8003eb2:	f002 f873 	bl	8005f9c <SPIF_ReadSector>
					  str[i] = read[0];
 8003eb6:	4b8a      	ldr	r3, [pc, #552]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8003eb8:	7819      	ldrb	r1, [r3, #0]
 8003eba:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8003ebe:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8003ec2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ec6:	4413      	add	r3, r2
 8003ec8:	460a      	mov	r2, r1
 8003eca:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003ecc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	dddd      	ble.n	8003e9a <StartDefaultTask+0x8b2>
					}
					str[7] = 0;
 8003ede:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8003ee2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	71da      	strb	r2, [r3, #7]
				  }
	//			  float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8003eea:	4b7a      	ldr	r3, [pc, #488]	@ (80040d4 <StartDefaultTask+0xaec>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7b      	ldr	r2, [pc, #492]	@ (80040dc <StartDefaultTask+0xaf4>)
 8003ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	2307      	movs	r3, #7
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	2301      	movs	r3, #1
 8003efc:	4a78      	ldr	r2, [pc, #480]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8003efe:	4879      	ldr	r0, [pc, #484]	@ (80040e4 <StartDefaultTask+0xafc>)
 8003f00:	f002 f84c 	bl	8005f9c <SPIF_ReadSector>
			      int val1 = read[0];
 8003f04:	4b76      	ldr	r3, [pc, #472]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8003f0c:	4b71      	ldr	r3, [pc, #452]	@ (80040d4 <StartDefaultTask+0xaec>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a72      	ldr	r2, [pc, #456]	@ (80040dc <StartDefaultTask+0xaf4>)
 8003f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f16:	4619      	mov	r1, r3
 8003f18:	2308      	movs	r3, #8
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	4a70      	ldr	r2, [pc, #448]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8003f20:	4870      	ldr	r0, [pc, #448]	@ (80040e4 <StartDefaultTask+0xafc>)
 8003f22:	f002 f83b 	bl	8005f9c <SPIF_ReadSector>
				  int val2 = read[0];
 8003f26:	4b6e      	ldr	r3, [pc, #440]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
				  float store = val1 + (.025 * val2);
 8003f2e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8003f32:	f7fc fad7 	bl	80004e4 <__aeabi_i2d>
 8003f36:	4604      	mov	r4, r0
 8003f38:	460d      	mov	r5, r1
 8003f3a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8003f3e:	f7fc fad1 	bl	80004e4 <__aeabi_i2d>
 8003f42:	a359      	add	r3, pc, #356	@ (adr r3, 80040a8 <StartDefaultTask+0xac0>)
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f7fc fb36 	bl	80005b8 <__aeabi_dmul>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4620      	mov	r0, r4
 8003f52:	4629      	mov	r1, r5
 8003f54:	f7fc f97a 	bl	800024c <__adddf3>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f7fc fe02 	bl	8000b68 <__aeabi_d2f>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	//			  Serial2.print("e");
	//			  Serial2.print(str);
	//			  Serial.print(str);
	//			  printFloat2(store,3);
	//			  Serial2.println("");
				  sprintf(toPrint, "%c%s%0.3f",'e',str,store);
 8003f6a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8003f6e:	f7fc facb 	bl	8000508 <__aeabi_f2d>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8003f7a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003f7e:	e9cd 2300 	strd	r2, r3, [sp]
 8003f82:	460b      	mov	r3, r1
 8003f84:	2265      	movs	r2, #101	@ 0x65
 8003f86:	4958      	ldr	r1, [pc, #352]	@ (80040e8 <StartDefaultTask+0xb00>)
 8003f88:	f007 f9b2 	bl	800b2f0 <siprintf>
				  LCDPrint(toPrint);
 8003f8c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe ff31 	bl	8002df8 <LCDPrint>
				if (dispCount == count && count != 16) { // EMPTY add new one
 8003f96:	f000 bcdd 	b.w	8004954 <StartDefaultTask+0x136c>
				}
				else { // regular edit 2
				  add = true;
 8003f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80040cc <StartDefaultTask+0xae4>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
	//			  int dM = EEPROM.read(eepDisplay[dispCount] + 7);
	//			  int dK = EEPROM.read(eepDisplay[dispCount] + 8) * 25;
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8003fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80040d4 <StartDefaultTask+0xaec>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a4d      	ldr	r2, [pc, #308]	@ (80040dc <StartDefaultTask+0xaf4>)
 8003fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003faa:	4619      	mov	r1, r3
 8003fac:	2307      	movs	r3, #7
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4a4b      	ldr	r2, [pc, #300]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8003fb4:	484b      	ldr	r0, [pc, #300]	@ (80040e4 <StartDefaultTask+0xafc>)
 8003fb6:	f001 fff1 	bl	8005f9c <SPIF_ReadSector>
				  int dM = read[0];
 8003fba:	4b49      	ldr	r3, [pc, #292]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8003fc2:	4b44      	ldr	r3, [pc, #272]	@ (80040d4 <StartDefaultTask+0xaec>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a45      	ldr	r2, [pc, #276]	@ (80040dc <StartDefaultTask+0xaf4>)
 8003fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	2308      	movs	r3, #8
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4a42      	ldr	r2, [pc, #264]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8003fd6:	4843      	ldr	r0, [pc, #268]	@ (80040e4 <StartDefaultTask+0xafc>)
 8003fd8:	f001 ffe0 	bl	8005f9c <SPIF_ReadSector>
				  int dK = read[0] * 25;
 8003fdc:	4b40      	ldr	r3, [pc, #256]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009a      	lsls	r2, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
				  char dN[8] = {' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,0};
 8003ff0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8003ff4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80040ec <StartDefaultTask+0xb04>)
 8003ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ffe:	e883 0003 	stmia.w	r3, {r0, r1}
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004008:	e01d      	b.n	8004046 <StartDefaultTask+0xa5e>
	//				dN[i] = EEPROM.read(eepDisplay[dispCount] + i);
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 800400a:	4b32      	ldr	r3, [pc, #200]	@ (80040d4 <StartDefaultTask+0xaec>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a33      	ldr	r2, [pc, #204]	@ (80040dc <StartDefaultTask+0xaf4>)
 8004010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004014:	4619      	mov	r1, r3
 8004016:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2301      	movs	r3, #1
 800401e:	4a30      	ldr	r2, [pc, #192]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8004020:	4830      	ldr	r0, [pc, #192]	@ (80040e4 <StartDefaultTask+0xafc>)
 8004022:	f001 ffbb 	bl	8005f9c <SPIF_ReadSector>
					dN[i] = read[0];
 8004026:	4b2e      	ldr	r3, [pc, #184]	@ (80040e0 <StartDefaultTask+0xaf8>)
 8004028:	7819      	ldrb	r1, [r3, #0]
 800402a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800402e:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8004032:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004036:	4413      	add	r3, r2
 8004038:	460a      	mov	r2, r1
 800403a:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800403c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004040:	3301      	adds	r3, #1
 8004042:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004046:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800404a:	2b06      	cmp	r3, #6
 800404c:	dddd      	ble.n	800400a <StartDefaultTask+0xa22>
				  }
				  HAL_Delay(100);
 800404e:	2064      	movs	r0, #100	@ 0x64
 8004050:	f002 fbcc 	bl	80067ec <HAL_Delay>

				  if (cursor < 7) { // moved to a char
 8004054:	4b18      	ldr	r3, [pc, #96]	@ (80040b8 <StartDefaultTask+0xad0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b06      	cmp	r3, #6
 800405a:	dc54      	bgt.n	8004106 <StartDefaultTask+0xb1e>
					if (dN[cursor] == ' ') {
 800405c:	4b16      	ldr	r3, [pc, #88]	@ (80040b8 <StartDefaultTask+0xad0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8004064:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8004068:	5cd3      	ldrb	r3, [r2, r3]
 800406a:	2b20      	cmp	r3, #32
 800406c:	d103      	bne.n	8004076 <StartDefaultTask+0xa8e>
					  charcount = 0;
 800406e:	4b11      	ldr	r3, [pc, #68]	@ (80040b4 <StartDefaultTask+0xacc>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e05b      	b.n	800412e <StartDefaultTask+0xb46>
					}
					else if (dN[cursor] < ':') {
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <StartDefaultTask+0xad0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800407e:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	2b39      	cmp	r3, #57	@ 0x39
 8004086:	d833      	bhi.n	80040f0 <StartDefaultTask+0xb08>
					  charcount = dN[cursor] - '/';
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <StartDefaultTask+0xad0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8004090:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	3b2f      	subs	r3, #47	@ 0x2f
 8004098:	4a06      	ldr	r2, [pc, #24]	@ (80040b4 <StartDefaultTask+0xacc>)
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e047      	b.n	800412e <StartDefaultTask+0xb46>
 800409e:	bf00      	nop
 80040a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80040a4:	3f50624d 	.word	0x3f50624d
 80040a8:	9999999a 	.word	0x9999999a
 80040ac:	3f999999 	.word	0x3f999999
 80040b0:	51eb851f 	.word	0x51eb851f
 80040b4:	20000700 	.word	0x20000700
 80040b8:	200006f8 	.word	0x200006f8
 80040bc:	0800d728 	.word	0x0800d728
 80040c0:	20000728 	.word	0x20000728
 80040c4:	2000072c 	.word	0x2000072c
 80040c8:	40011000 	.word	0x40011000
 80040cc:	200006f5 	.word	0x200006f5
 80040d0:	2000000c 	.word	0x2000000c
 80040d4:	200006ec 	.word	0x200006ec
 80040d8:	200006f0 	.word	0x200006f0
 80040dc:	200006ac 	.word	0x200006ac
 80040e0:	2000070c 	.word	0x2000070c
 80040e4:	20000678 	.word	0x20000678
 80040e8:	0800d71c 	.word	0x0800d71c
 80040ec:	0800d764 	.word	0x0800d764
					}
					else {
					  charcount = dN[cursor] - '6';
 80040f0:	4ba1      	ldr	r3, [pc, #644]	@ (8004378 <StartDefaultTask+0xd90>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80040f8:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80040fc:	5cd3      	ldrb	r3, [r2, r3]
 80040fe:	3b36      	subs	r3, #54	@ 0x36
 8004100:	4a9e      	ldr	r2, [pc, #632]	@ (800437c <StartDefaultTask+0xd94>)
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	e013      	b.n	800412e <StartDefaultTask+0xb46>
					}
				  }
				  else if (cursor == 7) {
 8004106:	4b9c      	ldr	r3, [pc, #624]	@ (8004378 <StartDefaultTask+0xd90>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b07      	cmp	r3, #7
 800410c:	d105      	bne.n	800411a <StartDefaultTask+0xb32>
					charcount = dM - 108;
 800410e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8004112:	3b6c      	subs	r3, #108	@ 0x6c
 8004114:	4a99      	ldr	r2, [pc, #612]	@ (800437c <StartDefaultTask+0xd94>)
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e009      	b.n	800412e <StartDefaultTask+0xb46>
				  }
				  else {
					charcount = dK / 50;
 800411a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800411e:	4a98      	ldr	r2, [pc, #608]	@ (8004380 <StartDefaultTask+0xd98>)
 8004120:	fb82 1203 	smull	r1, r2, r2, r3
 8004124:	1112      	asrs	r2, r2, #4
 8004126:	17db      	asrs	r3, r3, #31
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	4a94      	ldr	r2, [pc, #592]	@ (800437c <StartDefaultTask+0xd94>)
 800412c:	6013      	str	r3, [r2, #0]
				  }

				  if (cursor < 7) { //
 800412e:	4b92      	ldr	r3, [pc, #584]	@ (8004378 <StartDefaultTask+0xd90>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b06      	cmp	r3, #6
 8004134:	dc2e      	bgt.n	8004194 <StartDefaultTask+0xbac>
					if (charcount == 0) {
 8004136:	4b91      	ldr	r3, [pc, #580]	@ (800437c <StartDefaultTask+0xd94>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10c      	bne.n	8004158 <StartDefaultTask+0xb70>
					  dN[cursor] = (char)(charcount+32);
 800413e:	4b8f      	ldr	r3, [pc, #572]	@ (800437c <StartDefaultTask+0xd94>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	4b8c      	ldr	r3, [pc, #560]	@ (8004378 <StartDefaultTask+0xd90>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3220      	adds	r2, #32
 800414a:	b2d1      	uxtb	r1, r2
 800414c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8004150:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8004154:	54d1      	strb	r1, [r2, r3]
 8004156:	e03c      	b.n	80041d2 <StartDefaultTask+0xbea>
					}
					else if (charcount < 11) {
 8004158:	4b88      	ldr	r3, [pc, #544]	@ (800437c <StartDefaultTask+0xd94>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b0a      	cmp	r3, #10
 800415e:	dc0c      	bgt.n	800417a <StartDefaultTask+0xb92>
					  dN[cursor] = (char)(charcount+47);
 8004160:	4b86      	ldr	r3, [pc, #536]	@ (800437c <StartDefaultTask+0xd94>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	4b84      	ldr	r3, [pc, #528]	@ (8004378 <StartDefaultTask+0xd90>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	322f      	adds	r2, #47	@ 0x2f
 800416c:	b2d1      	uxtb	r1, r2
 800416e:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8004172:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8004176:	54d1      	strb	r1, [r2, r3]
 8004178:	e02b      	b.n	80041d2 <StartDefaultTask+0xbea>
					}
					else {
					  dN[cursor] = (char)(charcount+54);
 800417a:	4b80      	ldr	r3, [pc, #512]	@ (800437c <StartDefaultTask+0xd94>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	4b7d      	ldr	r3, [pc, #500]	@ (8004378 <StartDefaultTask+0xd90>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3236      	adds	r2, #54	@ 0x36
 8004186:	b2d1      	uxtb	r1, r2
 8004188:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800418c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8004190:	54d1      	strb	r1, [r2, r3]
 8004192:	e01e      	b.n	80041d2 <StartDefaultTask+0xbea>
					}
				  }
				  else if (cursor == 7) { //mhz
 8004194:	4b78      	ldr	r3, [pc, #480]	@ (8004378 <StartDefaultTask+0xd90>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b07      	cmp	r3, #7
 800419a:	d10c      	bne.n	80041b6 <StartDefaultTask+0xbce>
					if (charcount > 9) {
 800419c:	4b77      	ldr	r3, [pc, #476]	@ (800437c <StartDefaultTask+0xd94>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b09      	cmp	r3, #9
 80041a2:	dd02      	ble.n	80041aa <StartDefaultTask+0xbc2>
					  charcount = 9;
 80041a4:	4b75      	ldr	r3, [pc, #468]	@ (800437c <StartDefaultTask+0xd94>)
 80041a6:	2209      	movs	r2, #9
 80041a8:	601a      	str	r2, [r3, #0]
					}
					dM = 108 + charcount;
 80041aa:	4b74      	ldr	r3, [pc, #464]	@ (800437c <StartDefaultTask+0xd94>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	336c      	adds	r3, #108	@ 0x6c
 80041b0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80041b4:	e00d      	b.n	80041d2 <StartDefaultTask+0xbea>
				  }
				  else {
	                if (charcount > 19) {
 80041b6:	4b71      	ldr	r3, [pc, #452]	@ (800437c <StartDefaultTask+0xd94>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b13      	cmp	r3, #19
 80041bc:	dd02      	ble.n	80041c4 <StartDefaultTask+0xbdc>
	                  charcount = 19;
 80041be:	4b6f      	ldr	r3, [pc, #444]	@ (800437c <StartDefaultTask+0xd94>)
 80041c0:	2213      	movs	r2, #19
 80041c2:	601a      	str	r2, [r3, #0]
	                }
					dK = 50 * charcount;
 80041c4:	4b6d      	ldr	r3, [pc, #436]	@ (800437c <StartDefaultTask+0xd94>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2232      	movs	r2, #50	@ 0x32
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	//			  Serial2.print("a");
	//			  Serial2.print(cursor);
	//			  Serial2.print(dN);
	//			  printFloat2(pfreq,3);
	//			  Serial2.println("");
				  float pfreq = dM + (dK * .001);
 80041d2:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 80041d6:	f7fc f985 	bl	80004e4 <__aeabi_i2d>
 80041da:	4604      	mov	r4, r0
 80041dc:	460d      	mov	r5, r1
 80041de:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80041e2:	f7fc f97f 	bl	80004e4 <__aeabi_i2d>
 80041e6:	a362      	add	r3, pc, #392	@ (adr r3, 8004370 <StartDefaultTask+0xd88>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f7fc f9e4 	bl	80005b8 <__aeabi_dmul>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4620      	mov	r0, r4
 80041f6:	4629      	mov	r1, r5
 80041f8:	f7fc f828 	bl	800024c <__adddf3>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f7fc fcb0 	bl	8000b68 <__aeabi_d2f>
 8004208:	4603      	mov	r3, r0
 800420a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
				  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 800420e:	4b5a      	ldr	r3, [pc, #360]	@ (8004378 <StartDefaultTask+0xd90>)
 8004210:	681c      	ldr	r4, [r3, #0]
 8004212:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8004216:	f7fc f977 	bl	8000508 <__aeabi_f2d>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004222:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004226:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	4623      	mov	r3, r4
 800422e:	2261      	movs	r2, #97	@ 0x61
 8004230:	4954      	ldr	r1, [pc, #336]	@ (8004384 <StartDefaultTask+0xd9c>)
 8004232:	f007 f85d 	bl	800b2f0 <siprintf>
				  LCDPrint(toPrint);
 8004236:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe fddc 	bl	8002df8 <LCDPrint>

				  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press
 8004240:	e12e      	b.n	80044a0 <StartDefaultTask+0xeb8>
					static int last_cursor = 0;
					static int last_cc = 0;
					if (last_cc != charcount) { // change the actual values of dN dM and dK, incrementing values WORKS
 8004242:	4b51      	ldr	r3, [pc, #324]	@ (8004388 <StartDefaultTask+0xda0>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b4d      	ldr	r3, [pc, #308]	@ (800437c <StartDefaultTask+0xd94>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	f000 809e 	beq.w	800438c <StartDefaultTask+0xda4>
					  if (cursor < 7) { //
 8004250:	4b49      	ldr	r3, [pc, #292]	@ (8004378 <StartDefaultTask+0xd90>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b06      	cmp	r3, #6
 8004256:	dc2e      	bgt.n	80042b6 <StartDefaultTask+0xcce>
						if (charcount == 0) {
 8004258:	4b48      	ldr	r3, [pc, #288]	@ (800437c <StartDefaultTask+0xd94>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10c      	bne.n	800427a <StartDefaultTask+0xc92>
						  dN[cursor] = (char)(charcount+32);
 8004260:	4b46      	ldr	r3, [pc, #280]	@ (800437c <StartDefaultTask+0xd94>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	b2da      	uxtb	r2, r3
 8004266:	4b44      	ldr	r3, [pc, #272]	@ (8004378 <StartDefaultTask+0xd90>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3220      	adds	r2, #32
 800426c:	b2d1      	uxtb	r1, r2
 800426e:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8004272:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8004276:	54d1      	strb	r1, [r2, r3]
 8004278:	e03c      	b.n	80042f4 <StartDefaultTask+0xd0c>
						}
						else if (charcount < 11) {
 800427a:	4b40      	ldr	r3, [pc, #256]	@ (800437c <StartDefaultTask+0xd94>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b0a      	cmp	r3, #10
 8004280:	dc0c      	bgt.n	800429c <StartDefaultTask+0xcb4>
						  dN[cursor] = (char)(charcount+47);
 8004282:	4b3e      	ldr	r3, [pc, #248]	@ (800437c <StartDefaultTask+0xd94>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	4b3b      	ldr	r3, [pc, #236]	@ (8004378 <StartDefaultTask+0xd90>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	322f      	adds	r2, #47	@ 0x2f
 800428e:	b2d1      	uxtb	r1, r2
 8004290:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8004294:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8004298:	54d1      	strb	r1, [r2, r3]
 800429a:	e02b      	b.n	80042f4 <StartDefaultTask+0xd0c>
						}
						else {
						  dN[cursor] = (char)(charcount+54);
 800429c:	4b37      	ldr	r3, [pc, #220]	@ (800437c <StartDefaultTask+0xd94>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b35      	ldr	r3, [pc, #212]	@ (8004378 <StartDefaultTask+0xd90>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3236      	adds	r2, #54	@ 0x36
 80042a8:	b2d1      	uxtb	r1, r2
 80042aa:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80042ae:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80042b2:	54d1      	strb	r1, [r2, r3]
 80042b4:	e01e      	b.n	80042f4 <StartDefaultTask+0xd0c>
						}
					  }
					  else if (cursor == 7) { //mhz
 80042b6:	4b30      	ldr	r3, [pc, #192]	@ (8004378 <StartDefaultTask+0xd90>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b07      	cmp	r3, #7
 80042bc:	d10c      	bne.n	80042d8 <StartDefaultTask+0xcf0>
						if (charcount > 9) {
 80042be:	4b2f      	ldr	r3, [pc, #188]	@ (800437c <StartDefaultTask+0xd94>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b09      	cmp	r3, #9
 80042c4:	dd02      	ble.n	80042cc <StartDefaultTask+0xce4>
						  charcount = 9;
 80042c6:	4b2d      	ldr	r3, [pc, #180]	@ (800437c <StartDefaultTask+0xd94>)
 80042c8:	2209      	movs	r2, #9
 80042ca:	601a      	str	r2, [r3, #0]
						}
						dM = 108 + charcount;
 80042cc:	4b2b      	ldr	r3, [pc, #172]	@ (800437c <StartDefaultTask+0xd94>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	336c      	adds	r3, #108	@ 0x6c
 80042d2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80042d6:	e00d      	b.n	80042f4 <StartDefaultTask+0xd0c>
					  }
					  else {
		                if (charcount > 19) {
 80042d8:	4b28      	ldr	r3, [pc, #160]	@ (800437c <StartDefaultTask+0xd94>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b13      	cmp	r3, #19
 80042de:	dd02      	ble.n	80042e6 <StartDefaultTask+0xcfe>
		                  charcount = 19;
 80042e0:	4b26      	ldr	r3, [pc, #152]	@ (800437c <StartDefaultTask+0xd94>)
 80042e2:	2213      	movs	r2, #19
 80042e4:	601a      	str	r2, [r3, #0]
		                }
						dK = 50 * charcount;
 80042e6:	4b25      	ldr	r3, [pc, #148]	@ (800437c <StartDefaultTask+0xd94>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2232      	movs	r2, #50	@ 0x32
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	//				  Serial2.print("a");
	//				  Serial2.print(cursor);
	//				  Serial2.print(dN);
	//				  printFloat2(pfreq,3);
	//				  Serial2.println("");
					  float pfreq = dM + (dK * .001);
 80042f4:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 80042f8:	f7fc f8f4 	bl	80004e4 <__aeabi_i2d>
 80042fc:	4604      	mov	r4, r0
 80042fe:	460d      	mov	r5, r1
 8004300:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8004304:	f7fc f8ee 	bl	80004e4 <__aeabi_i2d>
 8004308:	a319      	add	r3, pc, #100	@ (adr r3, 8004370 <StartDefaultTask+0xd88>)
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f7fc f953 	bl	80005b8 <__aeabi_dmul>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4620      	mov	r0, r4
 8004318:	4629      	mov	r1, r5
 800431a:	f7fb ff97 	bl	800024c <__adddf3>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	f7fc fc1f 	bl	8000b68 <__aeabi_d2f>
 800432a:	4603      	mov	r3, r0
 800432c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
					  sprintf(toPrint,"%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8004330:	4b11      	ldr	r3, [pc, #68]	@ (8004378 <StartDefaultTask+0xd90>)
 8004332:	681c      	ldr	r4, [r3, #0]
 8004334:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8004338:	f7fc f8e6 	bl	8000508 <__aeabi_f2d>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004348:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	4623      	mov	r3, r4
 8004350:	2261      	movs	r2, #97	@ 0x61
 8004352:	490c      	ldr	r1, [pc, #48]	@ (8004384 <StartDefaultTask+0xd9c>)
 8004354:	f006 ffcc 	bl	800b2f0 <siprintf>
					  LCDPrint(toPrint);
 8004358:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe fd4b 	bl	8002df8 <LCDPrint>
					  last_cc = charcount;
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <StartDefaultTask+0xd94>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a08      	ldr	r2, [pc, #32]	@ (8004388 <StartDefaultTask+0xda0>)
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	e099      	b.n	80044a0 <StartDefaultTask+0xeb8>
 800436c:	f3af 8000 	nop.w
 8004370:	d2f1a9fc 	.word	0xd2f1a9fc
 8004374:	3f50624d 	.word	0x3f50624d
 8004378:	200006f8 	.word	0x200006f8
 800437c:	20000700 	.word	0x20000700
 8004380:	51eb851f 	.word	0x51eb851f
 8004384:	0800d728 	.word	0x0800d728
 8004388:	20000730 	.word	0x20000730
					} ///////// case 1
					else if (last_cursor != cursor) { // change the value of charcount based on where we are WORKS????
 800438c:	4b86      	ldr	r3, [pc, #536]	@ (80045a8 <StartDefaultTask+0xfc0>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4b86      	ldr	r3, [pc, #536]	@ (80045ac <StartDefaultTask+0xfc4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	f000 8083 	beq.w	80044a0 <StartDefaultTask+0xeb8>
					  if (cursor < 7) { // moved to a char
 800439a:	4b84      	ldr	r3, [pc, #528]	@ (80045ac <StartDefaultTask+0xfc4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b06      	cmp	r3, #6
 80043a0:	dc2b      	bgt.n	80043fa <StartDefaultTask+0xe12>
						if (dN[cursor] == ' ') {
 80043a2:	4b82      	ldr	r3, [pc, #520]	@ (80045ac <StartDefaultTask+0xfc4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80043aa:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80043ae:	5cd3      	ldrb	r3, [r2, r3]
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d103      	bne.n	80043bc <StartDefaultTask+0xdd4>
						  charcount = 0;
 80043b4:	4b7e      	ldr	r3, [pc, #504]	@ (80045b0 <StartDefaultTask+0xfc8>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e032      	b.n	8004422 <StartDefaultTask+0xe3a>
						}
						else if (dN[cursor] < ':') {
 80043bc:	4b7b      	ldr	r3, [pc, #492]	@ (80045ac <StartDefaultTask+0xfc4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80043c4:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80043c8:	5cd3      	ldrb	r3, [r2, r3]
 80043ca:	2b39      	cmp	r3, #57	@ 0x39
 80043cc:	d80a      	bhi.n	80043e4 <StartDefaultTask+0xdfc>
						  charcount = dN[cursor] - '/';
 80043ce:	4b77      	ldr	r3, [pc, #476]	@ (80045ac <StartDefaultTask+0xfc4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80043d6:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80043da:	5cd3      	ldrb	r3, [r2, r3]
 80043dc:	3b2f      	subs	r3, #47	@ 0x2f
 80043de:	4a74      	ldr	r2, [pc, #464]	@ (80045b0 <StartDefaultTask+0xfc8>)
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e01e      	b.n	8004422 <StartDefaultTask+0xe3a>
						}
						else {
						  charcount = dN[cursor] - '6';
 80043e4:	4b71      	ldr	r3, [pc, #452]	@ (80045ac <StartDefaultTask+0xfc4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80043ec:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80043f0:	5cd3      	ldrb	r3, [r2, r3]
 80043f2:	3b36      	subs	r3, #54	@ 0x36
 80043f4:	4a6e      	ldr	r2, [pc, #440]	@ (80045b0 <StartDefaultTask+0xfc8>)
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	e013      	b.n	8004422 <StartDefaultTask+0xe3a>
						}
					  }
					  else if (cursor == 7) {
 80043fa:	4b6c      	ldr	r3, [pc, #432]	@ (80045ac <StartDefaultTask+0xfc4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b07      	cmp	r3, #7
 8004400:	d105      	bne.n	800440e <StartDefaultTask+0xe26>
						charcount = dM - 108;
 8004402:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8004406:	3b6c      	subs	r3, #108	@ 0x6c
 8004408:	4a69      	ldr	r2, [pc, #420]	@ (80045b0 <StartDefaultTask+0xfc8>)
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e009      	b.n	8004422 <StartDefaultTask+0xe3a>
					  }
					  else {
						charcount = dK / 50;
 800440e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004412:	4a68      	ldr	r2, [pc, #416]	@ (80045b4 <StartDefaultTask+0xfcc>)
 8004414:	fb82 1203 	smull	r1, r2, r2, r3
 8004418:	1112      	asrs	r2, r2, #4
 800441a:	17db      	asrs	r3, r3, #31
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	4a64      	ldr	r2, [pc, #400]	@ (80045b0 <StartDefaultTask+0xfc8>)
 8004420:	6013      	str	r3, [r2, #0]
	//				  Serial2.print(cursor);
	//				  Serial2.print(dN);
	//				  printFloat2(pfreq,3);
	//				  Serial2.println("");

					  float pfreq = dM + (dK * .001);
 8004422:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8004426:	f7fc f85d 	bl	80004e4 <__aeabi_i2d>
 800442a:	4604      	mov	r4, r0
 800442c:	460d      	mov	r5, r1
 800442e:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8004432:	f7fc f857 	bl	80004e4 <__aeabi_i2d>
 8004436:	a35a      	add	r3, pc, #360	@ (adr r3, 80045a0 <StartDefaultTask+0xfb8>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fc f8bc 	bl	80005b8 <__aeabi_dmul>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4620      	mov	r0, r4
 8004446:	4629      	mov	r1, r5
 8004448:	f7fb ff00 	bl	800024c <__adddf3>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	f7fc fb88 	bl	8000b68 <__aeabi_d2f>
 8004458:	4603      	mov	r3, r0
 800445a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
					  sprintf(toPrint,"%c%d%s%0.3f",'a',cursor,dN,pfreq);
 800445e:	4b53      	ldr	r3, [pc, #332]	@ (80045ac <StartDefaultTask+0xfc4>)
 8004460:	681c      	ldr	r4, [r3, #0]
 8004462:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8004466:	f7fc f84f 	bl	8000508 <__aeabi_f2d>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004472:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004476:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	4623      	mov	r3, r4
 800447e:	2261      	movs	r2, #97	@ 0x61
 8004480:	494d      	ldr	r1, [pc, #308]	@ (80045b8 <StartDefaultTask+0xfd0>)
 8004482:	f006 ff35 	bl	800b2f0 <siprintf>
					  LCDPrint(toPrint);
 8004486:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fcb4 	bl	8002df8 <LCDPrint>
					  last_cc = charcount;
 8004490:	4b47      	ldr	r3, [pc, #284]	@ (80045b0 <StartDefaultTask+0xfc8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a49      	ldr	r2, [pc, #292]	@ (80045bc <StartDefaultTask+0xfd4>)
 8004496:	6013      	str	r3, [r2, #0]
					  last_cursor = cursor;
 8004498:	4b44      	ldr	r3, [pc, #272]	@ (80045ac <StartDefaultTask+0xfc4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a42      	ldr	r2, [pc, #264]	@ (80045a8 <StartDefaultTask+0xfc0>)
 800449e:	6013      	str	r3, [r2, #0]
				  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press
 80044a0:	2101      	movs	r1, #1
 80044a2:	4847      	ldr	r0, [pc, #284]	@ (80045c0 <StartDefaultTask+0xfd8>)
 80044a4:	f002 fd7c 	bl	8006fa0 <HAL_GPIO_ReadPin>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	f43f aec9 	beq.w	8004242 <StartDefaultTask+0xc5a>
					} ///////// case 2
				  }
				  //update the eeprom with new values
				  SPIF_EraseSector(&spif, eepDisplay[dispCount]);
 80044b0:	4b44      	ldr	r3, [pc, #272]	@ (80045c4 <StartDefaultTask+0xfdc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a44      	ldr	r2, [pc, #272]	@ (80045c8 <StartDefaultTask+0xfe0>)
 80044b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ba:	4619      	mov	r1, r3
 80044bc:	4843      	ldr	r0, [pc, #268]	@ (80045cc <StartDefaultTask+0xfe4>)
 80044be:	f001 fc80 	bl	8005dc2 <SPIF_EraseSector>
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80044c8:	e01c      	b.n	8004504 <StartDefaultTask+0xf1c>
	//				EEPROM.update(eepDisplay[dispCount] + i, dN[i]);
					write[0] = dN[i];
 80044ca:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044ce:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80044d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80044d6:	4413      	add	r3, r2
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	4b3d      	ldr	r3, [pc, #244]	@ (80045d0 <StartDefaultTask+0xfe8>)
 80044dc:	701a      	strb	r2, [r3, #0]
					SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, i);
 80044de:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <StartDefaultTask+0xfdc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a39      	ldr	r2, [pc, #228]	@ (80045c8 <StartDefaultTask+0xfe0>)
 80044e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e8:	4619      	mov	r1, r3
 80044ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2301      	movs	r3, #1
 80044f2:	4a37      	ldr	r2, [pc, #220]	@ (80045d0 <StartDefaultTask+0xfe8>)
 80044f4:	4835      	ldr	r0, [pc, #212]	@ (80045cc <StartDefaultTask+0xfe4>)
 80044f6:	f001 fce7 	bl	8005ec8 <SPIF_WriteSector>
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80044fa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80044fe:	3301      	adds	r3, #1
 8004500:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004504:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004508:	2b06      	cmp	r3, #6
 800450a:	ddde      	ble.n	80044ca <StartDefaultTask+0xee2>
				  }
	//			  EEPROM.update(eepDisplay[dispCount] + 7, dM);
	//			  EEPROM.update(eepDisplay[dispCount] + 8, dK/25);
				  write[0] = dM;
 800450c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8004510:	b2da      	uxtb	r2, r3
 8004512:	4b2f      	ldr	r3, [pc, #188]	@ (80045d0 <StartDefaultTask+0xfe8>)
 8004514:	701a      	strb	r2, [r3, #0]
				  SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, 7);
 8004516:	4b2b      	ldr	r3, [pc, #172]	@ (80045c4 <StartDefaultTask+0xfdc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2b      	ldr	r2, [pc, #172]	@ (80045c8 <StartDefaultTask+0xfe0>)
 800451c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004520:	4619      	mov	r1, r3
 8004522:	2307      	movs	r3, #7
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	2301      	movs	r3, #1
 8004528:	4a29      	ldr	r2, [pc, #164]	@ (80045d0 <StartDefaultTask+0xfe8>)
 800452a:	4828      	ldr	r0, [pc, #160]	@ (80045cc <StartDefaultTask+0xfe4>)
 800452c:	f001 fccc 	bl	8005ec8 <SPIF_WriteSector>
				  write[0] = dK/25;
 8004530:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004534:	4a1f      	ldr	r2, [pc, #124]	@ (80045b4 <StartDefaultTask+0xfcc>)
 8004536:	fb82 1203 	smull	r1, r2, r2, r3
 800453a:	10d2      	asrs	r2, r2, #3
 800453c:	17db      	asrs	r3, r3, #31
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	b2da      	uxtb	r2, r3
 8004542:	4b23      	ldr	r3, [pc, #140]	@ (80045d0 <StartDefaultTask+0xfe8>)
 8004544:	701a      	strb	r2, [r3, #0]
				  SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, 8);
 8004546:	4b1f      	ldr	r3, [pc, #124]	@ (80045c4 <StartDefaultTask+0xfdc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1f      	ldr	r2, [pc, #124]	@ (80045c8 <StartDefaultTask+0xfe0>)
 800454c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004550:	4619      	mov	r1, r3
 8004552:	2308      	movs	r3, #8
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	2301      	movs	r3, #1
 8004558:	4a1d      	ldr	r2, [pc, #116]	@ (80045d0 <StartDefaultTask+0xfe8>)
 800455a:	481c      	ldr	r0, [pc, #112]	@ (80045cc <StartDefaultTask+0xfe4>)
 800455c:	f001 fcb4 	bl	8005ec8 <SPIF_WriteSector>

				  HAL_Delay(500);
 8004560:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004564:	f002 f942 	bl	80067ec <HAL_Delay>
				  add = false;
 8004568:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <StartDefaultTask+0xfec>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
				  pause = false;
 800456e:	4b1a      	ldr	r3, [pc, #104]	@ (80045d8 <StartDefaultTask+0xff0>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
				  toDisplay();
 8004574:	f7fd fa10 	bl	8001998 <toDisplay>

				  char str[8];
				  if (dispCount == count) {
 8004578:	4b12      	ldr	r3, [pc, #72]	@ (80045c4 <StartDefaultTask+0xfdc>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b17      	ldr	r3, [pc, #92]	@ (80045dc <StartDefaultTask+0xff4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d106      	bne.n	8004592 <StartDefaultTask+0xfaa>
					str[0] = ':'; //EMPTY
 8004584:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004588:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800458c:	223a      	movs	r2, #58	@ 0x3a
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e04e      	b.n	8004630 <StartDefaultTask+0x1048>
				  }
				  else {
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004598:	e040      	b.n	800461c <StartDefaultTask+0x1034>
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w
 80045a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80045a4:	3f50624d 	.word	0x3f50624d
 80045a8:	20000734 	.word	0x20000734
 80045ac:	200006f8 	.word	0x200006f8
 80045b0:	20000700 	.word	0x20000700
 80045b4:	51eb851f 	.word	0x51eb851f
 80045b8:	0800d728 	.word	0x0800d728
 80045bc:	20000730 	.word	0x20000730
 80045c0:	40011000 	.word	0x40011000
 80045c4:	200006ec 	.word	0x200006ec
 80045c8:	200006ac 	.word	0x200006ac
 80045cc:	20000678 	.word	0x20000678
 80045d0:	20000710 	.word	0x20000710
 80045d4:	200006f5 	.word	0x200006f5
 80045d8:	2000000c 	.word	0x2000000c
 80045dc:	200006f0 	.word	0x200006f0
	//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
					  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 80045e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004820 <StartDefaultTask+0x1238>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a8f      	ldr	r2, [pc, #572]	@ (8004824 <StartDefaultTask+0x123c>)
 80045e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ea:	4619      	mov	r1, r3
 80045ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	2301      	movs	r3, #1
 80045f4:	4a8c      	ldr	r2, [pc, #560]	@ (8004828 <StartDefaultTask+0x1240>)
 80045f6:	488d      	ldr	r0, [pc, #564]	@ (800482c <StartDefaultTask+0x1244>)
 80045f8:	f001 fcd0 	bl	8005f9c <SPIF_ReadSector>
					  str[i] = read[0];
 80045fc:	4b8a      	ldr	r3, [pc, #552]	@ (8004828 <StartDefaultTask+0x1240>)
 80045fe:	7819      	ldrb	r1, [r3, #0]
 8004600:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004604:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8004608:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800460c:	4413      	add	r3, r2
 800460e:	460a      	mov	r2, r1
 8004610:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004612:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004616:	3301      	adds	r3, #1
 8004618:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800461c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004620:	2b06      	cmp	r3, #6
 8004622:	dddd      	ble.n	80045e0 <StartDefaultTask+0xff8>
					}
					str[7] = 0;
 8004624:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004628:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800462c:	2200      	movs	r2, #0
 800462e:	71da      	strb	r2, [r3, #7]
	//			  Serial.print(str);
	//			  printFloat2(store,3);
	//			  Serial2.println("");

	//			  float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004630:	4b7b      	ldr	r3, [pc, #492]	@ (8004820 <StartDefaultTask+0x1238>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a7b      	ldr	r2, [pc, #492]	@ (8004824 <StartDefaultTask+0x123c>)
 8004636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463a:	4619      	mov	r1, r3
 800463c:	2307      	movs	r3, #7
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2301      	movs	r3, #1
 8004642:	4a79      	ldr	r2, [pc, #484]	@ (8004828 <StartDefaultTask+0x1240>)
 8004644:	4879      	ldr	r0, [pc, #484]	@ (800482c <StartDefaultTask+0x1244>)
 8004646:	f001 fca9 	bl	8005f9c <SPIF_ReadSector>
			      int val1 = read[0];
 800464a:	4b77      	ldr	r3, [pc, #476]	@ (8004828 <StartDefaultTask+0x1240>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8004652:	4b73      	ldr	r3, [pc, #460]	@ (8004820 <StartDefaultTask+0x1238>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a73      	ldr	r2, [pc, #460]	@ (8004824 <StartDefaultTask+0x123c>)
 8004658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465c:	4619      	mov	r1, r3
 800465e:	2308      	movs	r3, #8
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	2301      	movs	r3, #1
 8004664:	4a70      	ldr	r2, [pc, #448]	@ (8004828 <StartDefaultTask+0x1240>)
 8004666:	4871      	ldr	r0, [pc, #452]	@ (800482c <StartDefaultTask+0x1244>)
 8004668:	f001 fc98 	bl	8005f9c <SPIF_ReadSector>
				  int val2 = read[0];
 800466c:	4b6e      	ldr	r3, [pc, #440]	@ (8004828 <StartDefaultTask+0x1240>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				  float store = val1 + (.025 * val2);
 8004674:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004678:	f7fb ff34 	bl	80004e4 <__aeabi_i2d>
 800467c:	4604      	mov	r4, r0
 800467e:	460d      	mov	r5, r1
 8004680:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8004684:	f7fb ff2e 	bl	80004e4 <__aeabi_i2d>
 8004688:	a363      	add	r3, pc, #396	@ (adr r3, 8004818 <StartDefaultTask+0x1230>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f7fb ff93 	bl	80005b8 <__aeabi_dmul>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4620      	mov	r0, r4
 8004698:	4629      	mov	r1, r5
 800469a:	f7fb fdd7 	bl	800024c <__adddf3>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	f7fc fa5f 	bl	8000b68 <__aeabi_d2f>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

				  sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 80046b0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80046b4:	f7fb ff28 	bl	8000508 <__aeabi_f2d>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80046c0:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80046c4:	e9cd 2300 	strd	r2, r3, [sp]
 80046c8:	460b      	mov	r3, r1
 80046ca:	2265      	movs	r2, #101	@ 0x65
 80046cc:	4958      	ldr	r1, [pc, #352]	@ (8004830 <StartDefaultTask+0x1248>)
 80046ce:	f006 fe0f 	bl	800b2f0 <siprintf>
				  LCDPrint(toPrint);
 80046d2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fb8e 	bl	8002df8 <LCDPrint>
 80046dc:	e13a      	b.n	8004954 <StartDefaultTask+0x136c>
				}
			  }
			  else if (currentA) { //delete
 80046de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8136 	beq.w	8004954 <StartDefaultTask+0x136c>
				if (dispCount != count) { // Not empty
 80046e8:	4b4d      	ldr	r3, [pc, #308]	@ (8004820 <StartDefaultTask+0x1238>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b51      	ldr	r3, [pc, #324]	@ (8004834 <StartDefaultTask+0x124c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d07f      	beq.n	80047f4 <StartDefaultTask+0x120c>
				  delc = 0;
 80046f4:	4b50      	ldr	r3, [pc, #320]	@ (8004838 <StartDefaultTask+0x1250>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
				  del = true;
 80046fa:	4b50      	ldr	r3, [pc, #320]	@ (800483c <StartDefaultTask+0x1254>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
				  pause = true;
 8004700:	4b4f      	ldr	r3, [pc, #316]	@ (8004840 <StartDefaultTask+0x1258>)
 8004702:	2201      	movs	r2, #1
 8004704:	701a      	strb	r2, [r3, #0]
				  char dN[8];
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800470c:	e01d      	b.n	800474a <StartDefaultTask+0x1162>
	//				dN[i] = EEPROM.read(eepDisplay[dispCount] + i);
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 800470e:	4b44      	ldr	r3, [pc, #272]	@ (8004820 <StartDefaultTask+0x1238>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a44      	ldr	r2, [pc, #272]	@ (8004824 <StartDefaultTask+0x123c>)
 8004714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004718:	4619      	mov	r1, r3
 800471a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	2301      	movs	r3, #1
 8004722:	4a41      	ldr	r2, [pc, #260]	@ (8004828 <StartDefaultTask+0x1240>)
 8004724:	4841      	ldr	r0, [pc, #260]	@ (800482c <StartDefaultTask+0x1244>)
 8004726:	f001 fc39 	bl	8005f9c <SPIF_ReadSector>
					dN[i] = read[0];
 800472a:	4b3f      	ldr	r3, [pc, #252]	@ (8004828 <StartDefaultTask+0x1240>)
 800472c:	7819      	ldrb	r1, [r3, #0]
 800472e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004732:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 8004736:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800473a:	4413      	add	r3, r2
 800473c:	460a      	mov	r2, r1
 800473e:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004740:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004744:	3301      	adds	r3, #1
 8004746:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800474a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800474e:	2b06      	cmp	r3, #6
 8004750:	dddd      	ble.n	800470e <StartDefaultTask+0x1126>
				  }
	//			  Serial2.print("d");
	//			  Serial2.print(delc);
	//			  Serial2.print(dN);
	//			  Serial2.println("");
				  sprintf(toPrint, "%c%d%s",'d',delc,dN);
 8004752:	4b39      	ldr	r3, [pc, #228]	@ (8004838 <StartDefaultTask+0x1250>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800475a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	2264      	movs	r2, #100	@ 0x64
 8004764:	4937      	ldr	r1, [pc, #220]	@ (8004844 <StartDefaultTask+0x125c>)
 8004766:	f006 fdc3 	bl	800b2f0 <siprintf>
				  LCDPrint(toPrint);
 800476a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe fb42 	bl	8002df8 <LCDPrint>
				  HAL_Delay(500);
 8004774:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004778:	f002 f838 	bl	80067ec <HAL_Delay>
				  while (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 1) {
 800477c:	e01a      	b.n	80047b4 <StartDefaultTask+0x11cc>
					static int last_delc = 0;
					if (last_delc != delc) {
 800477e:	4b32      	ldr	r3, [pc, #200]	@ (8004848 <StartDefaultTask+0x1260>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4b2d      	ldr	r3, [pc, #180]	@ (8004838 <StartDefaultTask+0x1250>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d014      	beq.n	80047b4 <StartDefaultTask+0x11cc>
	//				  Serial2.print("d");
	//				  Serial2.print(delc);
	//				  Serial2.print(dN);
	//				  Serial2.println("");
					  sprintf(toPrint, "%c%d%s",'d',delc,dN);
 800478a:	4b2b      	ldr	r3, [pc, #172]	@ (8004838 <StartDefaultTask+0x1250>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004792:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	2264      	movs	r2, #100	@ 0x64
 800479c:	4929      	ldr	r1, [pc, #164]	@ (8004844 <StartDefaultTask+0x125c>)
 800479e:	f006 fda7 	bl	800b2f0 <siprintf>
					  LCDPrint(toPrint);
 80047a2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe fb26 	bl	8002df8 <LCDPrint>
					  last_delc = delc;
 80047ac:	4b22      	ldr	r3, [pc, #136]	@ (8004838 <StartDefaultTask+0x1250>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a25      	ldr	r2, [pc, #148]	@ (8004848 <StartDefaultTask+0x1260>)
 80047b2:	6013      	str	r3, [r2, #0]
				  while (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 1) {
 80047b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047b8:	4824      	ldr	r0, [pc, #144]	@ (800484c <StartDefaultTask+0x1264>)
 80047ba:	f002 fbf1 	bl	8006fa0 <HAL_GPIO_ReadPin>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d0dc      	beq.n	800477e <StartDefaultTask+0x1196>
					}
				  }
				  if (delc > 0) { //
 80047c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004838 <StartDefaultTask+0x1250>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dd07      	ble.n	80047dc <StartDefaultTask+0x11f4>
					toDelete(eepDisplay[dispCount]);
 80047cc:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <StartDefaultTask+0x1238>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a14      	ldr	r2, [pc, #80]	@ (8004824 <StartDefaultTask+0x123c>)
 80047d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fd f97e 	bl	8001ad8 <toDelete>
				  }
				  del = false;
 80047dc:	4b17      	ldr	r3, [pc, #92]	@ (800483c <StartDefaultTask+0x1254>)
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
				  pause = false;
 80047e2:	4b17      	ldr	r3, [pc, #92]	@ (8004840 <StartDefaultTask+0x1258>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
				  toDisplay();
 80047e8:	f7fd f8d6 	bl	8001998 <toDisplay>
				  HAL_Delay(500);
 80047ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80047f0:	f001 fffc 	bl	80067ec <HAL_Delay>
				}
				char str[8];
				if (dispCount == count) {
 80047f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004820 <StartDefaultTask+0x1238>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004834 <StartDefaultTask+0x124c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d106      	bne.n	800480e <StartDefaultTask+0x1226>
				  str[0] = ':'; //EMPTY
 8004800:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004804:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004808:	223a      	movs	r2, #58	@ 0x3a
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	e048      	b.n	80048a0 <StartDefaultTask+0x12b8>
				}
				else {
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004814:	e03a      	b.n	800488c <StartDefaultTask+0x12a4>
 8004816:	bf00      	nop
 8004818:	9999999a 	.word	0x9999999a
 800481c:	3f999999 	.word	0x3f999999
 8004820:	200006ec 	.word	0x200006ec
 8004824:	200006ac 	.word	0x200006ac
 8004828:	2000070c 	.word	0x2000070c
 800482c:	20000678 	.word	0x20000678
 8004830:	0800d71c 	.word	0x0800d71c
 8004834:	200006f0 	.word	0x200006f0
 8004838:	20000704 	.word	0x20000704
 800483c:	200006f6 	.word	0x200006f6
 8004840:	2000000c 	.word	0x2000000c
 8004844:	0800d734 	.word	0x0800d734
 8004848:	20000738 	.word	0x20000738
 800484c:	40011800 	.word	0x40011800
	//				str[i] = EEPROM.read(eepDisplay[dispCount] + i);
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8004850:	4bad      	ldr	r3, [pc, #692]	@ (8004b08 <StartDefaultTask+0x1520>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4aad      	ldr	r2, [pc, #692]	@ (8004b0c <StartDefaultTask+0x1524>)
 8004856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485a:	4619      	mov	r1, r3
 800485c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	2301      	movs	r3, #1
 8004864:	4aaa      	ldr	r2, [pc, #680]	@ (8004b10 <StartDefaultTask+0x1528>)
 8004866:	48ab      	ldr	r0, [pc, #684]	@ (8004b14 <StartDefaultTask+0x152c>)
 8004868:	f001 fb98 	bl	8005f9c <SPIF_ReadSector>
					str[i] = read[0];
 800486c:	4ba8      	ldr	r3, [pc, #672]	@ (8004b10 <StartDefaultTask+0x1528>)
 800486e:	7819      	ldrb	r1, [r3, #0]
 8004870:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004874:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8004878:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800487c:	4413      	add	r3, r2
 800487e:	460a      	mov	r2, r1
 8004880:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004882:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004886:	3301      	adds	r3, #1
 8004888:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800488c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004890:	2b06      	cmp	r3, #6
 8004892:	dddd      	ble.n	8004850 <StartDefaultTask+0x1268>
				  }
				  str[7] = 0;
 8004894:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004898:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800489c:	2200      	movs	r2, #0
 800489e:	71da      	strb	r2, [r3, #7]
	//			Serial.print(str);
	//			printFloat2(store,3);
	//			Serial2.println("");

	//			float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 80048a0:	4b99      	ldr	r3, [pc, #612]	@ (8004b08 <StartDefaultTask+0x1520>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a99      	ldr	r2, [pc, #612]	@ (8004b0c <StartDefaultTask+0x1524>)
 80048a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048aa:	4619      	mov	r1, r3
 80048ac:	2307      	movs	r3, #7
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2301      	movs	r3, #1
 80048b2:	4a97      	ldr	r2, [pc, #604]	@ (8004b10 <StartDefaultTask+0x1528>)
 80048b4:	4897      	ldr	r0, [pc, #604]	@ (8004b14 <StartDefaultTask+0x152c>)
 80048b6:	f001 fb71 	bl	8005f9c <SPIF_ReadSector>
			    int val1 = read[0];
 80048ba:	4b95      	ldr	r3, [pc, #596]	@ (8004b10 <StartDefaultTask+0x1528>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 80048c2:	4b91      	ldr	r3, [pc, #580]	@ (8004b08 <StartDefaultTask+0x1520>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a91      	ldr	r2, [pc, #580]	@ (8004b0c <StartDefaultTask+0x1524>)
 80048c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048cc:	4619      	mov	r1, r3
 80048ce:	2308      	movs	r3, #8
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	2301      	movs	r3, #1
 80048d4:	4a8e      	ldr	r2, [pc, #568]	@ (8004b10 <StartDefaultTask+0x1528>)
 80048d6:	488f      	ldr	r0, [pc, #572]	@ (8004b14 <StartDefaultTask+0x152c>)
 80048d8:	f001 fb60 	bl	8005f9c <SPIF_ReadSector>
				int val2 = read[0];
 80048dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004b10 <StartDefaultTask+0x1528>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				float store = val1 + (.025 * val2);
 80048e4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80048e8:	f7fb fdfc 	bl	80004e4 <__aeabi_i2d>
 80048ec:	4604      	mov	r4, r0
 80048ee:	460d      	mov	r5, r1
 80048f0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80048f4:	f7fb fdf6 	bl	80004e4 <__aeabi_i2d>
 80048f8:	a381      	add	r3, pc, #516	@ (adr r3, 8004b00 <StartDefaultTask+0x1518>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f7fb fe5b 	bl	80005b8 <__aeabi_dmul>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4620      	mov	r0, r4
 8004908:	4629      	mov	r1, r5
 800490a:	f7fb fc9f 	bl	800024c <__adddf3>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	f7fc f927 	bl	8000b68 <__aeabi_d2f>
 800491a:	4603      	mov	r3, r0
 800491c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

			    sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 8004920:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8004924:	f7fb fdf0 	bl	8000508 <__aeabi_f2d>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8004930:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004934:	e9cd 2300 	strd	r2, r3, [sp]
 8004938:	460b      	mov	r3, r1
 800493a:	2265      	movs	r2, #101	@ 0x65
 800493c:	4976      	ldr	r1, [pc, #472]	@ (8004b18 <StartDefaultTask+0x1530>)
 800493e:	f006 fcd7 	bl	800b2f0 <siprintf>
			    LCDPrint(toPrint);
 8004942:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fa56 	bl	8002df8 <LCDPrint>
			    lastDC = dispCount;
 800494c:	4b6e      	ldr	r3, [pc, #440]	@ (8004b08 <StartDefaultTask+0x1520>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a72      	ldr	r2, [pc, #456]	@ (8004b1c <StartDefaultTask+0x1534>)
 8004952:	6013      	str	r3, [r2, #0]
			  }

			  if (lastDC != dispCount) {
 8004954:	4b71      	ldr	r3, [pc, #452]	@ (8004b1c <StartDefaultTask+0x1534>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b6b      	ldr	r3, [pc, #428]	@ (8004b08 <StartDefaultTask+0x1520>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	f43e afdd 	beq.w	800391c <StartDefaultTask+0x334>
				char str[8];
				if (dispCount == count) {
 8004962:	4b69      	ldr	r3, [pc, #420]	@ (8004b08 <StartDefaultTask+0x1520>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b6e      	ldr	r3, [pc, #440]	@ (8004b20 <StartDefaultTask+0x1538>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d106      	bne.n	800497c <StartDefaultTask+0x1394>
				  str[0] = ':'; //EMPTY
 800496e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004972:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004976:	223a      	movs	r2, #58	@ 0x3a
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e02b      	b.n	80049d4 <StartDefaultTask+0x13ec>
				}
				else {
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800497c:	2300      	movs	r3, #0
 800497e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004982:	e01d      	b.n	80049c0 <StartDefaultTask+0x13d8>
	//				str[i] = EEPROM.read(eepDisplay[dispCount] + i);
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8004984:	4b60      	ldr	r3, [pc, #384]	@ (8004b08 <StartDefaultTask+0x1520>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a60      	ldr	r2, [pc, #384]	@ (8004b0c <StartDefaultTask+0x1524>)
 800498a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498e:	4619      	mov	r1, r3
 8004990:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	2301      	movs	r3, #1
 8004998:	4a5d      	ldr	r2, [pc, #372]	@ (8004b10 <StartDefaultTask+0x1528>)
 800499a:	485e      	ldr	r0, [pc, #376]	@ (8004b14 <StartDefaultTask+0x152c>)
 800499c:	f001 fafe 	bl	8005f9c <SPIF_ReadSector>
					str[i] = read[0];
 80049a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004b10 <StartDefaultTask+0x1528>)
 80049a2:	7819      	ldrb	r1, [r3, #0]
 80049a4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80049a8:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 80049ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80049b0:	4413      	add	r3, r2
 80049b2:	460a      	mov	r2, r1
 80049b4:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80049b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80049ba:	3301      	adds	r3, #1
 80049bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80049c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80049c4:	2b06      	cmp	r3, #6
 80049c6:	dddd      	ble.n	8004984 <StartDefaultTask+0x139c>
				  }
				  str[7] = 0;
 80049c8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80049cc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80049d0:	2200      	movs	r2, #0
 80049d2:	71da      	strb	r2, [r3, #7]
	//			Serial.print(str);
	//			printFloat2(store,3);
	//			Serial2.println("");

	//			float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 80049d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004b08 <StartDefaultTask+0x1520>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a4c      	ldr	r2, [pc, #304]	@ (8004b0c <StartDefaultTask+0x1524>)
 80049da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049de:	4619      	mov	r1, r3
 80049e0:	2307      	movs	r3, #7
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2301      	movs	r3, #1
 80049e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004b10 <StartDefaultTask+0x1528>)
 80049e8:	484a      	ldr	r0, [pc, #296]	@ (8004b14 <StartDefaultTask+0x152c>)
 80049ea:	f001 fad7 	bl	8005f9c <SPIF_ReadSector>
			    int val1 = read[0];
 80049ee:	4b48      	ldr	r3, [pc, #288]	@ (8004b10 <StartDefaultTask+0x1528>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 80049f6:	4b44      	ldr	r3, [pc, #272]	@ (8004b08 <StartDefaultTask+0x1520>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a44      	ldr	r2, [pc, #272]	@ (8004b0c <StartDefaultTask+0x1524>)
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	4619      	mov	r1, r3
 8004a02:	2308      	movs	r3, #8
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2301      	movs	r3, #1
 8004a08:	4a41      	ldr	r2, [pc, #260]	@ (8004b10 <StartDefaultTask+0x1528>)
 8004a0a:	4842      	ldr	r0, [pc, #264]	@ (8004b14 <StartDefaultTask+0x152c>)
 8004a0c:	f001 fac6 	bl	8005f9c <SPIF_ReadSector>
				int val2 = read[0];
 8004a10:	4b3f      	ldr	r3, [pc, #252]	@ (8004b10 <StartDefaultTask+0x1528>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				float store = val1 + (.025 * val2);
 8004a18:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8004a1c:	f7fb fd62 	bl	80004e4 <__aeabi_i2d>
 8004a20:	4604      	mov	r4, r0
 8004a22:	460d      	mov	r5, r1
 8004a24:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8004a28:	f7fb fd5c 	bl	80004e4 <__aeabi_i2d>
 8004a2c:	a334      	add	r3, pc, #208	@ (adr r3, 8004b00 <StartDefaultTask+0x1518>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f7fb fdc1 	bl	80005b8 <__aeabi_dmul>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	f7fb fc05 	bl	800024c <__adddf3>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f7fc f88d 	bl	8000b68 <__aeabi_d2f>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

			    sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 8004a54:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8004a58:	f7fb fd56 	bl	8000508 <__aeabi_f2d>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004a64:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004a68:	e9cd 2300 	strd	r2, r3, [sp]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	2265      	movs	r2, #101	@ 0x65
 8004a70:	4929      	ldr	r1, [pc, #164]	@ (8004b18 <StartDefaultTask+0x1530>)
 8004a72:	f006 fc3d 	bl	800b2f0 <siprintf>
			    LCDPrint(toPrint);
 8004a76:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe f9bc 	bl	8002df8 <LCDPrint>
				lastDC = dispCount;
 8004a80:	4b21      	ldr	r3, [pc, #132]	@ (8004b08 <StartDefaultTask+0x1520>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a25      	ldr	r2, [pc, #148]	@ (8004b1c <StartDefaultTask+0x1534>)
 8004a86:	6013      	str	r3, [r2, #0]
			while (true) {
 8004a88:	f7fe bf48 	b.w	800391c <StartDefaultTask+0x334>
				break;
 8004a8c:	bf00      	nop
			  }
			}
			edit = false;
 8004a8e:	4b25      	ldr	r3, [pc, #148]	@ (8004b24 <StartDefaultTask+0x153c>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
			pause = false;
 8004a94:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <StartDefaultTask+0x1540>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
			dispCount = 0;
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <StartDefaultTask+0x1520>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
	//		Serial2.print("f");
	//		printFloat2(freq,3);
	//		printFloat2(Standby,3);
	//		Serial2.println("");

		    sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8004aa0:	4b22      	ldr	r3, [pc, #136]	@ (8004b2c <StartDefaultTask+0x1544>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fb fd2f 	bl	8000508 <__aeabi_f2d>
 8004aaa:	4604      	mov	r4, r0
 8004aac:	460d      	mov	r5, r1
 8004aae:	4b20      	ldr	r3, [pc, #128]	@ (8004b30 <StartDefaultTask+0x1548>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fb fd28 	bl	8000508 <__aeabi_f2d>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004ac0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ac4:	e9cd 4500 	strd	r4, r5, [sp]
 8004ac8:	2266      	movs	r2, #102	@ 0x66
 8004aca:	491a      	ldr	r1, [pc, #104]	@ (8004b34 <StartDefaultTask+0x154c>)
 8004acc:	f006 fc10 	bl	800b2f0 <siprintf>
		    LCDPrint(toPrint);
 8004ad0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe f98f 	bl	8002df8 <LCDPrint>

			freq_last = freq;
 8004ada:	4b14      	ldr	r3, [pc, #80]	@ (8004b2c <StartDefaultTask+0x1544>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a16      	ldr	r2, [pc, #88]	@ (8004b38 <StartDefaultTask+0x1550>)
 8004ae0:	6013      	str	r3, [r2, #0]
			sfreq_last = Standby;
 8004ae2:	4b13      	ldr	r3, [pc, #76]	@ (8004b30 <StartDefaultTask+0x1548>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a15      	ldr	r2, [pc, #84]	@ (8004b3c <StartDefaultTask+0x1554>)
 8004ae8:	6013      	str	r3, [r2, #0]
			HAL_Delay(500);
 8004aea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004aee:	f001 fe7d 	bl	80067ec <HAL_Delay>
			last = millis();
 8004af2:	f7fd f929 	bl	8001d48 <millis>
 8004af6:	4603      	mov	r3, r0
 8004af8:	4a11      	ldr	r2, [pc, #68]	@ (8004b40 <StartDefaultTask+0x1558>)
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	e29c      	b.n	8005038 <StartDefaultTask+0x1a50>
 8004afe:	bf00      	nop
 8004b00:	9999999a 	.word	0x9999999a
 8004b04:	3f999999 	.word	0x3f999999
 8004b08:	200006ec 	.word	0x200006ec
 8004b0c:	200006ac 	.word	0x200006ac
 8004b10:	2000070c 	.word	0x2000070c
 8004b14:	20000678 	.word	0x20000678
 8004b18:	0800d71c 	.word	0x0800d71c
 8004b1c:	2000073c 	.word	0x2000073c
 8004b20:	200006f0 	.word	0x200006f0
 8004b24:	200006a8 	.word	0x200006a8
 8004b28:	2000000c 	.word	0x2000000c
 8004b2c:	20000698 	.word	0x20000698
 8004b30:	20000004 	.word	0x20000004
 8004b34:	0800d70c 	.word	0x0800d70c
 8004b38:	20000018 	.word	0x20000018
 8004b3c:	2000001c 	.word	0x2000001c
 8004b40:	20000724 	.word	0x20000724
			  delay(20);
			}
			*/
		  }
		}
		else if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0 && !pause) { // Check if button is pressed
 8004b44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b48:	48b9      	ldr	r0, [pc, #740]	@ (8004e30 <StartDefaultTask+0x1848>)
 8004b4a:	f002 fa29 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d134      	bne.n	8004bbe <StartDefaultTask+0x15d6>
 8004b54:	4bb7      	ldr	r3, [pc, #732]	@ (8004e34 <StartDefaultTask+0x184c>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	f083 0301 	eor.w	r3, r3, #1
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d02d      	beq.n	8004bbe <StartDefaultTask+0x15d6>
		  float tempf = freq;
 8004b62:	4bb5      	ldr	r3, [pc, #724]	@ (8004e38 <StartDefaultTask+0x1850>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		  int tk = KHz;
 8004b6a:	4bb4      	ldr	r3, [pc, #720]	@ (8004e3c <StartDefaultTask+0x1854>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		  int tm = MHz;
 8004b72:	4bb3      	ldr	r3, [pc, #716]	@ (8004e40 <StartDefaultTask+0x1858>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

		  freq = Standby;
 8004b7a:	4bb2      	ldr	r3, [pc, #712]	@ (8004e44 <StartDefaultTask+0x185c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4aae      	ldr	r2, [pc, #696]	@ (8004e38 <StartDefaultTask+0x1850>)
 8004b80:	6013      	str	r3, [r2, #0]
		  KHz = SK;
 8004b82:	4bb1      	ldr	r3, [pc, #708]	@ (8004e48 <StartDefaultTask+0x1860>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4aad      	ldr	r2, [pc, #692]	@ (8004e3c <StartDefaultTask+0x1854>)
 8004b88:	6013      	str	r3, [r2, #0]
		  MHz = SM;
 8004b8a:	4bb0      	ldr	r3, [pc, #704]	@ (8004e4c <StartDefaultTask+0x1864>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4aac      	ldr	r2, [pc, #688]	@ (8004e40 <StartDefaultTask+0x1858>)
 8004b90:	6013      	str	r3, [r2, #0]

		  Standby = tempf;
 8004b92:	4aac      	ldr	r2, [pc, #688]	@ (8004e44 <StartDefaultTask+0x185c>)
 8004b94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004b98:	6013      	str	r3, [r2, #0]
		  SK = tk;
 8004b9a:	4aab      	ldr	r2, [pc, #684]	@ (8004e48 <StartDefaultTask+0x1860>)
 8004b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ba0:	6013      	str	r3, [r2, #0]
		  SM = tm;
 8004ba2:	4aaa      	ldr	r2, [pc, #680]	@ (8004e4c <StartDefaultTask+0x1864>)
 8004ba4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004ba8:	6013      	str	r3, [r2, #0]
		  HAL_Delay(500);
 8004baa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004bae:	f001 fe1d 	bl	80067ec <HAL_Delay>
		  last = millis();
 8004bb2:	f7fd f8c9 	bl	8001d48 <millis>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4aa5      	ldr	r2, [pc, #660]	@ (8004e50 <StartDefaultTask+0x1868>)
 8004bba:	6013      	str	r3, [r2, #0]
		else if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0 && !pause) { // Check if button is pressed
 8004bbc:	e23c      	b.n	8005038 <StartDefaultTask+0x1a50>
		}
		else if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) { // off/stored frequencies
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	48a4      	ldr	r0, [pc, #656]	@ (8004e54 <StartDefaultTask+0x186c>)
 8004bc2:	f002 f9ed 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f040 8235 	bne.w	8005038 <StartDefaultTask+0x1a50>
		  if (!on) {
 8004bce:	4ba2      	ldr	r3, [pc, #648]	@ (8004e58 <StartDefaultTask+0x1870>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	f083 0301 	eor.w	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d032      	beq.n	8004c42 <StartDefaultTask+0x165a>
			on = true;
 8004bdc:	4b9e      	ldr	r3, [pc, #632]	@ (8004e58 <StartDefaultTask+0x1870>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]
			pause = false;
 8004be2:	4b94      	ldr	r3, [pc, #592]	@ (8004e34 <StartDefaultTask+0x184c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
	//		Serial2.print("x"); // turn on
	//		Serial2.print("f");
	//		printFloat2(freq,3);
	//		printFloat2(Standby,3);
	//		Serial2.println("");
			LCDPrint("x");
 8004be8:	489c      	ldr	r0, [pc, #624]	@ (8004e5c <StartDefaultTask+0x1874>)
 8004bea:	f7fe f905 	bl	8002df8 <LCDPrint>
			sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8004bee:	4b92      	ldr	r3, [pc, #584]	@ (8004e38 <StartDefaultTask+0x1850>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fb fc88 	bl	8000508 <__aeabi_f2d>
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	4b91      	ldr	r3, [pc, #580]	@ (8004e44 <StartDefaultTask+0x185c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fb fc81 	bl	8000508 <__aeabi_f2d>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004c0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c12:	e9cd 4500 	strd	r4, r5, [sp]
 8004c16:	2266      	movs	r2, #102	@ 0x66
 8004c18:	4991      	ldr	r1, [pc, #580]	@ (8004e60 <StartDefaultTask+0x1878>)
 8004c1a:	f006 fb69 	bl	800b2f0 <siprintf>
		    LCDPrint(toPrint);
 8004c1e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe f8e8 	bl	8002df8 <LCDPrint>
			freq_last = freq;
 8004c28:	4b83      	ldr	r3, [pc, #524]	@ (8004e38 <StartDefaultTask+0x1850>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a8d      	ldr	r2, [pc, #564]	@ (8004e64 <StartDefaultTask+0x187c>)
 8004c2e:	6013      	str	r3, [r2, #0]
			sfreq_last = Standby;
 8004c30:	4b84      	ldr	r3, [pc, #528]	@ (8004e44 <StartDefaultTask+0x185c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a8c      	ldr	r2, [pc, #560]	@ (8004e68 <StartDefaultTask+0x1880>)
 8004c36:	6013      	str	r3, [r2, #0]
			HAL_Delay(500);
 8004c38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c3c:	f001 fdd6 	bl	80067ec <HAL_Delay>
 8004c40:	e1f5      	b.n	800502e <StartDefaultTask+0x1a46>
			// LOAD DATA, give old data from last session for display to load (can be done by just loading the data from eeprom into the global variables)
		  }
		  else { // it is already on
			unsigned long time = millis();
 8004c42:	f7fd f881 	bl	8001d48 <millis>
 8004c46:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
			while (true) {
			  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1 || (millis() - time > 3000)) {
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	4881      	ldr	r0, [pc, #516]	@ (8004e54 <StartDefaultTask+0x186c>)
 8004c4e:	f002 f9a7 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d00a      	beq.n	8004c6e <StartDefaultTask+0x1686>
 8004c58:	f7fd f876 	bl	8001d48 <millis>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d800      	bhi.n	8004c6e <StartDefaultTask+0x1686>
 8004c6c:	e7ed      	b.n	8004c4a <StartDefaultTask+0x1662>
				break;
			  }
			}
			if (millis() - time > 3000) {
 8004c6e:	f7fd f86b 	bl	8001d48 <millis>
 8004c72:	4602      	mov	r2, r0
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d912      	bls.n	8004ca8 <StartDefaultTask+0x16c0>
			  storestate();
 8004c82:	f7fc ff39 	bl	8001af8 <storestate>
			  on = false;
 8004c86:	4b74      	ldr	r3, [pc, #464]	@ (8004e58 <StartDefaultTask+0x1870>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
			  pause = true;
 8004c8c:	4b69      	ldr	r3, [pc, #420]	@ (8004e34 <StartDefaultTask+0x184c>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
			  bscroll = false;
 8004c92:	4b76      	ldr	r3, [pc, #472]	@ (8004e6c <StartDefaultTask+0x1884>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
			  //Serial2.print("o");
			  LCDPrint("o");
 8004c98:	4875      	ldr	r0, [pc, #468]	@ (8004e70 <StartDefaultTask+0x1888>)
 8004c9a:	f7fe f8ad 	bl	8002df8 <LCDPrint>
			  HAL_Delay(3000);
 8004c9e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004ca2:	f001 fda3 	bl	80067ec <HAL_Delay>
 8004ca6:	e1c2      	b.n	800502e <StartDefaultTask+0x1a46>
			}
			else { // stored frequency mode
			  toDisplay();
 8004ca8:	f7fc fe76 	bl	8001998 <toDisplay>
			  if (eepDisplay[0] == -1) { // no mem exit
 8004cac:	4b71      	ldr	r3, [pc, #452]	@ (8004e74 <StartDefaultTask+0x188c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d10a      	bne.n	8004ccc <StartDefaultTask+0x16e4>
				//Serial2.print("n");
				LCDPrint("n");
 8004cb6:	4870      	ldr	r0, [pc, #448]	@ (8004e78 <StartDefaultTask+0x1890>)
 8004cb8:	f7fe f89e 	bl	8002df8 <LCDPrint>
				HAL_Delay(500);
 8004cbc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004cc0:	f001 fd94 	bl	80067ec <HAL_Delay>
				temp = true;
 8004cc4:	4b6d      	ldr	r3, [pc, #436]	@ (8004e7c <StartDefaultTask+0x1894>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e1b0      	b.n	800502e <StartDefaultTask+0x1a46>
			  }
			  else { // turn on stored frequency mode and stay until click again
				//initial print
				static int lastDC = 0;
				char str[8];
				for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004cd2:	e01d      	b.n	8004d10 <StartDefaultTask+0x1728>
	//			  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
			      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);;
 8004cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8004e80 <StartDefaultTask+0x1898>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a66      	ldr	r2, [pc, #408]	@ (8004e74 <StartDefaultTask+0x188c>)
 8004cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4a66      	ldr	r2, [pc, #408]	@ (8004e84 <StartDefaultTask+0x189c>)
 8004cea:	4867      	ldr	r0, [pc, #412]	@ (8004e88 <StartDefaultTask+0x18a0>)
 8004cec:	f001 f956 	bl	8005f9c <SPIF_ReadSector>
				  str[i] = read[0];
 8004cf0:	4b64      	ldr	r3, [pc, #400]	@ (8004e84 <StartDefaultTask+0x189c>)
 8004cf2:	7819      	ldrb	r1, [r3, #0]
 8004cf4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004cf8:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004cfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d00:	4413      	add	r3, r2
 8004d02:	460a      	mov	r2, r1
 8004d04:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d14:	2b06      	cmp	r3, #6
 8004d16:	dddd      	ble.n	8004cd4 <StartDefaultTask+0x16ec>
				}
				str[7] = 0;
 8004d18:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d1c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004d20:	2200      	movs	r2, #0
 8004d22:	71da      	strb	r2, [r3, #7]
	//			Serial2.print(str);
	//			printFloat2(store,3);
	//			Serial2.println("");

	//			float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004d24:	4b56      	ldr	r3, [pc, #344]	@ (8004e80 <StartDefaultTask+0x1898>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a52      	ldr	r2, [pc, #328]	@ (8004e74 <StartDefaultTask+0x188c>)
 8004d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	2307      	movs	r3, #7
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2301      	movs	r3, #1
 8004d36:	4a53      	ldr	r2, [pc, #332]	@ (8004e84 <StartDefaultTask+0x189c>)
 8004d38:	4853      	ldr	r0, [pc, #332]	@ (8004e88 <StartDefaultTask+0x18a0>)
 8004d3a:	f001 f92f 	bl	8005f9c <SPIF_ReadSector>
			    int val1 = read[0];
 8004d3e:	4b51      	ldr	r3, [pc, #324]	@ (8004e84 <StartDefaultTask+0x189c>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8004d46:	4b4e      	ldr	r3, [pc, #312]	@ (8004e80 <StartDefaultTask+0x1898>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4a      	ldr	r2, [pc, #296]	@ (8004e74 <StartDefaultTask+0x188c>)
 8004d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d50:	4619      	mov	r1, r3
 8004d52:	2308      	movs	r3, #8
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	2301      	movs	r3, #1
 8004d58:	4a4a      	ldr	r2, [pc, #296]	@ (8004e84 <StartDefaultTask+0x189c>)
 8004d5a:	484b      	ldr	r0, [pc, #300]	@ (8004e88 <StartDefaultTask+0x18a0>)
 8004d5c:	f001 f91e 	bl	8005f9c <SPIF_ReadSector>
				int val2 = read[0];
 8004d60:	4b48      	ldr	r3, [pc, #288]	@ (8004e84 <StartDefaultTask+0x189c>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
				float store = val1 + (.025 * val2);
 8004d68:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8004d6c:	f7fb fbba 	bl	80004e4 <__aeabi_i2d>
 8004d70:	4604      	mov	r4, r0
 8004d72:	460d      	mov	r5, r1
 8004d74:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8004d78:	f7fb fbb4 	bl	80004e4 <__aeabi_i2d>
 8004d7c:	a32a      	add	r3, pc, #168	@ (adr r3, 8004e28 <StartDefaultTask+0x1840>)
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	f7fb fc19 	bl	80005b8 <__aeabi_dmul>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f7fb fa5d 	bl	800024c <__adddf3>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7fb fee5 	bl	8000b68 <__aeabi_d2f>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

				sprintf(toPrint, "%c%s%0.3f", 'k', str, store);
 8004da4:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8004da8:	f7fb fbae 	bl	8000508 <__aeabi_f2d>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	f107 0120 	add.w	r1, r7, #32
 8004db4:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004db8:	e9cd 2300 	strd	r2, r3, [sp]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	226b      	movs	r2, #107	@ 0x6b
 8004dc0:	4932      	ldr	r1, [pc, #200]	@ (8004e8c <StartDefaultTask+0x18a4>)
 8004dc2:	f006 fa95 	bl	800b2f0 <siprintf>
				LCDPrint(toPrint);
 8004dc6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe f814 	bl	8002df8 <LCDPrint>

				pause = true;
 8004dd0:	4b18      	ldr	r3, [pc, #96]	@ (8004e34 <StartDefaultTask+0x184c>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
				bscroll = true;
 8004dd6:	4b25      	ldr	r3, [pc, #148]	@ (8004e6c <StartDefaultTask+0x1884>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
				temp = true;
 8004ddc:	4b27      	ldr	r3, [pc, #156]	@ (8004e7c <StartDefaultTask+0x1894>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
				unsigned long timer = millis();
 8004de2:	f7fc ffb1 	bl	8001d48 <millis>
 8004de6:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
				bool valid = false;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
				//loop + scroll setup
				while (millis() - timer < 5000) {
 8004df0:	e0d2      	b.n	8004f98 <StartDefaultTask+0x19b0>
				  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 8004df2:	2101      	movs	r1, #1
 8004df4:	4817      	ldr	r0, [pc, #92]	@ (8004e54 <StartDefaultTask+0x186c>)
 8004df6:	f002 f8d3 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <StartDefaultTask+0x1820>
					valid = true;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
					break;
 8004e06:	e0d2      	b.n	8004fae <StartDefaultTask+0x19c6>
				  }
				  if (lastDC != dispCount) {
 8004e08:	4b21      	ldr	r3, [pc, #132]	@ (8004e90 <StartDefaultTask+0x18a8>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004e80 <StartDefaultTask+0x1898>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	f000 80c1 	beq.w	8004f98 <StartDefaultTask+0x19b0>
					timer = millis();
 8004e16:	f7fc ff97 	bl	8001d48 <millis>
 8004e1a:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
					char str[8];
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004e24:	e054      	b.n	8004ed0 <StartDefaultTask+0x18e8>
 8004e26:	bf00      	nop
 8004e28:	9999999a 	.word	0x9999999a
 8004e2c:	3f999999 	.word	0x3f999999
 8004e30:	40011800 	.word	0x40011800
 8004e34:	2000000c 	.word	0x2000000c
 8004e38:	20000698 	.word	0x20000698
 8004e3c:	2000069c 	.word	0x2000069c
 8004e40:	20000000 	.word	0x20000000
 8004e44:	20000004 	.word	0x20000004
 8004e48:	200006a0 	.word	0x200006a0
 8004e4c:	20000008 	.word	0x20000008
 8004e50:	20000724 	.word	0x20000724
 8004e54:	40011000 	.word	0x40011000
 8004e58:	200006a9 	.word	0x200006a9
 8004e5c:	0800d73c 	.word	0x0800d73c
 8004e60:	0800d70c 	.word	0x0800d70c
 8004e64:	20000018 	.word	0x20000018
 8004e68:	2000001c 	.word	0x2000001c
 8004e6c:	200006f4 	.word	0x200006f4
 8004e70:	0800d740 	.word	0x0800d740
 8004e74:	200006ac 	.word	0x200006ac
 8004e78:	0800d744 	.word	0x0800d744
 8004e7c:	20000708 	.word	0x20000708
 8004e80:	200006ec 	.word	0x200006ec
 8004e84:	2000070c 	.word	0x2000070c
 8004e88:	20000678 	.word	0x20000678
 8004e8c:	0800d71c 	.word	0x0800d71c
 8004e90:	20000740 	.word	0x20000740
	//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
				      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8004e94:	4bbe      	ldr	r3, [pc, #760]	@ (8005190 <StartDefaultTask+0x1ba8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4abe      	ldr	r2, [pc, #760]	@ (8005194 <StartDefaultTask+0x1bac>)
 8004e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4abb      	ldr	r2, [pc, #748]	@ (8005198 <StartDefaultTask+0x1bb0>)
 8004eaa:	48bc      	ldr	r0, [pc, #752]	@ (800519c <StartDefaultTask+0x1bb4>)
 8004eac:	f001 f876 	bl	8005f9c <SPIF_ReadSector>
					  str[i] = read[0];
 8004eb0:	4bb9      	ldr	r3, [pc, #740]	@ (8005198 <StartDefaultTask+0x1bb0>)
 8004eb2:	7819      	ldrb	r1, [r3, #0]
 8004eb4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004eb8:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8004ebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ec0:	4413      	add	r3, r2
 8004ec2:	460a      	mov	r2, r1
 8004ec4:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004ec6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eca:	3301      	adds	r3, #1
 8004ecc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ed4:	2b06      	cmp	r3, #6
 8004ed6:	dddd      	ble.n	8004e94 <StartDefaultTask+0x18ac>
					}
					str[7] = 0;
 8004ed8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004edc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	71da      	strb	r2, [r3, #7]
	//				Serial2.print(str);
	//				Serial.print(str);
	//				printFloat2(store,3);
	//				Serial2.println("");
	//				float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004ee4:	4baa      	ldr	r3, [pc, #680]	@ (8005190 <StartDefaultTask+0x1ba8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4aaa      	ldr	r2, [pc, #680]	@ (8005194 <StartDefaultTask+0x1bac>)
 8004eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	2307      	movs	r3, #7
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4aa8      	ldr	r2, [pc, #672]	@ (8005198 <StartDefaultTask+0x1bb0>)
 8004ef8:	48a8      	ldr	r0, [pc, #672]	@ (800519c <StartDefaultTask+0x1bb4>)
 8004efa:	f001 f84f 	bl	8005f9c <SPIF_ReadSector>
				    int val1 = read[0];
 8004efe:	4ba6      	ldr	r3, [pc, #664]	@ (8005198 <StartDefaultTask+0x1bb0>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
				    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8004f06:	4ba2      	ldr	r3, [pc, #648]	@ (8005190 <StartDefaultTask+0x1ba8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4aa2      	ldr	r2, [pc, #648]	@ (8005194 <StartDefaultTask+0x1bac>)
 8004f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f10:	4619      	mov	r1, r3
 8004f12:	2308      	movs	r3, #8
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	2301      	movs	r3, #1
 8004f18:	4a9f      	ldr	r2, [pc, #636]	@ (8005198 <StartDefaultTask+0x1bb0>)
 8004f1a:	48a0      	ldr	r0, [pc, #640]	@ (800519c <StartDefaultTask+0x1bb4>)
 8004f1c:	f001 f83e 	bl	8005f9c <SPIF_ReadSector>
					int val2 = read[0];
 8004f20:	4b9d      	ldr	r3, [pc, #628]	@ (8005198 <StartDefaultTask+0x1bb0>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
					float store = val1 + (.025 * val2);
 8004f28:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8004f2c:	f7fb fada 	bl	80004e4 <__aeabi_i2d>
 8004f30:	4604      	mov	r4, r0
 8004f32:	460d      	mov	r5, r1
 8004f34:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8004f38:	f7fb fad4 	bl	80004e4 <__aeabi_i2d>
 8004f3c:	a392      	add	r3, pc, #584	@ (adr r3, 8005188 <StartDefaultTask+0x1ba0>)
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	f7fb fb39 	bl	80005b8 <__aeabi_dmul>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	f7fb f97d 	bl	800024c <__adddf3>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f7fb fe05 	bl	8000b68 <__aeabi_d2f>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

					sprintf(toPrint, "%c%s%0.3f", 'k', str, store);
 8004f64:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8004f68:	f7fb face 	bl	8000508 <__aeabi_f2d>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	f107 0118 	add.w	r1, r7, #24
 8004f74:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004f78:	e9cd 2300 	strd	r2, r3, [sp]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	226b      	movs	r2, #107	@ 0x6b
 8004f80:	4987      	ldr	r1, [pc, #540]	@ (80051a0 <StartDefaultTask+0x1bb8>)
 8004f82:	f006 f9b5 	bl	800b2f0 <siprintf>
					LCDPrint(toPrint);
 8004f86:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd ff34 	bl	8002df8 <LCDPrint>

					lastDC = dispCount;
 8004f90:	4b7f      	ldr	r3, [pc, #508]	@ (8005190 <StartDefaultTask+0x1ba8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a83      	ldr	r2, [pc, #524]	@ (80051a4 <StartDefaultTask+0x1bbc>)
 8004f96:	6013      	str	r3, [r2, #0]
				while (millis() - timer < 5000) {
 8004f98:	f7fc fed6 	bl	8001d48 <millis>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	f67f af22 	bls.w	8004df2 <StartDefaultTask+0x180a>
				  }
				}
				//post loop (pressed button)
				//change the standby to the stored that was selected and call it a day freq will update and display
				if (valid) {
 8004fae:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d028      	beq.n	8005008 <StartDefaultTask+0x1a20>
	//			  SM = EEPROM.read(eepDisplay[dispCount] + 7);
	//			  SK = EEPROM.read(eepDisplay[dispCount] + 8) * 25;
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004fb6:	4b76      	ldr	r3, [pc, #472]	@ (8005190 <StartDefaultTask+0x1ba8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a76      	ldr	r2, [pc, #472]	@ (8005194 <StartDefaultTask+0x1bac>)
 8004fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	2307      	movs	r3, #7
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4a73      	ldr	r2, [pc, #460]	@ (8005198 <StartDefaultTask+0x1bb0>)
 8004fca:	4874      	ldr	r0, [pc, #464]	@ (800519c <StartDefaultTask+0x1bb4>)
 8004fcc:	f000 ffe6 	bl	8005f9c <SPIF_ReadSector>
				  SM = read[0];
 8004fd0:	4b71      	ldr	r3, [pc, #452]	@ (8005198 <StartDefaultTask+0x1bb0>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b74      	ldr	r3, [pc, #464]	@ (80051a8 <StartDefaultTask+0x1bc0>)
 8004fd8:	601a      	str	r2, [r3, #0]
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8004fda:	4b6d      	ldr	r3, [pc, #436]	@ (8005190 <StartDefaultTask+0x1ba8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a6d      	ldr	r2, [pc, #436]	@ (8005194 <StartDefaultTask+0x1bac>)
 8004fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2301      	movs	r3, #1
 8004fec:	4a6a      	ldr	r2, [pc, #424]	@ (8005198 <StartDefaultTask+0x1bb0>)
 8004fee:	486b      	ldr	r0, [pc, #428]	@ (800519c <StartDefaultTask+0x1bb4>)
 8004ff0:	f000 ffd4 	bl	8005f9c <SPIF_ReadSector>
				  SK = read[0] * 25;
 8004ff4:	4b68      	ldr	r3, [pc, #416]	@ (8005198 <StartDefaultTask+0x1bb0>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009a      	lsls	r2, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	4a69      	ldr	r2, [pc, #420]	@ (80051ac <StartDefaultTask+0x1bc4>)
 8005006:	6013      	str	r3, [r2, #0]
				}
				dispCount = 0;
 8005008:	4b61      	ldr	r3, [pc, #388]	@ (8005190 <StartDefaultTask+0x1ba8>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
				lastDC = 0;
 800500e:	4b65      	ldr	r3, [pc, #404]	@ (80051a4 <StartDefaultTask+0x1bbc>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
				pause = false;
 8005014:	4b66      	ldr	r3, [pc, #408]	@ (80051b0 <StartDefaultTask+0x1bc8>)
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
				bscroll = false;
 800501a:	4b66      	ldr	r3, [pc, #408]	@ (80051b4 <StartDefaultTask+0x1bcc>)
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
				LCDPrint("f");
 8005020:	4865      	ldr	r0, [pc, #404]	@ (80051b8 <StartDefaultTask+0x1bd0>)
 8005022:	f7fd fee9 	bl	8002df8 <LCDPrint>
				HAL_Delay(500);
 8005026:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800502a:	f001 fbdf 	bl	80067ec <HAL_Delay>
			  }
			}
		  }
		  last = millis();
 800502e:	f7fc fe8b 	bl	8001d48 <millis>
 8005032:	4603      	mov	r3, r0
 8005034:	4a61      	ldr	r2, [pc, #388]	@ (80051bc <StartDefaultTask+0x1bd4>)
 8005036:	6013      	str	r3, [r2, #0]
		}

		// If count has changed print the new value to serial
		if (vol != vol_last) { // mode v
 8005038:	4b61      	ldr	r3, [pc, #388]	@ (80051c0 <StartDefaultTask+0x1bd8>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4b61      	ldr	r3, [pc, #388]	@ (80051c4 <StartDefaultTask+0x1bdc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d03b      	beq.n	80050bc <StartDefaultTask+0x1ad4>
		  int V = vol + 48;
 8005044:	4b5e      	ldr	r3, [pc, #376]	@ (80051c0 <StartDefaultTask+0x1bd8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3330      	adds	r3, #48	@ 0x30
 800504a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  char v = (char)V;
 800504e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005052:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		  char VSfinal[2] = {v,0};
 8005056:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800505a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800505e:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005068:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800506c:	2200      	movs	r2, #0
 800506e:	705a      	strb	r2, [r3, #1]
		  Sender(VSfinal,2); //set vol
 8005070:	f107 0314 	add.w	r3, r7, #20
 8005074:	2102      	movs	r1, #2
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe f9d0 	bl	800341c <Sender>

	//	  Serial2.print("v");
	//	  printFloat2(freq,3);
	//	  Serial2.print(vol);
	//	  Serial2.println("");
		  sprintf(toPrint, "%c%0.3f%d", 'v', freq, vol);
 800507c:	4b52      	ldr	r3, [pc, #328]	@ (80051c8 <StartDefaultTask+0x1be0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f7fb fa41 	bl	8000508 <__aeabi_f2d>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	494d      	ldr	r1, [pc, #308]	@ (80051c0 <StartDefaultTask+0x1bd8>)
 800508c:	6809      	ldr	r1, [r1, #0]
 800508e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005092:	9102      	str	r1, [sp, #8]
 8005094:	e9cd 2300 	strd	r2, r3, [sp]
 8005098:	2276      	movs	r2, #118	@ 0x76
 800509a:	494c      	ldr	r1, [pc, #304]	@ (80051cc <StartDefaultTask+0x1be4>)
 800509c:	f006 f928 	bl	800b2f0 <siprintf>
		  LCDPrint(toPrint);
 80050a0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fd fea7 	bl	8002df8 <LCDPrint>

		  vol_last = vol;
 80050aa:	4b45      	ldr	r3, [pc, #276]	@ (80051c0 <StartDefaultTask+0x1bd8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a45      	ldr	r2, [pc, #276]	@ (80051c4 <StartDefaultTask+0x1bdc>)
 80050b0:	6013      	str	r3, [r2, #0]
		  last = millis();
 80050b2:	f7fc fe49 	bl	8001d48 <millis>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4a40      	ldr	r2, [pc, #256]	@ (80051bc <StartDefaultTask+0x1bd4>)
 80050ba:	6013      	str	r3, [r2, #0]
		}
		if (obs != obs_last) { // mode s
 80050bc:	4b44      	ldr	r3, [pc, #272]	@ (80051d0 <StartDefaultTask+0x1be8>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b44      	ldr	r3, [pc, #272]	@ (80051d4 <StartDefaultTask+0x1bec>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d019      	beq.n	80050fc <StartDefaultTask+0x1b14>

	//	  Serial2.print("s");
	//	  printFloat2(freq,3);
	//	  Serial2.print(squelch); //set vol/squelch
	//	  Serial2.println("");
		  sprintf(toPrint, "%c%03d", 'b', obs);
 80050c8:	4b41      	ldr	r3, [pc, #260]	@ (80051d0 <StartDefaultTask+0x1be8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80050d0:	2262      	movs	r2, #98	@ 0x62
 80050d2:	4941      	ldr	r1, [pc, #260]	@ (80051d8 <StartDefaultTask+0x1bf0>)
 80050d4:	f006 f90c 	bl	800b2f0 <siprintf>
		  LCDPrint(toPrint);
 80050d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fd fe8b 	bl	8002df8 <LCDPrint>

		  Sender("",3);
 80050e2:	2103      	movs	r1, #3
 80050e4:	483d      	ldr	r0, [pc, #244]	@ (80051dc <StartDefaultTask+0x1bf4>)
 80050e6:	f7fe f999 	bl	800341c <Sender>
		  obs_last = obs;
 80050ea:	4b39      	ldr	r3, [pc, #228]	@ (80051d0 <StartDefaultTask+0x1be8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a39      	ldr	r2, [pc, #228]	@ (80051d4 <StartDefaultTask+0x1bec>)
 80050f0:	6013      	str	r3, [r2, #0]
		  last = millis();
 80050f2:	f7fc fe29 	bl	8001d48 <millis>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4a30      	ldr	r2, [pc, #192]	@ (80051bc <StartDefaultTask+0x1bd4>)
 80050fa:	6013      	str	r3, [r2, #0]
		}
		if (freq != freq_last || Standby != sfreq_last) { // mode f
 80050fc:	4b32      	ldr	r3, [pc, #200]	@ (80051c8 <StartDefaultTask+0x1be0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a37      	ldr	r2, [pc, #220]	@ (80051e0 <StartDefaultTask+0x1bf8>)
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f7fb fdc2 	bl	8000c90 <__aeabi_fcmpeq>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <StartDefaultTask+0x1b42>
 8005112:	4b34      	ldr	r3, [pc, #208]	@ (80051e4 <StartDefaultTask+0x1bfc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a34      	ldr	r2, [pc, #208]	@ (80051e8 <StartDefaultTask+0x1c00>)
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	4611      	mov	r1, r2
 800511c:	4618      	mov	r0, r3
 800511e:	f7fb fdb7 	bl	8000c90 <__aeabi_fcmpeq>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 80c9 	bne.w	80052bc <StartDefaultTask+0x1cd4>
		  int MA = MHz - 48;
 800512a:	4b30      	ldr	r3, [pc, #192]	@ (80051ec <StartDefaultTask+0x1c04>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3b30      	subs	r3, #48	@ 0x30
 8005130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  int KA = (KHz/25) + 48;
 8005134:	4b2e      	ldr	r3, [pc, #184]	@ (80051f0 <StartDefaultTask+0x1c08>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2e      	ldr	r2, [pc, #184]	@ (80051f4 <StartDefaultTask+0x1c0c>)
 800513a:	fb82 1203 	smull	r1, r2, r2, r3
 800513e:	10d2      	asrs	r2, r2, #3
 8005140:	17db      	asrs	r3, r3, #31
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	3330      	adds	r3, #48	@ 0x30
 8005146:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  char m = (char)MA;
 800514a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800514e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		  char k = (char)KA;
 8005152:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005156:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		  char Mfinal[3] = {m,k,0};
 800515a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800515e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005162:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800516c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005170:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8005174:	705a      	strb	r2, [r3, #1]
 8005176:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800517a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800517e:	2200      	movs	r2, #0
 8005180:	709a      	strb	r2, [r3, #2]
 8005182:	e039      	b.n	80051f8 <StartDefaultTask+0x1c10>
 8005184:	f3af 8000 	nop.w
 8005188:	9999999a 	.word	0x9999999a
 800518c:	3f999999 	.word	0x3f999999
 8005190:	200006ec 	.word	0x200006ec
 8005194:	200006ac 	.word	0x200006ac
 8005198:	2000070c 	.word	0x2000070c
 800519c:	20000678 	.word	0x20000678
 80051a0:	0800d71c 	.word	0x0800d71c
 80051a4:	20000740 	.word	0x20000740
 80051a8:	20000008 	.word	0x20000008
 80051ac:	200006a0 	.word	0x200006a0
 80051b0:	2000000c 	.word	0x2000000c
 80051b4:	200006f4 	.word	0x200006f4
 80051b8:	0800d748 	.word	0x0800d748
 80051bc:	20000724 	.word	0x20000724
 80051c0:	200006a4 	.word	0x200006a4
 80051c4:	20000744 	.word	0x20000744
 80051c8:	20000698 	.word	0x20000698
 80051cc:	0800d74c 	.word	0x0800d74c
 80051d0:	200006fc 	.word	0x200006fc
 80051d4:	20000748 	.word	0x20000748
 80051d8:	0800d758 	.word	0x0800d758
 80051dc:	0800d760 	.word	0x0800d760
 80051e0:	20000018 	.word	0x20000018
 80051e4:	20000004 	.word	0x20000004
 80051e8:	2000001c 	.word	0x2000001c
 80051ec:	20000000 	.word	0x20000000
 80051f0:	2000069c 	.word	0x2000069c
 80051f4:	51eb851f 	.word	0x51eb851f
		  Sender(Mfinal, 0); //set active
 80051f8:	f107 0310 	add.w	r3, r7, #16
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe f90c 	bl	800341c <Sender>

		  MA = SM - 48;
 8005204:	4b2e      	ldr	r3, [pc, #184]	@ (80052c0 <StartDefaultTask+0x1cd8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3b30      	subs	r3, #48	@ 0x30
 800520a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  KA = (SK/25) + 48;
 800520e:	4b2d      	ldr	r3, [pc, #180]	@ (80052c4 <StartDefaultTask+0x1cdc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2d      	ldr	r2, [pc, #180]	@ (80052c8 <StartDefaultTask+0x1ce0>)
 8005214:	fb82 1203 	smull	r1, r2, r2, r3
 8005218:	10d2      	asrs	r2, r2, #3
 800521a:	17db      	asrs	r3, r3, #31
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	3330      	adds	r3, #48	@ 0x30
 8005220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  m = (char)MA;
 8005224:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005228:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		  k = (char)KA;
 800522c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005230:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		  char Sfinal[3] = {m,k,0};
 8005234:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005238:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800523c:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005246:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800524a:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800524e:	705a      	strb	r2, [r3, #1]
 8005250:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005254:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005258:	2200      	movs	r2, #0
 800525a:	709a      	strb	r2, [r3, #2]
		  Sender(Sfinal, 1); //set standby
 800525c:	f107 030c 	add.w	r3, r7, #12
 8005260:	2101      	movs	r1, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe f8da 	bl	800341c <Sender>

	//	  Serial2.print("f");
	//	  printFloat2(freq,3);
	//	  printFloat2(Standby,3);
	//	  Serial2.println("");
		  sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8005268:	4b18      	ldr	r3, [pc, #96]	@ (80052cc <StartDefaultTask+0x1ce4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f7fb f94b 	bl	8000508 <__aeabi_f2d>
 8005272:	4604      	mov	r4, r0
 8005274:	460d      	mov	r5, r1
 8005276:	4b16      	ldr	r3, [pc, #88]	@ (80052d0 <StartDefaultTask+0x1ce8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f7fb f944 	bl	8000508 <__aeabi_f2d>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005288:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800528c:	e9cd 4500 	strd	r4, r5, [sp]
 8005290:	2266      	movs	r2, #102	@ 0x66
 8005292:	4910      	ldr	r1, [pc, #64]	@ (80052d4 <StartDefaultTask+0x1cec>)
 8005294:	f006 f82c 	bl	800b2f0 <siprintf>
		  LCDPrint(toPrint);
 8005298:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800529c:	4618      	mov	r0, r3
 800529e:	f7fd fdab 	bl	8002df8 <LCDPrint>

		  sfreq_last = Standby;
 80052a2:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <StartDefaultTask+0x1ce8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a0c      	ldr	r2, [pc, #48]	@ (80052d8 <StartDefaultTask+0x1cf0>)
 80052a8:	6013      	str	r3, [r2, #0]
		  freq_last = freq;
 80052aa:	4b08      	ldr	r3, [pc, #32]	@ (80052cc <StartDefaultTask+0x1ce4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a0b      	ldr	r2, [pc, #44]	@ (80052dc <StartDefaultTask+0x1cf4>)
 80052b0:	6013      	str	r3, [r2, #0]
		  last = millis();
 80052b2:	f7fc fd49 	bl	8001d48 <millis>
 80052b6:	4603      	mov	r3, r0
 80052b8:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <StartDefaultTask+0x1cf8>)
 80052ba:	6013      	str	r3, [r2, #0]
	  {
 80052bc:	f7fe b99c 	b.w	80035f8 <StartDefaultTask+0x10>
 80052c0:	20000008 	.word	0x20000008
 80052c4:	200006a0 	.word	0x200006a0
 80052c8:	51eb851f 	.word	0x51eb851f
 80052cc:	20000698 	.word	0x20000698
 80052d0:	20000004 	.word	0x20000004
 80052d4:	0800d70c 	.word	0x0800d70c
 80052d8:	2000001c 	.word	0x2000001c
 80052dc:	20000018 	.word	0x20000018
 80052e0:	20000724 	.word	0x20000724

080052e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a04      	ldr	r2, [pc, #16]	@ (8005304 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80052f6:	f001 fa5d 	bl	80067b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40001000 	.word	0x40001000

08005308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800530c:	b672      	cpsid	i
}
 800530e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005310:	bf00      	nop
 8005312:	e7fd      	b.n	8005310 <Error_Handler+0x8>
 8005314:	0000      	movs	r0, r0
	...

08005318 <task3_init>:
    HAL_UART_Transmit(&huart5, str2, strlen((char*)str2), 500);
    HAL_Delay(100);
}

void task3_init(void const * argument)
{ // data synchronization between cdu and rcu
 8005318:	b5b0      	push	{r4, r5, r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
//		  response = HAL_UART_Receive(&huart5, rxbuffcdu, 1, 500);
//		  HAL_UART

		  //printf("%u\n",rxbuffcdu);
		//HAL_Delay(100);
		  if(responseCDU==HAL_OK) //if transfer is successful
 8005320:	4b85      	ldr	r3, [pc, #532]	@ (8005538 <task3_init+0x220>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d118      	bne.n	800535a <task3_init+0x42>
		  {
			  responseCDU = 2;
 8005328:	4b83      	ldr	r3, [pc, #524]	@ (8005538 <task3_init+0x220>)
 800532a:	2202      	movs	r2, #2
 800532c:	701a      	strb	r2, [r3, #0]
//			  rxmsgcdu[rxcountcdu] = rxbuffcdu[0];
//			  rxcountcdu++;
			  if (rxcountcdu > 24) {
 800532e:	4b83      	ldr	r3, [pc, #524]	@ (800553c <task3_init+0x224>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b18      	cmp	r3, #24
 8005334:	dd02      	ble.n	800533c <task3_init+0x24>
				  rxcountcdu = 0;
 8005336:	4b81      	ldr	r3, [pc, #516]	@ (800553c <task3_init+0x224>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
//			  if (rxbuffcdu[0] == '$')
//			  {
//				 time = millis();
//			  }

			  if (rxbuffcdu[0] == '\n')
 800533c:	4b80      	ldr	r3, [pc, #512]	@ (8005540 <task3_init+0x228>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b0a      	cmp	r3, #10
 8005342:	d10a      	bne.n	800535a <task3_init+0x42>
			  {
//				  unsigned int duration = millis() - time;
//				  print();
				  rxmsgcdu[rxcountcdu] = 0;
 8005344:	4b7d      	ldr	r3, [pc, #500]	@ (800553c <task3_init+0x224>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a7e      	ldr	r2, [pc, #504]	@ (8005544 <task3_init+0x22c>)
 800534a:	2100      	movs	r1, #0
 800534c:	54d1      	strb	r1, [r2, r3]
				  rxcountcdu = 0;
 800534e:	4b7b      	ldr	r3, [pc, #492]	@ (800553c <task3_init+0x224>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
				  rxfreecdu = true;
 8005354:	4b7c      	ldr	r3, [pc, #496]	@ (8005548 <task3_init+0x230>)
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
//		  {
//			  // no message in 1 seconds
//			  __HAL_UART_FLUSH_DRREGISTER(&huart5);  // Clear the UART Data Register
//			  rxcountcdu = 0;
//		  }
		  if(rxfreecdu)
 800535a:	4b7b      	ldr	r3, [pc, #492]	@ (8005548 <task3_init+0x230>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0de      	beq.n	8005320 <task3_init+0x8>
		  {
			  rxfreecdu = false;
 8005362:	4b79      	ldr	r3, [pc, #484]	@ (8005548 <task3_init+0x230>)
 8005364:	2200      	movs	r2, #0
 8005366:	701a      	strb	r2, [r3, #0]
			  if(rxmsgcdu[6] == '2' && rxmsgcdu[7] == '7')
 8005368:	4b76      	ldr	r3, [pc, #472]	@ (8005544 <task3_init+0x22c>)
 800536a:	799b      	ldrb	r3, [r3, #6]
 800536c:	2b32      	cmp	r3, #50	@ 0x32
 800536e:	d14b      	bne.n	8005408 <task3_init+0xf0>
 8005370:	4b74      	ldr	r3, [pc, #464]	@ (8005544 <task3_init+0x22c>)
 8005372:	79db      	ldrb	r3, [r3, #7]
 8005374:	2b37      	cmp	r3, #55	@ 0x37
 8005376:	d147      	bne.n	8005408 <task3_init+0xf0>
			  {
				  float rxfreq;
				  rxfreq = (rxmsgcdu[8] + 48) + ((rxmsgcdu[9] - 48) * .025); // active frequency
 8005378:	4b72      	ldr	r3, [pc, #456]	@ (8005544 <task3_init+0x22c>)
 800537a:	7a1b      	ldrb	r3, [r3, #8]
 800537c:	3330      	adds	r3, #48	@ 0x30
 800537e:	4618      	mov	r0, r3
 8005380:	f7fb f8b0 	bl	80004e4 <__aeabi_i2d>
 8005384:	4604      	mov	r4, r0
 8005386:	460d      	mov	r5, r1
 8005388:	4b6e      	ldr	r3, [pc, #440]	@ (8005544 <task3_init+0x22c>)
 800538a:	7a5b      	ldrb	r3, [r3, #9]
 800538c:	3b30      	subs	r3, #48	@ 0x30
 800538e:	4618      	mov	r0, r3
 8005390:	f7fb f8a8 	bl	80004e4 <__aeabi_i2d>
 8005394:	a366      	add	r3, pc, #408	@ (adr r3, 8005530 <task3_init+0x218>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	f7fb f90d 	bl	80005b8 <__aeabi_dmul>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4620      	mov	r0, r4
 80053a4:	4629      	mov	r1, r5
 80053a6:	f7fa ff51 	bl	800024c <__adddf3>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4610      	mov	r0, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	f7fb fbd9 	bl	8000b68 <__aeabi_d2f>
 80053b6:	4603      	mov	r3, r0
 80053b8:	617b      	str	r3, [r7, #20]
				  if (rxfreq != freq)
 80053ba:	4b64      	ldr	r3, [pc, #400]	@ (800554c <task3_init+0x234>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4619      	mov	r1, r3
 80053c0:	6978      	ldr	r0, [r7, #20]
 80053c2:	f7fb fc65 	bl	8000c90 <__aeabi_fcmpeq>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d000      	beq.n	80053ce <task3_init+0xb6>
			  {
 80053cc:	e0ae      	b.n	800552c <task3_init+0x214>
				  {
					  freq = rxfreq;
 80053ce:	4a5f      	ldr	r2, [pc, #380]	@ (800554c <task3_init+0x234>)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	6013      	str	r3, [r2, #0]
					  MHz = rxmsgcdu[8] + 48;
 80053d4:	4b5b      	ldr	r3, [pc, #364]	@ (8005544 <task3_init+0x22c>)
 80053d6:	7a1b      	ldrb	r3, [r3, #8]
 80053d8:	3330      	adds	r3, #48	@ 0x30
 80053da:	4a5d      	ldr	r2, [pc, #372]	@ (8005550 <task3_init+0x238>)
 80053dc:	6013      	str	r3, [r2, #0]
					  KHz = (rxmsgcdu[9] - 48) * .025;
 80053de:	4b59      	ldr	r3, [pc, #356]	@ (8005544 <task3_init+0x22c>)
 80053e0:	7a5b      	ldrb	r3, [r3, #9]
 80053e2:	3b30      	subs	r3, #48	@ 0x30
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fb f87d 	bl	80004e4 <__aeabi_i2d>
 80053ea:	a351      	add	r3, pc, #324	@ (adr r3, 8005530 <task3_init+0x218>)
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f7fb f8e2 	bl	80005b8 <__aeabi_dmul>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4610      	mov	r0, r2
 80053fa:	4619      	mov	r1, r3
 80053fc:	f7fb fb8c 	bl	8000b18 <__aeabi_d2iz>
 8005400:	4603      	mov	r3, r0
 8005402:	4a54      	ldr	r2, [pc, #336]	@ (8005554 <task3_init+0x23c>)
 8005404:	6013      	str	r3, [r2, #0]
			  {
 8005406:	e091      	b.n	800552c <task3_init+0x214>
				  else
				  {

				  }
			  }
			  else if(rxmsgcdu[6] == '2' && rxmsgcdu[7] == '8')// standby frequency
 8005408:	4b4e      	ldr	r3, [pc, #312]	@ (8005544 <task3_init+0x22c>)
 800540a:	799b      	ldrb	r3, [r3, #6]
 800540c:	2b32      	cmp	r3, #50	@ 0x32
 800540e:	d14b      	bne.n	80054a8 <task3_init+0x190>
 8005410:	4b4c      	ldr	r3, [pc, #304]	@ (8005544 <task3_init+0x22c>)
 8005412:	79db      	ldrb	r3, [r3, #7]
 8005414:	2b38      	cmp	r3, #56	@ 0x38
 8005416:	d147      	bne.n	80054a8 <task3_init+0x190>
			  {
				  float rxfreq;
				  rxfreq = (rxmsgcdu[8] + 48) + ((rxmsgcdu[9] - 48) * .025);
 8005418:	4b4a      	ldr	r3, [pc, #296]	@ (8005544 <task3_init+0x22c>)
 800541a:	7a1b      	ldrb	r3, [r3, #8]
 800541c:	3330      	adds	r3, #48	@ 0x30
 800541e:	4618      	mov	r0, r3
 8005420:	f7fb f860 	bl	80004e4 <__aeabi_i2d>
 8005424:	4604      	mov	r4, r0
 8005426:	460d      	mov	r5, r1
 8005428:	4b46      	ldr	r3, [pc, #280]	@ (8005544 <task3_init+0x22c>)
 800542a:	7a5b      	ldrb	r3, [r3, #9]
 800542c:	3b30      	subs	r3, #48	@ 0x30
 800542e:	4618      	mov	r0, r3
 8005430:	f7fb f858 	bl	80004e4 <__aeabi_i2d>
 8005434:	a33e      	add	r3, pc, #248	@ (adr r3, 8005530 <task3_init+0x218>)
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f7fb f8bd 	bl	80005b8 <__aeabi_dmul>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4620      	mov	r0, r4
 8005444:	4629      	mov	r1, r5
 8005446:	f7fa ff01 	bl	800024c <__adddf3>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4610      	mov	r0, r2
 8005450:	4619      	mov	r1, r3
 8005452:	f7fb fb89 	bl	8000b68 <__aeabi_d2f>
 8005456:	4603      	mov	r3, r0
 8005458:	613b      	str	r3, [r7, #16]
				  if (rxfreq != Standby)
 800545a:	4b3f      	ldr	r3, [pc, #252]	@ (8005558 <task3_init+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4619      	mov	r1, r3
 8005460:	6938      	ldr	r0, [r7, #16]
 8005462:	f7fb fc15 	bl	8000c90 <__aeabi_fcmpeq>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d000      	beq.n	800546e <task3_init+0x156>
			  {
 800546c:	e05e      	b.n	800552c <task3_init+0x214>
				  {
					  Standby = rxfreq;
 800546e:	4a3a      	ldr	r2, [pc, #232]	@ (8005558 <task3_init+0x240>)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	6013      	str	r3, [r2, #0]
					  SM = rxmsgcdu[8] + 48;
 8005474:	4b33      	ldr	r3, [pc, #204]	@ (8005544 <task3_init+0x22c>)
 8005476:	7a1b      	ldrb	r3, [r3, #8]
 8005478:	3330      	adds	r3, #48	@ 0x30
 800547a:	4a38      	ldr	r2, [pc, #224]	@ (800555c <task3_init+0x244>)
 800547c:	6013      	str	r3, [r2, #0]
					  SK = (rxmsgcdu[9] - 48) * .025;
 800547e:	4b31      	ldr	r3, [pc, #196]	@ (8005544 <task3_init+0x22c>)
 8005480:	7a5b      	ldrb	r3, [r3, #9]
 8005482:	3b30      	subs	r3, #48	@ 0x30
 8005484:	4618      	mov	r0, r3
 8005486:	f7fb f82d 	bl	80004e4 <__aeabi_i2d>
 800548a:	a329      	add	r3, pc, #164	@ (adr r3, 8005530 <task3_init+0x218>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f7fb f892 	bl	80005b8 <__aeabi_dmul>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4610      	mov	r0, r2
 800549a:	4619      	mov	r1, r3
 800549c:	f7fb fb3c 	bl	8000b18 <__aeabi_d2iz>
 80054a0:	4603      	mov	r3, r0
 80054a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005560 <task3_init+0x248>)
 80054a4:	6013      	str	r3, [r2, #0]
			  {
 80054a6:	e041      	b.n	800552c <task3_init+0x214>
				  {

				  }

			  }
			  else if(rxmsgcdu[6] == '3' && rxmsgcdu[7] == '4')// obs value
 80054a8:	4b26      	ldr	r3, [pc, #152]	@ (8005544 <task3_init+0x22c>)
 80054aa:	799b      	ldrb	r3, [r3, #6]
 80054ac:	2b33      	cmp	r3, #51	@ 0x33
 80054ae:	d124      	bne.n	80054fa <task3_init+0x1e2>
 80054b0:	4b24      	ldr	r3, [pc, #144]	@ (8005544 <task3_init+0x22c>)
 80054b2:	79db      	ldrb	r3, [r3, #7]
 80054b4:	2b34      	cmp	r3, #52	@ 0x34
 80054b6:	d120      	bne.n	80054fa <task3_init+0x1e2>
			  {
				  int i, val = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61bb      	str	r3, [r7, #24]
				  for (i = 8; i <= 10; i++) {
 80054bc:	2308      	movs	r3, #8
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	e00f      	b.n	80054e2 <task3_init+0x1ca>
				          val = val * 10 + (rxmsgcdu[i] - '0');
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	4619      	mov	r1, r3
 80054ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005544 <task3_init+0x22c>)
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	3b30      	subs	r3, #48	@ 0x30
 80054d8:	440b      	add	r3, r1
 80054da:	61bb      	str	r3, [r7, #24]
				  for (i = 8; i <= 10; i++) {
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	3301      	adds	r3, #1
 80054e0:	61fb      	str	r3, [r7, #28]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b0a      	cmp	r3, #10
 80054e6:	ddec      	ble.n	80054c2 <task3_init+0x1aa>
				      }
				  if (val != obs)
 80054e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005564 <task3_init+0x24c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d01b      	beq.n	800552a <task3_init+0x212>
				  {
					  obs = val;
 80054f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005564 <task3_init+0x24c>)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	6013      	str	r3, [r2, #0]
			  {
 80054f8:	e017      	b.n	800552a <task3_init+0x212>
					  //do nothing
				  }


			  }
			  else if(rxmsgcdu[6] == '7' && rxmsgcdu[7] == '3')// volume level
 80054fa:	4b12      	ldr	r3, [pc, #72]	@ (8005544 <task3_init+0x22c>)
 80054fc:	799b      	ldrb	r3, [r3, #6]
 80054fe:	2b37      	cmp	r3, #55	@ 0x37
 8005500:	f47f af0e 	bne.w	8005320 <task3_init+0x8>
 8005504:	4b0f      	ldr	r3, [pc, #60]	@ (8005544 <task3_init+0x22c>)
 8005506:	79db      	ldrb	r3, [r3, #7]
 8005508:	2b33      	cmp	r3, #51	@ 0x33
 800550a:	f47f af09 	bne.w	8005320 <task3_init+0x8>
			  {
				  int val;
				  val = rxmsgcdu[8] - '0'; // subtracting 48
 800550e:	4b0d      	ldr	r3, [pc, #52]	@ (8005544 <task3_init+0x22c>)
 8005510:	7a1b      	ldrb	r3, [r3, #8]
 8005512:	3b30      	subs	r3, #48	@ 0x30
 8005514:	60fb      	str	r3, [r7, #12]
				  if (val != vol)
 8005516:	4b14      	ldr	r3, [pc, #80]	@ (8005568 <task3_init+0x250>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	429a      	cmp	r2, r3
 800551e:	f43f aeff 	beq.w	8005320 <task3_init+0x8>
				  {
					  vol = val;
 8005522:	4a11      	ldr	r2, [pc, #68]	@ (8005568 <task3_init+0x250>)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e6fa      	b.n	8005320 <task3_init+0x8>
			  {
 800552a:	bf00      	nop
		  if(responseCDU==HAL_OK) //if transfer is successful
 800552c:	e6f8      	b.n	8005320 <task3_init+0x8>
 800552e:	bf00      	nop
 8005530:	9999999a 	.word	0x9999999a
 8005534:	3f999999 	.word	0x3f999999
 8005538:	2000074c 	.word	0x2000074c
 800553c:	20000770 	.word	0x20000770
 8005540:	20000750 	.word	0x20000750
 8005544:	20000754 	.word	0x20000754
 8005548:	20000774 	.word	0x20000774
 800554c:	20000698 	.word	0x20000698
 8005550:	20000000 	.word	0x20000000
 8005554:	2000069c 	.word	0x2000069c
 8005558:	20000004 	.word	0x20000004
 800555c:	20000008 	.word	0x20000008
 8005560:	200006a0 	.word	0x200006a0
 8005564:	200006fc 	.word	0x200006fc
 8005568:	200006a4 	.word	0x200006a4

0800556c <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 f939 	bl	80067ec <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 800558a:	e002      	b.n	8005592 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 800558c:	2001      	movs	r0, #1
 800558e:	f7ff ffed 	bl	800556c <SPIF_Delay>
  while (Handle->Lock)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	7b1b      	ldrb	r3, [r3, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f8      	bne.n	800558c <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	731a      	strb	r2, [r3, #12]
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	731a      	strb	r2, [r3, #12]
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr

080055c0 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6858      	ldr	r0, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	4619      	mov	r1, r3
 80055da:	f001 fcf8 	bl	8006fce <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e002      	b.n	80055ea <SPIF_CsPin+0x2a>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b09      	cmp	r3, #9
 80055ee:	ddf9      	ble.n	80055e4 <SPIF_CsPin+0x24>
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b088      	sub	sp, #32
 80055fe:	af02      	add	r7, sp, #8
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
 8005606:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005608:	2300      	movs	r3, #0
 800560a:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	b29a      	uxth	r2, r3
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	f002 fc4a 	bl	8007eb6 <HAL_SPI_TransmitReceive>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8005628:	2301      	movs	r3, #1
 800562a:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b086      	sub	sp, #24
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005644:	2300      	movs	r3, #0
 8005646:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	b29a      	uxth	r2, r3
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	f002 f9d4 	bl	8007a00 <HAL_SPI_Transmit>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8005662:	7dfb      	ldrb	r3, [r7, #23]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 800567a:	2300      	movs	r3, #0
 800567c:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	b29a      	uxth	r2, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	f002 fafc 	bl	8007c86 <HAL_SPI_Receive>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <SPIF_Receive+0x2c>
  {
    retVal = true;
 8005694:	2301      	movs	r3, #1
 8005696:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8005698:	7dfb      	ldrb	r3, [r7, #23]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 80056ae:	2306      	movs	r3, #6
 80056b0:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80056b2:	2100      	movs	r1, #0
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ff83 	bl	80055c0 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80056ba:	f107 010c 	add.w	r1, r7, #12
 80056be:	2364      	movs	r3, #100	@ 0x64
 80056c0:	2201      	movs	r2, #1
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff ffb7 	bl	8005636 <SPIF_Transmit>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f083 0301 	eor.w	r3, r3, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 80056d4:	2300      	movs	r3, #0
 80056d6:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 80056d8:	2101      	movs	r1, #1
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff ff70 	bl	80055c0 <SPIF_CsPin>
  return retVal;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 80056f6:	2304      	movs	r3, #4
 80056f8:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80056fa:	2100      	movs	r1, #0
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ff5f 	bl	80055c0 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8005702:	f107 010c 	add.w	r1, r7, #12
 8005706:	2364      	movs	r3, #100	@ 0x64
 8005708:	2201      	movs	r2, #1
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff ff93 	bl	8005636 <SPIF_Transmit>
 8005710:	4603      	mov	r3, r0
 8005712:	f083 0301 	eor.w	r3, r3, #1
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 800571c:	2300      	movs	r3, #0
 800571e:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8005720:	2101      	movs	r1, #1
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ff4c 	bl	80055c0 <SPIF_CsPin>
  return retVal;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af02      	add	r7, sp, #8
 8005738:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 800573e:	f24a 5305 	movw	r3, #42245	@ 0xa505
 8005742:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8005744:	2100      	movs	r1, #0
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff ff3a 	bl	80055c0 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 800574c:	f107 0208 	add.w	r2, r7, #8
 8005750:	f107 010c 	add.w	r1, r7, #12
 8005754:	2364      	movs	r3, #100	@ 0x64
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	2302      	movs	r3, #2
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ff4d 	bl	80055fa <SPIF_TransmitReceive>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8005766:	7a7b      	ldrb	r3, [r7, #9]
 8005768:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 800576a:	2101      	movs	r1, #1
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff ff27 	bl	80055c0 <SPIF_CsPin>
  return retVal;
 8005772:	7bfb      	ldrb	r3, [r7, #15]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8005786:	2300      	movs	r3, #0
 8005788:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 800578a:	f001 f825 	bl	80067d8 <HAL_GetTick>
 800578e:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8005790:	2001      	movs	r0, #1
 8005792:	f7ff feeb 	bl	800556c <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8005796:	f001 f81f 	bl	80067d8 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d90a      	bls.n	80057bc <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff ffc3 	bl	8005732 <SPIF_ReadReg1>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1ec      	bne.n	8005790 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
      break;
 80057ba:	e000      	b.n	80057be <SPIF_WaitForWriting+0x42>
      break;
 80057bc:	bf00      	nop
    }
  }
  return retVal;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 80057d0:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 80057d4:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 80057d6:	2300      	movs	r3, #0
 80057d8:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 80057da:	2100      	movs	r1, #0
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff feef 	bl	80055c0 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 80057e2:	f107 020c 	add.w	r2, r7, #12
 80057e6:	f107 0110 	add.w	r1, r7, #16
 80057ea:	2364      	movs	r3, #100	@ 0x64
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	2304      	movs	r3, #4
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff ff02 	bl	80055fa <SPIF_TransmitReceive>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f083 0301 	eor.w	r3, r3, #1
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8005802:	2101      	movs	r1, #1
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fedb 	bl	80055c0 <SPIF_CsPin>
      break;
 800580a:	e16f      	b.n	8005aec <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 800580c:	2101      	movs	r1, #1
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fed6 	bl	80055c0 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8005814:	7b7a      	ldrb	r2, [r7, #13]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 800581a:	7bba      	ldrb	r2, [r7, #14]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8005820:	7bfa      	ldrb	r2, [r7, #15]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7a1b      	ldrb	r3, [r3, #8]
 800582a:	2bef      	cmp	r3, #239	@ 0xef
 800582c:	f000 80f0 	beq.w	8005a10 <SPIF_FindChip+0x248>
 8005830:	2bef      	cmp	r3, #239	@ 0xef
 8005832:	f300 80e9 	bgt.w	8005a08 <SPIF_FindChip+0x240>
 8005836:	2bc8      	cmp	r3, #200	@ 0xc8
 8005838:	f300 80e6 	bgt.w	8005a08 <SPIF_FindChip+0x240>
 800583c:	2b85      	cmp	r3, #133	@ 0x85
 800583e:	da0c      	bge.n	800585a <SPIF_FindChip+0x92>
 8005840:	2b62      	cmp	r3, #98	@ 0x62
 8005842:	f000 80e7 	beq.w	8005a14 <SPIF_FindChip+0x24c>
 8005846:	2b62      	cmp	r3, #98	@ 0x62
 8005848:	f300 80de 	bgt.w	8005a08 <SPIF_FindChip+0x240>
 800584c:	2b20      	cmp	r3, #32
 800584e:	f300 80d9 	bgt.w	8005a04 <SPIF_FindChip+0x23c>
 8005852:	2b00      	cmp	r3, #0
 8005854:	f300 8090 	bgt.w	8005978 <SPIF_FindChip+0x1b0>
 8005858:	e0d6      	b.n	8005a08 <SPIF_FindChip+0x240>
 800585a:	3b85      	subs	r3, #133	@ 0x85
 800585c:	2b43      	cmp	r3, #67	@ 0x43
 800585e:	f200 80d3 	bhi.w	8005a08 <SPIF_FindChip+0x240>
 8005862:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <SPIF_FindChip+0xa0>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	08005a19 	.word	0x08005a19
 800586c:	08005a09 	.word	0x08005a09
 8005870:	08005a09 	.word	0x08005a09
 8005874:	08005a09 	.word	0x08005a09
 8005878:	08005a19 	.word	0x08005a19
 800587c:	08005a09 	.word	0x08005a09
 8005880:	08005a09 	.word	0x08005a09
 8005884:	08005a19 	.word	0x08005a19
 8005888:	08005a09 	.word	0x08005a09
 800588c:	08005a09 	.word	0x08005a09
 8005890:	08005a09 	.word	0x08005a09
 8005894:	08005a09 	.word	0x08005a09
 8005898:	08005a09 	.word	0x08005a09
 800589c:	08005a09 	.word	0x08005a09
 80058a0:	08005a09 	.word	0x08005a09
 80058a4:	08005a09 	.word	0x08005a09
 80058a8:	08005a09 	.word	0x08005a09
 80058ac:	08005a09 	.word	0x08005a09
 80058b0:	08005a09 	.word	0x08005a09
 80058b4:	08005a09 	.word	0x08005a09
 80058b8:	08005a09 	.word	0x08005a09
 80058bc:	08005a09 	.word	0x08005a09
 80058c0:	08005a09 	.word	0x08005a09
 80058c4:	08005a09 	.word	0x08005a09
 80058c8:	08005a19 	.word	0x08005a19
 80058cc:	08005a09 	.word	0x08005a09
 80058d0:	08005a19 	.word	0x08005a19
 80058d4:	08005a09 	.word	0x08005a09
 80058d8:	08005a19 	.word	0x08005a19
 80058dc:	08005a09 	.word	0x08005a09
 80058e0:	08005a09 	.word	0x08005a09
 80058e4:	08005a09 	.word	0x08005a09
 80058e8:	08005a09 	.word	0x08005a09
 80058ec:	08005a09 	.word	0x08005a09
 80058f0:	08005a09 	.word	0x08005a09
 80058f4:	08005a09 	.word	0x08005a09
 80058f8:	08005a09 	.word	0x08005a09
 80058fc:	08005a09 	.word	0x08005a09
 8005900:	08005a09 	.word	0x08005a09
 8005904:	08005a09 	.word	0x08005a09
 8005908:	08005a19 	.word	0x08005a19
 800590c:	08005a09 	.word	0x08005a09
 8005910:	08005a09 	.word	0x08005a09
 8005914:	08005a09 	.word	0x08005a09
 8005918:	08005a09 	.word	0x08005a09
 800591c:	08005a09 	.word	0x08005a09
 8005920:	08005a09 	.word	0x08005a09
 8005924:	08005a09 	.word	0x08005a09
 8005928:	08005a09 	.word	0x08005a09
 800592c:	08005a09 	.word	0x08005a09
 8005930:	08005a09 	.word	0x08005a09
 8005934:	08005a09 	.word	0x08005a09
 8005938:	08005a09 	.word	0x08005a09
 800593c:	08005a09 	.word	0x08005a09
 8005940:	08005a09 	.word	0x08005a09
 8005944:	08005a09 	.word	0x08005a09
 8005948:	08005a09 	.word	0x08005a09
 800594c:	08005a09 	.word	0x08005a09
 8005950:	08005a19 	.word	0x08005a19
 8005954:	08005a09 	.word	0x08005a09
 8005958:	08005a09 	.word	0x08005a09
 800595c:	08005a19 	.word	0x08005a19
 8005960:	08005a09 	.word	0x08005a09
 8005964:	08005a09 	.word	0x08005a09
 8005968:	08005a09 	.word	0x08005a09
 800596c:	08005a09 	.word	0x08005a09
 8005970:	08005a09 	.word	0x08005a09
 8005974:	08005a19 	.word	0x08005a19
 8005978:	3b01      	subs	r3, #1
 800597a:	2b1f      	cmp	r3, #31
 800597c:	d844      	bhi.n	8005a08 <SPIF_FindChip+0x240>
 800597e:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <SPIF_FindChip+0x1bc>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	08005a1d 	.word	0x08005a1d
 8005988:	08005a09 	.word	0x08005a09
 800598c:	08005a09 	.word	0x08005a09
 8005990:	08005a1d 	.word	0x08005a1d
 8005994:	08005a09 	.word	0x08005a09
 8005998:	08005a09 	.word	0x08005a09
 800599c:	08005a09 	.word	0x08005a09
 80059a0:	08005a09 	.word	0x08005a09
 80059a4:	08005a09 	.word	0x08005a09
 80059a8:	08005a09 	.word	0x08005a09
 80059ac:	08005a09 	.word	0x08005a09
 80059b0:	08005a09 	.word	0x08005a09
 80059b4:	08005a09 	.word	0x08005a09
 80059b8:	08005a09 	.word	0x08005a09
 80059bc:	08005a09 	.word	0x08005a09
 80059c0:	08005a09 	.word	0x08005a09
 80059c4:	08005a09 	.word	0x08005a09
 80059c8:	08005a09 	.word	0x08005a09
 80059cc:	08005a09 	.word	0x08005a09
 80059d0:	08005a09 	.word	0x08005a09
 80059d4:	08005a09 	.word	0x08005a09
 80059d8:	08005a09 	.word	0x08005a09
 80059dc:	08005a09 	.word	0x08005a09
 80059e0:	08005a09 	.word	0x08005a09
 80059e4:	08005a09 	.word	0x08005a09
 80059e8:	08005a09 	.word	0x08005a09
 80059ec:	08005a09 	.word	0x08005a09
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	08005a09 	.word	0x08005a09
 80059f8:	08005a09 	.word	0x08005a09
 80059fc:	08005a09 	.word	0x08005a09
 8005a00:	08005a1d 	.word	0x08005a1d
 8005a04:	2b37      	cmp	r3, #55	@ 0x37
 8005a06:	d00b      	beq.n	8005a20 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_BOYA:
      dprintf("BOYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8005a0e:	e008      	b.n	8005a22 <SPIF_FindChip+0x25a>
      break;
 8005a10:	bf00      	nop
 8005a12:	e006      	b.n	8005a22 <SPIF_FindChip+0x25a>
      break;
 8005a14:	bf00      	nop
 8005a16:	e004      	b.n	8005a22 <SPIF_FindChip+0x25a>
      break;
 8005a18:	bf00      	nop
 8005a1a:	e002      	b.n	8005a22 <SPIF_FindChip+0x25a>
      break;
 8005a1c:	bf00      	nop
 8005a1e:	e000      	b.n	8005a22 <SPIF_FindChip+0x25a>
      break;
 8005a20:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	7a5b      	ldrb	r3, [r3, #9]
 8005a26:	3b11      	subs	r3, #17
 8005a28:	2b0f      	cmp	r3, #15
 8005a2a:	d84e      	bhi.n	8005aca <SPIF_FindChip+0x302>
 8005a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <SPIF_FindChip+0x26c>)
 8005a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a32:	bf00      	nop
 8005a34:	08005a75 	.word	0x08005a75
 8005a38:	08005a7d 	.word	0x08005a7d
 8005a3c:	08005a85 	.word	0x08005a85
 8005a40:	08005a8d 	.word	0x08005a8d
 8005a44:	08005a95 	.word	0x08005a95
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	08005aa5 	.word	0x08005aa5
 8005a50:	08005aad 	.word	0x08005aad
 8005a54:	08005ab7 	.word	0x08005ab7
 8005a58:	08005acb 	.word	0x08005acb
 8005a5c:	08005acb 	.word	0x08005acb
 8005a60:	08005acb 	.word	0x08005acb
 8005a64:	08005acb 	.word	0x08005acb
 8005a68:	08005acb 	.word	0x08005acb
 8005a6c:	08005acb 	.word	0x08005acb
 8005a70:	08005ac1 	.word	0x08005ac1
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8005a7a:	e02a      	b.n	8005ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2204      	movs	r2, #4
 8005a80:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 8005a82:	e026      	b.n	8005ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2208      	movs	r2, #8
 8005a88:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8005a8a:	e022      	b.n	8005ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2210      	movs	r2, #16
 8005a90:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 8005a92:	e01e      	b.n	8005ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8005a9a:	e01a      	b.n	8005ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2240      	movs	r2, #64	@ 0x40
 8005aa0:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 8005aa2:	e016      	b.n	8005ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2280      	movs	r2, #128	@ 0x80
 8005aa8:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8005aaa:	e012      	b.n	8005ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ab2:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 8005ab4:	e00d      	b.n	8005ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005abc:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8005abe:	e008      	b.n	8005ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ac6:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8005ac8:	e003      	b.n	8005ad2 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8005ad0:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	011a      	lsls	r2, r3, #4
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	031b      	lsls	r3, r3, #12
 8005ae2:	0a1a      	lsrs	r2, r3, #8
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop

08005af8 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	@ 0x28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b12:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005b16:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	f080 8084 	bcs.w	8005c2c <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	2bff      	cmp	r3, #255	@ 0xff
 8005b28:	f200 8082 	bhi.w	8005c30 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d901      	bls.n	8005b38 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b3e:	4413      	add	r3, r2
 8005b40:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fdad 	bl	80056a2 <SPIF_WriteEnable>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f083 0301 	eor.w	r3, r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d16f      	bne.n	8005c34 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8005b54:	2100      	movs	r1, #0
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff fd32 	bl	80055c0 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b64:	d322      	bcc.n	8005bac <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 8005b66:	2312      	movs	r3, #18
 8005b68:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	0e1b      	lsrs	r3, r3, #24
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8005b88:	f107 0114 	add.w	r1, r7, #20
 8005b8c:	2364      	movs	r3, #100	@ 0x64
 8005b8e:	2205      	movs	r2, #5
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff fd50 	bl	8005636 <SPIF_Transmit>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f083 0301 	eor.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d023      	beq.n	8005bea <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff fd0b 	bl	80055c0 <SPIF_CsPin>
        break;
 8005baa:	e044      	b.n	8005c36 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8005bac:	2302      	movs	r3, #2
 8005bae:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	0c1b      	lsrs	r3, r3, #16
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8005bc6:	f107 0114 	add.w	r1, r7, #20
 8005bca:	2364      	movs	r3, #100	@ 0x64
 8005bcc:	2204      	movs	r2, #4
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff fd31 	bl	8005636 <SPIF_Transmit>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f083 0301 	eor.w	r3, r3, #1
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8005be0:	2101      	movs	r1, #1
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fcec 	bl	80055c0 <SPIF_CsPin>
        break;
 8005be8:	e025      	b.n	8005c36 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8005bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f7ff fd1f 	bl	8005636 <SPIF_Transmit>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f083 0301 	eor.w	r3, r3, #1
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8005c04:	2101      	movs	r1, #1
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff fcda 	bl	80055c0 <SPIF_CsPin>
      break;
 8005c0c:	e013      	b.n	8005c36 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8005c0e:	2101      	movs	r1, #1
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff fcd5 	bl	80055c0 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8005c16:	2164      	movs	r1, #100	@ 0x64
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7ff fdaf 	bl	800577c <SPIF_WaitForWriting>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005c2a:	e004      	b.n	8005c36 <SPIF_WriteFn+0x13e>
      break;
 8005c2c:	bf00      	nop
 8005c2e:	e002      	b.n	8005c36 <SPIF_WriteFn+0x13e>
      break;
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <SPIF_WriteFn+0x13e>
      break;
 8005c34:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f7ff fd57 	bl	80056ea <SPIF_WriteDisable>
  return retVal;
 8005c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3728      	adds	r7, #40	@ 0x28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005c56:	2300      	movs	r3, #0
 8005c58:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff fcaf 	bl	80055c0 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c6a:	d322      	bcc.n	8005cb2 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8005c6c:	2313      	movs	r3, #19
 8005c6e:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	0e1b      	lsrs	r3, r3, #24
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8005c8e:	f107 0110 	add.w	r1, r7, #16
 8005c92:	2364      	movs	r3, #100	@ 0x64
 8005c94:	2205      	movs	r2, #5
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fccd 	bl	8005636 <SPIF_Transmit>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f083 0301 	eor.w	r3, r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d023      	beq.n	8005cf0 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8005ca8:	2101      	movs	r1, #1
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff fc88 	bl	80055c0 <SPIF_CsPin>
        break;
 8005cb0:	e036      	b.n	8005d20 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8005ccc:	f107 0110 	add.w	r1, r7, #16
 8005cd0:	2364      	movs	r3, #100	@ 0x64
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7ff fcae 	bl	8005636 <SPIF_Transmit>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f083 0301 	eor.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff fc69 	bl	80055c0 <SPIF_CsPin>
        break;
 8005cee:	e017      	b.n	8005d20 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8005cf0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff fcb7 	bl	800566c <SPIF_Receive>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	f083 0301 	eor.w	r3, r3, #1
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f7ff fc57 	bl	80055c0 <SPIF_CsPin>
      break;
 8005d12:	e005      	b.n	8005d20 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8005d14:	2101      	movs	r1, #1
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff fc52 	bl	80055c0 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d03a      	beq.n	8005db8 <SPIF_Init+0x8e>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d037      	beq.n	8005db8 <SPIF_Init+0x8e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d034      	beq.n	8005db8 <SPIF_Init+0x8e>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	7a9b      	ldrb	r3, [r3, #10]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d030      	beq.n	8005db8 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8005d56:	2220      	movs	r2, #32
 8005d58:	2100      	movs	r1, #0
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f005 fb2b 	bl	800b3b6 <memset>
    Handle->HSpi = HSpi;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8005d6c:	887a      	ldrh	r2, [r7, #2]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8005d72:	2101      	movs	r1, #1
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff fc23 	bl	80055c0 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8005d7a:	e002      	b.n	8005d82 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	f7ff fbf5 	bl	800556c <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8005d82:	f000 fd29 	bl	80067d8 <HAL_GetTick>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b13      	cmp	r3, #19
 8005d8a:	d9f7      	bls.n	8005d7c <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff fcac 	bl	80056ea <SPIF_WriteDisable>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f083 0301 	eor.w	r3, r3, #1
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7ff fd12 	bl	80057c8 <SPIF_FindChip>
 8005da4:	4603      	mov	r3, r0
 8005da6:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	729a      	strb	r2, [r3, #10]
 8005db4:	e000      	b.n	8005db8 <SPIF_Init+0x8e>
      break;
 8005db6:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b086      	sub	sp, #24
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff fbd8 	bl	8005582 <SPIF_Lock>
  bool retVal = false;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	031b      	lsls	r3, r3, #12
 8005dda:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d262      	bcs.n	8005eac <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fc5b 	bl	80056a2 <SPIF_WriteEnable>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f083 0301 	eor.w	r3, r3, #1
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d15b      	bne.n	8005eb0 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8005df8:	2100      	movs	r1, #0
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7ff fbe0 	bl	80055c0 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e08:	d322      	bcc.n	8005e50 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8005e0a:	2321      	movs	r3, #33	@ 0x21
 8005e0c:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	0e1b      	lsrs	r3, r3, #24
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	0c1b      	lsrs	r3, r3, #16
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	0a1b      	lsrs	r3, r3, #8
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8005e2c:	f107 0108 	add.w	r1, r7, #8
 8005e30:	2364      	movs	r3, #100	@ 0x64
 8005e32:	2205      	movs	r2, #5
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fbfe 	bl	8005636 <SPIF_Transmit>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f083 0301 	eor.w	r3, r3, #1
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d023      	beq.n	8005e8e <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8005e46:	2101      	movs	r1, #1
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff fbb9 	bl	80055c0 <SPIF_CsPin>
        break;
 8005e4e:	e030      	b.n	8005eb2 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8005e50:	2320      	movs	r3, #32
 8005e52:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	0c1b      	lsrs	r3, r3, #16
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8005e6a:	f107 0108 	add.w	r1, r7, #8
 8005e6e:	2364      	movs	r3, #100	@ 0x64
 8005e70:	2204      	movs	r2, #4
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff fbdf 	bl	8005636 <SPIF_Transmit>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f083 0301 	eor.w	r3, r3, #1
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8005e84:	2101      	movs	r1, #1
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fb9a 	bl	80055c0 <SPIF_CsPin>
        break;
 8005e8c:	e011      	b.n	8005eb2 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8005e8e:	2101      	movs	r1, #1
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fb95 	bl	80055c0 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8005e96:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff fc6e 	bl	800577c <SPIF_WaitForWriting>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	75fb      	strb	r3, [r7, #23]
 8005eaa:	e002      	b.n	8005eb2 <SPIF_EraseSector+0xf0>
      break;
 8005eac:	bf00      	nop
 8005eae:	e000      	b.n	8005eb2 <SPIF_EraseSector+0xf0>
      break;
 8005eb0:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fc19 	bl	80056ea <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff fb75 	bl	80055a8 <SPIF_UnLock>
  return retVal;
 8005ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <SPIF_WriteSector>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WriteSector(SPIF_HandleTypeDef *Handle, uint32_t SectorNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08c      	sub	sp, #48	@ 0x30
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7ff fb53 	bl	8005582 <SPIF_Lock>
  bool retVal = true;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  do
  {
    if (Offset >= SPIF_SECTOR_SIZE)
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee8:	d303      	bcc.n	8005ef2 <SPIF_WriteSector+0x2a>
    {
      retVal = false;
 8005eea:	2300      	movs	r3, #0
 8005eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005ef0:	e04b      	b.n	8005f8a <SPIF_WriteSector+0xc2>
    }
    if (Size > (SPIF_SECTOR_SIZE - Offset))
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d903      	bls.n	8005f06 <SPIF_WriteSector+0x3e>
    {
      Size = SPIF_SECTOR_SIZE - Offset;
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005f04:	603b      	str	r3, [r7, #0]
    }
    uint32_t bytesWritten = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	623b      	str	r3, [r7, #32]
    uint32_t pageNumber = SectorNumber * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	61fb      	str	r3, [r7, #28]
    pageNumber += Offset / SPIF_PAGE_SIZE;
 8005f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f12:	0a1b      	lsrs	r3, r3, #8
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	4413      	add	r3, r2
 8005f18:	61fb      	str	r3, [r7, #28]
    uint32_t remainingBytes = Size;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	61bb      	str	r3, [r7, #24]
    uint32_t pageOffset = Offset % SPIF_PAGE_SIZE;
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	617b      	str	r3, [r7, #20]
    while (remainingBytes > 0 && pageNumber < ((SectorNumber + 1) * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE)))
 8005f24:	e028      	b.n	8005f78 <SPIF_WriteSector+0xb0>
    {
      uint32_t bytesToWrite = (remainingBytes > (SPIF_PAGE_SIZE - pageOffset)) ? (SPIF_PAGE_SIZE - pageOffset) : remainingBytes;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	bf28      	it	cs
 8005f32:	4613      	movcs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
      if (SPIF_WriteFn(Handle, pageNumber, Data + bytesWritten, bytesToWrite, pageOffset) == false)
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	441a      	add	r2, r3
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	69f9      	ldr	r1, [r7, #28]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff fdd7 	bl	8005af8 <SPIF_WriteFn>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f083 0301 	eor.w	r3, r3, #1
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <SPIF_WriteSector+0x96>
      {
        retVal = false;
 8005f56:	2300      	movs	r3, #0
 8005f58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8005f5c:	e015      	b.n	8005f8a <SPIF_WriteSector+0xc2>
      }
      bytesWritten += bytesToWrite;
 8005f5e:	6a3a      	ldr	r2, [r7, #32]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4413      	add	r3, r2
 8005f64:	623b      	str	r3, [r7, #32]
      remainingBytes -= bytesToWrite;
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	61bb      	str	r3, [r7, #24]
      pageNumber++;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	3301      	adds	r3, #1
 8005f72:	61fb      	str	r3, [r7, #28]
      pageOffset = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
    while (remainingBytes > 0 && pageNumber < ((SectorNumber + 1) * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE)))
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <SPIF_WriteSector+0xc2>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	3301      	adds	r3, #1
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d3cd      	bcc.n	8005f26 <SPIF_WriteSector+0x5e>
    }
  } while (0);
  SPIF_UnLock(Handle);
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff fb0c 	bl	80055a8 <SPIF_UnLock>
  return retVal;
 8005f90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3728      	adds	r7, #40	@ 0x28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <SPIF_ReadSector>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadSector(SPIF_HandleTypeDef *Handle, uint32_t SectorNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff fae9 	bl	8005582 <SPIF_Lock>
  bool retVal = false;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_SectorToAddress(SectorNumber) + Offset;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	031b      	lsls	r3, r3, #12
 8005fb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fba:	4413      	add	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_SECTOR_SIZE - Offset;
 8005fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc0:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005fc4:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d901      	bls.n	8005fd2 <SPIF_ReadSector+0x36>
  {
    Size = maximum;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	69b9      	ldr	r1, [r7, #24]
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7ff fe35 	bl	8005c48 <SPIF_ReadFn>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7ff fae0 	bl	80055a8 <SPIF_UnLock>
  return retVal;
 8005fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005ffa:	4b18      	ldr	r3, [pc, #96]	@ (800605c <HAL_MspInit+0x68>)
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	4a17      	ldr	r2, [pc, #92]	@ (800605c <HAL_MspInit+0x68>)
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	6193      	str	r3, [r2, #24]
 8006006:	4b15      	ldr	r3, [pc, #84]	@ (800605c <HAL_MspInit+0x68>)
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	60bb      	str	r3, [r7, #8]
 8006010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006012:	4b12      	ldr	r3, [pc, #72]	@ (800605c <HAL_MspInit+0x68>)
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	4a11      	ldr	r2, [pc, #68]	@ (800605c <HAL_MspInit+0x68>)
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800601c:	61d3      	str	r3, [r2, #28]
 800601e:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <HAL_MspInit+0x68>)
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006026:	607b      	str	r3, [r7, #4]
 8006028:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800602a:	2200      	movs	r2, #0
 800602c:	210f      	movs	r1, #15
 800602e:	f06f 0001 	mvn.w	r0, #1
 8006032:	f000 fcb4 	bl	800699e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006036:	4b0a      	ldr	r3, [pc, #40]	@ (8006060 <HAL_MspInit+0x6c>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	4a04      	ldr	r2, [pc, #16]	@ (8006060 <HAL_MspInit+0x6c>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000
 8006060:	40010000 	.word	0x40010000

08006064 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	@ 0x28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800606c:	f107 0314 	add.w	r3, r7, #20
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a22      	ldr	r2, [pc, #136]	@ (8006108 <HAL_SPI_MspInit+0xa4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d13d      	bne.n	8006100 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006084:	4b21      	ldr	r3, [pc, #132]	@ (800610c <HAL_SPI_MspInit+0xa8>)
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	4a20      	ldr	r2, [pc, #128]	@ (800610c <HAL_SPI_MspInit+0xa8>)
 800608a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800608e:	6193      	str	r3, [r2, #24]
 8006090:	4b1e      	ldr	r3, [pc, #120]	@ (800610c <HAL_SPI_MspInit+0xa8>)
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800609c:	4b1b      	ldr	r3, [pc, #108]	@ (800610c <HAL_SPI_MspInit+0xa8>)
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	4a1a      	ldr	r2, [pc, #104]	@ (800610c <HAL_SPI_MspInit+0xa8>)
 80060a2:	f043 0308 	orr.w	r3, r3, #8
 80060a6:	6193      	str	r3, [r2, #24]
 80060a8:	4b18      	ldr	r3, [pc, #96]	@ (800610c <HAL_SPI_MspInit+0xa8>)
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80060b4:	2328      	movs	r3, #40	@ 0x28
 80060b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b8:	2302      	movs	r3, #2
 80060ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060bc:	2303      	movs	r3, #3
 80060be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	4619      	mov	r1, r3
 80060c6:	4812      	ldr	r0, [pc, #72]	@ (8006110 <HAL_SPI_MspInit+0xac>)
 80060c8:	f000 fdd6 	bl	8006c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80060cc:	2310      	movs	r3, #16
 80060ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060d0:	2300      	movs	r3, #0
 80060d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060d8:	f107 0314 	add.w	r3, r7, #20
 80060dc:	4619      	mov	r1, r3
 80060de:	480c      	ldr	r0, [pc, #48]	@ (8006110 <HAL_SPI_MspInit+0xac>)
 80060e0:	f000 fdca 	bl	8006c78 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80060e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <HAL_SPI_MspInit+0xb0>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80060f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060fa:	4a06      	ldr	r2, [pc, #24]	@ (8006114 <HAL_SPI_MspInit+0xb0>)
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006100:	bf00      	nop
 8006102:	3728      	adds	r7, #40	@ 0x28
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40013000 	.word	0x40013000
 800610c:	40021000 	.word	0x40021000
 8006110:	40010c00 	.word	0x40010c00
 8006114:	40010000 	.word	0x40010000

08006118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b092      	sub	sp, #72	@ 0x48
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006120:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	605a      	str	r2, [r3, #4]
 800612a:	609a      	str	r2, [r3, #8]
 800612c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4aa0      	ldr	r2, [pc, #640]	@ (80063b4 <HAL_UART_MspInit+0x29c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d13a      	bne.n	80061ae <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006138:	4b9f      	ldr	r3, [pc, #636]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	4a9e      	ldr	r2, [pc, #632]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 800613e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006142:	61d3      	str	r3, [r2, #28]
 8006144:	4b9c      	ldr	r3, [pc, #624]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800614c:	633b      	str	r3, [r7, #48]	@ 0x30
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006150:	4b99      	ldr	r3, [pc, #612]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	4a98      	ldr	r2, [pc, #608]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006156:	f043 0310 	orr.w	r3, r3, #16
 800615a:	6193      	str	r3, [r2, #24]
 800615c:	4b96      	ldr	r3, [pc, #600]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800616c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800616e:	2302      	movs	r3, #2
 8006170:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006172:	2303      	movs	r3, #3
 8006174:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006176:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800617a:	4619      	mov	r1, r3
 800617c:	488f      	ldr	r0, [pc, #572]	@ (80063bc <HAL_UART_MspInit+0x2a4>)
 800617e:	f000 fd7b 	bl	8006c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006186:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006188:	2300      	movs	r3, #0
 800618a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618c:	2300      	movs	r3, #0
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006190:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006194:	4619      	mov	r1, r3
 8006196:	4889      	ldr	r0, [pc, #548]	@ (80063bc <HAL_UART_MspInit+0x2a4>)
 8006198:	f000 fd6e 	bl	8006c78 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800619c:	2200      	movs	r2, #0
 800619e:	2105      	movs	r1, #5
 80061a0:	2034      	movs	r0, #52	@ 0x34
 80061a2:	f000 fbfc 	bl	800699e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80061a6:	2034      	movs	r0, #52	@ 0x34
 80061a8:	f000 fc15 	bl	80069d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80061ac:	e0fd      	b.n	80063aa <HAL_UART_MspInit+0x292>
  else if(huart->Instance==UART5)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a83      	ldr	r2, [pc, #524]	@ (80063c0 <HAL_UART_MspInit+0x2a8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d13d      	bne.n	8006234 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80061b8:	4b7f      	ldr	r3, [pc, #508]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	4a7e      	ldr	r2, [pc, #504]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80061be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061c2:	61d3      	str	r3, [r2, #28]
 80061c4:	4b7c      	ldr	r3, [pc, #496]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061d0:	4b79      	ldr	r3, [pc, #484]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	4a78      	ldr	r2, [pc, #480]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80061d6:	f043 0310 	orr.w	r3, r3, #16
 80061da:	6193      	str	r3, [r2, #24]
 80061dc:	4b76      	ldr	r3, [pc, #472]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061e8:	4b73      	ldr	r3, [pc, #460]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	4a72      	ldr	r2, [pc, #456]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80061ee:	f043 0320 	orr.w	r3, r3, #32
 80061f2:	6193      	str	r3, [r2, #24]
 80061f4:	4b70      	ldr	r3, [pc, #448]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006204:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006206:	2302      	movs	r3, #2
 8006208:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800620a:	2303      	movs	r3, #3
 800620c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800620e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006212:	4619      	mov	r1, r3
 8006214:	4869      	ldr	r0, [pc, #420]	@ (80063bc <HAL_UART_MspInit+0x2a4>)
 8006216:	f000 fd2f 	bl	8006c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800621a:	2304      	movs	r3, #4
 800621c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800621e:	2300      	movs	r3, #0
 8006220:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006222:	2300      	movs	r3, #0
 8006224:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006226:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800622a:	4619      	mov	r1, r3
 800622c:	4865      	ldr	r0, [pc, #404]	@ (80063c4 <HAL_UART_MspInit+0x2ac>)
 800622e:	f000 fd23 	bl	8006c78 <HAL_GPIO_Init>
}
 8006232:	e0ba      	b.n	80063aa <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a63      	ldr	r2, [pc, #396]	@ (80063c8 <HAL_UART_MspInit+0x2b0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d132      	bne.n	80062a4 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800623e:	4b5e      	ldr	r3, [pc, #376]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	4a5d      	ldr	r2, [pc, #372]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006248:	6193      	str	r3, [r2, #24]
 800624a:	4b5b      	ldr	r3, [pc, #364]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006256:	4b58      	ldr	r3, [pc, #352]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	4a57      	ldr	r2, [pc, #348]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 800625c:	f043 0304 	orr.w	r3, r3, #4
 8006260:	6193      	str	r3, [r2, #24]
 8006262:	4b55      	ldr	r3, [pc, #340]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800626e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006272:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006274:	2302      	movs	r3, #2
 8006276:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006278:	2303      	movs	r3, #3
 800627a:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800627c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006280:	4619      	mov	r1, r3
 8006282:	4852      	ldr	r0, [pc, #328]	@ (80063cc <HAL_UART_MspInit+0x2b4>)
 8006284:	f000 fcf8 	bl	8006c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800628c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800628e:	2300      	movs	r3, #0
 8006290:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006292:	2300      	movs	r3, #0
 8006294:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006296:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800629a:	4619      	mov	r1, r3
 800629c:	484b      	ldr	r0, [pc, #300]	@ (80063cc <HAL_UART_MspInit+0x2b4>)
 800629e:	f000 fceb 	bl	8006c78 <HAL_GPIO_Init>
}
 80062a2:	e082      	b.n	80063aa <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART2)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a49      	ldr	r2, [pc, #292]	@ (80063d0 <HAL_UART_MspInit+0x2b8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d13e      	bne.n	800632c <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART2_CLK_ENABLE();
 80062ae:	4b42      	ldr	r3, [pc, #264]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	4a41      	ldr	r2, [pc, #260]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80062b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b8:	61d3      	str	r3, [r2, #28]
 80062ba:	4b3f      	ldr	r3, [pc, #252]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80062c6:	4b3c      	ldr	r3, [pc, #240]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	4a3b      	ldr	r2, [pc, #236]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80062cc:	f043 0320 	orr.w	r3, r3, #32
 80062d0:	6193      	str	r3, [r2, #24]
 80062d2:	4b39      	ldr	r3, [pc, #228]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80062de:	2320      	movs	r3, #32
 80062e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e2:	2302      	movs	r3, #2
 80062e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062e6:	2303      	movs	r3, #3
 80062e8:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80062ee:	4619      	mov	r1, r3
 80062f0:	4834      	ldr	r0, [pc, #208]	@ (80063c4 <HAL_UART_MspInit+0x2ac>)
 80062f2:	f000 fcc1 	bl	8006c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80062f6:	2340      	movs	r3, #64	@ 0x40
 80062f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062fa:	2300      	movs	r3, #0
 80062fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006302:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006306:	4619      	mov	r1, r3
 8006308:	482e      	ldr	r0, [pc, #184]	@ (80063c4 <HAL_UART_MspInit+0x2ac>)
 800630a:	f000 fcb5 	bl	8006c78 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART2_ENABLE();
 800630e:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <HAL_UART_MspInit+0x2bc>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	647b      	str	r3, [r7, #68]	@ 0x44
 8006314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006316:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800631a:	647b      	str	r3, [r7, #68]	@ 0x44
 800631c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800631e:	f043 0308 	orr.w	r3, r3, #8
 8006322:	647b      	str	r3, [r7, #68]	@ 0x44
 8006324:	4a2b      	ldr	r2, [pc, #172]	@ (80063d4 <HAL_UART_MspInit+0x2bc>)
 8006326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006328:	6053      	str	r3, [r2, #4]
}
 800632a:	e03e      	b.n	80063aa <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART3)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a29      	ldr	r2, [pc, #164]	@ (80063d8 <HAL_UART_MspInit+0x2c0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d139      	bne.n	80063aa <HAL_UART_MspInit+0x292>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006336:	4b20      	ldr	r3, [pc, #128]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	4a1f      	ldr	r2, [pc, #124]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 800633c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006340:	61d3      	str	r3, [r2, #28]
 8006342:	4b1d      	ldr	r3, [pc, #116]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800634e:	4b1a      	ldr	r3, [pc, #104]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	4a19      	ldr	r2, [pc, #100]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 8006354:	f043 0308 	orr.w	r3, r3, #8
 8006358:	6193      	str	r3, [r2, #24]
 800635a:	4b17      	ldr	r3, [pc, #92]	@ (80063b8 <HAL_UART_MspInit+0x2a0>)
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800636a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800636c:	2302      	movs	r3, #2
 800636e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006370:	2303      	movs	r3, #3
 8006372:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006374:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006378:	4619      	mov	r1, r3
 800637a:	4818      	ldr	r0, [pc, #96]	@ (80063dc <HAL_UART_MspInit+0x2c4>)
 800637c:	f000 fc7c 	bl	8006c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006380:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006384:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006386:	2300      	movs	r3, #0
 8006388:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800638a:	2300      	movs	r3, #0
 800638c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800638e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006392:	4619      	mov	r1, r3
 8006394:	4811      	ldr	r0, [pc, #68]	@ (80063dc <HAL_UART_MspInit+0x2c4>)
 8006396:	f000 fc6f 	bl	8006c78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800639a:	2200      	movs	r2, #0
 800639c:	2105      	movs	r1, #5
 800639e:	2027      	movs	r0, #39	@ 0x27
 80063a0:	f000 fafd 	bl	800699e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80063a4:	2027      	movs	r0, #39	@ 0x27
 80063a6:	f000 fb16 	bl	80069d6 <HAL_NVIC_EnableIRQ>
}
 80063aa:	bf00      	nop
 80063ac:	3748      	adds	r7, #72	@ 0x48
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40004c00 	.word	0x40004c00
 80063b8:	40021000 	.word	0x40021000
 80063bc:	40011000 	.word	0x40011000
 80063c0:	40005000 	.word	0x40005000
 80063c4:	40011400 	.word	0x40011400
 80063c8:	40013800 	.word	0x40013800
 80063cc:	40010800 	.word	0x40010800
 80063d0:	40004400 	.word	0x40004400
 80063d4:	40010000 	.word	0x40010000
 80063d8:	40004800 	.word	0x40004800
 80063dc:	40010c00 	.word	0x40010c00

080063e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08e      	sub	sp, #56	@ 0x38
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80063f6:	4b34      	ldr	r3, [pc, #208]	@ (80064c8 <HAL_InitTick+0xe8>)
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	4a33      	ldr	r2, [pc, #204]	@ (80064c8 <HAL_InitTick+0xe8>)
 80063fc:	f043 0310 	orr.w	r3, r3, #16
 8006400:	61d3      	str	r3, [r2, #28]
 8006402:	4b31      	ldr	r3, [pc, #196]	@ (80064c8 <HAL_InitTick+0xe8>)
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800640e:	f107 0210 	add.w	r2, r7, #16
 8006412:	f107 0314 	add.w	r3, r7, #20
 8006416:	4611      	mov	r1, r2
 8006418:	4618      	mov	r0, r3
 800641a:	f001 fa1f 	bl	800785c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006428:	f001 f9f0 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 800642c:	6378      	str	r0, [r7, #52]	@ 0x34
 800642e:	e004      	b.n	800643a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006430:	f001 f9ec 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 8006434:	4603      	mov	r3, r0
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800643a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643c:	4a23      	ldr	r2, [pc, #140]	@ (80064cc <HAL_InitTick+0xec>)
 800643e:	fba2 2303 	umull	r2, r3, r2, r3
 8006442:	0c9b      	lsrs	r3, r3, #18
 8006444:	3b01      	subs	r3, #1
 8006446:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006448:	4b21      	ldr	r3, [pc, #132]	@ (80064d0 <HAL_InitTick+0xf0>)
 800644a:	4a22      	ldr	r2, [pc, #136]	@ (80064d4 <HAL_InitTick+0xf4>)
 800644c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800644e:	4b20      	ldr	r3, [pc, #128]	@ (80064d0 <HAL_InitTick+0xf0>)
 8006450:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006454:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006456:	4a1e      	ldr	r2, [pc, #120]	@ (80064d0 <HAL_InitTick+0xf0>)
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800645c:	4b1c      	ldr	r3, [pc, #112]	@ (80064d0 <HAL_InitTick+0xf0>)
 800645e:	2200      	movs	r2, #0
 8006460:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006462:	4b1b      	ldr	r3, [pc, #108]	@ (80064d0 <HAL_InitTick+0xf0>)
 8006464:	2200      	movs	r2, #0
 8006466:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006468:	4b19      	ldr	r3, [pc, #100]	@ (80064d0 <HAL_InitTick+0xf0>)
 800646a:	2200      	movs	r2, #0
 800646c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800646e:	4818      	ldr	r0, [pc, #96]	@ (80064d0 <HAL_InitTick+0xf0>)
 8006470:	f001 ffca 	bl	8008408 <HAL_TIM_Base_Init>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800647a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800647e:	2b00      	cmp	r3, #0
 8006480:	d11b      	bne.n	80064ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006482:	4813      	ldr	r0, [pc, #76]	@ (80064d0 <HAL_InitTick+0xf0>)
 8006484:	f002 f818 	bl	80084b8 <HAL_TIM_Base_Start_IT>
 8006488:	4603      	mov	r3, r0
 800648a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800648e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006492:	2b00      	cmp	r3, #0
 8006494:	d111      	bne.n	80064ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8006496:	2036      	movs	r0, #54	@ 0x36
 8006498:	f000 fa9d 	bl	80069d6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d808      	bhi.n	80064b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80064a2:	2200      	movs	r2, #0
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	2036      	movs	r0, #54	@ 0x36
 80064a8:	f000 fa79 	bl	800699e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80064ac:	4a0a      	ldr	r2, [pc, #40]	@ (80064d8 <HAL_InitTick+0xf8>)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e002      	b.n	80064ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80064ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3738      	adds	r7, #56	@ 0x38
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40021000 	.word	0x40021000
 80064cc:	431bde83 	.word	0x431bde83
 80064d0:	20000778 	.word	0x20000778
 80064d4:	40001000 	.word	0x40001000
 80064d8:	20000024 	.word	0x20000024

080064dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <NMI_Handler+0x4>

080064e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064e8:	bf00      	nop
 80064ea:	e7fd      	b.n	80064e8 <HardFault_Handler+0x4>

080064ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <MemManage_Handler+0x4>

080064f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064f8:	bf00      	nop
 80064fa:	e7fd      	b.n	80064f8 <BusFault_Handler+0x4>

080064fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006500:	bf00      	nop
 8006502:	e7fd      	b.n	8006500 <UsageFault_Handler+0x4>

08006504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006508:	bf00      	nop
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_A2_Pin);
 8006514:	2001      	movs	r0, #1
 8006516:	f000 fd73 	bl	8007000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800651a:	bf00      	nop
 800651c:	bd80      	pop	{r7, pc}

0800651e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_A1_Pin);
 8006522:	2002      	movs	r0, #2
 8006524:	f000 fd6c 	bl	8007000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006528:	bf00      	nop
 800652a:	bd80      	pop	{r7, pc}

0800652c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_B1_Pin);
 8006530:	2004      	movs	r0, #4
 8006532:	f000 fd65 	bl	8007000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006536:	bf00      	nop
 8006538:	bd80      	pop	{r7, pc}

0800653a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_B2_Pin);
 800653e:	2008      	movs	r0, #8
 8006540:	f000 fd5e 	bl	8007000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006544:	bf00      	nop
 8006546:	bd80      	pop	{r7, pc}

08006548 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800654c:	4802      	ldr	r0, [pc, #8]	@ (8006558 <USART3_IRQHandler+0x10>)
 800654e:	f002 fac3 	bl	8008ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006552:	bf00      	nop
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	2000062c 	.word	0x2000062c

0800655c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_B1_Pin);
 8006560:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006564:	f000 fd4c 	bl	8007000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_B2_Pin);
 8006568:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800656c:	f000 fd48 	bl	8007000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_A2_Pin);
 8006570:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006574:	f000 fd44 	bl	8007000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_A1_Pin);
 8006578:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800657c:	f000 fd40 	bl	8007000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006580:	bf00      	nop
 8006582:	bd80      	pop	{r7, pc}

08006584 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006588:	4802      	ldr	r0, [pc, #8]	@ (8006594 <UART4_IRQHandler+0x10>)
 800658a:	f002 faa5 	bl	8008ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800658e:	bf00      	nop
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	2000050c 	.word	0x2000050c

08006598 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800659c:	4802      	ldr	r0, [pc, #8]	@ (80065a8 <TIM6_IRQHandler+0x10>)
 800659e:	f001 ffeb 	bl	8008578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80065a2:	bf00      	nop
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000778 	.word	0x20000778

080065ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
  return 1;
 80065b0:	2301      	movs	r3, #1
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr

080065ba <_kill>:

int _kill(int pid, int sig)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80065c4:	f004 ffa0 	bl	800b508 <__errno>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2216      	movs	r2, #22
 80065cc:	601a      	str	r2, [r3, #0]
  return -1;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <_exit>:

void _exit (int status)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80065e2:	f04f 31ff 	mov.w	r1, #4294967295
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff ffe7 	bl	80065ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <_exit+0x12>

080065f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	e00a      	b.n	8006618 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006602:	f3af 8000 	nop.w
 8006606:	4601      	mov	r1, r0
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	60ba      	str	r2, [r7, #8]
 800660e:	b2ca      	uxtb	r2, r1
 8006610:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	3301      	adds	r3, #1
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	429a      	cmp	r2, r3
 800661e:	dbf0      	blt.n	8006602 <_read+0x12>
  }

  return len;
 8006620:	687b      	ldr	r3, [r7, #4]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b086      	sub	sp, #24
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e009      	b.n	8006650 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	60ba      	str	r2, [r7, #8]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	3301      	adds	r3, #1
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	dbf1      	blt.n	800663c <_write+0x12>
  }
  return len;
 8006658:	687b      	ldr	r3, [r7, #4]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <_close>:

int _close(int file)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800666a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800666e:	4618      	mov	r0, r3
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006688:	605a      	str	r2, [r3, #4]
  return 0;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <_isatty>:

int _isatty(int file)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800669e:	2301      	movs	r3, #1
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr

080066aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr
	...

080066c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80066cc:	4a14      	ldr	r2, [pc, #80]	@ (8006720 <_sbrk+0x5c>)
 80066ce:	4b15      	ldr	r3, [pc, #84]	@ (8006724 <_sbrk+0x60>)
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066d8:	4b13      	ldr	r3, [pc, #76]	@ (8006728 <_sbrk+0x64>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80066e0:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <_sbrk+0x64>)
 80066e2:	4a12      	ldr	r2, [pc, #72]	@ (800672c <_sbrk+0x68>)
 80066e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066e6:	4b10      	ldr	r3, [pc, #64]	@ (8006728 <_sbrk+0x64>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4413      	add	r3, r2
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d207      	bcs.n	8006704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066f4:	f004 ff08 	bl	800b508 <__errno>
 80066f8:	4603      	mov	r3, r0
 80066fa:	220c      	movs	r2, #12
 80066fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	e009      	b.n	8006718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006704:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <_sbrk+0x64>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800670a:	4b07      	ldr	r3, [pc, #28]	@ (8006728 <_sbrk+0x64>)
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4413      	add	r3, r2
 8006712:	4a05      	ldr	r2, [pc, #20]	@ (8006728 <_sbrk+0x64>)
 8006714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	2000c000 	.word	0x2000c000
 8006724:	00000400 	.word	0x00000400
 8006728:	200007c0 	.word	0x200007c0
 800672c:	20001660 	.word	0x20001660

08006730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006734:	bf00      	nop
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800673c:	f7ff fff8 	bl	8006730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006740:	480b      	ldr	r0, [pc, #44]	@ (8006770 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006742:	490c      	ldr	r1, [pc, #48]	@ (8006774 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006744:	4a0c      	ldr	r2, [pc, #48]	@ (8006778 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006748:	e002      	b.n	8006750 <LoopCopyDataInit>

0800674a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800674a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800674c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800674e:	3304      	adds	r3, #4

08006750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006754:	d3f9      	bcc.n	800674a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006756:	4a09      	ldr	r2, [pc, #36]	@ (800677c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006758:	4c09      	ldr	r4, [pc, #36]	@ (8006780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800675a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800675c:	e001      	b.n	8006762 <LoopFillZerobss>

0800675e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800675e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006760:	3204      	adds	r2, #4

08006762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006764:	d3fb      	bcc.n	800675e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006766:	f004 fed5 	bl	800b514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800676a:	f7fb fb23 	bl	8001db4 <main>
  bx lr
 800676e:	4770      	bx	lr
  ldr r0, =_sdata
 8006770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006774:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8006778:	0800e3b8 	.word	0x0800e3b8
  ldr r2, =_sbss
 800677c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8006780:	20001660 	.word	0x20001660

08006784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006784:	e7fe      	b.n	8006784 <ADC1_2_IRQHandler>
	...

08006788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800678c:	4b08      	ldr	r3, [pc, #32]	@ (80067b0 <HAL_Init+0x28>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a07      	ldr	r2, [pc, #28]	@ (80067b0 <HAL_Init+0x28>)
 8006792:	f043 0310 	orr.w	r3, r3, #16
 8006796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006798:	2003      	movs	r0, #3
 800679a:	f000 f8f5 	bl	8006988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800679e:	200f      	movs	r0, #15
 80067a0:	f7ff fe1e 	bl	80063e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067a4:	f7ff fc26 	bl	8005ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40022000 	.word	0x40022000

080067b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067b8:	4b05      	ldr	r3, [pc, #20]	@ (80067d0 <HAL_IncTick+0x1c>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	4b05      	ldr	r3, [pc, #20]	@ (80067d4 <HAL_IncTick+0x20>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4413      	add	r3, r2
 80067c4:	4a03      	ldr	r2, [pc, #12]	@ (80067d4 <HAL_IncTick+0x20>)
 80067c6:	6013      	str	r3, [r2, #0]
}
 80067c8:	bf00      	nop
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr
 80067d0:	20000028 	.word	0x20000028
 80067d4:	200007c4 	.word	0x200007c4

080067d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  return uwTick;
 80067dc:	4b02      	ldr	r3, [pc, #8]	@ (80067e8 <HAL_GetTick+0x10>)
 80067de:	681b      	ldr	r3, [r3, #0]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr
 80067e8:	200007c4 	.word	0x200007c4

080067ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067f4:	f7ff fff0 	bl	80067d8 <HAL_GetTick>
 80067f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006804:	d005      	beq.n	8006812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006806:	4b0a      	ldr	r3, [pc, #40]	@ (8006830 <HAL_Delay+0x44>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006812:	bf00      	nop
 8006814:	f7ff ffe0 	bl	80067d8 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	429a      	cmp	r2, r3
 8006822:	d8f7      	bhi.n	8006814 <HAL_Delay+0x28>
  {
  }
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000028 	.word	0x20000028

08006834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006844:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <__NVIC_SetPriorityGrouping+0x44>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006850:	4013      	ands	r3, r2
 8006852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800685c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006866:	4a04      	ldr	r2, [pc, #16]	@ (8006878 <__NVIC_SetPriorityGrouping+0x44>)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	60d3      	str	r3, [r2, #12]
}
 800686c:	bf00      	nop
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	e000ed00 	.word	0xe000ed00

0800687c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006880:	4b04      	ldr	r3, [pc, #16]	@ (8006894 <__NVIC_GetPriorityGrouping+0x18>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	f003 0307 	and.w	r3, r3, #7
}
 800688a:	4618      	mov	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	e000ed00 	.word	0xe000ed00

08006898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	db0b      	blt.n	80068c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	f003 021f 	and.w	r2, r3, #31
 80068b0:	4906      	ldr	r1, [pc, #24]	@ (80068cc <__NVIC_EnableIRQ+0x34>)
 80068b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068b6:	095b      	lsrs	r3, r3, #5
 80068b8:	2001      	movs	r0, #1
 80068ba:	fa00 f202 	lsl.w	r2, r0, r2
 80068be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr
 80068cc:	e000e100 	.word	0xe000e100

080068d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	6039      	str	r1, [r7, #0]
 80068da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	db0a      	blt.n	80068fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	490c      	ldr	r1, [pc, #48]	@ (800691c <__NVIC_SetPriority+0x4c>)
 80068ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ee:	0112      	lsls	r2, r2, #4
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	440b      	add	r3, r1
 80068f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068f8:	e00a      	b.n	8006910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	4908      	ldr	r1, [pc, #32]	@ (8006920 <__NVIC_SetPriority+0x50>)
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	3b04      	subs	r3, #4
 8006908:	0112      	lsls	r2, r2, #4
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	440b      	add	r3, r1
 800690e:	761a      	strb	r2, [r3, #24]
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	bc80      	pop	{r7}
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	e000e100 	.word	0xe000e100
 8006920:	e000ed00 	.word	0xe000ed00

08006924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006924:	b480      	push	{r7}
 8006926:	b089      	sub	sp, #36	@ 0x24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f1c3 0307 	rsb	r3, r3, #7
 800693e:	2b04      	cmp	r3, #4
 8006940:	bf28      	it	cs
 8006942:	2304      	movcs	r3, #4
 8006944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	3304      	adds	r3, #4
 800694a:	2b06      	cmp	r3, #6
 800694c:	d902      	bls.n	8006954 <NVIC_EncodePriority+0x30>
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	3b03      	subs	r3, #3
 8006952:	e000      	b.n	8006956 <NVIC_EncodePriority+0x32>
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006958:	f04f 32ff 	mov.w	r2, #4294967295
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	43da      	mvns	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	401a      	ands	r2, r3
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800696c:	f04f 31ff 	mov.w	r1, #4294967295
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	fa01 f303 	lsl.w	r3, r1, r3
 8006976:	43d9      	mvns	r1, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800697c:	4313      	orrs	r3, r2
         );
}
 800697e:	4618      	mov	r0, r3
 8006980:	3724      	adds	r7, #36	@ 0x24
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr

08006988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff ff4f 	bl	8006834 <__NVIC_SetPriorityGrouping>
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800699e:	b580      	push	{r7, lr}
 80069a0:	b086      	sub	sp, #24
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	4603      	mov	r3, r0
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069b0:	f7ff ff64 	bl	800687c <__NVIC_GetPriorityGrouping>
 80069b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	6978      	ldr	r0, [r7, #20]
 80069bc:	f7ff ffb2 	bl	8006924 <NVIC_EncodePriority>
 80069c0:	4602      	mov	r2, r0
 80069c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c6:	4611      	mov	r1, r2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff ff81 	bl	80068d0 <__NVIC_SetPriority>
}
 80069ce:	bf00      	nop
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	4603      	mov	r3, r0
 80069de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff ff57 	bl	8006898 <__NVIC_EnableIRQ>
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d008      	beq.n	8006a1c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e020      	b.n	8006a5e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 020e 	bic.w	r2, r2, #14
 8006a2a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0201 	bic.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a44:	2101      	movs	r1, #1
 8006a46:	fa01 f202 	lsl.w	r2, r1, r2
 8006a4a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d005      	beq.n	8006a8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2204      	movs	r2, #4
 8006a84:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	73fb      	strb	r3, [r7, #15]
 8006a8a:	e0d6      	b.n	8006c3a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 020e 	bic.w	r2, r2, #14
 8006a9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0201 	bic.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4b64      	ldr	r3, [pc, #400]	@ (8006c44 <HAL_DMA_Abort_IT+0x1dc>)
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d958      	bls.n	8006b6a <HAL_DMA_Abort_IT+0x102>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a62      	ldr	r2, [pc, #392]	@ (8006c48 <HAL_DMA_Abort_IT+0x1e0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d04f      	beq.n	8006b62 <HAL_DMA_Abort_IT+0xfa>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a61      	ldr	r2, [pc, #388]	@ (8006c4c <HAL_DMA_Abort_IT+0x1e4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d048      	beq.n	8006b5e <HAL_DMA_Abort_IT+0xf6>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a5f      	ldr	r2, [pc, #380]	@ (8006c50 <HAL_DMA_Abort_IT+0x1e8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d040      	beq.n	8006b58 <HAL_DMA_Abort_IT+0xf0>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a5e      	ldr	r2, [pc, #376]	@ (8006c54 <HAL_DMA_Abort_IT+0x1ec>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d038      	beq.n	8006b52 <HAL_DMA_Abort_IT+0xea>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a5c      	ldr	r2, [pc, #368]	@ (8006c58 <HAL_DMA_Abort_IT+0x1f0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d030      	beq.n	8006b4c <HAL_DMA_Abort_IT+0xe4>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a5b      	ldr	r2, [pc, #364]	@ (8006c5c <HAL_DMA_Abort_IT+0x1f4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d028      	beq.n	8006b46 <HAL_DMA_Abort_IT+0xde>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a52      	ldr	r2, [pc, #328]	@ (8006c44 <HAL_DMA_Abort_IT+0x1dc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d020      	beq.n	8006b40 <HAL_DMA_Abort_IT+0xd8>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a57      	ldr	r2, [pc, #348]	@ (8006c60 <HAL_DMA_Abort_IT+0x1f8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d019      	beq.n	8006b3c <HAL_DMA_Abort_IT+0xd4>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a55      	ldr	r2, [pc, #340]	@ (8006c64 <HAL_DMA_Abort_IT+0x1fc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d012      	beq.n	8006b38 <HAL_DMA_Abort_IT+0xd0>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a54      	ldr	r2, [pc, #336]	@ (8006c68 <HAL_DMA_Abort_IT+0x200>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00a      	beq.n	8006b32 <HAL_DMA_Abort_IT+0xca>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a52      	ldr	r2, [pc, #328]	@ (8006c6c <HAL_DMA_Abort_IT+0x204>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d102      	bne.n	8006b2c <HAL_DMA_Abort_IT+0xc4>
 8006b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b2a:	e01b      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006b30:	e018      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b36:	e015      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	e013      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e011      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b44:	e00e      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b46:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006b4a:	e00b      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006b50:	e008      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b56:	e005      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b5c:	e002      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b5e:	2310      	movs	r3, #16
 8006b60:	e000      	b.n	8006b64 <HAL_DMA_Abort_IT+0xfc>
 8006b62:	2301      	movs	r3, #1
 8006b64:	4a42      	ldr	r2, [pc, #264]	@ (8006c70 <HAL_DMA_Abort_IT+0x208>)
 8006b66:	6053      	str	r3, [r2, #4]
 8006b68:	e057      	b.n	8006c1a <HAL_DMA_Abort_IT+0x1b2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a36      	ldr	r2, [pc, #216]	@ (8006c48 <HAL_DMA_Abort_IT+0x1e0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d04f      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x1ac>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a34      	ldr	r2, [pc, #208]	@ (8006c4c <HAL_DMA_Abort_IT+0x1e4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d048      	beq.n	8006c10 <HAL_DMA_Abort_IT+0x1a8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a33      	ldr	r2, [pc, #204]	@ (8006c50 <HAL_DMA_Abort_IT+0x1e8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d040      	beq.n	8006c0a <HAL_DMA_Abort_IT+0x1a2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a31      	ldr	r2, [pc, #196]	@ (8006c54 <HAL_DMA_Abort_IT+0x1ec>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d038      	beq.n	8006c04 <HAL_DMA_Abort_IT+0x19c>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a30      	ldr	r2, [pc, #192]	@ (8006c58 <HAL_DMA_Abort_IT+0x1f0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d030      	beq.n	8006bfe <HAL_DMA_Abort_IT+0x196>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8006c5c <HAL_DMA_Abort_IT+0x1f4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d028      	beq.n	8006bf8 <HAL_DMA_Abort_IT+0x190>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a26      	ldr	r2, [pc, #152]	@ (8006c44 <HAL_DMA_Abort_IT+0x1dc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d020      	beq.n	8006bf2 <HAL_DMA_Abort_IT+0x18a>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8006c60 <HAL_DMA_Abort_IT+0x1f8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d019      	beq.n	8006bee <HAL_DMA_Abort_IT+0x186>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a29      	ldr	r2, [pc, #164]	@ (8006c64 <HAL_DMA_Abort_IT+0x1fc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d012      	beq.n	8006bea <HAL_DMA_Abort_IT+0x182>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a27      	ldr	r2, [pc, #156]	@ (8006c68 <HAL_DMA_Abort_IT+0x200>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00a      	beq.n	8006be4 <HAL_DMA_Abort_IT+0x17c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a26      	ldr	r2, [pc, #152]	@ (8006c6c <HAL_DMA_Abort_IT+0x204>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d102      	bne.n	8006bde <HAL_DMA_Abort_IT+0x176>
 8006bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bdc:	e01b      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006bde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006be2:	e018      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006be8:	e015      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006bea:	2310      	movs	r3, #16
 8006bec:	e013      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e011      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006bf2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bf6:	e00e      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006bf8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006bfc:	e00b      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006bfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006c02:	e008      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c08:	e005      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006c0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c0e:	e002      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006c10:	2310      	movs	r3, #16
 8006c12:	e000      	b.n	8006c16 <HAL_DMA_Abort_IT+0x1ae>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4a17      	ldr	r2, [pc, #92]	@ (8006c74 <HAL_DMA_Abort_IT+0x20c>)
 8006c18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
    } 
  }
  return status;
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40020080 	.word	0x40020080
 8006c48:	40020008 	.word	0x40020008
 8006c4c:	4002001c 	.word	0x4002001c
 8006c50:	40020030 	.word	0x40020030
 8006c54:	40020044 	.word	0x40020044
 8006c58:	40020058 	.word	0x40020058
 8006c5c:	4002006c 	.word	0x4002006c
 8006c60:	40020408 	.word	0x40020408
 8006c64:	4002041c 	.word	0x4002041c
 8006c68:	40020430 	.word	0x40020430
 8006c6c:	40020444 	.word	0x40020444
 8006c70:	40020400 	.word	0x40020400
 8006c74:	40020000 	.word	0x40020000

08006c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b08b      	sub	sp, #44	@ 0x2c
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c82:	2300      	movs	r3, #0
 8006c84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006c86:	2300      	movs	r3, #0
 8006c88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c8a:	e179      	b.n	8006f80 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	f040 8168 	bne.w	8006f7a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	4a96      	ldr	r2, [pc, #600]	@ (8006f08 <HAL_GPIO_Init+0x290>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d05e      	beq.n	8006d72 <HAL_GPIO_Init+0xfa>
 8006cb4:	4a94      	ldr	r2, [pc, #592]	@ (8006f08 <HAL_GPIO_Init+0x290>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d875      	bhi.n	8006da6 <HAL_GPIO_Init+0x12e>
 8006cba:	4a94      	ldr	r2, [pc, #592]	@ (8006f0c <HAL_GPIO_Init+0x294>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d058      	beq.n	8006d72 <HAL_GPIO_Init+0xfa>
 8006cc0:	4a92      	ldr	r2, [pc, #584]	@ (8006f0c <HAL_GPIO_Init+0x294>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d86f      	bhi.n	8006da6 <HAL_GPIO_Init+0x12e>
 8006cc6:	4a92      	ldr	r2, [pc, #584]	@ (8006f10 <HAL_GPIO_Init+0x298>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d052      	beq.n	8006d72 <HAL_GPIO_Init+0xfa>
 8006ccc:	4a90      	ldr	r2, [pc, #576]	@ (8006f10 <HAL_GPIO_Init+0x298>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d869      	bhi.n	8006da6 <HAL_GPIO_Init+0x12e>
 8006cd2:	4a90      	ldr	r2, [pc, #576]	@ (8006f14 <HAL_GPIO_Init+0x29c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d04c      	beq.n	8006d72 <HAL_GPIO_Init+0xfa>
 8006cd8:	4a8e      	ldr	r2, [pc, #568]	@ (8006f14 <HAL_GPIO_Init+0x29c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d863      	bhi.n	8006da6 <HAL_GPIO_Init+0x12e>
 8006cde:	4a8e      	ldr	r2, [pc, #568]	@ (8006f18 <HAL_GPIO_Init+0x2a0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d046      	beq.n	8006d72 <HAL_GPIO_Init+0xfa>
 8006ce4:	4a8c      	ldr	r2, [pc, #560]	@ (8006f18 <HAL_GPIO_Init+0x2a0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d85d      	bhi.n	8006da6 <HAL_GPIO_Init+0x12e>
 8006cea:	2b12      	cmp	r3, #18
 8006cec:	d82a      	bhi.n	8006d44 <HAL_GPIO_Init+0xcc>
 8006cee:	2b12      	cmp	r3, #18
 8006cf0:	d859      	bhi.n	8006da6 <HAL_GPIO_Init+0x12e>
 8006cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf8 <HAL_GPIO_Init+0x80>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d73 	.word	0x08006d73
 8006cfc:	08006d4d 	.word	0x08006d4d
 8006d00:	08006d5f 	.word	0x08006d5f
 8006d04:	08006da1 	.word	0x08006da1
 8006d08:	08006da7 	.word	0x08006da7
 8006d0c:	08006da7 	.word	0x08006da7
 8006d10:	08006da7 	.word	0x08006da7
 8006d14:	08006da7 	.word	0x08006da7
 8006d18:	08006da7 	.word	0x08006da7
 8006d1c:	08006da7 	.word	0x08006da7
 8006d20:	08006da7 	.word	0x08006da7
 8006d24:	08006da7 	.word	0x08006da7
 8006d28:	08006da7 	.word	0x08006da7
 8006d2c:	08006da7 	.word	0x08006da7
 8006d30:	08006da7 	.word	0x08006da7
 8006d34:	08006da7 	.word	0x08006da7
 8006d38:	08006da7 	.word	0x08006da7
 8006d3c:	08006d55 	.word	0x08006d55
 8006d40:	08006d69 	.word	0x08006d69
 8006d44:	4a75      	ldr	r2, [pc, #468]	@ (8006f1c <HAL_GPIO_Init+0x2a4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d013      	beq.n	8006d72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006d4a:	e02c      	b.n	8006da6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	623b      	str	r3, [r7, #32]
          break;
 8006d52:	e029      	b.n	8006da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	623b      	str	r3, [r7, #32]
          break;
 8006d5c:	e024      	b.n	8006da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	3308      	adds	r3, #8
 8006d64:	623b      	str	r3, [r7, #32]
          break;
 8006d66:	e01f      	b.n	8006da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	330c      	adds	r3, #12
 8006d6e:	623b      	str	r3, [r7, #32]
          break;
 8006d70:	e01a      	b.n	8006da8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006d7a:	2304      	movs	r3, #4
 8006d7c:	623b      	str	r3, [r7, #32]
          break;
 8006d7e:	e013      	b.n	8006da8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d105      	bne.n	8006d94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006d88:	2308      	movs	r3, #8
 8006d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	611a      	str	r2, [r3, #16]
          break;
 8006d92:	e009      	b.n	8006da8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006d94:	2308      	movs	r3, #8
 8006d96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	615a      	str	r2, [r3, #20]
          break;
 8006d9e:	e003      	b.n	8006da8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006da0:	2300      	movs	r3, #0
 8006da2:	623b      	str	r3, [r7, #32]
          break;
 8006da4:	e000      	b.n	8006da8 <HAL_GPIO_Init+0x130>
          break;
 8006da6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2bff      	cmp	r3, #255	@ 0xff
 8006dac:	d801      	bhi.n	8006db2 <HAL_GPIO_Init+0x13a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	e001      	b.n	8006db6 <HAL_GPIO_Init+0x13e>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3304      	adds	r3, #4
 8006db6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2bff      	cmp	r3, #255	@ 0xff
 8006dbc:	d802      	bhi.n	8006dc4 <HAL_GPIO_Init+0x14c>
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	e002      	b.n	8006dca <HAL_GPIO_Init+0x152>
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	3b08      	subs	r3, #8
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	210f      	movs	r1, #15
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd8:	43db      	mvns	r3, r3
 8006dda:	401a      	ands	r2, r3
 8006ddc:	6a39      	ldr	r1, [r7, #32]
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	fa01 f303 	lsl.w	r3, r1, r3
 8006de4:	431a      	orrs	r2, r3
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 80c1 	beq.w	8006f7a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006df8:	4b49      	ldr	r3, [pc, #292]	@ (8006f20 <HAL_GPIO_Init+0x2a8>)
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	4a48      	ldr	r2, [pc, #288]	@ (8006f20 <HAL_GPIO_Init+0x2a8>)
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	6193      	str	r3, [r2, #24]
 8006e04:	4b46      	ldr	r3, [pc, #280]	@ (8006f20 <HAL_GPIO_Init+0x2a8>)
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006e10:	4a44      	ldr	r2, [pc, #272]	@ (8006f24 <HAL_GPIO_Init+0x2ac>)
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	089b      	lsrs	r3, r3, #2
 8006e16:	3302      	adds	r3, #2
 8006e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	220f      	movs	r2, #15
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	43db      	mvns	r3, r3
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4013      	ands	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a3c      	ldr	r2, [pc, #240]	@ (8006f28 <HAL_GPIO_Init+0x2b0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d01f      	beq.n	8006e7c <HAL_GPIO_Init+0x204>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a3b      	ldr	r2, [pc, #236]	@ (8006f2c <HAL_GPIO_Init+0x2b4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d019      	beq.n	8006e78 <HAL_GPIO_Init+0x200>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a3a      	ldr	r2, [pc, #232]	@ (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d013      	beq.n	8006e74 <HAL_GPIO_Init+0x1fc>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a39      	ldr	r2, [pc, #228]	@ (8006f34 <HAL_GPIO_Init+0x2bc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00d      	beq.n	8006e70 <HAL_GPIO_Init+0x1f8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a38      	ldr	r2, [pc, #224]	@ (8006f38 <HAL_GPIO_Init+0x2c0>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <HAL_GPIO_Init+0x1f4>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a37      	ldr	r2, [pc, #220]	@ (8006f3c <HAL_GPIO_Init+0x2c4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d101      	bne.n	8006e68 <HAL_GPIO_Init+0x1f0>
 8006e64:	2305      	movs	r3, #5
 8006e66:	e00a      	b.n	8006e7e <HAL_GPIO_Init+0x206>
 8006e68:	2306      	movs	r3, #6
 8006e6a:	e008      	b.n	8006e7e <HAL_GPIO_Init+0x206>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	e006      	b.n	8006e7e <HAL_GPIO_Init+0x206>
 8006e70:	2303      	movs	r3, #3
 8006e72:	e004      	b.n	8006e7e <HAL_GPIO_Init+0x206>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e002      	b.n	8006e7e <HAL_GPIO_Init+0x206>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <HAL_GPIO_Init+0x206>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e80:	f002 0203 	and.w	r2, r2, #3
 8006e84:	0092      	lsls	r2, r2, #2
 8006e86:	4093      	lsls	r3, r2
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006e8e:	4925      	ldr	r1, [pc, #148]	@ (8006f24 <HAL_GPIO_Init+0x2ac>)
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	089b      	lsrs	r3, r3, #2
 8006e94:	3302      	adds	r3, #2
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d006      	beq.n	8006eb6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006ea8:	4b25      	ldr	r3, [pc, #148]	@ (8006f40 <HAL_GPIO_Init+0x2c8>)
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	4924      	ldr	r1, [pc, #144]	@ (8006f40 <HAL_GPIO_Init+0x2c8>)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	608b      	str	r3, [r1, #8]
 8006eb4:	e006      	b.n	8006ec4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006eb6:	4b22      	ldr	r3, [pc, #136]	@ (8006f40 <HAL_GPIO_Init+0x2c8>)
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	4920      	ldr	r1, [pc, #128]	@ (8006f40 <HAL_GPIO_Init+0x2c8>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d006      	beq.n	8006ede <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f40 <HAL_GPIO_Init+0x2c8>)
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	491a      	ldr	r1, [pc, #104]	@ (8006f40 <HAL_GPIO_Init+0x2c8>)
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60cb      	str	r3, [r1, #12]
 8006edc:	e006      	b.n	8006eec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006ede:	4b18      	ldr	r3, [pc, #96]	@ (8006f40 <HAL_GPIO_Init+0x2c8>)
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	4916      	ldr	r1, [pc, #88]	@ (8006f40 <HAL_GPIO_Init+0x2c8>)
 8006ee8:	4013      	ands	r3, r2
 8006eea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d025      	beq.n	8006f44 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006ef8:	4b11      	ldr	r3, [pc, #68]	@ (8006f40 <HAL_GPIO_Init+0x2c8>)
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	4910      	ldr	r1, [pc, #64]	@ (8006f40 <HAL_GPIO_Init+0x2c8>)
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	604b      	str	r3, [r1, #4]
 8006f04:	e025      	b.n	8006f52 <HAL_GPIO_Init+0x2da>
 8006f06:	bf00      	nop
 8006f08:	10320000 	.word	0x10320000
 8006f0c:	10310000 	.word	0x10310000
 8006f10:	10220000 	.word	0x10220000
 8006f14:	10210000 	.word	0x10210000
 8006f18:	10120000 	.word	0x10120000
 8006f1c:	10110000 	.word	0x10110000
 8006f20:	40021000 	.word	0x40021000
 8006f24:	40010000 	.word	0x40010000
 8006f28:	40010800 	.word	0x40010800
 8006f2c:	40010c00 	.word	0x40010c00
 8006f30:	40011000 	.word	0x40011000
 8006f34:	40011400 	.word	0x40011400
 8006f38:	40011800 	.word	0x40011800
 8006f3c:	40011c00 	.word	0x40011c00
 8006f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006f44:	4b15      	ldr	r3, [pc, #84]	@ (8006f9c <HAL_GPIO_Init+0x324>)
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	43db      	mvns	r3, r3
 8006f4c:	4913      	ldr	r1, [pc, #76]	@ (8006f9c <HAL_GPIO_Init+0x324>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d006      	beq.n	8006f6c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f9c <HAL_GPIO_Init+0x324>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	490e      	ldr	r1, [pc, #56]	@ (8006f9c <HAL_GPIO_Init+0x324>)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]
 8006f6a:	e006      	b.n	8006f7a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f9c <HAL_GPIO_Init+0x324>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	43db      	mvns	r3, r3
 8006f74:	4909      	ldr	r1, [pc, #36]	@ (8006f9c <HAL_GPIO_Init+0x324>)
 8006f76:	4013      	ands	r3, r2
 8006f78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f47f ae7e 	bne.w	8006c8c <HAL_GPIO_Init+0x14>
  }
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	372c      	adds	r7, #44	@ 0x2c
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr
 8006f9c:	40010400 	.word	0x40010400

08006fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	887b      	ldrh	r3, [r7, #2]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
 8006fbc:	e001      	b.n	8006fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr

08006fce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	807b      	strh	r3, [r7, #2]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fde:	787b      	ldrb	r3, [r7, #1]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fe4:	887a      	ldrh	r2, [r7, #2]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006fea:	e003      	b.n	8006ff4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006fec:	887b      	ldrh	r3, [r7, #2]
 8006fee:	041a      	lsls	r2, r3, #16
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	611a      	str	r2, [r3, #16]
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr
	...

08007000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800700a:	4b08      	ldr	r3, [pc, #32]	@ (800702c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800700c:	695a      	ldr	r2, [r3, #20]
 800700e:	88fb      	ldrh	r3, [r7, #6]
 8007010:	4013      	ands	r3, r2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d006      	beq.n	8007024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007016:	4a05      	ldr	r2, [pc, #20]	@ (800702c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800701c:	88fb      	ldrh	r3, [r7, #6]
 800701e:	4618      	mov	r0, r3
 8007020:	f7fb fe4c 	bl	8002cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	40010400 	.word	0x40010400

08007030 <HAL_GPIOEx_ConfigEventout>:
  * @param  GPIO_PinSource Select the pin used to output the Cortex EVENTOUT signal.
  *   This parameter can be a value of @ref GPIOEx_EVENTOUT_PIN.
  * @retval None
  */
void HAL_GPIOEx_ConfigEventout(uint32_t GPIO_PortSource, uint32_t GPIO_PinSource)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));

  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT) | (AFIO_EVCR_PIN), (GPIO_PortSource) | (GPIO_PinSource));
 800703a:	4b07      	ldr	r3, [pc, #28]	@ (8007058 <HAL_GPIOEx_ConfigEventout+0x28>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	430b      	orrs	r3, r1
 8007048:	4903      	ldr	r1, [pc, #12]	@ (8007058 <HAL_GPIOEx_ConfigEventout+0x28>)
 800704a:	4313      	orrs	r3, r2
 800704c:	600b      	str	r3, [r1, #0]
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr
 8007058:	40010000 	.word	0x40010000

0800705c <HAL_GPIOEx_EnableEventout>:
/**
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8007060:	4b04      	ldr	r3, [pc, #16]	@ (8007074 <HAL_GPIOEx_EnableEventout+0x18>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a03      	ldr	r2, [pc, #12]	@ (8007074 <HAL_GPIOEx_EnableEventout+0x18>)
 8007066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706a:	6013      	str	r3, [r2, #0]
}
 800706c:	bf00      	nop
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	40010000 	.word	0x40010000

08007078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e272      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8087 	beq.w	80071a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007098:	4b92      	ldr	r3, [pc, #584]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f003 030c 	and.w	r3, r3, #12
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d00c      	beq.n	80070be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80070a4:	4b8f      	ldr	r3, [pc, #572]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f003 030c 	and.w	r3, r3, #12
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d112      	bne.n	80070d6 <HAL_RCC_OscConfig+0x5e>
 80070b0:	4b8c      	ldr	r3, [pc, #560]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070bc:	d10b      	bne.n	80070d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070be:	4b89      	ldr	r3, [pc, #548]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d06c      	beq.n	80071a4 <HAL_RCC_OscConfig+0x12c>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d168      	bne.n	80071a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e24c      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070de:	d106      	bne.n	80070ee <HAL_RCC_OscConfig+0x76>
 80070e0:	4b80      	ldr	r3, [pc, #512]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a7f      	ldr	r2, [pc, #508]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80070e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	e02e      	b.n	800714c <HAL_RCC_OscConfig+0xd4>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10c      	bne.n	8007110 <HAL_RCC_OscConfig+0x98>
 80070f6:	4b7b      	ldr	r3, [pc, #492]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a7a      	ldr	r2, [pc, #488]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80070fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	4b78      	ldr	r3, [pc, #480]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a77      	ldr	r2, [pc, #476]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007108:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	e01d      	b.n	800714c <HAL_RCC_OscConfig+0xd4>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007118:	d10c      	bne.n	8007134 <HAL_RCC_OscConfig+0xbc>
 800711a:	4b72      	ldr	r3, [pc, #456]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a71      	ldr	r2, [pc, #452]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	4b6f      	ldr	r3, [pc, #444]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a6e      	ldr	r2, [pc, #440]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 800712c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	e00b      	b.n	800714c <HAL_RCC_OscConfig+0xd4>
 8007134:	4b6b      	ldr	r3, [pc, #428]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a6a      	ldr	r2, [pc, #424]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 800713a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	4b68      	ldr	r3, [pc, #416]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a67      	ldr	r2, [pc, #412]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800714a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d013      	beq.n	800717c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007154:	f7ff fb40 	bl	80067d8 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800715c:	f7ff fb3c 	bl	80067d8 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b64      	cmp	r3, #100	@ 0x64
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e200      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716e:	4b5d      	ldr	r3, [pc, #372]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCC_OscConfig+0xe4>
 800717a:	e014      	b.n	80071a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800717c:	f7ff fb2c 	bl	80067d8 <HAL_GetTick>
 8007180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007182:	e008      	b.n	8007196 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007184:	f7ff fb28 	bl	80067d8 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b64      	cmp	r3, #100	@ 0x64
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e1ec      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007196:	4b53      	ldr	r3, [pc, #332]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1f0      	bne.n	8007184 <HAL_RCC_OscConfig+0x10c>
 80071a2:	e000      	b.n	80071a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d063      	beq.n	800727a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071b2:	4b4c      	ldr	r3, [pc, #304]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f003 030c 	and.w	r3, r3, #12
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00b      	beq.n	80071d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80071be:	4b49      	ldr	r3, [pc, #292]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f003 030c 	and.w	r3, r3, #12
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d11c      	bne.n	8007204 <HAL_RCC_OscConfig+0x18c>
 80071ca:	4b46      	ldr	r3, [pc, #280]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d116      	bne.n	8007204 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071d6:	4b43      	ldr	r3, [pc, #268]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <HAL_RCC_OscConfig+0x176>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d001      	beq.n	80071ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e1c0      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ee:	4b3d      	ldr	r3, [pc, #244]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	4939      	ldr	r1, [pc, #228]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007202:	e03a      	b.n	800727a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d020      	beq.n	800724e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800720c:	4b36      	ldr	r3, [pc, #216]	@ (80072e8 <HAL_RCC_OscConfig+0x270>)
 800720e:	2201      	movs	r2, #1
 8007210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007212:	f7ff fae1 	bl	80067d8 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800721a:	f7ff fadd 	bl	80067d8 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e1a1      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722c:	4b2d      	ldr	r3, [pc, #180]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f0      	beq.n	800721a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007238:	4b2a      	ldr	r3, [pc, #168]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	4927      	ldr	r1, [pc, #156]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007248:	4313      	orrs	r3, r2
 800724a:	600b      	str	r3, [r1, #0]
 800724c:	e015      	b.n	800727a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800724e:	4b26      	ldr	r3, [pc, #152]	@ (80072e8 <HAL_RCC_OscConfig+0x270>)
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007254:	f7ff fac0 	bl	80067d8 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800725c:	f7ff fabc 	bl	80067d8 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e180      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726e:	4b1d      	ldr	r3, [pc, #116]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d03a      	beq.n	80072fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d019      	beq.n	80072c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800728e:	4b17      	ldr	r3, [pc, #92]	@ (80072ec <HAL_RCC_OscConfig+0x274>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007294:	f7ff faa0 	bl	80067d8 <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800729c:	f7ff fa9c 	bl	80067d8 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e160      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ae:	4b0d      	ldr	r3, [pc, #52]	@ (80072e4 <HAL_RCC_OscConfig+0x26c>)
 80072b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d0f0      	beq.n	800729c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80072ba:	2001      	movs	r0, #1
 80072bc:	f000 fafe 	bl	80078bc <RCC_Delay>
 80072c0:	e01c      	b.n	80072fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072c2:	4b0a      	ldr	r3, [pc, #40]	@ (80072ec <HAL_RCC_OscConfig+0x274>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072c8:	f7ff fa86 	bl	80067d8 <HAL_GetTick>
 80072cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072ce:	e00f      	b.n	80072f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d0:	f7ff fa82 	bl	80067d8 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d908      	bls.n	80072f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e146      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
 80072e2:	bf00      	nop
 80072e4:	40021000 	.word	0x40021000
 80072e8:	42420000 	.word	0x42420000
 80072ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f0:	4b92      	ldr	r3, [pc, #584]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e9      	bne.n	80072d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 80a6 	beq.w	8007456 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800730a:	2300      	movs	r3, #0
 800730c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800730e:	4b8b      	ldr	r3, [pc, #556]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10d      	bne.n	8007336 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800731a:	4b88      	ldr	r3, [pc, #544]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	4a87      	ldr	r2, [pc, #540]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 8007320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007324:	61d3      	str	r3, [r2, #28]
 8007326:	4b85      	ldr	r3, [pc, #532]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800732e:	60bb      	str	r3, [r7, #8]
 8007330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007332:	2301      	movs	r3, #1
 8007334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007336:	4b82      	ldr	r3, [pc, #520]	@ (8007540 <HAL_RCC_OscConfig+0x4c8>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800733e:	2b00      	cmp	r3, #0
 8007340:	d118      	bne.n	8007374 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007342:	4b7f      	ldr	r3, [pc, #508]	@ (8007540 <HAL_RCC_OscConfig+0x4c8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a7e      	ldr	r2, [pc, #504]	@ (8007540 <HAL_RCC_OscConfig+0x4c8>)
 8007348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800734c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800734e:	f7ff fa43 	bl	80067d8 <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007354:	e008      	b.n	8007368 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007356:	f7ff fa3f 	bl	80067d8 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b64      	cmp	r3, #100	@ 0x64
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e103      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007368:	4b75      	ldr	r3, [pc, #468]	@ (8007540 <HAL_RCC_OscConfig+0x4c8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0f0      	beq.n	8007356 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d106      	bne.n	800738a <HAL_RCC_OscConfig+0x312>
 800737c:	4b6f      	ldr	r3, [pc, #444]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	4a6e      	ldr	r2, [pc, #440]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 8007382:	f043 0301 	orr.w	r3, r3, #1
 8007386:	6213      	str	r3, [r2, #32]
 8007388:	e02d      	b.n	80073e6 <HAL_RCC_OscConfig+0x36e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10c      	bne.n	80073ac <HAL_RCC_OscConfig+0x334>
 8007392:	4b6a      	ldr	r3, [pc, #424]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	4a69      	ldr	r2, [pc, #420]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	6213      	str	r3, [r2, #32]
 800739e:	4b67      	ldr	r3, [pc, #412]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	4a66      	ldr	r2, [pc, #408]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80073a4:	f023 0304 	bic.w	r3, r3, #4
 80073a8:	6213      	str	r3, [r2, #32]
 80073aa:	e01c      	b.n	80073e6 <HAL_RCC_OscConfig+0x36e>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	2b05      	cmp	r3, #5
 80073b2:	d10c      	bne.n	80073ce <HAL_RCC_OscConfig+0x356>
 80073b4:	4b61      	ldr	r3, [pc, #388]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	4a60      	ldr	r2, [pc, #384]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80073ba:	f043 0304 	orr.w	r3, r3, #4
 80073be:	6213      	str	r3, [r2, #32]
 80073c0:	4b5e      	ldr	r3, [pc, #376]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	4a5d      	ldr	r2, [pc, #372]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	6213      	str	r3, [r2, #32]
 80073cc:	e00b      	b.n	80073e6 <HAL_RCC_OscConfig+0x36e>
 80073ce:	4b5b      	ldr	r3, [pc, #364]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	4a5a      	ldr	r2, [pc, #360]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	6213      	str	r3, [r2, #32]
 80073da:	4b58      	ldr	r3, [pc, #352]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	4a57      	ldr	r2, [pc, #348]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80073e0:	f023 0304 	bic.w	r3, r3, #4
 80073e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d015      	beq.n	800741a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073ee:	f7ff f9f3 	bl	80067d8 <HAL_GetTick>
 80073f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f4:	e00a      	b.n	800740c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7ff f9ef 	bl	80067d8 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007404:	4293      	cmp	r3, r2
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e0b1      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740c:	4b4b      	ldr	r3, [pc, #300]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0ee      	beq.n	80073f6 <HAL_RCC_OscConfig+0x37e>
 8007418:	e014      	b.n	8007444 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800741a:	f7ff f9dd 	bl	80067d8 <HAL_GetTick>
 800741e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007420:	e00a      	b.n	8007438 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007422:	f7ff f9d9 	bl	80067d8 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007430:	4293      	cmp	r3, r2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e09b      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007438:	4b40      	ldr	r3, [pc, #256]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1ee      	bne.n	8007422 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d105      	bne.n	8007456 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800744a:	4b3c      	ldr	r3, [pc, #240]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	4a3b      	ldr	r2, [pc, #236]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 8007450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007454:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 8087 	beq.w	800756e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007460:	4b36      	ldr	r3, [pc, #216]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f003 030c 	and.w	r3, r3, #12
 8007468:	2b08      	cmp	r3, #8
 800746a:	d061      	beq.n	8007530 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d146      	bne.n	8007502 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007474:	4b33      	ldr	r3, [pc, #204]	@ (8007544 <HAL_RCC_OscConfig+0x4cc>)
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800747a:	f7ff f9ad 	bl	80067d8 <HAL_GetTick>
 800747e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007480:	e008      	b.n	8007494 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007482:	f7ff f9a9 	bl	80067d8 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d901      	bls.n	8007494 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e06d      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007494:	4b29      	ldr	r3, [pc, #164]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f0      	bne.n	8007482 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a8:	d108      	bne.n	80074bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074aa:	4b24      	ldr	r3, [pc, #144]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	4921      	ldr	r1, [pc, #132]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074bc:	4b1f      	ldr	r3, [pc, #124]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a19      	ldr	r1, [r3, #32]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074cc:	430b      	orrs	r3, r1
 80074ce:	491b      	ldr	r1, [pc, #108]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007544 <HAL_RCC_OscConfig+0x4cc>)
 80074d6:	2201      	movs	r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074da:	f7ff f97d 	bl	80067d8 <HAL_GetTick>
 80074de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074e0:	e008      	b.n	80074f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e2:	f7ff f979 	bl	80067d8 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d901      	bls.n	80074f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e03d      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074f4:	4b11      	ldr	r3, [pc, #68]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0f0      	beq.n	80074e2 <HAL_RCC_OscConfig+0x46a>
 8007500:	e035      	b.n	800756e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007502:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <HAL_RCC_OscConfig+0x4cc>)
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007508:	f7ff f966 	bl	80067d8 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007510:	f7ff f962 	bl	80067d8 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e026      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007522:	4b06      	ldr	r3, [pc, #24]	@ (800753c <HAL_RCC_OscConfig+0x4c4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1f0      	bne.n	8007510 <HAL_RCC_OscConfig+0x498>
 800752e:	e01e      	b.n	800756e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d107      	bne.n	8007548 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e019      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
 800753c:	40021000 	.word	0x40021000
 8007540:	40007000 	.word	0x40007000
 8007544:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007548:	4b0b      	ldr	r3, [pc, #44]	@ (8007578 <HAL_RCC_OscConfig+0x500>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	429a      	cmp	r2, r3
 800755a:	d106      	bne.n	800756a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007566:	429a      	cmp	r2, r3
 8007568:	d001      	beq.n	800756e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e000      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	40021000 	.word	0x40021000

0800757c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e0d0      	b.n	8007732 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007590:	4b6a      	ldr	r3, [pc, #424]	@ (800773c <HAL_RCC_ClockConfig+0x1c0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d910      	bls.n	80075c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800759e:	4b67      	ldr	r3, [pc, #412]	@ (800773c <HAL_RCC_ClockConfig+0x1c0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f023 0207 	bic.w	r2, r3, #7
 80075a6:	4965      	ldr	r1, [pc, #404]	@ (800773c <HAL_RCC_ClockConfig+0x1c0>)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ae:	4b63      	ldr	r3, [pc, #396]	@ (800773c <HAL_RCC_ClockConfig+0x1c0>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d001      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0b8      	b.n	8007732 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d020      	beq.n	800760e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075d8:	4b59      	ldr	r3, [pc, #356]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4a58      	ldr	r2, [pc, #352]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80075e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075f0:	4b53      	ldr	r3, [pc, #332]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	4a52      	ldr	r2, [pc, #328]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80075fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075fc:	4b50      	ldr	r3, [pc, #320]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	494d      	ldr	r1, [pc, #308]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 800760a:	4313      	orrs	r3, r2
 800760c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d040      	beq.n	800769c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d107      	bne.n	8007632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007622:	4b47      	ldr	r3, [pc, #284]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d115      	bne.n	800765a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e07f      	b.n	8007732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d107      	bne.n	800764a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800763a:	4b41      	ldr	r3, [pc, #260]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e073      	b.n	8007732 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800764a:	4b3d      	ldr	r3, [pc, #244]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e06b      	b.n	8007732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800765a:	4b39      	ldr	r3, [pc, #228]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f023 0203 	bic.w	r2, r3, #3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	4936      	ldr	r1, [pc, #216]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 8007668:	4313      	orrs	r3, r2
 800766a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800766c:	f7ff f8b4 	bl	80067d8 <HAL_GetTick>
 8007670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007672:	e00a      	b.n	800768a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007674:	f7ff f8b0 	bl	80067d8 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007682:	4293      	cmp	r3, r2
 8007684:	d901      	bls.n	800768a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e053      	b.n	8007732 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768a:	4b2d      	ldr	r3, [pc, #180]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f003 020c 	and.w	r2, r3, #12
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	429a      	cmp	r2, r3
 800769a:	d1eb      	bne.n	8007674 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800769c:	4b27      	ldr	r3, [pc, #156]	@ (800773c <HAL_RCC_ClockConfig+0x1c0>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d210      	bcs.n	80076cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076aa:	4b24      	ldr	r3, [pc, #144]	@ (800773c <HAL_RCC_ClockConfig+0x1c0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f023 0207 	bic.w	r2, r3, #7
 80076b2:	4922      	ldr	r1, [pc, #136]	@ (800773c <HAL_RCC_ClockConfig+0x1c0>)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ba:	4b20      	ldr	r3, [pc, #128]	@ (800773c <HAL_RCC_ClockConfig+0x1c0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d001      	beq.n	80076cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e032      	b.n	8007732 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d008      	beq.n	80076ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076d8:	4b19      	ldr	r3, [pc, #100]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	4916      	ldr	r1, [pc, #88]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076f6:	4b12      	ldr	r3, [pc, #72]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	490e      	ldr	r1, [pc, #56]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 8007706:	4313      	orrs	r3, r2
 8007708:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800770a:	f000 f821 	bl	8007750 <HAL_RCC_GetSysClockFreq>
 800770e:	4602      	mov	r2, r0
 8007710:	4b0b      	ldr	r3, [pc, #44]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	091b      	lsrs	r3, r3, #4
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	490a      	ldr	r1, [pc, #40]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 800771c:	5ccb      	ldrb	r3, [r1, r3]
 800771e:	fa22 f303 	lsr.w	r3, r2, r3
 8007722:	4a09      	ldr	r2, [pc, #36]	@ (8007748 <HAL_RCC_ClockConfig+0x1cc>)
 8007724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007726:	4b09      	ldr	r3, [pc, #36]	@ (800774c <HAL_RCC_ClockConfig+0x1d0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fe58 	bl	80063e0 <HAL_InitTick>

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	40022000 	.word	0x40022000
 8007740:	40021000 	.word	0x40021000
 8007744:	0800e00c 	.word	0x0800e00c
 8007748:	20000020 	.word	0x20000020
 800774c:	20000024 	.word	0x20000024

08007750 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	2300      	movs	r3, #0
 800775c:	60bb      	str	r3, [r7, #8]
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	2300      	movs	r3, #0
 8007764:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800776a:	4b1e      	ldr	r3, [pc, #120]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f003 030c 	and.w	r3, r3, #12
 8007776:	2b04      	cmp	r3, #4
 8007778:	d002      	beq.n	8007780 <HAL_RCC_GetSysClockFreq+0x30>
 800777a:	2b08      	cmp	r3, #8
 800777c:	d003      	beq.n	8007786 <HAL_RCC_GetSysClockFreq+0x36>
 800777e:	e027      	b.n	80077d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007780:	4b19      	ldr	r3, [pc, #100]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007782:	613b      	str	r3, [r7, #16]
      break;
 8007784:	e027      	b.n	80077d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	0c9b      	lsrs	r3, r3, #18
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	4a17      	ldr	r2, [pc, #92]	@ (80077ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8007790:	5cd3      	ldrb	r3, [r2, r3]
 8007792:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d010      	beq.n	80077c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800779e:	4b11      	ldr	r3, [pc, #68]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	0c5b      	lsrs	r3, r3, #17
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	4a11      	ldr	r2, [pc, #68]	@ (80077f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80077aa:	5cd3      	ldrb	r3, [r2, r3]
 80077ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a0d      	ldr	r2, [pc, #52]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80077b2:	fb03 f202 	mul.w	r2, r3, r2
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	e004      	b.n	80077ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a0c      	ldr	r2, [pc, #48]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80077c4:	fb02 f303 	mul.w	r3, r2, r3
 80077c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	613b      	str	r3, [r7, #16]
      break;
 80077ce:	e002      	b.n	80077d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80077d0:	4b05      	ldr	r3, [pc, #20]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80077d2:	613b      	str	r3, [r7, #16]
      break;
 80077d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077d6:	693b      	ldr	r3, [r7, #16]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40021000 	.word	0x40021000
 80077e8:	007a1200 	.word	0x007a1200
 80077ec:	0800e024 	.word	0x0800e024
 80077f0:	0800e034 	.word	0x0800e034
 80077f4:	003d0900 	.word	0x003d0900

080077f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077f8:	b480      	push	{r7}
 80077fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077fc:	4b02      	ldr	r3, [pc, #8]	@ (8007808 <HAL_RCC_GetHCLKFreq+0x10>)
 80077fe:	681b      	ldr	r3, [r3, #0]
}
 8007800:	4618      	mov	r0, r3
 8007802:	46bd      	mov	sp, r7
 8007804:	bc80      	pop	{r7}
 8007806:	4770      	bx	lr
 8007808:	20000020 	.word	0x20000020

0800780c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007810:	f7ff fff2 	bl	80077f8 <HAL_RCC_GetHCLKFreq>
 8007814:	4602      	mov	r2, r0
 8007816:	4b05      	ldr	r3, [pc, #20]	@ (800782c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	0a1b      	lsrs	r3, r3, #8
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	4903      	ldr	r1, [pc, #12]	@ (8007830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007822:	5ccb      	ldrb	r3, [r1, r3]
 8007824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007828:	4618      	mov	r0, r3
 800782a:	bd80      	pop	{r7, pc}
 800782c:	40021000 	.word	0x40021000
 8007830:	0800e01c 	.word	0x0800e01c

08007834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007838:	f7ff ffde 	bl	80077f8 <HAL_RCC_GetHCLKFreq>
 800783c:	4602      	mov	r2, r0
 800783e:	4b05      	ldr	r3, [pc, #20]	@ (8007854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	0adb      	lsrs	r3, r3, #11
 8007844:	f003 0307 	and.w	r3, r3, #7
 8007848:	4903      	ldr	r1, [pc, #12]	@ (8007858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800784a:	5ccb      	ldrb	r3, [r1, r3]
 800784c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007850:	4618      	mov	r0, r3
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40021000 	.word	0x40021000
 8007858:	0800e01c 	.word	0x0800e01c

0800785c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	220f      	movs	r2, #15
 800786a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800786c:	4b11      	ldr	r3, [pc, #68]	@ (80078b4 <HAL_RCC_GetClockConfig+0x58>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f003 0203 	and.w	r2, r3, #3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007878:	4b0e      	ldr	r3, [pc, #56]	@ (80078b4 <HAL_RCC_GetClockConfig+0x58>)
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007884:	4b0b      	ldr	r3, [pc, #44]	@ (80078b4 <HAL_RCC_GetClockConfig+0x58>)
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007890:	4b08      	ldr	r3, [pc, #32]	@ (80078b4 <HAL_RCC_GetClockConfig+0x58>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	08db      	lsrs	r3, r3, #3
 8007896:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800789e:	4b06      	ldr	r3, [pc, #24]	@ (80078b8 <HAL_RCC_GetClockConfig+0x5c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0207 	and.w	r2, r3, #7
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr
 80078b4:	40021000 	.word	0x40021000
 80078b8:	40022000 	.word	0x40022000

080078bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80078c4:	4b0a      	ldr	r3, [pc, #40]	@ (80078f0 <RCC_Delay+0x34>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a0a      	ldr	r2, [pc, #40]	@ (80078f4 <RCC_Delay+0x38>)
 80078ca:	fba2 2303 	umull	r2, r3, r2, r3
 80078ce:	0a5b      	lsrs	r3, r3, #9
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	fb02 f303 	mul.w	r3, r2, r3
 80078d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80078d8:	bf00      	nop
  }
  while (Delay --);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1e5a      	subs	r2, r3, #1
 80078de:	60fa      	str	r2, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f9      	bne.n	80078d8 <RCC_Delay+0x1c>
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr
 80078f0:	20000020 	.word	0x20000020
 80078f4:	10624dd3 	.word	0x10624dd3

080078f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e076      	b.n	80079f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	d108      	bne.n	8007924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800791a:	d009      	beq.n	8007930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	61da      	str	r2, [r3, #28]
 8007922:	e005      	b.n	8007930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fe fb8a 	bl	8006064 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079a0:	431a      	orrs	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079aa:	431a      	orrs	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b4:	ea42 0103 	orr.w	r1, r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	0c1a      	lsrs	r2, r3, #16
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f002 0204 	and.w	r2, r2, #4
 80079d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69da      	ldr	r2, [r3, #28]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_SPI_Transmit+0x22>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e12d      	b.n	8007c7e <HAL_SPI_Transmit+0x27e>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a2a:	f7fe fed5 	bl	80067d8 <HAL_GetTick>
 8007a2e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d002      	beq.n	8007a46 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a40:	2302      	movs	r3, #2
 8007a42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a44:	e116      	b.n	8007c74 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_SPI_Transmit+0x52>
 8007a4c:	88fb      	ldrh	r3, [r7, #6]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d102      	bne.n	8007a58 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a56:	e10d      	b.n	8007c74 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	88fa      	ldrh	r2, [r7, #6]
 8007a70:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	88fa      	ldrh	r2, [r7, #6]
 8007a76:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a9e:	d10f      	bne.n	8007ac0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007aae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007abe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aca:	2b40      	cmp	r3, #64	@ 0x40
 8007acc:	d007      	beq.n	8007ade <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007adc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ae6:	d14f      	bne.n	8007b88 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <HAL_SPI_Transmit+0xf6>
 8007af0:	8afb      	ldrh	r3, [r7, #22]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d142      	bne.n	8007b7c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afa:	881a      	ldrh	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b06:	1c9a      	adds	r2, r3, #2
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b1a:	e02f      	b.n	8007b7c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d112      	bne.n	8007b50 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2e:	881a      	ldrh	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3a:	1c9a      	adds	r2, r3, #2
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b4e:	e015      	b.n	8007b7c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b50:	f7fe fe42 	bl	80067d8 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d803      	bhi.n	8007b68 <HAL_SPI_Transmit+0x168>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b66:	d102      	bne.n	8007b6e <HAL_SPI_Transmit+0x16e>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007b7a:	e07b      	b.n	8007c74 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1ca      	bne.n	8007b1c <HAL_SPI_Transmit+0x11c>
 8007b86:	e050      	b.n	8007c2a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <HAL_SPI_Transmit+0x196>
 8007b90:	8afb      	ldrh	r3, [r7, #22]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d144      	bne.n	8007c20 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	330c      	adds	r3, #12
 8007ba0:	7812      	ldrb	r2, [r2, #0]
 8007ba2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007bbc:	e030      	b.n	8007c20 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d113      	bne.n	8007bf4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	330c      	adds	r3, #12
 8007bd6:	7812      	ldrb	r2, [r2, #0]
 8007bd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	3b01      	subs	r3, #1
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007bf2:	e015      	b.n	8007c20 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bf4:	f7fe fdf0 	bl	80067d8 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d803      	bhi.n	8007c0c <HAL_SPI_Transmit+0x20c>
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d102      	bne.n	8007c12 <HAL_SPI_Transmit+0x212>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007c1e:	e029      	b.n	8007c74 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1c9      	bne.n	8007bbe <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 fbcc 	bl	80083cc <SPI_EndRxTxTransaction>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c48:	2300      	movs	r3, #0
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	613b      	str	r3, [r7, #16]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	613b      	str	r3, [r7, #16]
 8007c5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	77fb      	strb	r3, [r7, #31]
 8007c6a:	e003      	b.n	8007c74 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007c7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3720      	adds	r7, #32
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b088      	sub	sp, #32
 8007c8a:	af02      	add	r7, sp, #8
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	603b      	str	r3, [r7, #0]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d002      	beq.n	8007cac <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007caa:	e0fb      	b.n	8007ea4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cb4:	d112      	bne.n	8007cdc <HAL_SPI_Receive+0x56>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10e      	bne.n	8007cdc <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2204      	movs	r2, #4
 8007cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007cc6:	88fa      	ldrh	r2, [r7, #6]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	68b9      	ldr	r1, [r7, #8]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f8ef 	bl	8007eb6 <HAL_SPI_TransmitReceive>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	e0e8      	b.n	8007eae <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <HAL_SPI_Receive+0x64>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	e0e1      	b.n	8007eae <HAL_SPI_Receive+0x228>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cf2:	f7fe fd71 	bl	80067d8 <HAL_GetTick>
 8007cf6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <HAL_SPI_Receive+0x7e>
 8007cfe:	88fb      	ldrh	r3, [r7, #6]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d08:	e0cc      	b.n	8007ea4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2204      	movs	r2, #4
 8007d0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	88fa      	ldrh	r2, [r7, #6]
 8007d22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	88fa      	ldrh	r2, [r7, #6]
 8007d28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d50:	d10f      	bne.n	8007d72 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7c:	2b40      	cmp	r3, #64	@ 0x40
 8007d7e:	d007      	beq.n	8007d90 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d16a      	bne.n	8007e6e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007d98:	e032      	b.n	8007e00 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d115      	bne.n	8007dd4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f103 020c 	add.w	r2, r3, #12
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db4:	7812      	ldrb	r2, [r2, #0]
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007dd2:	e015      	b.n	8007e00 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dd4:	f7fe fd00 	bl	80067d8 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d803      	bhi.n	8007dec <HAL_SPI_Receive+0x166>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dea:	d102      	bne.n	8007df2 <HAL_SPI_Receive+0x16c>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d106      	bne.n	8007e00 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007dfe:	e051      	b.n	8007ea4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1c7      	bne.n	8007d9a <HAL_SPI_Receive+0x114>
 8007e0a:	e035      	b.n	8007e78 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d113      	bne.n	8007e42 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e24:	b292      	uxth	r2, r2
 8007e26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2c:	1c9a      	adds	r2, r3, #2
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e40:	e015      	b.n	8007e6e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e42:	f7fe fcc9 	bl	80067d8 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d803      	bhi.n	8007e5a <HAL_SPI_Receive+0x1d4>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e58:	d102      	bne.n	8007e60 <HAL_SPI_Receive+0x1da>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007e6c:	e01a      	b.n	8007ea4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1c9      	bne.n	8007e0c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fa53 	bl	8008328 <SPI_EndRxTransaction>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	75fb      	strb	r3, [r7, #23]
 8007e9a:	e003      	b.n	8007ea4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b08c      	sub	sp, #48	@ 0x30
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	607a      	str	r2, [r7, #4]
 8007ec2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_SPI_TransmitReceive+0x26>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e198      	b.n	800820e <HAL_SPI_TransmitReceive+0x358>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ee4:	f7fe fc78 	bl	80067d8 <HAL_GetTick>
 8007ee8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ef0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007efa:	887b      	ldrh	r3, [r7, #2]
 8007efc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007efe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d00f      	beq.n	8007f26 <HAL_SPI_TransmitReceive+0x70>
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f0c:	d107      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d103      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x68>
 8007f16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d003      	beq.n	8007f26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007f24:	e16d      	b.n	8008202 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <HAL_SPI_TransmitReceive+0x82>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <HAL_SPI_TransmitReceive+0x82>
 8007f32:	887b      	ldrh	r3, [r7, #2]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d103      	bne.n	8007f40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007f3e:	e160      	b.n	8008202 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d003      	beq.n	8007f54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2205      	movs	r2, #5
 8007f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	887a      	ldrh	r2, [r7, #2]
 8007f64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	887a      	ldrh	r2, [r7, #2]
 8007f6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	887a      	ldrh	r2, [r7, #2]
 8007f76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	887a      	ldrh	r2, [r7, #2]
 8007f7c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f94:	2b40      	cmp	r3, #64	@ 0x40
 8007f96:	d007      	beq.n	8007fa8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fb0:	d17c      	bne.n	80080ac <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <HAL_SPI_TransmitReceive+0x10a>
 8007fba:	8b7b      	ldrh	r3, [r7, #26]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d16a      	bne.n	8008096 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc4:	881a      	ldrh	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd0:	1c9a      	adds	r2, r3, #2
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fe4:	e057      	b.n	8008096 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d11b      	bne.n	800802c <HAL_SPI_TransmitReceive+0x176>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d016      	beq.n	800802c <HAL_SPI_TransmitReceive+0x176>
 8007ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008000:	2b01      	cmp	r3, #1
 8008002:	d113      	bne.n	800802c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008008:	881a      	ldrh	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008014:	1c9a      	adds	r2, r3, #2
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800801e:	b29b      	uxth	r3, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b01      	cmp	r3, #1
 8008038:	d119      	bne.n	800806e <HAL_SPI_TransmitReceive+0x1b8>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d014      	beq.n	800806e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800804e:	b292      	uxth	r2, r2
 8008050:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008056:	1c9a      	adds	r2, r3, #2
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800806a:	2301      	movs	r3, #1
 800806c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800806e:	f7fe fbb3 	bl	80067d8 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800807a:	429a      	cmp	r2, r3
 800807c:	d80b      	bhi.n	8008096 <HAL_SPI_TransmitReceive+0x1e0>
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d007      	beq.n	8008096 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008094:	e0b5      	b.n	8008202 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800809a:	b29b      	uxth	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1a2      	bne.n	8007fe6 <HAL_SPI_TransmitReceive+0x130>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d19d      	bne.n	8007fe6 <HAL_SPI_TransmitReceive+0x130>
 80080aa:	e080      	b.n	80081ae <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <HAL_SPI_TransmitReceive+0x204>
 80080b4:	8b7b      	ldrh	r3, [r7, #26]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d16f      	bne.n	800819a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	330c      	adds	r3, #12
 80080c4:	7812      	ldrb	r2, [r2, #0]
 80080c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080e0:	e05b      	b.n	800819a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d11c      	bne.n	800812a <HAL_SPI_TransmitReceive+0x274>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d017      	beq.n	800812a <HAL_SPI_TransmitReceive+0x274>
 80080fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d114      	bne.n	800812a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	330c      	adds	r3, #12
 800810a:	7812      	ldrb	r2, [r2, #0]
 800810c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	b29a      	uxth	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b01      	cmp	r3, #1
 8008136:	d119      	bne.n	800816c <HAL_SPI_TransmitReceive+0x2b6>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800813c:	b29b      	uxth	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d014      	beq.n	800816c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814c:	b2d2      	uxtb	r2, r2
 800814e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008168:	2301      	movs	r3, #1
 800816a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800816c:	f7fe fb34 	bl	80067d8 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008178:	429a      	cmp	r2, r3
 800817a:	d803      	bhi.n	8008184 <HAL_SPI_TransmitReceive+0x2ce>
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d102      	bne.n	800818a <HAL_SPI_TransmitReceive+0x2d4>
 8008184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008186:	2b00      	cmp	r3, #0
 8008188:	d107      	bne.n	800819a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008198:	e033      	b.n	8008202 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800819e:	b29b      	uxth	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d19e      	bne.n	80080e2 <HAL_SPI_TransmitReceive+0x22c>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d199      	bne.n	80080e2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 f90a 	bl	80083cc <SPI_EndRxTxTransaction>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d006      	beq.n	80081cc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2220      	movs	r2, #32
 80081c8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80081ca:	e01a      	b.n	8008202 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081d4:	2300      	movs	r3, #0
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	617b      	str	r3, [r7, #20]
 80081e8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f8:	e003      	b.n	8008202 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800820a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800820e:	4618      	mov	r0, r3
 8008210:	3730      	adds	r7, #48	@ 0x30
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	4613      	mov	r3, r2
 8008226:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008228:	f7fe fad6 	bl	80067d8 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4413      	add	r3, r2
 8008236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008238:	f7fe face 	bl	80067d8 <HAL_GetTick>
 800823c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800823e:	4b39      	ldr	r3, [pc, #228]	@ (8008324 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	015b      	lsls	r3, r3, #5
 8008244:	0d1b      	lsrs	r3, r3, #20
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	fb02 f303 	mul.w	r3, r2, r3
 800824c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800824e:	e054      	b.n	80082fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d050      	beq.n	80082fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008258:	f7fe fabe 	bl	80067d8 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	429a      	cmp	r2, r3
 8008266:	d902      	bls.n	800826e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d13d      	bne.n	80082ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800827c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008286:	d111      	bne.n	80082ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008290:	d004      	beq.n	800829c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800829a:	d107      	bne.n	80082ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082b4:	d10f      	bne.n	80082d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e017      	b.n	800831a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4013      	ands	r3, r2
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	429a      	cmp	r2, r3
 8008308:	bf0c      	ite	eq
 800830a:	2301      	moveq	r3, #1
 800830c:	2300      	movne	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	429a      	cmp	r2, r3
 8008316:	d19b      	bne.n	8008250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20000020 	.word	0x20000020

08008328 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af02      	add	r7, sp, #8
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800833c:	d111      	bne.n	8008362 <SPI_EndRxTransaction+0x3a>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008346:	d004      	beq.n	8008352 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008350:	d107      	bne.n	8008362 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008360:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800836a:	d117      	bne.n	800839c <SPI_EndRxTransaction+0x74>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008374:	d112      	bne.n	800839c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2200      	movs	r2, #0
 800837e:	2101      	movs	r1, #1
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f7ff ff49 	bl	8008218 <SPI_WaitFlagStateUntilTimeout>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01a      	beq.n	80083c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008390:	f043 0220 	orr.w	r2, r3, #32
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e013      	b.n	80083c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2200      	movs	r2, #0
 80083a4:	2180      	movs	r1, #128	@ 0x80
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff ff36 	bl	8008218 <SPI_WaitFlagStateUntilTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d007      	beq.n	80083c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083b6:	f043 0220 	orr.w	r2, r3, #32
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e000      	b.n	80083c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af02      	add	r7, sp, #8
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	2180      	movs	r1, #128	@ 0x80
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff ff18 	bl	8008218 <SPI_WaitFlagStateUntilTimeout>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d007      	beq.n	80083fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f2:	f043 0220 	orr.w	r2, r3, #32
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e000      	b.n	8008400 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e041      	b.n	800849e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d106      	bne.n	8008434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f839 	bl	80084a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f000 f9c2 	bl	80087d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d001      	beq.n	80084d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e044      	b.n	800855a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0201 	orr.w	r2, r2, #1
 80084e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008564 <HAL_TIM_Base_Start_IT+0xac>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d018      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x6c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008568 <HAL_TIM_Base_Start_IT+0xb0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d013      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x6c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008504:	d00e      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x6c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a18      	ldr	r2, [pc, #96]	@ (800856c <HAL_TIM_Base_Start_IT+0xb4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d009      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x6c>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a16      	ldr	r2, [pc, #88]	@ (8008570 <HAL_TIM_Base_Start_IT+0xb8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d004      	beq.n	8008524 <HAL_TIM_Base_Start_IT+0x6c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a15      	ldr	r2, [pc, #84]	@ (8008574 <HAL_TIM_Base_Start_IT+0xbc>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d111      	bne.n	8008548 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b06      	cmp	r3, #6
 8008534:	d010      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f042 0201 	orr.w	r2, r2, #1
 8008544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008546:	e007      	b.n	8008558 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr
 8008564:	40012c00 	.word	0x40012c00
 8008568:	40013400 	.word	0x40013400
 800856c:	40000400 	.word	0x40000400
 8008570:	40000800 	.word	0x40000800
 8008574:	40000c00 	.word	0x40000c00

08008578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b02      	cmp	r3, #2
 800858c:	d122      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b02      	cmp	r3, #2
 800859a:	d11b      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f06f 0202 	mvn.w	r2, #2
 80085a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	f003 0303 	and.w	r3, r3, #3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f8ed 	bl	800879a <HAL_TIM_IC_CaptureCallback>
 80085c0:	e005      	b.n	80085ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f8e0 	bl	8008788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f8ef 	bl	80087ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d122      	bne.n	8008628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d11b      	bne.n	8008628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0204 	mvn.w	r2, #4
 80085f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2202      	movs	r2, #2
 80085fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f8c3 	bl	800879a <HAL_TIM_IC_CaptureCallback>
 8008614:	e005      	b.n	8008622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f8b6 	bl	8008788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f8c5 	bl	80087ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	f003 0308 	and.w	r3, r3, #8
 8008632:	2b08      	cmp	r3, #8
 8008634:	d122      	bne.n	800867c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b08      	cmp	r3, #8
 8008642:	d11b      	bne.n	800867c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0208 	mvn.w	r2, #8
 800864c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2204      	movs	r2, #4
 8008652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f899 	bl	800879a <HAL_TIM_IC_CaptureCallback>
 8008668:	e005      	b.n	8008676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f88c 	bl	8008788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f89b 	bl	80087ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b10      	cmp	r3, #16
 8008688:	d122      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	2b10      	cmp	r3, #16
 8008696:	d11b      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0210 	mvn.w	r2, #16
 80086a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2208      	movs	r2, #8
 80086a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f86f 	bl	800879a <HAL_TIM_IC_CaptureCallback>
 80086bc:	e005      	b.n	80086ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f862 	bl	8008788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f871 	bl	80087ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d10e      	bne.n	80086fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d107      	bne.n	80086fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f06f 0201 	mvn.w	r2, #1
 80086f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7fc fdf4 	bl	80052e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008706:	2b80      	cmp	r3, #128	@ 0x80
 8008708:	d10e      	bne.n	8008728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008714:	2b80      	cmp	r3, #128	@ 0x80
 8008716:	d107      	bne.n	8008728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f8d7 	bl	80088d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008732:	2b40      	cmp	r3, #64	@ 0x40
 8008734:	d10e      	bne.n	8008754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008740:	2b40      	cmp	r3, #64	@ 0x40
 8008742:	d107      	bne.n	8008754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800874c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f835 	bl	80087be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b20      	cmp	r3, #32
 8008760:	d10e      	bne.n	8008780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b20      	cmp	r3, #32
 800876e:	d107      	bne.n	8008780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f06f 0220 	mvn.w	r2, #32
 8008778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f8a2 	bl	80088c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr

0800879a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr

080087be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc80      	pop	{r7}
 80087ce:	4770      	bx	lr

080087d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a33      	ldr	r2, [pc, #204]	@ (80088b0 <TIM_Base_SetConfig+0xe0>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d013      	beq.n	8008810 <TIM_Base_SetConfig+0x40>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a32      	ldr	r2, [pc, #200]	@ (80088b4 <TIM_Base_SetConfig+0xe4>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00f      	beq.n	8008810 <TIM_Base_SetConfig+0x40>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087f6:	d00b      	beq.n	8008810 <TIM_Base_SetConfig+0x40>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a2f      	ldr	r2, [pc, #188]	@ (80088b8 <TIM_Base_SetConfig+0xe8>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d007      	beq.n	8008810 <TIM_Base_SetConfig+0x40>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a2e      	ldr	r2, [pc, #184]	@ (80088bc <TIM_Base_SetConfig+0xec>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d003      	beq.n	8008810 <TIM_Base_SetConfig+0x40>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a2d      	ldr	r2, [pc, #180]	@ (80088c0 <TIM_Base_SetConfig+0xf0>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d108      	bne.n	8008822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a22      	ldr	r2, [pc, #136]	@ (80088b0 <TIM_Base_SetConfig+0xe0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d013      	beq.n	8008852 <TIM_Base_SetConfig+0x82>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a21      	ldr	r2, [pc, #132]	@ (80088b4 <TIM_Base_SetConfig+0xe4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00f      	beq.n	8008852 <TIM_Base_SetConfig+0x82>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008838:	d00b      	beq.n	8008852 <TIM_Base_SetConfig+0x82>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a1e      	ldr	r2, [pc, #120]	@ (80088b8 <TIM_Base_SetConfig+0xe8>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d007      	beq.n	8008852 <TIM_Base_SetConfig+0x82>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a1d      	ldr	r2, [pc, #116]	@ (80088bc <TIM_Base_SetConfig+0xec>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d003      	beq.n	8008852 <TIM_Base_SetConfig+0x82>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a1c      	ldr	r2, [pc, #112]	@ (80088c0 <TIM_Base_SetConfig+0xf0>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d108      	bne.n	8008864 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	4313      	orrs	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a09      	ldr	r2, [pc, #36]	@ (80088b0 <TIM_Base_SetConfig+0xe0>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d003      	beq.n	8008898 <TIM_Base_SetConfig+0xc8>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a08      	ldr	r2, [pc, #32]	@ (80088b4 <TIM_Base_SetConfig+0xe4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d103      	bne.n	80088a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	691a      	ldr	r2, [r3, #16]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	615a      	str	r2, [r3, #20]
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bc80      	pop	{r7}
 80088ae:	4770      	bx	lr
 80088b0:	40012c00 	.word	0x40012c00
 80088b4:	40013400 	.word	0x40013400
 80088b8:	40000400 	.word	0x40000400
 80088bc:	40000800 	.word	0x40000800
 80088c0:	40000c00 	.word	0x40000c00

080088c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bc80      	pop	{r7}
 80088d4:	4770      	bx	lr

080088d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088de:	bf00      	nop
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bc80      	pop	{r7}
 80088e6:	4770      	bx	lr

080088e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e042      	b.n	8008980 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7fd fc02 	bl	8006118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2224      	movs	r2, #36	@ 0x24
 8008918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800892a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fdc5 	bl	80094bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	695a      	ldr	r2, [r3, #20]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2220      	movs	r2, #32
 800896c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	@ 0x28
 800898c:	af02      	add	r7, sp, #8
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	d16d      	bne.n	8008a84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <HAL_UART_Transmit+0x2c>
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e066      	b.n	8008a86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2221      	movs	r2, #33	@ 0x21
 80089c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089c6:	f7fd ff07 	bl	80067d8 <HAL_GetTick>
 80089ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	88fa      	ldrh	r2, [r7, #6]
 80089d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	88fa      	ldrh	r2, [r7, #6]
 80089d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089e0:	d108      	bne.n	80089f4 <HAL_UART_Transmit+0x6c>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d104      	bne.n	80089f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	61bb      	str	r3, [r7, #24]
 80089f2:	e003      	b.n	80089fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089fc:	e02a      	b.n	8008a54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2200      	movs	r2, #0
 8008a06:	2180      	movs	r1, #128	@ 0x80
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 fb14 	bl	8009036 <UART_WaitOnFlagUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e036      	b.n	8008a86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10b      	bne.n	8008a36 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	3302      	adds	r3, #2
 8008a32:	61bb      	str	r3, [r7, #24]
 8008a34:	e007      	b.n	8008a46 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	781a      	ldrb	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	3301      	adds	r3, #1
 8008a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1cf      	bne.n	80089fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2200      	movs	r2, #0
 8008a66:	2140      	movs	r1, #64	@ 0x40
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 fae4 	bl	8009036 <UART_WaitOnFlagUntilTimeout>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e006      	b.n	8008a86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	e000      	b.n	8008a86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008a84:	2302      	movs	r3, #2
  }
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3720      	adds	r7, #32
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b20      	cmp	r3, #32
 8008aa6:	d112      	bne.n	8008ace <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <HAL_UART_Receive_IT+0x26>
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e00b      	b.n	8008ad0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 fb24 	bl	8009112 <UART_Start_Receive_IT>
 8008aca:	4603      	mov	r3, r0
 8008acc:	e000      	b.n	8008ad0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008ace:	2302      	movs	r3, #2
  }
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b0ba      	sub	sp, #232	@ 0xe8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10f      	bne.n	8008b3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b22:	f003 0320 	and.w	r3, r3, #32
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d009      	beq.n	8008b3e <HAL_UART_IRQHandler+0x66>
 8008b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fc01 	bl	800933e <UART_Receive_IT>
      return;
 8008b3c:	e25b      	b.n	8008ff6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 80de 	beq.w	8008d04 <HAL_UART_IRQHandler+0x22c>
 8008b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 80d1 	beq.w	8008d04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00b      	beq.n	8008b86 <HAL_UART_IRQHandler+0xae>
 8008b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b7e:	f043 0201 	orr.w	r2, r3, #1
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00b      	beq.n	8008baa <HAL_UART_IRQHandler+0xd2>
 8008b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba2:	f043 0202 	orr.w	r2, r3, #2
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00b      	beq.n	8008bce <HAL_UART_IRQHandler+0xf6>
 8008bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d005      	beq.n	8008bce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bc6:	f043 0204 	orr.w	r2, r3, #4
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd2:	f003 0308 	and.w	r3, r3, #8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d011      	beq.n	8008bfe <HAL_UART_IRQHandler+0x126>
 8008bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d105      	bne.n	8008bf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d005      	beq.n	8008bfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bf6:	f043 0208 	orr.w	r2, r3, #8
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 81f2 	beq.w	8008fec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c0c:	f003 0320 	and.w	r3, r3, #32
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d008      	beq.n	8008c26 <HAL_UART_IRQHandler+0x14e>
 8008c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fb8c 	bl	800933e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bf14      	ite	ne
 8008c34:	2301      	movne	r3, #1
 8008c36:	2300      	moveq	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d103      	bne.n	8008c52 <HAL_UART_IRQHandler+0x17a>
 8008c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d04f      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fa96 	bl	8009184 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d041      	beq.n	8008cea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3314      	adds	r3, #20
 8008c6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3314      	adds	r3, #20
 8008c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1d9      	bne.n	8008c66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d013      	beq.n	8008ce2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8008eb8 <HAL_UART_IRQHandler+0x3e0>)
 8008cc0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fd fece 	bl	8006a68 <HAL_DMA_Abort_IT>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d016      	beq.n	8008d00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce0:	e00e      	b.n	8008d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f993 	bl	800900e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce8:	e00a      	b.n	8008d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f98f 	bl	800900e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf0:	e006      	b.n	8008d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f98b 	bl	800900e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008cfe:	e175      	b.n	8008fec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d00:	bf00      	nop
    return;
 8008d02:	e173      	b.n	8008fec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	f040 814f 	bne.w	8008fac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d12:	f003 0310 	and.w	r3, r3, #16
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 8148 	beq.w	8008fac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8141 	beq.w	8008fac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60bb      	str	r3, [r7, #8]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	60bb      	str	r3, [r7, #8]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	60bb      	str	r3, [r7, #8]
 8008d3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 80b6 	beq.w	8008ebc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 8145 	beq.w	8008ff0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	f080 813e 	bcs.w	8008ff0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	2b20      	cmp	r3, #32
 8008d84:	f000 8088 	beq.w	8008e98 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008da2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008da6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	330c      	adds	r3, #12
 8008db0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008db4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008db8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008dc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008dc4:	e841 2300 	strex	r3, r2, [r1]
 8008dc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1d9      	bne.n	8008d88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3314      	adds	r3, #20
 8008dda:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008de4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008de6:	f023 0301 	bic.w	r3, r3, #1
 8008dea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3314      	adds	r3, #20
 8008df4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008df8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008dfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e04:	e841 2300 	strex	r3, r2, [r1]
 8008e08:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e1      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3314      	adds	r3, #20
 8008e16:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3314      	adds	r3, #20
 8008e30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e3c:	e841 2300 	strex	r3, r2, [r1]
 8008e40:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e3      	bne.n	8008e10 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	330c      	adds	r3, #12
 8008e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e68:	f023 0310 	bic.w	r3, r3, #16
 8008e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	330c      	adds	r3, #12
 8008e76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008e7a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008e7c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e3      	bne.n	8008e56 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fd fdad 	bl	80069f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f8b6 	bl	8009020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008eb4:	e09c      	b.n	8008ff0 <HAL_UART_IRQHandler+0x518>
 8008eb6:	bf00      	nop
 8008eb8:	08009249 	.word	0x08009249
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 808e 	beq.w	8008ff4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8089 	beq.w	8008ff4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	330c      	adds	r3, #12
 8008ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008f06:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e3      	bne.n	8008ee2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3314      	adds	r3, #20
 8008f20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	623b      	str	r3, [r7, #32]
   return(result);
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3314      	adds	r3, #20
 8008f3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e3      	bne.n	8008f1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	330c      	adds	r3, #12
 8008f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	e853 3f00 	ldrex	r3, [r3]
 8008f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f023 0310 	bic.w	r3, r3, #16
 8008f76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	330c      	adds	r3, #12
 8008f80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008f84:	61fa      	str	r2, [r7, #28]
 8008f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	69b9      	ldr	r1, [r7, #24]
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	617b      	str	r3, [r7, #20]
   return(result);
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e3      	bne.n	8008f60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f83b 	bl	8009020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008faa:	e023      	b.n	8008ff4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <HAL_UART_IRQHandler+0x4f4>
 8008fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f953 	bl	8009270 <UART_Transmit_IT>
    return;
 8008fca:	e014      	b.n	8008ff6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00e      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x51e>
 8008fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d008      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f992 	bl	800930e <UART_EndTransmit_IT>
    return;
 8008fea:	e004      	b.n	8008ff6 <HAL_UART_IRQHandler+0x51e>
    return;
 8008fec:	bf00      	nop
 8008fee:	e002      	b.n	8008ff6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ff0:	bf00      	nop
 8008ff2:	e000      	b.n	8008ff6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ff4:	bf00      	nop
  }
}
 8008ff6:	37e8      	adds	r7, #232	@ 0xe8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr

0800900e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800900e:	b480      	push	{r7}
 8009010:	b083      	sub	sp, #12
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009016:	bf00      	nop
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	bc80      	pop	{r7}
 800901e:	4770      	bx	lr

08009020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	bc80      	pop	{r7}
 8009034:	4770      	bx	lr

08009036 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b090      	sub	sp, #64	@ 0x40
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	603b      	str	r3, [r7, #0]
 8009042:	4613      	mov	r3, r2
 8009044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009046:	e050      	b.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904e:	d04c      	beq.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009052:	2b00      	cmp	r3, #0
 8009054:	d007      	beq.n	8009066 <UART_WaitOnFlagUntilTimeout+0x30>
 8009056:	f7fd fbbf 	bl	80067d8 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009062:	429a      	cmp	r2, r3
 8009064:	d241      	bcs.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	330c      	adds	r3, #12
 800906c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009078:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	330c      	adds	r3, #12
 8009084:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009086:	637a      	str	r2, [r7, #52]	@ 0x34
 8009088:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800908c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e5      	bne.n	8009066 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3314      	adds	r3, #20
 80090a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	613b      	str	r3, [r7, #16]
   return(result);
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f023 0301 	bic.w	r3, r3, #1
 80090b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3314      	adds	r3, #20
 80090b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090ba:	623a      	str	r2, [r7, #32]
 80090bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	69f9      	ldr	r1, [r7, #28]
 80090c0:	6a3a      	ldr	r2, [r7, #32]
 80090c2:	e841 2300 	strex	r3, r2, [r1]
 80090c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e5      	bne.n	800909a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2220      	movs	r2, #32
 80090da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e00f      	b.n	800910a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4013      	ands	r3, r2
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	bf0c      	ite	eq
 80090fa:	2301      	moveq	r3, #1
 80090fc:	2300      	movne	r3, #0
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	79fb      	ldrb	r3, [r7, #7]
 8009104:	429a      	cmp	r2, r3
 8009106:	d09f      	beq.n	8009048 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3740      	adds	r7, #64	@ 0x40
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009112:	b480      	push	{r7}
 8009114:	b085      	sub	sp, #20
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	4613      	mov	r3, r2
 800911e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	88fa      	ldrh	r2, [r7, #6]
 800912a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2222      	movs	r2, #34	@ 0x22
 800913c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d007      	beq.n	8009158 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68da      	ldr	r2, [r3, #12]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009156:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	695a      	ldr	r2, [r3, #20]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0201 	orr.w	r2, r2, #1
 8009166:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f042 0220 	orr.w	r2, r2, #32
 8009176:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	bc80      	pop	{r7}
 8009182:	4770      	bx	lr

08009184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009184:	b480      	push	{r7}
 8009186:	b095      	sub	sp, #84	@ 0x54
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	330c      	adds	r3, #12
 8009192:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800919c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	330c      	adds	r3, #12
 80091aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e5      	bne.n	800918c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3314      	adds	r3, #20
 80091c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	f023 0301 	bic.w	r3, r3, #1
 80091d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3314      	adds	r3, #20
 80091de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e5      	bne.n	80091c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d119      	bne.n	8009230 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	60bb      	str	r3, [r7, #8]
   return(result);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f023 0310 	bic.w	r3, r3, #16
 8009212:	647b      	str	r3, [r7, #68]	@ 0x44
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	330c      	adds	r3, #12
 800921a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800921c:	61ba      	str	r2, [r7, #24]
 800921e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	6979      	ldr	r1, [r7, #20]
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	613b      	str	r3, [r7, #16]
   return(result);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e5      	bne.n	80091fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2220      	movs	r2, #32
 8009234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800923e:	bf00      	nop
 8009240:	3754      	adds	r7, #84	@ 0x54
 8009242:	46bd      	mov	sp, r7
 8009244:	bc80      	pop	{r7}
 8009246:	4770      	bx	lr

08009248 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f7ff fed3 	bl	800900e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009268:	bf00      	nop
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b21      	cmp	r3, #33	@ 0x21
 8009282:	d13e      	bne.n	8009302 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800928c:	d114      	bne.n	80092b8 <UART_Transmit_IT+0x48>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d110      	bne.n	80092b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	1c9a      	adds	r2, r3, #2
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	621a      	str	r2, [r3, #32]
 80092b6:	e008      	b.n	80092ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	1c59      	adds	r1, r3, #1
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	6211      	str	r1, [r2, #32]
 80092c2:	781a      	ldrb	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	3b01      	subs	r3, #1
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4619      	mov	r1, r3
 80092d8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10f      	bne.n	80092fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80092ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	e000      	b.n	8009304 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009302:	2302      	movs	r3, #2
  }
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr

0800930e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009324:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2220      	movs	r2, #32
 800932a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7ff fe64 	bl	8008ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b08c      	sub	sp, #48	@ 0x30
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b22      	cmp	r3, #34	@ 0x22
 8009350:	f040 80ae 	bne.w	80094b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800935c:	d117      	bne.n	800938e <UART_Receive_IT+0x50>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d113      	bne.n	800938e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009366:	2300      	movs	r3, #0
 8009368:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	b29b      	uxth	r3, r3
 8009378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937c:	b29a      	uxth	r2, r3
 800937e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009380:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009386:	1c9a      	adds	r2, r3, #2
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	629a      	str	r2, [r3, #40]	@ 0x28
 800938c:	e026      	b.n	80093dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009392:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009394:	2300      	movs	r3, #0
 8009396:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093a0:	d007      	beq.n	80093b2 <UART_Receive_IT+0x74>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10a      	bne.n	80093c0 <UART_Receive_IT+0x82>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d106      	bne.n	80093c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	e008      	b.n	80093d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	4619      	mov	r1, r3
 80093ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d15d      	bne.n	80094ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 0220 	bic.w	r2, r2, #32
 80093fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800940e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	695a      	ldr	r2, [r3, #20]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 0201 	bic.w	r2, r2, #1
 800941e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009432:	2b01      	cmp	r3, #1
 8009434:	d135      	bne.n	80094a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	330c      	adds	r3, #12
 8009442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	613b      	str	r3, [r7, #16]
   return(result);
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f023 0310 	bic.w	r3, r3, #16
 8009452:	627b      	str	r3, [r7, #36]	@ 0x24
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	330c      	adds	r3, #12
 800945a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945c:	623a      	str	r2, [r7, #32]
 800945e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	69f9      	ldr	r1, [r7, #28]
 8009462:	6a3a      	ldr	r2, [r7, #32]
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	61bb      	str	r3, [r7, #24]
   return(result);
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e5      	bne.n	800943c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0310 	and.w	r3, r3, #16
 800947a:	2b10      	cmp	r3, #16
 800947c:	d10a      	bne.n	8009494 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60fb      	str	r3, [r7, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	60fb      	str	r3, [r7, #12]
 8009492:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff fdc0 	bl	8009020 <HAL_UARTEx_RxEventCallback>
 80094a0:	e002      	b.n	80094a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7f8 fc58 	bl	8001d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	e002      	b.n	80094b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	e000      	b.n	80094b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80094b0:	2302      	movs	r3, #2
  }
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3730      	adds	r7, #48	@ 0x30
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68da      	ldr	r2, [r3, #12]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80094f6:	f023 030c 	bic.w	r3, r3, #12
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6812      	ldr	r2, [r2, #0]
 80094fe:	68b9      	ldr	r1, [r7, #8]
 8009500:	430b      	orrs	r3, r1
 8009502:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	699a      	ldr	r2, [r3, #24]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	430a      	orrs	r2, r1
 8009518:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a2c      	ldr	r2, [pc, #176]	@ (80095d0 <UART_SetConfig+0x114>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d103      	bne.n	800952c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009524:	f7fe f986 	bl	8007834 <HAL_RCC_GetPCLK2Freq>
 8009528:	60f8      	str	r0, [r7, #12]
 800952a:	e002      	b.n	8009532 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800952c:	f7fe f96e 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 8009530:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009a      	lsls	r2, r3, #2
 800953c:	441a      	add	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	fbb2 f3f3 	udiv	r3, r2, r3
 8009548:	4a22      	ldr	r2, [pc, #136]	@ (80095d4 <UART_SetConfig+0x118>)
 800954a:	fba2 2303 	umull	r2, r3, r2, r3
 800954e:	095b      	lsrs	r3, r3, #5
 8009550:	0119      	lsls	r1, r3, #4
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009a      	lsls	r2, r3, #2
 800955c:	441a      	add	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	fbb2 f2f3 	udiv	r2, r2, r3
 8009568:	4b1a      	ldr	r3, [pc, #104]	@ (80095d4 <UART_SetConfig+0x118>)
 800956a:	fba3 0302 	umull	r0, r3, r3, r2
 800956e:	095b      	lsrs	r3, r3, #5
 8009570:	2064      	movs	r0, #100	@ 0x64
 8009572:	fb00 f303 	mul.w	r3, r0, r3
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	011b      	lsls	r3, r3, #4
 800957a:	3332      	adds	r3, #50	@ 0x32
 800957c:	4a15      	ldr	r2, [pc, #84]	@ (80095d4 <UART_SetConfig+0x118>)
 800957e:	fba2 2303 	umull	r2, r3, r2, r3
 8009582:	095b      	lsrs	r3, r3, #5
 8009584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009588:	4419      	add	r1, r3
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	009a      	lsls	r2, r3, #2
 8009594:	441a      	add	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	fbb2 f2f3 	udiv	r2, r2, r3
 80095a0:	4b0c      	ldr	r3, [pc, #48]	@ (80095d4 <UART_SetConfig+0x118>)
 80095a2:	fba3 0302 	umull	r0, r3, r3, r2
 80095a6:	095b      	lsrs	r3, r3, #5
 80095a8:	2064      	movs	r0, #100	@ 0x64
 80095aa:	fb00 f303 	mul.w	r3, r0, r3
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	3332      	adds	r3, #50	@ 0x32
 80095b4:	4a07      	ldr	r2, [pc, #28]	@ (80095d4 <UART_SetConfig+0x118>)
 80095b6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ba:	095b      	lsrs	r3, r3, #5
 80095bc:	f003 020f 	and.w	r2, r3, #15
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	440a      	add	r2, r1
 80095c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	40013800 	.word	0x40013800
 80095d4:	51eb851f 	.word	0x51eb851f

080095d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80095e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095ea:	2b84      	cmp	r3, #132	@ 0x84
 80095ec:	d005      	beq.n	80095fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80095ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	4413      	add	r3, r2
 80095f6:	3303      	adds	r3, #3
 80095f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80095fa:	68fb      	ldr	r3, [r7, #12]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	bc80      	pop	{r7}
 8009604:	4770      	bx	lr

08009606 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800960a:	f000 fa6d 	bl	8009ae8 <vTaskStartScheduler>
  
  return osOK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	bd80      	pop	{r7, pc}

08009614 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009616:	b089      	sub	sp, #36	@ 0x24
 8009618:	af04      	add	r7, sp, #16
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d020      	beq.n	8009668 <osThreadCreate+0x54>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01c      	beq.n	8009668 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685c      	ldr	r4, [r3, #4]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691e      	ldr	r6, [r3, #16]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009640:	4618      	mov	r0, r3
 8009642:	f7ff ffc9 	bl	80095d8 <makeFreeRtosPriority>
 8009646:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009650:	9202      	str	r2, [sp, #8]
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	9100      	str	r1, [sp, #0]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	4632      	mov	r2, r6
 800965a:	4629      	mov	r1, r5
 800965c:	4620      	mov	r0, r4
 800965e:	f000 f89c 	bl	800979a <xTaskCreateStatic>
 8009662:	4603      	mov	r3, r0
 8009664:	60fb      	str	r3, [r7, #12]
 8009666:	e01c      	b.n	80096a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685c      	ldr	r4, [r3, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009674:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800967c:	4618      	mov	r0, r3
 800967e:	f7ff ffab 	bl	80095d8 <makeFreeRtosPriority>
 8009682:	4602      	mov	r2, r0
 8009684:	f107 030c 	add.w	r3, r7, #12
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	9200      	str	r2, [sp, #0]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	4632      	mov	r2, r6
 8009690:	4629      	mov	r1, r5
 8009692:	4620      	mov	r0, r4
 8009694:	f000 f8e0 	bl	8009858 <xTaskCreate>
 8009698:	4603      	mov	r3, r0
 800969a:	2b01      	cmp	r3, #1
 800969c:	d001      	beq.n	80096a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	e000      	b.n	80096a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80096a2:	68fb      	ldr	r3, [r7, #12]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f103 0208 	add.w	r2, r3, #8
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f04f 32ff 	mov.w	r2, #4294967295
 80096c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f103 0208 	add.w	r2, r3, #8
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f103 0208 	add.w	r2, r3, #8
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bc80      	pop	{r7}
 80096e8:	4770      	bx	lr

080096ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bc80      	pop	{r7}
 8009700:	4770      	bx	lr

08009702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009702:	b480      	push	{r7}
 8009704:	b085      	sub	sp, #20
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	601a      	str	r2, [r3, #0]
}
 800973e:	bf00      	nop
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	bc80      	pop	{r7}
 8009746:	4770      	bx	lr

08009748 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	6892      	ldr	r2, [r2, #8]
 800975e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6852      	ldr	r2, [r2, #4]
 8009768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d103      	bne.n	800977c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	689a      	ldr	r2, [r3, #8]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	1e5a      	subs	r2, r3, #1
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr

0800979a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800979a:	b580      	push	{r7, lr}
 800979c:	b08e      	sub	sp, #56	@ 0x38
 800979e:	af04      	add	r7, sp, #16
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	607a      	str	r2, [r7, #4]
 80097a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10b      	bne.n	80097c6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	e7fd      	b.n	80097c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10b      	bne.n	80097e4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	61fb      	str	r3, [r7, #28]
}
 80097de:	bf00      	nop
 80097e0:	bf00      	nop
 80097e2:	e7fd      	b.n	80097e0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097e4:	23a0      	movs	r3, #160	@ 0xa0
 80097e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80097ec:	d00b      	beq.n	8009806 <xTaskCreateStatic+0x6c>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	61bb      	str	r3, [r7, #24]
}
 8009800:	bf00      	nop
 8009802:	bf00      	nop
 8009804:	e7fd      	b.n	8009802 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009808:	2b00      	cmp	r3, #0
 800980a:	d01e      	beq.n	800984a <xTaskCreateStatic+0xb0>
 800980c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01b      	beq.n	800984a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800981a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800981c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981e:	2202      	movs	r2, #2
 8009820:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009824:	2300      	movs	r3, #0
 8009826:	9303      	str	r3, [sp, #12]
 8009828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982a:	9302      	str	r3, [sp, #8]
 800982c:	f107 0314 	add.w	r3, r7, #20
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f851 	bl	80098e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009842:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009844:	f000 f8e6 	bl	8009a14 <prvAddNewTaskToReadyList>
 8009848:	e001      	b.n	800984e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800984e:	697b      	ldr	r3, [r7, #20]
	}
 8009850:	4618      	mov	r0, r3
 8009852:	3728      	adds	r7, #40	@ 0x28
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08c      	sub	sp, #48	@ 0x30
 800985c:	af04      	add	r7, sp, #16
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	4613      	mov	r3, r2
 8009866:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009868:	88fb      	ldrh	r3, [r7, #6]
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fe0f 	bl	800a490 <pvPortMalloc>
 8009872:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00e      	beq.n	8009898 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800987a:	20a0      	movs	r0, #160	@ 0xa0
 800987c:	f000 fe08 	bl	800a490 <pvPortMalloc>
 8009880:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	631a      	str	r2, [r3, #48]	@ 0x30
 800988e:	e005      	b.n	800989c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009890:	6978      	ldr	r0, [r7, #20]
 8009892:	f000 fec5 	bl	800a620 <vPortFree>
 8009896:	e001      	b.n	800989c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009898:	2300      	movs	r3, #0
 800989a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d017      	beq.n	80098d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098aa:	88fa      	ldrh	r2, [r7, #6]
 80098ac:	2300      	movs	r3, #0
 80098ae:	9303      	str	r3, [sp, #12]
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	9302      	str	r3, [sp, #8]
 80098b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 f80f 	bl	80098e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098c6:	69f8      	ldr	r0, [r7, #28]
 80098c8:	f000 f8a4 	bl	8009a14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098cc:	2301      	movs	r3, #1
 80098ce:	61bb      	str	r3, [r7, #24]
 80098d0:	e002      	b.n	80098d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098d2:	f04f 33ff 	mov.w	r3, #4294967295
 80098d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098d8:	69bb      	ldr	r3, [r7, #24]
	}
 80098da:	4618      	mov	r0, r3
 80098dc:	3720      	adds	r7, #32
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80098f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098fc:	3b01      	subs	r3, #1
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	f023 0307 	bic.w	r3, r3, #7
 800990a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	f003 0307 	and.w	r3, r3, #7
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00b      	beq.n	800992e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	617b      	str	r3, [r7, #20]
}
 8009928:	bf00      	nop
 800992a:	bf00      	nop
 800992c:	e7fd      	b.n	800992a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800992e:	2300      	movs	r3, #0
 8009930:	61fb      	str	r3, [r7, #28]
 8009932:	e012      	b.n	800995a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	4413      	add	r3, r2
 800993a:	7819      	ldrb	r1, [r3, #0]
 800993c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	4413      	add	r3, r2
 8009942:	3334      	adds	r3, #52	@ 0x34
 8009944:	460a      	mov	r2, r1
 8009946:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	4413      	add	r3, r2
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d006      	beq.n	8009962 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	3301      	adds	r3, #1
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	2b0f      	cmp	r3, #15
 800995e:	d9e9      	bls.n	8009934 <prvInitialiseNewTask+0x50>
 8009960:	e000      	b.n	8009964 <prvInitialiseNewTask+0x80>
		{
			break;
 8009962:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800996c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996e:	2b06      	cmp	r3, #6
 8009970:	d901      	bls.n	8009976 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009972:	2306      	movs	r3, #6
 8009974:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800997a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800997c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009980:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009984:	2200      	movs	r2, #0
 8009986:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998a:	3304      	adds	r3, #4
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff feac 	bl	80096ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	3318      	adds	r3, #24
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff fea7 	bl	80096ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800999c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a4:	f1c3 0207 	rsb	r2, r3, #7
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	2200      	movs	r2, #0
 80099b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	334c      	adds	r3, #76	@ 0x4c
 80099c6:	224c      	movs	r2, #76	@ 0x4c
 80099c8:	2100      	movs	r1, #0
 80099ca:	4618      	mov	r0, r3
 80099cc:	f001 fcf3 	bl	800b3b6 <memset>
 80099d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d2:	4a0d      	ldr	r2, [pc, #52]	@ (8009a08 <prvInitialiseNewTask+0x124>)
 80099d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	4a0c      	ldr	r2, [pc, #48]	@ (8009a0c <prvInitialiseNewTask+0x128>)
 80099da:	655a      	str	r2, [r3, #84]	@ 0x54
 80099dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099de:	4a0c      	ldr	r2, [pc, #48]	@ (8009a10 <prvInitialiseNewTask+0x12c>)
 80099e0:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	68f9      	ldr	r1, [r7, #12]
 80099e6:	69b8      	ldr	r0, [r7, #24]
 80099e8:	f000 fba2 	bl	800a130 <pxPortInitialiseStack>
 80099ec:	4602      	mov	r2, r0
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80099f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099fe:	bf00      	nop
 8009a00:	3720      	adds	r7, #32
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20001514 	.word	0x20001514
 8009a0c:	2000157c 	.word	0x2000157c
 8009a10:	200015e4 	.word	0x200015e4

08009a14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a1c:	f000 fc76 	bl	800a30c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a20:	4b2a      	ldr	r3, [pc, #168]	@ (8009acc <prvAddNewTaskToReadyList+0xb8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3301      	adds	r3, #1
 8009a26:	4a29      	ldr	r2, [pc, #164]	@ (8009acc <prvAddNewTaskToReadyList+0xb8>)
 8009a28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a2a:	4b29      	ldr	r3, [pc, #164]	@ (8009ad0 <prvAddNewTaskToReadyList+0xbc>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d109      	bne.n	8009a46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a32:	4a27      	ldr	r2, [pc, #156]	@ (8009ad0 <prvAddNewTaskToReadyList+0xbc>)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a38:	4b24      	ldr	r3, [pc, #144]	@ (8009acc <prvAddNewTaskToReadyList+0xb8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d110      	bne.n	8009a62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a40:	f000 faae 	bl	8009fa0 <prvInitialiseTaskLists>
 8009a44:	e00d      	b.n	8009a62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a46:	4b23      	ldr	r3, [pc, #140]	@ (8009ad4 <prvAddNewTaskToReadyList+0xc0>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d109      	bne.n	8009a62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a4e:	4b20      	ldr	r3, [pc, #128]	@ (8009ad0 <prvAddNewTaskToReadyList+0xbc>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d802      	bhi.n	8009a62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad0 <prvAddNewTaskToReadyList+0xbc>)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a62:	4b1d      	ldr	r3, [pc, #116]	@ (8009ad8 <prvAddNewTaskToReadyList+0xc4>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3301      	adds	r3, #1
 8009a68:	4a1b      	ldr	r2, [pc, #108]	@ (8009ad8 <prvAddNewTaskToReadyList+0xc4>)
 8009a6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a70:	2201      	movs	r2, #1
 8009a72:	409a      	lsls	r2, r3
 8009a74:	4b19      	ldr	r3, [pc, #100]	@ (8009adc <prvAddNewTaskToReadyList+0xc8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	4a18      	ldr	r2, [pc, #96]	@ (8009adc <prvAddNewTaskToReadyList+0xc8>)
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ae0 <prvAddNewTaskToReadyList+0xcc>)
 8009a8c:	441a      	add	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	3304      	adds	r3, #4
 8009a92:	4619      	mov	r1, r3
 8009a94:	4610      	mov	r0, r2
 8009a96:	f7ff fe34 	bl	8009702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a9a:	f000 fc67 	bl	800a36c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad4 <prvAddNewTaskToReadyList+0xc0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00e      	beq.n	8009ac4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad0 <prvAddNewTaskToReadyList+0xbc>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d207      	bcs.n	8009ac4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ae4 <prvAddNewTaskToReadyList+0xd0>)
 8009ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	200008c8 	.word	0x200008c8
 8009ad0:	200007c8 	.word	0x200007c8
 8009ad4:	200008d4 	.word	0x200008d4
 8009ad8:	200008e4 	.word	0x200008e4
 8009adc:	200008d0 	.word	0x200008d0
 8009ae0:	200007cc 	.word	0x200007cc
 8009ae4:	e000ed04 	.word	0xe000ed04

08009ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08a      	sub	sp, #40	@ 0x28
 8009aec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009af6:	463a      	mov	r2, r7
 8009af8:	1d39      	adds	r1, r7, #4
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7f7 f8f8 	bl	8000cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	9202      	str	r2, [sp, #8]
 8009b0c:	9301      	str	r3, [sp, #4]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	2300      	movs	r3, #0
 8009b14:	460a      	mov	r2, r1
 8009b16:	4921      	ldr	r1, [pc, #132]	@ (8009b9c <vTaskStartScheduler+0xb4>)
 8009b18:	4821      	ldr	r0, [pc, #132]	@ (8009ba0 <vTaskStartScheduler+0xb8>)
 8009b1a:	f7ff fe3e 	bl	800979a <xTaskCreateStatic>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	4a20      	ldr	r2, [pc, #128]	@ (8009ba4 <vTaskStartScheduler+0xbc>)
 8009b22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b24:	4b1f      	ldr	r3, [pc, #124]	@ (8009ba4 <vTaskStartScheduler+0xbc>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	e001      	b.n	8009b36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d11b      	bne.n	8009b74 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	613b      	str	r3, [r7, #16]
}
 8009b4e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b50:	4b15      	ldr	r3, [pc, #84]	@ (8009ba8 <vTaskStartScheduler+0xc0>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	334c      	adds	r3, #76	@ 0x4c
 8009b56:	4a15      	ldr	r2, [pc, #84]	@ (8009bac <vTaskStartScheduler+0xc4>)
 8009b58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b5a:	4b15      	ldr	r3, [pc, #84]	@ (8009bb0 <vTaskStartScheduler+0xc8>)
 8009b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b62:	4b14      	ldr	r3, [pc, #80]	@ (8009bb4 <vTaskStartScheduler+0xcc>)
 8009b64:	2201      	movs	r2, #1
 8009b66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009b68:	4b13      	ldr	r3, [pc, #76]	@ (8009bb8 <vTaskStartScheduler+0xd0>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b6e:	f000 fb5b 	bl	800a228 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b72:	e00f      	b.n	8009b94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7a:	d10b      	bne.n	8009b94 <vTaskStartScheduler+0xac>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	60fb      	str	r3, [r7, #12]
}
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
 8009b92:	e7fd      	b.n	8009b90 <vTaskStartScheduler+0xa8>
}
 8009b94:	bf00      	nop
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	0800d774 	.word	0x0800d774
 8009ba0:	08009f71 	.word	0x08009f71
 8009ba4:	200008ec 	.word	0x200008ec
 8009ba8:	200007c8 	.word	0x200007c8
 8009bac:	2000003c 	.word	0x2000003c
 8009bb0:	200008e8 	.word	0x200008e8
 8009bb4:	200008d4 	.word	0x200008d4
 8009bb8:	200008cc 	.word	0x200008cc

08009bbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009bc0:	4b04      	ldr	r3, [pc, #16]	@ (8009bd4 <vTaskSuspendAll+0x18>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	4a03      	ldr	r2, [pc, #12]	@ (8009bd4 <vTaskSuspendAll+0x18>)
 8009bc8:	6013      	str	r3, [r2, #0]
}
 8009bca:	bf00      	nop
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bc80      	pop	{r7}
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	200008f0 	.word	0x200008f0

08009bd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009be2:	2300      	movs	r3, #0
 8009be4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009be6:	4b42      	ldr	r3, [pc, #264]	@ (8009cf0 <xTaskResumeAll+0x118>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10b      	bne.n	8009c06 <xTaskResumeAll+0x2e>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	603b      	str	r3, [r7, #0]
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	e7fd      	b.n	8009c02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c06:	f000 fb81 	bl	800a30c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c0a:	4b39      	ldr	r3, [pc, #228]	@ (8009cf0 <xTaskResumeAll+0x118>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	4a37      	ldr	r2, [pc, #220]	@ (8009cf0 <xTaskResumeAll+0x118>)
 8009c12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c14:	4b36      	ldr	r3, [pc, #216]	@ (8009cf0 <xTaskResumeAll+0x118>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d161      	bne.n	8009ce0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c1c:	4b35      	ldr	r3, [pc, #212]	@ (8009cf4 <xTaskResumeAll+0x11c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d05d      	beq.n	8009ce0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c24:	e02e      	b.n	8009c84 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009c26:	4b34      	ldr	r3, [pc, #208]	@ (8009cf8 <xTaskResumeAll+0x120>)
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3318      	adds	r3, #24
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7ff fd88 	bl	8009748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7ff fd83 	bl	8009748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c46:	2201      	movs	r2, #1
 8009c48:	409a      	lsls	r2, r3
 8009c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8009cfc <xTaskResumeAll+0x124>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	4a2a      	ldr	r2, [pc, #168]	@ (8009cfc <xTaskResumeAll+0x124>)
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4a27      	ldr	r2, [pc, #156]	@ (8009d00 <xTaskResumeAll+0x128>)
 8009c62:	441a      	add	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7ff fd49 	bl	8009702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c74:	4b23      	ldr	r3, [pc, #140]	@ (8009d04 <xTaskResumeAll+0x12c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d302      	bcc.n	8009c84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c7e:	4b22      	ldr	r3, [pc, #136]	@ (8009d08 <xTaskResumeAll+0x130>)
 8009c80:	2201      	movs	r2, #1
 8009c82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c84:	4b1c      	ldr	r3, [pc, #112]	@ (8009cf8 <xTaskResumeAll+0x120>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1cc      	bne.n	8009c26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c92:	f000 fa29 	bl	800a0e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009c96:	4b1d      	ldr	r3, [pc, #116]	@ (8009d0c <xTaskResumeAll+0x134>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d010      	beq.n	8009cc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ca2:	f000 f845 	bl	8009d30 <xTaskIncrementTick>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009cac:	4b16      	ldr	r3, [pc, #88]	@ (8009d08 <xTaskResumeAll+0x130>)
 8009cae:	2201      	movs	r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f1      	bne.n	8009ca2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009cbe:	4b13      	ldr	r3, [pc, #76]	@ (8009d0c <xTaskResumeAll+0x134>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009cc4:	4b10      	ldr	r3, [pc, #64]	@ (8009d08 <xTaskResumeAll+0x130>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d009      	beq.n	8009ce0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8009d10 <xTaskResumeAll+0x138>)
 8009cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ce0:	f000 fb44 	bl	800a36c <vPortExitCritical>

	return xAlreadyYielded;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	200008f0 	.word	0x200008f0
 8009cf4:	200008c8 	.word	0x200008c8
 8009cf8:	20000888 	.word	0x20000888
 8009cfc:	200008d0 	.word	0x200008d0
 8009d00:	200007cc 	.word	0x200007cc
 8009d04:	200007c8 	.word	0x200007c8
 8009d08:	200008dc 	.word	0x200008dc
 8009d0c:	200008d8 	.word	0x200008d8
 8009d10:	e000ed04 	.word	0xe000ed04

08009d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d1a:	4b04      	ldr	r3, [pc, #16]	@ (8009d2c <xTaskGetTickCount+0x18>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d20:	687b      	ldr	r3, [r7, #4]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bc80      	pop	{r7}
 8009d2a:	4770      	bx	lr
 8009d2c:	200008cc 	.word	0x200008cc

08009d30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d36:	2300      	movs	r3, #0
 8009d38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d3a:	4b51      	ldr	r3, [pc, #324]	@ (8009e80 <xTaskIncrementTick+0x150>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f040 808e 	bne.w	8009e60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d44:	4b4f      	ldr	r3, [pc, #316]	@ (8009e84 <xTaskIncrementTick+0x154>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8009e84 <xTaskIncrementTick+0x154>)
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d121      	bne.n	8009d9c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d58:	4b4b      	ldr	r3, [pc, #300]	@ (8009e88 <xTaskIncrementTick+0x158>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00b      	beq.n	8009d7a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	603b      	str	r3, [r7, #0]
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	e7fd      	b.n	8009d76 <xTaskIncrementTick+0x46>
 8009d7a:	4b43      	ldr	r3, [pc, #268]	@ (8009e88 <xTaskIncrementTick+0x158>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	4b42      	ldr	r3, [pc, #264]	@ (8009e8c <xTaskIncrementTick+0x15c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a40      	ldr	r2, [pc, #256]	@ (8009e88 <xTaskIncrementTick+0x158>)
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	4a40      	ldr	r2, [pc, #256]	@ (8009e8c <xTaskIncrementTick+0x15c>)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6013      	str	r3, [r2, #0]
 8009d8e:	4b40      	ldr	r3, [pc, #256]	@ (8009e90 <xTaskIncrementTick+0x160>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a3e      	ldr	r2, [pc, #248]	@ (8009e90 <xTaskIncrementTick+0x160>)
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	f000 f9a6 	bl	800a0e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8009e94 <xTaskIncrementTick+0x164>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d34d      	bcc.n	8009e42 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009da6:	4b38      	ldr	r3, [pc, #224]	@ (8009e88 <xTaskIncrementTick+0x158>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <xTaskIncrementTick+0x84>
 8009db0:	2301      	movs	r3, #1
 8009db2:	e000      	b.n	8009db6 <xTaskIncrementTick+0x86>
 8009db4:	2300      	movs	r3, #0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d004      	beq.n	8009dc4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dba:	4b36      	ldr	r3, [pc, #216]	@ (8009e94 <xTaskIncrementTick+0x164>)
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	601a      	str	r2, [r3, #0]
					break;
 8009dc2:	e03e      	b.n	8009e42 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009dc4:	4b30      	ldr	r3, [pc, #192]	@ (8009e88 <xTaskIncrementTick+0x158>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d203      	bcs.n	8009de4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8009e94 <xTaskIncrementTick+0x164>)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6013      	str	r3, [r2, #0]
						break;
 8009de2:	e02e      	b.n	8009e42 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	3304      	adds	r3, #4
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7ff fcad 	bl	8009748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d004      	beq.n	8009e00 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	3318      	adds	r3, #24
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff fca4 	bl	8009748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e04:	2201      	movs	r2, #1
 8009e06:	409a      	lsls	r2, r3
 8009e08:	4b23      	ldr	r3, [pc, #140]	@ (8009e98 <xTaskIncrementTick+0x168>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	4a22      	ldr	r2, [pc, #136]	@ (8009e98 <xTaskIncrementTick+0x168>)
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8009e9c <xTaskIncrementTick+0x16c>)
 8009e20:	441a      	add	r2, r3
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	3304      	adds	r3, #4
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f7ff fc6a 	bl	8009702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e32:	4b1b      	ldr	r3, [pc, #108]	@ (8009ea0 <xTaskIncrementTick+0x170>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d3b4      	bcc.n	8009da6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e40:	e7b1      	b.n	8009da6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e42:	4b17      	ldr	r3, [pc, #92]	@ (8009ea0 <xTaskIncrementTick+0x170>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e48:	4914      	ldr	r1, [pc, #80]	@ (8009e9c <xTaskIncrementTick+0x16c>)
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	440b      	add	r3, r1
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d907      	bls.n	8009e6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	e004      	b.n	8009e6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e60:	4b10      	ldr	r3, [pc, #64]	@ (8009ea4 <xTaskIncrementTick+0x174>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3301      	adds	r3, #1
 8009e66:	4a0f      	ldr	r2, [pc, #60]	@ (8009ea4 <xTaskIncrementTick+0x174>)
 8009e68:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea8 <xTaskIncrementTick+0x178>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009e72:	2301      	movs	r3, #1
 8009e74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e76:	697b      	ldr	r3, [r7, #20]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	200008f0 	.word	0x200008f0
 8009e84:	200008cc 	.word	0x200008cc
 8009e88:	20000880 	.word	0x20000880
 8009e8c:	20000884 	.word	0x20000884
 8009e90:	200008e0 	.word	0x200008e0
 8009e94:	200008e8 	.word	0x200008e8
 8009e98:	200008d0 	.word	0x200008d0
 8009e9c:	200007cc 	.word	0x200007cc
 8009ea0:	200007c8 	.word	0x200007c8
 8009ea4:	200008d8 	.word	0x200008d8
 8009ea8:	200008dc 	.word	0x200008dc

08009eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009eb2:	4b29      	ldr	r3, [pc, #164]	@ (8009f58 <vTaskSwitchContext+0xac>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009eba:	4b28      	ldr	r3, [pc, #160]	@ (8009f5c <vTaskSwitchContext+0xb0>)
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ec0:	e045      	b.n	8009f4e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009ec2:	4b26      	ldr	r3, [pc, #152]	@ (8009f5c <vTaskSwitchContext+0xb0>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009ec8:	4b25      	ldr	r3, [pc, #148]	@ (8009f60 <vTaskSwitchContext+0xb4>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	fab3 f383 	clz	r3, r3
 8009ed4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009ed6:	7afb      	ldrb	r3, [r7, #11]
 8009ed8:	f1c3 031f 	rsb	r3, r3, #31
 8009edc:	617b      	str	r3, [r7, #20]
 8009ede:	4921      	ldr	r1, [pc, #132]	@ (8009f64 <vTaskSwitchContext+0xb8>)
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	440b      	add	r3, r1
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10b      	bne.n	8009f0a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	607b      	str	r3, [r7, #4]
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	e7fd      	b.n	8009f06 <vTaskSwitchContext+0x5a>
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4a13      	ldr	r2, [pc, #76]	@ (8009f64 <vTaskSwitchContext+0xb8>)
 8009f16:	4413      	add	r3, r2
 8009f18:	613b      	str	r3, [r7, #16]
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	605a      	str	r2, [r3, #4]
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d104      	bne.n	8009f3a <vTaskSwitchContext+0x8e>
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	605a      	str	r2, [r3, #4]
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	4a09      	ldr	r2, [pc, #36]	@ (8009f68 <vTaskSwitchContext+0xbc>)
 8009f42:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f44:	4b08      	ldr	r3, [pc, #32]	@ (8009f68 <vTaskSwitchContext+0xbc>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	334c      	adds	r3, #76	@ 0x4c
 8009f4a:	4a08      	ldr	r2, [pc, #32]	@ (8009f6c <vTaskSwitchContext+0xc0>)
 8009f4c:	6013      	str	r3, [r2, #0]
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bc80      	pop	{r7}
 8009f56:	4770      	bx	lr
 8009f58:	200008f0 	.word	0x200008f0
 8009f5c:	200008dc 	.word	0x200008dc
 8009f60:	200008d0 	.word	0x200008d0
 8009f64:	200007cc 	.word	0x200007cc
 8009f68:	200007c8 	.word	0x200007c8
 8009f6c:	2000003c 	.word	0x2000003c

08009f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f78:	f000 f852 	bl	800a020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f7c:	4b06      	ldr	r3, [pc, #24]	@ (8009f98 <prvIdleTask+0x28>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d9f9      	bls.n	8009f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f84:	4b05      	ldr	r3, [pc, #20]	@ (8009f9c <prvIdleTask+0x2c>)
 8009f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f94:	e7f0      	b.n	8009f78 <prvIdleTask+0x8>
 8009f96:	bf00      	nop
 8009f98:	200007cc 	.word	0x200007cc
 8009f9c:	e000ed04 	.word	0xe000ed04

08009fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	607b      	str	r3, [r7, #4]
 8009faa:	e00c      	b.n	8009fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4a12      	ldr	r2, [pc, #72]	@ (800a000 <prvInitialiseTaskLists+0x60>)
 8009fb8:	4413      	add	r3, r2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7ff fb76 	bl	80096ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	607b      	str	r3, [r7, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b06      	cmp	r3, #6
 8009fca:	d9ef      	bls.n	8009fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fcc:	480d      	ldr	r0, [pc, #52]	@ (800a004 <prvInitialiseTaskLists+0x64>)
 8009fce:	f7ff fb6d 	bl	80096ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fd2:	480d      	ldr	r0, [pc, #52]	@ (800a008 <prvInitialiseTaskLists+0x68>)
 8009fd4:	f7ff fb6a 	bl	80096ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fd8:	480c      	ldr	r0, [pc, #48]	@ (800a00c <prvInitialiseTaskLists+0x6c>)
 8009fda:	f7ff fb67 	bl	80096ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fde:	480c      	ldr	r0, [pc, #48]	@ (800a010 <prvInitialiseTaskLists+0x70>)
 8009fe0:	f7ff fb64 	bl	80096ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fe4:	480b      	ldr	r0, [pc, #44]	@ (800a014 <prvInitialiseTaskLists+0x74>)
 8009fe6:	f7ff fb61 	bl	80096ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fea:	4b0b      	ldr	r3, [pc, #44]	@ (800a018 <prvInitialiseTaskLists+0x78>)
 8009fec:	4a05      	ldr	r2, [pc, #20]	@ (800a004 <prvInitialiseTaskLists+0x64>)
 8009fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800a01c <prvInitialiseTaskLists+0x7c>)
 8009ff2:	4a05      	ldr	r2, [pc, #20]	@ (800a008 <prvInitialiseTaskLists+0x68>)
 8009ff4:	601a      	str	r2, [r3, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	200007cc 	.word	0x200007cc
 800a004:	20000858 	.word	0x20000858
 800a008:	2000086c 	.word	0x2000086c
 800a00c:	20000888 	.word	0x20000888
 800a010:	2000089c 	.word	0x2000089c
 800a014:	200008b4 	.word	0x200008b4
 800a018:	20000880 	.word	0x20000880
 800a01c:	20000884 	.word	0x20000884

0800a020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a026:	e019      	b.n	800a05c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a028:	f000 f970 	bl	800a30c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a02c:	4b10      	ldr	r3, [pc, #64]	@ (800a070 <prvCheckTasksWaitingTermination+0x50>)
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3304      	adds	r3, #4
 800a038:	4618      	mov	r0, r3
 800a03a:	f7ff fb85 	bl	8009748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a03e:	4b0d      	ldr	r3, [pc, #52]	@ (800a074 <prvCheckTasksWaitingTermination+0x54>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3b01      	subs	r3, #1
 800a044:	4a0b      	ldr	r2, [pc, #44]	@ (800a074 <prvCheckTasksWaitingTermination+0x54>)
 800a046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a048:	4b0b      	ldr	r3, [pc, #44]	@ (800a078 <prvCheckTasksWaitingTermination+0x58>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	4a0a      	ldr	r2, [pc, #40]	@ (800a078 <prvCheckTasksWaitingTermination+0x58>)
 800a050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a052:	f000 f98b 	bl	800a36c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f810 	bl	800a07c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a05c:	4b06      	ldr	r3, [pc, #24]	@ (800a078 <prvCheckTasksWaitingTermination+0x58>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e1      	bne.n	800a028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	2000089c 	.word	0x2000089c
 800a074:	200008c8 	.word	0x200008c8
 800a078:	200008b0 	.word	0x200008b0

0800a07c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	334c      	adds	r3, #76	@ 0x4c
 800a088:	4618      	mov	r0, r3
 800a08a:	f001 f9b1 	bl	800b3f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a094:	2b00      	cmp	r3, #0
 800a096:	d108      	bne.n	800a0aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 fabf 	bl	800a620 <vPortFree>
				vPortFree( pxTCB );
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fabc 	bl	800a620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0a8:	e019      	b.n	800a0de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d103      	bne.n	800a0bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fab3 	bl	800a620 <vPortFree>
	}
 800a0ba:	e010      	b.n	800a0de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d00b      	beq.n	800a0de <prvDeleteTCB+0x62>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	60fb      	str	r3, [r7, #12]
}
 800a0d8:	bf00      	nop
 800a0da:	bf00      	nop
 800a0dc:	e7fd      	b.n	800a0da <prvDeleteTCB+0x5e>
	}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a128 <prvResetNextTaskUnblockTime+0x40>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <prvResetNextTaskUnblockTime+0x14>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e000      	b.n	800a0fe <prvResetNextTaskUnblockTime+0x16>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d004      	beq.n	800a10c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a102:	4b0a      	ldr	r3, [pc, #40]	@ (800a12c <prvResetNextTaskUnblockTime+0x44>)
 800a104:	f04f 32ff 	mov.w	r2, #4294967295
 800a108:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a10a:	e008      	b.n	800a11e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a10c:	4b06      	ldr	r3, [pc, #24]	@ (800a128 <prvResetNextTaskUnblockTime+0x40>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	4a04      	ldr	r2, [pc, #16]	@ (800a12c <prvResetNextTaskUnblockTime+0x44>)
 800a11c:	6013      	str	r3, [r2, #0]
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	bc80      	pop	{r7}
 800a126:	4770      	bx	lr
 800a128:	20000880 	.word	0x20000880
 800a12c:	200008e8 	.word	0x200008e8

0800a130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3b04      	subs	r3, #4
 800a140:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3b04      	subs	r3, #4
 800a14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f023 0201 	bic.w	r2, r3, #1
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3b04      	subs	r3, #4
 800a15e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a160:	4a08      	ldr	r2, [pc, #32]	@ (800a184 <pxPortInitialiseStack+0x54>)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3b14      	subs	r3, #20
 800a16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3b20      	subs	r3, #32
 800a176:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a178:	68fb      	ldr	r3, [r7, #12]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	bc80      	pop	{r7}
 800a182:	4770      	bx	lr
 800a184:	0800a189 	.word	0x0800a189

0800a188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a18e:	2300      	movs	r3, #0
 800a190:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a192:	4b12      	ldr	r3, [pc, #72]	@ (800a1dc <prvTaskExitError+0x54>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19a:	d00b      	beq.n	800a1b4 <prvTaskExitError+0x2c>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	60fb      	str	r3, [r7, #12]
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	e7fd      	b.n	800a1b0 <prvTaskExitError+0x28>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	60bb      	str	r3, [r7, #8]
}
 800a1c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a1c8:	bf00      	nop
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d0fc      	beq.n	800a1ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a1d0:	bf00      	nop
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bc80      	pop	{r7}
 800a1da:	4770      	bx	lr
 800a1dc:	2000002c 	.word	0x2000002c

0800a1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1e0:	4b07      	ldr	r3, [pc, #28]	@ (800a200 <pxCurrentTCBConst2>)
 800a1e2:	6819      	ldr	r1, [r3, #0]
 800a1e4:	6808      	ldr	r0, [r1, #0]
 800a1e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a1ea:	f380 8809 	msr	PSP, r0
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f04f 0000 	mov.w	r0, #0
 800a1f6:	f380 8811 	msr	BASEPRI, r0
 800a1fa:	f04e 0e0d 	orr.w	lr, lr, #13
 800a1fe:	4770      	bx	lr

0800a200 <pxCurrentTCBConst2>:
 800a200:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop

0800a208 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a208:	4806      	ldr	r0, [pc, #24]	@ (800a224 <prvPortStartFirstTask+0x1c>)
 800a20a:	6800      	ldr	r0, [r0, #0]
 800a20c:	6800      	ldr	r0, [r0, #0]
 800a20e:	f380 8808 	msr	MSP, r0
 800a212:	b662      	cpsie	i
 800a214:	b661      	cpsie	f
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	df00      	svc	0
 800a220:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a222:	bf00      	nop
 800a224:	e000ed08 	.word	0xe000ed08

0800a228 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a22e:	4b32      	ldr	r3, [pc, #200]	@ (800a2f8 <xPortStartScheduler+0xd0>)
 800a230:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b2db      	uxtb	r3, r3
 800a238:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	22ff      	movs	r2, #255	@ 0xff
 800a23e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a248:	78fb      	ldrb	r3, [r7, #3]
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a250:	b2da      	uxtb	r2, r3
 800a252:	4b2a      	ldr	r3, [pc, #168]	@ (800a2fc <xPortStartScheduler+0xd4>)
 800a254:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a256:	4b2a      	ldr	r3, [pc, #168]	@ (800a300 <xPortStartScheduler+0xd8>)
 800a258:	2207      	movs	r2, #7
 800a25a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a25c:	e009      	b.n	800a272 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a25e:	4b28      	ldr	r3, [pc, #160]	@ (800a300 <xPortStartScheduler+0xd8>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3b01      	subs	r3, #1
 800a264:	4a26      	ldr	r2, [pc, #152]	@ (800a300 <xPortStartScheduler+0xd8>)
 800a266:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a272:	78fb      	ldrb	r3, [r7, #3]
 800a274:	b2db      	uxtb	r3, r3
 800a276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a27a:	2b80      	cmp	r3, #128	@ 0x80
 800a27c:	d0ef      	beq.n	800a25e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a27e:	4b20      	ldr	r3, [pc, #128]	@ (800a300 <xPortStartScheduler+0xd8>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f1c3 0307 	rsb	r3, r3, #7
 800a286:	2b04      	cmp	r3, #4
 800a288:	d00b      	beq.n	800a2a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	60bb      	str	r3, [r7, #8]
}
 800a29c:	bf00      	nop
 800a29e:	bf00      	nop
 800a2a0:	e7fd      	b.n	800a29e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2a2:	4b17      	ldr	r3, [pc, #92]	@ (800a300 <xPortStartScheduler+0xd8>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	021b      	lsls	r3, r3, #8
 800a2a8:	4a15      	ldr	r2, [pc, #84]	@ (800a300 <xPortStartScheduler+0xd8>)
 800a2aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2ac:	4b14      	ldr	r3, [pc, #80]	@ (800a300 <xPortStartScheduler+0xd8>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2b4:	4a12      	ldr	r2, [pc, #72]	@ (800a300 <xPortStartScheduler+0xd8>)
 800a2b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2c0:	4b10      	ldr	r3, [pc, #64]	@ (800a304 <xPortStartScheduler+0xdc>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a0f      	ldr	r2, [pc, #60]	@ (800a304 <xPortStartScheduler+0xdc>)
 800a2c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a2ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2cc:	4b0d      	ldr	r3, [pc, #52]	@ (800a304 <xPortStartScheduler+0xdc>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a0c      	ldr	r2, [pc, #48]	@ (800a304 <xPortStartScheduler+0xdc>)
 800a2d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a2d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2d8:	f000 f8b8 	bl	800a44c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a308 <xPortStartScheduler+0xe0>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2e2:	f7ff ff91 	bl	800a208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2e6:	f7ff fde1 	bl	8009eac <vTaskSwitchContext>
	prvTaskExitError();
 800a2ea:	f7ff ff4d 	bl	800a188 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	e000e400 	.word	0xe000e400
 800a2fc:	200008f4 	.word	0x200008f4
 800a300:	200008f8 	.word	0x200008f8
 800a304:	e000ed20 	.word	0xe000ed20
 800a308:	2000002c 	.word	0x2000002c

0800a30c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	607b      	str	r3, [r7, #4]
}
 800a324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a326:	4b0f      	ldr	r3, [pc, #60]	@ (800a364 <vPortEnterCritical+0x58>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3301      	adds	r3, #1
 800a32c:	4a0d      	ldr	r2, [pc, #52]	@ (800a364 <vPortEnterCritical+0x58>)
 800a32e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a330:	4b0c      	ldr	r3, [pc, #48]	@ (800a364 <vPortEnterCritical+0x58>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d110      	bne.n	800a35a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a338:	4b0b      	ldr	r3, [pc, #44]	@ (800a368 <vPortEnterCritical+0x5c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00b      	beq.n	800a35a <vPortEnterCritical+0x4e>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	603b      	str	r3, [r7, #0]
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop
 800a358:	e7fd      	b.n	800a356 <vPortEnterCritical+0x4a>
	}
}
 800a35a:	bf00      	nop
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	bc80      	pop	{r7}
 800a362:	4770      	bx	lr
 800a364:	2000002c 	.word	0x2000002c
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a372:	4b12      	ldr	r3, [pc, #72]	@ (800a3bc <vPortExitCritical+0x50>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10b      	bne.n	800a392 <vPortExitCritical+0x26>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	607b      	str	r3, [r7, #4]
}
 800a38c:	bf00      	nop
 800a38e:	bf00      	nop
 800a390:	e7fd      	b.n	800a38e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a392:	4b0a      	ldr	r3, [pc, #40]	@ (800a3bc <vPortExitCritical+0x50>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3b01      	subs	r3, #1
 800a398:	4a08      	ldr	r2, [pc, #32]	@ (800a3bc <vPortExitCritical+0x50>)
 800a39a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a39c:	4b07      	ldr	r3, [pc, #28]	@ (800a3bc <vPortExitCritical+0x50>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d105      	bne.n	800a3b0 <vPortExitCritical+0x44>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a3ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bc80      	pop	{r7}
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	2000002c 	.word	0x2000002c

0800a3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3c0:	f3ef 8009 	mrs	r0, PSP
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	4b0d      	ldr	r3, [pc, #52]	@ (800a400 <pxCurrentTCBConst>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a3d0:	6010      	str	r0, [r2, #0]
 800a3d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a3d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3da:	f380 8811 	msr	BASEPRI, r0
 800a3de:	f7ff fd65 	bl	8009eac <vTaskSwitchContext>
 800a3e2:	f04f 0000 	mov.w	r0, #0
 800a3e6:	f380 8811 	msr	BASEPRI, r0
 800a3ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a3ee:	6819      	ldr	r1, [r3, #0]
 800a3f0:	6808      	ldr	r0, [r1, #0]
 800a3f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a3f6:	f380 8809 	msr	PSP, r0
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	4770      	bx	lr

0800a400 <pxCurrentTCBConst>:
 800a400:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a404:	bf00      	nop
 800a406:	bf00      	nop

0800a408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	607b      	str	r3, [r7, #4]
}
 800a420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a422:	f7ff fc85 	bl	8009d30 <xTaskIncrementTick>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d003      	beq.n	800a434 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a42c:	4b06      	ldr	r3, [pc, #24]	@ (800a448 <SysTick_Handler+0x40>)
 800a42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	2300      	movs	r3, #0
 800a436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	f383 8811 	msr	BASEPRI, r3
}
 800a43e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a440:	bf00      	nop
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	e000ed04 	.word	0xe000ed04

0800a44c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a44c:	b480      	push	{r7}
 800a44e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a450:	4b0a      	ldr	r3, [pc, #40]	@ (800a47c <vPortSetupTimerInterrupt+0x30>)
 800a452:	2200      	movs	r2, #0
 800a454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a456:	4b0a      	ldr	r3, [pc, #40]	@ (800a480 <vPortSetupTimerInterrupt+0x34>)
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a45c:	4b09      	ldr	r3, [pc, #36]	@ (800a484 <vPortSetupTimerInterrupt+0x38>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a09      	ldr	r2, [pc, #36]	@ (800a488 <vPortSetupTimerInterrupt+0x3c>)
 800a462:	fba2 2303 	umull	r2, r3, r2, r3
 800a466:	099b      	lsrs	r3, r3, #6
 800a468:	4a08      	ldr	r2, [pc, #32]	@ (800a48c <vPortSetupTimerInterrupt+0x40>)
 800a46a:	3b01      	subs	r3, #1
 800a46c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a46e:	4b03      	ldr	r3, [pc, #12]	@ (800a47c <vPortSetupTimerInterrupt+0x30>)
 800a470:	2207      	movs	r2, #7
 800a472:	601a      	str	r2, [r3, #0]
}
 800a474:	bf00      	nop
 800a476:	46bd      	mov	sp, r7
 800a478:	bc80      	pop	{r7}
 800a47a:	4770      	bx	lr
 800a47c:	e000e010 	.word	0xe000e010
 800a480:	e000e018 	.word	0xe000e018
 800a484:	20000020 	.word	0x20000020
 800a488:	10624dd3 	.word	0x10624dd3
 800a48c:	e000e014 	.word	0xe000e014

0800a490 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08a      	sub	sp, #40	@ 0x28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a49c:	f7ff fb8e 	bl	8009bbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4a0:	4b5a      	ldr	r3, [pc, #360]	@ (800a60c <pvPortMalloc+0x17c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4a8:	f000 f916 	bl	800a6d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4ac:	4b58      	ldr	r3, [pc, #352]	@ (800a610 <pvPortMalloc+0x180>)
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f040 8090 	bne.w	800a5da <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01e      	beq.n	800a4fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a4c0:	2208      	movs	r2, #8
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f003 0307 	and.w	r3, r3, #7
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d015      	beq.n	800a4fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f023 0307 	bic.w	r3, r3, #7
 800a4d8:	3308      	adds	r3, #8
 800a4da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f003 0307 	and.w	r3, r3, #7
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00b      	beq.n	800a4fe <pvPortMalloc+0x6e>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	617b      	str	r3, [r7, #20]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d06a      	beq.n	800a5da <pvPortMalloc+0x14a>
 800a504:	4b43      	ldr	r3, [pc, #268]	@ (800a614 <pvPortMalloc+0x184>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d865      	bhi.n	800a5da <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a50e:	4b42      	ldr	r3, [pc, #264]	@ (800a618 <pvPortMalloc+0x188>)
 800a510:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a512:	4b41      	ldr	r3, [pc, #260]	@ (800a618 <pvPortMalloc+0x188>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a518:	e004      	b.n	800a524 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d903      	bls.n	800a536 <pvPortMalloc+0xa6>
 800a52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1f1      	bne.n	800a51a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a536:	4b35      	ldr	r3, [pc, #212]	@ (800a60c <pvPortMalloc+0x17c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d04c      	beq.n	800a5da <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2208      	movs	r2, #8
 800a546:	4413      	add	r3, r2
 800a548:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	1ad2      	subs	r2, r2, r3
 800a55a:	2308      	movs	r3, #8
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	429a      	cmp	r2, r3
 800a560:	d920      	bls.n	800a5a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4413      	add	r3, r2
 800a568:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	f003 0307 	and.w	r3, r3, #7
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00b      	beq.n	800a58c <pvPortMalloc+0xfc>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	613b      	str	r3, [r7, #16]
}
 800a586:	bf00      	nop
 800a588:	bf00      	nop
 800a58a:	e7fd      	b.n	800a588 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	1ad2      	subs	r2, r2, r3
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a59e:	69b8      	ldr	r0, [r7, #24]
 800a5a0:	f000 f8fc 	bl	800a79c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a614 <pvPortMalloc+0x184>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	4a19      	ldr	r2, [pc, #100]	@ (800a614 <pvPortMalloc+0x184>)
 800a5b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5b2:	4b18      	ldr	r3, [pc, #96]	@ (800a614 <pvPortMalloc+0x184>)
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	4b19      	ldr	r3, [pc, #100]	@ (800a61c <pvPortMalloc+0x18c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d203      	bcs.n	800a5c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5be:	4b15      	ldr	r3, [pc, #84]	@ (800a614 <pvPortMalloc+0x184>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a16      	ldr	r2, [pc, #88]	@ (800a61c <pvPortMalloc+0x18c>)
 800a5c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	685a      	ldr	r2, [r3, #4]
 800a5ca:	4b11      	ldr	r3, [pc, #68]	@ (800a610 <pvPortMalloc+0x180>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5da:	f7ff fafd 	bl	8009bd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	f003 0307 	and.w	r3, r3, #7
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <pvPortMalloc+0x170>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	60fb      	str	r3, [r7, #12]
}
 800a5fa:	bf00      	nop
 800a5fc:	bf00      	nop
 800a5fe:	e7fd      	b.n	800a5fc <pvPortMalloc+0x16c>
	return pvReturn;
 800a600:	69fb      	ldr	r3, [r7, #28]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3728      	adds	r7, #40	@ 0x28
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20001504 	.word	0x20001504
 800a610:	20001510 	.word	0x20001510
 800a614:	20001508 	.word	0x20001508
 800a618:	200014fc 	.word	0x200014fc
 800a61c:	2000150c 	.word	0x2000150c

0800a620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d04a      	beq.n	800a6c8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a632:	2308      	movs	r3, #8
 800a634:	425b      	negs	r3, r3
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	4413      	add	r3, r2
 800a63a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	4b22      	ldr	r3, [pc, #136]	@ (800a6d0 <vPortFree+0xb0>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4013      	ands	r3, r2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10b      	bne.n	800a666 <vPortFree+0x46>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	60fb      	str	r3, [r7, #12]
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	e7fd      	b.n	800a662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00b      	beq.n	800a686 <vPortFree+0x66>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	60bb      	str	r3, [r7, #8]
}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	e7fd      	b.n	800a682 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	685a      	ldr	r2, [r3, #4]
 800a68a:	4b11      	ldr	r3, [pc, #68]	@ (800a6d0 <vPortFree+0xb0>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4013      	ands	r3, r2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d019      	beq.n	800a6c8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d115      	bne.n	800a6c8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d0 <vPortFree+0xb0>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	43db      	mvns	r3, r3
 800a6a6:	401a      	ands	r2, r3
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6ac:	f7ff fa86 	bl	8009bbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	4b07      	ldr	r3, [pc, #28]	@ (800a6d4 <vPortFree+0xb4>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	4a06      	ldr	r2, [pc, #24]	@ (800a6d4 <vPortFree+0xb4>)
 800a6bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6be:	6938      	ldr	r0, [r7, #16]
 800a6c0:	f000 f86c 	bl	800a79c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a6c4:	f7ff fa88 	bl	8009bd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6c8:	bf00      	nop
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20001510 	.word	0x20001510
 800a6d4:	20001508 	.word	0x20001508

0800a6d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a6e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6e4:	4b27      	ldr	r3, [pc, #156]	@ (800a784 <prvHeapInit+0xac>)
 800a6e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f003 0307 	and.w	r3, r3, #7
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00c      	beq.n	800a70c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3307      	adds	r3, #7
 800a6f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f023 0307 	bic.w	r3, r3, #7
 800a6fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	4a1f      	ldr	r2, [pc, #124]	@ (800a784 <prvHeapInit+0xac>)
 800a708:	4413      	add	r3, r2
 800a70a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a710:	4a1d      	ldr	r2, [pc, #116]	@ (800a788 <prvHeapInit+0xb0>)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a716:	4b1c      	ldr	r3, [pc, #112]	@ (800a788 <prvHeapInit+0xb0>)
 800a718:	2200      	movs	r2, #0
 800a71a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	4413      	add	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a724:	2208      	movs	r2, #8
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	1a9b      	subs	r3, r3, r2
 800a72a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f023 0307 	bic.w	r3, r3, #7
 800a732:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4a15      	ldr	r2, [pc, #84]	@ (800a78c <prvHeapInit+0xb4>)
 800a738:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a73a:	4b14      	ldr	r3, [pc, #80]	@ (800a78c <prvHeapInit+0xb4>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2200      	movs	r2, #0
 800a740:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a742:	4b12      	ldr	r3, [pc, #72]	@ (800a78c <prvHeapInit+0xb4>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2200      	movs	r2, #0
 800a748:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	1ad2      	subs	r2, r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a758:	4b0c      	ldr	r3, [pc, #48]	@ (800a78c <prvHeapInit+0xb4>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	4a0a      	ldr	r2, [pc, #40]	@ (800a790 <prvHeapInit+0xb8>)
 800a766:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	4a09      	ldr	r2, [pc, #36]	@ (800a794 <prvHeapInit+0xbc>)
 800a76e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a770:	4b09      	ldr	r3, [pc, #36]	@ (800a798 <prvHeapInit+0xc0>)
 800a772:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a776:	601a      	str	r2, [r3, #0]
}
 800a778:	bf00      	nop
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bc80      	pop	{r7}
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	200008fc 	.word	0x200008fc
 800a788:	200014fc 	.word	0x200014fc
 800a78c:	20001504 	.word	0x20001504
 800a790:	2000150c 	.word	0x2000150c
 800a794:	20001508 	.word	0x20001508
 800a798:	20001510 	.word	0x20001510

0800a79c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7a4:	4b27      	ldr	r3, [pc, #156]	@ (800a844 <prvInsertBlockIntoFreeList+0xa8>)
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	e002      	b.n	800a7b0 <prvInsertBlockIntoFreeList+0x14>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d8f7      	bhi.n	800a7aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d108      	bne.n	800a7de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	441a      	add	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	441a      	add	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d118      	bne.n	800a824 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	4b14      	ldr	r3, [pc, #80]	@ (800a848 <prvInsertBlockIntoFreeList+0xac>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d00d      	beq.n	800a81a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	441a      	add	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	e008      	b.n	800a82c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a81a:	4b0b      	ldr	r3, [pc, #44]	@ (800a848 <prvInsertBlockIntoFreeList+0xac>)
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	e003      	b.n	800a82c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	429a      	cmp	r2, r3
 800a832:	d002      	beq.n	800a83a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a83a:	bf00      	nop
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	bc80      	pop	{r7}
 800a842:	4770      	bx	lr
 800a844:	200014fc 	.word	0x200014fc
 800a848:	20001504 	.word	0x20001504

0800a84c <__cvt>:
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a852:	461d      	mov	r5, r3
 800a854:	bfbb      	ittet	lt
 800a856:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a85a:	461d      	movlt	r5, r3
 800a85c:	2300      	movge	r3, #0
 800a85e:	232d      	movlt	r3, #45	@ 0x2d
 800a860:	b088      	sub	sp, #32
 800a862:	4614      	mov	r4, r2
 800a864:	bfb8      	it	lt
 800a866:	4614      	movlt	r4, r2
 800a868:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a86a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a86c:	7013      	strb	r3, [r2, #0]
 800a86e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a870:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a874:	f023 0820 	bic.w	r8, r3, #32
 800a878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a87c:	d005      	beq.n	800a88a <__cvt+0x3e>
 800a87e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a882:	d100      	bne.n	800a886 <__cvt+0x3a>
 800a884:	3601      	adds	r6, #1
 800a886:	2302      	movs	r3, #2
 800a888:	e000      	b.n	800a88c <__cvt+0x40>
 800a88a:	2303      	movs	r3, #3
 800a88c:	aa07      	add	r2, sp, #28
 800a88e:	9204      	str	r2, [sp, #16]
 800a890:	aa06      	add	r2, sp, #24
 800a892:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a896:	e9cd 3600 	strd	r3, r6, [sp]
 800a89a:	4622      	mov	r2, r4
 800a89c:	462b      	mov	r3, r5
 800a89e:	f000 ff07 	bl	800b6b0 <_dtoa_r>
 800a8a2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	d119      	bne.n	800a8de <__cvt+0x92>
 800a8aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8ac:	07db      	lsls	r3, r3, #31
 800a8ae:	d50e      	bpl.n	800a8ce <__cvt+0x82>
 800a8b0:	eb00 0906 	add.w	r9, r0, r6
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	f7f6 f8e4 	bl	8000a88 <__aeabi_dcmpeq>
 800a8c0:	b108      	cbz	r0, 800a8c6 <__cvt+0x7a>
 800a8c2:	f8cd 901c 	str.w	r9, [sp, #28]
 800a8c6:	2230      	movs	r2, #48	@ 0x30
 800a8c8:	9b07      	ldr	r3, [sp, #28]
 800a8ca:	454b      	cmp	r3, r9
 800a8cc:	d31e      	bcc.n	800a90c <__cvt+0xc0>
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	9b07      	ldr	r3, [sp, #28]
 800a8d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a8d4:	1bdb      	subs	r3, r3, r7
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	b008      	add	sp, #32
 800a8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8e2:	eb00 0906 	add.w	r9, r0, r6
 800a8e6:	d1e5      	bne.n	800a8b4 <__cvt+0x68>
 800a8e8:	7803      	ldrb	r3, [r0, #0]
 800a8ea:	2b30      	cmp	r3, #48	@ 0x30
 800a8ec:	d10a      	bne.n	800a904 <__cvt+0xb8>
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	f7f6 f8c7 	bl	8000a88 <__aeabi_dcmpeq>
 800a8fa:	b918      	cbnz	r0, 800a904 <__cvt+0xb8>
 800a8fc:	f1c6 0601 	rsb	r6, r6, #1
 800a900:	f8ca 6000 	str.w	r6, [sl]
 800a904:	f8da 3000 	ldr.w	r3, [sl]
 800a908:	4499      	add	r9, r3
 800a90a:	e7d3      	b.n	800a8b4 <__cvt+0x68>
 800a90c:	1c59      	adds	r1, r3, #1
 800a90e:	9107      	str	r1, [sp, #28]
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	e7d9      	b.n	800a8c8 <__cvt+0x7c>

0800a914 <__exponent>:
 800a914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a916:	2900      	cmp	r1, #0
 800a918:	bfb6      	itet	lt
 800a91a:	232d      	movlt	r3, #45	@ 0x2d
 800a91c:	232b      	movge	r3, #43	@ 0x2b
 800a91e:	4249      	neglt	r1, r1
 800a920:	2909      	cmp	r1, #9
 800a922:	7002      	strb	r2, [r0, #0]
 800a924:	7043      	strb	r3, [r0, #1]
 800a926:	dd29      	ble.n	800a97c <__exponent+0x68>
 800a928:	f10d 0307 	add.w	r3, sp, #7
 800a92c:	461d      	mov	r5, r3
 800a92e:	270a      	movs	r7, #10
 800a930:	fbb1 f6f7 	udiv	r6, r1, r7
 800a934:	461a      	mov	r2, r3
 800a936:	fb07 1416 	mls	r4, r7, r6, r1
 800a93a:	3430      	adds	r4, #48	@ 0x30
 800a93c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a940:	460c      	mov	r4, r1
 800a942:	2c63      	cmp	r4, #99	@ 0x63
 800a944:	4631      	mov	r1, r6
 800a946:	f103 33ff 	add.w	r3, r3, #4294967295
 800a94a:	dcf1      	bgt.n	800a930 <__exponent+0x1c>
 800a94c:	3130      	adds	r1, #48	@ 0x30
 800a94e:	1e94      	subs	r4, r2, #2
 800a950:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a954:	4623      	mov	r3, r4
 800a956:	1c41      	adds	r1, r0, #1
 800a958:	42ab      	cmp	r3, r5
 800a95a:	d30a      	bcc.n	800a972 <__exponent+0x5e>
 800a95c:	f10d 0309 	add.w	r3, sp, #9
 800a960:	1a9b      	subs	r3, r3, r2
 800a962:	42ac      	cmp	r4, r5
 800a964:	bf88      	it	hi
 800a966:	2300      	movhi	r3, #0
 800a968:	3302      	adds	r3, #2
 800a96a:	4403      	add	r3, r0
 800a96c:	1a18      	subs	r0, r3, r0
 800a96e:	b003      	add	sp, #12
 800a970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a972:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a976:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a97a:	e7ed      	b.n	800a958 <__exponent+0x44>
 800a97c:	2330      	movs	r3, #48	@ 0x30
 800a97e:	3130      	adds	r1, #48	@ 0x30
 800a980:	7083      	strb	r3, [r0, #2]
 800a982:	70c1      	strb	r1, [r0, #3]
 800a984:	1d03      	adds	r3, r0, #4
 800a986:	e7f1      	b.n	800a96c <__exponent+0x58>

0800a988 <_printf_float>:
 800a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	b091      	sub	sp, #68	@ 0x44
 800a98e:	460c      	mov	r4, r1
 800a990:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a994:	4616      	mov	r6, r2
 800a996:	461f      	mov	r7, r3
 800a998:	4605      	mov	r5, r0
 800a99a:	f000 fd15 	bl	800b3c8 <_localeconv_r>
 800a99e:	6803      	ldr	r3, [r0, #0]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	9308      	str	r3, [sp, #32]
 800a9a4:	f7f5 fc44 	bl	8000230 <strlen>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a9b0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a9b2:	3307      	adds	r3, #7
 800a9b4:	f023 0307 	bic.w	r3, r3, #7
 800a9b8:	f103 0208 	add.w	r2, r3, #8
 800a9bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a9c0:	f8d4 b000 	ldr.w	fp, [r4]
 800a9c4:	f8c8 2000 	str.w	r2, [r8]
 800a9c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a9d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9d2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a9e2:	4b9c      	ldr	r3, [pc, #624]	@ (800ac54 <_printf_float+0x2cc>)
 800a9e4:	f7f6 f882 	bl	8000aec <__aeabi_dcmpun>
 800a9e8:	bb70      	cbnz	r0, 800aa48 <_printf_float+0xc0>
 800a9ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f2:	4b98      	ldr	r3, [pc, #608]	@ (800ac54 <_printf_float+0x2cc>)
 800a9f4:	f7f6 f85c 	bl	8000ab0 <__aeabi_dcmple>
 800a9f8:	bb30      	cbnz	r0, 800aa48 <_printf_float+0xc0>
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4640      	mov	r0, r8
 800aa00:	4649      	mov	r1, r9
 800aa02:	f7f6 f84b 	bl	8000a9c <__aeabi_dcmplt>
 800aa06:	b110      	cbz	r0, 800aa0e <_printf_float+0x86>
 800aa08:	232d      	movs	r3, #45	@ 0x2d
 800aa0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa0e:	4a92      	ldr	r2, [pc, #584]	@ (800ac58 <_printf_float+0x2d0>)
 800aa10:	4b92      	ldr	r3, [pc, #584]	@ (800ac5c <_printf_float+0x2d4>)
 800aa12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa16:	bf94      	ite	ls
 800aa18:	4690      	movls	r8, r2
 800aa1a:	4698      	movhi	r8, r3
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	f04f 0900 	mov.w	r9, #0
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	f02b 0304 	bic.w	r3, fp, #4
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	4633      	mov	r3, r6
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	4628      	mov	r0, r5
 800aa30:	9700      	str	r7, [sp, #0]
 800aa32:	aa0f      	add	r2, sp, #60	@ 0x3c
 800aa34:	f000 f9d4 	bl	800ade0 <_printf_common>
 800aa38:	3001      	adds	r0, #1
 800aa3a:	f040 8090 	bne.w	800ab5e <_printf_float+0x1d6>
 800aa3e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa42:	b011      	add	sp, #68	@ 0x44
 800aa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa48:	4642      	mov	r2, r8
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	4640      	mov	r0, r8
 800aa4e:	4649      	mov	r1, r9
 800aa50:	f7f6 f84c 	bl	8000aec <__aeabi_dcmpun>
 800aa54:	b148      	cbz	r0, 800aa6a <_printf_float+0xe2>
 800aa56:	464b      	mov	r3, r9
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bfb8      	it	lt
 800aa5c:	232d      	movlt	r3, #45	@ 0x2d
 800aa5e:	4a80      	ldr	r2, [pc, #512]	@ (800ac60 <_printf_float+0x2d8>)
 800aa60:	bfb8      	it	lt
 800aa62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aa66:	4b7f      	ldr	r3, [pc, #508]	@ (800ac64 <_printf_float+0x2dc>)
 800aa68:	e7d3      	b.n	800aa12 <_printf_float+0x8a>
 800aa6a:	6863      	ldr	r3, [r4, #4]
 800aa6c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	d13f      	bne.n	800aaf4 <_printf_float+0x16c>
 800aa74:	2306      	movs	r3, #6
 800aa76:	6063      	str	r3, [r4, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800aa7e:	6023      	str	r3, [r4, #0]
 800aa80:	9206      	str	r2, [sp, #24]
 800aa82:	aa0e      	add	r2, sp, #56	@ 0x38
 800aa84:	e9cd a204 	strd	sl, r2, [sp, #16]
 800aa88:	aa0d      	add	r2, sp, #52	@ 0x34
 800aa8a:	9203      	str	r2, [sp, #12]
 800aa8c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800aa90:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aa94:	6863      	ldr	r3, [r4, #4]
 800aa96:	4642      	mov	r2, r8
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	464b      	mov	r3, r9
 800aa9e:	910a      	str	r1, [sp, #40]	@ 0x28
 800aaa0:	f7ff fed4 	bl	800a84c <__cvt>
 800aaa4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aaa6:	4680      	mov	r8, r0
 800aaa8:	2947      	cmp	r1, #71	@ 0x47
 800aaaa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800aaac:	d128      	bne.n	800ab00 <_printf_float+0x178>
 800aaae:	1cc8      	adds	r0, r1, #3
 800aab0:	db02      	blt.n	800aab8 <_printf_float+0x130>
 800aab2:	6863      	ldr	r3, [r4, #4]
 800aab4:	4299      	cmp	r1, r3
 800aab6:	dd40      	ble.n	800ab3a <_printf_float+0x1b2>
 800aab8:	f1aa 0a02 	sub.w	sl, sl, #2
 800aabc:	fa5f fa8a 	uxtb.w	sl, sl
 800aac0:	4652      	mov	r2, sl
 800aac2:	3901      	subs	r1, #1
 800aac4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aac8:	910d      	str	r1, [sp, #52]	@ 0x34
 800aaca:	f7ff ff23 	bl	800a914 <__exponent>
 800aace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aad0:	4681      	mov	r9, r0
 800aad2:	1813      	adds	r3, r2, r0
 800aad4:	2a01      	cmp	r2, #1
 800aad6:	6123      	str	r3, [r4, #16]
 800aad8:	dc02      	bgt.n	800aae0 <_printf_float+0x158>
 800aada:	6822      	ldr	r2, [r4, #0]
 800aadc:	07d2      	lsls	r2, r2, #31
 800aade:	d501      	bpl.n	800aae4 <_printf_float+0x15c>
 800aae0:	3301      	adds	r3, #1
 800aae2:	6123      	str	r3, [r4, #16]
 800aae4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d09e      	beq.n	800aa2a <_printf_float+0xa2>
 800aaec:	232d      	movs	r3, #45	@ 0x2d
 800aaee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaf2:	e79a      	b.n	800aa2a <_printf_float+0xa2>
 800aaf4:	2947      	cmp	r1, #71	@ 0x47
 800aaf6:	d1bf      	bne.n	800aa78 <_printf_float+0xf0>
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1bd      	bne.n	800aa78 <_printf_float+0xf0>
 800aafc:	2301      	movs	r3, #1
 800aafe:	e7ba      	b.n	800aa76 <_printf_float+0xee>
 800ab00:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab04:	d9dc      	bls.n	800aac0 <_printf_float+0x138>
 800ab06:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ab0a:	d118      	bne.n	800ab3e <_printf_float+0x1b6>
 800ab0c:	2900      	cmp	r1, #0
 800ab0e:	6863      	ldr	r3, [r4, #4]
 800ab10:	dd0b      	ble.n	800ab2a <_printf_float+0x1a2>
 800ab12:	6121      	str	r1, [r4, #16]
 800ab14:	b913      	cbnz	r3, 800ab1c <_printf_float+0x194>
 800ab16:	6822      	ldr	r2, [r4, #0]
 800ab18:	07d0      	lsls	r0, r2, #31
 800ab1a:	d502      	bpl.n	800ab22 <_printf_float+0x19a>
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	440b      	add	r3, r1
 800ab20:	6123      	str	r3, [r4, #16]
 800ab22:	f04f 0900 	mov.w	r9, #0
 800ab26:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab28:	e7dc      	b.n	800aae4 <_printf_float+0x15c>
 800ab2a:	b913      	cbnz	r3, 800ab32 <_printf_float+0x1aa>
 800ab2c:	6822      	ldr	r2, [r4, #0]
 800ab2e:	07d2      	lsls	r2, r2, #31
 800ab30:	d501      	bpl.n	800ab36 <_printf_float+0x1ae>
 800ab32:	3302      	adds	r3, #2
 800ab34:	e7f4      	b.n	800ab20 <_printf_float+0x198>
 800ab36:	2301      	movs	r3, #1
 800ab38:	e7f2      	b.n	800ab20 <_printf_float+0x198>
 800ab3a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ab3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab40:	4299      	cmp	r1, r3
 800ab42:	db05      	blt.n	800ab50 <_printf_float+0x1c8>
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	6121      	str	r1, [r4, #16]
 800ab48:	07d8      	lsls	r0, r3, #31
 800ab4a:	d5ea      	bpl.n	800ab22 <_printf_float+0x19a>
 800ab4c:	1c4b      	adds	r3, r1, #1
 800ab4e:	e7e7      	b.n	800ab20 <_printf_float+0x198>
 800ab50:	2900      	cmp	r1, #0
 800ab52:	bfcc      	ite	gt
 800ab54:	2201      	movgt	r2, #1
 800ab56:	f1c1 0202 	rsble	r2, r1, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	e7e0      	b.n	800ab20 <_printf_float+0x198>
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	055a      	lsls	r2, r3, #21
 800ab62:	d407      	bmi.n	800ab74 <_printf_float+0x1ec>
 800ab64:	6923      	ldr	r3, [r4, #16]
 800ab66:	4642      	mov	r2, r8
 800ab68:	4631      	mov	r1, r6
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	47b8      	blx	r7
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d12b      	bne.n	800abca <_printf_float+0x242>
 800ab72:	e764      	b.n	800aa3e <_printf_float+0xb6>
 800ab74:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab78:	f240 80dc 	bls.w	800ad34 <_printf_float+0x3ac>
 800ab7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab80:	2200      	movs	r2, #0
 800ab82:	2300      	movs	r3, #0
 800ab84:	f7f5 ff80 	bl	8000a88 <__aeabi_dcmpeq>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d033      	beq.n	800abf4 <_printf_float+0x26c>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4628      	mov	r0, r5
 800ab92:	4a35      	ldr	r2, [pc, #212]	@ (800ac68 <_printf_float+0x2e0>)
 800ab94:	47b8      	blx	r7
 800ab96:	3001      	adds	r0, #1
 800ab98:	f43f af51 	beq.w	800aa3e <_printf_float+0xb6>
 800ab9c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800aba0:	4543      	cmp	r3, r8
 800aba2:	db02      	blt.n	800abaa <_printf_float+0x222>
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	07d8      	lsls	r0, r3, #31
 800aba8:	d50f      	bpl.n	800abca <_printf_float+0x242>
 800abaa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800abae:	4631      	mov	r1, r6
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b8      	blx	r7
 800abb4:	3001      	adds	r0, #1
 800abb6:	f43f af42 	beq.w	800aa3e <_printf_float+0xb6>
 800abba:	f04f 0900 	mov.w	r9, #0
 800abbe:	f108 38ff 	add.w	r8, r8, #4294967295
 800abc2:	f104 0a1a 	add.w	sl, r4, #26
 800abc6:	45c8      	cmp	r8, r9
 800abc8:	dc09      	bgt.n	800abde <_printf_float+0x256>
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	079b      	lsls	r3, r3, #30
 800abce:	f100 8102 	bmi.w	800add6 <_printf_float+0x44e>
 800abd2:	68e0      	ldr	r0, [r4, #12]
 800abd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abd6:	4298      	cmp	r0, r3
 800abd8:	bfb8      	it	lt
 800abda:	4618      	movlt	r0, r3
 800abdc:	e731      	b.n	800aa42 <_printf_float+0xba>
 800abde:	2301      	movs	r3, #1
 800abe0:	4652      	mov	r2, sl
 800abe2:	4631      	mov	r1, r6
 800abe4:	4628      	mov	r0, r5
 800abe6:	47b8      	blx	r7
 800abe8:	3001      	adds	r0, #1
 800abea:	f43f af28 	beq.w	800aa3e <_printf_float+0xb6>
 800abee:	f109 0901 	add.w	r9, r9, #1
 800abf2:	e7e8      	b.n	800abc6 <_printf_float+0x23e>
 800abf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dc38      	bgt.n	800ac6c <_printf_float+0x2e4>
 800abfa:	2301      	movs	r3, #1
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	4a19      	ldr	r2, [pc, #100]	@ (800ac68 <_printf_float+0x2e0>)
 800ac02:	47b8      	blx	r7
 800ac04:	3001      	adds	r0, #1
 800ac06:	f43f af1a 	beq.w	800aa3e <_printf_float+0xb6>
 800ac0a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ac0e:	ea59 0303 	orrs.w	r3, r9, r3
 800ac12:	d102      	bne.n	800ac1a <_printf_float+0x292>
 800ac14:	6823      	ldr	r3, [r4, #0]
 800ac16:	07d9      	lsls	r1, r3, #31
 800ac18:	d5d7      	bpl.n	800abca <_printf_float+0x242>
 800ac1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac1e:	4631      	mov	r1, r6
 800ac20:	4628      	mov	r0, r5
 800ac22:	47b8      	blx	r7
 800ac24:	3001      	adds	r0, #1
 800ac26:	f43f af0a 	beq.w	800aa3e <_printf_float+0xb6>
 800ac2a:	f04f 0a00 	mov.w	sl, #0
 800ac2e:	f104 0b1a 	add.w	fp, r4, #26
 800ac32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac34:	425b      	negs	r3, r3
 800ac36:	4553      	cmp	r3, sl
 800ac38:	dc01      	bgt.n	800ac3e <_printf_float+0x2b6>
 800ac3a:	464b      	mov	r3, r9
 800ac3c:	e793      	b.n	800ab66 <_printf_float+0x1de>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	465a      	mov	r2, fp
 800ac42:	4631      	mov	r1, r6
 800ac44:	4628      	mov	r0, r5
 800ac46:	47b8      	blx	r7
 800ac48:	3001      	adds	r0, #1
 800ac4a:	f43f aef8 	beq.w	800aa3e <_printf_float+0xb6>
 800ac4e:	f10a 0a01 	add.w	sl, sl, #1
 800ac52:	e7ee      	b.n	800ac32 <_printf_float+0x2aa>
 800ac54:	7fefffff 	.word	0x7fefffff
 800ac58:	0800e036 	.word	0x0800e036
 800ac5c:	0800e03a 	.word	0x0800e03a
 800ac60:	0800e03e 	.word	0x0800e03e
 800ac64:	0800e042 	.word	0x0800e042
 800ac68:	0800e046 	.word	0x0800e046
 800ac6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac6e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ac72:	4553      	cmp	r3, sl
 800ac74:	bfa8      	it	ge
 800ac76:	4653      	movge	r3, sl
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	4699      	mov	r9, r3
 800ac7c:	dc36      	bgt.n	800acec <_printf_float+0x364>
 800ac7e:	f04f 0b00 	mov.w	fp, #0
 800ac82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac86:	f104 021a 	add.w	r2, r4, #26
 800ac8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac8e:	eba3 0309 	sub.w	r3, r3, r9
 800ac92:	455b      	cmp	r3, fp
 800ac94:	dc31      	bgt.n	800acfa <_printf_float+0x372>
 800ac96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac98:	459a      	cmp	sl, r3
 800ac9a:	dc3a      	bgt.n	800ad12 <_printf_float+0x38a>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	07da      	lsls	r2, r3, #31
 800aca0:	d437      	bmi.n	800ad12 <_printf_float+0x38a>
 800aca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aca4:	ebaa 0903 	sub.w	r9, sl, r3
 800aca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acaa:	ebaa 0303 	sub.w	r3, sl, r3
 800acae:	4599      	cmp	r9, r3
 800acb0:	bfa8      	it	ge
 800acb2:	4699      	movge	r9, r3
 800acb4:	f1b9 0f00 	cmp.w	r9, #0
 800acb8:	dc33      	bgt.n	800ad22 <_printf_float+0x39a>
 800acba:	f04f 0800 	mov.w	r8, #0
 800acbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acc2:	f104 0b1a 	add.w	fp, r4, #26
 800acc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acc8:	ebaa 0303 	sub.w	r3, sl, r3
 800accc:	eba3 0309 	sub.w	r3, r3, r9
 800acd0:	4543      	cmp	r3, r8
 800acd2:	f77f af7a 	ble.w	800abca <_printf_float+0x242>
 800acd6:	2301      	movs	r3, #1
 800acd8:	465a      	mov	r2, fp
 800acda:	4631      	mov	r1, r6
 800acdc:	4628      	mov	r0, r5
 800acde:	47b8      	blx	r7
 800ace0:	3001      	adds	r0, #1
 800ace2:	f43f aeac 	beq.w	800aa3e <_printf_float+0xb6>
 800ace6:	f108 0801 	add.w	r8, r8, #1
 800acea:	e7ec      	b.n	800acc6 <_printf_float+0x33e>
 800acec:	4642      	mov	r2, r8
 800acee:	4631      	mov	r1, r6
 800acf0:	4628      	mov	r0, r5
 800acf2:	47b8      	blx	r7
 800acf4:	3001      	adds	r0, #1
 800acf6:	d1c2      	bne.n	800ac7e <_printf_float+0x2f6>
 800acf8:	e6a1      	b.n	800aa3e <_printf_float+0xb6>
 800acfa:	2301      	movs	r3, #1
 800acfc:	4631      	mov	r1, r6
 800acfe:	4628      	mov	r0, r5
 800ad00:	920a      	str	r2, [sp, #40]	@ 0x28
 800ad02:	47b8      	blx	r7
 800ad04:	3001      	adds	r0, #1
 800ad06:	f43f ae9a 	beq.w	800aa3e <_printf_float+0xb6>
 800ad0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad0c:	f10b 0b01 	add.w	fp, fp, #1
 800ad10:	e7bb      	b.n	800ac8a <_printf_float+0x302>
 800ad12:	4631      	mov	r1, r6
 800ad14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b8      	blx	r7
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d1c0      	bne.n	800aca2 <_printf_float+0x31a>
 800ad20:	e68d      	b.n	800aa3e <_printf_float+0xb6>
 800ad22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad24:	464b      	mov	r3, r9
 800ad26:	4631      	mov	r1, r6
 800ad28:	4628      	mov	r0, r5
 800ad2a:	4442      	add	r2, r8
 800ad2c:	47b8      	blx	r7
 800ad2e:	3001      	adds	r0, #1
 800ad30:	d1c3      	bne.n	800acba <_printf_float+0x332>
 800ad32:	e684      	b.n	800aa3e <_printf_float+0xb6>
 800ad34:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ad38:	f1ba 0f01 	cmp.w	sl, #1
 800ad3c:	dc01      	bgt.n	800ad42 <_printf_float+0x3ba>
 800ad3e:	07db      	lsls	r3, r3, #31
 800ad40:	d536      	bpl.n	800adb0 <_printf_float+0x428>
 800ad42:	2301      	movs	r3, #1
 800ad44:	4642      	mov	r2, r8
 800ad46:	4631      	mov	r1, r6
 800ad48:	4628      	mov	r0, r5
 800ad4a:	47b8      	blx	r7
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	f43f ae76 	beq.w	800aa3e <_printf_float+0xb6>
 800ad52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad56:	4631      	mov	r1, r6
 800ad58:	4628      	mov	r0, r5
 800ad5a:	47b8      	blx	r7
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	f43f ae6e 	beq.w	800aa3e <_printf_float+0xb6>
 800ad62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad66:	2200      	movs	r2, #0
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad6e:	f7f5 fe8b 	bl	8000a88 <__aeabi_dcmpeq>
 800ad72:	b9c0      	cbnz	r0, 800ada6 <_printf_float+0x41e>
 800ad74:	4653      	mov	r3, sl
 800ad76:	f108 0201 	add.w	r2, r8, #1
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	47b8      	blx	r7
 800ad80:	3001      	adds	r0, #1
 800ad82:	d10c      	bne.n	800ad9e <_printf_float+0x416>
 800ad84:	e65b      	b.n	800aa3e <_printf_float+0xb6>
 800ad86:	2301      	movs	r3, #1
 800ad88:	465a      	mov	r2, fp
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b8      	blx	r7
 800ad90:	3001      	adds	r0, #1
 800ad92:	f43f ae54 	beq.w	800aa3e <_printf_float+0xb6>
 800ad96:	f108 0801 	add.w	r8, r8, #1
 800ad9a:	45d0      	cmp	r8, sl
 800ad9c:	dbf3      	blt.n	800ad86 <_printf_float+0x3fe>
 800ad9e:	464b      	mov	r3, r9
 800ada0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ada4:	e6e0      	b.n	800ab68 <_printf_float+0x1e0>
 800ada6:	f04f 0800 	mov.w	r8, #0
 800adaa:	f104 0b1a 	add.w	fp, r4, #26
 800adae:	e7f4      	b.n	800ad9a <_printf_float+0x412>
 800adb0:	2301      	movs	r3, #1
 800adb2:	4642      	mov	r2, r8
 800adb4:	e7e1      	b.n	800ad7a <_printf_float+0x3f2>
 800adb6:	2301      	movs	r3, #1
 800adb8:	464a      	mov	r2, r9
 800adba:	4631      	mov	r1, r6
 800adbc:	4628      	mov	r0, r5
 800adbe:	47b8      	blx	r7
 800adc0:	3001      	adds	r0, #1
 800adc2:	f43f ae3c 	beq.w	800aa3e <_printf_float+0xb6>
 800adc6:	f108 0801 	add.w	r8, r8, #1
 800adca:	68e3      	ldr	r3, [r4, #12]
 800adcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800adce:	1a5b      	subs	r3, r3, r1
 800add0:	4543      	cmp	r3, r8
 800add2:	dcf0      	bgt.n	800adb6 <_printf_float+0x42e>
 800add4:	e6fd      	b.n	800abd2 <_printf_float+0x24a>
 800add6:	f04f 0800 	mov.w	r8, #0
 800adda:	f104 0919 	add.w	r9, r4, #25
 800adde:	e7f4      	b.n	800adca <_printf_float+0x442>

0800ade0 <_printf_common>:
 800ade0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade4:	4616      	mov	r6, r2
 800ade6:	4698      	mov	r8, r3
 800ade8:	688a      	ldr	r2, [r1, #8]
 800adea:	690b      	ldr	r3, [r1, #16]
 800adec:	4607      	mov	r7, r0
 800adee:	4293      	cmp	r3, r2
 800adf0:	bfb8      	it	lt
 800adf2:	4613      	movlt	r3, r2
 800adf4:	6033      	str	r3, [r6, #0]
 800adf6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800adfa:	460c      	mov	r4, r1
 800adfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae00:	b10a      	cbz	r2, 800ae06 <_printf_common+0x26>
 800ae02:	3301      	adds	r3, #1
 800ae04:	6033      	str	r3, [r6, #0]
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	0699      	lsls	r1, r3, #26
 800ae0a:	bf42      	ittt	mi
 800ae0c:	6833      	ldrmi	r3, [r6, #0]
 800ae0e:	3302      	addmi	r3, #2
 800ae10:	6033      	strmi	r3, [r6, #0]
 800ae12:	6825      	ldr	r5, [r4, #0]
 800ae14:	f015 0506 	ands.w	r5, r5, #6
 800ae18:	d106      	bne.n	800ae28 <_printf_common+0x48>
 800ae1a:	f104 0a19 	add.w	sl, r4, #25
 800ae1e:	68e3      	ldr	r3, [r4, #12]
 800ae20:	6832      	ldr	r2, [r6, #0]
 800ae22:	1a9b      	subs	r3, r3, r2
 800ae24:	42ab      	cmp	r3, r5
 800ae26:	dc2b      	bgt.n	800ae80 <_printf_common+0xa0>
 800ae28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae2c:	6822      	ldr	r2, [r4, #0]
 800ae2e:	3b00      	subs	r3, #0
 800ae30:	bf18      	it	ne
 800ae32:	2301      	movne	r3, #1
 800ae34:	0692      	lsls	r2, r2, #26
 800ae36:	d430      	bmi.n	800ae9a <_printf_common+0xba>
 800ae38:	4641      	mov	r1, r8
 800ae3a:	4638      	mov	r0, r7
 800ae3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae40:	47c8      	blx	r9
 800ae42:	3001      	adds	r0, #1
 800ae44:	d023      	beq.n	800ae8e <_printf_common+0xae>
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	6922      	ldr	r2, [r4, #16]
 800ae4a:	f003 0306 	and.w	r3, r3, #6
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	bf14      	ite	ne
 800ae52:	2500      	movne	r5, #0
 800ae54:	6833      	ldreq	r3, [r6, #0]
 800ae56:	f04f 0600 	mov.w	r6, #0
 800ae5a:	bf08      	it	eq
 800ae5c:	68e5      	ldreq	r5, [r4, #12]
 800ae5e:	f104 041a 	add.w	r4, r4, #26
 800ae62:	bf08      	it	eq
 800ae64:	1aed      	subeq	r5, r5, r3
 800ae66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ae6a:	bf08      	it	eq
 800ae6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae70:	4293      	cmp	r3, r2
 800ae72:	bfc4      	itt	gt
 800ae74:	1a9b      	subgt	r3, r3, r2
 800ae76:	18ed      	addgt	r5, r5, r3
 800ae78:	42b5      	cmp	r5, r6
 800ae7a:	d11a      	bne.n	800aeb2 <_printf_common+0xd2>
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	e008      	b.n	800ae92 <_printf_common+0xb2>
 800ae80:	2301      	movs	r3, #1
 800ae82:	4652      	mov	r2, sl
 800ae84:	4641      	mov	r1, r8
 800ae86:	4638      	mov	r0, r7
 800ae88:	47c8      	blx	r9
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d103      	bne.n	800ae96 <_printf_common+0xb6>
 800ae8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae96:	3501      	adds	r5, #1
 800ae98:	e7c1      	b.n	800ae1e <_printf_common+0x3e>
 800ae9a:	2030      	movs	r0, #48	@ 0x30
 800ae9c:	18e1      	adds	r1, r4, r3
 800ae9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aea2:	1c5a      	adds	r2, r3, #1
 800aea4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aea8:	4422      	add	r2, r4
 800aeaa:	3302      	adds	r3, #2
 800aeac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aeb0:	e7c2      	b.n	800ae38 <_printf_common+0x58>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	4622      	mov	r2, r4
 800aeb6:	4641      	mov	r1, r8
 800aeb8:	4638      	mov	r0, r7
 800aeba:	47c8      	blx	r9
 800aebc:	3001      	adds	r0, #1
 800aebe:	d0e6      	beq.n	800ae8e <_printf_common+0xae>
 800aec0:	3601      	adds	r6, #1
 800aec2:	e7d9      	b.n	800ae78 <_printf_common+0x98>

0800aec4 <_printf_i>:
 800aec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aec8:	7e0f      	ldrb	r7, [r1, #24]
 800aeca:	4691      	mov	r9, r2
 800aecc:	2f78      	cmp	r7, #120	@ 0x78
 800aece:	4680      	mov	r8, r0
 800aed0:	460c      	mov	r4, r1
 800aed2:	469a      	mov	sl, r3
 800aed4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aed6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aeda:	d807      	bhi.n	800aeec <_printf_i+0x28>
 800aedc:	2f62      	cmp	r7, #98	@ 0x62
 800aede:	d80a      	bhi.n	800aef6 <_printf_i+0x32>
 800aee0:	2f00      	cmp	r7, #0
 800aee2:	f000 80d3 	beq.w	800b08c <_printf_i+0x1c8>
 800aee6:	2f58      	cmp	r7, #88	@ 0x58
 800aee8:	f000 80ba 	beq.w	800b060 <_printf_i+0x19c>
 800aeec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aef0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aef4:	e03a      	b.n	800af6c <_printf_i+0xa8>
 800aef6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aefa:	2b15      	cmp	r3, #21
 800aefc:	d8f6      	bhi.n	800aeec <_printf_i+0x28>
 800aefe:	a101      	add	r1, pc, #4	@ (adr r1, 800af04 <_printf_i+0x40>)
 800af00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af04:	0800af5d 	.word	0x0800af5d
 800af08:	0800af71 	.word	0x0800af71
 800af0c:	0800aeed 	.word	0x0800aeed
 800af10:	0800aeed 	.word	0x0800aeed
 800af14:	0800aeed 	.word	0x0800aeed
 800af18:	0800aeed 	.word	0x0800aeed
 800af1c:	0800af71 	.word	0x0800af71
 800af20:	0800aeed 	.word	0x0800aeed
 800af24:	0800aeed 	.word	0x0800aeed
 800af28:	0800aeed 	.word	0x0800aeed
 800af2c:	0800aeed 	.word	0x0800aeed
 800af30:	0800b073 	.word	0x0800b073
 800af34:	0800af9b 	.word	0x0800af9b
 800af38:	0800b02d 	.word	0x0800b02d
 800af3c:	0800aeed 	.word	0x0800aeed
 800af40:	0800aeed 	.word	0x0800aeed
 800af44:	0800b095 	.word	0x0800b095
 800af48:	0800aeed 	.word	0x0800aeed
 800af4c:	0800af9b 	.word	0x0800af9b
 800af50:	0800aeed 	.word	0x0800aeed
 800af54:	0800aeed 	.word	0x0800aeed
 800af58:	0800b035 	.word	0x0800b035
 800af5c:	6833      	ldr	r3, [r6, #0]
 800af5e:	1d1a      	adds	r2, r3, #4
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	6032      	str	r2, [r6, #0]
 800af64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af6c:	2301      	movs	r3, #1
 800af6e:	e09e      	b.n	800b0ae <_printf_i+0x1ea>
 800af70:	6833      	ldr	r3, [r6, #0]
 800af72:	6820      	ldr	r0, [r4, #0]
 800af74:	1d19      	adds	r1, r3, #4
 800af76:	6031      	str	r1, [r6, #0]
 800af78:	0606      	lsls	r6, r0, #24
 800af7a:	d501      	bpl.n	800af80 <_printf_i+0xbc>
 800af7c:	681d      	ldr	r5, [r3, #0]
 800af7e:	e003      	b.n	800af88 <_printf_i+0xc4>
 800af80:	0645      	lsls	r5, r0, #25
 800af82:	d5fb      	bpl.n	800af7c <_printf_i+0xb8>
 800af84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af88:	2d00      	cmp	r5, #0
 800af8a:	da03      	bge.n	800af94 <_printf_i+0xd0>
 800af8c:	232d      	movs	r3, #45	@ 0x2d
 800af8e:	426d      	negs	r5, r5
 800af90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af94:	230a      	movs	r3, #10
 800af96:	4859      	ldr	r0, [pc, #356]	@ (800b0fc <_printf_i+0x238>)
 800af98:	e011      	b.n	800afbe <_printf_i+0xfa>
 800af9a:	6821      	ldr	r1, [r4, #0]
 800af9c:	6833      	ldr	r3, [r6, #0]
 800af9e:	0608      	lsls	r0, r1, #24
 800afa0:	f853 5b04 	ldr.w	r5, [r3], #4
 800afa4:	d402      	bmi.n	800afac <_printf_i+0xe8>
 800afa6:	0649      	lsls	r1, r1, #25
 800afa8:	bf48      	it	mi
 800afaa:	b2ad      	uxthmi	r5, r5
 800afac:	2f6f      	cmp	r7, #111	@ 0x6f
 800afae:	6033      	str	r3, [r6, #0]
 800afb0:	bf14      	ite	ne
 800afb2:	230a      	movne	r3, #10
 800afb4:	2308      	moveq	r3, #8
 800afb6:	4851      	ldr	r0, [pc, #324]	@ (800b0fc <_printf_i+0x238>)
 800afb8:	2100      	movs	r1, #0
 800afba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800afbe:	6866      	ldr	r6, [r4, #4]
 800afc0:	2e00      	cmp	r6, #0
 800afc2:	bfa8      	it	ge
 800afc4:	6821      	ldrge	r1, [r4, #0]
 800afc6:	60a6      	str	r6, [r4, #8]
 800afc8:	bfa4      	itt	ge
 800afca:	f021 0104 	bicge.w	r1, r1, #4
 800afce:	6021      	strge	r1, [r4, #0]
 800afd0:	b90d      	cbnz	r5, 800afd6 <_printf_i+0x112>
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	d04b      	beq.n	800b06e <_printf_i+0x1aa>
 800afd6:	4616      	mov	r6, r2
 800afd8:	fbb5 f1f3 	udiv	r1, r5, r3
 800afdc:	fb03 5711 	mls	r7, r3, r1, r5
 800afe0:	5dc7      	ldrb	r7, [r0, r7]
 800afe2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800afe6:	462f      	mov	r7, r5
 800afe8:	42bb      	cmp	r3, r7
 800afea:	460d      	mov	r5, r1
 800afec:	d9f4      	bls.n	800afd8 <_printf_i+0x114>
 800afee:	2b08      	cmp	r3, #8
 800aff0:	d10b      	bne.n	800b00a <_printf_i+0x146>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	07df      	lsls	r7, r3, #31
 800aff6:	d508      	bpl.n	800b00a <_printf_i+0x146>
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	6861      	ldr	r1, [r4, #4]
 800affc:	4299      	cmp	r1, r3
 800affe:	bfde      	ittt	le
 800b000:	2330      	movle	r3, #48	@ 0x30
 800b002:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b006:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b00a:	1b92      	subs	r2, r2, r6
 800b00c:	6122      	str	r2, [r4, #16]
 800b00e:	464b      	mov	r3, r9
 800b010:	4621      	mov	r1, r4
 800b012:	4640      	mov	r0, r8
 800b014:	f8cd a000 	str.w	sl, [sp]
 800b018:	aa03      	add	r2, sp, #12
 800b01a:	f7ff fee1 	bl	800ade0 <_printf_common>
 800b01e:	3001      	adds	r0, #1
 800b020:	d14a      	bne.n	800b0b8 <_printf_i+0x1f4>
 800b022:	f04f 30ff 	mov.w	r0, #4294967295
 800b026:	b004      	add	sp, #16
 800b028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	f043 0320 	orr.w	r3, r3, #32
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	2778      	movs	r7, #120	@ 0x78
 800b036:	4832      	ldr	r0, [pc, #200]	@ (800b100 <_printf_i+0x23c>)
 800b038:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	6831      	ldr	r1, [r6, #0]
 800b040:	061f      	lsls	r7, r3, #24
 800b042:	f851 5b04 	ldr.w	r5, [r1], #4
 800b046:	d402      	bmi.n	800b04e <_printf_i+0x18a>
 800b048:	065f      	lsls	r7, r3, #25
 800b04a:	bf48      	it	mi
 800b04c:	b2ad      	uxthmi	r5, r5
 800b04e:	6031      	str	r1, [r6, #0]
 800b050:	07d9      	lsls	r1, r3, #31
 800b052:	bf44      	itt	mi
 800b054:	f043 0320 	orrmi.w	r3, r3, #32
 800b058:	6023      	strmi	r3, [r4, #0]
 800b05a:	b11d      	cbz	r5, 800b064 <_printf_i+0x1a0>
 800b05c:	2310      	movs	r3, #16
 800b05e:	e7ab      	b.n	800afb8 <_printf_i+0xf4>
 800b060:	4826      	ldr	r0, [pc, #152]	@ (800b0fc <_printf_i+0x238>)
 800b062:	e7e9      	b.n	800b038 <_printf_i+0x174>
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	f023 0320 	bic.w	r3, r3, #32
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	e7f6      	b.n	800b05c <_printf_i+0x198>
 800b06e:	4616      	mov	r6, r2
 800b070:	e7bd      	b.n	800afee <_printf_i+0x12a>
 800b072:	6833      	ldr	r3, [r6, #0]
 800b074:	6825      	ldr	r5, [r4, #0]
 800b076:	1d18      	adds	r0, r3, #4
 800b078:	6961      	ldr	r1, [r4, #20]
 800b07a:	6030      	str	r0, [r6, #0]
 800b07c:	062e      	lsls	r6, r5, #24
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	d501      	bpl.n	800b086 <_printf_i+0x1c2>
 800b082:	6019      	str	r1, [r3, #0]
 800b084:	e002      	b.n	800b08c <_printf_i+0x1c8>
 800b086:	0668      	lsls	r0, r5, #25
 800b088:	d5fb      	bpl.n	800b082 <_printf_i+0x1be>
 800b08a:	8019      	strh	r1, [r3, #0]
 800b08c:	2300      	movs	r3, #0
 800b08e:	4616      	mov	r6, r2
 800b090:	6123      	str	r3, [r4, #16]
 800b092:	e7bc      	b.n	800b00e <_printf_i+0x14a>
 800b094:	6833      	ldr	r3, [r6, #0]
 800b096:	2100      	movs	r1, #0
 800b098:	1d1a      	adds	r2, r3, #4
 800b09a:	6032      	str	r2, [r6, #0]
 800b09c:	681e      	ldr	r6, [r3, #0]
 800b09e:	6862      	ldr	r2, [r4, #4]
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f000 fa5e 	bl	800b562 <memchr>
 800b0a6:	b108      	cbz	r0, 800b0ac <_printf_i+0x1e8>
 800b0a8:	1b80      	subs	r0, r0, r6
 800b0aa:	6060      	str	r0, [r4, #4]
 800b0ac:	6863      	ldr	r3, [r4, #4]
 800b0ae:	6123      	str	r3, [r4, #16]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0b6:	e7aa      	b.n	800b00e <_printf_i+0x14a>
 800b0b8:	4632      	mov	r2, r6
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	4640      	mov	r0, r8
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	47d0      	blx	sl
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	d0ad      	beq.n	800b022 <_printf_i+0x15e>
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	079b      	lsls	r3, r3, #30
 800b0ca:	d413      	bmi.n	800b0f4 <_printf_i+0x230>
 800b0cc:	68e0      	ldr	r0, [r4, #12]
 800b0ce:	9b03      	ldr	r3, [sp, #12]
 800b0d0:	4298      	cmp	r0, r3
 800b0d2:	bfb8      	it	lt
 800b0d4:	4618      	movlt	r0, r3
 800b0d6:	e7a6      	b.n	800b026 <_printf_i+0x162>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	4632      	mov	r2, r6
 800b0dc:	4649      	mov	r1, r9
 800b0de:	4640      	mov	r0, r8
 800b0e0:	47d0      	blx	sl
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	d09d      	beq.n	800b022 <_printf_i+0x15e>
 800b0e6:	3501      	adds	r5, #1
 800b0e8:	68e3      	ldr	r3, [r4, #12]
 800b0ea:	9903      	ldr	r1, [sp, #12]
 800b0ec:	1a5b      	subs	r3, r3, r1
 800b0ee:	42ab      	cmp	r3, r5
 800b0f0:	dcf2      	bgt.n	800b0d8 <_printf_i+0x214>
 800b0f2:	e7eb      	b.n	800b0cc <_printf_i+0x208>
 800b0f4:	2500      	movs	r5, #0
 800b0f6:	f104 0619 	add.w	r6, r4, #25
 800b0fa:	e7f5      	b.n	800b0e8 <_printf_i+0x224>
 800b0fc:	0800e048 	.word	0x0800e048
 800b100:	0800e059 	.word	0x0800e059

0800b104 <std>:
 800b104:	2300      	movs	r3, #0
 800b106:	b510      	push	{r4, lr}
 800b108:	4604      	mov	r4, r0
 800b10a:	e9c0 3300 	strd	r3, r3, [r0]
 800b10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b112:	6083      	str	r3, [r0, #8]
 800b114:	8181      	strh	r1, [r0, #12]
 800b116:	6643      	str	r3, [r0, #100]	@ 0x64
 800b118:	81c2      	strh	r2, [r0, #14]
 800b11a:	6183      	str	r3, [r0, #24]
 800b11c:	4619      	mov	r1, r3
 800b11e:	2208      	movs	r2, #8
 800b120:	305c      	adds	r0, #92	@ 0x5c
 800b122:	f000 f948 	bl	800b3b6 <memset>
 800b126:	4b0d      	ldr	r3, [pc, #52]	@ (800b15c <std+0x58>)
 800b128:	6224      	str	r4, [r4, #32]
 800b12a:	6263      	str	r3, [r4, #36]	@ 0x24
 800b12c:	4b0c      	ldr	r3, [pc, #48]	@ (800b160 <std+0x5c>)
 800b12e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b130:	4b0c      	ldr	r3, [pc, #48]	@ (800b164 <std+0x60>)
 800b132:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b134:	4b0c      	ldr	r3, [pc, #48]	@ (800b168 <std+0x64>)
 800b136:	6323      	str	r3, [r4, #48]	@ 0x30
 800b138:	4b0c      	ldr	r3, [pc, #48]	@ (800b16c <std+0x68>)
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d006      	beq.n	800b14c <std+0x48>
 800b13e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b142:	4294      	cmp	r4, r2
 800b144:	d002      	beq.n	800b14c <std+0x48>
 800b146:	33d0      	adds	r3, #208	@ 0xd0
 800b148:	429c      	cmp	r4, r3
 800b14a:	d105      	bne.n	800b158 <std+0x54>
 800b14c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b154:	f000 ba02 	b.w	800b55c <__retarget_lock_init_recursive>
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	bf00      	nop
 800b15c:	0800b331 	.word	0x0800b331
 800b160:	0800b353 	.word	0x0800b353
 800b164:	0800b38b 	.word	0x0800b38b
 800b168:	0800b3af 	.word	0x0800b3af
 800b16c:	20001514 	.word	0x20001514

0800b170 <stdio_exit_handler>:
 800b170:	4a02      	ldr	r2, [pc, #8]	@ (800b17c <stdio_exit_handler+0xc>)
 800b172:	4903      	ldr	r1, [pc, #12]	@ (800b180 <stdio_exit_handler+0x10>)
 800b174:	4803      	ldr	r0, [pc, #12]	@ (800b184 <stdio_exit_handler+0x14>)
 800b176:	f000 b869 	b.w	800b24c <_fwalk_sglue>
 800b17a:	bf00      	nop
 800b17c:	20000030 	.word	0x20000030
 800b180:	0800ceed 	.word	0x0800ceed
 800b184:	20000040 	.word	0x20000040

0800b188 <cleanup_stdio>:
 800b188:	6841      	ldr	r1, [r0, #4]
 800b18a:	4b0c      	ldr	r3, [pc, #48]	@ (800b1bc <cleanup_stdio+0x34>)
 800b18c:	b510      	push	{r4, lr}
 800b18e:	4299      	cmp	r1, r3
 800b190:	4604      	mov	r4, r0
 800b192:	d001      	beq.n	800b198 <cleanup_stdio+0x10>
 800b194:	f001 feaa 	bl	800ceec <_fflush_r>
 800b198:	68a1      	ldr	r1, [r4, #8]
 800b19a:	4b09      	ldr	r3, [pc, #36]	@ (800b1c0 <cleanup_stdio+0x38>)
 800b19c:	4299      	cmp	r1, r3
 800b19e:	d002      	beq.n	800b1a6 <cleanup_stdio+0x1e>
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f001 fea3 	bl	800ceec <_fflush_r>
 800b1a6:	68e1      	ldr	r1, [r4, #12]
 800b1a8:	4b06      	ldr	r3, [pc, #24]	@ (800b1c4 <cleanup_stdio+0x3c>)
 800b1aa:	4299      	cmp	r1, r3
 800b1ac:	d004      	beq.n	800b1b8 <cleanup_stdio+0x30>
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b4:	f001 be9a 	b.w	800ceec <_fflush_r>
 800b1b8:	bd10      	pop	{r4, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20001514 	.word	0x20001514
 800b1c0:	2000157c 	.word	0x2000157c
 800b1c4:	200015e4 	.word	0x200015e4

0800b1c8 <global_stdio_init.part.0>:
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b1f8 <global_stdio_init.part.0+0x30>)
 800b1cc:	4c0b      	ldr	r4, [pc, #44]	@ (800b1fc <global_stdio_init.part.0+0x34>)
 800b1ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b200 <global_stdio_init.part.0+0x38>)
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	2104      	movs	r1, #4
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f7ff ff94 	bl	800b104 <std>
 800b1dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	2109      	movs	r1, #9
 800b1e4:	f7ff ff8e 	bl	800b104 <std>
 800b1e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f2:	2112      	movs	r1, #18
 800b1f4:	f7ff bf86 	b.w	800b104 <std>
 800b1f8:	2000164c 	.word	0x2000164c
 800b1fc:	20001514 	.word	0x20001514
 800b200:	0800b171 	.word	0x0800b171

0800b204 <__sfp_lock_acquire>:
 800b204:	4801      	ldr	r0, [pc, #4]	@ (800b20c <__sfp_lock_acquire+0x8>)
 800b206:	f000 b9aa 	b.w	800b55e <__retarget_lock_acquire_recursive>
 800b20a:	bf00      	nop
 800b20c:	20001655 	.word	0x20001655

0800b210 <__sfp_lock_release>:
 800b210:	4801      	ldr	r0, [pc, #4]	@ (800b218 <__sfp_lock_release+0x8>)
 800b212:	f000 b9a5 	b.w	800b560 <__retarget_lock_release_recursive>
 800b216:	bf00      	nop
 800b218:	20001655 	.word	0x20001655

0800b21c <__sinit>:
 800b21c:	b510      	push	{r4, lr}
 800b21e:	4604      	mov	r4, r0
 800b220:	f7ff fff0 	bl	800b204 <__sfp_lock_acquire>
 800b224:	6a23      	ldr	r3, [r4, #32]
 800b226:	b11b      	cbz	r3, 800b230 <__sinit+0x14>
 800b228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b22c:	f7ff bff0 	b.w	800b210 <__sfp_lock_release>
 800b230:	4b04      	ldr	r3, [pc, #16]	@ (800b244 <__sinit+0x28>)
 800b232:	6223      	str	r3, [r4, #32]
 800b234:	4b04      	ldr	r3, [pc, #16]	@ (800b248 <__sinit+0x2c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1f5      	bne.n	800b228 <__sinit+0xc>
 800b23c:	f7ff ffc4 	bl	800b1c8 <global_stdio_init.part.0>
 800b240:	e7f2      	b.n	800b228 <__sinit+0xc>
 800b242:	bf00      	nop
 800b244:	0800b189 	.word	0x0800b189
 800b248:	2000164c 	.word	0x2000164c

0800b24c <_fwalk_sglue>:
 800b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b250:	4607      	mov	r7, r0
 800b252:	4688      	mov	r8, r1
 800b254:	4614      	mov	r4, r2
 800b256:	2600      	movs	r6, #0
 800b258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b25c:	f1b9 0901 	subs.w	r9, r9, #1
 800b260:	d505      	bpl.n	800b26e <_fwalk_sglue+0x22>
 800b262:	6824      	ldr	r4, [r4, #0]
 800b264:	2c00      	cmp	r4, #0
 800b266:	d1f7      	bne.n	800b258 <_fwalk_sglue+0xc>
 800b268:	4630      	mov	r0, r6
 800b26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26e:	89ab      	ldrh	r3, [r5, #12]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d907      	bls.n	800b284 <_fwalk_sglue+0x38>
 800b274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b278:	3301      	adds	r3, #1
 800b27a:	d003      	beq.n	800b284 <_fwalk_sglue+0x38>
 800b27c:	4629      	mov	r1, r5
 800b27e:	4638      	mov	r0, r7
 800b280:	47c0      	blx	r8
 800b282:	4306      	orrs	r6, r0
 800b284:	3568      	adds	r5, #104	@ 0x68
 800b286:	e7e9      	b.n	800b25c <_fwalk_sglue+0x10>

0800b288 <sniprintf>:
 800b288:	b40c      	push	{r2, r3}
 800b28a:	b530      	push	{r4, r5, lr}
 800b28c:	4b17      	ldr	r3, [pc, #92]	@ (800b2ec <sniprintf+0x64>)
 800b28e:	1e0c      	subs	r4, r1, #0
 800b290:	681d      	ldr	r5, [r3, #0]
 800b292:	b09d      	sub	sp, #116	@ 0x74
 800b294:	da08      	bge.n	800b2a8 <sniprintf+0x20>
 800b296:	238b      	movs	r3, #139	@ 0x8b
 800b298:	f04f 30ff 	mov.w	r0, #4294967295
 800b29c:	602b      	str	r3, [r5, #0]
 800b29e:	b01d      	add	sp, #116	@ 0x74
 800b2a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2a4:	b002      	add	sp, #8
 800b2a6:	4770      	bx	lr
 800b2a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b2ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b2b0:	bf0c      	ite	eq
 800b2b2:	4623      	moveq	r3, r4
 800b2b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	9307      	str	r3, [sp, #28]
 800b2bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2c0:	9002      	str	r0, [sp, #8]
 800b2c2:	9006      	str	r0, [sp, #24]
 800b2c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	ab21      	add	r3, sp, #132	@ 0x84
 800b2cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b2ce:	a902      	add	r1, sp, #8
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	f001 fc8f 	bl	800cbf4 <_svfiprintf_r>
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	bfbc      	itt	lt
 800b2da:	238b      	movlt	r3, #139	@ 0x8b
 800b2dc:	602b      	strlt	r3, [r5, #0]
 800b2de:	2c00      	cmp	r4, #0
 800b2e0:	d0dd      	beq.n	800b29e <sniprintf+0x16>
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	9b02      	ldr	r3, [sp, #8]
 800b2e6:	701a      	strb	r2, [r3, #0]
 800b2e8:	e7d9      	b.n	800b29e <sniprintf+0x16>
 800b2ea:	bf00      	nop
 800b2ec:	2000003c 	.word	0x2000003c

0800b2f0 <siprintf>:
 800b2f0:	b40e      	push	{r1, r2, r3}
 800b2f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b2f6:	b500      	push	{lr}
 800b2f8:	b09c      	sub	sp, #112	@ 0x70
 800b2fa:	ab1d      	add	r3, sp, #116	@ 0x74
 800b2fc:	9002      	str	r0, [sp, #8]
 800b2fe:	9006      	str	r0, [sp, #24]
 800b300:	9107      	str	r1, [sp, #28]
 800b302:	9104      	str	r1, [sp, #16]
 800b304:	4808      	ldr	r0, [pc, #32]	@ (800b328 <siprintf+0x38>)
 800b306:	4909      	ldr	r1, [pc, #36]	@ (800b32c <siprintf+0x3c>)
 800b308:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30c:	9105      	str	r1, [sp, #20]
 800b30e:	6800      	ldr	r0, [r0, #0]
 800b310:	a902      	add	r1, sp, #8
 800b312:	9301      	str	r3, [sp, #4]
 800b314:	f001 fc6e 	bl	800cbf4 <_svfiprintf_r>
 800b318:	2200      	movs	r2, #0
 800b31a:	9b02      	ldr	r3, [sp, #8]
 800b31c:	701a      	strb	r2, [r3, #0]
 800b31e:	b01c      	add	sp, #112	@ 0x70
 800b320:	f85d eb04 	ldr.w	lr, [sp], #4
 800b324:	b003      	add	sp, #12
 800b326:	4770      	bx	lr
 800b328:	2000003c 	.word	0x2000003c
 800b32c:	ffff0208 	.word	0xffff0208

0800b330 <__sread>:
 800b330:	b510      	push	{r4, lr}
 800b332:	460c      	mov	r4, r1
 800b334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b338:	f000 f8c2 	bl	800b4c0 <_read_r>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	bfab      	itete	ge
 800b340:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b342:	89a3      	ldrhlt	r3, [r4, #12]
 800b344:	181b      	addge	r3, r3, r0
 800b346:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b34a:	bfac      	ite	ge
 800b34c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b34e:	81a3      	strhlt	r3, [r4, #12]
 800b350:	bd10      	pop	{r4, pc}

0800b352 <__swrite>:
 800b352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b356:	461f      	mov	r7, r3
 800b358:	898b      	ldrh	r3, [r1, #12]
 800b35a:	4605      	mov	r5, r0
 800b35c:	05db      	lsls	r3, r3, #23
 800b35e:	460c      	mov	r4, r1
 800b360:	4616      	mov	r6, r2
 800b362:	d505      	bpl.n	800b370 <__swrite+0x1e>
 800b364:	2302      	movs	r3, #2
 800b366:	2200      	movs	r2, #0
 800b368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36c:	f000 f896 	bl	800b49c <_lseek_r>
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	4632      	mov	r2, r6
 800b374:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b378:	81a3      	strh	r3, [r4, #12]
 800b37a:	4628      	mov	r0, r5
 800b37c:	463b      	mov	r3, r7
 800b37e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b386:	f000 b8ad 	b.w	800b4e4 <_write_r>

0800b38a <__sseek>:
 800b38a:	b510      	push	{r4, lr}
 800b38c:	460c      	mov	r4, r1
 800b38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b392:	f000 f883 	bl	800b49c <_lseek_r>
 800b396:	1c43      	adds	r3, r0, #1
 800b398:	89a3      	ldrh	r3, [r4, #12]
 800b39a:	bf15      	itete	ne
 800b39c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b39e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3a6:	81a3      	strheq	r3, [r4, #12]
 800b3a8:	bf18      	it	ne
 800b3aa:	81a3      	strhne	r3, [r4, #12]
 800b3ac:	bd10      	pop	{r4, pc}

0800b3ae <__sclose>:
 800b3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b2:	f000 b80d 	b.w	800b3d0 <_close_r>

0800b3b6 <memset>:
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	4402      	add	r2, r0
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d100      	bne.n	800b3c0 <memset+0xa>
 800b3be:	4770      	bx	lr
 800b3c0:	f803 1b01 	strb.w	r1, [r3], #1
 800b3c4:	e7f9      	b.n	800b3ba <memset+0x4>
	...

0800b3c8 <_localeconv_r>:
 800b3c8:	4800      	ldr	r0, [pc, #0]	@ (800b3cc <_localeconv_r+0x4>)
 800b3ca:	4770      	bx	lr
 800b3cc:	2000017c 	.word	0x2000017c

0800b3d0 <_close_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	4d05      	ldr	r5, [pc, #20]	@ (800b3ec <_close_r+0x1c>)
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4608      	mov	r0, r1
 800b3da:	602b      	str	r3, [r5, #0]
 800b3dc:	f7fb f941 	bl	8006662 <_close>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d102      	bne.n	800b3ea <_close_r+0x1a>
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	b103      	cbz	r3, 800b3ea <_close_r+0x1a>
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	20001650 	.word	0x20001650

0800b3f0 <_reclaim_reent>:
 800b3f0:	4b29      	ldr	r3, [pc, #164]	@ (800b498 <_reclaim_reent+0xa8>)
 800b3f2:	b570      	push	{r4, r5, r6, lr}
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	4283      	cmp	r3, r0
 800b3fa:	d04b      	beq.n	800b494 <_reclaim_reent+0xa4>
 800b3fc:	69c3      	ldr	r3, [r0, #28]
 800b3fe:	b1ab      	cbz	r3, 800b42c <_reclaim_reent+0x3c>
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	b16b      	cbz	r3, 800b420 <_reclaim_reent+0x30>
 800b404:	2500      	movs	r5, #0
 800b406:	69e3      	ldr	r3, [r4, #28]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	5959      	ldr	r1, [r3, r5]
 800b40c:	2900      	cmp	r1, #0
 800b40e:	d13b      	bne.n	800b488 <_reclaim_reent+0x98>
 800b410:	3504      	adds	r5, #4
 800b412:	2d80      	cmp	r5, #128	@ 0x80
 800b414:	d1f7      	bne.n	800b406 <_reclaim_reent+0x16>
 800b416:	69e3      	ldr	r3, [r4, #28]
 800b418:	4620      	mov	r0, r4
 800b41a:	68d9      	ldr	r1, [r3, #12]
 800b41c:	f000 ff10 	bl	800c240 <_free_r>
 800b420:	69e3      	ldr	r3, [r4, #28]
 800b422:	6819      	ldr	r1, [r3, #0]
 800b424:	b111      	cbz	r1, 800b42c <_reclaim_reent+0x3c>
 800b426:	4620      	mov	r0, r4
 800b428:	f000 ff0a 	bl	800c240 <_free_r>
 800b42c:	6961      	ldr	r1, [r4, #20]
 800b42e:	b111      	cbz	r1, 800b436 <_reclaim_reent+0x46>
 800b430:	4620      	mov	r0, r4
 800b432:	f000 ff05 	bl	800c240 <_free_r>
 800b436:	69e1      	ldr	r1, [r4, #28]
 800b438:	b111      	cbz	r1, 800b440 <_reclaim_reent+0x50>
 800b43a:	4620      	mov	r0, r4
 800b43c:	f000 ff00 	bl	800c240 <_free_r>
 800b440:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b442:	b111      	cbz	r1, 800b44a <_reclaim_reent+0x5a>
 800b444:	4620      	mov	r0, r4
 800b446:	f000 fefb 	bl	800c240 <_free_r>
 800b44a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b44c:	b111      	cbz	r1, 800b454 <_reclaim_reent+0x64>
 800b44e:	4620      	mov	r0, r4
 800b450:	f000 fef6 	bl	800c240 <_free_r>
 800b454:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b456:	b111      	cbz	r1, 800b45e <_reclaim_reent+0x6e>
 800b458:	4620      	mov	r0, r4
 800b45a:	f000 fef1 	bl	800c240 <_free_r>
 800b45e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b460:	b111      	cbz	r1, 800b468 <_reclaim_reent+0x78>
 800b462:	4620      	mov	r0, r4
 800b464:	f000 feec 	bl	800c240 <_free_r>
 800b468:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b46a:	b111      	cbz	r1, 800b472 <_reclaim_reent+0x82>
 800b46c:	4620      	mov	r0, r4
 800b46e:	f000 fee7 	bl	800c240 <_free_r>
 800b472:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b474:	b111      	cbz	r1, 800b47c <_reclaim_reent+0x8c>
 800b476:	4620      	mov	r0, r4
 800b478:	f000 fee2 	bl	800c240 <_free_r>
 800b47c:	6a23      	ldr	r3, [r4, #32]
 800b47e:	b14b      	cbz	r3, 800b494 <_reclaim_reent+0xa4>
 800b480:	4620      	mov	r0, r4
 800b482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b486:	4718      	bx	r3
 800b488:	680e      	ldr	r6, [r1, #0]
 800b48a:	4620      	mov	r0, r4
 800b48c:	f000 fed8 	bl	800c240 <_free_r>
 800b490:	4631      	mov	r1, r6
 800b492:	e7bb      	b.n	800b40c <_reclaim_reent+0x1c>
 800b494:	bd70      	pop	{r4, r5, r6, pc}
 800b496:	bf00      	nop
 800b498:	2000003c 	.word	0x2000003c

0800b49c <_lseek_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4604      	mov	r4, r0
 800b4a0:	4608      	mov	r0, r1
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	4d05      	ldr	r5, [pc, #20]	@ (800b4bc <_lseek_r+0x20>)
 800b4a8:	602a      	str	r2, [r5, #0]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	f7fb f8fd 	bl	80066aa <_lseek>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d102      	bne.n	800b4ba <_lseek_r+0x1e>
 800b4b4:	682b      	ldr	r3, [r5, #0]
 800b4b6:	b103      	cbz	r3, 800b4ba <_lseek_r+0x1e>
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	20001650 	.word	0x20001650

0800b4c0 <_read_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4d05      	ldr	r5, [pc, #20]	@ (800b4e0 <_read_r+0x20>)
 800b4cc:	602a      	str	r2, [r5, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f7fb f88e 	bl	80065f0 <_read>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d102      	bne.n	800b4de <_read_r+0x1e>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	b103      	cbz	r3, 800b4de <_read_r+0x1e>
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	20001650 	.word	0x20001650

0800b4e4 <_write_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	4608      	mov	r0, r1
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4d05      	ldr	r5, [pc, #20]	@ (800b504 <_write_r+0x20>)
 800b4f0:	602a      	str	r2, [r5, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	f7fb f899 	bl	800662a <_write>
 800b4f8:	1c43      	adds	r3, r0, #1
 800b4fa:	d102      	bne.n	800b502 <_write_r+0x1e>
 800b4fc:	682b      	ldr	r3, [r5, #0]
 800b4fe:	b103      	cbz	r3, 800b502 <_write_r+0x1e>
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	bd38      	pop	{r3, r4, r5, pc}
 800b504:	20001650 	.word	0x20001650

0800b508 <__errno>:
 800b508:	4b01      	ldr	r3, [pc, #4]	@ (800b510 <__errno+0x8>)
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	2000003c 	.word	0x2000003c

0800b514 <__libc_init_array>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	2600      	movs	r6, #0
 800b518:	4d0c      	ldr	r5, [pc, #48]	@ (800b54c <__libc_init_array+0x38>)
 800b51a:	4c0d      	ldr	r4, [pc, #52]	@ (800b550 <__libc_init_array+0x3c>)
 800b51c:	1b64      	subs	r4, r4, r5
 800b51e:	10a4      	asrs	r4, r4, #2
 800b520:	42a6      	cmp	r6, r4
 800b522:	d109      	bne.n	800b538 <__libc_init_array+0x24>
 800b524:	f002 f870 	bl	800d608 <_init>
 800b528:	2600      	movs	r6, #0
 800b52a:	4d0a      	ldr	r5, [pc, #40]	@ (800b554 <__libc_init_array+0x40>)
 800b52c:	4c0a      	ldr	r4, [pc, #40]	@ (800b558 <__libc_init_array+0x44>)
 800b52e:	1b64      	subs	r4, r4, r5
 800b530:	10a4      	asrs	r4, r4, #2
 800b532:	42a6      	cmp	r6, r4
 800b534:	d105      	bne.n	800b542 <__libc_init_array+0x2e>
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	f855 3b04 	ldr.w	r3, [r5], #4
 800b53c:	4798      	blx	r3
 800b53e:	3601      	adds	r6, #1
 800b540:	e7ee      	b.n	800b520 <__libc_init_array+0xc>
 800b542:	f855 3b04 	ldr.w	r3, [r5], #4
 800b546:	4798      	blx	r3
 800b548:	3601      	adds	r6, #1
 800b54a:	e7f2      	b.n	800b532 <__libc_init_array+0x1e>
 800b54c:	0800e3b0 	.word	0x0800e3b0
 800b550:	0800e3b0 	.word	0x0800e3b0
 800b554:	0800e3b0 	.word	0x0800e3b0
 800b558:	0800e3b4 	.word	0x0800e3b4

0800b55c <__retarget_lock_init_recursive>:
 800b55c:	4770      	bx	lr

0800b55e <__retarget_lock_acquire_recursive>:
 800b55e:	4770      	bx	lr

0800b560 <__retarget_lock_release_recursive>:
 800b560:	4770      	bx	lr

0800b562 <memchr>:
 800b562:	4603      	mov	r3, r0
 800b564:	b510      	push	{r4, lr}
 800b566:	b2c9      	uxtb	r1, r1
 800b568:	4402      	add	r2, r0
 800b56a:	4293      	cmp	r3, r2
 800b56c:	4618      	mov	r0, r3
 800b56e:	d101      	bne.n	800b574 <memchr+0x12>
 800b570:	2000      	movs	r0, #0
 800b572:	e003      	b.n	800b57c <memchr+0x1a>
 800b574:	7804      	ldrb	r4, [r0, #0]
 800b576:	3301      	adds	r3, #1
 800b578:	428c      	cmp	r4, r1
 800b57a:	d1f6      	bne.n	800b56a <memchr+0x8>
 800b57c:	bd10      	pop	{r4, pc}

0800b57e <memcpy>:
 800b57e:	440a      	add	r2, r1
 800b580:	4291      	cmp	r1, r2
 800b582:	f100 33ff 	add.w	r3, r0, #4294967295
 800b586:	d100      	bne.n	800b58a <memcpy+0xc>
 800b588:	4770      	bx	lr
 800b58a:	b510      	push	{r4, lr}
 800b58c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b590:	4291      	cmp	r1, r2
 800b592:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b596:	d1f9      	bne.n	800b58c <memcpy+0xe>
 800b598:	bd10      	pop	{r4, pc}

0800b59a <quorem>:
 800b59a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59e:	6903      	ldr	r3, [r0, #16]
 800b5a0:	690c      	ldr	r4, [r1, #16]
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	42a3      	cmp	r3, r4
 800b5a6:	db7e      	blt.n	800b6a6 <quorem+0x10c>
 800b5a8:	3c01      	subs	r4, #1
 800b5aa:	00a3      	lsls	r3, r4, #2
 800b5ac:	f100 0514 	add.w	r5, r0, #20
 800b5b0:	f101 0814 	add.w	r8, r1, #20
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5ba:	9301      	str	r3, [sp, #4]
 800b5bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5d0:	d32e      	bcc.n	800b630 <quorem+0x96>
 800b5d2:	f04f 0a00 	mov.w	sl, #0
 800b5d6:	46c4      	mov	ip, r8
 800b5d8:	46ae      	mov	lr, r5
 800b5da:	46d3      	mov	fp, sl
 800b5dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5e0:	b298      	uxth	r0, r3
 800b5e2:	fb06 a000 	mla	r0, r6, r0, sl
 800b5e6:	0c1b      	lsrs	r3, r3, #16
 800b5e8:	0c02      	lsrs	r2, r0, #16
 800b5ea:	fb06 2303 	mla	r3, r6, r3, r2
 800b5ee:	f8de 2000 	ldr.w	r2, [lr]
 800b5f2:	b280      	uxth	r0, r0
 800b5f4:	b292      	uxth	r2, r2
 800b5f6:	1a12      	subs	r2, r2, r0
 800b5f8:	445a      	add	r2, fp
 800b5fa:	f8de 0000 	ldr.w	r0, [lr]
 800b5fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b602:	b29b      	uxth	r3, r3
 800b604:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b608:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b60c:	b292      	uxth	r2, r2
 800b60e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b612:	45e1      	cmp	r9, ip
 800b614:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b618:	f84e 2b04 	str.w	r2, [lr], #4
 800b61c:	d2de      	bcs.n	800b5dc <quorem+0x42>
 800b61e:	9b00      	ldr	r3, [sp, #0]
 800b620:	58eb      	ldr	r3, [r5, r3]
 800b622:	b92b      	cbnz	r3, 800b630 <quorem+0x96>
 800b624:	9b01      	ldr	r3, [sp, #4]
 800b626:	3b04      	subs	r3, #4
 800b628:	429d      	cmp	r5, r3
 800b62a:	461a      	mov	r2, r3
 800b62c:	d32f      	bcc.n	800b68e <quorem+0xf4>
 800b62e:	613c      	str	r4, [r7, #16]
 800b630:	4638      	mov	r0, r7
 800b632:	f001 f97b 	bl	800c92c <__mcmp>
 800b636:	2800      	cmp	r0, #0
 800b638:	db25      	blt.n	800b686 <quorem+0xec>
 800b63a:	4629      	mov	r1, r5
 800b63c:	2000      	movs	r0, #0
 800b63e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b642:	f8d1 c000 	ldr.w	ip, [r1]
 800b646:	fa1f fe82 	uxth.w	lr, r2
 800b64a:	fa1f f38c 	uxth.w	r3, ip
 800b64e:	eba3 030e 	sub.w	r3, r3, lr
 800b652:	4403      	add	r3, r0
 800b654:	0c12      	lsrs	r2, r2, #16
 800b656:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b65a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b65e:	b29b      	uxth	r3, r3
 800b660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b664:	45c1      	cmp	r9, r8
 800b666:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b66a:	f841 3b04 	str.w	r3, [r1], #4
 800b66e:	d2e6      	bcs.n	800b63e <quorem+0xa4>
 800b670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b674:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b678:	b922      	cbnz	r2, 800b684 <quorem+0xea>
 800b67a:	3b04      	subs	r3, #4
 800b67c:	429d      	cmp	r5, r3
 800b67e:	461a      	mov	r2, r3
 800b680:	d30b      	bcc.n	800b69a <quorem+0x100>
 800b682:	613c      	str	r4, [r7, #16]
 800b684:	3601      	adds	r6, #1
 800b686:	4630      	mov	r0, r6
 800b688:	b003      	add	sp, #12
 800b68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68e:	6812      	ldr	r2, [r2, #0]
 800b690:	3b04      	subs	r3, #4
 800b692:	2a00      	cmp	r2, #0
 800b694:	d1cb      	bne.n	800b62e <quorem+0x94>
 800b696:	3c01      	subs	r4, #1
 800b698:	e7c6      	b.n	800b628 <quorem+0x8e>
 800b69a:	6812      	ldr	r2, [r2, #0]
 800b69c:	3b04      	subs	r3, #4
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	d1ef      	bne.n	800b682 <quorem+0xe8>
 800b6a2:	3c01      	subs	r4, #1
 800b6a4:	e7ea      	b.n	800b67c <quorem+0xe2>
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	e7ee      	b.n	800b688 <quorem+0xee>
 800b6aa:	0000      	movs	r0, r0
 800b6ac:	0000      	movs	r0, r0
	...

0800b6b0 <_dtoa_r>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	4614      	mov	r4, r2
 800b6b6:	461d      	mov	r5, r3
 800b6b8:	69c7      	ldr	r7, [r0, #28]
 800b6ba:	b097      	sub	sp, #92	@ 0x5c
 800b6bc:	4683      	mov	fp, r0
 800b6be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b6c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b6c4:	b97f      	cbnz	r7, 800b6e6 <_dtoa_r+0x36>
 800b6c6:	2010      	movs	r0, #16
 800b6c8:	f000 fe02 	bl	800c2d0 <malloc>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	f8cb 001c 	str.w	r0, [fp, #28]
 800b6d2:	b920      	cbnz	r0, 800b6de <_dtoa_r+0x2e>
 800b6d4:	21ef      	movs	r1, #239	@ 0xef
 800b6d6:	4ba8      	ldr	r3, [pc, #672]	@ (800b978 <_dtoa_r+0x2c8>)
 800b6d8:	48a8      	ldr	r0, [pc, #672]	@ (800b97c <_dtoa_r+0x2cc>)
 800b6da:	f001 fc59 	bl	800cf90 <__assert_func>
 800b6de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b6e2:	6007      	str	r7, [r0, #0]
 800b6e4:	60c7      	str	r7, [r0, #12]
 800b6e6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6ea:	6819      	ldr	r1, [r3, #0]
 800b6ec:	b159      	cbz	r1, 800b706 <_dtoa_r+0x56>
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	4093      	lsls	r3, r2
 800b6f4:	604a      	str	r2, [r1, #4]
 800b6f6:	608b      	str	r3, [r1, #8]
 800b6f8:	4658      	mov	r0, fp
 800b6fa:	f000 fedf 	bl	800c4bc <_Bfree>
 800b6fe:	2200      	movs	r2, #0
 800b700:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b704:	601a      	str	r2, [r3, #0]
 800b706:	1e2b      	subs	r3, r5, #0
 800b708:	bfaf      	iteee	ge
 800b70a:	2300      	movge	r3, #0
 800b70c:	2201      	movlt	r2, #1
 800b70e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b712:	9303      	strlt	r3, [sp, #12]
 800b714:	bfa8      	it	ge
 800b716:	6033      	strge	r3, [r6, #0]
 800b718:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b71c:	4b98      	ldr	r3, [pc, #608]	@ (800b980 <_dtoa_r+0x2d0>)
 800b71e:	bfb8      	it	lt
 800b720:	6032      	strlt	r2, [r6, #0]
 800b722:	ea33 0308 	bics.w	r3, r3, r8
 800b726:	d112      	bne.n	800b74e <_dtoa_r+0x9e>
 800b728:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b72c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b734:	4323      	orrs	r3, r4
 800b736:	f000 8550 	beq.w	800c1da <_dtoa_r+0xb2a>
 800b73a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b73c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b984 <_dtoa_r+0x2d4>
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 8552 	beq.w	800c1ea <_dtoa_r+0xb3a>
 800b746:	f10a 0303 	add.w	r3, sl, #3
 800b74a:	f000 bd4c 	b.w	800c1e6 <_dtoa_r+0xb36>
 800b74e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b752:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b75a:	2200      	movs	r2, #0
 800b75c:	2300      	movs	r3, #0
 800b75e:	f7f5 f993 	bl	8000a88 <__aeabi_dcmpeq>
 800b762:	4607      	mov	r7, r0
 800b764:	b158      	cbz	r0, 800b77e <_dtoa_r+0xce>
 800b766:	2301      	movs	r3, #1
 800b768:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b76a:	6013      	str	r3, [r2, #0]
 800b76c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b76e:	b113      	cbz	r3, 800b776 <_dtoa_r+0xc6>
 800b770:	4b85      	ldr	r3, [pc, #532]	@ (800b988 <_dtoa_r+0x2d8>)
 800b772:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b774:	6013      	str	r3, [r2, #0]
 800b776:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b98c <_dtoa_r+0x2dc>
 800b77a:	f000 bd36 	b.w	800c1ea <_dtoa_r+0xb3a>
 800b77e:	ab14      	add	r3, sp, #80	@ 0x50
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	ab15      	add	r3, sp, #84	@ 0x54
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	4658      	mov	r0, fp
 800b788:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b78c:	f001 f97e 	bl	800ca8c <__d2b>
 800b790:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b794:	4681      	mov	r9, r0
 800b796:	2e00      	cmp	r6, #0
 800b798:	d077      	beq.n	800b88a <_dtoa_r+0x1da>
 800b79a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b79e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7a0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b7a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7a8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b7ac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b7b0:	9712      	str	r7, [sp, #72]	@ 0x48
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	4b76      	ldr	r3, [pc, #472]	@ (800b990 <_dtoa_r+0x2e0>)
 800b7b8:	f7f4 fd46 	bl	8000248 <__aeabi_dsub>
 800b7bc:	a368      	add	r3, pc, #416	@ (adr r3, 800b960 <_dtoa_r+0x2b0>)
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	f7f4 fef9 	bl	80005b8 <__aeabi_dmul>
 800b7c6:	a368      	add	r3, pc, #416	@ (adr r3, 800b968 <_dtoa_r+0x2b8>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	f7f4 fd3e 	bl	800024c <__adddf3>
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	460d      	mov	r5, r1
 800b7d6:	f7f4 fe85 	bl	80004e4 <__aeabi_i2d>
 800b7da:	a365      	add	r3, pc, #404	@ (adr r3, 800b970 <_dtoa_r+0x2c0>)
 800b7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e0:	f7f4 feea 	bl	80005b8 <__aeabi_dmul>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	f7f4 fd2e 	bl	800024c <__adddf3>
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	460d      	mov	r5, r1
 800b7f4:	f7f5 f990 	bl	8000b18 <__aeabi_d2iz>
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4607      	mov	r7, r0
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	4620      	mov	r0, r4
 800b800:	4629      	mov	r1, r5
 800b802:	f7f5 f94b 	bl	8000a9c <__aeabi_dcmplt>
 800b806:	b140      	cbz	r0, 800b81a <_dtoa_r+0x16a>
 800b808:	4638      	mov	r0, r7
 800b80a:	f7f4 fe6b 	bl	80004e4 <__aeabi_i2d>
 800b80e:	4622      	mov	r2, r4
 800b810:	462b      	mov	r3, r5
 800b812:	f7f5 f939 	bl	8000a88 <__aeabi_dcmpeq>
 800b816:	b900      	cbnz	r0, 800b81a <_dtoa_r+0x16a>
 800b818:	3f01      	subs	r7, #1
 800b81a:	2f16      	cmp	r7, #22
 800b81c:	d853      	bhi.n	800b8c6 <_dtoa_r+0x216>
 800b81e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b822:	4b5c      	ldr	r3, [pc, #368]	@ (800b994 <_dtoa_r+0x2e4>)
 800b824:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f7f5 f936 	bl	8000a9c <__aeabi_dcmplt>
 800b830:	2800      	cmp	r0, #0
 800b832:	d04a      	beq.n	800b8ca <_dtoa_r+0x21a>
 800b834:	2300      	movs	r3, #0
 800b836:	3f01      	subs	r7, #1
 800b838:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b83a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b83c:	1b9b      	subs	r3, r3, r6
 800b83e:	1e5a      	subs	r2, r3, #1
 800b840:	bf46      	itte	mi
 800b842:	f1c3 0801 	rsbmi	r8, r3, #1
 800b846:	2300      	movmi	r3, #0
 800b848:	f04f 0800 	movpl.w	r8, #0
 800b84c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b84e:	bf48      	it	mi
 800b850:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b852:	2f00      	cmp	r7, #0
 800b854:	db3b      	blt.n	800b8ce <_dtoa_r+0x21e>
 800b856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b858:	970e      	str	r7, [sp, #56]	@ 0x38
 800b85a:	443b      	add	r3, r7
 800b85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b85e:	2300      	movs	r3, #0
 800b860:	930a      	str	r3, [sp, #40]	@ 0x28
 800b862:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b864:	2b09      	cmp	r3, #9
 800b866:	d866      	bhi.n	800b936 <_dtoa_r+0x286>
 800b868:	2b05      	cmp	r3, #5
 800b86a:	bfc4      	itt	gt
 800b86c:	3b04      	subgt	r3, #4
 800b86e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b870:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b872:	bfc8      	it	gt
 800b874:	2400      	movgt	r4, #0
 800b876:	f1a3 0302 	sub.w	r3, r3, #2
 800b87a:	bfd8      	it	le
 800b87c:	2401      	movle	r4, #1
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d864      	bhi.n	800b94c <_dtoa_r+0x29c>
 800b882:	e8df f003 	tbb	[pc, r3]
 800b886:	382b      	.short	0x382b
 800b888:	5636      	.short	0x5636
 800b88a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b88e:	441e      	add	r6, r3
 800b890:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b894:	2b20      	cmp	r3, #32
 800b896:	bfc1      	itttt	gt
 800b898:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b89c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b8a0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b8a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b8a8:	bfd6      	itet	le
 800b8aa:	f1c3 0320 	rsble	r3, r3, #32
 800b8ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800b8b2:	fa04 f003 	lslle.w	r0, r4, r3
 800b8b6:	f7f4 fe05 	bl	80004c4 <__aeabi_ui2d>
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b8c0:	3e01      	subs	r6, #1
 800b8c2:	9212      	str	r2, [sp, #72]	@ 0x48
 800b8c4:	e775      	b.n	800b7b2 <_dtoa_r+0x102>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e7b6      	b.n	800b838 <_dtoa_r+0x188>
 800b8ca:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b8cc:	e7b5      	b.n	800b83a <_dtoa_r+0x18a>
 800b8ce:	427b      	negs	r3, r7
 800b8d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	eba8 0807 	sub.w	r8, r8, r7
 800b8d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b8da:	e7c2      	b.n	800b862 <_dtoa_r+0x1b2>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	dc35      	bgt.n	800b952 <_dtoa_r+0x2a2>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b8ee:	9221      	str	r2, [sp, #132]	@ 0x84
 800b8f0:	e00b      	b.n	800b90a <_dtoa_r+0x25a>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e7f3      	b.n	800b8de <_dtoa_r+0x22e>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8fc:	18fb      	adds	r3, r7, r3
 800b8fe:	9308      	str	r3, [sp, #32]
 800b900:	3301      	adds	r3, #1
 800b902:	2b01      	cmp	r3, #1
 800b904:	9307      	str	r3, [sp, #28]
 800b906:	bfb8      	it	lt
 800b908:	2301      	movlt	r3, #1
 800b90a:	2100      	movs	r1, #0
 800b90c:	2204      	movs	r2, #4
 800b90e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b912:	f102 0514 	add.w	r5, r2, #20
 800b916:	429d      	cmp	r5, r3
 800b918:	d91f      	bls.n	800b95a <_dtoa_r+0x2aa>
 800b91a:	6041      	str	r1, [r0, #4]
 800b91c:	4658      	mov	r0, fp
 800b91e:	f000 fd8d 	bl	800c43c <_Balloc>
 800b922:	4682      	mov	sl, r0
 800b924:	2800      	cmp	r0, #0
 800b926:	d139      	bne.n	800b99c <_dtoa_r+0x2ec>
 800b928:	4602      	mov	r2, r0
 800b92a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b92e:	4b1a      	ldr	r3, [pc, #104]	@ (800b998 <_dtoa_r+0x2e8>)
 800b930:	e6d2      	b.n	800b6d8 <_dtoa_r+0x28>
 800b932:	2301      	movs	r3, #1
 800b934:	e7e0      	b.n	800b8f8 <_dtoa_r+0x248>
 800b936:	2401      	movs	r4, #1
 800b938:	2300      	movs	r3, #0
 800b93a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b93c:	9320      	str	r3, [sp, #128]	@ 0x80
 800b93e:	f04f 33ff 	mov.w	r3, #4294967295
 800b942:	2200      	movs	r2, #0
 800b944:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b948:	2312      	movs	r3, #18
 800b94a:	e7d0      	b.n	800b8ee <_dtoa_r+0x23e>
 800b94c:	2301      	movs	r3, #1
 800b94e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b950:	e7f5      	b.n	800b93e <_dtoa_r+0x28e>
 800b952:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b954:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b958:	e7d7      	b.n	800b90a <_dtoa_r+0x25a>
 800b95a:	3101      	adds	r1, #1
 800b95c:	0052      	lsls	r2, r2, #1
 800b95e:	e7d8      	b.n	800b912 <_dtoa_r+0x262>
 800b960:	636f4361 	.word	0x636f4361
 800b964:	3fd287a7 	.word	0x3fd287a7
 800b968:	8b60c8b3 	.word	0x8b60c8b3
 800b96c:	3fc68a28 	.word	0x3fc68a28
 800b970:	509f79fb 	.word	0x509f79fb
 800b974:	3fd34413 	.word	0x3fd34413
 800b978:	0800e077 	.word	0x0800e077
 800b97c:	0800e08e 	.word	0x0800e08e
 800b980:	7ff00000 	.word	0x7ff00000
 800b984:	0800e073 	.word	0x0800e073
 800b988:	0800e047 	.word	0x0800e047
 800b98c:	0800e046 	.word	0x0800e046
 800b990:	3ff80000 	.word	0x3ff80000
 800b994:	0800e188 	.word	0x0800e188
 800b998:	0800e0e6 	.word	0x0800e0e6
 800b99c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b9a0:	6018      	str	r0, [r3, #0]
 800b9a2:	9b07      	ldr	r3, [sp, #28]
 800b9a4:	2b0e      	cmp	r3, #14
 800b9a6:	f200 80a4 	bhi.w	800baf2 <_dtoa_r+0x442>
 800b9aa:	2c00      	cmp	r4, #0
 800b9ac:	f000 80a1 	beq.w	800baf2 <_dtoa_r+0x442>
 800b9b0:	2f00      	cmp	r7, #0
 800b9b2:	dd33      	ble.n	800ba1c <_dtoa_r+0x36c>
 800b9b4:	4b86      	ldr	r3, [pc, #536]	@ (800bbd0 <_dtoa_r+0x520>)
 800b9b6:	f007 020f 	and.w	r2, r7, #15
 800b9ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9be:	05f8      	lsls	r0, r7, #23
 800b9c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b9c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b9cc:	d516      	bpl.n	800b9fc <_dtoa_r+0x34c>
 800b9ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9d2:	4b80      	ldr	r3, [pc, #512]	@ (800bbd4 <_dtoa_r+0x524>)
 800b9d4:	2603      	movs	r6, #3
 800b9d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9da:	f7f4 ff17 	bl	800080c <__aeabi_ddiv>
 800b9de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e2:	f004 040f 	and.w	r4, r4, #15
 800b9e6:	4d7b      	ldr	r5, [pc, #492]	@ (800bbd4 <_dtoa_r+0x524>)
 800b9e8:	b954      	cbnz	r4, 800ba00 <_dtoa_r+0x350>
 800b9ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f2:	f7f4 ff0b 	bl	800080c <__aeabi_ddiv>
 800b9f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9fa:	e028      	b.n	800ba4e <_dtoa_r+0x39e>
 800b9fc:	2602      	movs	r6, #2
 800b9fe:	e7f2      	b.n	800b9e6 <_dtoa_r+0x336>
 800ba00:	07e1      	lsls	r1, r4, #31
 800ba02:	d508      	bpl.n	800ba16 <_dtoa_r+0x366>
 800ba04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba0c:	f7f4 fdd4 	bl	80005b8 <__aeabi_dmul>
 800ba10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba14:	3601      	adds	r6, #1
 800ba16:	1064      	asrs	r4, r4, #1
 800ba18:	3508      	adds	r5, #8
 800ba1a:	e7e5      	b.n	800b9e8 <_dtoa_r+0x338>
 800ba1c:	f000 80d2 	beq.w	800bbc4 <_dtoa_r+0x514>
 800ba20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba24:	427c      	negs	r4, r7
 800ba26:	4b6a      	ldr	r3, [pc, #424]	@ (800bbd0 <_dtoa_r+0x520>)
 800ba28:	f004 020f 	and.w	r2, r4, #15
 800ba2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	f7f4 fdc0 	bl	80005b8 <__aeabi_dmul>
 800ba38:	2602      	movs	r6, #2
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba40:	4d64      	ldr	r5, [pc, #400]	@ (800bbd4 <_dtoa_r+0x524>)
 800ba42:	1124      	asrs	r4, r4, #4
 800ba44:	2c00      	cmp	r4, #0
 800ba46:	f040 80b2 	bne.w	800bbae <_dtoa_r+0x4fe>
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1d3      	bne.n	800b9f6 <_dtoa_r+0x346>
 800ba4e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 80b7 	beq.w	800bbc8 <_dtoa_r+0x518>
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	4b5d      	ldr	r3, [pc, #372]	@ (800bbd8 <_dtoa_r+0x528>)
 800ba62:	f7f5 f81b 	bl	8000a9c <__aeabi_dcmplt>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f000 80ae 	beq.w	800bbc8 <_dtoa_r+0x518>
 800ba6c:	9b07      	ldr	r3, [sp, #28]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f000 80aa 	beq.w	800bbc8 <_dtoa_r+0x518>
 800ba74:	9b08      	ldr	r3, [sp, #32]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	dd37      	ble.n	800baea <_dtoa_r+0x43a>
 800ba7a:	1e7b      	subs	r3, r7, #1
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	2200      	movs	r2, #0
 800ba82:	4629      	mov	r1, r5
 800ba84:	4b55      	ldr	r3, [pc, #340]	@ (800bbdc <_dtoa_r+0x52c>)
 800ba86:	f7f4 fd97 	bl	80005b8 <__aeabi_dmul>
 800ba8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba8e:	9c08      	ldr	r4, [sp, #32]
 800ba90:	3601      	adds	r6, #1
 800ba92:	4630      	mov	r0, r6
 800ba94:	f7f4 fd26 	bl	80004e4 <__aeabi_i2d>
 800ba98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba9c:	f7f4 fd8c 	bl	80005b8 <__aeabi_dmul>
 800baa0:	2200      	movs	r2, #0
 800baa2:	4b4f      	ldr	r3, [pc, #316]	@ (800bbe0 <_dtoa_r+0x530>)
 800baa4:	f7f4 fbd2 	bl	800024c <__adddf3>
 800baa8:	4605      	mov	r5, r0
 800baaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800baae:	2c00      	cmp	r4, #0
 800bab0:	f040 809a 	bne.w	800bbe8 <_dtoa_r+0x538>
 800bab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bab8:	2200      	movs	r2, #0
 800baba:	4b4a      	ldr	r3, [pc, #296]	@ (800bbe4 <_dtoa_r+0x534>)
 800babc:	f7f4 fbc4 	bl	8000248 <__aeabi_dsub>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bac8:	462a      	mov	r2, r5
 800baca:	4633      	mov	r3, r6
 800bacc:	f7f5 f804 	bl	8000ad8 <__aeabi_dcmpgt>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	f040 828e 	bne.w	800bff2 <_dtoa_r+0x942>
 800bad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bada:	462a      	mov	r2, r5
 800badc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bae0:	f7f4 ffdc 	bl	8000a9c <__aeabi_dcmplt>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	f040 8127 	bne.w	800bd38 <_dtoa_r+0x688>
 800baea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800baee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800baf2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f2c0 8163 	blt.w	800bdc0 <_dtoa_r+0x710>
 800bafa:	2f0e      	cmp	r7, #14
 800bafc:	f300 8160 	bgt.w	800bdc0 <_dtoa_r+0x710>
 800bb00:	4b33      	ldr	r3, [pc, #204]	@ (800bbd0 <_dtoa_r+0x520>)
 800bb02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb06:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bb0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	da03      	bge.n	800bb1c <_dtoa_r+0x46c>
 800bb14:	9b07      	ldr	r3, [sp, #28]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f340 8100 	ble.w	800bd1c <_dtoa_r+0x66c>
 800bb1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb20:	4656      	mov	r6, sl
 800bb22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb26:	4620      	mov	r0, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	f7f4 fe6f 	bl	800080c <__aeabi_ddiv>
 800bb2e:	f7f4 fff3 	bl	8000b18 <__aeabi_d2iz>
 800bb32:	4680      	mov	r8, r0
 800bb34:	f7f4 fcd6 	bl	80004e4 <__aeabi_i2d>
 800bb38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb3c:	f7f4 fd3c 	bl	80005b8 <__aeabi_dmul>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4620      	mov	r0, r4
 800bb46:	4629      	mov	r1, r5
 800bb48:	f7f4 fb7e 	bl	8000248 <__aeabi_dsub>
 800bb4c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bb50:	9d07      	ldr	r5, [sp, #28]
 800bb52:	f806 4b01 	strb.w	r4, [r6], #1
 800bb56:	eba6 040a 	sub.w	r4, r6, sl
 800bb5a:	42a5      	cmp	r5, r4
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	f040 8116 	bne.w	800bd90 <_dtoa_r+0x6e0>
 800bb64:	f7f4 fb72 	bl	800024c <__adddf3>
 800bb68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	460d      	mov	r5, r1
 800bb70:	f7f4 ffb2 	bl	8000ad8 <__aeabi_dcmpgt>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	f040 80f8 	bne.w	800bd6a <_dtoa_r+0x6ba>
 800bb7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb7e:	4620      	mov	r0, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	f7f4 ff81 	bl	8000a88 <__aeabi_dcmpeq>
 800bb86:	b118      	cbz	r0, 800bb90 <_dtoa_r+0x4e0>
 800bb88:	f018 0f01 	tst.w	r8, #1
 800bb8c:	f040 80ed 	bne.w	800bd6a <_dtoa_r+0x6ba>
 800bb90:	4649      	mov	r1, r9
 800bb92:	4658      	mov	r0, fp
 800bb94:	f000 fc92 	bl	800c4bc <_Bfree>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	7033      	strb	r3, [r6, #0]
 800bb9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bb9e:	3701      	adds	r7, #1
 800bba0:	601f      	str	r7, [r3, #0]
 800bba2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 8320 	beq.w	800c1ea <_dtoa_r+0xb3a>
 800bbaa:	601e      	str	r6, [r3, #0]
 800bbac:	e31d      	b.n	800c1ea <_dtoa_r+0xb3a>
 800bbae:	07e2      	lsls	r2, r4, #31
 800bbb0:	d505      	bpl.n	800bbbe <_dtoa_r+0x50e>
 800bbb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbb6:	f7f4 fcff 	bl	80005b8 <__aeabi_dmul>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	3601      	adds	r6, #1
 800bbbe:	1064      	asrs	r4, r4, #1
 800bbc0:	3508      	adds	r5, #8
 800bbc2:	e73f      	b.n	800ba44 <_dtoa_r+0x394>
 800bbc4:	2602      	movs	r6, #2
 800bbc6:	e742      	b.n	800ba4e <_dtoa_r+0x39e>
 800bbc8:	9c07      	ldr	r4, [sp, #28]
 800bbca:	9704      	str	r7, [sp, #16]
 800bbcc:	e761      	b.n	800ba92 <_dtoa_r+0x3e2>
 800bbce:	bf00      	nop
 800bbd0:	0800e188 	.word	0x0800e188
 800bbd4:	0800e160 	.word	0x0800e160
 800bbd8:	3ff00000 	.word	0x3ff00000
 800bbdc:	40240000 	.word	0x40240000
 800bbe0:	401c0000 	.word	0x401c0000
 800bbe4:	40140000 	.word	0x40140000
 800bbe8:	4b70      	ldr	r3, [pc, #448]	@ (800bdac <_dtoa_r+0x6fc>)
 800bbea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bbf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbf4:	4454      	add	r4, sl
 800bbf6:	2900      	cmp	r1, #0
 800bbf8:	d045      	beq.n	800bc86 <_dtoa_r+0x5d6>
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	496c      	ldr	r1, [pc, #432]	@ (800bdb0 <_dtoa_r+0x700>)
 800bbfe:	f7f4 fe05 	bl	800080c <__aeabi_ddiv>
 800bc02:	4633      	mov	r3, r6
 800bc04:	462a      	mov	r2, r5
 800bc06:	f7f4 fb1f 	bl	8000248 <__aeabi_dsub>
 800bc0a:	4656      	mov	r6, sl
 800bc0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc14:	f7f4 ff80 	bl	8000b18 <__aeabi_d2iz>
 800bc18:	4605      	mov	r5, r0
 800bc1a:	f7f4 fc63 	bl	80004e4 <__aeabi_i2d>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc26:	f7f4 fb0f 	bl	8000248 <__aeabi_dsub>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	3530      	adds	r5, #48	@ 0x30
 800bc30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc38:	f806 5b01 	strb.w	r5, [r6], #1
 800bc3c:	f7f4 ff2e 	bl	8000a9c <__aeabi_dcmplt>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d163      	bne.n	800bd0c <_dtoa_r+0x65c>
 800bc44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc48:	2000      	movs	r0, #0
 800bc4a:	495a      	ldr	r1, [pc, #360]	@ (800bdb4 <_dtoa_r+0x704>)
 800bc4c:	f7f4 fafc 	bl	8000248 <__aeabi_dsub>
 800bc50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc54:	f7f4 ff22 	bl	8000a9c <__aeabi_dcmplt>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	f040 8087 	bne.w	800bd6c <_dtoa_r+0x6bc>
 800bc5e:	42a6      	cmp	r6, r4
 800bc60:	f43f af43 	beq.w	800baea <_dtoa_r+0x43a>
 800bc64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc68:	2200      	movs	r2, #0
 800bc6a:	4b53      	ldr	r3, [pc, #332]	@ (800bdb8 <_dtoa_r+0x708>)
 800bc6c:	f7f4 fca4 	bl	80005b8 <__aeabi_dmul>
 800bc70:	2200      	movs	r2, #0
 800bc72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7a:	4b4f      	ldr	r3, [pc, #316]	@ (800bdb8 <_dtoa_r+0x708>)
 800bc7c:	f7f4 fc9c 	bl	80005b8 <__aeabi_dmul>
 800bc80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc84:	e7c4      	b.n	800bc10 <_dtoa_r+0x560>
 800bc86:	4631      	mov	r1, r6
 800bc88:	4628      	mov	r0, r5
 800bc8a:	f7f4 fc95 	bl	80005b8 <__aeabi_dmul>
 800bc8e:	4656      	mov	r6, sl
 800bc90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc94:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bc96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc9a:	f7f4 ff3d 	bl	8000b18 <__aeabi_d2iz>
 800bc9e:	4605      	mov	r5, r0
 800bca0:	f7f4 fc20 	bl	80004e4 <__aeabi_i2d>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcac:	f7f4 facc 	bl	8000248 <__aeabi_dsub>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	3530      	adds	r5, #48	@ 0x30
 800bcb6:	f806 5b01 	strb.w	r5, [r6], #1
 800bcba:	42a6      	cmp	r6, r4
 800bcbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcc0:	f04f 0200 	mov.w	r2, #0
 800bcc4:	d124      	bne.n	800bd10 <_dtoa_r+0x660>
 800bcc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcca:	4b39      	ldr	r3, [pc, #228]	@ (800bdb0 <_dtoa_r+0x700>)
 800bccc:	f7f4 fabe 	bl	800024c <__adddf3>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcd8:	f7f4 fefe 	bl	8000ad8 <__aeabi_dcmpgt>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d145      	bne.n	800bd6c <_dtoa_r+0x6bc>
 800bce0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bce4:	2000      	movs	r0, #0
 800bce6:	4932      	ldr	r1, [pc, #200]	@ (800bdb0 <_dtoa_r+0x700>)
 800bce8:	f7f4 faae 	bl	8000248 <__aeabi_dsub>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcf4:	f7f4 fed2 	bl	8000a9c <__aeabi_dcmplt>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	f43f aef6 	beq.w	800baea <_dtoa_r+0x43a>
 800bcfe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bd00:	1e73      	subs	r3, r6, #1
 800bd02:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd08:	2b30      	cmp	r3, #48	@ 0x30
 800bd0a:	d0f8      	beq.n	800bcfe <_dtoa_r+0x64e>
 800bd0c:	9f04      	ldr	r7, [sp, #16]
 800bd0e:	e73f      	b.n	800bb90 <_dtoa_r+0x4e0>
 800bd10:	4b29      	ldr	r3, [pc, #164]	@ (800bdb8 <_dtoa_r+0x708>)
 800bd12:	f7f4 fc51 	bl	80005b8 <__aeabi_dmul>
 800bd16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd1a:	e7bc      	b.n	800bc96 <_dtoa_r+0x5e6>
 800bd1c:	d10c      	bne.n	800bd38 <_dtoa_r+0x688>
 800bd1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd22:	2200      	movs	r2, #0
 800bd24:	4b25      	ldr	r3, [pc, #148]	@ (800bdbc <_dtoa_r+0x70c>)
 800bd26:	f7f4 fc47 	bl	80005b8 <__aeabi_dmul>
 800bd2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd2e:	f7f4 fec9 	bl	8000ac4 <__aeabi_dcmpge>
 800bd32:	2800      	cmp	r0, #0
 800bd34:	f000 815b 	beq.w	800bfee <_dtoa_r+0x93e>
 800bd38:	2400      	movs	r4, #0
 800bd3a:	4625      	mov	r5, r4
 800bd3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd3e:	4656      	mov	r6, sl
 800bd40:	43db      	mvns	r3, r3
 800bd42:	9304      	str	r3, [sp, #16]
 800bd44:	2700      	movs	r7, #0
 800bd46:	4621      	mov	r1, r4
 800bd48:	4658      	mov	r0, fp
 800bd4a:	f000 fbb7 	bl	800c4bc <_Bfree>
 800bd4e:	2d00      	cmp	r5, #0
 800bd50:	d0dc      	beq.n	800bd0c <_dtoa_r+0x65c>
 800bd52:	b12f      	cbz	r7, 800bd60 <_dtoa_r+0x6b0>
 800bd54:	42af      	cmp	r7, r5
 800bd56:	d003      	beq.n	800bd60 <_dtoa_r+0x6b0>
 800bd58:	4639      	mov	r1, r7
 800bd5a:	4658      	mov	r0, fp
 800bd5c:	f000 fbae 	bl	800c4bc <_Bfree>
 800bd60:	4629      	mov	r1, r5
 800bd62:	4658      	mov	r0, fp
 800bd64:	f000 fbaa 	bl	800c4bc <_Bfree>
 800bd68:	e7d0      	b.n	800bd0c <_dtoa_r+0x65c>
 800bd6a:	9704      	str	r7, [sp, #16]
 800bd6c:	4633      	mov	r3, r6
 800bd6e:	461e      	mov	r6, r3
 800bd70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd74:	2a39      	cmp	r2, #57	@ 0x39
 800bd76:	d107      	bne.n	800bd88 <_dtoa_r+0x6d8>
 800bd78:	459a      	cmp	sl, r3
 800bd7a:	d1f8      	bne.n	800bd6e <_dtoa_r+0x6be>
 800bd7c:	9a04      	ldr	r2, [sp, #16]
 800bd7e:	3201      	adds	r2, #1
 800bd80:	9204      	str	r2, [sp, #16]
 800bd82:	2230      	movs	r2, #48	@ 0x30
 800bd84:	f88a 2000 	strb.w	r2, [sl]
 800bd88:	781a      	ldrb	r2, [r3, #0]
 800bd8a:	3201      	adds	r2, #1
 800bd8c:	701a      	strb	r2, [r3, #0]
 800bd8e:	e7bd      	b.n	800bd0c <_dtoa_r+0x65c>
 800bd90:	2200      	movs	r2, #0
 800bd92:	4b09      	ldr	r3, [pc, #36]	@ (800bdb8 <_dtoa_r+0x708>)
 800bd94:	f7f4 fc10 	bl	80005b8 <__aeabi_dmul>
 800bd98:	2200      	movs	r2, #0
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	460d      	mov	r5, r1
 800bda0:	f7f4 fe72 	bl	8000a88 <__aeabi_dcmpeq>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f43f aebc 	beq.w	800bb22 <_dtoa_r+0x472>
 800bdaa:	e6f1      	b.n	800bb90 <_dtoa_r+0x4e0>
 800bdac:	0800e188 	.word	0x0800e188
 800bdb0:	3fe00000 	.word	0x3fe00000
 800bdb4:	3ff00000 	.word	0x3ff00000
 800bdb8:	40240000 	.word	0x40240000
 800bdbc:	40140000 	.word	0x40140000
 800bdc0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bdc2:	2a00      	cmp	r2, #0
 800bdc4:	f000 80db 	beq.w	800bf7e <_dtoa_r+0x8ce>
 800bdc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bdca:	2a01      	cmp	r2, #1
 800bdcc:	f300 80bf 	bgt.w	800bf4e <_dtoa_r+0x89e>
 800bdd0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bdd2:	2a00      	cmp	r2, #0
 800bdd4:	f000 80b7 	beq.w	800bf46 <_dtoa_r+0x896>
 800bdd8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bddc:	4646      	mov	r6, r8
 800bdde:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bde0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bde2:	2101      	movs	r1, #1
 800bde4:	441a      	add	r2, r3
 800bde6:	4658      	mov	r0, fp
 800bde8:	4498      	add	r8, r3
 800bdea:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdec:	f000 fc1a 	bl	800c624 <__i2b>
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	b15e      	cbz	r6, 800be0c <_dtoa_r+0x75c>
 800bdf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dd08      	ble.n	800be0c <_dtoa_r+0x75c>
 800bdfa:	42b3      	cmp	r3, r6
 800bdfc:	bfa8      	it	ge
 800bdfe:	4633      	movge	r3, r6
 800be00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be02:	eba8 0803 	sub.w	r8, r8, r3
 800be06:	1af6      	subs	r6, r6, r3
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800be0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be0e:	b1f3      	cbz	r3, 800be4e <_dtoa_r+0x79e>
 800be10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 80b7 	beq.w	800bf86 <_dtoa_r+0x8d6>
 800be18:	b18c      	cbz	r4, 800be3e <_dtoa_r+0x78e>
 800be1a:	4629      	mov	r1, r5
 800be1c:	4622      	mov	r2, r4
 800be1e:	4658      	mov	r0, fp
 800be20:	f000 fcbe 	bl	800c7a0 <__pow5mult>
 800be24:	464a      	mov	r2, r9
 800be26:	4601      	mov	r1, r0
 800be28:	4605      	mov	r5, r0
 800be2a:	4658      	mov	r0, fp
 800be2c:	f000 fc10 	bl	800c650 <__multiply>
 800be30:	4649      	mov	r1, r9
 800be32:	9004      	str	r0, [sp, #16]
 800be34:	4658      	mov	r0, fp
 800be36:	f000 fb41 	bl	800c4bc <_Bfree>
 800be3a:	9b04      	ldr	r3, [sp, #16]
 800be3c:	4699      	mov	r9, r3
 800be3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be40:	1b1a      	subs	r2, r3, r4
 800be42:	d004      	beq.n	800be4e <_dtoa_r+0x79e>
 800be44:	4649      	mov	r1, r9
 800be46:	4658      	mov	r0, fp
 800be48:	f000 fcaa 	bl	800c7a0 <__pow5mult>
 800be4c:	4681      	mov	r9, r0
 800be4e:	2101      	movs	r1, #1
 800be50:	4658      	mov	r0, fp
 800be52:	f000 fbe7 	bl	800c624 <__i2b>
 800be56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be58:	4604      	mov	r4, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 81c9 	beq.w	800c1f2 <_dtoa_r+0xb42>
 800be60:	461a      	mov	r2, r3
 800be62:	4601      	mov	r1, r0
 800be64:	4658      	mov	r0, fp
 800be66:	f000 fc9b 	bl	800c7a0 <__pow5mult>
 800be6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be6c:	4604      	mov	r4, r0
 800be6e:	2b01      	cmp	r3, #1
 800be70:	f300 808f 	bgt.w	800bf92 <_dtoa_r+0x8e2>
 800be74:	9b02      	ldr	r3, [sp, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	f040 8087 	bne.w	800bf8a <_dtoa_r+0x8da>
 800be7c:	9b03      	ldr	r3, [sp, #12]
 800be7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be82:	2b00      	cmp	r3, #0
 800be84:	f040 8083 	bne.w	800bf8e <_dtoa_r+0x8de>
 800be88:	9b03      	ldr	r3, [sp, #12]
 800be8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be8e:	0d1b      	lsrs	r3, r3, #20
 800be90:	051b      	lsls	r3, r3, #20
 800be92:	b12b      	cbz	r3, 800bea0 <_dtoa_r+0x7f0>
 800be94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be96:	f108 0801 	add.w	r8, r8, #1
 800be9a:	3301      	adds	r3, #1
 800be9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be9e:	2301      	movs	r3, #1
 800bea0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	f000 81aa 	beq.w	800c1fe <_dtoa_r+0xb4e>
 800beaa:	6923      	ldr	r3, [r4, #16]
 800beac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800beb0:	6918      	ldr	r0, [r3, #16]
 800beb2:	f000 fb6b 	bl	800c58c <__hi0bits>
 800beb6:	f1c0 0020 	rsb	r0, r0, #32
 800beba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bebc:	4418      	add	r0, r3
 800bebe:	f010 001f 	ands.w	r0, r0, #31
 800bec2:	d071      	beq.n	800bfa8 <_dtoa_r+0x8f8>
 800bec4:	f1c0 0320 	rsb	r3, r0, #32
 800bec8:	2b04      	cmp	r3, #4
 800beca:	dd65      	ble.n	800bf98 <_dtoa_r+0x8e8>
 800becc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bece:	f1c0 001c 	rsb	r0, r0, #28
 800bed2:	4403      	add	r3, r0
 800bed4:	4480      	add	r8, r0
 800bed6:	4406      	add	r6, r0
 800bed8:	9309      	str	r3, [sp, #36]	@ 0x24
 800beda:	f1b8 0f00 	cmp.w	r8, #0
 800bede:	dd05      	ble.n	800beec <_dtoa_r+0x83c>
 800bee0:	4649      	mov	r1, r9
 800bee2:	4642      	mov	r2, r8
 800bee4:	4658      	mov	r0, fp
 800bee6:	f000 fcb5 	bl	800c854 <__lshift>
 800beea:	4681      	mov	r9, r0
 800beec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beee:	2b00      	cmp	r3, #0
 800bef0:	dd05      	ble.n	800befe <_dtoa_r+0x84e>
 800bef2:	4621      	mov	r1, r4
 800bef4:	461a      	mov	r2, r3
 800bef6:	4658      	mov	r0, fp
 800bef8:	f000 fcac 	bl	800c854 <__lshift>
 800befc:	4604      	mov	r4, r0
 800befe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d053      	beq.n	800bfac <_dtoa_r+0x8fc>
 800bf04:	4621      	mov	r1, r4
 800bf06:	4648      	mov	r0, r9
 800bf08:	f000 fd10 	bl	800c92c <__mcmp>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	da4d      	bge.n	800bfac <_dtoa_r+0x8fc>
 800bf10:	1e7b      	subs	r3, r7, #1
 800bf12:	4649      	mov	r1, r9
 800bf14:	9304      	str	r3, [sp, #16]
 800bf16:	220a      	movs	r2, #10
 800bf18:	2300      	movs	r3, #0
 800bf1a:	4658      	mov	r0, fp
 800bf1c:	f000 faf0 	bl	800c500 <__multadd>
 800bf20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf22:	4681      	mov	r9, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 816c 	beq.w	800c202 <_dtoa_r+0xb52>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	220a      	movs	r2, #10
 800bf30:	4658      	mov	r0, fp
 800bf32:	f000 fae5 	bl	800c500 <__multadd>
 800bf36:	9b08      	ldr	r3, [sp, #32]
 800bf38:	4605      	mov	r5, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	dc61      	bgt.n	800c002 <_dtoa_r+0x952>
 800bf3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	dc3b      	bgt.n	800bfbc <_dtoa_r+0x90c>
 800bf44:	e05d      	b.n	800c002 <_dtoa_r+0x952>
 800bf46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bf48:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bf4c:	e746      	b.n	800bddc <_dtoa_r+0x72c>
 800bf4e:	9b07      	ldr	r3, [sp, #28]
 800bf50:	1e5c      	subs	r4, r3, #1
 800bf52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf54:	42a3      	cmp	r3, r4
 800bf56:	bfbf      	itttt	lt
 800bf58:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bf5a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800bf5c:	1ae3      	sublt	r3, r4, r3
 800bf5e:	18d2      	addlt	r2, r2, r3
 800bf60:	bfa8      	it	ge
 800bf62:	1b1c      	subge	r4, r3, r4
 800bf64:	9b07      	ldr	r3, [sp, #28]
 800bf66:	bfbe      	ittt	lt
 800bf68:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bf6a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800bf6c:	2400      	movlt	r4, #0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	bfb5      	itete	lt
 800bf72:	eba8 0603 	sublt.w	r6, r8, r3
 800bf76:	4646      	movge	r6, r8
 800bf78:	2300      	movlt	r3, #0
 800bf7a:	9b07      	ldrge	r3, [sp, #28]
 800bf7c:	e730      	b.n	800bde0 <_dtoa_r+0x730>
 800bf7e:	4646      	mov	r6, r8
 800bf80:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf82:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf84:	e735      	b.n	800bdf2 <_dtoa_r+0x742>
 800bf86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf88:	e75c      	b.n	800be44 <_dtoa_r+0x794>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e788      	b.n	800bea0 <_dtoa_r+0x7f0>
 800bf8e:	9b02      	ldr	r3, [sp, #8]
 800bf90:	e786      	b.n	800bea0 <_dtoa_r+0x7f0>
 800bf92:	2300      	movs	r3, #0
 800bf94:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf96:	e788      	b.n	800beaa <_dtoa_r+0x7fa>
 800bf98:	d09f      	beq.n	800beda <_dtoa_r+0x82a>
 800bf9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf9c:	331c      	adds	r3, #28
 800bf9e:	441a      	add	r2, r3
 800bfa0:	4498      	add	r8, r3
 800bfa2:	441e      	add	r6, r3
 800bfa4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfa6:	e798      	b.n	800beda <_dtoa_r+0x82a>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	e7f6      	b.n	800bf9a <_dtoa_r+0x8ea>
 800bfac:	9b07      	ldr	r3, [sp, #28]
 800bfae:	9704      	str	r7, [sp, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	dc20      	bgt.n	800bff6 <_dtoa_r+0x946>
 800bfb4:	9308      	str	r3, [sp, #32]
 800bfb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bfb8:	2b02      	cmp	r3, #2
 800bfba:	dd1e      	ble.n	800bffa <_dtoa_r+0x94a>
 800bfbc:	9b08      	ldr	r3, [sp, #32]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f47f aebc 	bne.w	800bd3c <_dtoa_r+0x68c>
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	2205      	movs	r2, #5
 800bfc8:	4658      	mov	r0, fp
 800bfca:	f000 fa99 	bl	800c500 <__multadd>
 800bfce:	4601      	mov	r1, r0
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	4648      	mov	r0, r9
 800bfd4:	f000 fcaa 	bl	800c92c <__mcmp>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	f77f aeaf 	ble.w	800bd3c <_dtoa_r+0x68c>
 800bfde:	2331      	movs	r3, #49	@ 0x31
 800bfe0:	4656      	mov	r6, sl
 800bfe2:	f806 3b01 	strb.w	r3, [r6], #1
 800bfe6:	9b04      	ldr	r3, [sp, #16]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	9304      	str	r3, [sp, #16]
 800bfec:	e6aa      	b.n	800bd44 <_dtoa_r+0x694>
 800bfee:	9c07      	ldr	r4, [sp, #28]
 800bff0:	9704      	str	r7, [sp, #16]
 800bff2:	4625      	mov	r5, r4
 800bff4:	e7f3      	b.n	800bfde <_dtoa_r+0x92e>
 800bff6:	9b07      	ldr	r3, [sp, #28]
 800bff8:	9308      	str	r3, [sp, #32]
 800bffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 8104 	beq.w	800c20a <_dtoa_r+0xb5a>
 800c002:	2e00      	cmp	r6, #0
 800c004:	dd05      	ble.n	800c012 <_dtoa_r+0x962>
 800c006:	4629      	mov	r1, r5
 800c008:	4632      	mov	r2, r6
 800c00a:	4658      	mov	r0, fp
 800c00c:	f000 fc22 	bl	800c854 <__lshift>
 800c010:	4605      	mov	r5, r0
 800c012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c014:	2b00      	cmp	r3, #0
 800c016:	d05a      	beq.n	800c0ce <_dtoa_r+0xa1e>
 800c018:	4658      	mov	r0, fp
 800c01a:	6869      	ldr	r1, [r5, #4]
 800c01c:	f000 fa0e 	bl	800c43c <_Balloc>
 800c020:	4606      	mov	r6, r0
 800c022:	b928      	cbnz	r0, 800c030 <_dtoa_r+0x980>
 800c024:	4602      	mov	r2, r0
 800c026:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c02a:	4b83      	ldr	r3, [pc, #524]	@ (800c238 <_dtoa_r+0xb88>)
 800c02c:	f7ff bb54 	b.w	800b6d8 <_dtoa_r+0x28>
 800c030:	692a      	ldr	r2, [r5, #16]
 800c032:	f105 010c 	add.w	r1, r5, #12
 800c036:	3202      	adds	r2, #2
 800c038:	0092      	lsls	r2, r2, #2
 800c03a:	300c      	adds	r0, #12
 800c03c:	f7ff fa9f 	bl	800b57e <memcpy>
 800c040:	2201      	movs	r2, #1
 800c042:	4631      	mov	r1, r6
 800c044:	4658      	mov	r0, fp
 800c046:	f000 fc05 	bl	800c854 <__lshift>
 800c04a:	462f      	mov	r7, r5
 800c04c:	4605      	mov	r5, r0
 800c04e:	f10a 0301 	add.w	r3, sl, #1
 800c052:	9307      	str	r3, [sp, #28]
 800c054:	9b08      	ldr	r3, [sp, #32]
 800c056:	4453      	add	r3, sl
 800c058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c05a:	9b02      	ldr	r3, [sp, #8]
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	930a      	str	r3, [sp, #40]	@ 0x28
 800c062:	9b07      	ldr	r3, [sp, #28]
 800c064:	4621      	mov	r1, r4
 800c066:	3b01      	subs	r3, #1
 800c068:	4648      	mov	r0, r9
 800c06a:	9302      	str	r3, [sp, #8]
 800c06c:	f7ff fa95 	bl	800b59a <quorem>
 800c070:	4639      	mov	r1, r7
 800c072:	9008      	str	r0, [sp, #32]
 800c074:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c078:	4648      	mov	r0, r9
 800c07a:	f000 fc57 	bl	800c92c <__mcmp>
 800c07e:	462a      	mov	r2, r5
 800c080:	9009      	str	r0, [sp, #36]	@ 0x24
 800c082:	4621      	mov	r1, r4
 800c084:	4658      	mov	r0, fp
 800c086:	f000 fc6d 	bl	800c964 <__mdiff>
 800c08a:	68c2      	ldr	r2, [r0, #12]
 800c08c:	4606      	mov	r6, r0
 800c08e:	bb02      	cbnz	r2, 800c0d2 <_dtoa_r+0xa22>
 800c090:	4601      	mov	r1, r0
 800c092:	4648      	mov	r0, r9
 800c094:	f000 fc4a 	bl	800c92c <__mcmp>
 800c098:	4602      	mov	r2, r0
 800c09a:	4631      	mov	r1, r6
 800c09c:	4658      	mov	r0, fp
 800c09e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c0a0:	f000 fa0c 	bl	800c4bc <_Bfree>
 800c0a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c0a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c0a8:	9e07      	ldr	r6, [sp, #28]
 800c0aa:	ea43 0102 	orr.w	r1, r3, r2
 800c0ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0b0:	4319      	orrs	r1, r3
 800c0b2:	d110      	bne.n	800c0d6 <_dtoa_r+0xa26>
 800c0b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0b8:	d029      	beq.n	800c10e <_dtoa_r+0xa5e>
 800c0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dd02      	ble.n	800c0c6 <_dtoa_r+0xa16>
 800c0c0:	9b08      	ldr	r3, [sp, #32]
 800c0c2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c0c6:	9b02      	ldr	r3, [sp, #8]
 800c0c8:	f883 8000 	strb.w	r8, [r3]
 800c0cc:	e63b      	b.n	800bd46 <_dtoa_r+0x696>
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	e7bb      	b.n	800c04a <_dtoa_r+0x99a>
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	e7e1      	b.n	800c09a <_dtoa_r+0x9ea>
 800c0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	db04      	blt.n	800c0e6 <_dtoa_r+0xa36>
 800c0dc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c0de:	430b      	orrs	r3, r1
 800c0e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0e2:	430b      	orrs	r3, r1
 800c0e4:	d120      	bne.n	800c128 <_dtoa_r+0xa78>
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	dded      	ble.n	800c0c6 <_dtoa_r+0xa16>
 800c0ea:	4649      	mov	r1, r9
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	4658      	mov	r0, fp
 800c0f0:	f000 fbb0 	bl	800c854 <__lshift>
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	4681      	mov	r9, r0
 800c0f8:	f000 fc18 	bl	800c92c <__mcmp>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	dc03      	bgt.n	800c108 <_dtoa_r+0xa58>
 800c100:	d1e1      	bne.n	800c0c6 <_dtoa_r+0xa16>
 800c102:	f018 0f01 	tst.w	r8, #1
 800c106:	d0de      	beq.n	800c0c6 <_dtoa_r+0xa16>
 800c108:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c10c:	d1d8      	bne.n	800c0c0 <_dtoa_r+0xa10>
 800c10e:	2339      	movs	r3, #57	@ 0x39
 800c110:	9a02      	ldr	r2, [sp, #8]
 800c112:	7013      	strb	r3, [r2, #0]
 800c114:	4633      	mov	r3, r6
 800c116:	461e      	mov	r6, r3
 800c118:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	2a39      	cmp	r2, #57	@ 0x39
 800c120:	d052      	beq.n	800c1c8 <_dtoa_r+0xb18>
 800c122:	3201      	adds	r2, #1
 800c124:	701a      	strb	r2, [r3, #0]
 800c126:	e60e      	b.n	800bd46 <_dtoa_r+0x696>
 800c128:	2a00      	cmp	r2, #0
 800c12a:	dd07      	ble.n	800c13c <_dtoa_r+0xa8c>
 800c12c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c130:	d0ed      	beq.n	800c10e <_dtoa_r+0xa5e>
 800c132:	9a02      	ldr	r2, [sp, #8]
 800c134:	f108 0301 	add.w	r3, r8, #1
 800c138:	7013      	strb	r3, [r2, #0]
 800c13a:	e604      	b.n	800bd46 <_dtoa_r+0x696>
 800c13c:	9b07      	ldr	r3, [sp, #28]
 800c13e:	9a07      	ldr	r2, [sp, #28]
 800c140:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c144:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c146:	4293      	cmp	r3, r2
 800c148:	d028      	beq.n	800c19c <_dtoa_r+0xaec>
 800c14a:	4649      	mov	r1, r9
 800c14c:	2300      	movs	r3, #0
 800c14e:	220a      	movs	r2, #10
 800c150:	4658      	mov	r0, fp
 800c152:	f000 f9d5 	bl	800c500 <__multadd>
 800c156:	42af      	cmp	r7, r5
 800c158:	4681      	mov	r9, r0
 800c15a:	f04f 0300 	mov.w	r3, #0
 800c15e:	f04f 020a 	mov.w	r2, #10
 800c162:	4639      	mov	r1, r7
 800c164:	4658      	mov	r0, fp
 800c166:	d107      	bne.n	800c178 <_dtoa_r+0xac8>
 800c168:	f000 f9ca 	bl	800c500 <__multadd>
 800c16c:	4607      	mov	r7, r0
 800c16e:	4605      	mov	r5, r0
 800c170:	9b07      	ldr	r3, [sp, #28]
 800c172:	3301      	adds	r3, #1
 800c174:	9307      	str	r3, [sp, #28]
 800c176:	e774      	b.n	800c062 <_dtoa_r+0x9b2>
 800c178:	f000 f9c2 	bl	800c500 <__multadd>
 800c17c:	4629      	mov	r1, r5
 800c17e:	4607      	mov	r7, r0
 800c180:	2300      	movs	r3, #0
 800c182:	220a      	movs	r2, #10
 800c184:	4658      	mov	r0, fp
 800c186:	f000 f9bb 	bl	800c500 <__multadd>
 800c18a:	4605      	mov	r5, r0
 800c18c:	e7f0      	b.n	800c170 <_dtoa_r+0xac0>
 800c18e:	9b08      	ldr	r3, [sp, #32]
 800c190:	2700      	movs	r7, #0
 800c192:	2b00      	cmp	r3, #0
 800c194:	bfcc      	ite	gt
 800c196:	461e      	movgt	r6, r3
 800c198:	2601      	movle	r6, #1
 800c19a:	4456      	add	r6, sl
 800c19c:	4649      	mov	r1, r9
 800c19e:	2201      	movs	r2, #1
 800c1a0:	4658      	mov	r0, fp
 800c1a2:	f000 fb57 	bl	800c854 <__lshift>
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4681      	mov	r9, r0
 800c1aa:	f000 fbbf 	bl	800c92c <__mcmp>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	dcb0      	bgt.n	800c114 <_dtoa_r+0xa64>
 800c1b2:	d102      	bne.n	800c1ba <_dtoa_r+0xb0a>
 800c1b4:	f018 0f01 	tst.w	r8, #1
 800c1b8:	d1ac      	bne.n	800c114 <_dtoa_r+0xa64>
 800c1ba:	4633      	mov	r3, r6
 800c1bc:	461e      	mov	r6, r3
 800c1be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1c2:	2a30      	cmp	r2, #48	@ 0x30
 800c1c4:	d0fa      	beq.n	800c1bc <_dtoa_r+0xb0c>
 800c1c6:	e5be      	b.n	800bd46 <_dtoa_r+0x696>
 800c1c8:	459a      	cmp	sl, r3
 800c1ca:	d1a4      	bne.n	800c116 <_dtoa_r+0xa66>
 800c1cc:	9b04      	ldr	r3, [sp, #16]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	9304      	str	r3, [sp, #16]
 800c1d2:	2331      	movs	r3, #49	@ 0x31
 800c1d4:	f88a 3000 	strb.w	r3, [sl]
 800c1d8:	e5b5      	b.n	800bd46 <_dtoa_r+0x696>
 800c1da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c1dc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c23c <_dtoa_r+0xb8c>
 800c1e0:	b11b      	cbz	r3, 800c1ea <_dtoa_r+0xb3a>
 800c1e2:	f10a 0308 	add.w	r3, sl, #8
 800c1e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c1e8:	6013      	str	r3, [r2, #0]
 800c1ea:	4650      	mov	r0, sl
 800c1ec:	b017      	add	sp, #92	@ 0x5c
 800c1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	f77f ae3d 	ble.w	800be74 <_dtoa_r+0x7c4>
 800c1fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1fe:	2001      	movs	r0, #1
 800c200:	e65b      	b.n	800beba <_dtoa_r+0x80a>
 800c202:	9b08      	ldr	r3, [sp, #32]
 800c204:	2b00      	cmp	r3, #0
 800c206:	f77f aed6 	ble.w	800bfb6 <_dtoa_r+0x906>
 800c20a:	4656      	mov	r6, sl
 800c20c:	4621      	mov	r1, r4
 800c20e:	4648      	mov	r0, r9
 800c210:	f7ff f9c3 	bl	800b59a <quorem>
 800c214:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c218:	9b08      	ldr	r3, [sp, #32]
 800c21a:	f806 8b01 	strb.w	r8, [r6], #1
 800c21e:	eba6 020a 	sub.w	r2, r6, sl
 800c222:	4293      	cmp	r3, r2
 800c224:	ddb3      	ble.n	800c18e <_dtoa_r+0xade>
 800c226:	4649      	mov	r1, r9
 800c228:	2300      	movs	r3, #0
 800c22a:	220a      	movs	r2, #10
 800c22c:	4658      	mov	r0, fp
 800c22e:	f000 f967 	bl	800c500 <__multadd>
 800c232:	4681      	mov	r9, r0
 800c234:	e7ea      	b.n	800c20c <_dtoa_r+0xb5c>
 800c236:	bf00      	nop
 800c238:	0800e0e6 	.word	0x0800e0e6
 800c23c:	0800e06a 	.word	0x0800e06a

0800c240 <_free_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	4605      	mov	r5, r0
 800c244:	2900      	cmp	r1, #0
 800c246:	d040      	beq.n	800c2ca <_free_r+0x8a>
 800c248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c24c:	1f0c      	subs	r4, r1, #4
 800c24e:	2b00      	cmp	r3, #0
 800c250:	bfb8      	it	lt
 800c252:	18e4      	addlt	r4, r4, r3
 800c254:	f000 f8e6 	bl	800c424 <__malloc_lock>
 800c258:	4a1c      	ldr	r2, [pc, #112]	@ (800c2cc <_free_r+0x8c>)
 800c25a:	6813      	ldr	r3, [r2, #0]
 800c25c:	b933      	cbnz	r3, 800c26c <_free_r+0x2c>
 800c25e:	6063      	str	r3, [r4, #4]
 800c260:	6014      	str	r4, [r2, #0]
 800c262:	4628      	mov	r0, r5
 800c264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c268:	f000 b8e2 	b.w	800c430 <__malloc_unlock>
 800c26c:	42a3      	cmp	r3, r4
 800c26e:	d908      	bls.n	800c282 <_free_r+0x42>
 800c270:	6820      	ldr	r0, [r4, #0]
 800c272:	1821      	adds	r1, r4, r0
 800c274:	428b      	cmp	r3, r1
 800c276:	bf01      	itttt	eq
 800c278:	6819      	ldreq	r1, [r3, #0]
 800c27a:	685b      	ldreq	r3, [r3, #4]
 800c27c:	1809      	addeq	r1, r1, r0
 800c27e:	6021      	streq	r1, [r4, #0]
 800c280:	e7ed      	b.n	800c25e <_free_r+0x1e>
 800c282:	461a      	mov	r2, r3
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	b10b      	cbz	r3, 800c28c <_free_r+0x4c>
 800c288:	42a3      	cmp	r3, r4
 800c28a:	d9fa      	bls.n	800c282 <_free_r+0x42>
 800c28c:	6811      	ldr	r1, [r2, #0]
 800c28e:	1850      	adds	r0, r2, r1
 800c290:	42a0      	cmp	r0, r4
 800c292:	d10b      	bne.n	800c2ac <_free_r+0x6c>
 800c294:	6820      	ldr	r0, [r4, #0]
 800c296:	4401      	add	r1, r0
 800c298:	1850      	adds	r0, r2, r1
 800c29a:	4283      	cmp	r3, r0
 800c29c:	6011      	str	r1, [r2, #0]
 800c29e:	d1e0      	bne.n	800c262 <_free_r+0x22>
 800c2a0:	6818      	ldr	r0, [r3, #0]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	4408      	add	r0, r1
 800c2a6:	6010      	str	r0, [r2, #0]
 800c2a8:	6053      	str	r3, [r2, #4]
 800c2aa:	e7da      	b.n	800c262 <_free_r+0x22>
 800c2ac:	d902      	bls.n	800c2b4 <_free_r+0x74>
 800c2ae:	230c      	movs	r3, #12
 800c2b0:	602b      	str	r3, [r5, #0]
 800c2b2:	e7d6      	b.n	800c262 <_free_r+0x22>
 800c2b4:	6820      	ldr	r0, [r4, #0]
 800c2b6:	1821      	adds	r1, r4, r0
 800c2b8:	428b      	cmp	r3, r1
 800c2ba:	bf01      	itttt	eq
 800c2bc:	6819      	ldreq	r1, [r3, #0]
 800c2be:	685b      	ldreq	r3, [r3, #4]
 800c2c0:	1809      	addeq	r1, r1, r0
 800c2c2:	6021      	streq	r1, [r4, #0]
 800c2c4:	6063      	str	r3, [r4, #4]
 800c2c6:	6054      	str	r4, [r2, #4]
 800c2c8:	e7cb      	b.n	800c262 <_free_r+0x22>
 800c2ca:	bd38      	pop	{r3, r4, r5, pc}
 800c2cc:	2000165c 	.word	0x2000165c

0800c2d0 <malloc>:
 800c2d0:	4b02      	ldr	r3, [pc, #8]	@ (800c2dc <malloc+0xc>)
 800c2d2:	4601      	mov	r1, r0
 800c2d4:	6818      	ldr	r0, [r3, #0]
 800c2d6:	f000 b825 	b.w	800c324 <_malloc_r>
 800c2da:	bf00      	nop
 800c2dc:	2000003c 	.word	0x2000003c

0800c2e0 <sbrk_aligned>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	4e0f      	ldr	r6, [pc, #60]	@ (800c320 <sbrk_aligned+0x40>)
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	6831      	ldr	r1, [r6, #0]
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	b911      	cbnz	r1, 800c2f2 <sbrk_aligned+0x12>
 800c2ec:	f000 fe40 	bl	800cf70 <_sbrk_r>
 800c2f0:	6030      	str	r0, [r6, #0]
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	f000 fe3b 	bl	800cf70 <_sbrk_r>
 800c2fa:	1c43      	adds	r3, r0, #1
 800c2fc:	d103      	bne.n	800c306 <sbrk_aligned+0x26>
 800c2fe:	f04f 34ff 	mov.w	r4, #4294967295
 800c302:	4620      	mov	r0, r4
 800c304:	bd70      	pop	{r4, r5, r6, pc}
 800c306:	1cc4      	adds	r4, r0, #3
 800c308:	f024 0403 	bic.w	r4, r4, #3
 800c30c:	42a0      	cmp	r0, r4
 800c30e:	d0f8      	beq.n	800c302 <sbrk_aligned+0x22>
 800c310:	1a21      	subs	r1, r4, r0
 800c312:	4628      	mov	r0, r5
 800c314:	f000 fe2c 	bl	800cf70 <_sbrk_r>
 800c318:	3001      	adds	r0, #1
 800c31a:	d1f2      	bne.n	800c302 <sbrk_aligned+0x22>
 800c31c:	e7ef      	b.n	800c2fe <sbrk_aligned+0x1e>
 800c31e:	bf00      	nop
 800c320:	20001658 	.word	0x20001658

0800c324 <_malloc_r>:
 800c324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c328:	1ccd      	adds	r5, r1, #3
 800c32a:	f025 0503 	bic.w	r5, r5, #3
 800c32e:	3508      	adds	r5, #8
 800c330:	2d0c      	cmp	r5, #12
 800c332:	bf38      	it	cc
 800c334:	250c      	movcc	r5, #12
 800c336:	2d00      	cmp	r5, #0
 800c338:	4606      	mov	r6, r0
 800c33a:	db01      	blt.n	800c340 <_malloc_r+0x1c>
 800c33c:	42a9      	cmp	r1, r5
 800c33e:	d904      	bls.n	800c34a <_malloc_r+0x26>
 800c340:	230c      	movs	r3, #12
 800c342:	6033      	str	r3, [r6, #0]
 800c344:	2000      	movs	r0, #0
 800c346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c34a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c420 <_malloc_r+0xfc>
 800c34e:	f000 f869 	bl	800c424 <__malloc_lock>
 800c352:	f8d8 3000 	ldr.w	r3, [r8]
 800c356:	461c      	mov	r4, r3
 800c358:	bb44      	cbnz	r4, 800c3ac <_malloc_r+0x88>
 800c35a:	4629      	mov	r1, r5
 800c35c:	4630      	mov	r0, r6
 800c35e:	f7ff ffbf 	bl	800c2e0 <sbrk_aligned>
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	4604      	mov	r4, r0
 800c366:	d158      	bne.n	800c41a <_malloc_r+0xf6>
 800c368:	f8d8 4000 	ldr.w	r4, [r8]
 800c36c:	4627      	mov	r7, r4
 800c36e:	2f00      	cmp	r7, #0
 800c370:	d143      	bne.n	800c3fa <_malloc_r+0xd6>
 800c372:	2c00      	cmp	r4, #0
 800c374:	d04b      	beq.n	800c40e <_malloc_r+0xea>
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	4639      	mov	r1, r7
 800c37a:	4630      	mov	r0, r6
 800c37c:	eb04 0903 	add.w	r9, r4, r3
 800c380:	f000 fdf6 	bl	800cf70 <_sbrk_r>
 800c384:	4581      	cmp	r9, r0
 800c386:	d142      	bne.n	800c40e <_malloc_r+0xea>
 800c388:	6821      	ldr	r1, [r4, #0]
 800c38a:	4630      	mov	r0, r6
 800c38c:	1a6d      	subs	r5, r5, r1
 800c38e:	4629      	mov	r1, r5
 800c390:	f7ff ffa6 	bl	800c2e0 <sbrk_aligned>
 800c394:	3001      	adds	r0, #1
 800c396:	d03a      	beq.n	800c40e <_malloc_r+0xea>
 800c398:	6823      	ldr	r3, [r4, #0]
 800c39a:	442b      	add	r3, r5
 800c39c:	6023      	str	r3, [r4, #0]
 800c39e:	f8d8 3000 	ldr.w	r3, [r8]
 800c3a2:	685a      	ldr	r2, [r3, #4]
 800c3a4:	bb62      	cbnz	r2, 800c400 <_malloc_r+0xdc>
 800c3a6:	f8c8 7000 	str.w	r7, [r8]
 800c3aa:	e00f      	b.n	800c3cc <_malloc_r+0xa8>
 800c3ac:	6822      	ldr	r2, [r4, #0]
 800c3ae:	1b52      	subs	r2, r2, r5
 800c3b0:	d420      	bmi.n	800c3f4 <_malloc_r+0xd0>
 800c3b2:	2a0b      	cmp	r2, #11
 800c3b4:	d917      	bls.n	800c3e6 <_malloc_r+0xc2>
 800c3b6:	1961      	adds	r1, r4, r5
 800c3b8:	42a3      	cmp	r3, r4
 800c3ba:	6025      	str	r5, [r4, #0]
 800c3bc:	bf18      	it	ne
 800c3be:	6059      	strne	r1, [r3, #4]
 800c3c0:	6863      	ldr	r3, [r4, #4]
 800c3c2:	bf08      	it	eq
 800c3c4:	f8c8 1000 	streq.w	r1, [r8]
 800c3c8:	5162      	str	r2, [r4, r5]
 800c3ca:	604b      	str	r3, [r1, #4]
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f000 f82f 	bl	800c430 <__malloc_unlock>
 800c3d2:	f104 000b 	add.w	r0, r4, #11
 800c3d6:	1d23      	adds	r3, r4, #4
 800c3d8:	f020 0007 	bic.w	r0, r0, #7
 800c3dc:	1ac2      	subs	r2, r0, r3
 800c3de:	bf1c      	itt	ne
 800c3e0:	1a1b      	subne	r3, r3, r0
 800c3e2:	50a3      	strne	r3, [r4, r2]
 800c3e4:	e7af      	b.n	800c346 <_malloc_r+0x22>
 800c3e6:	6862      	ldr	r2, [r4, #4]
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	bf0c      	ite	eq
 800c3ec:	f8c8 2000 	streq.w	r2, [r8]
 800c3f0:	605a      	strne	r2, [r3, #4]
 800c3f2:	e7eb      	b.n	800c3cc <_malloc_r+0xa8>
 800c3f4:	4623      	mov	r3, r4
 800c3f6:	6864      	ldr	r4, [r4, #4]
 800c3f8:	e7ae      	b.n	800c358 <_malloc_r+0x34>
 800c3fa:	463c      	mov	r4, r7
 800c3fc:	687f      	ldr	r7, [r7, #4]
 800c3fe:	e7b6      	b.n	800c36e <_malloc_r+0x4a>
 800c400:	461a      	mov	r2, r3
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	42a3      	cmp	r3, r4
 800c406:	d1fb      	bne.n	800c400 <_malloc_r+0xdc>
 800c408:	2300      	movs	r3, #0
 800c40a:	6053      	str	r3, [r2, #4]
 800c40c:	e7de      	b.n	800c3cc <_malloc_r+0xa8>
 800c40e:	230c      	movs	r3, #12
 800c410:	4630      	mov	r0, r6
 800c412:	6033      	str	r3, [r6, #0]
 800c414:	f000 f80c 	bl	800c430 <__malloc_unlock>
 800c418:	e794      	b.n	800c344 <_malloc_r+0x20>
 800c41a:	6005      	str	r5, [r0, #0]
 800c41c:	e7d6      	b.n	800c3cc <_malloc_r+0xa8>
 800c41e:	bf00      	nop
 800c420:	2000165c 	.word	0x2000165c

0800c424 <__malloc_lock>:
 800c424:	4801      	ldr	r0, [pc, #4]	@ (800c42c <__malloc_lock+0x8>)
 800c426:	f7ff b89a 	b.w	800b55e <__retarget_lock_acquire_recursive>
 800c42a:	bf00      	nop
 800c42c:	20001654 	.word	0x20001654

0800c430 <__malloc_unlock>:
 800c430:	4801      	ldr	r0, [pc, #4]	@ (800c438 <__malloc_unlock+0x8>)
 800c432:	f7ff b895 	b.w	800b560 <__retarget_lock_release_recursive>
 800c436:	bf00      	nop
 800c438:	20001654 	.word	0x20001654

0800c43c <_Balloc>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	69c6      	ldr	r6, [r0, #28]
 800c440:	4604      	mov	r4, r0
 800c442:	460d      	mov	r5, r1
 800c444:	b976      	cbnz	r6, 800c464 <_Balloc+0x28>
 800c446:	2010      	movs	r0, #16
 800c448:	f7ff ff42 	bl	800c2d0 <malloc>
 800c44c:	4602      	mov	r2, r0
 800c44e:	61e0      	str	r0, [r4, #28]
 800c450:	b920      	cbnz	r0, 800c45c <_Balloc+0x20>
 800c452:	216b      	movs	r1, #107	@ 0x6b
 800c454:	4b17      	ldr	r3, [pc, #92]	@ (800c4b4 <_Balloc+0x78>)
 800c456:	4818      	ldr	r0, [pc, #96]	@ (800c4b8 <_Balloc+0x7c>)
 800c458:	f000 fd9a 	bl	800cf90 <__assert_func>
 800c45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c460:	6006      	str	r6, [r0, #0]
 800c462:	60c6      	str	r6, [r0, #12]
 800c464:	69e6      	ldr	r6, [r4, #28]
 800c466:	68f3      	ldr	r3, [r6, #12]
 800c468:	b183      	cbz	r3, 800c48c <_Balloc+0x50>
 800c46a:	69e3      	ldr	r3, [r4, #28]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c472:	b9b8      	cbnz	r0, 800c4a4 <_Balloc+0x68>
 800c474:	2101      	movs	r1, #1
 800c476:	fa01 f605 	lsl.w	r6, r1, r5
 800c47a:	1d72      	adds	r2, r6, #5
 800c47c:	4620      	mov	r0, r4
 800c47e:	0092      	lsls	r2, r2, #2
 800c480:	f000 fda4 	bl	800cfcc <_calloc_r>
 800c484:	b160      	cbz	r0, 800c4a0 <_Balloc+0x64>
 800c486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c48a:	e00e      	b.n	800c4aa <_Balloc+0x6e>
 800c48c:	2221      	movs	r2, #33	@ 0x21
 800c48e:	2104      	movs	r1, #4
 800c490:	4620      	mov	r0, r4
 800c492:	f000 fd9b 	bl	800cfcc <_calloc_r>
 800c496:	69e3      	ldr	r3, [r4, #28]
 800c498:	60f0      	str	r0, [r6, #12]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e4      	bne.n	800c46a <_Balloc+0x2e>
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}
 800c4a4:	6802      	ldr	r2, [r0, #0]
 800c4a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4b0:	e7f7      	b.n	800c4a2 <_Balloc+0x66>
 800c4b2:	bf00      	nop
 800c4b4:	0800e077 	.word	0x0800e077
 800c4b8:	0800e0f7 	.word	0x0800e0f7

0800c4bc <_Bfree>:
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	69c6      	ldr	r6, [r0, #28]
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	b976      	cbnz	r6, 800c4e4 <_Bfree+0x28>
 800c4c6:	2010      	movs	r0, #16
 800c4c8:	f7ff ff02 	bl	800c2d0 <malloc>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	61e8      	str	r0, [r5, #28]
 800c4d0:	b920      	cbnz	r0, 800c4dc <_Bfree+0x20>
 800c4d2:	218f      	movs	r1, #143	@ 0x8f
 800c4d4:	4b08      	ldr	r3, [pc, #32]	@ (800c4f8 <_Bfree+0x3c>)
 800c4d6:	4809      	ldr	r0, [pc, #36]	@ (800c4fc <_Bfree+0x40>)
 800c4d8:	f000 fd5a 	bl	800cf90 <__assert_func>
 800c4dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4e0:	6006      	str	r6, [r0, #0]
 800c4e2:	60c6      	str	r6, [r0, #12]
 800c4e4:	b13c      	cbz	r4, 800c4f6 <_Bfree+0x3a>
 800c4e6:	69eb      	ldr	r3, [r5, #28]
 800c4e8:	6862      	ldr	r2, [r4, #4]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4f0:	6021      	str	r1, [r4, #0]
 800c4f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4f6:	bd70      	pop	{r4, r5, r6, pc}
 800c4f8:	0800e077 	.word	0x0800e077
 800c4fc:	0800e0f7 	.word	0x0800e0f7

0800c500 <__multadd>:
 800c500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c504:	4607      	mov	r7, r0
 800c506:	460c      	mov	r4, r1
 800c508:	461e      	mov	r6, r3
 800c50a:	2000      	movs	r0, #0
 800c50c:	690d      	ldr	r5, [r1, #16]
 800c50e:	f101 0c14 	add.w	ip, r1, #20
 800c512:	f8dc 3000 	ldr.w	r3, [ip]
 800c516:	3001      	adds	r0, #1
 800c518:	b299      	uxth	r1, r3
 800c51a:	fb02 6101 	mla	r1, r2, r1, r6
 800c51e:	0c1e      	lsrs	r6, r3, #16
 800c520:	0c0b      	lsrs	r3, r1, #16
 800c522:	fb02 3306 	mla	r3, r2, r6, r3
 800c526:	b289      	uxth	r1, r1
 800c528:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c52c:	4285      	cmp	r5, r0
 800c52e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c532:	f84c 1b04 	str.w	r1, [ip], #4
 800c536:	dcec      	bgt.n	800c512 <__multadd+0x12>
 800c538:	b30e      	cbz	r6, 800c57e <__multadd+0x7e>
 800c53a:	68a3      	ldr	r3, [r4, #8]
 800c53c:	42ab      	cmp	r3, r5
 800c53e:	dc19      	bgt.n	800c574 <__multadd+0x74>
 800c540:	6861      	ldr	r1, [r4, #4]
 800c542:	4638      	mov	r0, r7
 800c544:	3101      	adds	r1, #1
 800c546:	f7ff ff79 	bl	800c43c <_Balloc>
 800c54a:	4680      	mov	r8, r0
 800c54c:	b928      	cbnz	r0, 800c55a <__multadd+0x5a>
 800c54e:	4602      	mov	r2, r0
 800c550:	21ba      	movs	r1, #186	@ 0xba
 800c552:	4b0c      	ldr	r3, [pc, #48]	@ (800c584 <__multadd+0x84>)
 800c554:	480c      	ldr	r0, [pc, #48]	@ (800c588 <__multadd+0x88>)
 800c556:	f000 fd1b 	bl	800cf90 <__assert_func>
 800c55a:	6922      	ldr	r2, [r4, #16]
 800c55c:	f104 010c 	add.w	r1, r4, #12
 800c560:	3202      	adds	r2, #2
 800c562:	0092      	lsls	r2, r2, #2
 800c564:	300c      	adds	r0, #12
 800c566:	f7ff f80a 	bl	800b57e <memcpy>
 800c56a:	4621      	mov	r1, r4
 800c56c:	4638      	mov	r0, r7
 800c56e:	f7ff ffa5 	bl	800c4bc <_Bfree>
 800c572:	4644      	mov	r4, r8
 800c574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c578:	3501      	adds	r5, #1
 800c57a:	615e      	str	r6, [r3, #20]
 800c57c:	6125      	str	r5, [r4, #16]
 800c57e:	4620      	mov	r0, r4
 800c580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c584:	0800e0e6 	.word	0x0800e0e6
 800c588:	0800e0f7 	.word	0x0800e0f7

0800c58c <__hi0bits>:
 800c58c:	4603      	mov	r3, r0
 800c58e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c592:	bf3a      	itte	cc
 800c594:	0403      	lslcc	r3, r0, #16
 800c596:	2010      	movcc	r0, #16
 800c598:	2000      	movcs	r0, #0
 800c59a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c59e:	bf3c      	itt	cc
 800c5a0:	021b      	lslcc	r3, r3, #8
 800c5a2:	3008      	addcc	r0, #8
 800c5a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5a8:	bf3c      	itt	cc
 800c5aa:	011b      	lslcc	r3, r3, #4
 800c5ac:	3004      	addcc	r0, #4
 800c5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5b2:	bf3c      	itt	cc
 800c5b4:	009b      	lslcc	r3, r3, #2
 800c5b6:	3002      	addcc	r0, #2
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	db05      	blt.n	800c5c8 <__hi0bits+0x3c>
 800c5bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c5c0:	f100 0001 	add.w	r0, r0, #1
 800c5c4:	bf08      	it	eq
 800c5c6:	2020      	moveq	r0, #32
 800c5c8:	4770      	bx	lr

0800c5ca <__lo0bits>:
 800c5ca:	6803      	ldr	r3, [r0, #0]
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	f013 0007 	ands.w	r0, r3, #7
 800c5d2:	d00b      	beq.n	800c5ec <__lo0bits+0x22>
 800c5d4:	07d9      	lsls	r1, r3, #31
 800c5d6:	d421      	bmi.n	800c61c <__lo0bits+0x52>
 800c5d8:	0798      	lsls	r0, r3, #30
 800c5da:	bf49      	itett	mi
 800c5dc:	085b      	lsrmi	r3, r3, #1
 800c5de:	089b      	lsrpl	r3, r3, #2
 800c5e0:	2001      	movmi	r0, #1
 800c5e2:	6013      	strmi	r3, [r2, #0]
 800c5e4:	bf5c      	itt	pl
 800c5e6:	2002      	movpl	r0, #2
 800c5e8:	6013      	strpl	r3, [r2, #0]
 800c5ea:	4770      	bx	lr
 800c5ec:	b299      	uxth	r1, r3
 800c5ee:	b909      	cbnz	r1, 800c5f4 <__lo0bits+0x2a>
 800c5f0:	2010      	movs	r0, #16
 800c5f2:	0c1b      	lsrs	r3, r3, #16
 800c5f4:	b2d9      	uxtb	r1, r3
 800c5f6:	b909      	cbnz	r1, 800c5fc <__lo0bits+0x32>
 800c5f8:	3008      	adds	r0, #8
 800c5fa:	0a1b      	lsrs	r3, r3, #8
 800c5fc:	0719      	lsls	r1, r3, #28
 800c5fe:	bf04      	itt	eq
 800c600:	091b      	lsreq	r3, r3, #4
 800c602:	3004      	addeq	r0, #4
 800c604:	0799      	lsls	r1, r3, #30
 800c606:	bf04      	itt	eq
 800c608:	089b      	lsreq	r3, r3, #2
 800c60a:	3002      	addeq	r0, #2
 800c60c:	07d9      	lsls	r1, r3, #31
 800c60e:	d403      	bmi.n	800c618 <__lo0bits+0x4e>
 800c610:	085b      	lsrs	r3, r3, #1
 800c612:	f100 0001 	add.w	r0, r0, #1
 800c616:	d003      	beq.n	800c620 <__lo0bits+0x56>
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	4770      	bx	lr
 800c61c:	2000      	movs	r0, #0
 800c61e:	4770      	bx	lr
 800c620:	2020      	movs	r0, #32
 800c622:	4770      	bx	lr

0800c624 <__i2b>:
 800c624:	b510      	push	{r4, lr}
 800c626:	460c      	mov	r4, r1
 800c628:	2101      	movs	r1, #1
 800c62a:	f7ff ff07 	bl	800c43c <_Balloc>
 800c62e:	4602      	mov	r2, r0
 800c630:	b928      	cbnz	r0, 800c63e <__i2b+0x1a>
 800c632:	f240 1145 	movw	r1, #325	@ 0x145
 800c636:	4b04      	ldr	r3, [pc, #16]	@ (800c648 <__i2b+0x24>)
 800c638:	4804      	ldr	r0, [pc, #16]	@ (800c64c <__i2b+0x28>)
 800c63a:	f000 fca9 	bl	800cf90 <__assert_func>
 800c63e:	2301      	movs	r3, #1
 800c640:	6144      	str	r4, [r0, #20]
 800c642:	6103      	str	r3, [r0, #16]
 800c644:	bd10      	pop	{r4, pc}
 800c646:	bf00      	nop
 800c648:	0800e0e6 	.word	0x0800e0e6
 800c64c:	0800e0f7 	.word	0x0800e0f7

0800c650 <__multiply>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	4614      	mov	r4, r2
 800c656:	690a      	ldr	r2, [r1, #16]
 800c658:	6923      	ldr	r3, [r4, #16]
 800c65a:	460f      	mov	r7, r1
 800c65c:	429a      	cmp	r2, r3
 800c65e:	bfa2      	ittt	ge
 800c660:	4623      	movge	r3, r4
 800c662:	460c      	movge	r4, r1
 800c664:	461f      	movge	r7, r3
 800c666:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c66a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c66e:	68a3      	ldr	r3, [r4, #8]
 800c670:	6861      	ldr	r1, [r4, #4]
 800c672:	eb0a 0609 	add.w	r6, sl, r9
 800c676:	42b3      	cmp	r3, r6
 800c678:	b085      	sub	sp, #20
 800c67a:	bfb8      	it	lt
 800c67c:	3101      	addlt	r1, #1
 800c67e:	f7ff fedd 	bl	800c43c <_Balloc>
 800c682:	b930      	cbnz	r0, 800c692 <__multiply+0x42>
 800c684:	4602      	mov	r2, r0
 800c686:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c68a:	4b43      	ldr	r3, [pc, #268]	@ (800c798 <__multiply+0x148>)
 800c68c:	4843      	ldr	r0, [pc, #268]	@ (800c79c <__multiply+0x14c>)
 800c68e:	f000 fc7f 	bl	800cf90 <__assert_func>
 800c692:	f100 0514 	add.w	r5, r0, #20
 800c696:	462b      	mov	r3, r5
 800c698:	2200      	movs	r2, #0
 800c69a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c69e:	4543      	cmp	r3, r8
 800c6a0:	d321      	bcc.n	800c6e6 <__multiply+0x96>
 800c6a2:	f107 0114 	add.w	r1, r7, #20
 800c6a6:	f104 0214 	add.w	r2, r4, #20
 800c6aa:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c6ae:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c6b2:	9302      	str	r3, [sp, #8]
 800c6b4:	1b13      	subs	r3, r2, r4
 800c6b6:	3b15      	subs	r3, #21
 800c6b8:	f023 0303 	bic.w	r3, r3, #3
 800c6bc:	3304      	adds	r3, #4
 800c6be:	f104 0715 	add.w	r7, r4, #21
 800c6c2:	42ba      	cmp	r2, r7
 800c6c4:	bf38      	it	cc
 800c6c6:	2304      	movcc	r3, #4
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	9b02      	ldr	r3, [sp, #8]
 800c6cc:	9103      	str	r1, [sp, #12]
 800c6ce:	428b      	cmp	r3, r1
 800c6d0:	d80c      	bhi.n	800c6ec <__multiply+0x9c>
 800c6d2:	2e00      	cmp	r6, #0
 800c6d4:	dd03      	ble.n	800c6de <__multiply+0x8e>
 800c6d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d05a      	beq.n	800c794 <__multiply+0x144>
 800c6de:	6106      	str	r6, [r0, #16]
 800c6e0:	b005      	add	sp, #20
 800c6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e6:	f843 2b04 	str.w	r2, [r3], #4
 800c6ea:	e7d8      	b.n	800c69e <__multiply+0x4e>
 800c6ec:	f8b1 a000 	ldrh.w	sl, [r1]
 800c6f0:	f1ba 0f00 	cmp.w	sl, #0
 800c6f4:	d023      	beq.n	800c73e <__multiply+0xee>
 800c6f6:	46a9      	mov	r9, r5
 800c6f8:	f04f 0c00 	mov.w	ip, #0
 800c6fc:	f104 0e14 	add.w	lr, r4, #20
 800c700:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c704:	f8d9 3000 	ldr.w	r3, [r9]
 800c708:	fa1f fb87 	uxth.w	fp, r7
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	fb0a 330b 	mla	r3, sl, fp, r3
 800c712:	4463      	add	r3, ip
 800c714:	f8d9 c000 	ldr.w	ip, [r9]
 800c718:	0c3f      	lsrs	r7, r7, #16
 800c71a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c71e:	fb0a c707 	mla	r7, sl, r7, ip
 800c722:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c726:	b29b      	uxth	r3, r3
 800c728:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c72c:	4572      	cmp	r2, lr
 800c72e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c732:	f849 3b04 	str.w	r3, [r9], #4
 800c736:	d8e3      	bhi.n	800c700 <__multiply+0xb0>
 800c738:	9b01      	ldr	r3, [sp, #4]
 800c73a:	f845 c003 	str.w	ip, [r5, r3]
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	3104      	adds	r1, #4
 800c742:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c746:	f1b9 0f00 	cmp.w	r9, #0
 800c74a:	d021      	beq.n	800c790 <__multiply+0x140>
 800c74c:	46ae      	mov	lr, r5
 800c74e:	f04f 0a00 	mov.w	sl, #0
 800c752:	682b      	ldr	r3, [r5, #0]
 800c754:	f104 0c14 	add.w	ip, r4, #20
 800c758:	f8bc b000 	ldrh.w	fp, [ip]
 800c75c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c760:	b29b      	uxth	r3, r3
 800c762:	fb09 770b 	mla	r7, r9, fp, r7
 800c766:	4457      	add	r7, sl
 800c768:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c76c:	f84e 3b04 	str.w	r3, [lr], #4
 800c770:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c778:	f8be 3000 	ldrh.w	r3, [lr]
 800c77c:	4562      	cmp	r2, ip
 800c77e:	fb09 330a 	mla	r3, r9, sl, r3
 800c782:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c786:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c78a:	d8e5      	bhi.n	800c758 <__multiply+0x108>
 800c78c:	9f01      	ldr	r7, [sp, #4]
 800c78e:	51eb      	str	r3, [r5, r7]
 800c790:	3504      	adds	r5, #4
 800c792:	e79a      	b.n	800c6ca <__multiply+0x7a>
 800c794:	3e01      	subs	r6, #1
 800c796:	e79c      	b.n	800c6d2 <__multiply+0x82>
 800c798:	0800e0e6 	.word	0x0800e0e6
 800c79c:	0800e0f7 	.word	0x0800e0f7

0800c7a0 <__pow5mult>:
 800c7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a4:	4615      	mov	r5, r2
 800c7a6:	f012 0203 	ands.w	r2, r2, #3
 800c7aa:	4607      	mov	r7, r0
 800c7ac:	460e      	mov	r6, r1
 800c7ae:	d007      	beq.n	800c7c0 <__pow5mult+0x20>
 800c7b0:	4c25      	ldr	r4, [pc, #148]	@ (800c848 <__pow5mult+0xa8>)
 800c7b2:	3a01      	subs	r2, #1
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7ba:	f7ff fea1 	bl	800c500 <__multadd>
 800c7be:	4606      	mov	r6, r0
 800c7c0:	10ad      	asrs	r5, r5, #2
 800c7c2:	d03d      	beq.n	800c840 <__pow5mult+0xa0>
 800c7c4:	69fc      	ldr	r4, [r7, #28]
 800c7c6:	b97c      	cbnz	r4, 800c7e8 <__pow5mult+0x48>
 800c7c8:	2010      	movs	r0, #16
 800c7ca:	f7ff fd81 	bl	800c2d0 <malloc>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	61f8      	str	r0, [r7, #28]
 800c7d2:	b928      	cbnz	r0, 800c7e0 <__pow5mult+0x40>
 800c7d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c7d8:	4b1c      	ldr	r3, [pc, #112]	@ (800c84c <__pow5mult+0xac>)
 800c7da:	481d      	ldr	r0, [pc, #116]	@ (800c850 <__pow5mult+0xb0>)
 800c7dc:	f000 fbd8 	bl	800cf90 <__assert_func>
 800c7e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7e4:	6004      	str	r4, [r0, #0]
 800c7e6:	60c4      	str	r4, [r0, #12]
 800c7e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c7ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7f0:	b94c      	cbnz	r4, 800c806 <__pow5mult+0x66>
 800c7f2:	f240 2171 	movw	r1, #625	@ 0x271
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	f7ff ff14 	bl	800c624 <__i2b>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4604      	mov	r4, r0
 800c800:	f8c8 0008 	str.w	r0, [r8, #8]
 800c804:	6003      	str	r3, [r0, #0]
 800c806:	f04f 0900 	mov.w	r9, #0
 800c80a:	07eb      	lsls	r3, r5, #31
 800c80c:	d50a      	bpl.n	800c824 <__pow5mult+0x84>
 800c80e:	4631      	mov	r1, r6
 800c810:	4622      	mov	r2, r4
 800c812:	4638      	mov	r0, r7
 800c814:	f7ff ff1c 	bl	800c650 <__multiply>
 800c818:	4680      	mov	r8, r0
 800c81a:	4631      	mov	r1, r6
 800c81c:	4638      	mov	r0, r7
 800c81e:	f7ff fe4d 	bl	800c4bc <_Bfree>
 800c822:	4646      	mov	r6, r8
 800c824:	106d      	asrs	r5, r5, #1
 800c826:	d00b      	beq.n	800c840 <__pow5mult+0xa0>
 800c828:	6820      	ldr	r0, [r4, #0]
 800c82a:	b938      	cbnz	r0, 800c83c <__pow5mult+0x9c>
 800c82c:	4622      	mov	r2, r4
 800c82e:	4621      	mov	r1, r4
 800c830:	4638      	mov	r0, r7
 800c832:	f7ff ff0d 	bl	800c650 <__multiply>
 800c836:	6020      	str	r0, [r4, #0]
 800c838:	f8c0 9000 	str.w	r9, [r0]
 800c83c:	4604      	mov	r4, r0
 800c83e:	e7e4      	b.n	800c80a <__pow5mult+0x6a>
 800c840:	4630      	mov	r0, r6
 800c842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c846:	bf00      	nop
 800c848:	0800e150 	.word	0x0800e150
 800c84c:	0800e077 	.word	0x0800e077
 800c850:	0800e0f7 	.word	0x0800e0f7

0800c854 <__lshift>:
 800c854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c858:	460c      	mov	r4, r1
 800c85a:	4607      	mov	r7, r0
 800c85c:	4691      	mov	r9, r2
 800c85e:	6923      	ldr	r3, [r4, #16]
 800c860:	6849      	ldr	r1, [r1, #4]
 800c862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c866:	68a3      	ldr	r3, [r4, #8]
 800c868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c86c:	f108 0601 	add.w	r6, r8, #1
 800c870:	42b3      	cmp	r3, r6
 800c872:	db0b      	blt.n	800c88c <__lshift+0x38>
 800c874:	4638      	mov	r0, r7
 800c876:	f7ff fde1 	bl	800c43c <_Balloc>
 800c87a:	4605      	mov	r5, r0
 800c87c:	b948      	cbnz	r0, 800c892 <__lshift+0x3e>
 800c87e:	4602      	mov	r2, r0
 800c880:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c884:	4b27      	ldr	r3, [pc, #156]	@ (800c924 <__lshift+0xd0>)
 800c886:	4828      	ldr	r0, [pc, #160]	@ (800c928 <__lshift+0xd4>)
 800c888:	f000 fb82 	bl	800cf90 <__assert_func>
 800c88c:	3101      	adds	r1, #1
 800c88e:	005b      	lsls	r3, r3, #1
 800c890:	e7ee      	b.n	800c870 <__lshift+0x1c>
 800c892:	2300      	movs	r3, #0
 800c894:	f100 0114 	add.w	r1, r0, #20
 800c898:	f100 0210 	add.w	r2, r0, #16
 800c89c:	4618      	mov	r0, r3
 800c89e:	4553      	cmp	r3, sl
 800c8a0:	db33      	blt.n	800c90a <__lshift+0xb6>
 800c8a2:	6920      	ldr	r0, [r4, #16]
 800c8a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8a8:	f104 0314 	add.w	r3, r4, #20
 800c8ac:	f019 091f 	ands.w	r9, r9, #31
 800c8b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8b8:	d02b      	beq.n	800c912 <__lshift+0xbe>
 800c8ba:	468a      	mov	sl, r1
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f1c9 0e20 	rsb	lr, r9, #32
 800c8c2:	6818      	ldr	r0, [r3, #0]
 800c8c4:	fa00 f009 	lsl.w	r0, r0, r9
 800c8c8:	4310      	orrs	r0, r2
 800c8ca:	f84a 0b04 	str.w	r0, [sl], #4
 800c8ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8d2:	459c      	cmp	ip, r3
 800c8d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8d8:	d8f3      	bhi.n	800c8c2 <__lshift+0x6e>
 800c8da:	ebac 0304 	sub.w	r3, ip, r4
 800c8de:	3b15      	subs	r3, #21
 800c8e0:	f023 0303 	bic.w	r3, r3, #3
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	f104 0015 	add.w	r0, r4, #21
 800c8ea:	4584      	cmp	ip, r0
 800c8ec:	bf38      	it	cc
 800c8ee:	2304      	movcc	r3, #4
 800c8f0:	50ca      	str	r2, [r1, r3]
 800c8f2:	b10a      	cbz	r2, 800c8f8 <__lshift+0xa4>
 800c8f4:	f108 0602 	add.w	r6, r8, #2
 800c8f8:	3e01      	subs	r6, #1
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	612e      	str	r6, [r5, #16]
 800c900:	f7ff fddc 	bl	800c4bc <_Bfree>
 800c904:	4628      	mov	r0, r5
 800c906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c90a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c90e:	3301      	adds	r3, #1
 800c910:	e7c5      	b.n	800c89e <__lshift+0x4a>
 800c912:	3904      	subs	r1, #4
 800c914:	f853 2b04 	ldr.w	r2, [r3], #4
 800c918:	459c      	cmp	ip, r3
 800c91a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c91e:	d8f9      	bhi.n	800c914 <__lshift+0xc0>
 800c920:	e7ea      	b.n	800c8f8 <__lshift+0xa4>
 800c922:	bf00      	nop
 800c924:	0800e0e6 	.word	0x0800e0e6
 800c928:	0800e0f7 	.word	0x0800e0f7

0800c92c <__mcmp>:
 800c92c:	4603      	mov	r3, r0
 800c92e:	690a      	ldr	r2, [r1, #16]
 800c930:	6900      	ldr	r0, [r0, #16]
 800c932:	b530      	push	{r4, r5, lr}
 800c934:	1a80      	subs	r0, r0, r2
 800c936:	d10e      	bne.n	800c956 <__mcmp+0x2a>
 800c938:	3314      	adds	r3, #20
 800c93a:	3114      	adds	r1, #20
 800c93c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c940:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c944:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c948:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c94c:	4295      	cmp	r5, r2
 800c94e:	d003      	beq.n	800c958 <__mcmp+0x2c>
 800c950:	d205      	bcs.n	800c95e <__mcmp+0x32>
 800c952:	f04f 30ff 	mov.w	r0, #4294967295
 800c956:	bd30      	pop	{r4, r5, pc}
 800c958:	42a3      	cmp	r3, r4
 800c95a:	d3f3      	bcc.n	800c944 <__mcmp+0x18>
 800c95c:	e7fb      	b.n	800c956 <__mcmp+0x2a>
 800c95e:	2001      	movs	r0, #1
 800c960:	e7f9      	b.n	800c956 <__mcmp+0x2a>
	...

0800c964 <__mdiff>:
 800c964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c968:	4689      	mov	r9, r1
 800c96a:	4606      	mov	r6, r0
 800c96c:	4611      	mov	r1, r2
 800c96e:	4648      	mov	r0, r9
 800c970:	4614      	mov	r4, r2
 800c972:	f7ff ffdb 	bl	800c92c <__mcmp>
 800c976:	1e05      	subs	r5, r0, #0
 800c978:	d112      	bne.n	800c9a0 <__mdiff+0x3c>
 800c97a:	4629      	mov	r1, r5
 800c97c:	4630      	mov	r0, r6
 800c97e:	f7ff fd5d 	bl	800c43c <_Balloc>
 800c982:	4602      	mov	r2, r0
 800c984:	b928      	cbnz	r0, 800c992 <__mdiff+0x2e>
 800c986:	f240 2137 	movw	r1, #567	@ 0x237
 800c98a:	4b3e      	ldr	r3, [pc, #248]	@ (800ca84 <__mdiff+0x120>)
 800c98c:	483e      	ldr	r0, [pc, #248]	@ (800ca88 <__mdiff+0x124>)
 800c98e:	f000 faff 	bl	800cf90 <__assert_func>
 800c992:	2301      	movs	r3, #1
 800c994:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c998:	4610      	mov	r0, r2
 800c99a:	b003      	add	sp, #12
 800c99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a0:	bfbc      	itt	lt
 800c9a2:	464b      	movlt	r3, r9
 800c9a4:	46a1      	movlt	r9, r4
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c9ac:	bfba      	itte	lt
 800c9ae:	461c      	movlt	r4, r3
 800c9b0:	2501      	movlt	r5, #1
 800c9b2:	2500      	movge	r5, #0
 800c9b4:	f7ff fd42 	bl	800c43c <_Balloc>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	b918      	cbnz	r0, 800c9c4 <__mdiff+0x60>
 800c9bc:	f240 2145 	movw	r1, #581	@ 0x245
 800c9c0:	4b30      	ldr	r3, [pc, #192]	@ (800ca84 <__mdiff+0x120>)
 800c9c2:	e7e3      	b.n	800c98c <__mdiff+0x28>
 800c9c4:	f100 0b14 	add.w	fp, r0, #20
 800c9c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c9cc:	f109 0310 	add.w	r3, r9, #16
 800c9d0:	60c5      	str	r5, [r0, #12]
 800c9d2:	f04f 0c00 	mov.w	ip, #0
 800c9d6:	f109 0514 	add.w	r5, r9, #20
 800c9da:	46d9      	mov	r9, fp
 800c9dc:	6926      	ldr	r6, [r4, #16]
 800c9de:	f104 0e14 	add.w	lr, r4, #20
 800c9e2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c9e6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c9ea:	9301      	str	r3, [sp, #4]
 800c9ec:	9b01      	ldr	r3, [sp, #4]
 800c9ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c9f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c9f6:	b281      	uxth	r1, r0
 800c9f8:	9301      	str	r3, [sp, #4]
 800c9fa:	fa1f f38a 	uxth.w	r3, sl
 800c9fe:	1a5b      	subs	r3, r3, r1
 800ca00:	0c00      	lsrs	r0, r0, #16
 800ca02:	4463      	add	r3, ip
 800ca04:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ca08:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ca12:	4576      	cmp	r6, lr
 800ca14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca18:	f849 3b04 	str.w	r3, [r9], #4
 800ca1c:	d8e6      	bhi.n	800c9ec <__mdiff+0x88>
 800ca1e:	1b33      	subs	r3, r6, r4
 800ca20:	3b15      	subs	r3, #21
 800ca22:	f023 0303 	bic.w	r3, r3, #3
 800ca26:	3415      	adds	r4, #21
 800ca28:	3304      	adds	r3, #4
 800ca2a:	42a6      	cmp	r6, r4
 800ca2c:	bf38      	it	cc
 800ca2e:	2304      	movcc	r3, #4
 800ca30:	441d      	add	r5, r3
 800ca32:	445b      	add	r3, fp
 800ca34:	461e      	mov	r6, r3
 800ca36:	462c      	mov	r4, r5
 800ca38:	4544      	cmp	r4, r8
 800ca3a:	d30e      	bcc.n	800ca5a <__mdiff+0xf6>
 800ca3c:	f108 0103 	add.w	r1, r8, #3
 800ca40:	1b49      	subs	r1, r1, r5
 800ca42:	f021 0103 	bic.w	r1, r1, #3
 800ca46:	3d03      	subs	r5, #3
 800ca48:	45a8      	cmp	r8, r5
 800ca4a:	bf38      	it	cc
 800ca4c:	2100      	movcc	r1, #0
 800ca4e:	440b      	add	r3, r1
 800ca50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca54:	b199      	cbz	r1, 800ca7e <__mdiff+0x11a>
 800ca56:	6117      	str	r7, [r2, #16]
 800ca58:	e79e      	b.n	800c998 <__mdiff+0x34>
 800ca5a:	46e6      	mov	lr, ip
 800ca5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca60:	fa1f fc81 	uxth.w	ip, r1
 800ca64:	44f4      	add	ip, lr
 800ca66:	0c08      	lsrs	r0, r1, #16
 800ca68:	4471      	add	r1, lr
 800ca6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca6e:	b289      	uxth	r1, r1
 800ca70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca78:	f846 1b04 	str.w	r1, [r6], #4
 800ca7c:	e7dc      	b.n	800ca38 <__mdiff+0xd4>
 800ca7e:	3f01      	subs	r7, #1
 800ca80:	e7e6      	b.n	800ca50 <__mdiff+0xec>
 800ca82:	bf00      	nop
 800ca84:	0800e0e6 	.word	0x0800e0e6
 800ca88:	0800e0f7 	.word	0x0800e0f7

0800ca8c <__d2b>:
 800ca8c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ca90:	2101      	movs	r1, #1
 800ca92:	4690      	mov	r8, r2
 800ca94:	4699      	mov	r9, r3
 800ca96:	9e08      	ldr	r6, [sp, #32]
 800ca98:	f7ff fcd0 	bl	800c43c <_Balloc>
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	b930      	cbnz	r0, 800caae <__d2b+0x22>
 800caa0:	4602      	mov	r2, r0
 800caa2:	f240 310f 	movw	r1, #783	@ 0x30f
 800caa6:	4b23      	ldr	r3, [pc, #140]	@ (800cb34 <__d2b+0xa8>)
 800caa8:	4823      	ldr	r0, [pc, #140]	@ (800cb38 <__d2b+0xac>)
 800caaa:	f000 fa71 	bl	800cf90 <__assert_func>
 800caae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cab2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cab6:	b10d      	cbz	r5, 800cabc <__d2b+0x30>
 800cab8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cabc:	9301      	str	r3, [sp, #4]
 800cabe:	f1b8 0300 	subs.w	r3, r8, #0
 800cac2:	d024      	beq.n	800cb0e <__d2b+0x82>
 800cac4:	4668      	mov	r0, sp
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	f7ff fd7f 	bl	800c5ca <__lo0bits>
 800cacc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cad0:	b1d8      	cbz	r0, 800cb0a <__d2b+0x7e>
 800cad2:	f1c0 0320 	rsb	r3, r0, #32
 800cad6:	fa02 f303 	lsl.w	r3, r2, r3
 800cada:	430b      	orrs	r3, r1
 800cadc:	40c2      	lsrs	r2, r0
 800cade:	6163      	str	r3, [r4, #20]
 800cae0:	9201      	str	r2, [sp, #4]
 800cae2:	9b01      	ldr	r3, [sp, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	bf0c      	ite	eq
 800cae8:	2201      	moveq	r2, #1
 800caea:	2202      	movne	r2, #2
 800caec:	61a3      	str	r3, [r4, #24]
 800caee:	6122      	str	r2, [r4, #16]
 800caf0:	b1ad      	cbz	r5, 800cb1e <__d2b+0x92>
 800caf2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800caf6:	4405      	add	r5, r0
 800caf8:	6035      	str	r5, [r6, #0]
 800cafa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb00:	6018      	str	r0, [r3, #0]
 800cb02:	4620      	mov	r0, r4
 800cb04:	b002      	add	sp, #8
 800cb06:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cb0a:	6161      	str	r1, [r4, #20]
 800cb0c:	e7e9      	b.n	800cae2 <__d2b+0x56>
 800cb0e:	a801      	add	r0, sp, #4
 800cb10:	f7ff fd5b 	bl	800c5ca <__lo0bits>
 800cb14:	9b01      	ldr	r3, [sp, #4]
 800cb16:	2201      	movs	r2, #1
 800cb18:	6163      	str	r3, [r4, #20]
 800cb1a:	3020      	adds	r0, #32
 800cb1c:	e7e7      	b.n	800caee <__d2b+0x62>
 800cb1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cb22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb26:	6030      	str	r0, [r6, #0]
 800cb28:	6918      	ldr	r0, [r3, #16]
 800cb2a:	f7ff fd2f 	bl	800c58c <__hi0bits>
 800cb2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb32:	e7e4      	b.n	800cafe <__d2b+0x72>
 800cb34:	0800e0e6 	.word	0x0800e0e6
 800cb38:	0800e0f7 	.word	0x0800e0f7

0800cb3c <__ssputs_r>:
 800cb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb40:	461f      	mov	r7, r3
 800cb42:	688e      	ldr	r6, [r1, #8]
 800cb44:	4682      	mov	sl, r0
 800cb46:	42be      	cmp	r6, r7
 800cb48:	460c      	mov	r4, r1
 800cb4a:	4690      	mov	r8, r2
 800cb4c:	680b      	ldr	r3, [r1, #0]
 800cb4e:	d82d      	bhi.n	800cbac <__ssputs_r+0x70>
 800cb50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb58:	d026      	beq.n	800cba8 <__ssputs_r+0x6c>
 800cb5a:	6965      	ldr	r5, [r4, #20]
 800cb5c:	6909      	ldr	r1, [r1, #16]
 800cb5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb62:	eba3 0901 	sub.w	r9, r3, r1
 800cb66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb6a:	1c7b      	adds	r3, r7, #1
 800cb6c:	444b      	add	r3, r9
 800cb6e:	106d      	asrs	r5, r5, #1
 800cb70:	429d      	cmp	r5, r3
 800cb72:	bf38      	it	cc
 800cb74:	461d      	movcc	r5, r3
 800cb76:	0553      	lsls	r3, r2, #21
 800cb78:	d527      	bpl.n	800cbca <__ssputs_r+0x8e>
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	f7ff fbd2 	bl	800c324 <_malloc_r>
 800cb80:	4606      	mov	r6, r0
 800cb82:	b360      	cbz	r0, 800cbde <__ssputs_r+0xa2>
 800cb84:	464a      	mov	r2, r9
 800cb86:	6921      	ldr	r1, [r4, #16]
 800cb88:	f7fe fcf9 	bl	800b57e <memcpy>
 800cb8c:	89a3      	ldrh	r3, [r4, #12]
 800cb8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb96:	81a3      	strh	r3, [r4, #12]
 800cb98:	6126      	str	r6, [r4, #16]
 800cb9a:	444e      	add	r6, r9
 800cb9c:	6026      	str	r6, [r4, #0]
 800cb9e:	463e      	mov	r6, r7
 800cba0:	6165      	str	r5, [r4, #20]
 800cba2:	eba5 0509 	sub.w	r5, r5, r9
 800cba6:	60a5      	str	r5, [r4, #8]
 800cba8:	42be      	cmp	r6, r7
 800cbaa:	d900      	bls.n	800cbae <__ssputs_r+0x72>
 800cbac:	463e      	mov	r6, r7
 800cbae:	4632      	mov	r2, r6
 800cbb0:	4641      	mov	r1, r8
 800cbb2:	6820      	ldr	r0, [r4, #0]
 800cbb4:	f000 f9c2 	bl	800cf3c <memmove>
 800cbb8:	2000      	movs	r0, #0
 800cbba:	68a3      	ldr	r3, [r4, #8]
 800cbbc:	1b9b      	subs	r3, r3, r6
 800cbbe:	60a3      	str	r3, [r4, #8]
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	4433      	add	r3, r6
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbca:	462a      	mov	r2, r5
 800cbcc:	f000 fa24 	bl	800d018 <_realloc_r>
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	d1e0      	bne.n	800cb98 <__ssputs_r+0x5c>
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	6921      	ldr	r1, [r4, #16]
 800cbda:	f7ff fb31 	bl	800c240 <_free_r>
 800cbde:	230c      	movs	r3, #12
 800cbe0:	f8ca 3000 	str.w	r3, [sl]
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbee:	81a3      	strh	r3, [r4, #12]
 800cbf0:	e7e9      	b.n	800cbc6 <__ssputs_r+0x8a>
	...

0800cbf4 <_svfiprintf_r>:
 800cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	4698      	mov	r8, r3
 800cbfa:	898b      	ldrh	r3, [r1, #12]
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	061b      	lsls	r3, r3, #24
 800cc00:	460d      	mov	r5, r1
 800cc02:	4614      	mov	r4, r2
 800cc04:	b09d      	sub	sp, #116	@ 0x74
 800cc06:	d510      	bpl.n	800cc2a <_svfiprintf_r+0x36>
 800cc08:	690b      	ldr	r3, [r1, #16]
 800cc0a:	b973      	cbnz	r3, 800cc2a <_svfiprintf_r+0x36>
 800cc0c:	2140      	movs	r1, #64	@ 0x40
 800cc0e:	f7ff fb89 	bl	800c324 <_malloc_r>
 800cc12:	6028      	str	r0, [r5, #0]
 800cc14:	6128      	str	r0, [r5, #16]
 800cc16:	b930      	cbnz	r0, 800cc26 <_svfiprintf_r+0x32>
 800cc18:	230c      	movs	r3, #12
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc20:	b01d      	add	sp, #116	@ 0x74
 800cc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc26:	2340      	movs	r3, #64	@ 0x40
 800cc28:	616b      	str	r3, [r5, #20]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc2e:	2320      	movs	r3, #32
 800cc30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc34:	2330      	movs	r3, #48	@ 0x30
 800cc36:	f04f 0901 	mov.w	r9, #1
 800cc3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc3e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cdd8 <_svfiprintf_r+0x1e4>
 800cc42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc46:	4623      	mov	r3, r4
 800cc48:	469a      	mov	sl, r3
 800cc4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc4e:	b10a      	cbz	r2, 800cc54 <_svfiprintf_r+0x60>
 800cc50:	2a25      	cmp	r2, #37	@ 0x25
 800cc52:	d1f9      	bne.n	800cc48 <_svfiprintf_r+0x54>
 800cc54:	ebba 0b04 	subs.w	fp, sl, r4
 800cc58:	d00b      	beq.n	800cc72 <_svfiprintf_r+0x7e>
 800cc5a:	465b      	mov	r3, fp
 800cc5c:	4622      	mov	r2, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	4638      	mov	r0, r7
 800cc62:	f7ff ff6b 	bl	800cb3c <__ssputs_r>
 800cc66:	3001      	adds	r0, #1
 800cc68:	f000 80a7 	beq.w	800cdba <_svfiprintf_r+0x1c6>
 800cc6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc6e:	445a      	add	r2, fp
 800cc70:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc72:	f89a 3000 	ldrb.w	r3, [sl]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f000 809f 	beq.w	800cdba <_svfiprintf_r+0x1c6>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc86:	f10a 0a01 	add.w	sl, sl, #1
 800cc8a:	9304      	str	r3, [sp, #16]
 800cc8c:	9307      	str	r3, [sp, #28]
 800cc8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc92:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc94:	4654      	mov	r4, sl
 800cc96:	2205      	movs	r2, #5
 800cc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc9c:	484e      	ldr	r0, [pc, #312]	@ (800cdd8 <_svfiprintf_r+0x1e4>)
 800cc9e:	f7fe fc60 	bl	800b562 <memchr>
 800cca2:	9a04      	ldr	r2, [sp, #16]
 800cca4:	b9d8      	cbnz	r0, 800ccde <_svfiprintf_r+0xea>
 800cca6:	06d0      	lsls	r0, r2, #27
 800cca8:	bf44      	itt	mi
 800ccaa:	2320      	movmi	r3, #32
 800ccac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccb0:	0711      	lsls	r1, r2, #28
 800ccb2:	bf44      	itt	mi
 800ccb4:	232b      	movmi	r3, #43	@ 0x2b
 800ccb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccba:	f89a 3000 	ldrb.w	r3, [sl]
 800ccbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccc0:	d015      	beq.n	800ccee <_svfiprintf_r+0xfa>
 800ccc2:	4654      	mov	r4, sl
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	f04f 0c0a 	mov.w	ip, #10
 800ccca:	9a07      	ldr	r2, [sp, #28]
 800cccc:	4621      	mov	r1, r4
 800ccce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccd2:	3b30      	subs	r3, #48	@ 0x30
 800ccd4:	2b09      	cmp	r3, #9
 800ccd6:	d94b      	bls.n	800cd70 <_svfiprintf_r+0x17c>
 800ccd8:	b1b0      	cbz	r0, 800cd08 <_svfiprintf_r+0x114>
 800ccda:	9207      	str	r2, [sp, #28]
 800ccdc:	e014      	b.n	800cd08 <_svfiprintf_r+0x114>
 800ccde:	eba0 0308 	sub.w	r3, r0, r8
 800cce2:	fa09 f303 	lsl.w	r3, r9, r3
 800cce6:	4313      	orrs	r3, r2
 800cce8:	46a2      	mov	sl, r4
 800ccea:	9304      	str	r3, [sp, #16]
 800ccec:	e7d2      	b.n	800cc94 <_svfiprintf_r+0xa0>
 800ccee:	9b03      	ldr	r3, [sp, #12]
 800ccf0:	1d19      	adds	r1, r3, #4
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	9103      	str	r1, [sp, #12]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	bfbb      	ittet	lt
 800ccfa:	425b      	neglt	r3, r3
 800ccfc:	f042 0202 	orrlt.w	r2, r2, #2
 800cd00:	9307      	strge	r3, [sp, #28]
 800cd02:	9307      	strlt	r3, [sp, #28]
 800cd04:	bfb8      	it	lt
 800cd06:	9204      	strlt	r2, [sp, #16]
 800cd08:	7823      	ldrb	r3, [r4, #0]
 800cd0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd0c:	d10a      	bne.n	800cd24 <_svfiprintf_r+0x130>
 800cd0e:	7863      	ldrb	r3, [r4, #1]
 800cd10:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd12:	d132      	bne.n	800cd7a <_svfiprintf_r+0x186>
 800cd14:	9b03      	ldr	r3, [sp, #12]
 800cd16:	3402      	adds	r4, #2
 800cd18:	1d1a      	adds	r2, r3, #4
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	9203      	str	r2, [sp, #12]
 800cd1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd22:	9305      	str	r3, [sp, #20]
 800cd24:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cddc <_svfiprintf_r+0x1e8>
 800cd28:	2203      	movs	r2, #3
 800cd2a:	4650      	mov	r0, sl
 800cd2c:	7821      	ldrb	r1, [r4, #0]
 800cd2e:	f7fe fc18 	bl	800b562 <memchr>
 800cd32:	b138      	cbz	r0, 800cd44 <_svfiprintf_r+0x150>
 800cd34:	2240      	movs	r2, #64	@ 0x40
 800cd36:	9b04      	ldr	r3, [sp, #16]
 800cd38:	eba0 000a 	sub.w	r0, r0, sl
 800cd3c:	4082      	lsls	r2, r0
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	3401      	adds	r4, #1
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd48:	2206      	movs	r2, #6
 800cd4a:	4825      	ldr	r0, [pc, #148]	@ (800cde0 <_svfiprintf_r+0x1ec>)
 800cd4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd50:	f7fe fc07 	bl	800b562 <memchr>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d036      	beq.n	800cdc6 <_svfiprintf_r+0x1d2>
 800cd58:	4b22      	ldr	r3, [pc, #136]	@ (800cde4 <_svfiprintf_r+0x1f0>)
 800cd5a:	bb1b      	cbnz	r3, 800cda4 <_svfiprintf_r+0x1b0>
 800cd5c:	9b03      	ldr	r3, [sp, #12]
 800cd5e:	3307      	adds	r3, #7
 800cd60:	f023 0307 	bic.w	r3, r3, #7
 800cd64:	3308      	adds	r3, #8
 800cd66:	9303      	str	r3, [sp, #12]
 800cd68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd6a:	4433      	add	r3, r6
 800cd6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd6e:	e76a      	b.n	800cc46 <_svfiprintf_r+0x52>
 800cd70:	460c      	mov	r4, r1
 800cd72:	2001      	movs	r0, #1
 800cd74:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd78:	e7a8      	b.n	800cccc <_svfiprintf_r+0xd8>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f04f 0c0a 	mov.w	ip, #10
 800cd80:	4619      	mov	r1, r3
 800cd82:	3401      	adds	r4, #1
 800cd84:	9305      	str	r3, [sp, #20]
 800cd86:	4620      	mov	r0, r4
 800cd88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd8c:	3a30      	subs	r2, #48	@ 0x30
 800cd8e:	2a09      	cmp	r2, #9
 800cd90:	d903      	bls.n	800cd9a <_svfiprintf_r+0x1a6>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d0c6      	beq.n	800cd24 <_svfiprintf_r+0x130>
 800cd96:	9105      	str	r1, [sp, #20]
 800cd98:	e7c4      	b.n	800cd24 <_svfiprintf_r+0x130>
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cda2:	e7f0      	b.n	800cd86 <_svfiprintf_r+0x192>
 800cda4:	ab03      	add	r3, sp, #12
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	462a      	mov	r2, r5
 800cdaa:	4638      	mov	r0, r7
 800cdac:	4b0e      	ldr	r3, [pc, #56]	@ (800cde8 <_svfiprintf_r+0x1f4>)
 800cdae:	a904      	add	r1, sp, #16
 800cdb0:	f7fd fdea 	bl	800a988 <_printf_float>
 800cdb4:	1c42      	adds	r2, r0, #1
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	d1d6      	bne.n	800cd68 <_svfiprintf_r+0x174>
 800cdba:	89ab      	ldrh	r3, [r5, #12]
 800cdbc:	065b      	lsls	r3, r3, #25
 800cdbe:	f53f af2d 	bmi.w	800cc1c <_svfiprintf_r+0x28>
 800cdc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cdc4:	e72c      	b.n	800cc20 <_svfiprintf_r+0x2c>
 800cdc6:	ab03      	add	r3, sp, #12
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	462a      	mov	r2, r5
 800cdcc:	4638      	mov	r0, r7
 800cdce:	4b06      	ldr	r3, [pc, #24]	@ (800cde8 <_svfiprintf_r+0x1f4>)
 800cdd0:	a904      	add	r1, sp, #16
 800cdd2:	f7fe f877 	bl	800aec4 <_printf_i>
 800cdd6:	e7ed      	b.n	800cdb4 <_svfiprintf_r+0x1c0>
 800cdd8:	0800e250 	.word	0x0800e250
 800cddc:	0800e256 	.word	0x0800e256
 800cde0:	0800e25a 	.word	0x0800e25a
 800cde4:	0800a989 	.word	0x0800a989
 800cde8:	0800cb3d 	.word	0x0800cb3d

0800cdec <__sflush_r>:
 800cdec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf2:	0716      	lsls	r6, r2, #28
 800cdf4:	4605      	mov	r5, r0
 800cdf6:	460c      	mov	r4, r1
 800cdf8:	d454      	bmi.n	800cea4 <__sflush_r+0xb8>
 800cdfa:	684b      	ldr	r3, [r1, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	dc02      	bgt.n	800ce06 <__sflush_r+0x1a>
 800ce00:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	dd48      	ble.n	800ce98 <__sflush_r+0xac>
 800ce06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce08:	2e00      	cmp	r6, #0
 800ce0a:	d045      	beq.n	800ce98 <__sflush_r+0xac>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce12:	682f      	ldr	r7, [r5, #0]
 800ce14:	6a21      	ldr	r1, [r4, #32]
 800ce16:	602b      	str	r3, [r5, #0]
 800ce18:	d030      	beq.n	800ce7c <__sflush_r+0x90>
 800ce1a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	0759      	lsls	r1, r3, #29
 800ce20:	d505      	bpl.n	800ce2e <__sflush_r+0x42>
 800ce22:	6863      	ldr	r3, [r4, #4]
 800ce24:	1ad2      	subs	r2, r2, r3
 800ce26:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce28:	b10b      	cbz	r3, 800ce2e <__sflush_r+0x42>
 800ce2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce2c:	1ad2      	subs	r2, r2, r3
 800ce2e:	2300      	movs	r3, #0
 800ce30:	4628      	mov	r0, r5
 800ce32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce34:	6a21      	ldr	r1, [r4, #32]
 800ce36:	47b0      	blx	r6
 800ce38:	1c43      	adds	r3, r0, #1
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	d106      	bne.n	800ce4c <__sflush_r+0x60>
 800ce3e:	6829      	ldr	r1, [r5, #0]
 800ce40:	291d      	cmp	r1, #29
 800ce42:	d82b      	bhi.n	800ce9c <__sflush_r+0xb0>
 800ce44:	4a28      	ldr	r2, [pc, #160]	@ (800cee8 <__sflush_r+0xfc>)
 800ce46:	410a      	asrs	r2, r1
 800ce48:	07d6      	lsls	r6, r2, #31
 800ce4a:	d427      	bmi.n	800ce9c <__sflush_r+0xb0>
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	6062      	str	r2, [r4, #4]
 800ce50:	6922      	ldr	r2, [r4, #16]
 800ce52:	04d9      	lsls	r1, r3, #19
 800ce54:	6022      	str	r2, [r4, #0]
 800ce56:	d504      	bpl.n	800ce62 <__sflush_r+0x76>
 800ce58:	1c42      	adds	r2, r0, #1
 800ce5a:	d101      	bne.n	800ce60 <__sflush_r+0x74>
 800ce5c:	682b      	ldr	r3, [r5, #0]
 800ce5e:	b903      	cbnz	r3, 800ce62 <__sflush_r+0x76>
 800ce60:	6560      	str	r0, [r4, #84]	@ 0x54
 800ce62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce64:	602f      	str	r7, [r5, #0]
 800ce66:	b1b9      	cbz	r1, 800ce98 <__sflush_r+0xac>
 800ce68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce6c:	4299      	cmp	r1, r3
 800ce6e:	d002      	beq.n	800ce76 <__sflush_r+0x8a>
 800ce70:	4628      	mov	r0, r5
 800ce72:	f7ff f9e5 	bl	800c240 <_free_r>
 800ce76:	2300      	movs	r3, #0
 800ce78:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce7a:	e00d      	b.n	800ce98 <__sflush_r+0xac>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	4628      	mov	r0, r5
 800ce80:	47b0      	blx	r6
 800ce82:	4602      	mov	r2, r0
 800ce84:	1c50      	adds	r0, r2, #1
 800ce86:	d1c9      	bne.n	800ce1c <__sflush_r+0x30>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0c6      	beq.n	800ce1c <__sflush_r+0x30>
 800ce8e:	2b1d      	cmp	r3, #29
 800ce90:	d001      	beq.n	800ce96 <__sflush_r+0xaa>
 800ce92:	2b16      	cmp	r3, #22
 800ce94:	d11d      	bne.n	800ced2 <__sflush_r+0xe6>
 800ce96:	602f      	str	r7, [r5, #0]
 800ce98:	2000      	movs	r0, #0
 800ce9a:	e021      	b.n	800cee0 <__sflush_r+0xf4>
 800ce9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cea0:	b21b      	sxth	r3, r3
 800cea2:	e01a      	b.n	800ceda <__sflush_r+0xee>
 800cea4:	690f      	ldr	r7, [r1, #16]
 800cea6:	2f00      	cmp	r7, #0
 800cea8:	d0f6      	beq.n	800ce98 <__sflush_r+0xac>
 800ceaa:	0793      	lsls	r3, r2, #30
 800ceac:	bf18      	it	ne
 800ceae:	2300      	movne	r3, #0
 800ceb0:	680e      	ldr	r6, [r1, #0]
 800ceb2:	bf08      	it	eq
 800ceb4:	694b      	ldreq	r3, [r1, #20]
 800ceb6:	1bf6      	subs	r6, r6, r7
 800ceb8:	600f      	str	r7, [r1, #0]
 800ceba:	608b      	str	r3, [r1, #8]
 800cebc:	2e00      	cmp	r6, #0
 800cebe:	ddeb      	ble.n	800ce98 <__sflush_r+0xac>
 800cec0:	4633      	mov	r3, r6
 800cec2:	463a      	mov	r2, r7
 800cec4:	4628      	mov	r0, r5
 800cec6:	6a21      	ldr	r1, [r4, #32]
 800cec8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cecc:	47e0      	blx	ip
 800cece:	2800      	cmp	r0, #0
 800ced0:	dc07      	bgt.n	800cee2 <__sflush_r+0xf6>
 800ced2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ced6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceda:	f04f 30ff 	mov.w	r0, #4294967295
 800cede:	81a3      	strh	r3, [r4, #12]
 800cee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cee2:	4407      	add	r7, r0
 800cee4:	1a36      	subs	r6, r6, r0
 800cee6:	e7e9      	b.n	800cebc <__sflush_r+0xd0>
 800cee8:	dfbffffe 	.word	0xdfbffffe

0800ceec <_fflush_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	690b      	ldr	r3, [r1, #16]
 800cef0:	4605      	mov	r5, r0
 800cef2:	460c      	mov	r4, r1
 800cef4:	b913      	cbnz	r3, 800cefc <_fflush_r+0x10>
 800cef6:	2500      	movs	r5, #0
 800cef8:	4628      	mov	r0, r5
 800cefa:	bd38      	pop	{r3, r4, r5, pc}
 800cefc:	b118      	cbz	r0, 800cf06 <_fflush_r+0x1a>
 800cefe:	6a03      	ldr	r3, [r0, #32]
 800cf00:	b90b      	cbnz	r3, 800cf06 <_fflush_r+0x1a>
 800cf02:	f7fe f98b 	bl	800b21c <__sinit>
 800cf06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d0f3      	beq.n	800cef6 <_fflush_r+0xa>
 800cf0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf10:	07d0      	lsls	r0, r2, #31
 800cf12:	d404      	bmi.n	800cf1e <_fflush_r+0x32>
 800cf14:	0599      	lsls	r1, r3, #22
 800cf16:	d402      	bmi.n	800cf1e <_fflush_r+0x32>
 800cf18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf1a:	f7fe fb20 	bl	800b55e <__retarget_lock_acquire_recursive>
 800cf1e:	4628      	mov	r0, r5
 800cf20:	4621      	mov	r1, r4
 800cf22:	f7ff ff63 	bl	800cdec <__sflush_r>
 800cf26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf28:	4605      	mov	r5, r0
 800cf2a:	07da      	lsls	r2, r3, #31
 800cf2c:	d4e4      	bmi.n	800cef8 <_fflush_r+0xc>
 800cf2e:	89a3      	ldrh	r3, [r4, #12]
 800cf30:	059b      	lsls	r3, r3, #22
 800cf32:	d4e1      	bmi.n	800cef8 <_fflush_r+0xc>
 800cf34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf36:	f7fe fb13 	bl	800b560 <__retarget_lock_release_recursive>
 800cf3a:	e7dd      	b.n	800cef8 <_fflush_r+0xc>

0800cf3c <memmove>:
 800cf3c:	4288      	cmp	r0, r1
 800cf3e:	b510      	push	{r4, lr}
 800cf40:	eb01 0402 	add.w	r4, r1, r2
 800cf44:	d902      	bls.n	800cf4c <memmove+0x10>
 800cf46:	4284      	cmp	r4, r0
 800cf48:	4623      	mov	r3, r4
 800cf4a:	d807      	bhi.n	800cf5c <memmove+0x20>
 800cf4c:	1e43      	subs	r3, r0, #1
 800cf4e:	42a1      	cmp	r1, r4
 800cf50:	d008      	beq.n	800cf64 <memmove+0x28>
 800cf52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf5a:	e7f8      	b.n	800cf4e <memmove+0x12>
 800cf5c:	4601      	mov	r1, r0
 800cf5e:	4402      	add	r2, r0
 800cf60:	428a      	cmp	r2, r1
 800cf62:	d100      	bne.n	800cf66 <memmove+0x2a>
 800cf64:	bd10      	pop	{r4, pc}
 800cf66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf6e:	e7f7      	b.n	800cf60 <memmove+0x24>

0800cf70 <_sbrk_r>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	2300      	movs	r3, #0
 800cf74:	4d05      	ldr	r5, [pc, #20]	@ (800cf8c <_sbrk_r+0x1c>)
 800cf76:	4604      	mov	r4, r0
 800cf78:	4608      	mov	r0, r1
 800cf7a:	602b      	str	r3, [r5, #0]
 800cf7c:	f7f9 fba2 	bl	80066c4 <_sbrk>
 800cf80:	1c43      	adds	r3, r0, #1
 800cf82:	d102      	bne.n	800cf8a <_sbrk_r+0x1a>
 800cf84:	682b      	ldr	r3, [r5, #0]
 800cf86:	b103      	cbz	r3, 800cf8a <_sbrk_r+0x1a>
 800cf88:	6023      	str	r3, [r4, #0]
 800cf8a:	bd38      	pop	{r3, r4, r5, pc}
 800cf8c:	20001650 	.word	0x20001650

0800cf90 <__assert_func>:
 800cf90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf92:	4614      	mov	r4, r2
 800cf94:	461a      	mov	r2, r3
 800cf96:	4b09      	ldr	r3, [pc, #36]	@ (800cfbc <__assert_func+0x2c>)
 800cf98:	4605      	mov	r5, r0
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68d8      	ldr	r0, [r3, #12]
 800cf9e:	b954      	cbnz	r4, 800cfb6 <__assert_func+0x26>
 800cfa0:	4b07      	ldr	r3, [pc, #28]	@ (800cfc0 <__assert_func+0x30>)
 800cfa2:	461c      	mov	r4, r3
 800cfa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfa8:	9100      	str	r1, [sp, #0]
 800cfaa:	462b      	mov	r3, r5
 800cfac:	4905      	ldr	r1, [pc, #20]	@ (800cfc4 <__assert_func+0x34>)
 800cfae:	f000 f86f 	bl	800d090 <fiprintf>
 800cfb2:	f000 f87f 	bl	800d0b4 <abort>
 800cfb6:	4b04      	ldr	r3, [pc, #16]	@ (800cfc8 <__assert_func+0x38>)
 800cfb8:	e7f4      	b.n	800cfa4 <__assert_func+0x14>
 800cfba:	bf00      	nop
 800cfbc:	2000003c 	.word	0x2000003c
 800cfc0:	0800e2a6 	.word	0x0800e2a6
 800cfc4:	0800e278 	.word	0x0800e278
 800cfc8:	0800e26b 	.word	0x0800e26b

0800cfcc <_calloc_r>:
 800cfcc:	b570      	push	{r4, r5, r6, lr}
 800cfce:	fba1 5402 	umull	r5, r4, r1, r2
 800cfd2:	b93c      	cbnz	r4, 800cfe4 <_calloc_r+0x18>
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	f7ff f9a5 	bl	800c324 <_malloc_r>
 800cfda:	4606      	mov	r6, r0
 800cfdc:	b928      	cbnz	r0, 800cfea <_calloc_r+0x1e>
 800cfde:	2600      	movs	r6, #0
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	bd70      	pop	{r4, r5, r6, pc}
 800cfe4:	220c      	movs	r2, #12
 800cfe6:	6002      	str	r2, [r0, #0]
 800cfe8:	e7f9      	b.n	800cfde <_calloc_r+0x12>
 800cfea:	462a      	mov	r2, r5
 800cfec:	4621      	mov	r1, r4
 800cfee:	f7fe f9e2 	bl	800b3b6 <memset>
 800cff2:	e7f5      	b.n	800cfe0 <_calloc_r+0x14>

0800cff4 <__ascii_mbtowc>:
 800cff4:	b082      	sub	sp, #8
 800cff6:	b901      	cbnz	r1, 800cffa <__ascii_mbtowc+0x6>
 800cff8:	a901      	add	r1, sp, #4
 800cffa:	b142      	cbz	r2, 800d00e <__ascii_mbtowc+0x1a>
 800cffc:	b14b      	cbz	r3, 800d012 <__ascii_mbtowc+0x1e>
 800cffe:	7813      	ldrb	r3, [r2, #0]
 800d000:	600b      	str	r3, [r1, #0]
 800d002:	7812      	ldrb	r2, [r2, #0]
 800d004:	1e10      	subs	r0, r2, #0
 800d006:	bf18      	it	ne
 800d008:	2001      	movne	r0, #1
 800d00a:	b002      	add	sp, #8
 800d00c:	4770      	bx	lr
 800d00e:	4610      	mov	r0, r2
 800d010:	e7fb      	b.n	800d00a <__ascii_mbtowc+0x16>
 800d012:	f06f 0001 	mvn.w	r0, #1
 800d016:	e7f8      	b.n	800d00a <__ascii_mbtowc+0x16>

0800d018 <_realloc_r>:
 800d018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d01c:	4680      	mov	r8, r0
 800d01e:	4615      	mov	r5, r2
 800d020:	460c      	mov	r4, r1
 800d022:	b921      	cbnz	r1, 800d02e <_realloc_r+0x16>
 800d024:	4611      	mov	r1, r2
 800d026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d02a:	f7ff b97b 	b.w	800c324 <_malloc_r>
 800d02e:	b92a      	cbnz	r2, 800d03c <_realloc_r+0x24>
 800d030:	f7ff f906 	bl	800c240 <_free_r>
 800d034:	2400      	movs	r4, #0
 800d036:	4620      	mov	r0, r4
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03c:	f000 f841 	bl	800d0c2 <_malloc_usable_size_r>
 800d040:	4285      	cmp	r5, r0
 800d042:	4606      	mov	r6, r0
 800d044:	d802      	bhi.n	800d04c <_realloc_r+0x34>
 800d046:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d04a:	d8f4      	bhi.n	800d036 <_realloc_r+0x1e>
 800d04c:	4629      	mov	r1, r5
 800d04e:	4640      	mov	r0, r8
 800d050:	f7ff f968 	bl	800c324 <_malloc_r>
 800d054:	4607      	mov	r7, r0
 800d056:	2800      	cmp	r0, #0
 800d058:	d0ec      	beq.n	800d034 <_realloc_r+0x1c>
 800d05a:	42b5      	cmp	r5, r6
 800d05c:	462a      	mov	r2, r5
 800d05e:	4621      	mov	r1, r4
 800d060:	bf28      	it	cs
 800d062:	4632      	movcs	r2, r6
 800d064:	f7fe fa8b 	bl	800b57e <memcpy>
 800d068:	4621      	mov	r1, r4
 800d06a:	4640      	mov	r0, r8
 800d06c:	f7ff f8e8 	bl	800c240 <_free_r>
 800d070:	463c      	mov	r4, r7
 800d072:	e7e0      	b.n	800d036 <_realloc_r+0x1e>

0800d074 <__ascii_wctomb>:
 800d074:	4603      	mov	r3, r0
 800d076:	4608      	mov	r0, r1
 800d078:	b141      	cbz	r1, 800d08c <__ascii_wctomb+0x18>
 800d07a:	2aff      	cmp	r2, #255	@ 0xff
 800d07c:	d904      	bls.n	800d088 <__ascii_wctomb+0x14>
 800d07e:	228a      	movs	r2, #138	@ 0x8a
 800d080:	f04f 30ff 	mov.w	r0, #4294967295
 800d084:	601a      	str	r2, [r3, #0]
 800d086:	4770      	bx	lr
 800d088:	2001      	movs	r0, #1
 800d08a:	700a      	strb	r2, [r1, #0]
 800d08c:	4770      	bx	lr
	...

0800d090 <fiprintf>:
 800d090:	b40e      	push	{r1, r2, r3}
 800d092:	b503      	push	{r0, r1, lr}
 800d094:	4601      	mov	r1, r0
 800d096:	ab03      	add	r3, sp, #12
 800d098:	4805      	ldr	r0, [pc, #20]	@ (800d0b0 <fiprintf+0x20>)
 800d09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d09e:	6800      	ldr	r0, [r0, #0]
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	f000 f83d 	bl	800d120 <_vfiprintf_r>
 800d0a6:	b002      	add	sp, #8
 800d0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0ac:	b003      	add	sp, #12
 800d0ae:	4770      	bx	lr
 800d0b0:	2000003c 	.word	0x2000003c

0800d0b4 <abort>:
 800d0b4:	2006      	movs	r0, #6
 800d0b6:	b508      	push	{r3, lr}
 800d0b8:	f000 fa06 	bl	800d4c8 <raise>
 800d0bc:	2001      	movs	r0, #1
 800d0be:	f7f9 fa8c 	bl	80065da <_exit>

0800d0c2 <_malloc_usable_size_r>:
 800d0c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0c6:	1f18      	subs	r0, r3, #4
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	bfbc      	itt	lt
 800d0cc:	580b      	ldrlt	r3, [r1, r0]
 800d0ce:	18c0      	addlt	r0, r0, r3
 800d0d0:	4770      	bx	lr

0800d0d2 <__sfputc_r>:
 800d0d2:	6893      	ldr	r3, [r2, #8]
 800d0d4:	b410      	push	{r4}
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	6093      	str	r3, [r2, #8]
 800d0dc:	da07      	bge.n	800d0ee <__sfputc_r+0x1c>
 800d0de:	6994      	ldr	r4, [r2, #24]
 800d0e0:	42a3      	cmp	r3, r4
 800d0e2:	db01      	blt.n	800d0e8 <__sfputc_r+0x16>
 800d0e4:	290a      	cmp	r1, #10
 800d0e6:	d102      	bne.n	800d0ee <__sfputc_r+0x1c>
 800d0e8:	bc10      	pop	{r4}
 800d0ea:	f000 b931 	b.w	800d350 <__swbuf_r>
 800d0ee:	6813      	ldr	r3, [r2, #0]
 800d0f0:	1c58      	adds	r0, r3, #1
 800d0f2:	6010      	str	r0, [r2, #0]
 800d0f4:	7019      	strb	r1, [r3, #0]
 800d0f6:	4608      	mov	r0, r1
 800d0f8:	bc10      	pop	{r4}
 800d0fa:	4770      	bx	lr

0800d0fc <__sfputs_r>:
 800d0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fe:	4606      	mov	r6, r0
 800d100:	460f      	mov	r7, r1
 800d102:	4614      	mov	r4, r2
 800d104:	18d5      	adds	r5, r2, r3
 800d106:	42ac      	cmp	r4, r5
 800d108:	d101      	bne.n	800d10e <__sfputs_r+0x12>
 800d10a:	2000      	movs	r0, #0
 800d10c:	e007      	b.n	800d11e <__sfputs_r+0x22>
 800d10e:	463a      	mov	r2, r7
 800d110:	4630      	mov	r0, r6
 800d112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d116:	f7ff ffdc 	bl	800d0d2 <__sfputc_r>
 800d11a:	1c43      	adds	r3, r0, #1
 800d11c:	d1f3      	bne.n	800d106 <__sfputs_r+0xa>
 800d11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d120 <_vfiprintf_r>:
 800d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d124:	460d      	mov	r5, r1
 800d126:	4614      	mov	r4, r2
 800d128:	4698      	mov	r8, r3
 800d12a:	4606      	mov	r6, r0
 800d12c:	b09d      	sub	sp, #116	@ 0x74
 800d12e:	b118      	cbz	r0, 800d138 <_vfiprintf_r+0x18>
 800d130:	6a03      	ldr	r3, [r0, #32]
 800d132:	b90b      	cbnz	r3, 800d138 <_vfiprintf_r+0x18>
 800d134:	f7fe f872 	bl	800b21c <__sinit>
 800d138:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d13a:	07d9      	lsls	r1, r3, #31
 800d13c:	d405      	bmi.n	800d14a <_vfiprintf_r+0x2a>
 800d13e:	89ab      	ldrh	r3, [r5, #12]
 800d140:	059a      	lsls	r2, r3, #22
 800d142:	d402      	bmi.n	800d14a <_vfiprintf_r+0x2a>
 800d144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d146:	f7fe fa0a 	bl	800b55e <__retarget_lock_acquire_recursive>
 800d14a:	89ab      	ldrh	r3, [r5, #12]
 800d14c:	071b      	lsls	r3, r3, #28
 800d14e:	d501      	bpl.n	800d154 <_vfiprintf_r+0x34>
 800d150:	692b      	ldr	r3, [r5, #16]
 800d152:	b99b      	cbnz	r3, 800d17c <_vfiprintf_r+0x5c>
 800d154:	4629      	mov	r1, r5
 800d156:	4630      	mov	r0, r6
 800d158:	f000 f938 	bl	800d3cc <__swsetup_r>
 800d15c:	b170      	cbz	r0, 800d17c <_vfiprintf_r+0x5c>
 800d15e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d160:	07dc      	lsls	r4, r3, #31
 800d162:	d504      	bpl.n	800d16e <_vfiprintf_r+0x4e>
 800d164:	f04f 30ff 	mov.w	r0, #4294967295
 800d168:	b01d      	add	sp, #116	@ 0x74
 800d16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	0598      	lsls	r0, r3, #22
 800d172:	d4f7      	bmi.n	800d164 <_vfiprintf_r+0x44>
 800d174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d176:	f7fe f9f3 	bl	800b560 <__retarget_lock_release_recursive>
 800d17a:	e7f3      	b.n	800d164 <_vfiprintf_r+0x44>
 800d17c:	2300      	movs	r3, #0
 800d17e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d180:	2320      	movs	r3, #32
 800d182:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d186:	2330      	movs	r3, #48	@ 0x30
 800d188:	f04f 0901 	mov.w	r9, #1
 800d18c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d190:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d33c <_vfiprintf_r+0x21c>
 800d194:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d198:	4623      	mov	r3, r4
 800d19a:	469a      	mov	sl, r3
 800d19c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1a0:	b10a      	cbz	r2, 800d1a6 <_vfiprintf_r+0x86>
 800d1a2:	2a25      	cmp	r2, #37	@ 0x25
 800d1a4:	d1f9      	bne.n	800d19a <_vfiprintf_r+0x7a>
 800d1a6:	ebba 0b04 	subs.w	fp, sl, r4
 800d1aa:	d00b      	beq.n	800d1c4 <_vfiprintf_r+0xa4>
 800d1ac:	465b      	mov	r3, fp
 800d1ae:	4622      	mov	r2, r4
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f7ff ffa2 	bl	800d0fc <__sfputs_r>
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	f000 80a7 	beq.w	800d30c <_vfiprintf_r+0x1ec>
 800d1be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1c0:	445a      	add	r2, fp
 800d1c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f000 809f 	beq.w	800d30c <_vfiprintf_r+0x1ec>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1d8:	f10a 0a01 	add.w	sl, sl, #1
 800d1dc:	9304      	str	r3, [sp, #16]
 800d1de:	9307      	str	r3, [sp, #28]
 800d1e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1e6:	4654      	mov	r4, sl
 800d1e8:	2205      	movs	r2, #5
 800d1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ee:	4853      	ldr	r0, [pc, #332]	@ (800d33c <_vfiprintf_r+0x21c>)
 800d1f0:	f7fe f9b7 	bl	800b562 <memchr>
 800d1f4:	9a04      	ldr	r2, [sp, #16]
 800d1f6:	b9d8      	cbnz	r0, 800d230 <_vfiprintf_r+0x110>
 800d1f8:	06d1      	lsls	r1, r2, #27
 800d1fa:	bf44      	itt	mi
 800d1fc:	2320      	movmi	r3, #32
 800d1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d202:	0713      	lsls	r3, r2, #28
 800d204:	bf44      	itt	mi
 800d206:	232b      	movmi	r3, #43	@ 0x2b
 800d208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d20c:	f89a 3000 	ldrb.w	r3, [sl]
 800d210:	2b2a      	cmp	r3, #42	@ 0x2a
 800d212:	d015      	beq.n	800d240 <_vfiprintf_r+0x120>
 800d214:	4654      	mov	r4, sl
 800d216:	2000      	movs	r0, #0
 800d218:	f04f 0c0a 	mov.w	ip, #10
 800d21c:	9a07      	ldr	r2, [sp, #28]
 800d21e:	4621      	mov	r1, r4
 800d220:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d224:	3b30      	subs	r3, #48	@ 0x30
 800d226:	2b09      	cmp	r3, #9
 800d228:	d94b      	bls.n	800d2c2 <_vfiprintf_r+0x1a2>
 800d22a:	b1b0      	cbz	r0, 800d25a <_vfiprintf_r+0x13a>
 800d22c:	9207      	str	r2, [sp, #28]
 800d22e:	e014      	b.n	800d25a <_vfiprintf_r+0x13a>
 800d230:	eba0 0308 	sub.w	r3, r0, r8
 800d234:	fa09 f303 	lsl.w	r3, r9, r3
 800d238:	4313      	orrs	r3, r2
 800d23a:	46a2      	mov	sl, r4
 800d23c:	9304      	str	r3, [sp, #16]
 800d23e:	e7d2      	b.n	800d1e6 <_vfiprintf_r+0xc6>
 800d240:	9b03      	ldr	r3, [sp, #12]
 800d242:	1d19      	adds	r1, r3, #4
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	9103      	str	r1, [sp, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	bfbb      	ittet	lt
 800d24c:	425b      	neglt	r3, r3
 800d24e:	f042 0202 	orrlt.w	r2, r2, #2
 800d252:	9307      	strge	r3, [sp, #28]
 800d254:	9307      	strlt	r3, [sp, #28]
 800d256:	bfb8      	it	lt
 800d258:	9204      	strlt	r2, [sp, #16]
 800d25a:	7823      	ldrb	r3, [r4, #0]
 800d25c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d25e:	d10a      	bne.n	800d276 <_vfiprintf_r+0x156>
 800d260:	7863      	ldrb	r3, [r4, #1]
 800d262:	2b2a      	cmp	r3, #42	@ 0x2a
 800d264:	d132      	bne.n	800d2cc <_vfiprintf_r+0x1ac>
 800d266:	9b03      	ldr	r3, [sp, #12]
 800d268:	3402      	adds	r4, #2
 800d26a:	1d1a      	adds	r2, r3, #4
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	9203      	str	r2, [sp, #12]
 800d270:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d274:	9305      	str	r3, [sp, #20]
 800d276:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d340 <_vfiprintf_r+0x220>
 800d27a:	2203      	movs	r2, #3
 800d27c:	4650      	mov	r0, sl
 800d27e:	7821      	ldrb	r1, [r4, #0]
 800d280:	f7fe f96f 	bl	800b562 <memchr>
 800d284:	b138      	cbz	r0, 800d296 <_vfiprintf_r+0x176>
 800d286:	2240      	movs	r2, #64	@ 0x40
 800d288:	9b04      	ldr	r3, [sp, #16]
 800d28a:	eba0 000a 	sub.w	r0, r0, sl
 800d28e:	4082      	lsls	r2, r0
 800d290:	4313      	orrs	r3, r2
 800d292:	3401      	adds	r4, #1
 800d294:	9304      	str	r3, [sp, #16]
 800d296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d29a:	2206      	movs	r2, #6
 800d29c:	4829      	ldr	r0, [pc, #164]	@ (800d344 <_vfiprintf_r+0x224>)
 800d29e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2a2:	f7fe f95e 	bl	800b562 <memchr>
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d03f      	beq.n	800d32a <_vfiprintf_r+0x20a>
 800d2aa:	4b27      	ldr	r3, [pc, #156]	@ (800d348 <_vfiprintf_r+0x228>)
 800d2ac:	bb1b      	cbnz	r3, 800d2f6 <_vfiprintf_r+0x1d6>
 800d2ae:	9b03      	ldr	r3, [sp, #12]
 800d2b0:	3307      	adds	r3, #7
 800d2b2:	f023 0307 	bic.w	r3, r3, #7
 800d2b6:	3308      	adds	r3, #8
 800d2b8:	9303      	str	r3, [sp, #12]
 800d2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2bc:	443b      	add	r3, r7
 800d2be:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c0:	e76a      	b.n	800d198 <_vfiprintf_r+0x78>
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	2001      	movs	r0, #1
 800d2c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2ca:	e7a8      	b.n	800d21e <_vfiprintf_r+0xfe>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f04f 0c0a 	mov.w	ip, #10
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	3401      	adds	r4, #1
 800d2d6:	9305      	str	r3, [sp, #20]
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2de:	3a30      	subs	r2, #48	@ 0x30
 800d2e0:	2a09      	cmp	r2, #9
 800d2e2:	d903      	bls.n	800d2ec <_vfiprintf_r+0x1cc>
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d0c6      	beq.n	800d276 <_vfiprintf_r+0x156>
 800d2e8:	9105      	str	r1, [sp, #20]
 800d2ea:	e7c4      	b.n	800d276 <_vfiprintf_r+0x156>
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2f4:	e7f0      	b.n	800d2d8 <_vfiprintf_r+0x1b8>
 800d2f6:	ab03      	add	r3, sp, #12
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	462a      	mov	r2, r5
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	4b13      	ldr	r3, [pc, #76]	@ (800d34c <_vfiprintf_r+0x22c>)
 800d300:	a904      	add	r1, sp, #16
 800d302:	f7fd fb41 	bl	800a988 <_printf_float>
 800d306:	4607      	mov	r7, r0
 800d308:	1c78      	adds	r0, r7, #1
 800d30a:	d1d6      	bne.n	800d2ba <_vfiprintf_r+0x19a>
 800d30c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d30e:	07d9      	lsls	r1, r3, #31
 800d310:	d405      	bmi.n	800d31e <_vfiprintf_r+0x1fe>
 800d312:	89ab      	ldrh	r3, [r5, #12]
 800d314:	059a      	lsls	r2, r3, #22
 800d316:	d402      	bmi.n	800d31e <_vfiprintf_r+0x1fe>
 800d318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d31a:	f7fe f921 	bl	800b560 <__retarget_lock_release_recursive>
 800d31e:	89ab      	ldrh	r3, [r5, #12]
 800d320:	065b      	lsls	r3, r3, #25
 800d322:	f53f af1f 	bmi.w	800d164 <_vfiprintf_r+0x44>
 800d326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d328:	e71e      	b.n	800d168 <_vfiprintf_r+0x48>
 800d32a:	ab03      	add	r3, sp, #12
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	462a      	mov	r2, r5
 800d330:	4630      	mov	r0, r6
 800d332:	4b06      	ldr	r3, [pc, #24]	@ (800d34c <_vfiprintf_r+0x22c>)
 800d334:	a904      	add	r1, sp, #16
 800d336:	f7fd fdc5 	bl	800aec4 <_printf_i>
 800d33a:	e7e4      	b.n	800d306 <_vfiprintf_r+0x1e6>
 800d33c:	0800e250 	.word	0x0800e250
 800d340:	0800e256 	.word	0x0800e256
 800d344:	0800e25a 	.word	0x0800e25a
 800d348:	0800a989 	.word	0x0800a989
 800d34c:	0800d0fd 	.word	0x0800d0fd

0800d350 <__swbuf_r>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	460e      	mov	r6, r1
 800d354:	4614      	mov	r4, r2
 800d356:	4605      	mov	r5, r0
 800d358:	b118      	cbz	r0, 800d362 <__swbuf_r+0x12>
 800d35a:	6a03      	ldr	r3, [r0, #32]
 800d35c:	b90b      	cbnz	r3, 800d362 <__swbuf_r+0x12>
 800d35e:	f7fd ff5d 	bl	800b21c <__sinit>
 800d362:	69a3      	ldr	r3, [r4, #24]
 800d364:	60a3      	str	r3, [r4, #8]
 800d366:	89a3      	ldrh	r3, [r4, #12]
 800d368:	071a      	lsls	r2, r3, #28
 800d36a:	d501      	bpl.n	800d370 <__swbuf_r+0x20>
 800d36c:	6923      	ldr	r3, [r4, #16]
 800d36e:	b943      	cbnz	r3, 800d382 <__swbuf_r+0x32>
 800d370:	4621      	mov	r1, r4
 800d372:	4628      	mov	r0, r5
 800d374:	f000 f82a 	bl	800d3cc <__swsetup_r>
 800d378:	b118      	cbz	r0, 800d382 <__swbuf_r+0x32>
 800d37a:	f04f 37ff 	mov.w	r7, #4294967295
 800d37e:	4638      	mov	r0, r7
 800d380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d382:	6823      	ldr	r3, [r4, #0]
 800d384:	6922      	ldr	r2, [r4, #16]
 800d386:	b2f6      	uxtb	r6, r6
 800d388:	1a98      	subs	r0, r3, r2
 800d38a:	6963      	ldr	r3, [r4, #20]
 800d38c:	4637      	mov	r7, r6
 800d38e:	4283      	cmp	r3, r0
 800d390:	dc05      	bgt.n	800d39e <__swbuf_r+0x4e>
 800d392:	4621      	mov	r1, r4
 800d394:	4628      	mov	r0, r5
 800d396:	f7ff fda9 	bl	800ceec <_fflush_r>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d1ed      	bne.n	800d37a <__swbuf_r+0x2a>
 800d39e:	68a3      	ldr	r3, [r4, #8]
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	60a3      	str	r3, [r4, #8]
 800d3a4:	6823      	ldr	r3, [r4, #0]
 800d3a6:	1c5a      	adds	r2, r3, #1
 800d3a8:	6022      	str	r2, [r4, #0]
 800d3aa:	701e      	strb	r6, [r3, #0]
 800d3ac:	6962      	ldr	r2, [r4, #20]
 800d3ae:	1c43      	adds	r3, r0, #1
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d004      	beq.n	800d3be <__swbuf_r+0x6e>
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	07db      	lsls	r3, r3, #31
 800d3b8:	d5e1      	bpl.n	800d37e <__swbuf_r+0x2e>
 800d3ba:	2e0a      	cmp	r6, #10
 800d3bc:	d1df      	bne.n	800d37e <__swbuf_r+0x2e>
 800d3be:	4621      	mov	r1, r4
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	f7ff fd93 	bl	800ceec <_fflush_r>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d0d9      	beq.n	800d37e <__swbuf_r+0x2e>
 800d3ca:	e7d6      	b.n	800d37a <__swbuf_r+0x2a>

0800d3cc <__swsetup_r>:
 800d3cc:	b538      	push	{r3, r4, r5, lr}
 800d3ce:	4b29      	ldr	r3, [pc, #164]	@ (800d474 <__swsetup_r+0xa8>)
 800d3d0:	4605      	mov	r5, r0
 800d3d2:	6818      	ldr	r0, [r3, #0]
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	b118      	cbz	r0, 800d3e0 <__swsetup_r+0x14>
 800d3d8:	6a03      	ldr	r3, [r0, #32]
 800d3da:	b90b      	cbnz	r3, 800d3e0 <__swsetup_r+0x14>
 800d3dc:	f7fd ff1e 	bl	800b21c <__sinit>
 800d3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3e4:	0719      	lsls	r1, r3, #28
 800d3e6:	d422      	bmi.n	800d42e <__swsetup_r+0x62>
 800d3e8:	06da      	lsls	r2, r3, #27
 800d3ea:	d407      	bmi.n	800d3fc <__swsetup_r+0x30>
 800d3ec:	2209      	movs	r2, #9
 800d3ee:	602a      	str	r2, [r5, #0]
 800d3f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	e033      	b.n	800d464 <__swsetup_r+0x98>
 800d3fc:	0758      	lsls	r0, r3, #29
 800d3fe:	d512      	bpl.n	800d426 <__swsetup_r+0x5a>
 800d400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d402:	b141      	cbz	r1, 800d416 <__swsetup_r+0x4a>
 800d404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d408:	4299      	cmp	r1, r3
 800d40a:	d002      	beq.n	800d412 <__swsetup_r+0x46>
 800d40c:	4628      	mov	r0, r5
 800d40e:	f7fe ff17 	bl	800c240 <_free_r>
 800d412:	2300      	movs	r3, #0
 800d414:	6363      	str	r3, [r4, #52]	@ 0x34
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d41c:	81a3      	strh	r3, [r4, #12]
 800d41e:	2300      	movs	r3, #0
 800d420:	6063      	str	r3, [r4, #4]
 800d422:	6923      	ldr	r3, [r4, #16]
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	f043 0308 	orr.w	r3, r3, #8
 800d42c:	81a3      	strh	r3, [r4, #12]
 800d42e:	6923      	ldr	r3, [r4, #16]
 800d430:	b94b      	cbnz	r3, 800d446 <__swsetup_r+0x7a>
 800d432:	89a3      	ldrh	r3, [r4, #12]
 800d434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d43c:	d003      	beq.n	800d446 <__swsetup_r+0x7a>
 800d43e:	4621      	mov	r1, r4
 800d440:	4628      	mov	r0, r5
 800d442:	f000 f882 	bl	800d54a <__smakebuf_r>
 800d446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d44a:	f013 0201 	ands.w	r2, r3, #1
 800d44e:	d00a      	beq.n	800d466 <__swsetup_r+0x9a>
 800d450:	2200      	movs	r2, #0
 800d452:	60a2      	str	r2, [r4, #8]
 800d454:	6962      	ldr	r2, [r4, #20]
 800d456:	4252      	negs	r2, r2
 800d458:	61a2      	str	r2, [r4, #24]
 800d45a:	6922      	ldr	r2, [r4, #16]
 800d45c:	b942      	cbnz	r2, 800d470 <__swsetup_r+0xa4>
 800d45e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d462:	d1c5      	bne.n	800d3f0 <__swsetup_r+0x24>
 800d464:	bd38      	pop	{r3, r4, r5, pc}
 800d466:	0799      	lsls	r1, r3, #30
 800d468:	bf58      	it	pl
 800d46a:	6962      	ldrpl	r2, [r4, #20]
 800d46c:	60a2      	str	r2, [r4, #8]
 800d46e:	e7f4      	b.n	800d45a <__swsetup_r+0x8e>
 800d470:	2000      	movs	r0, #0
 800d472:	e7f7      	b.n	800d464 <__swsetup_r+0x98>
 800d474:	2000003c 	.word	0x2000003c

0800d478 <_raise_r>:
 800d478:	291f      	cmp	r1, #31
 800d47a:	b538      	push	{r3, r4, r5, lr}
 800d47c:	4605      	mov	r5, r0
 800d47e:	460c      	mov	r4, r1
 800d480:	d904      	bls.n	800d48c <_raise_r+0x14>
 800d482:	2316      	movs	r3, #22
 800d484:	6003      	str	r3, [r0, #0]
 800d486:	f04f 30ff 	mov.w	r0, #4294967295
 800d48a:	bd38      	pop	{r3, r4, r5, pc}
 800d48c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d48e:	b112      	cbz	r2, 800d496 <_raise_r+0x1e>
 800d490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d494:	b94b      	cbnz	r3, 800d4aa <_raise_r+0x32>
 800d496:	4628      	mov	r0, r5
 800d498:	f000 f830 	bl	800d4fc <_getpid_r>
 800d49c:	4622      	mov	r2, r4
 800d49e:	4601      	mov	r1, r0
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a6:	f000 b817 	b.w	800d4d8 <_kill_r>
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d00a      	beq.n	800d4c4 <_raise_r+0x4c>
 800d4ae:	1c59      	adds	r1, r3, #1
 800d4b0:	d103      	bne.n	800d4ba <_raise_r+0x42>
 800d4b2:	2316      	movs	r3, #22
 800d4b4:	6003      	str	r3, [r0, #0]
 800d4b6:	2001      	movs	r0, #1
 800d4b8:	e7e7      	b.n	800d48a <_raise_r+0x12>
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d4c2:	4798      	blx	r3
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	e7e0      	b.n	800d48a <_raise_r+0x12>

0800d4c8 <raise>:
 800d4c8:	4b02      	ldr	r3, [pc, #8]	@ (800d4d4 <raise+0xc>)
 800d4ca:	4601      	mov	r1, r0
 800d4cc:	6818      	ldr	r0, [r3, #0]
 800d4ce:	f7ff bfd3 	b.w	800d478 <_raise_r>
 800d4d2:	bf00      	nop
 800d4d4:	2000003c 	.word	0x2000003c

0800d4d8 <_kill_r>:
 800d4d8:	b538      	push	{r3, r4, r5, lr}
 800d4da:	2300      	movs	r3, #0
 800d4dc:	4d06      	ldr	r5, [pc, #24]	@ (800d4f8 <_kill_r+0x20>)
 800d4de:	4604      	mov	r4, r0
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	602b      	str	r3, [r5, #0]
 800d4e6:	f7f9 f868 	bl	80065ba <_kill>
 800d4ea:	1c43      	adds	r3, r0, #1
 800d4ec:	d102      	bne.n	800d4f4 <_kill_r+0x1c>
 800d4ee:	682b      	ldr	r3, [r5, #0]
 800d4f0:	b103      	cbz	r3, 800d4f4 <_kill_r+0x1c>
 800d4f2:	6023      	str	r3, [r4, #0]
 800d4f4:	bd38      	pop	{r3, r4, r5, pc}
 800d4f6:	bf00      	nop
 800d4f8:	20001650 	.word	0x20001650

0800d4fc <_getpid_r>:
 800d4fc:	f7f9 b856 	b.w	80065ac <_getpid>

0800d500 <__swhatbuf_r>:
 800d500:	b570      	push	{r4, r5, r6, lr}
 800d502:	460c      	mov	r4, r1
 800d504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d508:	4615      	mov	r5, r2
 800d50a:	2900      	cmp	r1, #0
 800d50c:	461e      	mov	r6, r3
 800d50e:	b096      	sub	sp, #88	@ 0x58
 800d510:	da0c      	bge.n	800d52c <__swhatbuf_r+0x2c>
 800d512:	89a3      	ldrh	r3, [r4, #12]
 800d514:	2100      	movs	r1, #0
 800d516:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d51a:	bf14      	ite	ne
 800d51c:	2340      	movne	r3, #64	@ 0x40
 800d51e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d522:	2000      	movs	r0, #0
 800d524:	6031      	str	r1, [r6, #0]
 800d526:	602b      	str	r3, [r5, #0]
 800d528:	b016      	add	sp, #88	@ 0x58
 800d52a:	bd70      	pop	{r4, r5, r6, pc}
 800d52c:	466a      	mov	r2, sp
 800d52e:	f000 f849 	bl	800d5c4 <_fstat_r>
 800d532:	2800      	cmp	r0, #0
 800d534:	dbed      	blt.n	800d512 <__swhatbuf_r+0x12>
 800d536:	9901      	ldr	r1, [sp, #4]
 800d538:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d53c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d540:	4259      	negs	r1, r3
 800d542:	4159      	adcs	r1, r3
 800d544:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d548:	e7eb      	b.n	800d522 <__swhatbuf_r+0x22>

0800d54a <__smakebuf_r>:
 800d54a:	898b      	ldrh	r3, [r1, #12]
 800d54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d54e:	079d      	lsls	r5, r3, #30
 800d550:	4606      	mov	r6, r0
 800d552:	460c      	mov	r4, r1
 800d554:	d507      	bpl.n	800d566 <__smakebuf_r+0x1c>
 800d556:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d55a:	6023      	str	r3, [r4, #0]
 800d55c:	6123      	str	r3, [r4, #16]
 800d55e:	2301      	movs	r3, #1
 800d560:	6163      	str	r3, [r4, #20]
 800d562:	b003      	add	sp, #12
 800d564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d566:	466a      	mov	r2, sp
 800d568:	ab01      	add	r3, sp, #4
 800d56a:	f7ff ffc9 	bl	800d500 <__swhatbuf_r>
 800d56e:	9f00      	ldr	r7, [sp, #0]
 800d570:	4605      	mov	r5, r0
 800d572:	4639      	mov	r1, r7
 800d574:	4630      	mov	r0, r6
 800d576:	f7fe fed5 	bl	800c324 <_malloc_r>
 800d57a:	b948      	cbnz	r0, 800d590 <__smakebuf_r+0x46>
 800d57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d580:	059a      	lsls	r2, r3, #22
 800d582:	d4ee      	bmi.n	800d562 <__smakebuf_r+0x18>
 800d584:	f023 0303 	bic.w	r3, r3, #3
 800d588:	f043 0302 	orr.w	r3, r3, #2
 800d58c:	81a3      	strh	r3, [r4, #12]
 800d58e:	e7e2      	b.n	800d556 <__smakebuf_r+0xc>
 800d590:	89a3      	ldrh	r3, [r4, #12]
 800d592:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d59a:	81a3      	strh	r3, [r4, #12]
 800d59c:	9b01      	ldr	r3, [sp, #4]
 800d59e:	6020      	str	r0, [r4, #0]
 800d5a0:	b15b      	cbz	r3, 800d5ba <__smakebuf_r+0x70>
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5a8:	f000 f81e 	bl	800d5e8 <_isatty_r>
 800d5ac:	b128      	cbz	r0, 800d5ba <__smakebuf_r+0x70>
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f023 0303 	bic.w	r3, r3, #3
 800d5b4:	f043 0301 	orr.w	r3, r3, #1
 800d5b8:	81a3      	strh	r3, [r4, #12]
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	431d      	orrs	r5, r3
 800d5be:	81a5      	strh	r5, [r4, #12]
 800d5c0:	e7cf      	b.n	800d562 <__smakebuf_r+0x18>
	...

0800d5c4 <_fstat_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	4d06      	ldr	r5, [pc, #24]	@ (800d5e4 <_fstat_r+0x20>)
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	4611      	mov	r1, r2
 800d5d0:	602b      	str	r3, [r5, #0]
 800d5d2:	f7f9 f851 	bl	8006678 <_fstat>
 800d5d6:	1c43      	adds	r3, r0, #1
 800d5d8:	d102      	bne.n	800d5e0 <_fstat_r+0x1c>
 800d5da:	682b      	ldr	r3, [r5, #0]
 800d5dc:	b103      	cbz	r3, 800d5e0 <_fstat_r+0x1c>
 800d5de:	6023      	str	r3, [r4, #0]
 800d5e0:	bd38      	pop	{r3, r4, r5, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20001650 	.word	0x20001650

0800d5e8 <_isatty_r>:
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	4d05      	ldr	r5, [pc, #20]	@ (800d604 <_isatty_r+0x1c>)
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	4608      	mov	r0, r1
 800d5f2:	602b      	str	r3, [r5, #0]
 800d5f4:	f7f9 f84f 	bl	8006696 <_isatty>
 800d5f8:	1c43      	adds	r3, r0, #1
 800d5fa:	d102      	bne.n	800d602 <_isatty_r+0x1a>
 800d5fc:	682b      	ldr	r3, [r5, #0]
 800d5fe:	b103      	cbz	r3, 800d602 <_isatty_r+0x1a>
 800d600:	6023      	str	r3, [r4, #0]
 800d602:	bd38      	pop	{r3, r4, r5, pc}
 800d604:	20001650 	.word	0x20001650

0800d608 <_init>:
 800d608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60a:	bf00      	nop
 800d60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d60e:	bc08      	pop	{r3}
 800d610:	469e      	mov	lr, r3
 800d612:	4770      	bx	lr

0800d614 <_fini>:
 800d614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d616:	bf00      	nop
 800d618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d61a:	bc08      	pop	{r3}
 800d61c:	469e      	mov	lr, r3
 800d61e:	4770      	bx	lr
