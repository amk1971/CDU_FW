
RCU_NAV_Feedback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3bc  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  0800d5b0  0800d5b0  0000e5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e340  0800e340  000101f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e340  0800e340  0000f340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e348  0800e348  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e348  0800e348  0000f348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e34c  0800e34c  0000f34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800e350  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000146c  200001f8  0800e548  000101f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001664  0800e548  00010664  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e51  00000000  00000000  00010221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037eb  00000000  00000000  00028072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0002b860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001d478  00000000  00000000  0002cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019909  00000000  00000000  0004a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6752  00000000  00000000  00063c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010a37b  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001196  00000000  00000000  0010a3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ec0  00000000  00000000  0010b554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00112414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001f8 	.word	0x200001f8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800d594 	.word	0x0800d594

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001fc 	.word	0x200001fc
 800022c:	0800d594 	.word	0x0800d594

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__gesf2>:
 8000c08:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000c0c:	e006      	b.n	8000c1c <__cmpsf2+0x4>
 8000c0e:	bf00      	nop

08000c10 <__lesf2>:
 8000c10:	f04f 0c01 	mov.w	ip, #1
 8000c14:	e002      	b.n	8000c1c <__cmpsf2+0x4>
 8000c16:	bf00      	nop

08000c18 <__cmpsf2>:
 8000c18:	f04f 0c01 	mov.w	ip, #1
 8000c1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d011      	beq.n	8000c58 <__cmpsf2+0x40>
 8000c34:	b001      	add	sp, #4
 8000c36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c3a:	bf18      	it	ne
 8000c3c:	ea90 0f01 	teqne	r0, r1
 8000c40:	bf58      	it	pl
 8000c42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c46:	bf88      	it	hi
 8000c48:	17c8      	asrhi	r0, r1, #31
 8000c4a:	bf38      	it	cc
 8000c4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c50:	bf18      	it	ne
 8000c52:	f040 0001 	orrne.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	d102      	bne.n	8000c64 <__cmpsf2+0x4c>
 8000c5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c62:	d105      	bne.n	8000c70 <__cmpsf2+0x58>
 8000c64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c68:	d1e4      	bne.n	8000c34 <__cmpsf2+0x1c>
 8000c6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c6e:	d0e1      	beq.n	8000c34 <__cmpsf2+0x1c>
 8000c70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_cfrcmple>:
 8000c78:	4684      	mov	ip, r0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	4661      	mov	r1, ip
 8000c7e:	e7ff      	b.n	8000c80 <__aeabi_cfcmpeq>

08000c80 <__aeabi_cfcmpeq>:
 8000c80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c82:	f7ff ffc9 	bl	8000c18 <__cmpsf2>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	bf48      	it	mi
 8000c8a:	f110 0f00 	cmnmi.w	r0, #0
 8000c8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c90 <__aeabi_fcmpeq>:
 8000c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c94:	f7ff fff4 	bl	8000c80 <__aeabi_cfcmpeq>
 8000c98:	bf0c      	ite	eq
 8000c9a:	2001      	moveq	r0, #1
 8000c9c:	2000      	movne	r0, #0
 8000c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_fcmplt>:
 8000ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca8:	f7ff ffea 	bl	8000c80 <__aeabi_cfcmpeq>
 8000cac:	bf34      	ite	cc
 8000cae:	2001      	movcc	r0, #1
 8000cb0:	2000      	movcs	r0, #0
 8000cb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_fcmple>:
 8000cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cbc:	f7ff ffe0 	bl	8000c80 <__aeabi_cfcmpeq>
 8000cc0:	bf94      	ite	ls
 8000cc2:	2001      	movls	r0, #1
 8000cc4:	2000      	movhi	r0, #0
 8000cc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cca:	bf00      	nop

08000ccc <__aeabi_fcmpge>:
 8000ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd0:	f7ff ffd2 	bl	8000c78 <__aeabi_cfrcmple>
 8000cd4:	bf94      	ite	ls
 8000cd6:	2001      	movls	r0, #1
 8000cd8:	2000      	movhi	r0, #0
 8000cda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fcmpgt>:
 8000ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce4:	f7ff ffc8 	bl	8000c78 <__aeabi_cfrcmple>
 8000ce8:	bf34      	ite	cc
 8000cea:	2001      	movcc	r0, #1
 8000cec:	2000      	movcs	r0, #0
 8000cee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cf2:	bf00      	nop

08000cf4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a06      	ldr	r2, [pc, #24]	@ (8000d1c <vApplicationGetIdleTaskMemory+0x28>)
 8000d04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000214 	.word	0x20000214
 8000d20:	200002b4 	.word	0x200002b4

08000d24 <Delay>:
#include "glcd.h"

void Delay(int t) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    t *= 10;
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
    while (t) {
 8000d38:	e002      	b.n	8000d40 <Delay+0x1c>
        t--;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
    while (t) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f9      	bne.n	8000d3a <Delay+0x16>
    }
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
	...

08000d54 <send_command>:

void send_command(unsigned char command) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff ffe0 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);  // E_PIN_NUMBER=RESET
 8000d64:	4b66      	ldr	r3, [pc, #408]	@ (8000f00 <send_command+0x1ac>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a65      	ldr	r2, [pc, #404]	@ (8000f00 <send_command+0x1ac>)
 8000d6a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000d6e:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ffd7 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 8000d76:	4b62      	ldr	r3, [pc, #392]	@ (8000f00 <send_command+0x1ac>)
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	4a61      	ldr	r2, [pc, #388]	@ (8000f00 <send_command+0x1ac>)
 8000d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d80:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff ffce 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 8000d88:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <send_command+0x1ac>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8000f00 <send_command+0x1ac>)
 8000d8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d92:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff ffc5 	bl	8000d24 <Delay>
    SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8000d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8000f04 <send_command+0x1b0>)
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4a59      	ldr	r2, [pc, #356]	@ (8000f04 <send_command+0x1b0>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff ffbc 	bl	8000d24 <Delay>
    SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 8000dac:	4b55      	ldr	r3, [pc, #340]	@ (8000f04 <send_command+0x1b0>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	4a54      	ldr	r2, [pc, #336]	@ (8000f04 <send_command+0x1b0>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff ffb3 	bl	8000d24 <Delay>

    // Clear data lines
    DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8000dbe:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <send_command+0x1b4>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	4a51      	ldr	r2, [pc, #324]	@ (8000f08 <send_command+0x1b4>)
 8000dc4:	f023 0302 	bic.w	r3, r3, #2
 8000dc8:	60d3      	str	r3, [r2, #12]
    DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 8000dca:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <send_command+0x1ac>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	4a4c      	ldr	r2, [pc, #304]	@ (8000f00 <send_command+0x1ac>)
 8000dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000dd4:	60d3      	str	r3, [r2, #12]
    DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8000dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8000f0c <send_command+0x1b8>)
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	4a4c      	ldr	r2, [pc, #304]	@ (8000f0c <send_command+0x1b8>)
 8000ddc:	f023 0320 	bic.w	r3, r3, #32
 8000de0:	60d3      	str	r3, [r2, #12]
    DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8000de2:	4b49      	ldr	r3, [pc, #292]	@ (8000f08 <send_command+0x1b4>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	4a48      	ldr	r2, [pc, #288]	@ (8000f08 <send_command+0x1b4>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	60d3      	str	r3, [r2, #12]
    DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8000dee:	4b47      	ldr	r3, [pc, #284]	@ (8000f0c <send_command+0x1b8>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	4a46      	ldr	r2, [pc, #280]	@ (8000f0c <send_command+0x1b8>)
 8000df4:	f023 0310 	bic.w	r3, r3, #16
 8000df8:	60d3      	str	r3, [r2, #12]
    DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8000dfa:	4b42      	ldr	r3, [pc, #264]	@ (8000f04 <send_command+0x1b0>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	4a41      	ldr	r2, [pc, #260]	@ (8000f04 <send_command+0x1b0>)
 8000e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000e04:	60d3      	str	r3, [r2, #12]
    DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8000e06:	4b3f      	ldr	r3, [pc, #252]	@ (8000f04 <send_command+0x1b0>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f04 <send_command+0x1b0>)
 8000e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e10:	60d3      	str	r3, [r2, #12]
    DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8000e12:	4b3c      	ldr	r3, [pc, #240]	@ (8000f04 <send_command+0x1b0>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	4a3b      	ldr	r2, [pc, #236]	@ (8000f04 <send_command+0x1b0>)
 8000e18:	f023 0320 	bic.w	r3, r3, #32
 8000e1c:	60d3      	str	r3, [r2, #12]

    Delay(T);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f7ff ff80 	bl	8000d24 <Delay>
    CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <send_command+0x1ac>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	4a35      	ldr	r2, [pc, #212]	@ (8000f00 <send_command+0x1ac>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2e:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff ff77 	bl	8000d24 <Delay>

    // Set data lines with the command
    if (command & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <send_command+0xf8>
 8000e40:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <send_command+0x1b4>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <send_command+0x1b4>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	60d3      	str	r3, [r2, #12]
    if (command & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <send_command+0x10e>
 8000e56:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <send_command+0x1ac>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	4a29      	ldr	r2, [pc, #164]	@ (8000f00 <send_command+0x1ac>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e60:	60d3      	str	r3, [r2, #12]
    if (command & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d005      	beq.n	8000e78 <send_command+0x124>
 8000e6c:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <send_command+0x1b8>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	4a26      	ldr	r2, [pc, #152]	@ (8000f0c <send_command+0x1b8>)
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	60d3      	str	r3, [r2, #12]
    if (command & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <send_command+0x13a>
 8000e82:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <send_command+0x1b4>)
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	4a20      	ldr	r2, [pc, #128]	@ (8000f08 <send_command+0x1b4>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	60d3      	str	r3, [r2, #12]
    if (command & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <send_command+0x150>
 8000e98:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <send_command+0x1b8>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <send_command+0x1b8>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	60d3      	str	r3, [r2, #12]
    if (command & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <send_command+0x166>
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <send_command+0x1b0>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <send_command+0x1b0>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb8:	60d3      	str	r3, [r2, #12]
    if (command & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d005      	beq.n	8000ed0 <send_command+0x17c>
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <send_command+0x1b0>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <send_command+0x1b0>)
 8000eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ece:	60d3      	str	r3, [r2, #12]
    if (command & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da05      	bge.n	8000ee4 <send_command+0x190>
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <send_command+0x1b0>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <send_command+0x1b0>)
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	60d3      	str	r3, [r2, #12]

    Delay(T);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff ff1d 	bl	8000d24 <Delay>
    CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8000eea:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <send_command+0x1ac>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <send_command+0x1ac>)
 8000ef0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000ef4:	60d3      	str	r3, [r2, #12]
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40011800 	.word	0x40011800
 8000f04:	40010800 	.word	0x40010800
 8000f08:	40010c00 	.word	0x40010c00
 8000f0c:	40011000 	.word	0x40011000

08000f10 <glcd_on>:

void glcd_on(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    Delay(T);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff ff05 	bl	8000d24 <Delay>
    send_command(0x3F);     // GLCD on
 8000f1a:	203f      	movs	r0, #63	@ 0x3f
 8000f1c:	f7ff ff1a 	bl	8000d54 <send_command>
    send_command(0x40);     // SET Cursor on Y=0
 8000f20:	2040      	movs	r0, #64	@ 0x40
 8000f22:	f7ff ff17 	bl	8000d54 <send_command>
    send_command(0xB8);     // SET Page on X=0, Line=0
 8000f26:	20b8      	movs	r0, #184	@ 0xb8
 8000f28:	f7ff ff14 	bl	8000d54 <send_command>
    send_command(0xC0);     // Display Start Line=0xC0
 8000f2c:	20c0      	movs	r0, #192	@ 0xc0
 8000f2e:	f7ff ff11 	bl	8000d54 <send_command>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <glcd_off>:

void glcd_off(void) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
    Delay(T);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff fef2 	bl	8000d24 <Delay>
    send_command(0x3E);
 8000f40:	203e      	movs	r0, #62	@ 0x3e
 8000f42:	f7ff ff07 	bl	8000d54 <send_command>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <glcd_putchar>:

void glcd_putchar(unsigned char data, unsigned char j) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	460a      	mov	r2, r1
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	71bb      	strb	r3, [r7, #6]
    if (j < 64) {
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f60:	f200 80d2 	bhi.w	8001108 <glcd_putchar+0x1bc>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);   // E_PIN_NUMBER=RESET
 8000f64:	4b64      	ldr	r3, [pc, #400]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a63      	ldr	r2, [pc, #396]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f6a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f6e:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fed7 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER);  // RW_PIN_NUMBER=RESET
 8000f76:	4b60      	ldr	r3, [pc, #384]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	4a5f      	ldr	r2, [pc, #380]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f80:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff fece 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << DI_PIN_NUMBER);   // DI_PIN_NUMBER=SET
 8000f88:	4b5b      	ldr	r3, [pc, #364]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a5a      	ldr	r2, [pc, #360]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f92:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fec5 	bl	8000d24 <Delay>
        SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8000f9a:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <glcd_putchar+0x1b0>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	4a57      	ldr	r2, [pc, #348]	@ (80010fc <glcd_putchar+0x1b0>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff febc 	bl	8000d24 <Delay>
        SECO2_PORT->ODR &= ~(1 << CS2_PIN_NUMBER);// CS2_PIN_NUMBER=RESET
 8000fac:	4b53      	ldr	r3, [pc, #332]	@ (80010fc <glcd_putchar+0x1b0>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	@ (80010fc <glcd_putchar+0x1b0>)
 8000fb2:	f023 0308 	bic.w	r3, r3, #8
 8000fb6:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff feb3 	bl	8000d24 <Delay>

        // Clear data lines
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8000fbe:	4b50      	ldr	r3, [pc, #320]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fc4:	f023 0302 	bic.w	r3, r3, #2
 8000fc8:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 8000fca:	4b4b      	ldr	r3, [pc, #300]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	4a4a      	ldr	r2, [pc, #296]	@ (80010f8 <glcd_putchar+0x1ac>)
 8000fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fd4:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8000fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8001104 <glcd_putchar+0x1b8>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	4a4a      	ldr	r2, [pc, #296]	@ (8001104 <glcd_putchar+0x1b8>)
 8000fdc:	f023 0320 	bic.w	r3, r3, #32
 8000fe0:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8000fe2:	4b47      	ldr	r3, [pc, #284]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	4a46      	ldr	r2, [pc, #280]	@ (8001100 <glcd_putchar+0x1b4>)
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8000fee:	4b45      	ldr	r3, [pc, #276]	@ (8001104 <glcd_putchar+0x1b8>)
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	4a44      	ldr	r2, [pc, #272]	@ (8001104 <glcd_putchar+0x1b8>)
 8000ff4:	f023 0310 	bic.w	r3, r3, #16
 8000ff8:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8000ffa:	4b40      	ldr	r3, [pc, #256]	@ (80010fc <glcd_putchar+0x1b0>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80010fc <glcd_putchar+0x1b0>)
 8001000:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001004:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8001006:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <glcd_putchar+0x1b0>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	4a3c      	ldr	r2, [pc, #240]	@ (80010fc <glcd_putchar+0x1b0>)
 800100c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001010:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8001012:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <glcd_putchar+0x1b0>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	4a39      	ldr	r2, [pc, #228]	@ (80010fc <glcd_putchar+0x1b0>)
 8001018:	f023 0320 	bic.w	r3, r3, #32
 800101c:	60d3      	str	r3, [r2, #12]

        Delay(T);
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff fe80 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8001024:	4b34      	ldr	r3, [pc, #208]	@ (80010f8 <glcd_putchar+0x1ac>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4a33      	ldr	r2, [pc, #204]	@ (80010f8 <glcd_putchar+0x1ac>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800102e:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fe77 	bl	8000d24 <Delay>

        // Set data lines with the data
        if (data & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <glcd_putchar+0x100>
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <glcd_putchar+0x1b4>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <glcd_putchar+0x1b4>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	60d3      	str	r3, [r2, #12]
        if (data & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <glcd_putchar+0x116>
 8001056:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <glcd_putchar+0x1ac>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	4a27      	ldr	r2, [pc, #156]	@ (80010f8 <glcd_putchar+0x1ac>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001060:	60d3      	str	r3, [r2, #12]
        if (data & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <glcd_putchar+0x12c>
 800106c:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <glcd_putchar+0x1b8>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	4a24      	ldr	r2, [pc, #144]	@ (8001104 <glcd_putchar+0x1b8>)
 8001072:	f043 0320 	orr.w	r3, r3, #32
 8001076:	60d3      	str	r3, [r2, #12]
        if (data & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <glcd_putchar+0x142>
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <glcd_putchar+0x1b4>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	4a1e      	ldr	r2, [pc, #120]	@ (8001100 <glcd_putchar+0x1b4>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	60d3      	str	r3, [r2, #12]
        if (data & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <glcd_putchar+0x158>
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <glcd_putchar+0x1b8>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4a19      	ldr	r2, [pc, #100]	@ (8001104 <glcd_putchar+0x1b8>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	60d3      	str	r3, [r2, #12]
        if (data & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <glcd_putchar+0x16e>
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <glcd_putchar+0x1b0>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <glcd_putchar+0x1b0>)
 80010b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b8:	60d3      	str	r3, [r2, #12]
        if (data & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <glcd_putchar+0x184>
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <glcd_putchar+0x1b0>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <glcd_putchar+0x1b0>)
 80010ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ce:	60d3      	str	r3, [r2, #12]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da05      	bge.n	80010e4 <glcd_putchar+0x198>
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <glcd_putchar+0x1b0>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <glcd_putchar+0x1b0>)
 80010de:	f043 0320 	orr.w	r3, r3, #32
 80010e2:	60d3      	str	r3, [r2, #12]

        Delay(T);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fe1d 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 80010ea:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <glcd_putchar+0x1ac>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	4a02      	ldr	r2, [pc, #8]	@ (80010f8 <glcd_putchar+0x1ac>)
 80010f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80010f4:	60d3      	str	r3, [r2, #12]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);

        Delay(T);
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
    }
}
 80010f6:	e0d0      	b.n	800129a <glcd_putchar+0x34e>
 80010f8:	40011800 	.word	0x40011800
 80010fc:	40010800 	.word	0x40010800
 8001100:	40010c00 	.word	0x40010c00
 8001104:	40011000 	.word	0x40011000
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER);   // E_PIN_NUMBER=RESET
 8001108:	4b66      	ldr	r3, [pc, #408]	@ (80012a4 <glcd_putchar+0x358>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a65      	ldr	r2, [pc, #404]	@ (80012a4 <glcd_putchar+0x358>)
 800110e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001112:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fe05 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER);  // RW_PIN_NUMBER=RESET
 800111a:	4b62      	ldr	r3, [pc, #392]	@ (80012a4 <glcd_putchar+0x358>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	4a61      	ldr	r2, [pc, #388]	@ (80012a4 <glcd_putchar+0x358>)
 8001120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001124:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fdfc 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << DI_PIN_NUMBER);   // DI_PIN_NUMBER=SET
 800112c:	4b5d      	ldr	r3, [pc, #372]	@ (80012a4 <glcd_putchar+0x358>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	4a5c      	ldr	r2, [pc, #368]	@ (80012a4 <glcd_putchar+0x358>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001136:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff fdf3 	bl	8000d24 <Delay>
        SECO1_PORT->ODR &= ~(1 << CS1_PIN_NUMBER);// CS1_PIN_NUMBER=RESET
 800113e:	4b5a      	ldr	r3, [pc, #360]	@ (80012a8 <glcd_putchar+0x35c>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	4a59      	ldr	r2, [pc, #356]	@ (80012a8 <glcd_putchar+0x35c>)
 8001144:	f023 0310 	bic.w	r3, r3, #16
 8001148:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff fdea 	bl	8000d24 <Delay>
        SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 8001150:	4b55      	ldr	r3, [pc, #340]	@ (80012a8 <glcd_putchar+0x35c>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4a54      	ldr	r2, [pc, #336]	@ (80012a8 <glcd_putchar+0x35c>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff fde1 	bl	8000d24 <Delay>
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8001162:	4b52      	ldr	r3, [pc, #328]	@ (80012ac <glcd_putchar+0x360>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	4a51      	ldr	r2, [pc, #324]	@ (80012ac <glcd_putchar+0x360>)
 8001168:	f023 0302 	bic.w	r3, r3, #2
 800116c:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 800116e:	4b4d      	ldr	r3, [pc, #308]	@ (80012a4 <glcd_putchar+0x358>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	4a4c      	ldr	r2, [pc, #304]	@ (80012a4 <glcd_putchar+0x358>)
 8001174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001178:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 800117a:	4b4d      	ldr	r3, [pc, #308]	@ (80012b0 <glcd_putchar+0x364>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	4a4c      	ldr	r2, [pc, #304]	@ (80012b0 <glcd_putchar+0x364>)
 8001180:	f023 0320 	bic.w	r3, r3, #32
 8001184:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8001186:	4b49      	ldr	r3, [pc, #292]	@ (80012ac <glcd_putchar+0x360>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	4a48      	ldr	r2, [pc, #288]	@ (80012ac <glcd_putchar+0x360>)
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8001192:	4b47      	ldr	r3, [pc, #284]	@ (80012b0 <glcd_putchar+0x364>)
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	4a46      	ldr	r2, [pc, #280]	@ (80012b0 <glcd_putchar+0x364>)
 8001198:	f023 0310 	bic.w	r3, r3, #16
 800119c:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 800119e:	4b42      	ldr	r3, [pc, #264]	@ (80012a8 <glcd_putchar+0x35c>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4a41      	ldr	r2, [pc, #260]	@ (80012a8 <glcd_putchar+0x35c>)
 80011a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011a8:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 80011aa:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <glcd_putchar+0x35c>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	4a3e      	ldr	r2, [pc, #248]	@ (80012a8 <glcd_putchar+0x35c>)
 80011b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011b4:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 80011b6:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <glcd_putchar+0x35c>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	4a3b      	ldr	r2, [pc, #236]	@ (80012a8 <glcd_putchar+0x35c>)
 80011bc:	f023 0320 	bic.w	r3, r3, #32
 80011c0:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fdae 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 80011c8:	4b36      	ldr	r3, [pc, #216]	@ (80012a4 <glcd_putchar+0x358>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4a35      	ldr	r2, [pc, #212]	@ (80012a4 <glcd_putchar+0x358>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d2:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff fda5 	bl	8000d24 <Delay>
        if (data & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <glcd_putchar+0x2a4>
 80011e4:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <glcd_putchar+0x360>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a30      	ldr	r2, [pc, #192]	@ (80012ac <glcd_putchar+0x360>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	60d3      	str	r3, [r2, #12]
        if (data & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <glcd_putchar+0x2ba>
 80011fa:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <glcd_putchar+0x358>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	4a29      	ldr	r2, [pc, #164]	@ (80012a4 <glcd_putchar+0x358>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001204:	60d3      	str	r3, [r2, #12]
        if (data & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <glcd_putchar+0x2d0>
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <glcd_putchar+0x364>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4a26      	ldr	r2, [pc, #152]	@ (80012b0 <glcd_putchar+0x364>)
 8001216:	f043 0320 	orr.w	r3, r3, #32
 800121a:	60d3      	str	r3, [r2, #12]
        if (data & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <glcd_putchar+0x2e6>
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <glcd_putchar+0x360>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4a20      	ldr	r2, [pc, #128]	@ (80012ac <glcd_putchar+0x360>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	60d3      	str	r3, [r2, #12]
        if (data & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <glcd_putchar+0x2fc>
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <glcd_putchar+0x364>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <glcd_putchar+0x364>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	60d3      	str	r3, [r2, #12]
        if (data & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <glcd_putchar+0x312>
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <glcd_putchar+0x35c>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <glcd_putchar+0x35c>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800125c:	60d3      	str	r3, [r2, #12]
        if (data & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <glcd_putchar+0x328>
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <glcd_putchar+0x35c>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <glcd_putchar+0x35c>)
 800126e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001272:	60d3      	str	r3, [r2, #12]
        if (data & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	da05      	bge.n	8001288 <glcd_putchar+0x33c>
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <glcd_putchar+0x35c>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <glcd_putchar+0x35c>)
 8001282:	f043 0320 	orr.w	r3, r3, #32
 8001286:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff fd4b 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <glcd_putchar+0x358>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <glcd_putchar+0x358>)
 8001294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001298:	60d3      	str	r3, [r2, #12]
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40011800 	.word	0x40011800
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40010c00 	.word	0x40010c00
 80012b0:	40011000 	.word	0x40011000

080012b4 <glcd_puts>:

void glcd_puts(char *str, char x, char y) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
 80012c0:	4613      	mov	r3, r2
 80012c2:	70bb      	strb	r3, [r7, #2]
    Delay(T);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fd2d 	bl	8000d24 <Delay>
    int i, j;
    while (*str != 0) {
 80012ca:	e030      	b.n	800132e <glcd_puts+0x7a>
        i = (8 * (*str));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	60fb      	str	r3, [r7, #12]
        j = i + 7;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3307      	adds	r3, #7
 80012d8:	60bb      	str	r3, [r7, #8]
        for (; i <= j; i++) {
 80012da:	e021      	b.n	8001320 <glcd_puts+0x6c>
            glcd_gotoxy(x, y);
 80012dc:	78ba      	ldrb	r2, [r7, #2]
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f82e 	bl	8001344 <glcd_gotoxy>
            glcd_putchar(Font[i], x);
 80012e8:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <glcd_puts+0x8c>)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	78fa      	ldrb	r2, [r7, #3]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe29 	bl	8000f4c <glcd_putchar>
            ++x;
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	3301      	adds	r3, #1
 80012fe:	70fb      	strb	r3, [r7, #3]
            if (x > 121) {
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b79      	cmp	r3, #121	@ 0x79
 8001304:	d909      	bls.n	800131a <glcd_puts+0x66>
                if (i % 8 == 0) {
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	2b00      	cmp	r3, #0
 800130e:	d104      	bne.n	800131a <glcd_puts+0x66>
                    ++y;
 8001310:	78bb      	ldrb	r3, [r7, #2]
 8001312:	3301      	adds	r3, #1
 8001314:	70bb      	strb	r3, [r7, #2]
                    x = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	70fb      	strb	r3, [r7, #3]
        for (; i <= j; i++) {
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	429a      	cmp	r2, r3
 8001326:	ddd9      	ble.n	80012dc <glcd_puts+0x28>
                }
            }
        }
        str++;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
    while (*str != 0) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1ca      	bne.n	80012cc <glcd_puts+0x18>
    }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	0800d714 	.word	0x0800d714

08001344 <glcd_gotoxy>:
        glcd_gotoxy(x, y);
        glcd_putImage(point, x);
    }
}

void glcd_gotoxy(unsigned char x, unsigned char y) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	460a      	mov	r2, r1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	71bb      	strb	r3, [r7, #6]
    Delay(T);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fce5 	bl	8000d24 <Delay>
    goto_row(y);
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f808 	bl	8001372 <goto_row>
    goto_column(x);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f81b 	bl	80013a0 <goto_column>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <goto_row>:

void goto_row(unsigned char y) {
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fcd1 	bl	8000d24 <Delay>
    y = (y | 0xB8) & 0xBF;
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f063 0347 	orn	r3, r3, #71	@ 0x47
 800138e:	71fb      	strb	r3, [r7, #7]
    send_command(y);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fcde 	bl	8000d54 <send_command>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <goto_column>:

void goto_column(unsigned char x) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
    Delay(T);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff fcba 	bl	8000d24 <Delay>

    if (x < 64) {
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80013b4:	f200 80da 	bhi.w	800156c <goto_column+0x1cc>
        x = (x | 0x40) & 0x7F;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013c4:	71fb      	strb	r3, [r7, #7]
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 80013c6:	4b65      	ldr	r3, [pc, #404]	@ (800155c <goto_column+0x1bc>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	4a64      	ldr	r2, [pc, #400]	@ (800155c <goto_column+0x1bc>)
 80013cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80013d0:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fca6 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 80013d8:	4b60      	ldr	r3, [pc, #384]	@ (800155c <goto_column+0x1bc>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a5f      	ldr	r2, [pc, #380]	@ (800155c <goto_column+0x1bc>)
 80013de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013e2:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff fc9d 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 80013ea:	4b5c      	ldr	r3, [pc, #368]	@ (800155c <goto_column+0x1bc>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	4a5b      	ldr	r2, [pc, #364]	@ (800155c <goto_column+0x1bc>)
 80013f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80013f4:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f7ff fc94 	bl	8000d24 <Delay>
        SECO1_PORT->ODR |= (1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 80013fc:	4b58      	ldr	r3, [pc, #352]	@ (8001560 <goto_column+0x1c0>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4a57      	ldr	r2, [pc, #348]	@ (8001560 <goto_column+0x1c0>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff fc8b 	bl	8000d24 <Delay>
        SECO2_PORT->ODR &= ~(1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=RESET
 800140e:	4b54      	ldr	r3, [pc, #336]	@ (8001560 <goto_column+0x1c0>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4a53      	ldr	r2, [pc, #332]	@ (8001560 <goto_column+0x1c0>)
 8001414:	f023 0308 	bic.w	r3, r3, #8
 8001418:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fc82 	bl	8000d24 <Delay>

        // Clear data lines
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 8001420:	4b50      	ldr	r3, [pc, #320]	@ (8001564 <goto_column+0x1c4>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a4f      	ldr	r2, [pc, #316]	@ (8001564 <goto_column+0x1c4>)
 8001426:	f023 0302 	bic.w	r3, r3, #2
 800142a:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 800142c:	4b4b      	ldr	r3, [pc, #300]	@ (800155c <goto_column+0x1bc>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a4a      	ldr	r2, [pc, #296]	@ (800155c <goto_column+0x1bc>)
 8001432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001436:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 8001438:	4b4b      	ldr	r3, [pc, #300]	@ (8001568 <goto_column+0x1c8>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a4a      	ldr	r2, [pc, #296]	@ (8001568 <goto_column+0x1c8>)
 800143e:	f023 0320 	bic.w	r3, r3, #32
 8001442:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 8001444:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <goto_column+0x1c4>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4a46      	ldr	r2, [pc, #280]	@ (8001564 <goto_column+0x1c4>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 8001450:	4b45      	ldr	r3, [pc, #276]	@ (8001568 <goto_column+0x1c8>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a44      	ldr	r2, [pc, #272]	@ (8001568 <goto_column+0x1c8>)
 8001456:	f023 0310 	bic.w	r3, r3, #16
 800145a:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 800145c:	4b40      	ldr	r3, [pc, #256]	@ (8001560 <goto_column+0x1c0>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	4a3f      	ldr	r2, [pc, #252]	@ (8001560 <goto_column+0x1c0>)
 8001462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001466:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8001468:	4b3d      	ldr	r3, [pc, #244]	@ (8001560 <goto_column+0x1c0>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4a3c      	ldr	r2, [pc, #240]	@ (8001560 <goto_column+0x1c0>)
 800146e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001472:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 8001474:	4b3a      	ldr	r3, [pc, #232]	@ (8001560 <goto_column+0x1c0>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a39      	ldr	r2, [pc, #228]	@ (8001560 <goto_column+0x1c0>)
 800147a:	f023 0320 	bic.w	r3, r3, #32
 800147e:	60d3      	str	r3, [r2, #12]

        Delay(T);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fc4f 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8001486:	4b35      	ldr	r3, [pc, #212]	@ (800155c <goto_column+0x1bc>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	4a34      	ldr	r2, [pc, #208]	@ (800155c <goto_column+0x1bc>)
 800148c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001490:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fc46 	bl	8000d24 <Delay>

        // Set data lines with the value of x
        if (x & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <goto_column+0x10e>
 80014a2:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <goto_column+0x1c4>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001564 <goto_column+0x1c4>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	60d3      	str	r3, [r2, #12]
        if (x & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <goto_column+0x124>
 80014b8:	4b28      	ldr	r3, [pc, #160]	@ (800155c <goto_column+0x1bc>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a27      	ldr	r2, [pc, #156]	@ (800155c <goto_column+0x1bc>)
 80014be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c2:	60d3      	str	r3, [r2, #12]
        if (x & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <goto_column+0x13a>
 80014ce:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <goto_column+0x1c8>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	4a25      	ldr	r2, [pc, #148]	@ (8001568 <goto_column+0x1c8>)
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	60d3      	str	r3, [r2, #12]
        if (x & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <goto_column+0x150>
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <goto_column+0x1c4>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <goto_column+0x1c4>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	60d3      	str	r3, [r2, #12]
        if (x & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <goto_column+0x166>
 80014fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <goto_column+0x1c8>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001568 <goto_column+0x1c8>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	60d3      	str	r3, [r2, #12]
        if (x & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <goto_column+0x17c>
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <goto_column+0x1c0>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <goto_column+0x1c0>)
 8001516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800151a:	60d3      	str	r3, [r2, #12]
        if (x & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <goto_column+0x192>
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <goto_column+0x1c0>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	4a0d      	ldr	r2, [pc, #52]	@ (8001560 <goto_column+0x1c0>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001530:	60d3      	str	r3, [r2, #12]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	da05      	bge.n	8001546 <goto_column+0x1a6>
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <goto_column+0x1c0>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	4a08      	ldr	r2, [pc, #32]	@ (8001560 <goto_column+0x1c0>)
 8001540:	f043 0320 	orr.w	r3, r3, #32
 8001544:	60d3      	str	r3, [r2, #12]

        Delay(T);
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff fbec 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <goto_column+0x1bc>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4a02      	ldr	r2, [pc, #8]	@ (800155c <goto_column+0x1bc>)
 8001552:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001556:	60d3      	str	r3, [r2, #12]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);

        Delay(T);
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
    }
}
 8001558:	e0db      	b.n	8001712 <goto_column+0x372>
 800155a:	bf00      	nop
 800155c:	40011800 	.word	0x40011800
 8001560:	40010800 	.word	0x40010800
 8001564:	40010c00 	.word	0x40010c00
 8001568:	40011000 	.word	0x40011000
        x -= 64;
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	3b40      	subs	r3, #64	@ 0x40
 8001570:	71fb      	strb	r3, [r7, #7]
        x = (x | 0x40) & 0x7F;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800157e:	71fb      	strb	r3, [r7, #7]
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8001580:	4b66      	ldr	r3, [pc, #408]	@ (800171c <goto_column+0x37c>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4a65      	ldr	r2, [pc, #404]	@ (800171c <goto_column+0x37c>)
 8001586:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800158a:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff fbc9 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << RW_PIN_NUMBER); // RW_PIN_NUMBER=RESET
 8001592:	4b62      	ldr	r3, [pc, #392]	@ (800171c <goto_column+0x37c>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	4a61      	ldr	r2, [pc, #388]	@ (800171c <goto_column+0x37c>)
 8001598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800159c:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff fbc0 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << DI_PIN_NUMBER); // DI_PIN_NUMBER=RESET
 80015a4:	4b5d      	ldr	r3, [pc, #372]	@ (800171c <goto_column+0x37c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a5c      	ldr	r2, [pc, #368]	@ (800171c <goto_column+0x37c>)
 80015aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015ae:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fbb7 	bl	8000d24 <Delay>
        SECO1_PORT->ODR &= ~(1 << CS1_PIN_NUMBER); // CS1_PIN_NUMBER=RESET
 80015b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001720 <goto_column+0x380>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	4a59      	ldr	r2, [pc, #356]	@ (8001720 <goto_column+0x380>)
 80015bc:	f023 0310 	bic.w	r3, r3, #16
 80015c0:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fbae 	bl	8000d24 <Delay>
        SECO2_PORT->ODR |= (1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=SET
 80015c8:	4b55      	ldr	r3, [pc, #340]	@ (8001720 <goto_column+0x380>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a54      	ldr	r2, [pc, #336]	@ (8001720 <goto_column+0x380>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	60d3      	str	r3, [r2, #12]
        Delay(T);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fba5 	bl	8000d24 <Delay>
        DATA0_PORT->ODR &= ~(1 << D0_PIN_NUMBER);
 80015da:	4b52      	ldr	r3, [pc, #328]	@ (8001724 <goto_column+0x384>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	4a51      	ldr	r2, [pc, #324]	@ (8001724 <goto_column+0x384>)
 80015e0:	f023 0302 	bic.w	r3, r3, #2
 80015e4:	60d3      	str	r3, [r2, #12]
        DATA1_PORT->ODR &= ~(1 << D1_PIN_NUMBER);
 80015e6:	4b4d      	ldr	r3, [pc, #308]	@ (800171c <goto_column+0x37c>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4a4c      	ldr	r2, [pc, #304]	@ (800171c <goto_column+0x37c>)
 80015ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015f0:	60d3      	str	r3, [r2, #12]
        DATA2_PORT->ODR &= ~(1 << D2_PIN_NUMBER);
 80015f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001728 <goto_column+0x388>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001728 <goto_column+0x388>)
 80015f8:	f023 0320 	bic.w	r3, r3, #32
 80015fc:	60d3      	str	r3, [r2, #12]
        DATA3_PORT->ODR &= ~(1 << D3_PIN_NUMBER);
 80015fe:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <goto_column+0x384>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4a48      	ldr	r2, [pc, #288]	@ (8001724 <goto_column+0x384>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	60d3      	str	r3, [r2, #12]
        DATA4_PORT->ODR &= ~(1 << D4_PIN_NUMBER);
 800160a:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <goto_column+0x388>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4a46      	ldr	r2, [pc, #280]	@ (8001728 <goto_column+0x388>)
 8001610:	f023 0310 	bic.w	r3, r3, #16
 8001614:	60d3      	str	r3, [r2, #12]
        DATA5_PORT->ODR &= ~(1 << D5_PIN_NUMBER);
 8001616:	4b42      	ldr	r3, [pc, #264]	@ (8001720 <goto_column+0x380>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4a41      	ldr	r2, [pc, #260]	@ (8001720 <goto_column+0x380>)
 800161c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001620:	60d3      	str	r3, [r2, #12]
        DATA6_PORT->ODR &= ~(1 << D6_PIN_NUMBER);
 8001622:	4b3f      	ldr	r3, [pc, #252]	@ (8001720 <goto_column+0x380>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4a3e      	ldr	r2, [pc, #248]	@ (8001720 <goto_column+0x380>)
 8001628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800162c:	60d3      	str	r3, [r2, #12]
        DATA7_PORT->ODR &= ~(1 << D7_PIN_NUMBER);
 800162e:	4b3c      	ldr	r3, [pc, #240]	@ (8001720 <goto_column+0x380>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	4a3b      	ldr	r2, [pc, #236]	@ (8001720 <goto_column+0x380>)
 8001634:	f023 0320 	bic.w	r3, r3, #32
 8001638:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fb72 	bl	8000d24 <Delay>
        CTRL_PORT->ODR |= (1 << E_PIN_NUMBER); // E_PIN_NUMBER=SET
 8001640:	4b36      	ldr	r3, [pc, #216]	@ (800171c <goto_column+0x37c>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a35      	ldr	r2, [pc, #212]	@ (800171c <goto_column+0x37c>)
 8001646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800164a:	60d3      	str	r3, [r2, #12]
        Delay(T);
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff fb69 	bl	8000d24 <Delay>
        if (x & 0x01) DATA0_PORT->ODR |= (1 << D0_PIN_NUMBER);
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <goto_column+0x2c8>
 800165c:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <goto_column+0x384>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <goto_column+0x384>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	60d3      	str	r3, [r2, #12]
        if (x & 0x02) DATA1_PORT->ODR |= (1 << D1_PIN_NUMBER);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <goto_column+0x2de>
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <goto_column+0x37c>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	4a29      	ldr	r2, [pc, #164]	@ (800171c <goto_column+0x37c>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167c:	60d3      	str	r3, [r2, #12]
        if (x & 0x04) DATA2_PORT->ODR |= (1 << D2_PIN_NUMBER);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <goto_column+0x2f4>
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <goto_column+0x388>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <goto_column+0x388>)
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	60d3      	str	r3, [r2, #12]
        if (x & 0x08) DATA3_PORT->ODR |= (1 << D3_PIN_NUMBER);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <goto_column+0x30a>
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <goto_column+0x384>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	4a20      	ldr	r2, [pc, #128]	@ (8001724 <goto_column+0x384>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	60d3      	str	r3, [r2, #12]
        if (x & 0x10) DATA4_PORT->ODR |= (1 << D4_PIN_NUMBER);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <goto_column+0x320>
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <goto_column+0x388>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <goto_column+0x388>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	60d3      	str	r3, [r2, #12]
        if (x & 0x20) DATA5_PORT->ODR |= (1 << D5_PIN_NUMBER);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <goto_column+0x336>
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <goto_column+0x380>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	4a14      	ldr	r2, [pc, #80]	@ (8001720 <goto_column+0x380>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d4:	60d3      	str	r3, [r2, #12]
        if (x & 0x40) DATA6_PORT->ODR |= (1 << D6_PIN_NUMBER);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <goto_column+0x34c>
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <goto_column+0x380>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001720 <goto_column+0x380>)
 80016e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ea:	60d3      	str	r3, [r2, #12]
        if (x & 0x80) DATA7_PORT->ODR |= (1 << D7_PIN_NUMBER);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da05      	bge.n	8001700 <goto_column+0x360>
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <goto_column+0x380>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <goto_column+0x380>)
 80016fa:	f043 0320 	orr.w	r3, r3, #32
 80016fe:	60d3      	str	r3, [r2, #12]
        Delay(T);
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff fb0f 	bl	8000d24 <Delay>
        CTRL_PORT->ODR &= ~(1 << E_PIN_NUMBER); // E_PIN_NUMBER=RESET
 8001706:	4b05      	ldr	r3, [pc, #20]	@ (800171c <goto_column+0x37c>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	4a04      	ldr	r2, [pc, #16]	@ (800171c <goto_column+0x37c>)
 800170c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001710:	60d3      	str	r3, [r2, #12]
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40011800 	.word	0x40011800
 8001720:	40010800 	.word	0x40010800
 8001724:	40010c00 	.word	0x40010c00
 8001728:	40011000 	.word	0x40011000

0800172c <glcd_clearline>:

void glcd_clearline(unsigned line) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    Delay(T);
 8001734:	2001      	movs	r0, #1
 8001736:	f7ff faf5 	bl	8000d24 <Delay>
    int i;
    glcd_gotoxy(0, line); // At start of line of left side
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4619      	mov	r1, r3
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fdff 	bl	8001344 <glcd_gotoxy>
    SECO1_PORT->ODR = SECO1_PORT->ODR | 1 << (CS1_PIN_NUMBER); // CS1_PIN_NUMBER=SET
 8001746:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <glcd_clearline+0x94>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <glcd_clearline+0x94>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	60d3      	str	r3, [r2, #12]
    Delay(T);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff fae6 	bl	8000d24 <Delay>
    SECO2_PORT->ODR = SECO2_PORT->ODR & ~(1 << CS2_PIN_NUMBER); // CS2_PIN_NUMBER=RESET
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <glcd_clearline+0x94>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4a18      	ldr	r2, [pc, #96]	@ (80017c0 <glcd_clearline+0x94>)
 800175e:	f023 0308 	bic.w	r3, r3, #8
 8001762:	60d3      	str	r3, [r2, #12]

    for (i = 0; i < 64; i++) {
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e00a      	b.n	8001780 <glcd_clearline+0x54>
        glcd_putchar(0, 0); // Print 0 for Delete Left section
 800176a:	2100      	movs	r1, #0
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff fbed 	bl	8000f4c <glcd_putchar>
        glcd_putchar(0, 64); // Print 0 for Delete Right section
 8001772:	2140      	movs	r1, #64	@ 0x40
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fbe9 	bl	8000f4c <glcd_putchar>
    for (i = 0; i < 64; i++) {
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b3f      	cmp	r3, #63	@ 0x3f
 8001784:	ddf1      	ble.n	800176a <glcd_clearline+0x3e>
    }
    glcd_gotoxy(64, line); // At start of line of right side
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4619      	mov	r1, r3
 800178c:	2040      	movs	r0, #64	@ 0x40
 800178e:	f7ff fdd9 	bl	8001344 <glcd_gotoxy>
    for (i = 0; i < 64; i++) {
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e00a      	b.n	80017ae <glcd_clearline+0x82>
        glcd_putchar(0, 0); // Print 0 for Delete Left section
 8001798:	2100      	movs	r1, #0
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fbd6 	bl	8000f4c <glcd_putchar>
        glcd_putchar(0, 64); // Print 0 for Delete Right section
 80017a0:	2140      	movs	r1, #64	@ 0x40
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fbd2 	bl	8000f4c <glcd_putchar>
    for (i = 0; i < 64; i++) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017b2:	ddf1      	ble.n	8001798 <glcd_clearline+0x6c>
    }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40010800 	.word	0x40010800

080017c4 <glcd_clear_all>:

void glcd_clear_all() {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 8; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	e006      	b.n	80017de <glcd_clear_all+0x1a>
        glcd_clearline(i);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ffaa 	bl	800172c <glcd_clearline>
    for (i = 0; i < 8; i++)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3301      	adds	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b07      	cmp	r3, #7
 80017e2:	ddf5      	ble.n	80017d0 <glcd_clear_all+0xc>
    send_command(0x40); // SET Cursor on Y=0
 80017e4:	2040      	movs	r0, #64	@ 0x40
 80017e6:	f7ff fab5 	bl	8000d54 <send_command>
    send_command(0xB8); // SET Page on X=0, Line=0
 80017ea:	20b8      	movs	r0, #184	@ 0xb8
 80017ec:	f7ff fab2 	bl	8000d54 <send_command>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <GLCD_INIT>:
	}
}
//-------------------------------------
//Function For Initialize GLCD Pins
// Function For Initialize GLCD Pins
void GLCD_INIT(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    // Enable clock for GPIO ports A, B, C, D, and E
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_APB2ENR_IOPDEN | RCC_APB2ENR_IOPEEN;
 80017fc:	4b61      	ldr	r3, [pc, #388]	@ (8001984 <GLCD_INIT+0x18c>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a60      	ldr	r2, [pc, #384]	@ (8001984 <GLCD_INIT+0x18c>)
 8001802:	f043 037c 	orr.w	r3, r3, #124	@ 0x7c
 8001806:	6193      	str	r3, [r2, #24]

    // Set the pin modes to output for DATA_PORT and CTRL_PORT
    // GPIOA: D5, D6, D7 (PA7, PA6, PA5), CS1 (PA4), CS2 (PA3), RESET (PA2)
    DATA5_PORT->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8001808:	4b5f      	ldr	r3, [pc, #380]	@ (8001988 <GLCD_INIT+0x190>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a5e      	ldr	r2, [pc, #376]	@ (8001988 <GLCD_INIT+0x190>)
 800180e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001812:	6013      	str	r3, [r2, #0]
    DATA5_PORT->CRL |= GPIO_CRL_MODE7_0;
 8001814:	4b5c      	ldr	r3, [pc, #368]	@ (8001988 <GLCD_INIT+0x190>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a5b      	ldr	r2, [pc, #364]	@ (8001988 <GLCD_INIT+0x190>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181e:	6013      	str	r3, [r2, #0]
    DATA6_PORT->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8001820:	4b59      	ldr	r3, [pc, #356]	@ (8001988 <GLCD_INIT+0x190>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a58      	ldr	r2, [pc, #352]	@ (8001988 <GLCD_INIT+0x190>)
 8001826:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800182a:	6013      	str	r3, [r2, #0]
    DATA6_PORT->CRL |= GPIO_CRL_MODE6_0;
 800182c:	4b56      	ldr	r3, [pc, #344]	@ (8001988 <GLCD_INIT+0x190>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a55      	ldr	r2, [pc, #340]	@ (8001988 <GLCD_INIT+0x190>)
 8001832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001836:	6013      	str	r3, [r2, #0]
    DATA7_PORT->CRL &= ~(GPIO_CRL_MODE5 | GPIO_CRL_CNF5);
 8001838:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <GLCD_INIT+0x190>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a52      	ldr	r2, [pc, #328]	@ (8001988 <GLCD_INIT+0x190>)
 800183e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001842:	6013      	str	r3, [r2, #0]
    DATA7_PORT->CRL |= GPIO_CRL_MODE5_0;
 8001844:	4b50      	ldr	r3, [pc, #320]	@ (8001988 <GLCD_INIT+0x190>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a4f      	ldr	r2, [pc, #316]	@ (8001988 <GLCD_INIT+0x190>)
 800184a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800184e:	6013      	str	r3, [r2, #0]

    SECO1_PORT->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4 | GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8001850:	4b4d      	ldr	r3, [pc, #308]	@ (8001988 <GLCD_INIT+0x190>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a4c      	ldr	r2, [pc, #304]	@ (8001988 <GLCD_INIT+0x190>)
 8001856:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 800185a:	6013      	str	r3, [r2, #0]
    SECO1_PORT->CRL |= (GPIO_CRL_MODE4_0 | GPIO_CRL_MODE3_0);
 800185c:	4b4a      	ldr	r3, [pc, #296]	@ (8001988 <GLCD_INIT+0x190>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a49      	ldr	r2, [pc, #292]	@ (8001988 <GLCD_INIT+0x190>)
 8001862:	f443 3388 	orr.w	r3, r3, #69632	@ 0x11000
 8001866:	6013      	str	r3, [r2, #0]

    RESET_PORT->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8001868:	4b47      	ldr	r3, [pc, #284]	@ (8001988 <GLCD_INIT+0x190>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a46      	ldr	r2, [pc, #280]	@ (8001988 <GLCD_INIT+0x190>)
 800186e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001872:	6013      	str	r3, [r2, #0]
    RESET_PORT->CRL |= GPIO_CRL_MODE2_0;
 8001874:	4b44      	ldr	r3, [pc, #272]	@ (8001988 <GLCD_INIT+0x190>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a43      	ldr	r2, [pc, #268]	@ (8001988 <GLCD_INIT+0x190>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187e:	6013      	str	r3, [r2, #0]

    // GPIOB: D0, D3 (PB1, PB0)
    DATA0_PORT->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1 | GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8001880:	4b42      	ldr	r3, [pc, #264]	@ (800198c <GLCD_INIT+0x194>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a41      	ldr	r2, [pc, #260]	@ (800198c <GLCD_INIT+0x194>)
 8001886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800188a:	6013      	str	r3, [r2, #0]
    DATA0_PORT->CRL |= (GPIO_CRL_MODE1_0 | GPIO_CRL_MODE0_0);
 800188c:	4b3f      	ldr	r3, [pc, #252]	@ (800198c <GLCD_INIT+0x194>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a3e      	ldr	r2, [pc, #248]	@ (800198c <GLCD_INIT+0x194>)
 8001892:	f043 0311 	orr.w	r3, r3, #17
 8001896:	6013      	str	r3, [r2, #0]

    // GPIOE: D1, DI, RW, E (PE7, PE10, PE8, PE9)
    DATA1_PORT->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8001898:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <GLCD_INIT+0x198>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3c      	ldr	r2, [pc, #240]	@ (8001990 <GLCD_INIT+0x198>)
 800189e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80018a2:	6013      	str	r3, [r2, #0]
    DATA1_PORT->CRL |= GPIO_CRL_MODE7_0;
 80018a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <GLCD_INIT+0x198>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a39      	ldr	r2, [pc, #228]	@ (8001990 <GLCD_INIT+0x198>)
 80018aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	6013      	str	r3, [r2, #0]
    CTRL_PORT->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10 | GPIO_CRH_MODE8 | GPIO_CRH_CNF8 | GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 80018b0:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <GLCD_INIT+0x198>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a36      	ldr	r2, [pc, #216]	@ (8001990 <GLCD_INIT+0x198>)
 80018b6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80018ba:	f023 030f 	bic.w	r3, r3, #15
 80018be:	6053      	str	r3, [r2, #4]
    CTRL_PORT->CRH |= (GPIO_CRH_MODE10_0 | GPIO_CRH_MODE8_0 | GPIO_CRH_MODE9_0);
 80018c0:	4b33      	ldr	r3, [pc, #204]	@ (8001990 <GLCD_INIT+0x198>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a32      	ldr	r2, [pc, #200]	@ (8001990 <GLCD_INIT+0x198>)
 80018c6:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6053      	str	r3, [r2, #4]

    // GPIOC: D2, D4 (PC5, PC4)
    DATA2_PORT->CRL &= ~(GPIO_CRL_MODE5 | GPIO_CRL_CNF5);
 80018d0:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <GLCD_INIT+0x19c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001994 <GLCD_INIT+0x19c>)
 80018d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80018da:	6013      	str	r3, [r2, #0]
    DATA2_PORT->CRL |= GPIO_CRL_MODE5_0;
 80018dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <GLCD_INIT+0x19c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001994 <GLCD_INIT+0x19c>)
 80018e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018e6:	6013      	str	r3, [r2, #0]
    DATA4_PORT->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4);
 80018e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <GLCD_INIT+0x19c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a29      	ldr	r2, [pc, #164]	@ (8001994 <GLCD_INIT+0x19c>)
 80018ee:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80018f2:	6013      	str	r3, [r2, #0]
    DATA4_PORT->CRL |= GPIO_CRL_MODE4_0;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <GLCD_INIT+0x19c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a26      	ldr	r2, [pc, #152]	@ (8001994 <GLCD_INIT+0x19c>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fe:	6013      	str	r3, [r2, #0]

    // Reset data and control ports
    DATA0_PORT->BSRR = (1 << (D0_PIN_NUMBER + 16));
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <GLCD_INIT+0x194>)
 8001902:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001906:	611a      	str	r2, [r3, #16]
    DATA1_PORT->BSRR = (1 << (D1_PIN_NUMBER + 16));
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <GLCD_INIT+0x198>)
 800190a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800190e:	611a      	str	r2, [r3, #16]
    DATA2_PORT->BSRR = (1 << (D2_PIN_NUMBER + 16));
 8001910:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <GLCD_INIT+0x19c>)
 8001912:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001916:	611a      	str	r2, [r3, #16]
    DATA3_PORT->BSRR = (1 << (D3_PIN_NUMBER + 16));
 8001918:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <GLCD_INIT+0x194>)
 800191a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800191e:	611a      	str	r2, [r3, #16]
    DATA4_PORT->BSRR = (1 << (D4_PIN_NUMBER + 16));
 8001920:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <GLCD_INIT+0x19c>)
 8001922:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001926:	611a      	str	r2, [r3, #16]
    DATA5_PORT->BSRR = (1 << (D5_PIN_NUMBER + 16));
 8001928:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <GLCD_INIT+0x190>)
 800192a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800192e:	611a      	str	r2, [r3, #16]
    DATA6_PORT->BSRR = (1 << (D6_PIN_NUMBER + 16));
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <GLCD_INIT+0x190>)
 8001932:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001936:	611a      	str	r2, [r3, #16]
    DATA7_PORT->BSRR = (1 << (D7_PIN_NUMBER + 16));
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <GLCD_INIT+0x190>)
 800193a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800193e:	611a      	str	r2, [r3, #16]
    SECO1_PORT->BSRR = (1 << (CS1_PIN_NUMBER + 16));
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <GLCD_INIT+0x190>)
 8001942:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001946:	611a      	str	r2, [r3, #16]
    SECO2_PORT->BSRR = (1 << (CS2_PIN_NUMBER + 16));
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <GLCD_INIT+0x190>)
 800194a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800194e:	611a      	str	r2, [r3, #16]
    RESET_PORT->BSRR = (1 << (RESET_PIN_NUMBER + 16));
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <GLCD_INIT+0x190>)
 8001952:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001956:	611a      	str	r2, [r3, #16]

    // Reset the GLCD
    RESET_PORT->BSRR = (1 << RESET_PIN_NUMBER); // Set reset pin high
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <GLCD_INIT+0x190>)
 800195a:	2204      	movs	r2, #4
 800195c:	611a      	str	r2, [r3, #16]
    Delay(10); // Wait for a short period
 800195e:	200a      	movs	r0, #10
 8001960:	f7ff f9e0 	bl	8000d24 <Delay>
    RESET_PORT->BSRR = (1 << (RESET_PIN_NUMBER + 16)); // Set reset pin low
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <GLCD_INIT+0x190>)
 8001966:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800196a:	611a      	str	r2, [r3, #16]
    Delay(10); // Wait for a short period
 800196c:	200a      	movs	r0, #10
 800196e:	f7ff f9d9 	bl	8000d24 <Delay>
    RESET_PORT->BSRR = (1 << RESET_PIN_NUMBER); // Set reset pin high
 8001972:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <GLCD_INIT+0x190>)
 8001974:	2204      	movs	r2, #4
 8001976:	611a      	str	r2, [r3, #16]
    Delay(10); // Wait for a short period
 8001978:	200a      	movs	r0, #10
 800197a:	f7ff f9d3 	bl	8000d24 <Delay>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40011800 	.word	0x40011800
 8001994:	40011000 	.word	0x40011000

08001998 <toDisplay>:
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */
// TODO begin

void toDisplay() {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af02      	add	r7, sp, #8
	for (int i = 0; i < 16; ++i) {
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	e008      	b.n	80019b6 <toDisplay+0x1e>
		eepDisplay[i] = -1;
 80019a4:	4a19      	ldr	r2, [pc, #100]	@ (8001a0c <toDisplay+0x74>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 16; ++i) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	ddf3      	ble.n	80019a4 <toDisplay+0xc>
	}
	count = 0;
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <toDisplay+0x78>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	e019      	b.n	80019fc <toDisplay+0x64>
		SPIF_ReadSector(&spif, i, read, 1, 0);
 80019c8:	6839      	ldr	r1, [r7, #0]
 80019ca:	2300      	movs	r3, #0
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	4a10      	ldr	r2, [pc, #64]	@ (8001a14 <toDisplay+0x7c>)
 80019d2:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <toDisplay+0x80>)
 80019d4:	f004 fa6c 	bl	8005eb0 <SPIF_ReadSector>
		if (read[0] != 255) {
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <toDisplay+0x7c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2bff      	cmp	r3, #255	@ 0xff
 80019de:	d00a      	beq.n	80019f6 <toDisplay+0x5e>
			eepDisplay[count] = i;
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <toDisplay+0x78>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4909      	ldr	r1, [pc, #36]	@ (8001a0c <toDisplay+0x74>)
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			count++;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <toDisplay+0x78>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4a07      	ldr	r2, [pc, #28]	@ (8001a10 <toDisplay+0x78>)
 80019f4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 16; i++) {
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	dde2      	ble.n	80019c8 <toDisplay+0x30>
		}
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200006ac 	.word	0x200006ac
 8001a10:	200006f0 	.word	0x200006f0
 8001a14:	2000070c 	.word	0x2000070c
 8001a18:	20000678 	.word	0x20000678

08001a1c <toAdd>:
  //          count++;
  //        }
  //      }
  //    }

void toAdd(const char* dN, int dM, int dK) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 16; i ++) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e044      	b.n	8001ab8 <toAdd+0x9c>
	SPIF_ReadSector(&spif, i, read, 1, 0);
 8001a2e:	6979      	ldr	r1, [r7, #20]
 8001a30:	2300      	movs	r3, #0
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2301      	movs	r3, #1
 8001a36:	4a24      	ldr	r2, [pc, #144]	@ (8001ac8 <toAdd+0xac>)
 8001a38:	4824      	ldr	r0, [pc, #144]	@ (8001acc <toAdd+0xb0>)
 8001a3a:	f004 fa39 	bl	8005eb0 <SPIF_ReadSector>
    if (read[0] == 255) {
 8001a3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <toAdd+0xac>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2bff      	cmp	r3, #255	@ 0xff
 8001a44:	d135      	bne.n	8001ab2 <toAdd+0x96>
      for (int j = 0; j < 7; j++) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	e010      	b.n	8001a6e <toAdd+0x52>
    	write[0] = dN[j];
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <toAdd+0xb4>)
 8001a56:	701a      	strb	r2, [r3, #0]
    	SPIF_WriteSector(&spif, i, write, 1, j);
 8001a58:	6979      	ldr	r1, [r7, #20]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad0 <toAdd+0xb4>)
 8001a62:	481a      	ldr	r0, [pc, #104]	@ (8001acc <toAdd+0xb0>)
 8001a64:	f004 f9ba 	bl	8005ddc <SPIF_WriteSector>
      for (int j = 0; j < 7; j++) {
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b06      	cmp	r3, #6
 8001a72:	ddeb      	ble.n	8001a4c <toAdd+0x30>
      }
	  write[0] = dM;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <toAdd+0xb4>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, i, write, 1, 7);
 8001a7c:	6979      	ldr	r1, [r7, #20]
 8001a7e:	2307      	movs	r3, #7
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <toAdd+0xb4>)
 8001a86:	4811      	ldr	r0, [pc, #68]	@ (8001acc <toAdd+0xb0>)
 8001a88:	f004 f9a8 	bl	8005ddc <SPIF_WriteSector>
	  write[0] = dK/25;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <toAdd+0xb8>)
 8001a90:	fb82 1203 	smull	r1, r2, r2, r3
 8001a94:	10d2      	asrs	r2, r2, #3
 8001a96:	17db      	asrs	r3, r3, #31
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <toAdd+0xb4>)
 8001a9e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, i, write, 1, 8);
 8001aa0:	6979      	ldr	r1, [r7, #20]
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <toAdd+0xb4>)
 8001aaa:	4808      	ldr	r0, [pc, #32]	@ (8001acc <toAdd+0xb0>)
 8001aac:	f004 f996 	bl	8005ddc <SPIF_WriteSector>
      break;
 8001ab0:	e006      	b.n	8001ac0 <toAdd+0xa4>
  for (int i = 0; i < 16; i ++) {
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	ddb7      	ble.n	8001a2e <toAdd+0x12>
    }
  }
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000070c 	.word	0x2000070c
 8001acc:	20000678 	.word	0x20000678
 8001ad0:	20000710 	.word	0x20000710
 8001ad4:	51eb851f 	.word	0x51eb851f

08001ad8 <toDelete>:
//        break;
//      }
//    }
//  }

void toDelete(int index) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	SPIF_EraseSector(&spif, index);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <toDelete+0x1c>)
 8001ae6:	f004 f8f6 	bl	8005cd6 <SPIF_EraseSector>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000678 	.word	0x20000678

08001af8 <storestate>:
//    for (int i = 0; i <  9; i++) {
//      EEPROM.update(index+i, 0xFF);
//    }
//  }

  void storestate() { // called when turned off
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af02      	add	r7, sp, #8
	  SPIF_EraseSector(&spif, 20);
 8001afe:	2114      	movs	r1, #20
 8001b00:	482b      	ldr	r0, [pc, #172]	@ (8001bb0 <storestate+0xb8>)
 8001b02:	f004 f8e8 	bl	8005cd6 <SPIF_EraseSector>
	  write[0] = MHz;
 8001b06:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <storestate+0xbc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb8 <storestate+0xc0>)
 8001b0e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 0);
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2301      	movs	r3, #1
 8001b16:	4a28      	ldr	r2, [pc, #160]	@ (8001bb8 <storestate+0xc0>)
 8001b18:	2114      	movs	r1, #20
 8001b1a:	4825      	ldr	r0, [pc, #148]	@ (8001bb0 <storestate+0xb8>)
 8001b1c:	f004 f95e 	bl	8005ddc <SPIF_WriteSector>
	  write[0] = KHz/25;
 8001b20:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <storestate+0xc4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a26      	ldr	r2, [pc, #152]	@ (8001bc0 <storestate+0xc8>)
 8001b26:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2a:	10d2      	asrs	r2, r2, #3
 8001b2c:	17db      	asrs	r3, r3, #31
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b21      	ldr	r3, [pc, #132]	@ (8001bb8 <storestate+0xc0>)
 8001b34:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 1);
 8001b36:	2301      	movs	r3, #1
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <storestate+0xc0>)
 8001b3e:	2114      	movs	r1, #20
 8001b40:	481b      	ldr	r0, [pc, #108]	@ (8001bb0 <storestate+0xb8>)
 8001b42:	f004 f94b 	bl	8005ddc <SPIF_WriteSector>
	  write[0] = SM;
 8001b46:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <storestate+0xcc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <storestate+0xc0>)
 8001b4e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 2);
 8001b50:	2302      	movs	r3, #2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2301      	movs	r3, #1
 8001b56:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <storestate+0xc0>)
 8001b58:	2114      	movs	r1, #20
 8001b5a:	4815      	ldr	r0, [pc, #84]	@ (8001bb0 <storestate+0xb8>)
 8001b5c:	f004 f93e 	bl	8005ddc <SPIF_WriteSector>
	  write[0] = SK/25;
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <storestate+0xd0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <storestate+0xc8>)
 8001b66:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6a:	10d2      	asrs	r2, r2, #3
 8001b6c:	17db      	asrs	r3, r3, #31
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <storestate+0xc0>)
 8001b74:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 3);
 8001b76:	2303      	movs	r3, #3
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <storestate+0xc0>)
 8001b7e:	2114      	movs	r1, #20
 8001b80:	480b      	ldr	r0, [pc, #44]	@ (8001bb0 <storestate+0xb8>)
 8001b82:	f004 f92b 	bl	8005ddc <SPIF_WriteSector>
	  write[0] = vol;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <storestate+0xd4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <storestate+0xc0>)
 8001b8e:	701a      	strb	r2, [r3, #0]
	  SPIF_WriteSector(&spif, 20, write, 1, 4);
 8001b90:	2304      	movs	r3, #4
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	4a08      	ldr	r2, [pc, #32]	@ (8001bb8 <storestate+0xc0>)
 8001b98:	2114      	movs	r1, #20
 8001b9a:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <storestate+0xb8>)
 8001b9c:	f004 f91e 	bl	8005ddc <SPIF_WriteSector>
	  write[0] = obs;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <storestate+0xd8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <storestate+0xc0>)
 8001ba8:	701a      	strb	r2, [r3, #0]
  }
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000678 	.word	0x20000678
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000710 	.word	0x20000710
 8001bbc:	2000069c 	.word	0x2000069c
 8001bc0:	51eb851f 	.word	0x51eb851f
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	200006a0 	.word	0x200006a0
 8001bcc:	200006a4 	.word	0x200006a4
 8001bd0:	200006fc 	.word	0x200006fc
 8001bd4:	00000000 	.word	0x00000000

08001bd8 <loadstate>:

  void loadstate() { // called on startup
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af02      	add	r7, sp, #8
	  SPIF_ReadSector(&spif, 20, read, 1, 0);
 8001bde:	2300      	movs	r3, #0
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2301      	movs	r3, #1
 8001be4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d20 <loadstate+0x148>)
 8001be6:	2114      	movs	r1, #20
 8001be8:	484e      	ldr	r0, [pc, #312]	@ (8001d24 <loadstate+0x14c>)
 8001bea:	f004 f961 	bl	8005eb0 <SPIF_ReadSector>
	  MHz = read[0];
 8001bee:	4b4c      	ldr	r3, [pc, #304]	@ (8001d20 <loadstate+0x148>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8001d28 <loadstate+0x150>)
 8001bf6:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 1);
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	4a48      	ldr	r2, [pc, #288]	@ (8001d20 <loadstate+0x148>)
 8001c00:	2114      	movs	r1, #20
 8001c02:	4848      	ldr	r0, [pc, #288]	@ (8001d24 <loadstate+0x14c>)
 8001c04:	f004 f954 	bl	8005eb0 <SPIF_ReadSector>
	  KHz = read[0] * 25;
 8001c08:	4b45      	ldr	r3, [pc, #276]	@ (8001d20 <loadstate+0x148>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	4a44      	ldr	r2, [pc, #272]	@ (8001d2c <loadstate+0x154>)
 8001c1a:	6013      	str	r3, [r2, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 2);
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2301      	movs	r3, #1
 8001c22:	4a3f      	ldr	r2, [pc, #252]	@ (8001d20 <loadstate+0x148>)
 8001c24:	2114      	movs	r1, #20
 8001c26:	483f      	ldr	r0, [pc, #252]	@ (8001d24 <loadstate+0x14c>)
 8001c28:	f004 f942 	bl	8005eb0 <SPIF_ReadSector>
	  SM = read[0];
 8001c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d20 <loadstate+0x148>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b3f      	ldr	r3, [pc, #252]	@ (8001d30 <loadstate+0x158>)
 8001c34:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 3);
 8001c36:	2303      	movs	r3, #3
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4a38      	ldr	r2, [pc, #224]	@ (8001d20 <loadstate+0x148>)
 8001c3e:	2114      	movs	r1, #20
 8001c40:	4838      	ldr	r0, [pc, #224]	@ (8001d24 <loadstate+0x14c>)
 8001c42:	f004 f935 	bl	8005eb0 <SPIF_ReadSector>
	  SK = read[0] * 25;
 8001c46:	4b36      	ldr	r3, [pc, #216]	@ (8001d20 <loadstate+0x148>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	009a      	lsls	r2, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	4a37      	ldr	r2, [pc, #220]	@ (8001d34 <loadstate+0x15c>)
 8001c58:	6013      	str	r3, [r2, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 4);
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4a2f      	ldr	r2, [pc, #188]	@ (8001d20 <loadstate+0x148>)
 8001c62:	2114      	movs	r1, #20
 8001c64:	482f      	ldr	r0, [pc, #188]	@ (8001d24 <loadstate+0x14c>)
 8001c66:	f004 f923 	bl	8005eb0 <SPIF_ReadSector>
	  vol = read[0];
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <loadstate+0x148>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b31      	ldr	r3, [pc, #196]	@ (8001d38 <loadstate+0x160>)
 8001c72:	601a      	str	r2, [r3, #0]
	  SPIF_ReadSector(&spif, 20, read, 1, 5);
 8001c74:	2305      	movs	r3, #5
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	4a29      	ldr	r2, [pc, #164]	@ (8001d20 <loadstate+0x148>)
 8001c7c:	2114      	movs	r1, #20
 8001c7e:	4829      	ldr	r0, [pc, #164]	@ (8001d24 <loadstate+0x14c>)
 8001c80:	f004 f916 	bl	8005eb0 <SPIF_ReadSector>
	  obs = read[0];
 8001c84:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <loadstate+0x148>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <loadstate+0x164>)
 8001c8c:	601a      	str	r2, [r3, #0]
      freq = MHz + (.001 * KHz);
 8001c8e:	4b26      	ldr	r3, [pc, #152]	@ (8001d28 <loadstate+0x150>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc26 	bl	80004e4 <__aeabi_i2d>
 8001c98:	4604      	mov	r4, r0
 8001c9a:	460d      	mov	r5, r1
 8001c9c:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <loadstate+0x154>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc1f 	bl	80004e4 <__aeabi_i2d>
 8001ca6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001d18 <loadstate+0x140>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	f7fe fc84 	bl	80005b8 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fac8 	bl	800024c <__adddf3>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe ff50 	bl	8000b68 <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a1d      	ldr	r2, [pc, #116]	@ (8001d40 <loadstate+0x168>)
 8001ccc:	6013      	str	r3, [r2, #0]
      Standby = SM + (.001 * SK);
 8001cce:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <loadstate+0x158>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc06 	bl	80004e4 <__aeabi_i2d>
 8001cd8:	4604      	mov	r4, r0
 8001cda:	460d      	mov	r5, r1
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <loadstate+0x15c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fbff 	bl	80004e4 <__aeabi_i2d>
 8001ce6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001d18 <loadstate+0x140>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fc64 	bl	80005b8 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe faa8 	bl	800024c <__adddf3>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe ff30 	bl	8000b68 <__aeabi_d2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d44 <loadstate+0x16c>)
 8001d0c:	6013      	str	r3, [r2, #0]
  }
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bdb0      	pop	{r4, r5, r7, pc}
 8001d14:	f3af 8000 	nop.w
 8001d18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d1c:	3f50624d 	.word	0x3f50624d
 8001d20:	2000070c 	.word	0x2000070c
 8001d24:	20000678 	.word	0x20000678
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	2000069c 	.word	0x2000069c
 8001d30:	20000008 	.word	0x20000008
 8001d34:	200006a0 	.word	0x200006a0
 8001d38:	200006a4 	.word	0x200006a4
 8001d3c:	200006fc 	.word	0x200006fc
 8001d40:	20000698 	.word	0x20000698
 8001d44:	20000004 	.word	0x20000004

08001d48 <millis>:
  uint32_t millis() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	  return xTaskGetTickCount();
 8001d4c:	f007 ffaa 	bl	8009ca4 <xTaskGetTickCount>
 8001d50:	4603      	mov	r3, r0
  };
 8001d52:	4618      	mov	r0, r3
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b08e      	sub	sp, #56	@ 0x38
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d5e:	f004 fc9d 	bl	800669c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d62:	f000 f851 	bl	8001e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d66:	f000 f997 	bl	8002098 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001d6a:	f000 f917 	bl	8001f9c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001d6e:	f000 f88b 	bl	8001e88 <MX_SPI1_Init>
  MX_UART4_Init();
 8001d72:	f000 f8bf 	bl	8001ef4 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001d76:	f000 f93b 	bl	8001ff0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001d7a:	f000 f963 	bl	8002044 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001d7e:	f000 f8e3 	bl	8001f48 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  SPIF_Init(&spif, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8001d82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d86:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <main+0x94>)
 8001d88:	4919      	ldr	r1, [pc, #100]	@ (8001df0 <main+0x98>)
 8001d8a:	481a      	ldr	r0, [pc, #104]	@ (8001df4 <main+0x9c>)
 8001d8c:	f003 ff57 	bl	8005c3e <SPIF_Init>
  toDisplay();
 8001d90:	f7ff fe02 	bl	8001998 <toDisplay>
  GLCD_INIT();
 8001d94:	f7ff fd30 	bl	80017f8 <GLCD_INIT>
  loadstate();
 8001d98:	f7ff ff1e 	bl	8001bd8 <loadstate>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8001d9c:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <main+0xa0>)
 8001d9e:	f107 041c 	add.w	r4, r7, #28
 8001da2:	461d      	mov	r5, r3
 8001da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f007 fbf4 	bl	80095a4 <osThreadCreate>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001dfc <main+0xa4>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(Task2, task2_init, osPriorityNormal, 0, 128);
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <main+0xa8>)
 8001dc4:	463c      	mov	r4, r7
 8001dc6:	461d      	mov	r5, r3
 8001dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2handler = osThreadCreate(osThread(Task2), NULL);
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f007 fbe3 	bl	80095a4 <osThreadCreate>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a08      	ldr	r2, [pc, #32]	@ (8001e04 <main+0xac>)
 8001de2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001de4:	f007 fbd7 	bl	8009596 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <main+0x90>
 8001dec:	40010c00 	.word	0x40010c00
 8001df0:	200004b4 	.word	0x200004b4
 8001df4:	20000678 	.word	0x20000678
 8001df8:	0800d5bc 	.word	0x0800d5bc
 8001dfc:	20000674 	.word	0x20000674
 8001e00:	0800d5e0 	.word	0x0800d5e0
 8001e04:	20000744 	.word	0x20000744

08001e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b090      	sub	sp, #64	@ 0x40
 8001e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	f107 0318 	add.w	r3, r7, #24
 8001e12:	2228      	movs	r2, #40	@ 0x28
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f009 fa52 	bl	800b2c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e32:	2310      	movs	r3, #16
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e36:	2302      	movs	r3, #2
 8001e38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e3e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e44:	f107 0318 	add.w	r3, r7, #24
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f005 f89f 	bl	8006f8c <HAL_RCC_OscConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001e54:	f003 fb0e 	bl	8005474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e58:	230f      	movs	r3, #15
 8001e5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f005 fb0d 	bl	8007490 <HAL_RCC_ClockConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001e7c:	f003 fafa 	bl	8005474 <Error_Handler>
  }
}
 8001e80:	bf00      	nop
 8001e82:	3740      	adds	r7, #64	@ 0x40
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e8c:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001e8e:	4a18      	ldr	r2, [pc, #96]	@ (8001ef0 <MX_SPI1_Init+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e92:	4b16      	ldr	r3, [pc, #88]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001e94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001eba:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001ebc:	2218      	movs	r2, #24
 8001ebe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001ed4:	220a      	movs	r2, #10
 8001ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	@ (8001eec <MX_SPI1_Init+0x64>)
 8001eda:	f005 fc97 	bl	800780c <HAL_SPI_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ee4:	f003 fac6 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200004b4 	.word	0x200004b4
 8001ef0:	40013000 	.word	0x40013000

08001ef4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <MX_UART4_Init+0x4c>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <MX_UART4_Init+0x50>)
 8001efc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <MX_UART4_Init+0x4c>)
 8001f00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <MX_UART4_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <MX_UART4_Init+0x4c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <MX_UART4_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <MX_UART4_Init+0x4c>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <MX_UART4_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <MX_UART4_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <MX_UART4_Init+0x4c>)
 8001f2c:	f006 fc66 	bl	80087fc <HAL_UART_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001f36:	f003 fa9d 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000050c 	.word	0x2000050c
 8001f44:	40004c00 	.word	0x40004c00

08001f48 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <MX_UART5_Init+0x4c>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <MX_UART5_Init+0x50>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001f52:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <MX_UART5_Init+0x4c>)
 8001f54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f58:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <MX_UART5_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <MX_UART5_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <MX_UART5_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_UART5_Init+0x4c>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <MX_UART5_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <MX_UART5_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <MX_UART5_Init+0x4c>)
 8001f80:	f006 fc3c 	bl	80087fc <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f003 fa73 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000554 	.word	0x20000554
 8001f98:	40005000 	.word	0x40005000

08001f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <MX_USART1_UART_Init+0x4c>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <MX_USART1_UART_Init+0x50>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <MX_USART1_UART_Init+0x4c>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <MX_USART1_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <MX_USART1_UART_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <MX_USART1_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <MX_USART1_UART_Init+0x4c>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <MX_USART1_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <MX_USART1_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <MX_USART1_UART_Init+0x4c>)
 8001fd4:	f006 fc12 	bl	80087fc <HAL_UART_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fde:	f003 fa49 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000059c 	.word	0x2000059c
 8001fec:	40013800 	.word	0x40013800

08001ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	@ (8002040 <MX_USART2_UART_Init+0x50>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8001ffc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b09      	ldr	r3, [pc, #36]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002026:	4805      	ldr	r0, [pc, #20]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002028:	f006 fbe8 	bl	80087fc <HAL_UART_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002032:	f003 fa1f 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200005e4 	.word	0x200005e4
 8002040:	40004400 	.word	0x40004400

08002044 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <MX_USART3_UART_Init+0x4c>)
 800204a:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <MX_USART3_UART_Init+0x50>)
 800204c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <MX_USART3_UART_Init+0x4c>)
 8002050:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002054:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002056:	4b0e      	ldr	r3, [pc, #56]	@ (8002090 <MX_USART3_UART_Init+0x4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <MX_USART3_UART_Init+0x4c>)
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <MX_USART3_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002068:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <MX_USART3_UART_Init+0x4c>)
 800206a:	220c      	movs	r2, #12
 800206c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206e:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <MX_USART3_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <MX_USART3_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800207a:	4805      	ldr	r0, [pc, #20]	@ (8002090 <MX_USART3_UART_Init+0x4c>)
 800207c:	f006 fbbe 	bl	80087fc <HAL_UART_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002086:	f003 f9f5 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000062c 	.word	0x2000062c
 8002094:	40004800 	.word	0x40004800

08002098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209e:	f107 0318 	add.w	r3, r7, #24
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ac:	4bb4      	ldr	r3, [pc, #720]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4ab3      	ldr	r2, [pc, #716]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4bb1      	ldr	r3, [pc, #708]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c4:	4bae      	ldr	r3, [pc, #696]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4aad      	ldr	r2, [pc, #692]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020ca:	f043 0310 	orr.w	r3, r3, #16
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4bab      	ldr	r3, [pc, #684]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	4ba8      	ldr	r3, [pc, #672]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	4aa7      	ldr	r2, [pc, #668]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020e2:	f043 0304 	orr.w	r3, r3, #4
 80020e6:	6193      	str	r3, [r2, #24]
 80020e8:	4ba5      	ldr	r3, [pc, #660]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f4:	4ba2      	ldr	r3, [pc, #648]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4aa1      	ldr	r2, [pc, #644]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 80020fa:	f043 0308 	orr.w	r3, r3, #8
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b9f      	ldr	r3, [pc, #636]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800210c:	4b9c      	ldr	r3, [pc, #624]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a9b      	ldr	r2, [pc, #620]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 8002112:	f043 0320 	orr.w	r3, r3, #32
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b99      	ldr	r3, [pc, #612]	@ (8002380 <MX_GPIO_Init+0x2e8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RELAY3_Pin|MCU_DTR3_Pin|LCD_DB1_Pin|LCD_RW_Pin
 8002124:	2200      	movs	r2, #0
 8002126:	f240 7194 	movw	r1, #1940	@ 0x794
 800212a:	4896      	ldr	r0, [pc, #600]	@ (8002384 <MX_GPIO_Init+0x2ec>)
 800212c:	f004 fed9 	bl	8006ee2 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_DI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BKL_Pin|LCD_RESET_Pin|LCD_CS2_Pin|LCD_CS1_Pin
 8002130:	2200      	movs	r2, #0
 8002132:	f649 11fe 	movw	r1, #39422	@ 0x99fe
 8002136:	4894      	ldr	r0, [pc, #592]	@ (8002388 <MX_GPIO_Init+0x2f0>)
 8002138:	f004 fed3 	bl	8006ee2 <HAL_GPIO_WritePin>
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|KEY_COL4_Pin
                          |KEY_COL7_Pin|KEY_COL6_Pin|KEY_COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB4_Pin|LCD_DB2_Pin|KEY_COL0_Pin|KEY_COL3_Pin
 800213c:	2200      	movs	r2, #0
 800213e:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002142:	4892      	ldr	r0, [pc, #584]	@ (800238c <MX_GPIO_Init+0x2f4>)
 8002144:	f004 fecd 	bl	8006ee2 <HAL_GPIO_WritePin>
                          |KEY_COL2_Pin|KEY_COL5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DB3_Pin|LCD_DB0_Pin|MCU_DTR2_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8002148:	2200      	movs	r2, #0
 800214a:	f240 2183 	movw	r1, #643	@ 0x283
 800214e:	4890      	ldr	r0, [pc, #576]	@ (8002390 <MX_GPIO_Init+0x2f8>)
 8002150:	f004 fec7 	bl	8006ee2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEY_COL1_Pin|KEY_COL9_Pin|RELAY1_Pin|MCU_DTR1_Pin
 8002154:	2200      	movs	r2, #0
 8002156:	f248 0199 	movw	r1, #32921	@ 0x8099
 800215a:	488e      	ldr	r0, [pc, #568]	@ (8002394 <MX_GPIO_Init+0x2fc>)
 800215c:	f004 fec1 	bl	8006ee2 <HAL_GPIO_WritePin>
                          |RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RELAY3_Pin MCU_DTR3_Pin LCD_DB1_Pin LCD_RW_Pin
                           LCD_E_Pin LCD_DI_Pin */
  GPIO_InitStruct.Pin = RELAY3_Pin|MCU_DTR3_Pin|LCD_DB1_Pin|LCD_RW_Pin
 8002160:	f240 7394 	movw	r3, #1940	@ 0x794
 8002164:	61bb      	str	r3, [r7, #24]
                          |LCD_E_Pin|LCD_DI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002166:	2301      	movs	r3, #1
 8002168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2302      	movs	r3, #2
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	4619      	mov	r1, r3
 8002178:	4882      	ldr	r0, [pc, #520]	@ (8002384 <MX_GPIO_Init+0x2ec>)
 800217a:	f004 fd07 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_DSR3_Pin GP_SW4_Pin GP_SW5_Pin GP_SW1_Pin
                           GP_SW2_Pin GP_SW3_Pin RIGHT_SW_Pin */
  GPIO_InitStruct.Pin = MCU_DSR3_Pin|GP_SW4_Pin|GP_SW5_Pin|GP_SW1_Pin
 800217e:	f647 0368 	movw	r3, #30824	@ 0x7868
 8002182:	61bb      	str	r3, [r7, #24]
                          |GP_SW2_Pin|GP_SW3_Pin|RIGHT_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800218c:	f107 0318 	add.w	r3, r7, #24
 8002190:	4619      	mov	r1, r3
 8002192:	487c      	ldr	r0, [pc, #496]	@ (8002384 <MX_GPIO_Init+0x2ec>)
 8002194:	f004 fcfa 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : GP_SW6_Pin LEFT_SW_Pin */
  GPIO_InitStruct.Pin = GP_SW6_Pin|LEFT_SW_Pin;
 8002198:	f242 0301 	movw	r3, #8193	@ 0x2001
 800219c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a6:	f107 0318 	add.w	r3, r7, #24
 80021aa:	4619      	mov	r1, r3
 80021ac:	4877      	ldr	r0, [pc, #476]	@ (800238c <MX_GPIO_Init+0x2f4>)
 80021ae:	f004 fced 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021b2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80021b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b8:	2303      	movs	r3, #3
 80021ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021bc:	f107 0318 	add.w	r3, r7, #24
 80021c0:	4619      	mov	r1, r3
 80021c2:	4872      	ldr	r0, [pc, #456]	@ (800238c <MX_GPIO_Init+0x2f4>)
 80021c4:	f004 fce2 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_A1_Pin LEFT_B1_Pin LEFT_B2_Pin */
  GPIO_InitStruct.Pin = LEFT_A1_Pin|LEFT_B1_Pin|LEFT_B2_Pin;
 80021c8:	230e      	movs	r3, #14
 80021ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021cc:	4b72      	ldr	r3, [pc, #456]	@ (8002398 <MX_GPIO_Init+0x300>)
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d4:	f107 0318 	add.w	r3, r7, #24
 80021d8:	4619      	mov	r1, r3
 80021da:	486c      	ldr	r0, [pc, #432]	@ (800238c <MX_GPIO_Init+0x2f4>)
 80021dc:	f004 fcd6 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_A2_Pin */
  GPIO_InitStruct.Pin = LEFT_A2_Pin;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002398 <MX_GPIO_Init+0x300>)
 80021e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEFT_A2_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	4619      	mov	r1, r3
 80021f2:	4865      	ldr	r0, [pc, #404]	@ (8002388 <MX_GPIO_Init+0x2f0>)
 80021f4:	f004 fcca 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BKL_Pin LCD_RESET_Pin LCD_CS2_Pin LCD_CS1_Pin
                           LCD_DB7_Pin LCD_DB6_Pin LCD_DB5_Pin KEY_COL4_Pin
                           KEY_COL7_Pin KEY_COL6_Pin KEY_COL8_Pin */
  GPIO_InitStruct.Pin = LCD_BKL_Pin|LCD_RESET_Pin|LCD_CS2_Pin|LCD_CS1_Pin
 80021f8:	f649 13fe 	movw	r3, #39422	@ 0x99fe
 80021fc:	61bb      	str	r3, [r7, #24]
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|KEY_COL4_Pin
                          |KEY_COL7_Pin|KEY_COL6_Pin|KEY_COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2302      	movs	r3, #2
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0318 	add.w	r3, r7, #24
 800220e:	4619      	mov	r1, r3
 8002210:	485d      	ldr	r0, [pc, #372]	@ (8002388 <MX_GPIO_Init+0x2f0>)
 8002212:	f004 fcbb 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB4_Pin LCD_DB2_Pin KEY_COL0_Pin KEY_COL3_Pin
                           KEY_COL2_Pin KEY_COL5_Pin */
  GPIO_InitStruct.Pin = LCD_DB4_Pin|LCD_DB2_Pin|KEY_COL0_Pin|KEY_COL3_Pin
 8002216:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 800221a:	61bb      	str	r3, [r7, #24]
                          |KEY_COL2_Pin|KEY_COL5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221c:	2301      	movs	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2302      	movs	r3, #2
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	4619      	mov	r1, r3
 800222e:	4857      	ldr	r0, [pc, #348]	@ (800238c <MX_GPIO_Init+0x2f4>)
 8002230:	f004 fcac 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB3_Pin LCD_DB0_Pin MCU_DTR2_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DB3_Pin|LCD_DB0_Pin|MCU_DTR2_Pin|FLASH_CS_Pin;
 8002234:	f240 2383 	movw	r3, #643	@ 0x283
 8002238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	2301      	movs	r3, #1
 800223c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2302      	movs	r3, #2
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 0318 	add.w	r3, r7, #24
 800224a:	4619      	mov	r1, r3
 800224c:	4850      	ldr	r0, [pc, #320]	@ (8002390 <MX_GPIO_Init+0x2f8>)
 800224e:	f004 fc9d 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin KEY_ROW1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|KEY_ROW1_Pin;
 8002252:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	4619      	mov	r1, r3
 8002266:	484a      	ldr	r0, [pc, #296]	@ (8002390 <MX_GPIO_Init+0x2f8>)
 8002268:	f004 fc90 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_A1_Pin */
  GPIO_InitStruct.Pin = RIGHT_A1_Pin;
 800226c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002272:	4b49      	ldr	r3, [pc, #292]	@ (8002398 <MX_GPIO_Init+0x300>)
 8002274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RIGHT_A1_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 0318 	add.w	r3, r7, #24
 800227e:	4619      	mov	r1, r3
 8002280:	4840      	ldr	r0, [pc, #256]	@ (8002384 <MX_GPIO_Init+0x2ec>)
 8002282:	f004 fc83 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_B1_Pin RIGHT_B2_Pin RIGHT_A2_Pin */
  GPIO_InitStruct.Pin = RIGHT_B1_Pin|RIGHT_B2_Pin|RIGHT_A2_Pin;
 8002286:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800228a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800228c:	4b42      	ldr	r3, [pc, #264]	@ (8002398 <MX_GPIO_Init+0x300>)
 800228e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002294:	f107 0318 	add.w	r3, r7, #24
 8002298:	4619      	mov	r1, r3
 800229a:	483d      	ldr	r0, [pc, #244]	@ (8002390 <MX_GPIO_Init+0x2f8>)
 800229c:	f004 fc76 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_ROW0_Pin KEY_ROW3_Pin KEY_ROW2_Pin KEY_ROW5_Pin
                           KEY_ROW4_Pin KEY_ROW7_Pin KEY_ROW6_Pin MCU_DSR1_Pin */
  GPIO_InitStruct.Pin = KEY_ROW0_Pin|KEY_ROW3_Pin|KEY_ROW2_Pin|KEY_ROW5_Pin
 80022a0:	f647 7302 	movw	r3, #32514	@ 0x7f02
 80022a4:	61bb      	str	r3, [r7, #24]
                          |KEY_ROW4_Pin|KEY_ROW7_Pin|KEY_ROW6_Pin|MCU_DSR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ae:	f107 0318 	add.w	r3, r7, #24
 80022b2:	4619      	mov	r1, r3
 80022b4:	4837      	ldr	r0, [pc, #220]	@ (8002394 <MX_GPIO_Init+0x2fc>)
 80022b6:	f004 fc69 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_COL1_Pin KEY_COL9_Pin RELAY1_Pin MCU_DTR1_Pin
                           RELAY2_Pin */
  GPIO_InitStruct.Pin = KEY_COL1_Pin|KEY_COL9_Pin|RELAY1_Pin|MCU_DTR1_Pin
 80022ba:	f248 0399 	movw	r3, #32921	@ 0x8099
 80022be:	61bb      	str	r3, [r7, #24]
                          |RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2302      	movs	r3, #2
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022cc:	f107 0318 	add.w	r3, r7, #24
 80022d0:	4619      	mov	r1, r3
 80022d2:	4830      	ldr	r0, [pc, #192]	@ (8002394 <MX_GPIO_Init+0x2fc>)
 80022d4:	f004 fc5a 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022d8:	2340      	movs	r3, #64	@ 0x40
 80022da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2302      	movs	r3, #2
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 0318 	add.w	r3, r7, #24
 80022e8:	4619      	mov	r1, r3
 80022ea:	4829      	ldr	r0, [pc, #164]	@ (8002390 <MX_GPIO_Init+0x2f8>)
 80022ec:	f004 fc4e 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f6:	2303      	movs	r3, #3
 80022f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	f107 0318 	add.w	r3, r7, #24
 80022fe:	4619      	mov	r1, r3
 8002300:	4823      	ldr	r0, [pc, #140]	@ (8002390 <MX_GPIO_Init+0x2f8>)
 8002302:	f004 fc43 	bl	8006b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002306:	2303      	movs	r3, #3
 8002308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230a:	2303      	movs	r3, #3
 800230c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800230e:	f107 0318 	add.w	r3, r7, #24
 8002312:	4619      	mov	r1, r3
 8002314:	481b      	ldr	r0, [pc, #108]	@ (8002384 <MX_GPIO_Init+0x2ec>)
 8002316:	f004 fc39 	bl	8006b8c <HAL_GPIO_Init>

  /*Configures the port and pin on which the EVENTOUT Cortex signal will be connected */
  HAL_GPIOEx_ConfigEventout(AFIO_EVENTOUT_PORT_B, AFIO_EVENTOUT_PIN_6);
 800231a:	2106      	movs	r1, #6
 800231c:	2010      	movs	r0, #16
 800231e:	f004 fe11 	bl	8006f44 <HAL_GPIOEx_ConfigEventout>

  /*Enables the Event Output */
  HAL_GPIOEx_EnableEventout();
 8002322:	f004 fe25 	bl	8006f70 <HAL_GPIOEx_EnableEventout>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2105      	movs	r1, #5
 800232a:	2006      	movs	r0, #6
 800232c:	f004 fac1 	bl	80068b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002330:	2006      	movs	r0, #6
 8002332:	f004 fada 	bl	80068ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2105      	movs	r1, #5
 800233a:	2007      	movs	r0, #7
 800233c:	f004 fab9 	bl	80068b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002340:	2007      	movs	r0, #7
 8002342:	f004 fad2 	bl	80068ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2105      	movs	r1, #5
 800234a:	2008      	movs	r0, #8
 800234c:	f004 fab1 	bl	80068b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002350:	2008      	movs	r0, #8
 8002352:	f004 faca 	bl	80068ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2105      	movs	r1, #5
 800235a:	2009      	movs	r0, #9
 800235c:	f004 faa9 	bl	80068b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002360:	2009      	movs	r0, #9
 8002362:	f004 fac2 	bl	80068ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2105      	movs	r1, #5
 800236a:	2028      	movs	r0, #40	@ 0x28
 800236c:	f004 faa1 	bl	80068b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002370:	2028      	movs	r0, #40	@ 0x28
 8002372:	f004 faba 	bl	80068ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	@ 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	40011800 	.word	0x40011800
 8002388:	40010800 	.word	0x40010800
 800238c:	40011000 	.word	0x40011000
 8002390:	40010c00 	.word	0x40010c00
 8002394:	40011400 	.word	0x40011400
 8002398:	10110000 	.word	0x10110000

0800239c <read_encoder>:

/* USER CODE BEGIN 4 */

void read_encoder() { // MHz right outer knob HERE
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 80023a2:	4b34      	ldr	r3, [pc, #208]	@ (8002474 <read_encoder+0xd8>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05d      	beq.n	800246c <read_encoder+0xd0>
    static uint8_t old_AB = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; //{0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0}; // Lookup table

    old_AB <<=2;  // Remember previous state
 80023b0:	4b31      	ldr	r3, [pc, #196]	@ (8002478 <read_encoder+0xdc>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <read_encoder+0xdc>)
 80023ba:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(RIGHT_A2_GPIO_Port, RIGHT_A2_Pin)) old_AB |= 0x02; // Add current state of pin A
 80023bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023c0:	482e      	ldr	r0, [pc, #184]	@ (800247c <read_encoder+0xe0>)
 80023c2:	f004 fd77 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <read_encoder+0x3e>
 80023cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002478 <read_encoder+0xdc>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b28      	ldr	r3, [pc, #160]	@ (8002478 <read_encoder+0xdc>)
 80023d8:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(RIGHT_B2_GPIO_Port, RIGHT_B2_Pin)) old_AB |= 0x01; // Add current state of pin B
 80023da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023de:	4827      	ldr	r0, [pc, #156]	@ (800247c <read_encoder+0xe0>)
 80023e0:	f004 fd68 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d006      	beq.n	80023f8 <read_encoder+0x5c>
 80023ea:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <read_encoder+0xdc>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <read_encoder+0xdc>)
 80023f6:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_AB & 0x0f )];
 80023f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002478 <read_encoder+0xdc>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	4a1f      	ldr	r2, [pc, #124]	@ (8002480 <read_encoder+0xe4>)
 8002402:	56d3      	ldrsb	r3, [r2, r3]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <read_encoder+0xe8>)
 8002408:	f993 3000 	ldrsb.w	r3, [r3]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4413      	add	r3, r2
 8002410:	b2db      	uxtb	r3, r3
 8002412:	b25a      	sxtb	r2, r3
 8002414:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <read_encoder+0xe8>)
 8002416:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 0 ) {        // Four steps forward
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <read_encoder+0xe8>)
 800241a:	f993 3000 	ldrsb.w	r3, [r3]
 800241e:	2b00      	cmp	r3, #0
 8002420:	dd0f      	ble.n	8002442 <read_encoder+0xa6>
      int changevalue = 1;
 8002422:	2301      	movs	r3, #1
 8002424:	603b      	str	r3, [r7, #0]
      if (SM < 117) {
 8002426:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <read_encoder+0xec>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b74      	cmp	r3, #116	@ 0x74
 800242c:	dc05      	bgt.n	800243a <read_encoder+0x9e>
        SM = SM + changevalue;              // Update counter
 800242e:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <read_encoder+0xec>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	4413      	add	r3, r2
 8002436:	4a14      	ldr	r2, [pc, #80]	@ (8002488 <read_encoder+0xec>)
 8002438:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 800243a:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <read_encoder+0xe8>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
        SM = SM + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 8002440:	e014      	b.n	800246c <read_encoder+0xd0>
    else if( encval < 0 ) {        // Four steps backward
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <read_encoder+0xe8>)
 8002444:	f993 3000 	ldrsb.w	r3, [r3]
 8002448:	2b00      	cmp	r3, #0
 800244a:	da0f      	bge.n	800246c <read_encoder+0xd0>
      int changevalue = -1;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002450:	607b      	str	r3, [r7, #4]
      if (SM > 108) {
 8002452:	4b0d      	ldr	r3, [pc, #52]	@ (8002488 <read_encoder+0xec>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b6c      	cmp	r3, #108	@ 0x6c
 8002458:	dd05      	ble.n	8002466 <read_encoder+0xca>
        SM = SM + changevalue;              // Update counter
 800245a:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <read_encoder+0xec>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	4a09      	ldr	r2, [pc, #36]	@ (8002488 <read_encoder+0xec>)
 8002464:	6013      	str	r3, [r2, #0]
      encval = 0;
 8002466:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <read_encoder+0xe8>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	2000000c 	.word	0x2000000c
 8002478:	2000000d 	.word	0x2000000d
 800247c:	40010c00 	.word	0x40010c00
 8002480:	0800df14 	.word	0x0800df14
 8002484:	20000748 	.word	0x20000748
 8002488:	20000008 	.word	0x20000008

0800248c <read_encoder2>:

void read_encoder2() { // KHz right inner knob
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 8002492:	4b35      	ldr	r3, [pc, #212]	@ (8002568 <read_encoder2+0xdc>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d05f      	beq.n	8002560 <read_encoder2+0xd4>
    static uint8_t old_GH = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

    old_GH <<=2;  // Remember previous state
 80024a0:	4b32      	ldr	r3, [pc, #200]	@ (800256c <read_encoder2+0xe0>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b30      	ldr	r3, [pc, #192]	@ (800256c <read_encoder2+0xe0>)
 80024aa:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(RIGHT_A1_GPIO_Port, RIGHT_A1_Pin)) old_GH |= 0x02; // Add current state of pin G
 80024ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024b0:	482f      	ldr	r0, [pc, #188]	@ (8002570 <read_encoder2+0xe4>)
 80024b2:	f004 fcff 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <read_encoder2+0x3e>
 80024bc:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <read_encoder2+0xe0>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b29      	ldr	r3, [pc, #164]	@ (800256c <read_encoder2+0xe0>)
 80024c8:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(RIGHT_B1_GPIO_Port, RIGHT_B1_Pin)) old_GH |= 0x01; // Add current state of pin H
 80024ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024ce:	4829      	ldr	r0, [pc, #164]	@ (8002574 <read_encoder2+0xe8>)
 80024d0:	f004 fcf0 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <read_encoder2+0x5c>
 80024da:	4b24      	ldr	r3, [pc, #144]	@ (800256c <read_encoder2+0xe0>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b21      	ldr	r3, [pc, #132]	@ (800256c <read_encoder2+0xe0>)
 80024e6:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_GH & 0x0f )];
 80024e8:	4b20      	ldr	r3, [pc, #128]	@ (800256c <read_encoder2+0xe0>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	4a21      	ldr	r2, [pc, #132]	@ (8002578 <read_encoder2+0xec>)
 80024f2:	56d3      	ldrsb	r3, [r2, r3]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b21      	ldr	r3, [pc, #132]	@ (800257c <read_encoder2+0xf0>)
 80024f8:	f993 3000 	ldrsb.w	r3, [r3]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	4413      	add	r3, r2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	b25a      	sxtb	r2, r3
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <read_encoder2+0xf0>)
 8002506:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 0 ) {        // Four steps forward
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <read_encoder2+0xf0>)
 800250a:	f993 3000 	ldrsb.w	r3, [r3]
 800250e:	2b00      	cmp	r3, #0
 8002510:	dd11      	ble.n	8002536 <read_encoder2+0xaa>
      int changevalue = 50;
 8002512:	2332      	movs	r3, #50	@ 0x32
 8002514:	603b      	str	r3, [r7, #0]
      if (SK < 950) {
 8002516:	4b1a      	ldr	r3, [pc, #104]	@ (8002580 <read_encoder2+0xf4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800251e:	4293      	cmp	r3, r2
 8002520:	dc05      	bgt.n	800252e <read_encoder2+0xa2>
        SK = SK + changevalue;              // Update counter
 8002522:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <read_encoder2+0xf4>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	4413      	add	r3, r2
 800252a:	4a15      	ldr	r2, [pc, #84]	@ (8002580 <read_encoder2+0xf4>)
 800252c:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 800252e:	4b13      	ldr	r3, [pc, #76]	@ (800257c <read_encoder2+0xf0>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
        SK = SK + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 8002534:	e014      	b.n	8002560 <read_encoder2+0xd4>
    else if( encval < 0 ) {        // Four steps backward
 8002536:	4b11      	ldr	r3, [pc, #68]	@ (800257c <read_encoder2+0xf0>)
 8002538:	f993 3000 	ldrsb.w	r3, [r3]
 800253c:	2b00      	cmp	r3, #0
 800253e:	da0f      	bge.n	8002560 <read_encoder2+0xd4>
      int changevalue = -50;
 8002540:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8002544:	607b      	str	r3, [r7, #4]
      if (SK > 0) {
 8002546:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <read_encoder2+0xf4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	dd05      	ble.n	800255a <read_encoder2+0xce>
        SK = SK + changevalue;              // Update counter
 800254e:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <read_encoder2+0xf4>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	4a0a      	ldr	r2, [pc, #40]	@ (8002580 <read_encoder2+0xf4>)
 8002558:	6013      	str	r3, [r2, #0]
      encval = 0;
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <read_encoder2+0xf0>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	2000000c 	.word	0x2000000c
 800256c:	2000000e 	.word	0x2000000e
 8002570:	40011800 	.word	0x40011800
 8002574:	40010c00 	.word	0x40010c00
 8002578:	0800df24 	.word	0x0800df24
 800257c:	20000749 	.word	0x20000749
 8002580:	200006a0 	.word	0x200006a0

08002584 <read_encoder3>:

void read_encoder3() { // volume left inner knob
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 800258a:	4b34      	ldr	r3, [pc, #208]	@ (800265c <read_encoder3+0xd8>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	f083 0301 	eor.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d05c      	beq.n	8002652 <read_encoder3+0xce>
    static uint8_t old_CD = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

    old_CD <<=2;  // Remember previous state
 8002598:	4b31      	ldr	r3, [pc, #196]	@ (8002660 <read_encoder3+0xdc>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <read_encoder3+0xdc>)
 80025a2:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 80025a4:	2102      	movs	r1, #2
 80025a6:	482f      	ldr	r0, [pc, #188]	@ (8002664 <read_encoder3+0xe0>)
 80025a8:	f004 fc84 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <read_encoder3+0x3c>
 80025b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002660 <read_encoder3+0xdc>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b28      	ldr	r3, [pc, #160]	@ (8002660 <read_encoder3+0xdc>)
 80025be:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 80025c0:	2104      	movs	r1, #4
 80025c2:	4828      	ldr	r0, [pc, #160]	@ (8002664 <read_encoder3+0xe0>)
 80025c4:	f004 fc76 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <read_encoder3+0x58>
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <read_encoder3+0xdc>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <read_encoder3+0xdc>)
 80025da:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_CD & 0x0f )];
 80025dc:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <read_encoder3+0xdc>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	4a20      	ldr	r2, [pc, #128]	@ (8002668 <read_encoder3+0xe4>)
 80025e6:	56d3      	ldrsb	r3, [r2, r3]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <read_encoder3+0xe8>)
 80025ec:	f993 3000 	ldrsb.w	r3, [r3]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	b25a      	sxtb	r2, r3
 80025f8:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <read_encoder3+0xe8>)
 80025fa:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 1 ) {        // Four steps forward
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <read_encoder3+0xe8>)
 80025fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002602:	2b01      	cmp	r3, #1
 8002604:	dd0f      	ble.n	8002626 <read_encoder3+0xa2>
      int changevalue = 1;
 8002606:	2301      	movs	r3, #1
 8002608:	603b      	str	r3, [r7, #0]
      if (vol < 20) {
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <read_encoder3+0xec>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b13      	cmp	r3, #19
 8002610:	dc05      	bgt.n	800261e <read_encoder3+0x9a>
        vol = vol + changevalue;              // Update counter
 8002612:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <read_encoder3+0xec>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	4a15      	ldr	r2, [pc, #84]	@ (8002670 <read_encoder3+0xec>)
 800261c:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 800261e:	4b13      	ldr	r3, [pc, #76]	@ (800266c <read_encoder3+0xe8>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
        vol = vol + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 8002624:	e015      	b.n	8002652 <read_encoder3+0xce>
    else if( encval < -1 ) {        // Four steps backward
 8002626:	4b11      	ldr	r3, [pc, #68]	@ (800266c <read_encoder3+0xe8>)
 8002628:	f993 3000 	ldrsb.w	r3, [r3]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002630:	da0f      	bge.n	8002652 <read_encoder3+0xce>
      int changevalue = -1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002636:	607b      	str	r3, [r7, #4]
      if (vol > 0) {
 8002638:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <read_encoder3+0xec>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	dd05      	ble.n	800264c <read_encoder3+0xc8>
        vol = vol + changevalue;              // Update counter
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <read_encoder3+0xec>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <read_encoder3+0xec>)
 800264a:	6013      	str	r3, [r2, #0]
      encval = 0;
 800264c:	4b07      	ldr	r3, [pc, #28]	@ (800266c <read_encoder3+0xe8>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000000c 	.word	0x2000000c
 8002660:	2000000f 	.word	0x2000000f
 8002664:	40011000 	.word	0x40011000
 8002668:	0800df34 	.word	0x0800df34
 800266c:	2000074a 	.word	0x2000074a
 8002670:	200006a4 	.word	0x200006a4

08002674 <read_encoder4>:

void read_encoder4() { // squelch left outer knob
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
  // Encoder interrupt routine for both pins. Updates counter
  // if they are valid and have rotated a full indent
  if (!pause) {
 800267a:	4b34      	ldr	r3, [pc, #208]	@ (800274c <read_encoder4+0xd8>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f083 0301 	eor.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d05d      	beq.n	8002744 <read_encoder4+0xd0>
    static uint8_t old_IJ = 3;  // Lookup table index
    static int8_t encval = 0;   // Encoder value
    static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

    old_IJ <<=2;  // Remember previous state
 8002688:	4b31      	ldr	r3, [pc, #196]	@ (8002750 <read_encoder4+0xdc>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b2f      	ldr	r3, [pc, #188]	@ (8002750 <read_encoder4+0xdc>)
 8002692:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(LEFT_A2_GPIO_Port, LEFT_A2_Pin)) old_IJ |= 0x02; // Add current state of pin I
 8002694:	2101      	movs	r1, #1
 8002696:	482f      	ldr	r0, [pc, #188]	@ (8002754 <read_encoder4+0xe0>)
 8002698:	f004 fc0c 	bl	8006eb4 <HAL_GPIO_ReadPin>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <read_encoder4+0x3c>
 80026a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <read_encoder4+0xdc>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	4b28      	ldr	r3, [pc, #160]	@ (8002750 <read_encoder4+0xdc>)
 80026ae:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(LEFT_B2_GPIO_Port, LEFT_B2_Pin)) old_IJ |= 0x01; // Add current state of pin J
 80026b0:	2108      	movs	r1, #8
 80026b2:	4829      	ldr	r0, [pc, #164]	@ (8002758 <read_encoder4+0xe4>)
 80026b4:	f004 fbfe 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d006      	beq.n	80026cc <read_encoder4+0x58>
 80026be:	4b24      	ldr	r3, [pc, #144]	@ (8002750 <read_encoder4+0xdc>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <read_encoder4+0xdc>)
 80026ca:	701a      	strb	r2, [r3, #0]

    encval += enc_states[( old_IJ & 0x0f )];
 80026cc:	4b20      	ldr	r3, [pc, #128]	@ (8002750 <read_encoder4+0xdc>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4a21      	ldr	r2, [pc, #132]	@ (800275c <read_encoder4+0xe8>)
 80026d6:	56d3      	ldrsb	r3, [r2, r3]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b21      	ldr	r3, [pc, #132]	@ (8002760 <read_encoder4+0xec>)
 80026dc:	f993 3000 	ldrsb.w	r3, [r3]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	b25a      	sxtb	r2, r3
 80026e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <read_encoder4+0xec>)
 80026ea:	701a      	strb	r2, [r3, #0]

    // Update counter if encoder has rotated a full indent, that is at least 4 steps
    if( encval > 1 ) {        // Four steps forward
 80026ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002760 <read_encoder4+0xec>)
 80026ee:	f993 3000 	ldrsb.w	r3, [r3]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	dd10      	ble.n	8002718 <read_encoder4+0xa4>
      int changevalue = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	603b      	str	r3, [r7, #0]
      if (obs < 359) {
 80026fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002764 <read_encoder4+0xf0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f5b3 7fb3 	cmp.w	r3, #358	@ 0x166
 8002702:	dc05      	bgt.n	8002710 <read_encoder4+0x9c>
        obs = obs + changevalue;              // Update counter
 8002704:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <read_encoder4+0xf0>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4a15      	ldr	r2, [pc, #84]	@ (8002764 <read_encoder4+0xf0>)
 800270e:	6013      	str	r3, [r2, #0]
      }
      encval = 0;
 8002710:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <read_encoder4+0xec>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
        obs = obs + changevalue;              // Update counter
      }
      encval = 0;
    }
  }
}
 8002716:	e015      	b.n	8002744 <read_encoder4+0xd0>
    else if( encval < -1 ) {        // Four steps backward
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <read_encoder4+0xec>)
 800271a:	f993 3000 	ldrsb.w	r3, [r3]
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002722:	da0f      	bge.n	8002744 <read_encoder4+0xd0>
      int changevalue = -1;
 8002724:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002728:	607b      	str	r3, [r7, #4]
      if (obs > 0) {
 800272a:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <read_encoder4+0xf0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	dd05      	ble.n	800273e <read_encoder4+0xca>
        obs = obs + changevalue;              // Update counter
 8002732:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <read_encoder4+0xf0>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <read_encoder4+0xf0>)
 800273c:	6013      	str	r3, [r2, #0]
      encval = 0;
 800273e:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <read_encoder4+0xec>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	2000000c 	.word	0x2000000c
 8002750:	20000010 	.word	0x20000010
 8002754:	40010800 	.word	0x40010800
 8002758:	40011000 	.word	0x40011000
 800275c:	0800df44 	.word	0x0800df44
 8002760:	2000074b 	.word	0x2000074b
 8002764:	200006fc 	.word	0x200006fc

08002768 <scroll>:

void scroll() { // scroll left inner knob
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 800276e:	4b32      	ldr	r3, [pc, #200]	@ (8002838 <scroll+0xd0>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4b30      	ldr	r3, [pc, #192]	@ (8002838 <scroll+0xd0>)
 8002778:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 800277a:	2102      	movs	r1, #2
 800277c:	482f      	ldr	r0, [pc, #188]	@ (800283c <scroll+0xd4>)
 800277e:	f004 fb99 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <scroll+0x2e>
 8002788:	4b2b      	ldr	r3, [pc, #172]	@ (8002838 <scroll+0xd0>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b29      	ldr	r3, [pc, #164]	@ (8002838 <scroll+0xd0>)
 8002794:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 8002796:	2104      	movs	r1, #4
 8002798:	4828      	ldr	r0, [pc, #160]	@ (800283c <scroll+0xd4>)
 800279a:	f004 fb8b 	bl	8006eb4 <HAL_GPIO_ReadPin>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <scroll+0x4a>
 80027a4:	4b24      	ldr	r3, [pc, #144]	@ (8002838 <scroll+0xd0>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4b22      	ldr	r3, [pc, #136]	@ (8002838 <scroll+0xd0>)
 80027b0:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 80027b2:	4b21      	ldr	r3, [pc, #132]	@ (8002838 <scroll+0xd0>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	4a21      	ldr	r2, [pc, #132]	@ (8002840 <scroll+0xd8>)
 80027bc:	56d3      	ldrsb	r3, [r2, r3]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <scroll+0xdc>)
 80027c2:	f993 3000 	ldrsb.w	r3, [r3]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	b25a      	sxtb	r2, r3
 80027ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <scroll+0xdc>)
 80027d0:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 80027d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002844 <scroll+0xdc>)
 80027d4:	f993 3000 	ldrsb.w	r3, [r3]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	dd12      	ble.n	8002802 <scroll+0x9a>
    int changevalue = 1;
 80027dc:	2301      	movs	r3, #1
 80027de:	603b      	str	r3, [r7, #0]
    if (dispCount < count-1) {
 80027e0:	4b19      	ldr	r3, [pc, #100]	@ (8002848 <scroll+0xe0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1e5a      	subs	r2, r3, #1
 80027e6:	4b19      	ldr	r3, [pc, #100]	@ (800284c <scroll+0xe4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	dd05      	ble.n	80027fa <scroll+0x92>
      dispCount = dispCount + changevalue;              // Update counter
 80027ee:	4b17      	ldr	r3, [pc, #92]	@ (800284c <scroll+0xe4>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	4a15      	ldr	r2, [pc, #84]	@ (800284c <scroll+0xe4>)
 80027f8:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 80027fa:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <scroll+0xdc>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
    if (dispCount > 0) {
      dispCount = dispCount + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002800:	e015      	b.n	800282e <scroll+0xc6>
  else if( encval < -1 ) {        // Four steps backward
 8002802:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <scroll+0xdc>)
 8002804:	f993 3000 	ldrsb.w	r3, [r3]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800280c:	da0f      	bge.n	800282e <scroll+0xc6>
    int changevalue = -1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002812:	607b      	str	r3, [r7, #4]
    if (dispCount > 0) {
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <scroll+0xe4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	dd05      	ble.n	8002828 <scroll+0xc0>
      dispCount = dispCount + changevalue;              // Update counter
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <scroll+0xe4>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	4a09      	ldr	r2, [pc, #36]	@ (800284c <scroll+0xe4>)
 8002826:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <scroll+0xdc>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000011 	.word	0x20000011
 800283c:	40011000 	.word	0x40011000
 8002840:	0800df54 	.word	0x0800df54
 8002844:	2000074c 	.word	0x2000074c
 8002848:	200006f0 	.word	0x200006f0
 800284c:	200006ec 	.word	0x200006ec

08002850 <scroll2>:
void scroll2() { // scroll left inner knob
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 8002856:	4b31      	ldr	r3, [pc, #196]	@ (800291c <scroll2+0xcc>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4b2f      	ldr	r3, [pc, #188]	@ (800291c <scroll2+0xcc>)
 8002860:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 8002862:	2102      	movs	r1, #2
 8002864:	482e      	ldr	r0, [pc, #184]	@ (8002920 <scroll2+0xd0>)
 8002866:	f004 fb25 	bl	8006eb4 <HAL_GPIO_ReadPin>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <scroll2+0x2e>
 8002870:	4b2a      	ldr	r3, [pc, #168]	@ (800291c <scroll2+0xcc>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b28      	ldr	r3, [pc, #160]	@ (800291c <scroll2+0xcc>)
 800287c:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 800287e:	2104      	movs	r1, #4
 8002880:	4827      	ldr	r0, [pc, #156]	@ (8002920 <scroll2+0xd0>)
 8002882:	f004 fb17 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <scroll2+0x4a>
 800288c:	4b23      	ldr	r3, [pc, #140]	@ (800291c <scroll2+0xcc>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b21      	ldr	r3, [pc, #132]	@ (800291c <scroll2+0xcc>)
 8002898:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 800289a:	4b20      	ldr	r3, [pc, #128]	@ (800291c <scroll2+0xcc>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a20      	ldr	r2, [pc, #128]	@ (8002924 <scroll2+0xd4>)
 80028a4:	56d3      	ldrsb	r3, [r2, r3]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002928 <scroll2+0xd8>)
 80028aa:	f993 3000 	ldrsb.w	r3, [r3]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	b25a      	sxtb	r2, r3
 80028b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <scroll2+0xd8>)
 80028b8:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 80028ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <scroll2+0xd8>)
 80028bc:	f993 3000 	ldrsb.w	r3, [r3]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	dd11      	ble.n	80028e8 <scroll2+0x98>
    int changevalue = 1;
 80028c4:	2301      	movs	r3, #1
 80028c6:	603b      	str	r3, [r7, #0]
    if (dispCount < count) {
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <scroll2+0xdc>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b18      	ldr	r3, [pc, #96]	@ (8002930 <scroll2+0xe0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	da05      	bge.n	80028e0 <scroll2+0x90>
      dispCount = dispCount + changevalue;              // Update counter
 80028d4:	4b15      	ldr	r3, [pc, #84]	@ (800292c <scroll2+0xdc>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	4a13      	ldr	r2, [pc, #76]	@ (800292c <scroll2+0xdc>)
 80028de:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <scroll2+0xd8>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
    if (dispCount > 0) {
      dispCount = dispCount + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 80028e6:	e015      	b.n	8002914 <scroll2+0xc4>
  else if( encval < -1 ) {        // Four steps backward
 80028e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <scroll2+0xd8>)
 80028ea:	f993 3000 	ldrsb.w	r3, [r3]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f2:	da0f      	bge.n	8002914 <scroll2+0xc4>
    int changevalue = -1;
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028f8:	607b      	str	r3, [r7, #4]
    if (dispCount > 0) {
 80028fa:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <scroll2+0xdc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	dd05      	ble.n	800290e <scroll2+0xbe>
      dispCount = dispCount + changevalue;              // Update counter
 8002902:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <scroll2+0xdc>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	4a08      	ldr	r2, [pc, #32]	@ (800292c <scroll2+0xdc>)
 800290c:	6013      	str	r3, [r2, #0]
    encval = 0;
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <scroll2+0xd8>)
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000012 	.word	0x20000012
 8002920:	40011000 	.word	0x40011000
 8002924:	0800df64 	.word	0x0800df64
 8002928:	2000074d 	.word	0x2000074d
 800292c:	200006ec 	.word	0x200006ec
 8002930:	200006f0 	.word	0x200006f0

08002934 <cursormove>:
void cursormove() { // micgain left inner knob
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 800293a:	4b30      	ldr	r3, [pc, #192]	@ (80029fc <cursormove+0xc8>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b2e      	ldr	r3, [pc, #184]	@ (80029fc <cursormove+0xc8>)
 8002944:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 8002946:	2102      	movs	r1, #2
 8002948:	482d      	ldr	r0, [pc, #180]	@ (8002a00 <cursormove+0xcc>)
 800294a:	f004 fab3 	bl	8006eb4 <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <cursormove+0x2e>
 8002954:	4b29      	ldr	r3, [pc, #164]	@ (80029fc <cursormove+0xc8>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <cursormove+0xc8>)
 8002960:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 8002962:	2104      	movs	r1, #4
 8002964:	4826      	ldr	r0, [pc, #152]	@ (8002a00 <cursormove+0xcc>)
 8002966:	f004 faa5 	bl	8006eb4 <HAL_GPIO_ReadPin>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d006      	beq.n	800297e <cursormove+0x4a>
 8002970:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <cursormove+0xc8>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <cursormove+0xc8>)
 800297c:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 800297e:	4b1f      	ldr	r3, [pc, #124]	@ (80029fc <cursormove+0xc8>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	4a1f      	ldr	r2, [pc, #124]	@ (8002a04 <cursormove+0xd0>)
 8002988:	56d3      	ldrsb	r3, [r2, r3]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <cursormove+0xd4>)
 800298e:	f993 3000 	ldrsb.w	r3, [r3]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	4413      	add	r3, r2
 8002996:	b2db      	uxtb	r3, r3
 8002998:	b25a      	sxtb	r2, r3
 800299a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <cursormove+0xd4>)
 800299c:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 800299e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <cursormove+0xd4>)
 80029a0:	f993 3000 	ldrsb.w	r3, [r3]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	dd0f      	ble.n	80029c8 <cursormove+0x94>
    int changevalue = 1;
 80029a8:	2301      	movs	r3, #1
 80029aa:	603b      	str	r3, [r7, #0]
    if (cursor < 8) {
 80029ac:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <cursormove+0xd8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	dc05      	bgt.n	80029c0 <cursormove+0x8c>
      cursor = cursor + changevalue;              // Update counter
 80029b4:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <cursormove+0xd8>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	4a13      	ldr	r2, [pc, #76]	@ (8002a0c <cursormove+0xd8>)
 80029be:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <cursormove+0xd4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
    if (cursor > 0) {
      cursor = cursor + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 80029c6:	e015      	b.n	80029f4 <cursormove+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 80029c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a08 <cursormove+0xd4>)
 80029ca:	f993 3000 	ldrsb.w	r3, [r3]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029d2:	da0f      	bge.n	80029f4 <cursormove+0xc0>
    int changevalue = -1;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029d8:	607b      	str	r3, [r7, #4]
    if (cursor > 0) {
 80029da:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <cursormove+0xd8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	dd05      	ble.n	80029ee <cursormove+0xba>
      cursor = cursor + changevalue;              // Update counter
 80029e2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <cursormove+0xd8>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <cursormove+0xd8>)
 80029ec:	6013      	str	r3, [r2, #0]
    encval = 0;
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <cursormove+0xd4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000013 	.word	0x20000013
 8002a00:	40011000 	.word	0x40011000
 8002a04:	0800df74 	.word	0x0800df74
 8002a08:	2000074e 	.word	0x2000074e
 8002a0c:	200006f8 	.word	0x200006f8

08002a10 <delmove>:
void delmove() { // micgain left inner knob
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_CD = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_CD <<=2;  // Remember previous state
 8002a16:	4b30      	ldr	r3, [pc, #192]	@ (8002ad8 <delmove+0xc8>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad8 <delmove+0xc8>)
 8002a20:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A1_GPIO_Port, LEFT_A1_Pin)) old_CD |= 0x02; // Add current state of pin C
 8002a22:	2102      	movs	r1, #2
 8002a24:	482d      	ldr	r0, [pc, #180]	@ (8002adc <delmove+0xcc>)
 8002a26:	f004 fa45 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d006      	beq.n	8002a3e <delmove+0x2e>
 8002a30:	4b29      	ldr	r3, [pc, #164]	@ (8002ad8 <delmove+0xc8>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4b27      	ldr	r3, [pc, #156]	@ (8002ad8 <delmove+0xc8>)
 8002a3c:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B1_GPIO_Port, LEFT_B1_Pin)) old_CD |= 0x01; // Add current state of pin D
 8002a3e:	2104      	movs	r1, #4
 8002a40:	4826      	ldr	r0, [pc, #152]	@ (8002adc <delmove+0xcc>)
 8002a42:	f004 fa37 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <delmove+0x4a>
 8002a4c:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <delmove+0xc8>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <delmove+0xc8>)
 8002a58:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_CD & 0x0f )];
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad8 <delmove+0xc8>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae0 <delmove+0xd0>)
 8002a64:	56d3      	ldrsb	r3, [r2, r3]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <delmove+0xd4>)
 8002a6a:	f993 3000 	ldrsb.w	r3, [r3]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	b25a      	sxtb	r2, r3
 8002a76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <delmove+0xd4>)
 8002a78:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <delmove+0xd4>)
 8002a7c:	f993 3000 	ldrsb.w	r3, [r3]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	dd0f      	ble.n	8002aa4 <delmove+0x94>
    int changevalue = 1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	603b      	str	r3, [r7, #0]
    if (delc < 1) {
 8002a88:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <delmove+0xd8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	dc05      	bgt.n	8002a9c <delmove+0x8c>
      delc = delc + changevalue;              // Update counter
 8002a90:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <delmove+0xd8>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <delmove+0xd8>)
 8002a9a:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <delmove+0xd4>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
    if (delc > 0) {
      delc = delc + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002aa2:	e015      	b.n	8002ad0 <delmove+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <delmove+0xd4>)
 8002aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aae:	da0f      	bge.n	8002ad0 <delmove+0xc0>
    int changevalue = -1;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ab4:	607b      	str	r3, [r7, #4]
    if (delc > 0) {
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <delmove+0xd8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	dd05      	ble.n	8002aca <delmove+0xba>
      delc = delc + changevalue;              // Update counter
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <delmove+0xd8>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a08      	ldr	r2, [pc, #32]	@ (8002ae8 <delmove+0xd8>)
 8002ac8:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <delmove+0xd4>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000014 	.word	0x20000014
 8002adc:	40011000 	.word	0x40011000
 8002ae0:	0800df84 	.word	0x0800df84
 8002ae4:	2000074f 	.word	0x2000074f
 8002ae8:	20000704 	.word	0x20000704

08002aec <charmove>:
void charmove() { // sidetone left outer knob
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
  // if they are valid and have rotated a full indent
  static uint8_t old_IJ = 3;  // Lookup table index
  static int8_t encval = 0;   // Encoder value
  static const int8_t enc_states[]  = {0,0,0,0,0,-1,0,-1,0,0,0,1,0,0,0,1}; // Lookup table

  old_IJ <<=2;  // Remember previous state
 8002af2:	4b30      	ldr	r3, [pc, #192]	@ (8002bb4 <charmove+0xc8>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb4 <charmove+0xc8>)
 8002afc:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LEFT_A2_GPIO_Port, LEFT_A2_Pin)) old_IJ |= 0x02; // Add current state of pin I
 8002afe:	2101      	movs	r1, #1
 8002b00:	482d      	ldr	r0, [pc, #180]	@ (8002bb8 <charmove+0xcc>)
 8002b02:	f004 f9d7 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <charmove+0x2e>
 8002b0c:	4b29      	ldr	r3, [pc, #164]	@ (8002bb4 <charmove+0xc8>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <charmove+0xc8>)
 8002b18:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(LEFT_B2_GPIO_Port, LEFT_B2_Pin)) old_IJ |= 0x01; // Add current state of pin J
 8002b1a:	2108      	movs	r1, #8
 8002b1c:	4827      	ldr	r0, [pc, #156]	@ (8002bbc <charmove+0xd0>)
 8002b1e:	f004 f9c9 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <charmove+0x4a>
 8002b28:	4b22      	ldr	r3, [pc, #136]	@ (8002bb4 <charmove+0xc8>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <charmove+0xc8>)
 8002b34:	701a      	strb	r2, [r3, #0]

  encval += enc_states[( old_IJ & 0x0f )];
 8002b36:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb4 <charmove+0xc8>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	4a20      	ldr	r2, [pc, #128]	@ (8002bc0 <charmove+0xd4>)
 8002b40:	56d3      	ldrsb	r3, [r2, r3]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc4 <charmove+0xd8>)
 8002b46:	f993 3000 	ldrsb.w	r3, [r3]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	b25a      	sxtb	r2, r3
 8002b52:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc4 <charmove+0xd8>)
 8002b54:	701a      	strb	r2, [r3, #0]

  // Update counter if encoder has rotated a full indent, that is at least 4 steps
  if( encval > 1 ) {        // Four steps forward
 8002b56:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <charmove+0xd8>)
 8002b58:	f993 3000 	ldrsb.w	r3, [r3]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	dd0f      	ble.n	8002b80 <charmove+0x94>
    int changevalue = 1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	603b      	str	r3, [r7, #0]
    if (charcount < 39) {
 8002b64:	4b18      	ldr	r3, [pc, #96]	@ (8002bc8 <charmove+0xdc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b26      	cmp	r3, #38	@ 0x26
 8002b6a:	dc05      	bgt.n	8002b78 <charmove+0x8c>
      charcount = charcount + changevalue;              // Update counter
 8002b6c:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <charmove+0xdc>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a14      	ldr	r2, [pc, #80]	@ (8002bc8 <charmove+0xdc>)
 8002b76:	6013      	str	r3, [r2, #0]
    }
    encval = 0;
 8002b78:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <charmove+0xd8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
    if (charcount > 0) {
      charcount = charcount + changevalue;              // Update counter
    }
    encval = 0;
  }
}
 8002b7e:	e015      	b.n	8002bac <charmove+0xc0>
  else if( encval < -1 ) {        // Four steps backward
 8002b80:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <charmove+0xd8>)
 8002b82:	f993 3000 	ldrsb.w	r3, [r3]
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b8a:	da0f      	bge.n	8002bac <charmove+0xc0>
    int changevalue = -1;
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b90:	607b      	str	r3, [r7, #4]
    if (charcount > 0) {
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <charmove+0xdc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	dd05      	ble.n	8002ba6 <charmove+0xba>
      charcount = charcount + changevalue;              // Update counter
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <charmove+0xdc>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a09      	ldr	r2, [pc, #36]	@ (8002bc8 <charmove+0xdc>)
 8002ba4:	6013      	str	r3, [r2, #0]
    encval = 0;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <charmove+0xd8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000015 	.word	0x20000015
 8002bb8:	40010800 	.word	0x40010800
 8002bbc:	40011000 	.word	0x40011000
 8002bc0:	0800df94 	.word	0x0800df94
 8002bc4:	20000750 	.word	0x20000750
 8002bc8:	20000700 	.word	0x20000700

08002bcc <leftinnerknob>:

void leftinnerknob() {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  if (bscroll) {
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <leftinnerknob+0x44>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <leftinnerknob+0x12>
    scroll();
 8002bd8:	f7ff fdc6 	bl	8002768 <scroll>
    scroll2();
  }
  else {
    read_encoder3();
  }
}
 8002bdc:	e016      	b.n	8002c0c <leftinnerknob+0x40>
  else if (del) {
 8002bde:	4b0d      	ldr	r3, [pc, #52]	@ (8002c14 <leftinnerknob+0x48>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <leftinnerknob+0x20>
    delmove();
 8002be6:	f7ff ff13 	bl	8002a10 <delmove>
}
 8002bea:	e00f      	b.n	8002c0c <leftinnerknob+0x40>
  else if (add) {
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <leftinnerknob+0x4c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <leftinnerknob+0x2e>
    cursormove(); //flipped
 8002bf4:	f7ff fe9e 	bl	8002934 <cursormove>
}
 8002bf8:	e008      	b.n	8002c0c <leftinnerknob+0x40>
  else if (edit) {
 8002bfa:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <leftinnerknob+0x50>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <leftinnerknob+0x3c>
    scroll2();
 8002c02:	f7ff fe25 	bl	8002850 <scroll2>
}
 8002c06:	e001      	b.n	8002c0c <leftinnerknob+0x40>
    read_encoder3();
 8002c08:	f7ff fcbc 	bl	8002584 <read_encoder3>
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	200006f4 	.word	0x200006f4
 8002c14:	200006f6 	.word	0x200006f6
 8002c18:	200006f5 	.word	0x200006f5
 8002c1c:	200006a8 	.word	0x200006a8

08002c20 <leftouterknob>:

void leftouterknob() {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  if (add) {
 8002c24:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <leftouterknob+0x1c>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <leftouterknob+0x12>
    charmove(); //flipped
 8002c2c:	f7ff ff5e 	bl	8002aec <charmove>
  }
  else {
    read_encoder4();
  }
}
 8002c30:	e001      	b.n	8002c36 <leftouterknob+0x16>
    read_encoder4();
 8002c32:	f7ff fd1f 	bl	8002674 <read_encoder4>
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200006f5 	.word	0x200006f5

08002c40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LEFT_A2_Pin) { // LEFT 2 could be 8 idk
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d102      	bne.n	8002c56 <HAL_GPIO_EXTI_Callback+0x16>
		leftouterknob();
 8002c50:	f7ff ffe6 	bl	8002c20 <leftouterknob>
		read_encoder();
	}
	else if (GPIO_Pin == RIGHT_B2_Pin) { // RIGHT 2
		read_encoder();
	}
}
 8002c54:	e02c      	b.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == LEFT_B2_Pin) { // LEFT 2
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d102      	bne.n	8002c62 <HAL_GPIO_EXTI_Callback+0x22>
		leftouterknob();
 8002c5c:	f7ff ffe0 	bl	8002c20 <leftouterknob>
}
 8002c60:	e026      	b.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == LEFT_A1_Pin) { // LEFT 1
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d102      	bne.n	8002c6e <HAL_GPIO_EXTI_Callback+0x2e>
		leftinnerknob();
 8002c68:	f7ff ffb0 	bl	8002bcc <leftinnerknob>
}
 8002c6c:	e020      	b.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == LEFT_B1_Pin) { // LEFT 1
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d102      	bne.n	8002c7a <HAL_GPIO_EXTI_Callback+0x3a>
		leftinnerknob();
 8002c74:	f7ff ffaa 	bl	8002bcc <leftinnerknob>
}
 8002c78:	e01a      	b.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_A1_Pin) { // RIGHT 1
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c80:	d102      	bne.n	8002c88 <HAL_GPIO_EXTI_Callback+0x48>
		read_encoder2();
 8002c82:	f7ff fc03 	bl	800248c <read_encoder2>
}
 8002c86:	e013      	b.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_B1_Pin) { // RIGHT 1
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8e:	d102      	bne.n	8002c96 <HAL_GPIO_EXTI_Callback+0x56>
		read_encoder2();
 8002c90:	f7ff fbfc 	bl	800248c <read_encoder2>
}
 8002c94:	e00c      	b.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_A2_Pin) { // RIGHT 2
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c9c:	d102      	bne.n	8002ca4 <HAL_GPIO_EXTI_Callback+0x64>
		read_encoder();
 8002c9e:	f7ff fb7d 	bl	800239c <read_encoder>
}
 8002ca2:	e005      	b.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == RIGHT_B2_Pin) { // RIGHT 2
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002caa:	d101      	bne.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x70>
		read_encoder();
 8002cac:	f7ff fb76 	bl	800239c <read_encoder>
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <checksum>:

void checksum(const char* str, char* result) {
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
    unsigned int sum = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
    const char* ptr = str;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	60bb      	str	r3, [r7, #8]

    if (*ptr != '\0') {
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <checksum+0x34>
        ptr += 6;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3306      	adds	r3, #6
 8002cd6:	60bb      	str	r3, [r7, #8]
    }

    while (*ptr != '\0') {
 8002cd8:	e008      	b.n	8002cec <checksum+0x34>
        sum += *ptr;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
        ptr++;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	60bb      	str	r3, [r7, #8]
    while (*ptr != '\0') {
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f2      	bne.n	8002cda <checksum+0x22>
    }

    sum &= 0xFF;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	60fb      	str	r3, [r7, #12]

    result[0] = ((sum >> 4) & 0xF) + 0x30;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	3330      	adds	r3, #48	@ 0x30
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	701a      	strb	r2, [r3, #0]
    result[1] = (sum & 0xF) + 0x30;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	3230      	adds	r2, #48	@ 0x30
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

    result[2] = '\0';
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	3302      	adds	r3, #2
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <concatTwoChars>:

void concatTwoChars(char* base, const char* woo) {
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
    while (*base) { // Move to the end of the base string
 8002d3e:	e002      	b.n	8002d46 <concatTwoChars+0x12>
        base++;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3301      	adds	r3, #1
 8002d44:	607b      	str	r3, [r7, #4]
    while (*base) { // Move to the end of the base string
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f8      	bne.n	8002d40 <concatTwoChars+0xc>
    }
    while (*woo) { // Copy the characters from toAdd
 8002d4e:	e009      	b.n	8002d64 <concatTwoChars+0x30>
        *base = *woo;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	701a      	strb	r2, [r3, #0]
        base++;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	607b      	str	r3, [r7, #4]
        woo++;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	603b      	str	r3, [r7, #0]
    while (*woo) { // Copy the characters from toAdd
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f1      	bne.n	8002d50 <concatTwoChars+0x1c>
    }
    *base = '\0'; // Null terminate the resulting string
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <LCDPrint>:

void LCDPrint(char* str) { //TODO Should be done needs testing, issues should not be here though
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b09c      	sub	sp, #112	@ 0x70
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	if (str[0] == 'x') {
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b78      	cmp	r3, #120	@ 0x78
 8002d8a:	d109      	bne.n	8002da0 <LCDPrint+0x24>
	  glcd_on();
 8002d8c:	f7fe f8c0 	bl	8000f10 <glcd_on>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8002d90:	2201      	movs	r2, #1
 8002d92:	2102      	movs	r1, #2
 8002d94:	489e      	ldr	r0, [pc, #632]	@ (8003010 <LCDPrint+0x294>)
 8002d96:	f004 f8a4 	bl	8006ee2 <HAL_GPIO_WritePin>
	  glcd_clear_all();
 8002d9a:	f7fe fd13 	bl	80017c4 <glcd_clear_all>
	  }
	  else {
		glcd_puts("N", 118, 3);
	  }
	}
}
 8002d9e:	e2d0      	b.n	8003342 <LCDPrint+0x5c6>
	else if (str[0] == 'o') {
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b6f      	cmp	r3, #111	@ 0x6f
 8002da6:	d107      	bne.n	8002db8 <LCDPrint+0x3c>
      glcd_off();
 8002da8:	f7fe f8c5 	bl	8000f36 <glcd_off>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2102      	movs	r1, #2
 8002db0:	4897      	ldr	r0, [pc, #604]	@ (8003010 <LCDPrint+0x294>)
 8002db2:	f004 f896 	bl	8006ee2 <HAL_GPIO_WritePin>
}
 8002db6:	e2c4      	b.n	8003342 <LCDPrint+0x5c6>
	else if (str[0] == 'f') { //frequency
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b66      	cmp	r3, #102	@ 0x66
 8002dbe:	f040 8091 	bne.w	8002ee4 <LCDPrint+0x168>
	  sprintf(str0, "%0.3f", freq);
 8002dc2:	4b94      	ldr	r3, [pc, #592]	@ (8003014 <LCDPrint+0x298>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fb9e 	bl	8000508 <__aeabi_f2d>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8002dd4:	4990      	ldr	r1, [pc, #576]	@ (8003018 <LCDPrint+0x29c>)
 8002dd6:	f008 f991 	bl	800b0fc <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 8002dda:	4b90      	ldr	r3, [pc, #576]	@ (800301c <LCDPrint+0x2a0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fb92 	bl	8000508 <__aeabi_f2d>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8002dec:	498a      	ldr	r1, [pc, #552]	@ (8003018 <LCDPrint+0x29c>)
 8002dee:	f008 f985 	bl	800b0fc <siprintf>
	  glcd_puts("A", 2, 2);
 8002df2:	2202      	movs	r2, #2
 8002df4:	2102      	movs	r1, #2
 8002df6:	488a      	ldr	r0, [pc, #552]	@ (8003020 <LCDPrint+0x2a4>)
 8002df8:	f7fe fa5c 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 8002dfc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e00:	2202      	movs	r2, #2
 8002e02:	210b      	movs	r1, #11
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fa55 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 2);
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	2122      	movs	r1, #34	@ 0x22
 8002e0e:	4885      	ldr	r0, [pc, #532]	@ (8003024 <LCDPrint+0x2a8>)
 8002e10:	f7fe fa50 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 8002e14:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e18:	3304      	adds	r3, #4
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	2126      	movs	r1, #38	@ 0x26
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fa48 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 8002e24:	2202      	movs	r2, #2
 8002e26:	213e      	movs	r1, #62	@ 0x3e
 8002e28:	487f      	ldr	r0, [pc, #508]	@ (8003028 <LCDPrint+0x2ac>)
 8002e2a:	f7fe fa43 	bl	80012b4 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 8002e2e:	2202      	movs	r2, #2
 8002e30:	2142      	movs	r1, #66	@ 0x42
 8002e32:	487e      	ldr	r0, [pc, #504]	@ (800302c <LCDPrint+0x2b0>)
 8002e34:	f7fe fa3e 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 8002e38:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	214b      	movs	r1, #75	@ 0x4b
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe fa37 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 2);
 8002e46:	2202      	movs	r2, #2
 8002e48:	2162      	movs	r1, #98	@ 0x62
 8002e4a:	4876      	ldr	r0, [pc, #472]	@ (8003024 <LCDPrint+0x2a8>)
 8002e4c:	f7fe fa32 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 8002e50:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002e54:	3304      	adds	r3, #4
 8002e56:	2202      	movs	r2, #2
 8002e58:	2166      	movs	r1, #102	@ 0x66
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fa2a 	bl	80012b4 <glcd_puts>
	  glcd_clearline(3);
 8002e60:	2003      	movs	r0, #3
 8002e62:	f7fe fc63 	bl	800172c <glcd_clearline>
	  sprintf(str2, "%d", vol);
 8002e66:	4b72      	ldr	r3, [pc, #456]	@ (8003030 <LCDPrint+0x2b4>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e6e:	4971      	ldr	r1, [pc, #452]	@ (8003034 <LCDPrint+0x2b8>)
 8002e70:	4618      	mov	r0, r3
 8002e72:	f008 f943 	bl	800b0fc <siprintf>
	  sprintf(str3, "%03d", obs);
 8002e76:	4b70      	ldr	r3, [pc, #448]	@ (8003038 <LCDPrint+0x2bc>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e7e:	496f      	ldr	r1, [pc, #444]	@ (800303c <LCDPrint+0x2c0>)
 8002e80:	4618      	mov	r0, r3
 8002e82:	f008 f93b 	bl	800b0fc <siprintf>
	  glcd_puts("Vol ", 2, 5);
 8002e86:	2205      	movs	r2, #5
 8002e88:	2102      	movs	r1, #2
 8002e8a:	486d      	ldr	r0, [pc, #436]	@ (8003040 <LCDPrint+0x2c4>)
 8002e8c:	f7fe fa12 	bl	80012b4 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 8002e90:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e94:	2205      	movs	r2, #5
 8002e96:	211e      	movs	r1, #30
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fa0b 	bl	80012b4 <glcd_puts>
	  if (vol < 10) {
 8002e9e:	4b64      	ldr	r3, [pc, #400]	@ (8003030 <LCDPrint+0x2b4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b09      	cmp	r3, #9
 8002ea4:	dc04      	bgt.n	8002eb0 <LCDPrint+0x134>
	  	 glcd_puts(" ", 38, 5);
 8002ea6:	2205      	movs	r2, #5
 8002ea8:	2126      	movs	r1, #38	@ 0x26
 8002eaa:	485f      	ldr	r0, [pc, #380]	@ (8003028 <LCDPrint+0x2ac>)
 8002eac:	f7fe fa02 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 8002eb0:	2205      	movs	r2, #5
 8002eb2:	2138      	movs	r1, #56	@ 0x38
 8002eb4:	485c      	ldr	r0, [pc, #368]	@ (8003028 <LCDPrint+0x2ac>)
 8002eb6:	f7fe f9fd 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 8002eba:	2205      	movs	r2, #5
 8002ebc:	213e      	movs	r1, #62	@ 0x3e
 8002ebe:	485a      	ldr	r0, [pc, #360]	@ (8003028 <LCDPrint+0x2ac>)
 8002ec0:	f7fe f9f8 	bl	80012b4 <glcd_puts>
	  glcd_puts("OBS ", 66, 5);
 8002ec4:	2205      	movs	r2, #5
 8002ec6:	2142      	movs	r1, #66	@ 0x42
 8002ec8:	485e      	ldr	r0, [pc, #376]	@ (8003044 <LCDPrint+0x2c8>)
 8002eca:	f7fe f9f3 	bl	80012b4 <glcd_puts>
	  glcd_puts(str3, 94, 5);
 8002ece:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	215e      	movs	r1, #94	@ 0x5e
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe f9ec 	bl	80012b4 <glcd_puts>
	  glcd_clearline(6);
 8002edc:	2006      	movs	r0, #6
 8002ede:	f7fe fc25 	bl	800172c <glcd_clearline>
}
 8002ee2:	e22e      	b.n	8003342 <LCDPrint+0x5c6>
	else if (str[0] == 'v') {
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b76      	cmp	r3, #118	@ 0x76
 8002eea:	f040 80ad 	bne.w	8003048 <LCDPrint+0x2cc>
	  sprintf(str0, "%0.3f", freq);
 8002eee:	4b49      	ldr	r3, [pc, #292]	@ (8003014 <LCDPrint+0x298>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fb08 	bl	8000508 <__aeabi_f2d>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002f00:	4945      	ldr	r1, [pc, #276]	@ (8003018 <LCDPrint+0x29c>)
 8002f02:	f008 f8fb 	bl	800b0fc <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 8002f06:	4b45      	ldr	r3, [pc, #276]	@ (800301c <LCDPrint+0x2a0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fafc 	bl	8000508 <__aeabi_f2d>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002f18:	493f      	ldr	r1, [pc, #252]	@ (8003018 <LCDPrint+0x29c>)
 8002f1a:	f008 f8ef 	bl	800b0fc <siprintf>
	  glcd_puts("A", 2, 2);
 8002f1e:	2202      	movs	r2, #2
 8002f20:	2102      	movs	r1, #2
 8002f22:	483f      	ldr	r0, [pc, #252]	@ (8003020 <LCDPrint+0x2a4>)
 8002f24:	f7fe f9c6 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 8002f28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	210b      	movs	r1, #11
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe f9bf 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 2);
 8002f36:	2202      	movs	r2, #2
 8002f38:	2122      	movs	r1, #34	@ 0x22
 8002f3a:	483a      	ldr	r0, [pc, #232]	@ (8003024 <LCDPrint+0x2a8>)
 8002f3c:	f7fe f9ba 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 8002f40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f44:	3304      	adds	r3, #4
 8002f46:	2202      	movs	r2, #2
 8002f48:	2126      	movs	r1, #38	@ 0x26
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe f9b2 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 8002f50:	2202      	movs	r2, #2
 8002f52:	213e      	movs	r1, #62	@ 0x3e
 8002f54:	4834      	ldr	r0, [pc, #208]	@ (8003028 <LCDPrint+0x2ac>)
 8002f56:	f7fe f9ad 	bl	80012b4 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	2142      	movs	r1, #66	@ 0x42
 8002f5e:	4833      	ldr	r0, [pc, #204]	@ (800302c <LCDPrint+0x2b0>)
 8002f60:	f7fe f9a8 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 8002f64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f68:	2202      	movs	r2, #2
 8002f6a:	214b      	movs	r1, #75	@ 0x4b
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe f9a1 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 2);
 8002f72:	2202      	movs	r2, #2
 8002f74:	2162      	movs	r1, #98	@ 0x62
 8002f76:	482b      	ldr	r0, [pc, #172]	@ (8003024 <LCDPrint+0x2a8>)
 8002f78:	f7fe f99c 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 8002f7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f80:	3304      	adds	r3, #4
 8002f82:	2202      	movs	r2, #2
 8002f84:	2166      	movs	r1, #102	@ 0x66
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe f994 	bl	80012b4 <glcd_puts>
	  glcd_clearline(3);
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	f7fe fbcd 	bl	800172c <glcd_clearline>
	  sprintf(str2, "%d", vol);
 8002f92:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <LCDPrint+0x2b4>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f9a:	4926      	ldr	r1, [pc, #152]	@ (8003034 <LCDPrint+0x2b8>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f008 f8ad 	bl	800b0fc <siprintf>
	  sprintf(str3, "%03d", obs);
 8002fa2:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <LCDPrint+0x2bc>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002faa:	4924      	ldr	r1, [pc, #144]	@ (800303c <LCDPrint+0x2c0>)
 8002fac:	4618      	mov	r0, r3
 8002fae:	f008 f8a5 	bl	800b0fc <siprintf>
	  glcd_puts("Vol ", 2, 5);
 8002fb2:	2205      	movs	r2, #5
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	4822      	ldr	r0, [pc, #136]	@ (8003040 <LCDPrint+0x2c4>)
 8002fb8:	f7fe f97c 	bl	80012b4 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 8002fbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002fc0:	2205      	movs	r2, #5
 8002fc2:	211e      	movs	r1, #30
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe f975 	bl	80012b4 <glcd_puts>
	  if (vol < 10) {
 8002fca:	4b19      	ldr	r3, [pc, #100]	@ (8003030 <LCDPrint+0x2b4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b09      	cmp	r3, #9
 8002fd0:	dc04      	bgt.n	8002fdc <LCDPrint+0x260>
		 glcd_puts(" ", 38, 5);
 8002fd2:	2205      	movs	r2, #5
 8002fd4:	2126      	movs	r1, #38	@ 0x26
 8002fd6:	4814      	ldr	r0, [pc, #80]	@ (8003028 <LCDPrint+0x2ac>)
 8002fd8:	f7fe f96c 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 8002fdc:	2205      	movs	r2, #5
 8002fde:	2138      	movs	r1, #56	@ 0x38
 8002fe0:	4811      	ldr	r0, [pc, #68]	@ (8003028 <LCDPrint+0x2ac>)
 8002fe2:	f7fe f967 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 8002fe6:	2205      	movs	r2, #5
 8002fe8:	213e      	movs	r1, #62	@ 0x3e
 8002fea:	480f      	ldr	r0, [pc, #60]	@ (8003028 <LCDPrint+0x2ac>)
 8002fec:	f7fe f962 	bl	80012b4 <glcd_puts>
	  glcd_puts("OBS ", 66, 5);
 8002ff0:	2205      	movs	r2, #5
 8002ff2:	2142      	movs	r1, #66	@ 0x42
 8002ff4:	4813      	ldr	r0, [pc, #76]	@ (8003044 <LCDPrint+0x2c8>)
 8002ff6:	f7fe f95d 	bl	80012b4 <glcd_puts>
	  glcd_puts(str3, 94, 5);
 8002ffa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ffe:	2205      	movs	r2, #5
 8003000:	215e      	movs	r1, #94	@ 0x5e
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe f956 	bl	80012b4 <glcd_puts>
	  glcd_clearline(6);
 8003008:	2006      	movs	r0, #6
 800300a:	f7fe fb8f 	bl	800172c <glcd_clearline>
}
 800300e:	e198      	b.n	8003342 <LCDPrint+0x5c6>
 8003010:	40010800 	.word	0x40010800
 8003014:	20000698 	.word	0x20000698
 8003018:	0800d5fc 	.word	0x0800d5fc
 800301c:	20000004 	.word	0x20000004
 8003020:	0800d604 	.word	0x0800d604
 8003024:	0800d608 	.word	0x0800d608
 8003028:	0800d60c 	.word	0x0800d60c
 800302c:	0800d610 	.word	0x0800d610
 8003030:	200006a4 	.word	0x200006a4
 8003034:	0800d614 	.word	0x0800d614
 8003038:	200006fc 	.word	0x200006fc
 800303c:	0800d618 	.word	0x0800d618
 8003040:	0800d620 	.word	0x0800d620
 8003044:	0800d628 	.word	0x0800d628
	else if (str[0] == 'b') {
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b62      	cmp	r3, #98	@ 0x62
 800304e:	f040 8091 	bne.w	8003174 <LCDPrint+0x3f8>
	  sprintf(str0, "%0.3f", freq);
 8003052:	4bbe      	ldr	r3, [pc, #760]	@ (800334c <LCDPrint+0x5d0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fa56 	bl	8000508 <__aeabi_f2d>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	f107 0020 	add.w	r0, r7, #32
 8003064:	49ba      	ldr	r1, [pc, #744]	@ (8003350 <LCDPrint+0x5d4>)
 8003066:	f008 f849 	bl	800b0fc <siprintf>
	  sprintf(str1, "%0.3f", Standby);
 800306a:	4bba      	ldr	r3, [pc, #744]	@ (8003354 <LCDPrint+0x5d8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd fa4a 	bl	8000508 <__aeabi_f2d>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	f107 0018 	add.w	r0, r7, #24
 800307c:	49b4      	ldr	r1, [pc, #720]	@ (8003350 <LCDPrint+0x5d4>)
 800307e:	f008 f83d 	bl	800b0fc <siprintf>
	  glcd_puts("A", 2, 2);
 8003082:	2202      	movs	r2, #2
 8003084:	2102      	movs	r1, #2
 8003086:	48b4      	ldr	r0, [pc, #720]	@ (8003358 <LCDPrint+0x5dc>)
 8003088:	f7fe f914 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0, 11, 2);
 800308c:	f107 0320 	add.w	r3, r7, #32
 8003090:	2202      	movs	r2, #2
 8003092:	210b      	movs	r1, #11
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe f90d 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 34, 2);
 800309a:	2202      	movs	r2, #2
 800309c:	2122      	movs	r1, #34	@ 0x22
 800309e:	48af      	ldr	r0, [pc, #700]	@ (800335c <LCDPrint+0x5e0>)
 80030a0:	f7fe f908 	bl	80012b4 <glcd_puts>
	  glcd_puts(str0+4, 38, 2);
 80030a4:	f107 0320 	add.w	r3, r7, #32
 80030a8:	3304      	adds	r3, #4
 80030aa:	2202      	movs	r2, #2
 80030ac:	2126      	movs	r1, #38	@ 0x26
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe f900 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 2);
 80030b4:	2202      	movs	r2, #2
 80030b6:	213e      	movs	r1, #62	@ 0x3e
 80030b8:	48a9      	ldr	r0, [pc, #676]	@ (8003360 <LCDPrint+0x5e4>)
 80030ba:	f7fe f8fb 	bl	80012b4 <glcd_puts>
	  glcd_puts("S ", 66, 2);
 80030be:	2202      	movs	r2, #2
 80030c0:	2142      	movs	r1, #66	@ 0x42
 80030c2:	48a8      	ldr	r0, [pc, #672]	@ (8003364 <LCDPrint+0x5e8>)
 80030c4:	f7fe f8f6 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1, 75, 2);
 80030c8:	f107 0318 	add.w	r3, r7, #24
 80030cc:	2202      	movs	r2, #2
 80030ce:	214b      	movs	r1, #75	@ 0x4b
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe f8ef 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 2);
 80030d6:	2202      	movs	r2, #2
 80030d8:	2162      	movs	r1, #98	@ 0x62
 80030da:	48a0      	ldr	r0, [pc, #640]	@ (800335c <LCDPrint+0x5e0>)
 80030dc:	f7fe f8ea 	bl	80012b4 <glcd_puts>
	  glcd_puts(str1+4, 102, 2);
 80030e0:	f107 0318 	add.w	r3, r7, #24
 80030e4:	3304      	adds	r3, #4
 80030e6:	2202      	movs	r2, #2
 80030e8:	2166      	movs	r1, #102	@ 0x66
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe f8e2 	bl	80012b4 <glcd_puts>
	  glcd_clearline(3);
 80030f0:	2003      	movs	r0, #3
 80030f2:	f7fe fb1b 	bl	800172c <glcd_clearline>
	  sprintf(str2, "%d", vol);
 80030f6:	4b9c      	ldr	r3, [pc, #624]	@ (8003368 <LCDPrint+0x5ec>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	499b      	ldr	r1, [pc, #620]	@ (800336c <LCDPrint+0x5f0>)
 8003100:	4618      	mov	r0, r3
 8003102:	f007 fffb 	bl	800b0fc <siprintf>
	  sprintf(str3, "%03d", obs);
 8003106:	4b9a      	ldr	r3, [pc, #616]	@ (8003370 <LCDPrint+0x5f4>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f107 0308 	add.w	r3, r7, #8
 800310e:	4999      	ldr	r1, [pc, #612]	@ (8003374 <LCDPrint+0x5f8>)
 8003110:	4618      	mov	r0, r3
 8003112:	f007 fff3 	bl	800b0fc <siprintf>
	  glcd_puts("Vol ", 2, 5);
 8003116:	2205      	movs	r2, #5
 8003118:	2102      	movs	r1, #2
 800311a:	4897      	ldr	r0, [pc, #604]	@ (8003378 <LCDPrint+0x5fc>)
 800311c:	f7fe f8ca 	bl	80012b4 <glcd_puts>
	  glcd_puts(str2, 30, 5);
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	2205      	movs	r2, #5
 8003126:	211e      	movs	r1, #30
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe f8c3 	bl	80012b4 <glcd_puts>
	  if (vol < 10) {
 800312e:	4b8e      	ldr	r3, [pc, #568]	@ (8003368 <LCDPrint+0x5ec>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b09      	cmp	r3, #9
 8003134:	dc04      	bgt.n	8003140 <LCDPrint+0x3c4>
		 glcd_puts(" ", 38, 5);
 8003136:	2205      	movs	r2, #5
 8003138:	2126      	movs	r1, #38	@ 0x26
 800313a:	4889      	ldr	r0, [pc, #548]	@ (8003360 <LCDPrint+0x5e4>)
 800313c:	f7fe f8ba 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 56, 5);
 8003140:	2205      	movs	r2, #5
 8003142:	2138      	movs	r1, #56	@ 0x38
 8003144:	4886      	ldr	r0, [pc, #536]	@ (8003360 <LCDPrint+0x5e4>)
 8003146:	f7fe f8b5 	bl	80012b4 <glcd_puts>
	  glcd_puts(" ", 62, 5);
 800314a:	2205      	movs	r2, #5
 800314c:	213e      	movs	r1, #62	@ 0x3e
 800314e:	4884      	ldr	r0, [pc, #528]	@ (8003360 <LCDPrint+0x5e4>)
 8003150:	f7fe f8b0 	bl	80012b4 <glcd_puts>
	  glcd_puts("OBS ", 66, 5);
 8003154:	2205      	movs	r2, #5
 8003156:	2142      	movs	r1, #66	@ 0x42
 8003158:	4888      	ldr	r0, [pc, #544]	@ (800337c <LCDPrint+0x600>)
 800315a:	f7fe f8ab 	bl	80012b4 <glcd_puts>
	  glcd_puts(str3, 94, 5);
 800315e:	f107 0308 	add.w	r3, r7, #8
 8003162:	2205      	movs	r2, #5
 8003164:	215e      	movs	r1, #94	@ 0x5e
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe f8a4 	bl	80012b4 <glcd_puts>
	  glcd_clearline(6);
 800316c:	2006      	movs	r0, #6
 800316e:	f7fe fadd 	bl	800172c <glcd_clearline>
}
 8003172:	e0e6      	b.n	8003342 <LCDPrint+0x5c6>
	else if (str[0] == 'k'){ // scroll
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b6b      	cmp	r3, #107	@ 0x6b
 800317a:	d124      	bne.n	80031c6 <LCDPrint+0x44a>
	  glcd_clear_all();
 800317c:	f7fe fb22 	bl	80017c4 <glcd_clear_all>
	  glcd_puts(str+1, 2, 3);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3301      	adds	r3, #1
 8003184:	2203      	movs	r2, #3
 8003186:	2102      	movs	r1, #2
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe f893 	bl	80012b4 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 800318e:	2203      	movs	r2, #3
 8003190:	213a      	movs	r1, #58	@ 0x3a
 8003192:	487b      	ldr	r0, [pc, #492]	@ (8003380 <LCDPrint+0x604>)
 8003194:	f7fe f88e 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+8, 75, 3);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3308      	adds	r3, #8
 800319c:	2203      	movs	r2, #3
 800319e:	214b      	movs	r1, #75	@ 0x4b
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe f887 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 3);
 80031a6:	2203      	movs	r2, #3
 80031a8:	2162      	movs	r1, #98	@ 0x62
 80031aa:	486c      	ldr	r0, [pc, #432]	@ (800335c <LCDPrint+0x5e0>)
 80031ac:	f7fe f882 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+12, 102, 3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	330c      	adds	r3, #12
 80031b4:	2203      	movs	r2, #3
 80031b6:	2166      	movs	r1, #102	@ 0x66
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe f87b 	bl	80012b4 <glcd_puts>
	  glcd_clearline(4);
 80031be:	2004      	movs	r0, #4
 80031c0:	f7fe fab4 	bl	800172c <glcd_clearline>
}
 80031c4:	e0bd      	b.n	8003342 <LCDPrint+0x5c6>
	else if (str[0] == 'n') {// no mem
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b6e      	cmp	r3, #110	@ 0x6e
 80031cc:	d109      	bne.n	80031e2 <LCDPrint+0x466>
	  glcd_clear_all();
 80031ce:	f7fe faf9 	bl	80017c4 <glcd_clear_all>
	  str = "NO MEM";
 80031d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003384 <LCDPrint+0x608>)
 80031d4:	607b      	str	r3, [r7, #4]
	  glcd_puts(str, 66, 3);
 80031d6:	2203      	movs	r2, #3
 80031d8:	2142      	movs	r1, #66	@ 0x42
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe f86a 	bl	80012b4 <glcd_puts>
}
 80031e0:	e0af      	b.n	8003342 <LCDPrint+0x5c6>
	else if (str[0] == 'e') {
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b65      	cmp	r3, #101	@ 0x65
 80031e8:	d131      	bne.n	800324e <LCDPrint+0x4d2>
	  glcd_clear_all();
 80031ea:	f7fe faeb 	bl	80017c4 <glcd_clear_all>
	  if (str[1] == ':') {
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3301      	adds	r3, #1
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80031f6:	d107      	bne.n	8003208 <LCDPrint+0x48c>
		str = "EMPTY";
 80031f8:	4b63      	ldr	r3, [pc, #396]	@ (8003388 <LCDPrint+0x60c>)
 80031fa:	607b      	str	r3, [r7, #4]
		glcd_puts(str, 66, 3);
 80031fc:	2203      	movs	r2, #3
 80031fe:	2142      	movs	r1, #66	@ 0x42
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fe f857 	bl	80012b4 <glcd_puts>
}
 8003206:	e09c      	b.n	8003342 <LCDPrint+0x5c6>
		glcd_puts(str+1, 2, 3);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3301      	adds	r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe f84f 	bl	80012b4 <glcd_puts>
		glcd_puts("   ", 58, 3);
 8003216:	2203      	movs	r2, #3
 8003218:	213a      	movs	r1, #58	@ 0x3a
 800321a:	4859      	ldr	r0, [pc, #356]	@ (8003380 <LCDPrint+0x604>)
 800321c:	f7fe f84a 	bl	80012b4 <glcd_puts>
		glcd_puts(str+8, 75, 3);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3308      	adds	r3, #8
 8003224:	2203      	movs	r2, #3
 8003226:	214b      	movs	r1, #75	@ 0x4b
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe f843 	bl	80012b4 <glcd_puts>
		glcd_puts(".", 98, 3);
 800322e:	2203      	movs	r2, #3
 8003230:	2162      	movs	r1, #98	@ 0x62
 8003232:	484a      	ldr	r0, [pc, #296]	@ (800335c <LCDPrint+0x5e0>)
 8003234:	f7fe f83e 	bl	80012b4 <glcd_puts>
		glcd_puts(str+12, 102, 3);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	330c      	adds	r3, #12
 800323c:	2203      	movs	r2, #3
 800323e:	2166      	movs	r1, #102	@ 0x66
 8003240:	4618      	mov	r0, r3
 8003242:	f7fe f837 	bl	80012b4 <glcd_puts>
		glcd_clearline(4);
 8003246:	2004      	movs	r0, #4
 8003248:	f7fe fa70 	bl	800172c <glcd_clearline>
}
 800324c:	e079      	b.n	8003342 <LCDPrint+0x5c6>
	else if (str[0] == 'a') {
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b61      	cmp	r3, #97	@ 0x61
 8003254:	d14b      	bne.n	80032ee <LCDPrint+0x572>
      glcd_clear_all();
 8003256:	f7fe fab5 	bl	80017c4 <glcd_clear_all>
	  glcd_puts(str+2, 2, 3);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3302      	adds	r3, #2
 800325e:	2203      	movs	r2, #3
 8003260:	2102      	movs	r1, #2
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe f826 	bl	80012b4 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 8003268:	2203      	movs	r2, #3
 800326a:	213a      	movs	r1, #58	@ 0x3a
 800326c:	4844      	ldr	r0, [pc, #272]	@ (8003380 <LCDPrint+0x604>)
 800326e:	f7fe f821 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+9, 75, 3);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3309      	adds	r3, #9
 8003276:	2203      	movs	r2, #3
 8003278:	214b      	movs	r1, #75	@ 0x4b
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe f81a 	bl	80012b4 <glcd_puts>
	  glcd_puts(".", 98, 3);
 8003280:	2203      	movs	r2, #3
 8003282:	2162      	movs	r1, #98	@ 0x62
 8003284:	4835      	ldr	r0, [pc, #212]	@ (800335c <LCDPrint+0x5e0>)
 8003286:	f7fe f815 	bl	80012b4 <glcd_puts>
	  glcd_puts(str+13, 102, 3);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	330d      	adds	r3, #13
 800328e:	2203      	movs	r2, #3
 8003290:	2166      	movs	r1, #102	@ 0x66
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe f80e 	bl	80012b4 <glcd_puts>
	  glcd_clearline(4);
 8003298:	2004      	movs	r0, #4
 800329a:	f7fe fa47 	bl	800172c <glcd_clearline>
	  int cursor = str[1] - '0';
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3301      	adds	r3, #1
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	3b30      	subs	r3, #48	@ 0x30
 80032a6:	66bb      	str	r3, [r7, #104]	@ 0x68
	  if (cursor == 7) {
 80032a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032aa:	2b07      	cmp	r3, #7
 80032ac:	d105      	bne.n	80032ba <LCDPrint+0x53e>
		glcd_puts("___", 75, 4);
 80032ae:	2204      	movs	r2, #4
 80032b0:	214b      	movs	r1, #75	@ 0x4b
 80032b2:	4836      	ldr	r0, [pc, #216]	@ (800338c <LCDPrint+0x610>)
 80032b4:	f7fd fffe 	bl	80012b4 <glcd_puts>
 80032b8:	e007      	b.n	80032ca <LCDPrint+0x54e>
	  else if (cursor == 8) {
 80032ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d104      	bne.n	80032ca <LCDPrint+0x54e>
		glcd_puts("___", 102, 4);
 80032c0:	2204      	movs	r2, #4
 80032c2:	2166      	movs	r1, #102	@ 0x66
 80032c4:	4831      	ldr	r0, [pc, #196]	@ (800338c <LCDPrint+0x610>)
 80032c6:	f7fd fff5 	bl	80012b4 <glcd_puts>
	  if (cursor >= 0 && cursor <= 6) {
 80032ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	db38      	blt.n	8003342 <LCDPrint+0x5c6>
 80032d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	dc35      	bgt.n	8003342 <LCDPrint+0x5c6>
		glcd_puts("_", 2+(cursor*8), 4);
 80032d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	3302      	adds	r3, #2
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2204      	movs	r2, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	482a      	ldr	r0, [pc, #168]	@ (8003390 <LCDPrint+0x614>)
 80032e8:	f7fd ffe4 	bl	80012b4 <glcd_puts>
}
 80032ec:	e029      	b.n	8003342 <LCDPrint+0x5c6>
	else if (str[0] == 'd') {
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b64      	cmp	r3, #100	@ 0x64
 80032f4:	d125      	bne.n	8003342 <LCDPrint+0x5c6>
	  glcd_clear_all();
 80032f6:	f7fe fa65 	bl	80017c4 <glcd_clear_all>
	  glcd_puts(str+2, 2, 3);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3302      	adds	r3, #2
 80032fe:	2203      	movs	r2, #3
 8003300:	2102      	movs	r1, #2
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd ffd6 	bl	80012b4 <glcd_puts>
	  glcd_puts("   ", 58, 3);
 8003308:	2203      	movs	r2, #3
 800330a:	213a      	movs	r1, #58	@ 0x3a
 800330c:	481c      	ldr	r0, [pc, #112]	@ (8003380 <LCDPrint+0x604>)
 800330e:	f7fd ffd1 	bl	80012b4 <glcd_puts>
	  glcd_puts("Delete ", 66, 3);
 8003312:	2203      	movs	r2, #3
 8003314:	2142      	movs	r1, #66	@ 0x42
 8003316:	481f      	ldr	r0, [pc, #124]	@ (8003394 <LCDPrint+0x618>)
 8003318:	f7fd ffcc 	bl	80012b4 <glcd_puts>
	  int yn = str[1] - '0';
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3301      	adds	r3, #1
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	3b30      	subs	r3, #48	@ 0x30
 8003324:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  if (yn == 1) {
 8003326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <LCDPrint+0x5bc>
		glcd_puts("Y", 118, 3);
 800332c:	2203      	movs	r2, #3
 800332e:	2176      	movs	r1, #118	@ 0x76
 8003330:	4819      	ldr	r0, [pc, #100]	@ (8003398 <LCDPrint+0x61c>)
 8003332:	f7fd ffbf 	bl	80012b4 <glcd_puts>
}
 8003336:	e004      	b.n	8003342 <LCDPrint+0x5c6>
		glcd_puts("N", 118, 3);
 8003338:	2203      	movs	r2, #3
 800333a:	2176      	movs	r1, #118	@ 0x76
 800333c:	4817      	ldr	r0, [pc, #92]	@ (800339c <LCDPrint+0x620>)
 800333e:	f7fd ffb9 	bl	80012b4 <glcd_puts>
}
 8003342:	bf00      	nop
 8003344:	3770      	adds	r7, #112	@ 0x70
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000698 	.word	0x20000698
 8003350:	0800d5fc 	.word	0x0800d5fc
 8003354:	20000004 	.word	0x20000004
 8003358:	0800d604 	.word	0x0800d604
 800335c:	0800d608 	.word	0x0800d608
 8003360:	0800d60c 	.word	0x0800d60c
 8003364:	0800d610 	.word	0x0800d610
 8003368:	200006a4 	.word	0x200006a4
 800336c:	0800d614 	.word	0x0800d614
 8003370:	200006fc 	.word	0x200006fc
 8003374:	0800d618 	.word	0x0800d618
 8003378:	0800d620 	.word	0x0800d620
 800337c:	0800d628 	.word	0x0800d628
 8003380:	0800d630 	.word	0x0800d630
 8003384:	0800d634 	.word	0x0800d634
 8003388:	0800d63c 	.word	0x0800d63c
 800338c:	0800d644 	.word	0x0800d644
 8003390:	0800d648 	.word	0x0800d648
 8003394:	0800d64c 	.word	0x0800d64c
 8003398:	0800d654 	.word	0x0800d654
 800339c:	0800d658 	.word	0x0800d658

080033a0 <Sender>:

void Sender(const char * str, int mode) { //TODO
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b092      	sub	sp, #72	@ 0x48
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
    char crlf[] = {'\r','\n', 0};
 80033aa:	4a69      	ldr	r2, [pc, #420]	@ (8003550 <Sender+0x1b0>)
 80033ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	4611      	mov	r1, r2
 80033b4:	8019      	strh	r1, [r3, #0]
 80033b6:	3302      	adds	r3, #2
 80033b8:	0c12      	lsrs	r2, r2, #16
 80033ba:	701a      	strb	r2, [r3, #0]
    uint8_t str2[25]; // Array to hold the constructed string in ASCII

    memset(str2, 0, sizeof(str2)); // Initialize the array with zeros
 80033bc:	f107 031c 	add.w	r3, r7, #28
 80033c0:	2219      	movs	r2, #25
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f007 ff7b 	bl	800b2c0 <memset>

    if (mode == 0) {
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d12d      	bne.n	800342c <Sender+0x8c>
        char m = str[0];
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        char k = str[1];
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3301      	adds	r3, #1
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        snprintf((char*)str2, sizeof(str2), "$PMRRV27%c%cN", m, k);
 80033e2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80033e6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80033ea:	f107 001c 	add.w	r0, r7, #28
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	4a58      	ldr	r2, [pc, #352]	@ (8003554 <Sender+0x1b4>)
 80033f4:	2119      	movs	r1, #25
 80033f6:	f007 fe4d 	bl	800b094 <sniprintf>
        char end2[3];
        checksum((char*)str2, end2);
 80033fa:	f107 0218 	add.w	r2, r7, #24
 80033fe:	f107 031c 	add.w	r3, r7, #28
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fc57 	bl	8002cb8 <checksum>
        concatTwoChars((char*)str2, end2);
 800340a:	f107 0218 	add.w	r2, r7, #24
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fc8d 	bl	8002d34 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 800341a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800341e:	f107 031c 	add.w	r3, r7, #28
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fc85 	bl	8002d34 <concatTwoChars>
 800342a:	e07b      	b.n	8003524 <Sender+0x184>
    } else if (mode == 1) {
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d12d      	bne.n	800348e <Sender+0xee>
        char m = str[0];
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        char k = str[1];
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3301      	adds	r3, #1
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        snprintf((char*)str2, sizeof(str2), "$PMRRV28%c%cN", m, k);
 8003444:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8003448:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800344c:	f107 001c 	add.w	r0, r7, #28
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	4a40      	ldr	r2, [pc, #256]	@ (8003558 <Sender+0x1b8>)
 8003456:	2119      	movs	r1, #25
 8003458:	f007 fe1c 	bl	800b094 <sniprintf>
        char end3[3];
        checksum((char*)str2, end3);
 800345c:	f107 0214 	add.w	r2, r7, #20
 8003460:	f107 031c 	add.w	r3, r7, #28
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fc26 	bl	8002cb8 <checksum>
        concatTwoChars((char*)str2, end3);
 800346c:	f107 0214 	add.w	r2, r7, #20
 8003470:	f107 031c 	add.w	r3, r7, #28
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fc5c 	bl	8002d34 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 800347c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003480:	f107 031c 	add.w	r3, r7, #28
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fc54 	bl	8002d34 <concatTwoChars>
 800348c:	e04a      	b.n	8003524 <Sender+0x184>
    } else if (mode == 2) {
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d124      	bne.n	80034de <Sender+0x13e>
        char v = str[0];
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        snprintf((char*)str2, sizeof(str2), "$PMRRV73%c", v);
 800349c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80034a0:	f107 001c 	add.w	r0, r7, #28
 80034a4:	4a2d      	ldr	r2, [pc, #180]	@ (800355c <Sender+0x1bc>)
 80034a6:	2119      	movs	r1, #25
 80034a8:	f007 fdf4 	bl	800b094 <sniprintf>
        char end4[3];
        checksum((char*)str2, end4);
 80034ac:	f107 0210 	add.w	r2, r7, #16
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fbfe 	bl	8002cb8 <checksum>
        concatTwoChars((char*)str2, end4);
 80034bc:	f107 0210 	add.w	r2, r7, #16
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fc34 	bl	8002d34 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 80034cc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80034d0:	f107 031c 	add.w	r3, r7, #28
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fc2c 	bl	8002d34 <concatTwoChars>
 80034dc:	e022      	b.n	8003524 <Sender+0x184>
    } else if (mode == 3) {
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d11f      	bne.n	8003524 <Sender+0x184>
        snprintf((char*)str2, sizeof(str2), "$PMRRV34%03d", obs);
 80034e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003560 <Sender+0x1c0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f107 001c 	add.w	r0, r7, #28
 80034ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <Sender+0x1c4>)
 80034ee:	2119      	movs	r1, #25
 80034f0:	f007 fdd0 	bl	800b094 <sniprintf>
        char end5[3];
        checksum((char*)str2, end5);
 80034f4:	f107 020c 	add.w	r2, r7, #12
 80034f8:	f107 031c 	add.w	r3, r7, #28
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fbda 	bl	8002cb8 <checksum>
        concatTwoChars((char*)str2, end5);
 8003504:	f107 020c 	add.w	r2, r7, #12
 8003508:	f107 031c 	add.w	r3, r7, #28
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fc10 	bl	8002d34 <concatTwoChars>
        concatTwoChars((char*)str2, crlf);
 8003514:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003518:	f107 031c 	add.w	r3, r7, #28
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fc08 	bl	8002d34 <concatTwoChars>
    }

    HAL_UART_Transmit(&huart4, str2, strlen((char*)str2), 500);
 8003524:	f107 031c 	add.w	r3, r7, #28
 8003528:	4618      	mov	r0, r3
 800352a:	f7fc fe81 	bl	8000230 <strlen>
 800352e:	4603      	mov	r3, r0
 8003530:	b29a      	uxth	r2, r3
 8003532:	f107 011c 	add.w	r1, r7, #28
 8003536:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800353a:	480b      	ldr	r0, [pc, #44]	@ (8003568 <Sender+0x1c8>)
 800353c:	f005 f9ae 	bl	800889c <HAL_UART_Transmit>
    HAL_Delay(100);
 8003540:	2064      	movs	r0, #100	@ 0x64
 8003542:	f003 f8dd 	bl	8006700 <HAL_Delay>
}
 8003546:	bf00      	nop
 8003548:	3740      	adds	r7, #64	@ 0x40
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	0800d698 	.word	0x0800d698
 8003554:	0800d65c 	.word	0x0800d65c
 8003558:	0800d66c 	.word	0x0800d66c
 800355c:	0800d67c 	.word	0x0800d67c
 8003560:	200006fc 	.word	0x200006fc
 8003564:	0800d688 	.word	0x0800d688
 8003568:	2000050c 	.word	0x2000050c
 800356c:	00000000 	.word	0x00000000

08003570 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b0e0      	sub	sp, #384	@ 0x180
 8003574:	af04      	add	r7, sp, #16
 8003576:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800357a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800357e:	6018      	str	r0, [r3, #0]
	char toPrint[20];
	  /* Infinite loop */
	  for(;;)
	  {

	  if (rxfree) {
 8003580:	4bbb      	ldr	r3, [pc, #748]	@ (8003870 <StartDefaultTask+0x300>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8082 	beq.w	800368e <StartDefaultTask+0x11e>
			if (rxmsg[6] == '2' && rxmsg[7] == '8')
 800358a:	4bba      	ldr	r3, [pc, #744]	@ (8003874 <StartDefaultTask+0x304>)
 800358c:	799b      	ldrb	r3, [r3, #6]
 800358e:	2b32      	cmp	r3, #50	@ 0x32
 8003590:	d17a      	bne.n	8003688 <StartDefaultTask+0x118>
 8003592:	4bb8      	ldr	r3, [pc, #736]	@ (8003874 <StartDefaultTask+0x304>)
 8003594:	79db      	ldrb	r3, [r3, #7]
 8003596:	2b38      	cmp	r3, #56	@ 0x38
 8003598:	d176      	bne.n	8003688 <StartDefaultTask+0x118>
			{ // comm transceiver status
				float commfreq;
				commfreq = (rxmsg[8] + 48) + ((rxmsg[9] - 48) * .025);
 800359a:	4bb6      	ldr	r3, [pc, #728]	@ (8003874 <StartDefaultTask+0x304>)
 800359c:	7a1b      	ldrb	r3, [r3, #8]
 800359e:	3330      	adds	r3, #48	@ 0x30
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ff9f 	bl	80004e4 <__aeabi_i2d>
 80035a6:	4604      	mov	r4, r0
 80035a8:	460d      	mov	r5, r1
 80035aa:	4bb2      	ldr	r3, [pc, #712]	@ (8003874 <StartDefaultTask+0x304>)
 80035ac:	7a5b      	ldrb	r3, [r3, #9]
 80035ae:	3b30      	subs	r3, #48	@ 0x30
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc ff97 	bl	80004e4 <__aeabi_i2d>
 80035b6:	a3aa      	add	r3, pc, #680	@ (adr r3, 8003860 <StartDefaultTask+0x2f0>)
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f7fc fffc 	bl	80005b8 <__aeabi_dmul>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4620      	mov	r0, r4
 80035c6:	4629      	mov	r1, r5
 80035c8:	f7fc fe40 	bl	800024c <__adddf3>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	f7fd fac8 	bl	8000b68 <__aeabi_d2f>
 80035d8:	4603      	mov	r3, r0
 80035da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
				if (commfreq != freq) {
 80035de:	4ba6      	ldr	r3, [pc, #664]	@ (8003878 <StartDefaultTask+0x308>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4619      	mov	r1, r3
 80035e4:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80035e8:	f7fd fb52 	bl	8000c90 <__aeabi_fcmpeq>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d140      	bne.n	8003674 <StartDefaultTask+0x104>
					faultcounter1 += 1;
 80035f2:	4ba2      	ldr	r3, [pc, #648]	@ (800387c <StartDefaultTask+0x30c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3301      	adds	r3, #1
 80035f8:	4aa0      	ldr	r2, [pc, #640]	@ (800387c <StartDefaultTask+0x30c>)
 80035fa:	6013      	str	r3, [r2, #0]
				    int MA = MHz - 48;
 80035fc:	4ba0      	ldr	r3, [pc, #640]	@ (8003880 <StartDefaultTask+0x310>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3b30      	subs	r3, #48	@ 0x30
 8003602:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
				    int KA = (KHz/25) + 48;
 8003606:	4b9f      	ldr	r3, [pc, #636]	@ (8003884 <StartDefaultTask+0x314>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a9f      	ldr	r2, [pc, #636]	@ (8003888 <StartDefaultTask+0x318>)
 800360c:	fb82 1203 	smull	r1, r2, r2, r3
 8003610:	10d2      	asrs	r2, r2, #3
 8003612:	17db      	asrs	r3, r3, #31
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	3330      	adds	r3, #48	@ 0x30
 8003618:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
				    char m = (char)MA;
 800361c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				    char k = (char)KA;
 8003624:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003628:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
				    char Mfinal[3] = {m,k,0};
 800362c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003630:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003634:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800363e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003642:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 8003646:	705a      	strb	r2, [r3, #1]
 8003648:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800364c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003650:	2200      	movs	r2, #0
 8003652:	709a      	strb	r2, [r3, #2]
				    Sender(Mfinal, 0); //set active
 8003654:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fea0 	bl	80033a0 <Sender>
					if (faultcounter1 > 2) {
 8003660:	4b86      	ldr	r3, [pc, #536]	@ (800387c <StartDefaultTask+0x30c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	dd0f      	ble.n	8003688 <StartDefaultTask+0x118>
						glcd_puts("Error 1", 0, 7);
 8003668:	2207      	movs	r2, #7
 800366a:	2100      	movs	r1, #0
 800366c:	4887      	ldr	r0, [pc, #540]	@ (800388c <StartDefaultTask+0x31c>)
 800366e:	f7fd fe21 	bl	80012b4 <glcd_puts>
 8003672:	e009      	b.n	8003688 <StartDefaultTask+0x118>
					}
				}
				else {
					if (faultcounter1 > 2)
 8003674:	4b81      	ldr	r3, [pc, #516]	@ (800387c <StartDefaultTask+0x30c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b02      	cmp	r3, #2
 800367a:	dd02      	ble.n	8003682 <StartDefaultTask+0x112>
					{
						glcd_clearline(7);
 800367c:	2007      	movs	r0, #7
 800367e:	f7fe f855 	bl	800172c <glcd_clearline>
					}
					faultcounter1 = 0;
 8003682:	4b7e      	ldr	r3, [pc, #504]	@ (800387c <StartDefaultTask+0x30c>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
				}
			}
			rxfree = false;
 8003688:	4b79      	ldr	r3, [pc, #484]	@ (8003870 <StartDefaultTask+0x300>)
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
		static unsigned long last = 0;
	    static float freq_last = 108.000;
		static float sfreq_last = 108.000;
		static int vol_last = 0;
		static int obs_last = 0;
		freq = MHz + (.001 * KHz);
 800368e:	4b7c      	ldr	r3, [pc, #496]	@ (8003880 <StartDefaultTask+0x310>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fc ff26 	bl	80004e4 <__aeabi_i2d>
 8003698:	4604      	mov	r4, r0
 800369a:	460d      	mov	r5, r1
 800369c:	4b79      	ldr	r3, [pc, #484]	@ (8003884 <StartDefaultTask+0x314>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fc ff1f 	bl	80004e4 <__aeabi_i2d>
 80036a6:	a370      	add	r3, pc, #448	@ (adr r3, 8003868 <StartDefaultTask+0x2f8>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f7fc ff84 	bl	80005b8 <__aeabi_dmul>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4620      	mov	r0, r4
 80036b6:	4629      	mov	r1, r5
 80036b8:	f7fc fdc8 	bl	800024c <__adddf3>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4610      	mov	r0, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	f7fd fa50 	bl	8000b68 <__aeabi_d2f>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4a6b      	ldr	r2, [pc, #428]	@ (8003878 <StartDefaultTask+0x308>)
 80036cc:	6013      	str	r3, [r2, #0]
		Standby = SM + (.001 * SK);
 80036ce:	4b70      	ldr	r3, [pc, #448]	@ (8003890 <StartDefaultTask+0x320>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc ff06 	bl	80004e4 <__aeabi_i2d>
 80036d8:	4604      	mov	r4, r0
 80036da:	460d      	mov	r5, r1
 80036dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003894 <StartDefaultTask+0x324>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fc feff 	bl	80004e4 <__aeabi_i2d>
 80036e6:	a360      	add	r3, pc, #384	@ (adr r3, 8003868 <StartDefaultTask+0x2f8>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc ff64 	bl	80005b8 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4620      	mov	r0, r4
 80036f6:	4629      	mov	r1, r5
 80036f8:	f7fc fda8 	bl	800024c <__adddf3>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	f7fd fa30 	bl	8000b68 <__aeabi_d2f>
 8003708:	4603      	mov	r3, r0
 800370a:	4a63      	ldr	r2, [pc, #396]	@ (8003898 <StartDefaultTask+0x328>)
 800370c:	6013      	str	r3, [r2, #0]
		if (millis() - last > 2000 && temp) { // if time between action > 2 send freq in NOTE: will need to add a check later as some actions cant be exited.
 800370e:	f7fe fb1b 	bl	8001d48 <millis>
 8003712:	4602      	mov	r2, r0
 8003714:	4b61      	ldr	r3, [pc, #388]	@ (800389c <StartDefaultTask+0x32c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800371e:	d92b      	bls.n	8003778 <StartDefaultTask+0x208>
 8003720:	4b5f      	ldr	r3, [pc, #380]	@ (80038a0 <StartDefaultTask+0x330>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d027      	beq.n	8003778 <StartDefaultTask+0x208>
	//	  Serial2.print("f");
	//	  printFloat2(freq,3);
	//	  printFloat2(Standby,3);
	//	  Serial2.println("");
		  sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8003728:	4b53      	ldr	r3, [pc, #332]	@ (8003878 <StartDefaultTask+0x308>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fc feeb 	bl	8000508 <__aeabi_f2d>
 8003732:	4604      	mov	r4, r0
 8003734:	460d      	mov	r5, r1
 8003736:	4b58      	ldr	r3, [pc, #352]	@ (8003898 <StartDefaultTask+0x328>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fee4 	bl	8000508 <__aeabi_f2d>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003748:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800374c:	e9cd 4500 	strd	r4, r5, [sp]
 8003750:	2266      	movs	r2, #102	@ 0x66
 8003752:	4954      	ldr	r1, [pc, #336]	@ (80038a4 <StartDefaultTask+0x334>)
 8003754:	f007 fcd2 	bl	800b0fc <siprintf>
		  LCDPrint(toPrint);
 8003758:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fb0d 	bl	8002d7c <LCDPrint>

		  freq_last = freq;
 8003762:	4b45      	ldr	r3, [pc, #276]	@ (8003878 <StartDefaultTask+0x308>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a50      	ldr	r2, [pc, #320]	@ (80038a8 <StartDefaultTask+0x338>)
 8003768:	6013      	str	r3, [r2, #0]
		  sfreq_last = Standby;
 800376a:	4b4b      	ldr	r3, [pc, #300]	@ (8003898 <StartDefaultTask+0x328>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a4f      	ldr	r2, [pc, #316]	@ (80038ac <StartDefaultTask+0x33c>)
 8003770:	6013      	str	r3, [r2, #0]
		  temp = false;
 8003772:	4b4b      	ldr	r3, [pc, #300]	@ (80038a0 <StartDefaultTask+0x330>)
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
		}

		bool both = false;
 8003778:	2300      	movs	r3, #0
 800377a:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
		// Current time
		unsigned long currentTime = millis();
 800377e:	f7fe fae3 	bl	8001d48 <millis>
 8003782:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

		// Read the button states
		bool currentA = HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0;
 8003786:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800378a:	4849      	ldr	r0, [pc, #292]	@ (80038b0 <StartDefaultTask+0x340>)
 800378c:	f003 fb92 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		bool currentB = HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0;
 800379e:	2101      	movs	r1, #1
 80037a0:	4844      	ldr	r0, [pc, #272]	@ (80038b4 <StartDefaultTask+0x344>)
 80037a2:	f003 fb87 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

		while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 80037b4:	e01a      	b.n	80037ec <StartDefaultTask+0x27c>
		  if (currentA) {
 80037b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <StartDefaultTask+0x264>
			if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 80037be:	2101      	movs	r1, #1
 80037c0:	483c      	ldr	r0, [pc, #240]	@ (80038b4 <StartDefaultTask+0x344>)
 80037c2:	f003 fb77 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10f      	bne.n	80037ec <StartDefaultTask+0x27c>
			  both = true;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
			  break;
 80037d2:	e01b      	b.n	800380c <StartDefaultTask+0x29c>
			}
		  }
		  else {
			if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0) {
 80037d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037d8:	4835      	ldr	r0, [pc, #212]	@ (80038b0 <StartDefaultTask+0x340>)
 80037da:	f003 fb6b 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <StartDefaultTask+0x27c>
			  both = true;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
			  break;
 80037ea:	e00f      	b.n	800380c <StartDefaultTask+0x29c>
		while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 80037ec:	f7fe faac 	bl	8001d48 <millis>
 80037f0:	4602      	mov	r2, r0
 80037f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b63      	cmp	r3, #99	@ 0x63
 80037fa:	d807      	bhi.n	800380c <StartDefaultTask+0x29c>
 80037fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1d8      	bne.n	80037b6 <StartDefaultTask+0x246>
 8003804:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1d4      	bne.n	80037b6 <StartDefaultTask+0x246>
			}
		  }
		}
		// Check if both buttons were pressed within the 50 ms window
		if (both) {
 800380c:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 8003810:	2b00      	cmp	r3, #0
 8003812:	f001 81eb 	beq.w	8004bec <StartDefaultTask+0x167c>
		  if (on) { // Enter edit mode TODO
 8003816:	4b28      	ldr	r3, [pc, #160]	@ (80038b8 <StartDefaultTask+0x348>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f001 8460 	beq.w	80050e0 <StartDefaultTask+0x1b70>
			toDisplay();
 8003820:	f7fe f8ba 	bl	8001998 <toDisplay>
			edit = true;
 8003824:	4b25      	ldr	r3, [pc, #148]	@ (80038bc <StartDefaultTask+0x34c>)
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
			pause = true;
 800382a:	4b25      	ldr	r3, [pc, #148]	@ (80038c0 <StartDefaultTask+0x350>)
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(500);
 8003830:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003834:	f002 ff64 	bl	8006700 <HAL_Delay>
			bool both = false;
 8003838:	2300      	movs	r3, #0
 800383a:	f887 316e 	strb.w	r3, [r7, #366]	@ 0x16e

			char str[8];
			if (dispCount == count) {
 800383e:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <StartDefaultTask+0x354>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b21      	ldr	r3, [pc, #132]	@ (80038c8 <StartDefaultTask+0x358>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d106      	bne.n	8003858 <StartDefaultTask+0x2e8>
			  str[0] = ':'; //EMPTY
 800384a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800384e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003852:	223a      	movs	r2, #58	@ 0x3a
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	e061      	b.n	800391c <StartDefaultTask+0x3ac>
			}
			else {
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003858:	2300      	movs	r3, #0
 800385a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800385e:	e053      	b.n	8003908 <StartDefaultTask+0x398>
 8003860:	9999999a 	.word	0x9999999a
 8003864:	3f999999 	.word	0x3f999999
 8003868:	d2f1a9fc 	.word	0xd2f1a9fc
 800386c:	3f50624d 	.word	0x3f50624d
 8003870:	20000740 	.word	0x20000740
 8003874:	20000718 	.word	0x20000718
 8003878:	20000698 	.word	0x20000698
 800387c:	2000073c 	.word	0x2000073c
 8003880:	20000000 	.word	0x20000000
 8003884:	2000069c 	.word	0x2000069c
 8003888:	51eb851f 	.word	0x51eb851f
 800388c:	0800d69c 	.word	0x0800d69c
 8003890:	20000008 	.word	0x20000008
 8003894:	200006a0 	.word	0x200006a0
 8003898:	20000004 	.word	0x20000004
 800389c:	20000754 	.word	0x20000754
 80038a0:	20000708 	.word	0x20000708
 80038a4:	0800d6a4 	.word	0x0800d6a4
 80038a8:	20000018 	.word	0x20000018
 80038ac:	2000001c 	.word	0x2000001c
 80038b0:	40011800 	.word	0x40011800
 80038b4:	40011000 	.word	0x40011000
 80038b8:	200006a9 	.word	0x200006a9
 80038bc:	200006a8 	.word	0x200006a8
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	200006ec 	.word	0x200006ec
 80038c8:	200006f0 	.word	0x200006f0
	//			str[i] = EEPROM.read(eepDisplay[dispCount] + i);
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 80038cc:	4bb0      	ldr	r3, [pc, #704]	@ (8003b90 <StartDefaultTask+0x620>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4ab0      	ldr	r2, [pc, #704]	@ (8003b94 <StartDefaultTask+0x624>)
 80038d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d6:	4619      	mov	r1, r3
 80038d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2301      	movs	r3, #1
 80038e0:	4aad      	ldr	r2, [pc, #692]	@ (8003b98 <StartDefaultTask+0x628>)
 80038e2:	48ae      	ldr	r0, [pc, #696]	@ (8003b9c <StartDefaultTask+0x62c>)
 80038e4:	f002 fae4 	bl	8005eb0 <SPIF_ReadSector>
				str[i] = read[0];
 80038e8:	4bab      	ldr	r3, [pc, #684]	@ (8003b98 <StartDefaultTask+0x628>)
 80038ea:	7819      	ldrb	r1, [r3, #0]
 80038ec:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80038f0:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80038f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80038f8:	4413      	add	r3, r2
 80038fa:	460a      	mov	r2, r1
 80038fc:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80038fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003902:	3301      	adds	r3, #1
 8003904:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8003908:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800390c:	2b06      	cmp	r3, #6
 800390e:	dddd      	ble.n	80038cc <StartDefaultTask+0x35c>
			  }
			  str[7] = 0;
 8003910:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003914:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003918:	2200      	movs	r2, #0
 800391a:	71da      	strb	r2, [r3, #7]
			}
	//		float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
			SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 800391c:	4b9c      	ldr	r3, [pc, #624]	@ (8003b90 <StartDefaultTask+0x620>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a9c      	ldr	r2, [pc, #624]	@ (8003b94 <StartDefaultTask+0x624>)
 8003922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003926:	4619      	mov	r1, r3
 8003928:	2307      	movs	r3, #7
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2301      	movs	r3, #1
 800392e:	4a9a      	ldr	r2, [pc, #616]	@ (8003b98 <StartDefaultTask+0x628>)
 8003930:	489a      	ldr	r0, [pc, #616]	@ (8003b9c <StartDefaultTask+0x62c>)
 8003932:	f002 fabd 	bl	8005eb0 <SPIF_ReadSector>
			int val1 = read[0];
 8003936:	4b98      	ldr	r3, [pc, #608]	@ (8003b98 <StartDefaultTask+0x628>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
			SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 800393e:	4b94      	ldr	r3, [pc, #592]	@ (8003b90 <StartDefaultTask+0x620>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a94      	ldr	r2, [pc, #592]	@ (8003b94 <StartDefaultTask+0x624>)
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	4619      	mov	r1, r3
 800394a:	2308      	movs	r3, #8
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	2301      	movs	r3, #1
 8003950:	4a91      	ldr	r2, [pc, #580]	@ (8003b98 <StartDefaultTask+0x628>)
 8003952:	4892      	ldr	r0, [pc, #584]	@ (8003b9c <StartDefaultTask+0x62c>)
 8003954:	f002 faac 	bl	8005eb0 <SPIF_ReadSector>
			int val2 = read[0];
 8003958:	4b8f      	ldr	r3, [pc, #572]	@ (8003b98 <StartDefaultTask+0x628>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			float store = val1 + (.025 * val2);
 8003960:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8003964:	f7fc fdbe 	bl	80004e4 <__aeabi_i2d>
 8003968:	4604      	mov	r4, r0
 800396a:	460d      	mov	r5, r1
 800396c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8003970:	f7fc fdb8 	bl	80004e4 <__aeabi_i2d>
 8003974:	a384      	add	r3, pc, #528	@ (adr r3, 8003b88 <StartDefaultTask+0x618>)
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f7fc fe1d 	bl	80005b8 <__aeabi_dmul>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4620      	mov	r0, r4
 8003984:	4629      	mov	r1, r5
 8003986:	f7fc fc61 	bl	800024c <__adddf3>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	f7fd f8e9 	bl	8000b68 <__aeabi_d2f>
 8003996:	4603      	mov	r3, r0
 8003998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

	//		Serial2.print("e");
	//		Serial2.print(str);
	//		printFloat2(store,3);
	//		Serial2.println("");
			sprintf(toPrint, "%c%s%0.3f", 'e', str, store);
 800399c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80039a0:	f7fc fdb2 	bl	8000508 <__aeabi_f2d>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80039ac:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80039b0:	e9cd 2300 	strd	r2, r3, [sp]
 80039b4:	460b      	mov	r3, r1
 80039b6:	2265      	movs	r2, #101	@ 0x65
 80039b8:	4979      	ldr	r1, [pc, #484]	@ (8003ba0 <StartDefaultTask+0x630>)
 80039ba:	f007 fb9f 	bl	800b0fc <siprintf>
			LCDPrint(toPrint);
 80039be:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff f9da 	bl	8002d7c <LCDPrint>

			while (true) {
			  // Current time
			  unsigned long currentTime = millis();
 80039c8:	f7fe f9be 	bl	8001d48 <millis>
 80039cc:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
			  static int lastDC = 0;
			  // Read the button states
			  bool currentA = HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0;
 80039d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039d4:	4873      	ldr	r0, [pc, #460]	@ (8003ba4 <StartDefaultTask+0x634>)
 80039d6:	f003 fa6d 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
			  bool currentB = HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0;
 80039e8:	2101      	movs	r1, #1
 80039ea:	486f      	ldr	r0, [pc, #444]	@ (8003ba8 <StartDefaultTask+0x638>)
 80039ec:	f003 fa62 	bl	8006eb4 <HAL_GPIO_ReadPin>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

			  while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 80039fe:	e01a      	b.n	8003a36 <StartDefaultTask+0x4c6>
				if (currentA) {
 8003a00:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <StartDefaultTask+0x4ae>
				  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4867      	ldr	r0, [pc, #412]	@ (8003ba8 <StartDefaultTask+0x638>)
 8003a0c:	f003 fa52 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10f      	bne.n	8003a36 <StartDefaultTask+0x4c6>
					both = true;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 316e 	strb.w	r3, [r7, #366]	@ 0x16e
					break;
 8003a1c:	e01b      	b.n	8003a56 <StartDefaultTask+0x4e6>
				  }
				}
				else {
				  if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0) {
 8003a1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a22:	4860      	ldr	r0, [pc, #384]	@ (8003ba4 <StartDefaultTask+0x634>)
 8003a24:	f003 fa46 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <StartDefaultTask+0x4c6>
					both = true;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 316e 	strb.w	r3, [r7, #366]	@ 0x16e
					break;
 8003a34:	e00f      	b.n	8003a56 <StartDefaultTask+0x4e6>
			  while ((millis() - currentTime) < 100 && (currentA || currentB)) {
 8003a36:	f7fe f987 	bl	8001d48 <millis>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b63      	cmp	r3, #99	@ 0x63
 8003a44:	d807      	bhi.n	8003a56 <StartDefaultTask+0x4e6>
 8003a46:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1d8      	bne.n	8003a00 <StartDefaultTask+0x490>
 8003a4e:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1d4      	bne.n	8003a00 <StartDefaultTask+0x490>
				  }
				}
			  }

			  if (both) {
 8003a56:	f897 316e 	ldrb.w	r3, [r7, #366]	@ 0x16e
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f041 806a 	bne.w	8004b34 <StartDefaultTask+0x15c4>
				break;
			  }
			  else if (currentB) { //select to edit
 8003a60:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 868e 	beq.w	8004786 <StartDefaultTask+0x1216>
				cursor = 0;
 8003a6a:	4b50      	ldr	r3, [pc, #320]	@ (8003bac <StartDefaultTask+0x63c>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
				if (dispCount == count && count != 16) { // EMPTY add new one
 8003a70:	4b47      	ldr	r3, [pc, #284]	@ (8003b90 <StartDefaultTask+0x620>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb0 <StartDefaultTask+0x640>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	f040 82e2 	bne.w	8004042 <StartDefaultTask+0xad2>
 8003a7e:	4b4c      	ldr	r3, [pc, #304]	@ (8003bb0 <StartDefaultTask+0x640>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	f000 82dd 	beq.w	8004042 <StartDefaultTask+0xad2>
				  add = true;
 8003a88:	4b4a      	ldr	r3, [pc, #296]	@ (8003bb4 <StartDefaultTask+0x644>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
				  int dM = 108;
 8003a8e:	236c      	movs	r3, #108	@ 0x6c
 8003a90:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
				  int dK = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
				  char dN[8] = {' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,0};
 8003a9a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003a9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003aa2:	4a45      	ldr	r2, [pc, #276]	@ (8003bb8 <StartDefaultTask+0x648>)
 8003aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003aa8:	e883 0003 	stmia.w	r3, {r0, r1}
				  HAL_Delay(100);
 8003aac:	2064      	movs	r0, #100	@ 0x64
 8003aae:	f002 fe27 	bl	8006700 <HAL_Delay>

				  if (cursor < 7) { // moved to a char
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bac <StartDefaultTask+0x63c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	dc2b      	bgt.n	8003b12 <StartDefaultTask+0x5a2>
					if (dN[cursor] == ' ') {
 8003aba:	4b3c      	ldr	r3, [pc, #240]	@ (8003bac <StartDefaultTask+0x63c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003ac2:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003ac6:	5cd3      	ldrb	r3, [r2, r3]
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d103      	bne.n	8003ad4 <StartDefaultTask+0x564>
					  charcount = 0;
 8003acc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bbc <StartDefaultTask+0x64c>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e032      	b.n	8003b3a <StartDefaultTask+0x5ca>
					}
					else if (dN[cursor] < ':') {
 8003ad4:	4b35      	ldr	r3, [pc, #212]	@ (8003bac <StartDefaultTask+0x63c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003adc:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003ae0:	5cd3      	ldrb	r3, [r2, r3]
 8003ae2:	2b39      	cmp	r3, #57	@ 0x39
 8003ae4:	d80a      	bhi.n	8003afc <StartDefaultTask+0x58c>
					  charcount = dN[cursor] - '/';
 8003ae6:	4b31      	ldr	r3, [pc, #196]	@ (8003bac <StartDefaultTask+0x63c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003aee:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	3b2f      	subs	r3, #47	@ 0x2f
 8003af6:	4a31      	ldr	r2, [pc, #196]	@ (8003bbc <StartDefaultTask+0x64c>)
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01e      	b.n	8003b3a <StartDefaultTask+0x5ca>
					}
					else {
					  charcount = dN[cursor] - '6';
 8003afc:	4b2b      	ldr	r3, [pc, #172]	@ (8003bac <StartDefaultTask+0x63c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003b04:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003b08:	5cd3      	ldrb	r3, [r2, r3]
 8003b0a:	3b36      	subs	r3, #54	@ 0x36
 8003b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bbc <StartDefaultTask+0x64c>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	e013      	b.n	8003b3a <StartDefaultTask+0x5ca>
					}
				  }
				  else if (cursor == 7) {
 8003b12:	4b26      	ldr	r3, [pc, #152]	@ (8003bac <StartDefaultTask+0x63c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b07      	cmp	r3, #7
 8003b18:	d105      	bne.n	8003b26 <StartDefaultTask+0x5b6>
					charcount = dM - 108;
 8003b1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003b1e:	3b6c      	subs	r3, #108	@ 0x6c
 8003b20:	4a26      	ldr	r2, [pc, #152]	@ (8003bbc <StartDefaultTask+0x64c>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	e009      	b.n	8003b3a <StartDefaultTask+0x5ca>
				  }
				  else {
					charcount = dK / 50;
 8003b26:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003b2a:	4a25      	ldr	r2, [pc, #148]	@ (8003bc0 <StartDefaultTask+0x650>)
 8003b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b30:	1112      	asrs	r2, r2, #4
 8003b32:	17db      	asrs	r3, r3, #31
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	4a21      	ldr	r2, [pc, #132]	@ (8003bbc <StartDefaultTask+0x64c>)
 8003b38:	6013      	str	r3, [r2, #0]
				  }

				  if (cursor < 7) { //
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <StartDefaultTask+0x63c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	dc4d      	bgt.n	8003bde <StartDefaultTask+0x66e>
					if (charcount == 0) {
 8003b42:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <StartDefaultTask+0x64c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10c      	bne.n	8003b64 <StartDefaultTask+0x5f4>
					  dN[cursor] = (char)(charcount+32);
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bbc <StartDefaultTask+0x64c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	4b16      	ldr	r3, [pc, #88]	@ (8003bac <StartDefaultTask+0x63c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3220      	adds	r2, #32
 8003b56:	b2d1      	uxtb	r1, r2
 8003b58:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003b5c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003b60:	54d1      	strb	r1, [r2, r3]
 8003b62:	e05b      	b.n	8003c1c <StartDefaultTask+0x6ac>
					}
					else if (charcount < 11) {
 8003b64:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <StartDefaultTask+0x64c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b0a      	cmp	r3, #10
 8003b6a:	dc2b      	bgt.n	8003bc4 <StartDefaultTask+0x654>
					  dN[cursor] = (char)(charcount+47);
 8003b6c:	4b13      	ldr	r3, [pc, #76]	@ (8003bbc <StartDefaultTask+0x64c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	4b0e      	ldr	r3, [pc, #56]	@ (8003bac <StartDefaultTask+0x63c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	322f      	adds	r2, #47	@ 0x2f
 8003b78:	b2d1      	uxtb	r1, r2
 8003b7a:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003b7e:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003b82:	54d1      	strb	r1, [r2, r3]
 8003b84:	e04a      	b.n	8003c1c <StartDefaultTask+0x6ac>
 8003b86:	bf00      	nop
 8003b88:	9999999a 	.word	0x9999999a
 8003b8c:	3f999999 	.word	0x3f999999
 8003b90:	200006ec 	.word	0x200006ec
 8003b94:	200006ac 	.word	0x200006ac
 8003b98:	2000070c 	.word	0x2000070c
 8003b9c:	20000678 	.word	0x20000678
 8003ba0:	0800d6b4 	.word	0x0800d6b4
 8003ba4:	40011800 	.word	0x40011800
 8003ba8:	40011000 	.word	0x40011000
 8003bac:	200006f8 	.word	0x200006f8
 8003bb0:	200006f0 	.word	0x200006f0
 8003bb4:	200006f5 	.word	0x200006f5
 8003bb8:	0800d6fc 	.word	0x0800d6fc
 8003bbc:	20000700 	.word	0x20000700
 8003bc0:	51eb851f 	.word	0x51eb851f
					}
					else {
					  dN[cursor] = (char)(charcount+54);
 8003bc4:	4b9e      	ldr	r3, [pc, #632]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	4b9e      	ldr	r3, [pc, #632]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3236      	adds	r2, #54	@ 0x36
 8003bd0:	b2d1      	uxtb	r1, r2
 8003bd2:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003bd6:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003bda:	54d1      	strb	r1, [r2, r3]
 8003bdc:	e01e      	b.n	8003c1c <StartDefaultTask+0x6ac>
					}
				  }
				  else if (cursor == 7) { //mhz
 8003bde:	4b99      	ldr	r3, [pc, #612]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b07      	cmp	r3, #7
 8003be4:	d10c      	bne.n	8003c00 <StartDefaultTask+0x690>
					if (charcount > 9) {
 8003be6:	4b96      	ldr	r3, [pc, #600]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b09      	cmp	r3, #9
 8003bec:	dd02      	ble.n	8003bf4 <StartDefaultTask+0x684>
					  charcount = 9;
 8003bee:	4b94      	ldr	r3, [pc, #592]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003bf0:	2209      	movs	r2, #9
 8003bf2:	601a      	str	r2, [r3, #0]
					}
					dM = 108 + charcount;
 8003bf4:	4b92      	ldr	r3, [pc, #584]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	336c      	adds	r3, #108	@ 0x6c
 8003bfa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8003bfe:	e00d      	b.n	8003c1c <StartDefaultTask+0x6ac>
				  }
				  else {
				    if (charcount > 19) {
 8003c00:	4b8f      	ldr	r3, [pc, #572]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b13      	cmp	r3, #19
 8003c06:	dd02      	ble.n	8003c0e <StartDefaultTask+0x69e>
					  charcount = 19;
 8003c08:	4b8d      	ldr	r3, [pc, #564]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003c0a:	2213      	movs	r2, #19
 8003c0c:	601a      	str	r2, [r3, #0]
				    }
					dK = 50 * charcount;
 8003c0e:	4b8c      	ldr	r3, [pc, #560]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2232      	movs	r2, #50	@ 0x32
 8003c14:	fb02 f303 	mul.w	r3, r2, r3
 8003c18:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
				  }

				  float pfreq = dM + (dK * .001);
 8003c1c:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8003c20:	f7fc fc60 	bl	80004e4 <__aeabi_i2d>
 8003c24:	4604      	mov	r4, r0
 8003c26:	460d      	mov	r5, r1
 8003c28:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 8003c2c:	f7fc fc5a 	bl	80004e4 <__aeabi_i2d>
 8003c30:	a381      	add	r3, pc, #516	@ (adr r3, 8003e38 <StartDefaultTask+0x8c8>)
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f7fc fcbf 	bl	80005b8 <__aeabi_dmul>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4620      	mov	r0, r4
 8003c40:	4629      	mov	r1, r5
 8003c42:	f7fc fb03 	bl	800024c <__adddf3>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f7fc ff8b 	bl	8000b68 <__aeabi_d2f>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	//			  Serial2.print("a");
	//			  Serial2.print(cursor);
	//			  Serial2.print(dN);
	//			  printFloat2(pfreq,3);
	//			  Serial2.println("");
				  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8003c58:	4b7a      	ldr	r3, [pc, #488]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003c5a:	681c      	ldr	r4, [r3, #0]
 8003c5c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8003c60:	f7fc fc52 	bl	8000508 <__aeabi_f2d>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003c6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	4623      	mov	r3, r4
 8003c78:	2261      	movs	r2, #97	@ 0x61
 8003c7a:	4973      	ldr	r1, [pc, #460]	@ (8003e48 <StartDefaultTask+0x8d8>)
 8003c7c:	f007 fa3e 	bl	800b0fc <siprintf>
				  LCDPrint(toPrint);
 8003c80:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff f879 	bl	8002d7c <LCDPrint>

				  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press TODO might need to swap highs and lows
 8003c8a:	e12c      	b.n	8003ee6 <StartDefaultTask+0x976>
					static int last_cursor = 0;
					static int last_cc = 0;
					if (last_cc != charcount) { // change the actual values of dN dM and dK, incrementing values
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e4c <StartDefaultTask+0x8dc>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b6b      	ldr	r3, [pc, #428]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	f000 808e 	beq.w	8003db6 <StartDefaultTask+0x846>
					  if (cursor < 7) { //
 8003c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b06      	cmp	r3, #6
 8003ca0:	dc2e      	bgt.n	8003d00 <StartDefaultTask+0x790>
						if (charcount == 0) {
 8003ca2:	4b67      	ldr	r3, [pc, #412]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10c      	bne.n	8003cc4 <StartDefaultTask+0x754>
						  dN[cursor] = (char)(charcount+32);
 8003caa:	4b65      	ldr	r3, [pc, #404]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	4b64      	ldr	r3, [pc, #400]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3220      	adds	r2, #32
 8003cb6:	b2d1      	uxtb	r1, r2
 8003cb8:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003cbc:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003cc0:	54d1      	strb	r1, [r2, r3]
 8003cc2:	e03c      	b.n	8003d3e <StartDefaultTask+0x7ce>
						}
						else if (charcount < 11) {
 8003cc4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b0a      	cmp	r3, #10
 8003cca:	dc0c      	bgt.n	8003ce6 <StartDefaultTask+0x776>
						  dN[cursor] = (char)(charcount+47);
 8003ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	322f      	adds	r2, #47	@ 0x2f
 8003cd8:	b2d1      	uxtb	r1, r2
 8003cda:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003cde:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003ce2:	54d1      	strb	r1, [r2, r3]
 8003ce4:	e02b      	b.n	8003d3e <StartDefaultTask+0x7ce>
						}
						else {
						  dN[cursor] = (char)(charcount+54);
 8003ce6:	4b56      	ldr	r3, [pc, #344]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	4b55      	ldr	r3, [pc, #340]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3236      	adds	r2, #54	@ 0x36
 8003cf2:	b2d1      	uxtb	r1, r2
 8003cf4:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003cf8:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003cfc:	54d1      	strb	r1, [r2, r3]
 8003cfe:	e01e      	b.n	8003d3e <StartDefaultTask+0x7ce>
						}
					  }
					  else if (cursor == 7) { //mhz
 8003d00:	4b50      	ldr	r3, [pc, #320]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b07      	cmp	r3, #7
 8003d06:	d10c      	bne.n	8003d22 <StartDefaultTask+0x7b2>
						if (charcount > 9) {
 8003d08:	4b4d      	ldr	r3, [pc, #308]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b09      	cmp	r3, #9
 8003d0e:	dd02      	ble.n	8003d16 <StartDefaultTask+0x7a6>
						  charcount = 9;
 8003d10:	4b4b      	ldr	r3, [pc, #300]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003d12:	2209      	movs	r2, #9
 8003d14:	601a      	str	r2, [r3, #0]
						}
						dM = 108 + charcount;
 8003d16:	4b4a      	ldr	r3, [pc, #296]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	336c      	adds	r3, #108	@ 0x6c
 8003d1c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8003d20:	e00d      	b.n	8003d3e <StartDefaultTask+0x7ce>
					  }
					  else {
		                if (charcount > 19) {
 8003d22:	4b47      	ldr	r3, [pc, #284]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b13      	cmp	r3, #19
 8003d28:	dd02      	ble.n	8003d30 <StartDefaultTask+0x7c0>
		                  charcount = 19;
 8003d2a:	4b45      	ldr	r3, [pc, #276]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003d2c:	2213      	movs	r2, #19
 8003d2e:	601a      	str	r2, [r3, #0]
		                }
						dK = 50 * charcount;
 8003d30:	4b43      	ldr	r3, [pc, #268]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2232      	movs	r2, #50	@ 0x32
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
	//				  Serial2.print("a");
	//				  Serial2.print(cursor);
	//				  Serial2.print(dN);
	//				  printFloat2(pfreq,3);
	//				  Serial2.println("");
					  float pfreq = dM + (dK * .001);
 8003d3e:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8003d42:	f7fc fbcf 	bl	80004e4 <__aeabi_i2d>
 8003d46:	4604      	mov	r4, r0
 8003d48:	460d      	mov	r5, r1
 8003d4a:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 8003d4e:	f7fc fbc9 	bl	80004e4 <__aeabi_i2d>
 8003d52:	a339      	add	r3, pc, #228	@ (adr r3, 8003e38 <StartDefaultTask+0x8c8>)
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f7fc fc2e 	bl	80005b8 <__aeabi_dmul>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4620      	mov	r0, r4
 8003d62:	4629      	mov	r1, r5
 8003d64:	f7fc fa72 	bl	800024c <__adddf3>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f7fc fefa 	bl	8000b68 <__aeabi_d2f>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
					  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8003d7a:	4b32      	ldr	r3, [pc, #200]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003d7c:	681c      	ldr	r4, [r3, #0]
 8003d7e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8003d82:	f7fc fbc1 	bl	8000508 <__aeabi_f2d>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003d8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4623      	mov	r3, r4
 8003d9a:	2261      	movs	r2, #97	@ 0x61
 8003d9c:	492a      	ldr	r1, [pc, #168]	@ (8003e48 <StartDefaultTask+0x8d8>)
 8003d9e:	f007 f9ad 	bl	800b0fc <siprintf>
					  LCDPrint(toPrint);
 8003da2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe ffe8 	bl	8002d7c <LCDPrint>
					  last_cc = charcount;
 8003dac:	4b24      	ldr	r3, [pc, #144]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a26      	ldr	r2, [pc, #152]	@ (8003e4c <StartDefaultTask+0x8dc>)
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	e097      	b.n	8003ee6 <StartDefaultTask+0x976>
					} ///////// case 1
					else if (last_cursor != cursor) { // change the value of charcount based on where we are
 8003db6:	4b26      	ldr	r3, [pc, #152]	@ (8003e50 <StartDefaultTask+0x8e0>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b22      	ldr	r3, [pc, #136]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	f000 8091 	beq.w	8003ee6 <StartDefaultTask+0x976>
					  if (cursor < 7) { // moved to a char
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b06      	cmp	r3, #6
 8003dca:	dc2b      	bgt.n	8003e24 <StartDefaultTask+0x8b4>
						if (dN[cursor] == ' ') {
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003dd4:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003dd8:	5cd3      	ldrb	r3, [r2, r3]
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d103      	bne.n	8003de6 <StartDefaultTask+0x876>
						  charcount = 0;
 8003dde:	4b18      	ldr	r3, [pc, #96]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e040      	b.n	8003e68 <StartDefaultTask+0x8f8>
						}
						else if (dN[cursor] < ':') {
 8003de6:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003dee:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	2b39      	cmp	r3, #57	@ 0x39
 8003df6:	d80a      	bhi.n	8003e0e <StartDefaultTask+0x89e>
						  charcount = dN[cursor] - '/';
 8003df8:	4b12      	ldr	r3, [pc, #72]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003e00:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003e04:	5cd3      	ldrb	r3, [r2, r3]
 8003e06:	3b2f      	subs	r3, #47	@ 0x2f
 8003e08:	4a0d      	ldr	r2, [pc, #52]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	e02c      	b.n	8003e68 <StartDefaultTask+0x8f8>
						}
						else {
						  charcount = dN[cursor] - '6';
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003e16:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003e1a:	5cd3      	ldrb	r3, [r2, r3]
 8003e1c:	3b36      	subs	r3, #54	@ 0x36
 8003e1e:	4a08      	ldr	r2, [pc, #32]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e021      	b.n	8003e68 <StartDefaultTask+0x8f8>
						}
					  }
					  else if (cursor == 7) {
 8003e24:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <StartDefaultTask+0x8d4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b07      	cmp	r3, #7
 8003e2a:	d113      	bne.n	8003e54 <StartDefaultTask+0x8e4>
						charcount = dM - 108;
 8003e2c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003e30:	3b6c      	subs	r3, #108	@ 0x6c
 8003e32:	4a03      	ldr	r2, [pc, #12]	@ (8003e40 <StartDefaultTask+0x8d0>)
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e017      	b.n	8003e68 <StartDefaultTask+0x8f8>
 8003e38:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e3c:	3f50624d 	.word	0x3f50624d
 8003e40:	20000700 	.word	0x20000700
 8003e44:	200006f8 	.word	0x200006f8
 8003e48:	0800d6c0 	.word	0x0800d6c0
 8003e4c:	20000758 	.word	0x20000758
 8003e50:	2000075c 	.word	0x2000075c
					  }
					  else {
						charcount = dK / 50;
 8003e54:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003e58:	4abf      	ldr	r2, [pc, #764]	@ (8004158 <StartDefaultTask+0xbe8>)
 8003e5a:	fb82 1203 	smull	r1, r2, r2, r3
 8003e5e:	1112      	asrs	r2, r2, #4
 8003e60:	17db      	asrs	r3, r3, #31
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	4abd      	ldr	r2, [pc, #756]	@ (800415c <StartDefaultTask+0xbec>)
 8003e66:	6013      	str	r3, [r2, #0]
	//				  Serial2.print("a");
	//				  Serial2.print(cursor);
	//				  Serial2.print(dN);
	//				  printFloat2(pfreq,3);
	//				  Serial2.println("");
					  float pfreq = dM + (dK * .001);
 8003e68:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8003e6c:	f7fc fb3a 	bl	80004e4 <__aeabi_i2d>
 8003e70:	4604      	mov	r4, r0
 8003e72:	460d      	mov	r5, r1
 8003e74:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 8003e78:	f7fc fb34 	bl	80004e4 <__aeabi_i2d>
 8003e7c:	a3b2      	add	r3, pc, #712	@ (adr r3, 8004148 <StartDefaultTask+0xbd8>)
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f7fc fb99 	bl	80005b8 <__aeabi_dmul>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	f7fc f9dd 	bl	800024c <__adddf3>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7fc fe65 	bl	8000b68 <__aeabi_d2f>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8003ea4:	4bae      	ldr	r3, [pc, #696]	@ (8004160 <StartDefaultTask+0xbf0>)
 8003ea6:	681c      	ldr	r4, [r3, #0]
 8003ea8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8003eac:	f7fc fb2c 	bl	8000508 <__aeabi_f2d>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8003eb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ebc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	2261      	movs	r2, #97	@ 0x61
 8003ec6:	49a7      	ldr	r1, [pc, #668]	@ (8004164 <StartDefaultTask+0xbf4>)
 8003ec8:	f007 f918 	bl	800b0fc <siprintf>
					  LCDPrint(toPrint);
 8003ecc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe ff53 	bl	8002d7c <LCDPrint>
					  last_cc = charcount;
 8003ed6:	4ba1      	ldr	r3, [pc, #644]	@ (800415c <StartDefaultTask+0xbec>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4aa3      	ldr	r2, [pc, #652]	@ (8004168 <StartDefaultTask+0xbf8>)
 8003edc:	6013      	str	r3, [r2, #0]
					  last_cursor = cursor;
 8003ede:	4ba0      	ldr	r3, [pc, #640]	@ (8004160 <StartDefaultTask+0xbf0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4aa2      	ldr	r2, [pc, #648]	@ (800416c <StartDefaultTask+0xbfc>)
 8003ee4:	6013      	str	r3, [r2, #0]
				  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press TODO might need to swap highs and lows
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	48a1      	ldr	r0, [pc, #644]	@ (8004170 <StartDefaultTask+0xc00>)
 8003eea:	f002 ffe3 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f43f aecb 	beq.w	8003c8c <StartDefaultTask+0x71c>
					} ///////// case 2
				  }
				  //Some functionality to add dN,dM,and dK to the eeprom
				  toAdd(dN,dM,dK);
 8003ef6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003efa:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8003efe:	f8d7 1164 	ldr.w	r1, [r7, #356]	@ 0x164
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd fd8a 	bl	8001a1c <toAdd>
				  HAL_Delay(500);
 8003f08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003f0c:	f002 fbf8 	bl	8006700 <HAL_Delay>
				  add = false;
 8003f10:	4b98      	ldr	r3, [pc, #608]	@ (8004174 <StartDefaultTask+0xc04>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	701a      	strb	r2, [r3, #0]
				  pause = false;
 8003f16:	4b98      	ldr	r3, [pc, #608]	@ (8004178 <StartDefaultTask+0xc08>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
				  toDisplay();
 8003f1c:	f7fd fd3c 	bl	8001998 <toDisplay>

				  char str[8];
				  if (dispCount == count) {
 8003f20:	4b96      	ldr	r3, [pc, #600]	@ (800417c <StartDefaultTask+0xc0c>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b96      	ldr	r3, [pc, #600]	@ (8004180 <StartDefaultTask+0xc10>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d106      	bne.n	8003f3a <StartDefaultTask+0x9ca>
					str[0] = ':'; //EMPTY
 8003f2c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003f30:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f34:	223a      	movs	r2, #58	@ 0x3a
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e02b      	b.n	8003f92 <StartDefaultTask+0xa22>
				  }
				  else {
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003f40:	e01d      	b.n	8003f7e <StartDefaultTask+0xa0e>
	//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
					  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8003f42:	4b8e      	ldr	r3, [pc, #568]	@ (800417c <StartDefaultTask+0xc0c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a8f      	ldr	r2, [pc, #572]	@ (8004184 <StartDefaultTask+0xc14>)
 8003f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2301      	movs	r3, #1
 8003f56:	4a8c      	ldr	r2, [pc, #560]	@ (8004188 <StartDefaultTask+0xc18>)
 8003f58:	488c      	ldr	r0, [pc, #560]	@ (800418c <StartDefaultTask+0xc1c>)
 8003f5a:	f001 ffa9 	bl	8005eb0 <SPIF_ReadSector>
					  str[i] = read[0];
 8003f5e:	4b8a      	ldr	r3, [pc, #552]	@ (8004188 <StartDefaultTask+0xc18>)
 8003f60:	7819      	ldrb	r1, [r3, #0]
 8003f62:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003f66:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003f6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003f6e:	4413      	add	r3, r2
 8003f70:	460a      	mov	r2, r1
 8003f72:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8003f74:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003f7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	dddd      	ble.n	8003f42 <StartDefaultTask+0x9d2>
					}
					str[7] = 0;
 8003f86:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003f8a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f8e:	2200      	movs	r2, #0
 8003f90:	71da      	strb	r2, [r3, #7]
				  }
	//			  float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8003f92:	4b7a      	ldr	r3, [pc, #488]	@ (800417c <StartDefaultTask+0xc0c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7b      	ldr	r2, [pc, #492]	@ (8004184 <StartDefaultTask+0xc14>)
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	4a78      	ldr	r2, [pc, #480]	@ (8004188 <StartDefaultTask+0xc18>)
 8003fa6:	4879      	ldr	r0, [pc, #484]	@ (800418c <StartDefaultTask+0xc1c>)
 8003fa8:	f001 ff82 	bl	8005eb0 <SPIF_ReadSector>
			      int val1 = read[0];
 8003fac:	4b76      	ldr	r3, [pc, #472]	@ (8004188 <StartDefaultTask+0xc18>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8003fb4:	4b71      	ldr	r3, [pc, #452]	@ (800417c <StartDefaultTask+0xc0c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a72      	ldr	r2, [pc, #456]	@ (8004184 <StartDefaultTask+0xc14>)
 8003fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4a70      	ldr	r2, [pc, #448]	@ (8004188 <StartDefaultTask+0xc18>)
 8003fc8:	4870      	ldr	r0, [pc, #448]	@ (800418c <StartDefaultTask+0xc1c>)
 8003fca:	f001 ff71 	bl	8005eb0 <SPIF_ReadSector>
				  int val2 = read[0];
 8003fce:	4b6e      	ldr	r3, [pc, #440]	@ (8004188 <StartDefaultTask+0xc18>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
				  float store = val1 + (.025 * val2);
 8003fd6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8003fda:	f7fc fa83 	bl	80004e4 <__aeabi_i2d>
 8003fde:	4604      	mov	r4, r0
 8003fe0:	460d      	mov	r5, r1
 8003fe2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8003fe6:	f7fc fa7d 	bl	80004e4 <__aeabi_i2d>
 8003fea:	a359      	add	r3, pc, #356	@ (adr r3, 8004150 <StartDefaultTask+0xbe0>)
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f7fc fae2 	bl	80005b8 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	f7fc f926 	bl	800024c <__adddf3>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	f7fc fdae 	bl	8000b68 <__aeabi_d2f>
 800400c:	4603      	mov	r3, r0
 800400e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	//			  Serial2.print("e");
	//			  Serial2.print(str);
	//			  Serial.print(str);
	//			  printFloat2(store,3);
	//			  Serial2.println("");
				  sprintf(toPrint, "%c%s%0.3f",'e',str,store);
 8004012:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8004016:	f7fc fa77 	bl	8000508 <__aeabi_f2d>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8004022:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004026:	e9cd 2300 	strd	r2, r3, [sp]
 800402a:	460b      	mov	r3, r1
 800402c:	2265      	movs	r2, #101	@ 0x65
 800402e:	4958      	ldr	r1, [pc, #352]	@ (8004190 <StartDefaultTask+0xc20>)
 8004030:	f007 f864 	bl	800b0fc <siprintf>
				  LCDPrint(toPrint);
 8004034:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fe9f 	bl	8002d7c <LCDPrint>
				if (dispCount == count && count != 16) { // EMPTY add new one
 800403e:	f000 bcdd 	b.w	80049fc <StartDefaultTask+0x148c>
				}
				else { // regular edit 2
				  add = true;
 8004042:	4b4c      	ldr	r3, [pc, #304]	@ (8004174 <StartDefaultTask+0xc04>)
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
	//			  int dM = EEPROM.read(eepDisplay[dispCount] + 7);
	//			  int dK = EEPROM.read(eepDisplay[dispCount] + 8) * 25;
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004048:	4b4c      	ldr	r3, [pc, #304]	@ (800417c <StartDefaultTask+0xc0c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a4d      	ldr	r2, [pc, #308]	@ (8004184 <StartDefaultTask+0xc14>)
 800404e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004052:	4619      	mov	r1, r3
 8004054:	2307      	movs	r3, #7
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2301      	movs	r3, #1
 800405a:	4a4b      	ldr	r2, [pc, #300]	@ (8004188 <StartDefaultTask+0xc18>)
 800405c:	484b      	ldr	r0, [pc, #300]	@ (800418c <StartDefaultTask+0xc1c>)
 800405e:	f001 ff27 	bl	8005eb0 <SPIF_ReadSector>
				  int dM = read[0];
 8004062:	4b49      	ldr	r3, [pc, #292]	@ (8004188 <StartDefaultTask+0xc18>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 800406a:	4b44      	ldr	r3, [pc, #272]	@ (800417c <StartDefaultTask+0xc0c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a45      	ldr	r2, [pc, #276]	@ (8004184 <StartDefaultTask+0xc14>)
 8004070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004074:	4619      	mov	r1, r3
 8004076:	2308      	movs	r3, #8
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2301      	movs	r3, #1
 800407c:	4a42      	ldr	r2, [pc, #264]	@ (8004188 <StartDefaultTask+0xc18>)
 800407e:	4843      	ldr	r0, [pc, #268]	@ (800418c <StartDefaultTask+0xc1c>)
 8004080:	f001 ff16 	bl	8005eb0 <SPIF_ReadSector>
				  int dK = read[0] * 25;
 8004084:	4b40      	ldr	r3, [pc, #256]	@ (8004188 <StartDefaultTask+0xc18>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009a      	lsls	r2, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
				  char dN[8] = {' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,' ' ,0};
 8004098:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800409c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80040a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004194 <StartDefaultTask+0xc24>)
 80040a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040a6:	e883 0003 	stmia.w	r3, {r0, r1}
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80040b0:	e01d      	b.n	80040ee <StartDefaultTask+0xb7e>
	//				dN[i] = EEPROM.read(eepDisplay[dispCount] + i);
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 80040b2:	4b32      	ldr	r3, [pc, #200]	@ (800417c <StartDefaultTask+0xc0c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a33      	ldr	r2, [pc, #204]	@ (8004184 <StartDefaultTask+0xc14>)
 80040b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040bc:	4619      	mov	r1, r3
 80040be:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2301      	movs	r3, #1
 80040c6:	4a30      	ldr	r2, [pc, #192]	@ (8004188 <StartDefaultTask+0xc18>)
 80040c8:	4830      	ldr	r0, [pc, #192]	@ (800418c <StartDefaultTask+0xc1c>)
 80040ca:	f001 fef1 	bl	8005eb0 <SPIF_ReadSector>
					dN[i] = read[0];
 80040ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004188 <StartDefaultTask+0xc18>)
 80040d0:	7819      	ldrb	r1, [r3, #0]
 80040d2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80040d6:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 80040da:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80040de:	4413      	add	r3, r2
 80040e0:	460a      	mov	r2, r1
 80040e2:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80040e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80040e8:	3301      	adds	r3, #1
 80040ea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80040ee:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80040f2:	2b06      	cmp	r3, #6
 80040f4:	dddd      	ble.n	80040b2 <StartDefaultTask+0xb42>
				  }
				  HAL_Delay(100);
 80040f6:	2064      	movs	r0, #100	@ 0x64
 80040f8:	f002 fb02 	bl	8006700 <HAL_Delay>

				  if (cursor < 7) { // moved to a char
 80040fc:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <StartDefaultTask+0xbf0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b06      	cmp	r3, #6
 8004102:	dc54      	bgt.n	80041ae <StartDefaultTask+0xc3e>
					if (dN[cursor] == ' ') {
 8004104:	4b16      	ldr	r3, [pc, #88]	@ (8004160 <StartDefaultTask+0xbf0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800410c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004110:	5cd3      	ldrb	r3, [r2, r3]
 8004112:	2b20      	cmp	r3, #32
 8004114:	d103      	bne.n	800411e <StartDefaultTask+0xbae>
					  charcount = 0;
 8004116:	4b11      	ldr	r3, [pc, #68]	@ (800415c <StartDefaultTask+0xbec>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e05b      	b.n	80041d6 <StartDefaultTask+0xc66>
					}
					else if (dN[cursor] < ':') {
 800411e:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <StartDefaultTask+0xbf0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8004126:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	2b39      	cmp	r3, #57	@ 0x39
 800412e:	d833      	bhi.n	8004198 <StartDefaultTask+0xc28>
					  charcount = dN[cursor] - '/';
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <StartDefaultTask+0xbf0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8004138:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800413c:	5cd3      	ldrb	r3, [r2, r3]
 800413e:	3b2f      	subs	r3, #47	@ 0x2f
 8004140:	4a06      	ldr	r2, [pc, #24]	@ (800415c <StartDefaultTask+0xbec>)
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e047      	b.n	80041d6 <StartDefaultTask+0xc66>
 8004146:	bf00      	nop
 8004148:	d2f1a9fc 	.word	0xd2f1a9fc
 800414c:	3f50624d 	.word	0x3f50624d
 8004150:	9999999a 	.word	0x9999999a
 8004154:	3f999999 	.word	0x3f999999
 8004158:	51eb851f 	.word	0x51eb851f
 800415c:	20000700 	.word	0x20000700
 8004160:	200006f8 	.word	0x200006f8
 8004164:	0800d6c0 	.word	0x0800d6c0
 8004168:	20000758 	.word	0x20000758
 800416c:	2000075c 	.word	0x2000075c
 8004170:	40011000 	.word	0x40011000
 8004174:	200006f5 	.word	0x200006f5
 8004178:	2000000c 	.word	0x2000000c
 800417c:	200006ec 	.word	0x200006ec
 8004180:	200006f0 	.word	0x200006f0
 8004184:	200006ac 	.word	0x200006ac
 8004188:	2000070c 	.word	0x2000070c
 800418c:	20000678 	.word	0x20000678
 8004190:	0800d6b4 	.word	0x0800d6b4
 8004194:	0800d6fc 	.word	0x0800d6fc
					}
					else {
					  charcount = dN[cursor] - '6';
 8004198:	4ba1      	ldr	r3, [pc, #644]	@ (8004420 <StartDefaultTask+0xeb0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80041a0:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	3b36      	subs	r3, #54	@ 0x36
 80041a8:	4a9e      	ldr	r2, [pc, #632]	@ (8004424 <StartDefaultTask+0xeb4>)
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	e013      	b.n	80041d6 <StartDefaultTask+0xc66>
					}
				  }
				  else if (cursor == 7) {
 80041ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004420 <StartDefaultTask+0xeb0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b07      	cmp	r3, #7
 80041b4:	d105      	bne.n	80041c2 <StartDefaultTask+0xc52>
					charcount = dM - 108;
 80041b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80041ba:	3b6c      	subs	r3, #108	@ 0x6c
 80041bc:	4a99      	ldr	r2, [pc, #612]	@ (8004424 <StartDefaultTask+0xeb4>)
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e009      	b.n	80041d6 <StartDefaultTask+0xc66>
				  }
				  else {
					charcount = dK / 50;
 80041c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80041c6:	4a98      	ldr	r2, [pc, #608]	@ (8004428 <StartDefaultTask+0xeb8>)
 80041c8:	fb82 1203 	smull	r1, r2, r2, r3
 80041cc:	1112      	asrs	r2, r2, #4
 80041ce:	17db      	asrs	r3, r3, #31
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	4a94      	ldr	r2, [pc, #592]	@ (8004424 <StartDefaultTask+0xeb4>)
 80041d4:	6013      	str	r3, [r2, #0]
				  }

				  if (cursor < 7) { //
 80041d6:	4b92      	ldr	r3, [pc, #584]	@ (8004420 <StartDefaultTask+0xeb0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b06      	cmp	r3, #6
 80041dc:	dc2e      	bgt.n	800423c <StartDefaultTask+0xccc>
					if (charcount == 0) {
 80041de:	4b91      	ldr	r3, [pc, #580]	@ (8004424 <StartDefaultTask+0xeb4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10c      	bne.n	8004200 <StartDefaultTask+0xc90>
					  dN[cursor] = (char)(charcount+32);
 80041e6:	4b8f      	ldr	r3, [pc, #572]	@ (8004424 <StartDefaultTask+0xeb4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004420 <StartDefaultTask+0xeb0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3220      	adds	r2, #32
 80041f2:	b2d1      	uxtb	r1, r2
 80041f4:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80041f8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80041fc:	54d1      	strb	r1, [r2, r3]
 80041fe:	e03c      	b.n	800427a <StartDefaultTask+0xd0a>
					}
					else if (charcount < 11) {
 8004200:	4b88      	ldr	r3, [pc, #544]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b0a      	cmp	r3, #10
 8004206:	dc0c      	bgt.n	8004222 <StartDefaultTask+0xcb2>
					  dN[cursor] = (char)(charcount+47);
 8004208:	4b86      	ldr	r3, [pc, #536]	@ (8004424 <StartDefaultTask+0xeb4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4b84      	ldr	r3, [pc, #528]	@ (8004420 <StartDefaultTask+0xeb0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	322f      	adds	r2, #47	@ 0x2f
 8004214:	b2d1      	uxtb	r1, r2
 8004216:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800421a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800421e:	54d1      	strb	r1, [r2, r3]
 8004220:	e02b      	b.n	800427a <StartDefaultTask+0xd0a>
					}
					else {
					  dN[cursor] = (char)(charcount+54);
 8004222:	4b80      	ldr	r3, [pc, #512]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	4b7d      	ldr	r3, [pc, #500]	@ (8004420 <StartDefaultTask+0xeb0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3236      	adds	r2, #54	@ 0x36
 800422e:	b2d1      	uxtb	r1, r2
 8004230:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8004234:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004238:	54d1      	strb	r1, [r2, r3]
 800423a:	e01e      	b.n	800427a <StartDefaultTask+0xd0a>
					}
				  }
				  else if (cursor == 7) { //mhz
 800423c:	4b78      	ldr	r3, [pc, #480]	@ (8004420 <StartDefaultTask+0xeb0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b07      	cmp	r3, #7
 8004242:	d10c      	bne.n	800425e <StartDefaultTask+0xcee>
					if (charcount > 9) {
 8004244:	4b77      	ldr	r3, [pc, #476]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b09      	cmp	r3, #9
 800424a:	dd02      	ble.n	8004252 <StartDefaultTask+0xce2>
					  charcount = 9;
 800424c:	4b75      	ldr	r3, [pc, #468]	@ (8004424 <StartDefaultTask+0xeb4>)
 800424e:	2209      	movs	r2, #9
 8004250:	601a      	str	r2, [r3, #0]
					}
					dM = 108 + charcount;
 8004252:	4b74      	ldr	r3, [pc, #464]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	336c      	adds	r3, #108	@ 0x6c
 8004258:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800425c:	e00d      	b.n	800427a <StartDefaultTask+0xd0a>
				  }
				  else {
	                if (charcount > 19) {
 800425e:	4b71      	ldr	r3, [pc, #452]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b13      	cmp	r3, #19
 8004264:	dd02      	ble.n	800426c <StartDefaultTask+0xcfc>
	                  charcount = 19;
 8004266:	4b6f      	ldr	r3, [pc, #444]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004268:	2213      	movs	r2, #19
 800426a:	601a      	str	r2, [r3, #0]
	                }
					dK = 50 * charcount;
 800426c:	4b6d      	ldr	r3, [pc, #436]	@ (8004424 <StartDefaultTask+0xeb4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2232      	movs	r2, #50	@ 0x32
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	//			  Serial2.print("a");
	//			  Serial2.print(cursor);
	//			  Serial2.print(dN);
	//			  printFloat2(pfreq,3);
	//			  Serial2.println("");
				  float pfreq = dM + (dK * .001);
 800427a:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800427e:	f7fc f931 	bl	80004e4 <__aeabi_i2d>
 8004282:	4604      	mov	r4, r0
 8004284:	460d      	mov	r5, r1
 8004286:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 800428a:	f7fc f92b 	bl	80004e4 <__aeabi_i2d>
 800428e:	a362      	add	r3, pc, #392	@ (adr r3, 8004418 <StartDefaultTask+0xea8>)
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f7fc f990 	bl	80005b8 <__aeabi_dmul>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4620      	mov	r0, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	f7fb ffd4 	bl	800024c <__adddf3>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4610      	mov	r0, r2
 80042aa:	4619      	mov	r1, r3
 80042ac:	f7fc fc5c 	bl	8000b68 <__aeabi_d2f>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
				  sprintf(toPrint, "%c%d%s%0.3f",'a',cursor,dN,pfreq);
 80042b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004420 <StartDefaultTask+0xeb0>)
 80042b8:	681c      	ldr	r4, [r3, #0]
 80042ba:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80042be:	f7fc f923 	bl	8000508 <__aeabi_f2d>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80042ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042ce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	4623      	mov	r3, r4
 80042d6:	2261      	movs	r2, #97	@ 0x61
 80042d8:	4954      	ldr	r1, [pc, #336]	@ (800442c <StartDefaultTask+0xebc>)
 80042da:	f006 ff0f 	bl	800b0fc <siprintf>
				  LCDPrint(toPrint);
 80042de:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fd4a 	bl	8002d7c <LCDPrint>

				  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press
 80042e8:	e12e      	b.n	8004548 <StartDefaultTask+0xfd8>
					static int last_cursor = 0;
					static int last_cc = 0;
					if (last_cc != charcount) { // change the actual values of dN dM and dK, incrementing values WORKS
 80042ea:	4b51      	ldr	r3, [pc, #324]	@ (8004430 <StartDefaultTask+0xec0>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004424 <StartDefaultTask+0xeb4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	f000 809e 	beq.w	8004434 <StartDefaultTask+0xec4>
					  if (cursor < 7) { //
 80042f8:	4b49      	ldr	r3, [pc, #292]	@ (8004420 <StartDefaultTask+0xeb0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b06      	cmp	r3, #6
 80042fe:	dc2e      	bgt.n	800435e <StartDefaultTask+0xdee>
						if (charcount == 0) {
 8004300:	4b48      	ldr	r3, [pc, #288]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10c      	bne.n	8004322 <StartDefaultTask+0xdb2>
						  dN[cursor] = (char)(charcount+32);
 8004308:	4b46      	ldr	r3, [pc, #280]	@ (8004424 <StartDefaultTask+0xeb4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4b44      	ldr	r3, [pc, #272]	@ (8004420 <StartDefaultTask+0xeb0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3220      	adds	r2, #32
 8004314:	b2d1      	uxtb	r1, r2
 8004316:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800431a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800431e:	54d1      	strb	r1, [r2, r3]
 8004320:	e03c      	b.n	800439c <StartDefaultTask+0xe2c>
						}
						else if (charcount < 11) {
 8004322:	4b40      	ldr	r3, [pc, #256]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b0a      	cmp	r3, #10
 8004328:	dc0c      	bgt.n	8004344 <StartDefaultTask+0xdd4>
						  dN[cursor] = (char)(charcount+47);
 800432a:	4b3e      	ldr	r3, [pc, #248]	@ (8004424 <StartDefaultTask+0xeb4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <StartDefaultTask+0xeb0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	322f      	adds	r2, #47	@ 0x2f
 8004336:	b2d1      	uxtb	r1, r2
 8004338:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800433c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004340:	54d1      	strb	r1, [r2, r3]
 8004342:	e02b      	b.n	800439c <StartDefaultTask+0xe2c>
						}
						else {
						  dN[cursor] = (char)(charcount+54);
 8004344:	4b37      	ldr	r3, [pc, #220]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	4b35      	ldr	r3, [pc, #212]	@ (8004420 <StartDefaultTask+0xeb0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3236      	adds	r2, #54	@ 0x36
 8004350:	b2d1      	uxtb	r1, r2
 8004352:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8004356:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800435a:	54d1      	strb	r1, [r2, r3]
 800435c:	e01e      	b.n	800439c <StartDefaultTask+0xe2c>
						}
					  }
					  else if (cursor == 7) { //mhz
 800435e:	4b30      	ldr	r3, [pc, #192]	@ (8004420 <StartDefaultTask+0xeb0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b07      	cmp	r3, #7
 8004364:	d10c      	bne.n	8004380 <StartDefaultTask+0xe10>
						if (charcount > 9) {
 8004366:	4b2f      	ldr	r3, [pc, #188]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b09      	cmp	r3, #9
 800436c:	dd02      	ble.n	8004374 <StartDefaultTask+0xe04>
						  charcount = 9;
 800436e:	4b2d      	ldr	r3, [pc, #180]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004370:	2209      	movs	r2, #9
 8004372:	601a      	str	r2, [r3, #0]
						}
						dM = 108 + charcount;
 8004374:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	336c      	adds	r3, #108	@ 0x6c
 800437a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800437e:	e00d      	b.n	800439c <StartDefaultTask+0xe2c>
					  }
					  else {
		                if (charcount > 19) {
 8004380:	4b28      	ldr	r3, [pc, #160]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b13      	cmp	r3, #19
 8004386:	dd02      	ble.n	800438e <StartDefaultTask+0xe1e>
		                  charcount = 19;
 8004388:	4b26      	ldr	r3, [pc, #152]	@ (8004424 <StartDefaultTask+0xeb4>)
 800438a:	2213      	movs	r2, #19
 800438c:	601a      	str	r2, [r3, #0]
		                }
						dK = 50 * charcount;
 800438e:	4b25      	ldr	r3, [pc, #148]	@ (8004424 <StartDefaultTask+0xeb4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2232      	movs	r2, #50	@ 0x32
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	//				  Serial2.print("a");
	//				  Serial2.print(cursor);
	//				  Serial2.print(dN);
	//				  printFloat2(pfreq,3);
	//				  Serial2.println("");
					  float pfreq = dM + (dK * .001);
 800439c:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80043a0:	f7fc f8a0 	bl	80004e4 <__aeabi_i2d>
 80043a4:	4604      	mov	r4, r0
 80043a6:	460d      	mov	r5, r1
 80043a8:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 80043ac:	f7fc f89a 	bl	80004e4 <__aeabi_i2d>
 80043b0:	a319      	add	r3, pc, #100	@ (adr r3, 8004418 <StartDefaultTask+0xea8>)
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f7fc f8ff 	bl	80005b8 <__aeabi_dmul>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4620      	mov	r0, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	f7fb ff43 	bl	800024c <__adddf3>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7fc fbcb 	bl	8000b68 <__aeabi_d2f>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
					  sprintf(toPrint,"%c%d%s%0.3f",'a',cursor,dN,pfreq);
 80043d8:	4b11      	ldr	r3, [pc, #68]	@ (8004420 <StartDefaultTask+0xeb0>)
 80043da:	681c      	ldr	r4, [r3, #0]
 80043dc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80043e0:	f7fc f892 	bl	8000508 <__aeabi_f2d>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80043ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	4623      	mov	r3, r4
 80043f8:	2261      	movs	r2, #97	@ 0x61
 80043fa:	490c      	ldr	r1, [pc, #48]	@ (800442c <StartDefaultTask+0xebc>)
 80043fc:	f006 fe7e 	bl	800b0fc <siprintf>
					  LCDPrint(toPrint);
 8004400:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe fcb9 	bl	8002d7c <LCDPrint>
					  last_cc = charcount;
 800440a:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <StartDefaultTask+0xeb4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a08      	ldr	r2, [pc, #32]	@ (8004430 <StartDefaultTask+0xec0>)
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e099      	b.n	8004548 <StartDefaultTask+0xfd8>
 8004414:	f3af 8000 	nop.w
 8004418:	d2f1a9fc 	.word	0xd2f1a9fc
 800441c:	3f50624d 	.word	0x3f50624d
 8004420:	200006f8 	.word	0x200006f8
 8004424:	20000700 	.word	0x20000700
 8004428:	51eb851f 	.word	0x51eb851f
 800442c:	0800d6c0 	.word	0x0800d6c0
 8004430:	20000760 	.word	0x20000760
					} ///////// case 1
					else if (last_cursor != cursor) { // change the value of charcount based on where we are WORKS????
 8004434:	4b86      	ldr	r3, [pc, #536]	@ (8004650 <StartDefaultTask+0x10e0>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b86      	ldr	r3, [pc, #536]	@ (8004654 <StartDefaultTask+0x10e4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	f000 8083 	beq.w	8004548 <StartDefaultTask+0xfd8>
					  if (cursor < 7) { // moved to a char
 8004442:	4b84      	ldr	r3, [pc, #528]	@ (8004654 <StartDefaultTask+0x10e4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b06      	cmp	r3, #6
 8004448:	dc2b      	bgt.n	80044a2 <StartDefaultTask+0xf32>
						if (dN[cursor] == ' ') {
 800444a:	4b82      	ldr	r3, [pc, #520]	@ (8004654 <StartDefaultTask+0x10e4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8004452:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004456:	5cd3      	ldrb	r3, [r2, r3]
 8004458:	2b20      	cmp	r3, #32
 800445a:	d103      	bne.n	8004464 <StartDefaultTask+0xef4>
						  charcount = 0;
 800445c:	4b7e      	ldr	r3, [pc, #504]	@ (8004658 <StartDefaultTask+0x10e8>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e032      	b.n	80044ca <StartDefaultTask+0xf5a>
						}
						else if (dN[cursor] < ':') {
 8004464:	4b7b      	ldr	r3, [pc, #492]	@ (8004654 <StartDefaultTask+0x10e4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800446c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004470:	5cd3      	ldrb	r3, [r2, r3]
 8004472:	2b39      	cmp	r3, #57	@ 0x39
 8004474:	d80a      	bhi.n	800448c <StartDefaultTask+0xf1c>
						  charcount = dN[cursor] - '/';
 8004476:	4b77      	ldr	r3, [pc, #476]	@ (8004654 <StartDefaultTask+0x10e4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800447e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004482:	5cd3      	ldrb	r3, [r2, r3]
 8004484:	3b2f      	subs	r3, #47	@ 0x2f
 8004486:	4a74      	ldr	r2, [pc, #464]	@ (8004658 <StartDefaultTask+0x10e8>)
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e01e      	b.n	80044ca <StartDefaultTask+0xf5a>
						}
						else {
						  charcount = dN[cursor] - '6';
 800448c:	4b71      	ldr	r3, [pc, #452]	@ (8004654 <StartDefaultTask+0x10e4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8004494:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004498:	5cd3      	ldrb	r3, [r2, r3]
 800449a:	3b36      	subs	r3, #54	@ 0x36
 800449c:	4a6e      	ldr	r2, [pc, #440]	@ (8004658 <StartDefaultTask+0x10e8>)
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e013      	b.n	80044ca <StartDefaultTask+0xf5a>
						}
					  }
					  else if (cursor == 7) {
 80044a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004654 <StartDefaultTask+0x10e4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b07      	cmp	r3, #7
 80044a8:	d105      	bne.n	80044b6 <StartDefaultTask+0xf46>
						charcount = dM - 108;
 80044aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80044ae:	3b6c      	subs	r3, #108	@ 0x6c
 80044b0:	4a69      	ldr	r2, [pc, #420]	@ (8004658 <StartDefaultTask+0x10e8>)
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	e009      	b.n	80044ca <StartDefaultTask+0xf5a>
					  }
					  else {
						charcount = dK / 50;
 80044b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80044ba:	4a68      	ldr	r2, [pc, #416]	@ (800465c <StartDefaultTask+0x10ec>)
 80044bc:	fb82 1203 	smull	r1, r2, r2, r3
 80044c0:	1112      	asrs	r2, r2, #4
 80044c2:	17db      	asrs	r3, r3, #31
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	4a64      	ldr	r2, [pc, #400]	@ (8004658 <StartDefaultTask+0x10e8>)
 80044c8:	6013      	str	r3, [r2, #0]
	//				  Serial2.print(cursor);
	//				  Serial2.print(dN);
	//				  printFloat2(pfreq,3);
	//				  Serial2.println("");

					  float pfreq = dM + (dK * .001);
 80044ca:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80044ce:	f7fc f809 	bl	80004e4 <__aeabi_i2d>
 80044d2:	4604      	mov	r4, r0
 80044d4:	460d      	mov	r5, r1
 80044d6:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 80044da:	f7fc f803 	bl	80004e4 <__aeabi_i2d>
 80044de:	a35a      	add	r3, pc, #360	@ (adr r3, 8004648 <StartDefaultTask+0x10d8>)
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f7fc f868 	bl	80005b8 <__aeabi_dmul>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4620      	mov	r0, r4
 80044ee:	4629      	mov	r1, r5
 80044f0:	f7fb feac 	bl	800024c <__adddf3>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	f7fc fb34 	bl	8000b68 <__aeabi_d2f>
 8004500:	4603      	mov	r3, r0
 8004502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
					  sprintf(toPrint,"%c%d%s%0.3f",'a',cursor,dN,pfreq);
 8004506:	4b53      	ldr	r3, [pc, #332]	@ (8004654 <StartDefaultTask+0x10e4>)
 8004508:	681c      	ldr	r4, [r3, #0]
 800450a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800450e:	f7fb fffb 	bl	8000508 <__aeabi_f2d>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800451a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800451e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	4623      	mov	r3, r4
 8004526:	2261      	movs	r2, #97	@ 0x61
 8004528:	494d      	ldr	r1, [pc, #308]	@ (8004660 <StartDefaultTask+0x10f0>)
 800452a:	f006 fde7 	bl	800b0fc <siprintf>
					  LCDPrint(toPrint);
 800452e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fc22 	bl	8002d7c <LCDPrint>
					  last_cc = charcount;
 8004538:	4b47      	ldr	r3, [pc, #284]	@ (8004658 <StartDefaultTask+0x10e8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a49      	ldr	r2, [pc, #292]	@ (8004664 <StartDefaultTask+0x10f4>)
 800453e:	6013      	str	r3, [r2, #0]
					  last_cursor = cursor;
 8004540:	4b44      	ldr	r3, [pc, #272]	@ (8004654 <StartDefaultTask+0x10e4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a42      	ldr	r2, [pc, #264]	@ (8004650 <StartDefaultTask+0x10e0>)
 8004546:	6013      	str	r3, [r2, #0]
				  while(HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1) { // Leave on press
 8004548:	2101      	movs	r1, #1
 800454a:	4847      	ldr	r0, [pc, #284]	@ (8004668 <StartDefaultTask+0x10f8>)
 800454c:	f002 fcb2 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8004550:	4603      	mov	r3, r0
 8004552:	2b01      	cmp	r3, #1
 8004554:	f43f aec9 	beq.w	80042ea <StartDefaultTask+0xd7a>
					} ///////// case 2
				  }
				  //update the eeprom with new values
				  SPIF_EraseSector(&spif, eepDisplay[dispCount]);
 8004558:	4b44      	ldr	r3, [pc, #272]	@ (800466c <StartDefaultTask+0x10fc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a44      	ldr	r2, [pc, #272]	@ (8004670 <StartDefaultTask+0x1100>)
 800455e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004562:	4619      	mov	r1, r3
 8004564:	4843      	ldr	r0, [pc, #268]	@ (8004674 <StartDefaultTask+0x1104>)
 8004566:	f001 fbb6 	bl	8005cd6 <SPIF_EraseSector>
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800456a:	2300      	movs	r3, #0
 800456c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004570:	e01c      	b.n	80045ac <StartDefaultTask+0x103c>
	//				EEPROM.update(eepDisplay[dispCount] + i, dN[i]);
					write[0] = dN[i];
 8004572:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004576:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 800457a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800457e:	4413      	add	r3, r2
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	4b3d      	ldr	r3, [pc, #244]	@ (8004678 <StartDefaultTask+0x1108>)
 8004584:	701a      	strb	r2, [r3, #0]
					SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, i);
 8004586:	4b39      	ldr	r3, [pc, #228]	@ (800466c <StartDefaultTask+0x10fc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a39      	ldr	r2, [pc, #228]	@ (8004670 <StartDefaultTask+0x1100>)
 800458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004590:	4619      	mov	r1, r3
 8004592:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2301      	movs	r3, #1
 800459a:	4a37      	ldr	r2, [pc, #220]	@ (8004678 <StartDefaultTask+0x1108>)
 800459c:	4835      	ldr	r0, [pc, #212]	@ (8004674 <StartDefaultTask+0x1104>)
 800459e:	f001 fc1d 	bl	8005ddc <SPIF_WriteSector>
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80045a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045a6:	3301      	adds	r3, #1
 80045a8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80045ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	ddde      	ble.n	8004572 <StartDefaultTask+0x1002>
				  }
	//			  EEPROM.update(eepDisplay[dispCount] + 7, dM);
	//			  EEPROM.update(eepDisplay[dispCount] + 8, dK/25);
				  write[0] = dM;
 80045b4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004678 <StartDefaultTask+0x1108>)
 80045bc:	701a      	strb	r2, [r3, #0]
				  SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, 7);
 80045be:	4b2b      	ldr	r3, [pc, #172]	@ (800466c <StartDefaultTask+0x10fc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004670 <StartDefaultTask+0x1100>)
 80045c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c8:	4619      	mov	r1, r3
 80045ca:	2307      	movs	r3, #7
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	2301      	movs	r3, #1
 80045d0:	4a29      	ldr	r2, [pc, #164]	@ (8004678 <StartDefaultTask+0x1108>)
 80045d2:	4828      	ldr	r0, [pc, #160]	@ (8004674 <StartDefaultTask+0x1104>)
 80045d4:	f001 fc02 	bl	8005ddc <SPIF_WriteSector>
				  write[0] = dK/25;
 80045d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80045dc:	4a1f      	ldr	r2, [pc, #124]	@ (800465c <StartDefaultTask+0x10ec>)
 80045de:	fb82 1203 	smull	r1, r2, r2, r3
 80045e2:	10d2      	asrs	r2, r2, #3
 80045e4:	17db      	asrs	r3, r3, #31
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4b23      	ldr	r3, [pc, #140]	@ (8004678 <StartDefaultTask+0x1108>)
 80045ec:	701a      	strb	r2, [r3, #0]
				  SPIF_WriteSector(&spif, eepDisplay[dispCount], write, 1, 8);
 80045ee:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <StartDefaultTask+0x10fc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004670 <StartDefaultTask+0x1100>)
 80045f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f8:	4619      	mov	r1, r3
 80045fa:	2308      	movs	r3, #8
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	2301      	movs	r3, #1
 8004600:	4a1d      	ldr	r2, [pc, #116]	@ (8004678 <StartDefaultTask+0x1108>)
 8004602:	481c      	ldr	r0, [pc, #112]	@ (8004674 <StartDefaultTask+0x1104>)
 8004604:	f001 fbea 	bl	8005ddc <SPIF_WriteSector>

				  HAL_Delay(500);
 8004608:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800460c:	f002 f878 	bl	8006700 <HAL_Delay>
				  add = false;
 8004610:	4b1a      	ldr	r3, [pc, #104]	@ (800467c <StartDefaultTask+0x110c>)
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
				  pause = false;
 8004616:	4b1a      	ldr	r3, [pc, #104]	@ (8004680 <StartDefaultTask+0x1110>)
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
				  toDisplay();
 800461c:	f7fd f9bc 	bl	8001998 <toDisplay>

				  char str[8];
				  if (dispCount == count) {
 8004620:	4b12      	ldr	r3, [pc, #72]	@ (800466c <StartDefaultTask+0x10fc>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b17      	ldr	r3, [pc, #92]	@ (8004684 <StartDefaultTask+0x1114>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d106      	bne.n	800463a <StartDefaultTask+0x10ca>
					str[0] = ':'; //EMPTY
 800462c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004630:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004634:	223a      	movs	r2, #58	@ 0x3a
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e04e      	b.n	80046d8 <StartDefaultTask+0x1168>
				  }
				  else {
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800463a:	2300      	movs	r3, #0
 800463c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004640:	e040      	b.n	80046c4 <StartDefaultTask+0x1154>
 8004642:	bf00      	nop
 8004644:	f3af 8000 	nop.w
 8004648:	d2f1a9fc 	.word	0xd2f1a9fc
 800464c:	3f50624d 	.word	0x3f50624d
 8004650:	20000764 	.word	0x20000764
 8004654:	200006f8 	.word	0x200006f8
 8004658:	20000700 	.word	0x20000700
 800465c:	51eb851f 	.word	0x51eb851f
 8004660:	0800d6c0 	.word	0x0800d6c0
 8004664:	20000760 	.word	0x20000760
 8004668:	40011000 	.word	0x40011000
 800466c:	200006ec 	.word	0x200006ec
 8004670:	200006ac 	.word	0x200006ac
 8004674:	20000678 	.word	0x20000678
 8004678:	20000710 	.word	0x20000710
 800467c:	200006f5 	.word	0x200006f5
 8004680:	2000000c 	.word	0x2000000c
 8004684:	200006f0 	.word	0x200006f0
	//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
					  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8004688:	4b8f      	ldr	r3, [pc, #572]	@ (80048c8 <StartDefaultTask+0x1358>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a8f      	ldr	r2, [pc, #572]	@ (80048cc <StartDefaultTask+0x135c>)
 800468e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004692:	4619      	mov	r1, r3
 8004694:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	2301      	movs	r3, #1
 800469c:	4a8c      	ldr	r2, [pc, #560]	@ (80048d0 <StartDefaultTask+0x1360>)
 800469e:	488d      	ldr	r0, [pc, #564]	@ (80048d4 <StartDefaultTask+0x1364>)
 80046a0:	f001 fc06 	bl	8005eb0 <SPIF_ReadSector>
					  str[i] = read[0];
 80046a4:	4b8a      	ldr	r3, [pc, #552]	@ (80048d0 <StartDefaultTask+0x1360>)
 80046a6:	7819      	ldrb	r1, [r3, #0]
 80046a8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80046ac:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 80046b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80046b4:	4413      	add	r3, r2
 80046b6:	460a      	mov	r2, r1
 80046b8:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80046ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80046be:	3301      	adds	r3, #1
 80046c0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80046c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80046c8:	2b06      	cmp	r3, #6
 80046ca:	dddd      	ble.n	8004688 <StartDefaultTask+0x1118>
					}
					str[7] = 0;
 80046cc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80046d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80046d4:	2200      	movs	r2, #0
 80046d6:	71da      	strb	r2, [r3, #7]
	//			  Serial.print(str);
	//			  printFloat2(store,3);
	//			  Serial2.println("");

	//			  float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 80046d8:	4b7b      	ldr	r3, [pc, #492]	@ (80048c8 <StartDefaultTask+0x1358>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a7b      	ldr	r2, [pc, #492]	@ (80048cc <StartDefaultTask+0x135c>)
 80046de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e2:	4619      	mov	r1, r3
 80046e4:	2307      	movs	r3, #7
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2301      	movs	r3, #1
 80046ea:	4a79      	ldr	r2, [pc, #484]	@ (80048d0 <StartDefaultTask+0x1360>)
 80046ec:	4879      	ldr	r0, [pc, #484]	@ (80048d4 <StartDefaultTask+0x1364>)
 80046ee:	f001 fbdf 	bl	8005eb0 <SPIF_ReadSector>
			      int val1 = read[0];
 80046f2:	4b77      	ldr	r3, [pc, #476]	@ (80048d0 <StartDefaultTask+0x1360>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 80046fa:	4b73      	ldr	r3, [pc, #460]	@ (80048c8 <StartDefaultTask+0x1358>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a73      	ldr	r2, [pc, #460]	@ (80048cc <StartDefaultTask+0x135c>)
 8004700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004704:	4619      	mov	r1, r3
 8004706:	2308      	movs	r3, #8
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2301      	movs	r3, #1
 800470c:	4a70      	ldr	r2, [pc, #448]	@ (80048d0 <StartDefaultTask+0x1360>)
 800470e:	4871      	ldr	r0, [pc, #452]	@ (80048d4 <StartDefaultTask+0x1364>)
 8004710:	f001 fbce 	bl	8005eb0 <SPIF_ReadSector>
				  int val2 = read[0];
 8004714:	4b6e      	ldr	r3, [pc, #440]	@ (80048d0 <StartDefaultTask+0x1360>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				  float store = val1 + (.025 * val2);
 800471c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004720:	f7fb fee0 	bl	80004e4 <__aeabi_i2d>
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
 8004728:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800472c:	f7fb feda 	bl	80004e4 <__aeabi_i2d>
 8004730:	a363      	add	r3, pc, #396	@ (adr r3, 80048c0 <StartDefaultTask+0x1350>)
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f7fb ff3f 	bl	80005b8 <__aeabi_dmul>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4620      	mov	r0, r4
 8004740:	4629      	mov	r1, r5
 8004742:	f7fb fd83 	bl	800024c <__adddf3>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	f7fc fa0b 	bl	8000b68 <__aeabi_d2f>
 8004752:	4603      	mov	r3, r0
 8004754:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

				  sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 8004758:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800475c:	f7fb fed4 	bl	8000508 <__aeabi_f2d>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8004768:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800476c:	e9cd 2300 	strd	r2, r3, [sp]
 8004770:	460b      	mov	r3, r1
 8004772:	2265      	movs	r2, #101	@ 0x65
 8004774:	4958      	ldr	r1, [pc, #352]	@ (80048d8 <StartDefaultTask+0x1368>)
 8004776:	f006 fcc1 	bl	800b0fc <siprintf>
				  LCDPrint(toPrint);
 800477a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe fafc 	bl	8002d7c <LCDPrint>
 8004784:	e13a      	b.n	80049fc <StartDefaultTask+0x148c>
				}
			  }
			  else if (currentA) { //delete
 8004786:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8136 	beq.w	80049fc <StartDefaultTask+0x148c>
				if (dispCount != count) { // Not empty
 8004790:	4b4d      	ldr	r3, [pc, #308]	@ (80048c8 <StartDefaultTask+0x1358>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b51      	ldr	r3, [pc, #324]	@ (80048dc <StartDefaultTask+0x136c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d07f      	beq.n	800489c <StartDefaultTask+0x132c>
				  delc = 0;
 800479c:	4b50      	ldr	r3, [pc, #320]	@ (80048e0 <StartDefaultTask+0x1370>)
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
				  del = true;
 80047a2:	4b50      	ldr	r3, [pc, #320]	@ (80048e4 <StartDefaultTask+0x1374>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	701a      	strb	r2, [r3, #0]
				  pause = true;
 80047a8:	4b4f      	ldr	r3, [pc, #316]	@ (80048e8 <StartDefaultTask+0x1378>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
				  char dN[8];
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80047b4:	e01d      	b.n	80047f2 <StartDefaultTask+0x1282>
	//				dN[i] = EEPROM.read(eepDisplay[dispCount] + i);
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 80047b6:	4b44      	ldr	r3, [pc, #272]	@ (80048c8 <StartDefaultTask+0x1358>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a44      	ldr	r2, [pc, #272]	@ (80048cc <StartDefaultTask+0x135c>)
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	4619      	mov	r1, r3
 80047c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2301      	movs	r3, #1
 80047ca:	4a41      	ldr	r2, [pc, #260]	@ (80048d0 <StartDefaultTask+0x1360>)
 80047cc:	4841      	ldr	r0, [pc, #260]	@ (80048d4 <StartDefaultTask+0x1364>)
 80047ce:	f001 fb6f 	bl	8005eb0 <SPIF_ReadSector>
					dN[i] = read[0];
 80047d2:	4b3f      	ldr	r3, [pc, #252]	@ (80048d0 <StartDefaultTask+0x1360>)
 80047d4:	7819      	ldrb	r1, [r3, #0]
 80047d6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80047da:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 80047de:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047e2:	4413      	add	r3, r2
 80047e4:	460a      	mov	r2, r1
 80047e6:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80047e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047ec:	3301      	adds	r3, #1
 80047ee:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80047f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	dddd      	ble.n	80047b6 <StartDefaultTask+0x1246>
				  }
	//			  Serial2.print("d");
	//			  Serial2.print(delc);
	//			  Serial2.print(dN);
	//			  Serial2.println("");
				  sprintf(toPrint, "%c%d%s",'d',delc,dN);
 80047fa:	4b39      	ldr	r3, [pc, #228]	@ (80048e0 <StartDefaultTask+0x1370>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	2264      	movs	r2, #100	@ 0x64
 800480c:	4937      	ldr	r1, [pc, #220]	@ (80048ec <StartDefaultTask+0x137c>)
 800480e:	f006 fc75 	bl	800b0fc <siprintf>
				  LCDPrint(toPrint);
 8004812:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fab0 	bl	8002d7c <LCDPrint>
				  HAL_Delay(500);
 800481c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004820:	f001 ff6e 	bl	8006700 <HAL_Delay>
				  while (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 1) {
 8004824:	e01a      	b.n	800485c <StartDefaultTask+0x12ec>
					static int last_delc = 0;
					if (last_delc != delc) {
 8004826:	4b32      	ldr	r3, [pc, #200]	@ (80048f0 <StartDefaultTask+0x1380>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b2d      	ldr	r3, [pc, #180]	@ (80048e0 <StartDefaultTask+0x1370>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d014      	beq.n	800485c <StartDefaultTask+0x12ec>
	//				  Serial2.print("d");
	//				  Serial2.print(delc);
	//				  Serial2.print(dN);
	//				  Serial2.println("");
					  sprintf(toPrint, "%c%d%s",'d',delc,dN);
 8004832:	4b2b      	ldr	r3, [pc, #172]	@ (80048e0 <StartDefaultTask+0x1370>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800483a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	2264      	movs	r2, #100	@ 0x64
 8004844:	4929      	ldr	r1, [pc, #164]	@ (80048ec <StartDefaultTask+0x137c>)
 8004846:	f006 fc59 	bl	800b0fc <siprintf>
					  LCDPrint(toPrint);
 800484a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fa94 	bl	8002d7c <LCDPrint>
					  last_delc = delc;
 8004854:	4b22      	ldr	r3, [pc, #136]	@ (80048e0 <StartDefaultTask+0x1370>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a25      	ldr	r2, [pc, #148]	@ (80048f0 <StartDefaultTask+0x1380>)
 800485a:	6013      	str	r3, [r2, #0]
				  while (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 1) {
 800485c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004860:	4824      	ldr	r0, [pc, #144]	@ (80048f4 <StartDefaultTask+0x1384>)
 8004862:	f002 fb27 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8004866:	4603      	mov	r3, r0
 8004868:	2b01      	cmp	r3, #1
 800486a:	d0dc      	beq.n	8004826 <StartDefaultTask+0x12b6>
					}
				  }
				  if (delc > 0) { //
 800486c:	4b1c      	ldr	r3, [pc, #112]	@ (80048e0 <StartDefaultTask+0x1370>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	dd07      	ble.n	8004884 <StartDefaultTask+0x1314>
					toDelete(eepDisplay[dispCount]);
 8004874:	4b14      	ldr	r3, [pc, #80]	@ (80048c8 <StartDefaultTask+0x1358>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a14      	ldr	r2, [pc, #80]	@ (80048cc <StartDefaultTask+0x135c>)
 800487a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd f92a 	bl	8001ad8 <toDelete>
				  }
				  del = false;
 8004884:	4b17      	ldr	r3, [pc, #92]	@ (80048e4 <StartDefaultTask+0x1374>)
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
				  pause = false;
 800488a:	4b17      	ldr	r3, [pc, #92]	@ (80048e8 <StartDefaultTask+0x1378>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
				  toDisplay();
 8004890:	f7fd f882 	bl	8001998 <toDisplay>
				  HAL_Delay(500);
 8004894:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004898:	f001 ff32 	bl	8006700 <HAL_Delay>
				}
				char str[8];
				if (dispCount == count) {
 800489c:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <StartDefaultTask+0x1358>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <StartDefaultTask+0x136c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d106      	bne.n	80048b6 <StartDefaultTask+0x1346>
				  str[0] = ':'; //EMPTY
 80048a8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80048ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80048b0:	223a      	movs	r2, #58	@ 0x3a
 80048b2:	701a      	strb	r2, [r3, #0]
 80048b4:	e048      	b.n	8004948 <StartDefaultTask+0x13d8>
				}
				else {
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 80048b6:	2300      	movs	r3, #0
 80048b8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80048bc:	e03a      	b.n	8004934 <StartDefaultTask+0x13c4>
 80048be:	bf00      	nop
 80048c0:	9999999a 	.word	0x9999999a
 80048c4:	3f999999 	.word	0x3f999999
 80048c8:	200006ec 	.word	0x200006ec
 80048cc:	200006ac 	.word	0x200006ac
 80048d0:	2000070c 	.word	0x2000070c
 80048d4:	20000678 	.word	0x20000678
 80048d8:	0800d6b4 	.word	0x0800d6b4
 80048dc:	200006f0 	.word	0x200006f0
 80048e0:	20000704 	.word	0x20000704
 80048e4:	200006f6 	.word	0x200006f6
 80048e8:	2000000c 	.word	0x2000000c
 80048ec:	0800d6cc 	.word	0x0800d6cc
 80048f0:	20000768 	.word	0x20000768
 80048f4:	40011800 	.word	0x40011800
	//				str[i] = EEPROM.read(eepDisplay[dispCount] + i);
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 80048f8:	4bad      	ldr	r3, [pc, #692]	@ (8004bb0 <StartDefaultTask+0x1640>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4aad      	ldr	r2, [pc, #692]	@ (8004bb4 <StartDefaultTask+0x1644>)
 80048fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004902:	4619      	mov	r1, r3
 8004904:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2301      	movs	r3, #1
 800490c:	4aaa      	ldr	r2, [pc, #680]	@ (8004bb8 <StartDefaultTask+0x1648>)
 800490e:	48ab      	ldr	r0, [pc, #684]	@ (8004bbc <StartDefaultTask+0x164c>)
 8004910:	f001 face 	bl	8005eb0 <SPIF_ReadSector>
					str[i] = read[0];
 8004914:	4ba8      	ldr	r3, [pc, #672]	@ (8004bb8 <StartDefaultTask+0x1648>)
 8004916:	7819      	ldrb	r1, [r3, #0]
 8004918:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800491c:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8004920:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004924:	4413      	add	r3, r2
 8004926:	460a      	mov	r2, r1
 8004928:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 800492a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800492e:	3301      	adds	r3, #1
 8004930:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004934:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004938:	2b06      	cmp	r3, #6
 800493a:	dddd      	ble.n	80048f8 <StartDefaultTask+0x1388>
				  }
				  str[7] = 0;
 800493c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004940:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004944:	2200      	movs	r2, #0
 8004946:	71da      	strb	r2, [r3, #7]
	//			Serial.print(str);
	//			printFloat2(store,3);
	//			Serial2.println("");

	//			float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004948:	4b99      	ldr	r3, [pc, #612]	@ (8004bb0 <StartDefaultTask+0x1640>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a99      	ldr	r2, [pc, #612]	@ (8004bb4 <StartDefaultTask+0x1644>)
 800494e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004952:	4619      	mov	r1, r3
 8004954:	2307      	movs	r3, #7
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	2301      	movs	r3, #1
 800495a:	4a97      	ldr	r2, [pc, #604]	@ (8004bb8 <StartDefaultTask+0x1648>)
 800495c:	4897      	ldr	r0, [pc, #604]	@ (8004bbc <StartDefaultTask+0x164c>)
 800495e:	f001 faa7 	bl	8005eb0 <SPIF_ReadSector>
			    int val1 = read[0];
 8004962:	4b95      	ldr	r3, [pc, #596]	@ (8004bb8 <StartDefaultTask+0x1648>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 800496a:	4b91      	ldr	r3, [pc, #580]	@ (8004bb0 <StartDefaultTask+0x1640>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a91      	ldr	r2, [pc, #580]	@ (8004bb4 <StartDefaultTask+0x1644>)
 8004970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004974:	4619      	mov	r1, r3
 8004976:	2308      	movs	r3, #8
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	2301      	movs	r3, #1
 800497c:	4a8e      	ldr	r2, [pc, #568]	@ (8004bb8 <StartDefaultTask+0x1648>)
 800497e:	488f      	ldr	r0, [pc, #572]	@ (8004bbc <StartDefaultTask+0x164c>)
 8004980:	f001 fa96 	bl	8005eb0 <SPIF_ReadSector>
				int val2 = read[0];
 8004984:	4b8c      	ldr	r3, [pc, #560]	@ (8004bb8 <StartDefaultTask+0x1648>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				float store = val1 + (.025 * val2);
 800498c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8004990:	f7fb fda8 	bl	80004e4 <__aeabi_i2d>
 8004994:	4604      	mov	r4, r0
 8004996:	460d      	mov	r5, r1
 8004998:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800499c:	f7fb fda2 	bl	80004e4 <__aeabi_i2d>
 80049a0:	a381      	add	r3, pc, #516	@ (adr r3, 8004ba8 <StartDefaultTask+0x1638>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f7fb fe07 	bl	80005b8 <__aeabi_dmul>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4620      	mov	r0, r4
 80049b0:	4629      	mov	r1, r5
 80049b2:	f7fb fc4b 	bl	800024c <__adddf3>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	f7fc f8d3 	bl	8000b68 <__aeabi_d2f>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

			    sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 80049c8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 80049cc:	f7fb fd9c 	bl	8000508 <__aeabi_f2d>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80049d8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80049dc:	e9cd 2300 	strd	r2, r3, [sp]
 80049e0:	460b      	mov	r3, r1
 80049e2:	2265      	movs	r2, #101	@ 0x65
 80049e4:	4976      	ldr	r1, [pc, #472]	@ (8004bc0 <StartDefaultTask+0x1650>)
 80049e6:	f006 fb89 	bl	800b0fc <siprintf>
			    LCDPrint(toPrint);
 80049ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe f9c4 	bl	8002d7c <LCDPrint>
			    lastDC = dispCount;
 80049f4:	4b6e      	ldr	r3, [pc, #440]	@ (8004bb0 <StartDefaultTask+0x1640>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a72      	ldr	r2, [pc, #456]	@ (8004bc4 <StartDefaultTask+0x1654>)
 80049fa:	6013      	str	r3, [r2, #0]
			  }

			  if (lastDC != dispCount) {
 80049fc:	4b71      	ldr	r3, [pc, #452]	@ (8004bc4 <StartDefaultTask+0x1654>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b6b      	ldr	r3, [pc, #428]	@ (8004bb0 <StartDefaultTask+0x1640>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	f43e afdf 	beq.w	80039c8 <StartDefaultTask+0x458>
				char str[8];
				if (dispCount == count) {
 8004a0a:	4b69      	ldr	r3, [pc, #420]	@ (8004bb0 <StartDefaultTask+0x1640>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8004bc8 <StartDefaultTask+0x1658>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d106      	bne.n	8004a24 <StartDefaultTask+0x14b4>
				  str[0] = ':'; //EMPTY
 8004a16:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004a1a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004a1e:	223a      	movs	r2, #58	@ 0x3a
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	e02b      	b.n	8004a7c <StartDefaultTask+0x150c>
				}
				else {
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004a24:	2300      	movs	r3, #0
 8004a26:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004a2a:	e01d      	b.n	8004a68 <StartDefaultTask+0x14f8>
	//				str[i] = EEPROM.read(eepDisplay[dispCount] + i);
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8004a2c:	4b60      	ldr	r3, [pc, #384]	@ (8004bb0 <StartDefaultTask+0x1640>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a60      	ldr	r2, [pc, #384]	@ (8004bb4 <StartDefaultTask+0x1644>)
 8004a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a36:	4619      	mov	r1, r3
 8004a38:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	2301      	movs	r3, #1
 8004a40:	4a5d      	ldr	r2, [pc, #372]	@ (8004bb8 <StartDefaultTask+0x1648>)
 8004a42:	485e      	ldr	r0, [pc, #376]	@ (8004bbc <StartDefaultTask+0x164c>)
 8004a44:	f001 fa34 	bl	8005eb0 <SPIF_ReadSector>
					str[i] = read[0];
 8004a48:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb8 <StartDefaultTask+0x1648>)
 8004a4a:	7819      	ldrb	r1, [r3, #0]
 8004a4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004a50:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 8004a54:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004a58:	4413      	add	r3, r2
 8004a5a:	460a      	mov	r2, r1
 8004a5c:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004a5e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004a62:	3301      	adds	r3, #1
 8004a64:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004a68:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	dddd      	ble.n	8004a2c <StartDefaultTask+0x14bc>
				  }
				  str[7] = 0;
 8004a70:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004a74:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004a78:	2200      	movs	r2, #0
 8004a7a:	71da      	strb	r2, [r3, #7]
	//			Serial.print(str);
	//			printFloat2(store,3);
	//			Serial2.println("");

	//			float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8004bb0 <StartDefaultTask+0x1640>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a4c      	ldr	r2, [pc, #304]	@ (8004bb4 <StartDefaultTask+0x1644>)
 8004a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a86:	4619      	mov	r1, r3
 8004a88:	2307      	movs	r3, #7
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4a4a      	ldr	r2, [pc, #296]	@ (8004bb8 <StartDefaultTask+0x1648>)
 8004a90:	484a      	ldr	r0, [pc, #296]	@ (8004bbc <StartDefaultTask+0x164c>)
 8004a92:	f001 fa0d 	bl	8005eb0 <SPIF_ReadSector>
			    int val1 = read[0];
 8004a96:	4b48      	ldr	r3, [pc, #288]	@ (8004bb8 <StartDefaultTask+0x1648>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8004a9e:	4b44      	ldr	r3, [pc, #272]	@ (8004bb0 <StartDefaultTask+0x1640>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a44      	ldr	r2, [pc, #272]	@ (8004bb4 <StartDefaultTask+0x1644>)
 8004aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	2308      	movs	r3, #8
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4a41      	ldr	r2, [pc, #260]	@ (8004bb8 <StartDefaultTask+0x1648>)
 8004ab2:	4842      	ldr	r0, [pc, #264]	@ (8004bbc <StartDefaultTask+0x164c>)
 8004ab4:	f001 f9fc 	bl	8005eb0 <SPIF_ReadSector>
				int val2 = read[0];
 8004ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8004bb8 <StartDefaultTask+0x1648>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				float store = val1 + (.025 * val2);
 8004ac0:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8004ac4:	f7fb fd0e 	bl	80004e4 <__aeabi_i2d>
 8004ac8:	4604      	mov	r4, r0
 8004aca:	460d      	mov	r5, r1
 8004acc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8004ad0:	f7fb fd08 	bl	80004e4 <__aeabi_i2d>
 8004ad4:	a334      	add	r3, pc, #208	@ (adr r3, 8004ba8 <StartDefaultTask+0x1638>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f7fb fd6d 	bl	80005b8 <__aeabi_dmul>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f7fb fbb1 	bl	800024c <__adddf3>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	f7fc f839 	bl	8000b68 <__aeabi_d2f>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

			    sprintf(toPrint, "%c%s%0.3f", 'e',str,store);
 8004afc:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8004b00:	f7fb fd02 	bl	8000508 <__aeabi_f2d>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004b0c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004b10:	e9cd 2300 	strd	r2, r3, [sp]
 8004b14:	460b      	mov	r3, r1
 8004b16:	2265      	movs	r2, #101	@ 0x65
 8004b18:	4929      	ldr	r1, [pc, #164]	@ (8004bc0 <StartDefaultTask+0x1650>)
 8004b1a:	f006 faef 	bl	800b0fc <siprintf>
			    LCDPrint(toPrint);
 8004b1e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe f92a 	bl	8002d7c <LCDPrint>
				lastDC = dispCount;
 8004b28:	4b21      	ldr	r3, [pc, #132]	@ (8004bb0 <StartDefaultTask+0x1640>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a25      	ldr	r2, [pc, #148]	@ (8004bc4 <StartDefaultTask+0x1654>)
 8004b2e:	6013      	str	r3, [r2, #0]
			while (true) {
 8004b30:	f7fe bf4a 	b.w	80039c8 <StartDefaultTask+0x458>
				break;
 8004b34:	bf00      	nop
			  }
			}
			edit = false;
 8004b36:	4b25      	ldr	r3, [pc, #148]	@ (8004bcc <StartDefaultTask+0x165c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
			pause = false;
 8004b3c:	4b24      	ldr	r3, [pc, #144]	@ (8004bd0 <StartDefaultTask+0x1660>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
			dispCount = 0;
 8004b42:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb0 <StartDefaultTask+0x1640>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
	//		Serial2.print("f");
	//		printFloat2(freq,3);
	//		printFloat2(Standby,3);
	//		Serial2.println("");

		    sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8004b48:	4b22      	ldr	r3, [pc, #136]	@ (8004bd4 <StartDefaultTask+0x1664>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fb fcdb 	bl	8000508 <__aeabi_f2d>
 8004b52:	4604      	mov	r4, r0
 8004b54:	460d      	mov	r5, r1
 8004b56:	4b20      	ldr	r3, [pc, #128]	@ (8004bd8 <StartDefaultTask+0x1668>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fb fcd4 	bl	8000508 <__aeabi_f2d>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004b68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b6c:	e9cd 4500 	strd	r4, r5, [sp]
 8004b70:	2266      	movs	r2, #102	@ 0x66
 8004b72:	491a      	ldr	r1, [pc, #104]	@ (8004bdc <StartDefaultTask+0x166c>)
 8004b74:	f006 fac2 	bl	800b0fc <siprintf>
		    LCDPrint(toPrint);
 8004b78:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe f8fd 	bl	8002d7c <LCDPrint>

			freq_last = freq;
 8004b82:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <StartDefaultTask+0x1664>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a16      	ldr	r2, [pc, #88]	@ (8004be0 <StartDefaultTask+0x1670>)
 8004b88:	6013      	str	r3, [r2, #0]
			sfreq_last = Standby;
 8004b8a:	4b13      	ldr	r3, [pc, #76]	@ (8004bd8 <StartDefaultTask+0x1668>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <StartDefaultTask+0x1674>)
 8004b90:	6013      	str	r3, [r2, #0]
			HAL_Delay(500);
 8004b92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004b96:	f001 fdb3 	bl	8006700 <HAL_Delay>
			last = millis();
 8004b9a:	f7fd f8d5 	bl	8001d48 <millis>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4a11      	ldr	r2, [pc, #68]	@ (8004be8 <StartDefaultTask+0x1678>)
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e29c      	b.n	80050e0 <StartDefaultTask+0x1b70>
 8004ba6:	bf00      	nop
 8004ba8:	9999999a 	.word	0x9999999a
 8004bac:	3f999999 	.word	0x3f999999
 8004bb0:	200006ec 	.word	0x200006ec
 8004bb4:	200006ac 	.word	0x200006ac
 8004bb8:	2000070c 	.word	0x2000070c
 8004bbc:	20000678 	.word	0x20000678
 8004bc0:	0800d6b4 	.word	0x0800d6b4
 8004bc4:	2000076c 	.word	0x2000076c
 8004bc8:	200006f0 	.word	0x200006f0
 8004bcc:	200006a8 	.word	0x200006a8
 8004bd0:	2000000c 	.word	0x2000000c
 8004bd4:	20000698 	.word	0x20000698
 8004bd8:	20000004 	.word	0x20000004
 8004bdc:	0800d6a4 	.word	0x0800d6a4
 8004be0:	20000018 	.word	0x20000018
 8004be4:	2000001c 	.word	0x2000001c
 8004be8:	20000754 	.word	0x20000754
			  delay(20);
			}
			*/
		  }
		}
		else if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0 && !pause) { // Check if button is pressed
 8004bec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bf0:	48b9      	ldr	r0, [pc, #740]	@ (8004ed8 <StartDefaultTask+0x1968>)
 8004bf2:	f002 f95f 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d134      	bne.n	8004c66 <StartDefaultTask+0x16f6>
 8004bfc:	4bb7      	ldr	r3, [pc, #732]	@ (8004edc <StartDefaultTask+0x196c>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f083 0301 	eor.w	r3, r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d02d      	beq.n	8004c66 <StartDefaultTask+0x16f6>
		  float temp = freq;
 8004c0a:	4bb5      	ldr	r3, [pc, #724]	@ (8004ee0 <StartDefaultTask+0x1970>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		  int tk = KHz;
 8004c12:	4bb4      	ldr	r3, [pc, #720]	@ (8004ee4 <StartDefaultTask+0x1974>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		  int tm = MHz;
 8004c1a:	4bb3      	ldr	r3, [pc, #716]	@ (8004ee8 <StartDefaultTask+0x1978>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

		  freq = Standby;
 8004c22:	4bb2      	ldr	r3, [pc, #712]	@ (8004eec <StartDefaultTask+0x197c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4aae      	ldr	r2, [pc, #696]	@ (8004ee0 <StartDefaultTask+0x1970>)
 8004c28:	6013      	str	r3, [r2, #0]
		  KHz = SK;
 8004c2a:	4bb1      	ldr	r3, [pc, #708]	@ (8004ef0 <StartDefaultTask+0x1980>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4aad      	ldr	r2, [pc, #692]	@ (8004ee4 <StartDefaultTask+0x1974>)
 8004c30:	6013      	str	r3, [r2, #0]
		  MHz = SM;
 8004c32:	4bb0      	ldr	r3, [pc, #704]	@ (8004ef4 <StartDefaultTask+0x1984>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4aac      	ldr	r2, [pc, #688]	@ (8004ee8 <StartDefaultTask+0x1978>)
 8004c38:	6013      	str	r3, [r2, #0]

		  Standby = temp;
 8004c3a:	4aac      	ldr	r2, [pc, #688]	@ (8004eec <StartDefaultTask+0x197c>)
 8004c3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c40:	6013      	str	r3, [r2, #0]
		  SK = tk;
 8004c42:	4aab      	ldr	r2, [pc, #684]	@ (8004ef0 <StartDefaultTask+0x1980>)
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c48:	6013      	str	r3, [r2, #0]
		  SM = tm;
 8004c4a:	4aaa      	ldr	r2, [pc, #680]	@ (8004ef4 <StartDefaultTask+0x1984>)
 8004c4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004c50:	6013      	str	r3, [r2, #0]
		  HAL_Delay(500);
 8004c52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c56:	f001 fd53 	bl	8006700 <HAL_Delay>
		  last = millis();
 8004c5a:	f7fd f875 	bl	8001d48 <millis>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4aa5      	ldr	r2, [pc, #660]	@ (8004ef8 <StartDefaultTask+0x1988>)
 8004c62:	6013      	str	r3, [r2, #0]
		else if (HAL_GPIO_ReadPin(RIGHT_SW_GPIO_Port, RIGHT_SW_Pin) == 0 && !pause) { // Check if button is pressed
 8004c64:	e23c      	b.n	80050e0 <StartDefaultTask+0x1b70>
		}
		else if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) { // off/stored frequencies
 8004c66:	2101      	movs	r1, #1
 8004c68:	48a4      	ldr	r0, [pc, #656]	@ (8004efc <StartDefaultTask+0x198c>)
 8004c6a:	f002 f923 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f040 8235 	bne.w	80050e0 <StartDefaultTask+0x1b70>
		  if (!on) {
 8004c76:	4ba2      	ldr	r3, [pc, #648]	@ (8004f00 <StartDefaultTask+0x1990>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	f083 0301 	eor.w	r3, r3, #1
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d032      	beq.n	8004cea <StartDefaultTask+0x177a>
			on = true;
 8004c84:	4b9e      	ldr	r3, [pc, #632]	@ (8004f00 <StartDefaultTask+0x1990>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
			pause = false;
 8004c8a:	4b94      	ldr	r3, [pc, #592]	@ (8004edc <StartDefaultTask+0x196c>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	701a      	strb	r2, [r3, #0]
	//		Serial2.print("x"); // turn on
	//		Serial2.print("f");
	//		printFloat2(freq,3);
	//		printFloat2(Standby,3);
	//		Serial2.println("");
			LCDPrint("x");
 8004c90:	489c      	ldr	r0, [pc, #624]	@ (8004f04 <StartDefaultTask+0x1994>)
 8004c92:	f7fe f873 	bl	8002d7c <LCDPrint>
			sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8004c96:	4b92      	ldr	r3, [pc, #584]	@ (8004ee0 <StartDefaultTask+0x1970>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fb fc34 	bl	8000508 <__aeabi_f2d>
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	460d      	mov	r5, r1
 8004ca4:	4b91      	ldr	r3, [pc, #580]	@ (8004eec <StartDefaultTask+0x197c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fb fc2d 	bl	8000508 <__aeabi_f2d>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004cb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cba:	e9cd 4500 	strd	r4, r5, [sp]
 8004cbe:	2266      	movs	r2, #102	@ 0x66
 8004cc0:	4991      	ldr	r1, [pc, #580]	@ (8004f08 <StartDefaultTask+0x1998>)
 8004cc2:	f006 fa1b 	bl	800b0fc <siprintf>
		    LCDPrint(toPrint);
 8004cc6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe f856 	bl	8002d7c <LCDPrint>
			freq_last = freq;
 8004cd0:	4b83      	ldr	r3, [pc, #524]	@ (8004ee0 <StartDefaultTask+0x1970>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a8d      	ldr	r2, [pc, #564]	@ (8004f0c <StartDefaultTask+0x199c>)
 8004cd6:	6013      	str	r3, [r2, #0]
			sfreq_last = Standby;
 8004cd8:	4b84      	ldr	r3, [pc, #528]	@ (8004eec <StartDefaultTask+0x197c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a8c      	ldr	r2, [pc, #560]	@ (8004f10 <StartDefaultTask+0x19a0>)
 8004cde:	6013      	str	r3, [r2, #0]
			HAL_Delay(500);
 8004ce0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004ce4:	f001 fd0c 	bl	8006700 <HAL_Delay>
 8004ce8:	e1f5      	b.n	80050d6 <StartDefaultTask+0x1b66>
			// LOAD DATA, give old data from last session for display to load (can be done by just loading the data from eeprom into the global variables)
		  }
		  else { // it is already on
			unsigned long time = millis();
 8004cea:	f7fd f82d 	bl	8001d48 <millis>
 8004cee:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
			while (true) {
			  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 1 || (millis() - time > 3000)) {
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	4881      	ldr	r0, [pc, #516]	@ (8004efc <StartDefaultTask+0x198c>)
 8004cf6:	f002 f8dd 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d00a      	beq.n	8004d16 <StartDefaultTask+0x17a6>
 8004d00:	f7fd f822 	bl	8001d48 <millis>
 8004d04:	4602      	mov	r2, r0
 8004d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d800      	bhi.n	8004d16 <StartDefaultTask+0x17a6>
 8004d14:	e7ed      	b.n	8004cf2 <StartDefaultTask+0x1782>
				break;
			  }
			}
			if (millis() - time > 3000) {
 8004d16:	f7fd f817 	bl	8001d48 <millis>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d912      	bls.n	8004d50 <StartDefaultTask+0x17e0>
			  storestate();
 8004d2a:	f7fc fee5 	bl	8001af8 <storestate>
			  on = false;
 8004d2e:	4b74      	ldr	r3, [pc, #464]	@ (8004f00 <StartDefaultTask+0x1990>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
			  pause = true;
 8004d34:	4b69      	ldr	r3, [pc, #420]	@ (8004edc <StartDefaultTask+0x196c>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
			  bscroll = false;
 8004d3a:	4b76      	ldr	r3, [pc, #472]	@ (8004f14 <StartDefaultTask+0x19a4>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
			  //Serial2.print("o");
			  LCDPrint("o");
 8004d40:	4875      	ldr	r0, [pc, #468]	@ (8004f18 <StartDefaultTask+0x19a8>)
 8004d42:	f7fe f81b 	bl	8002d7c <LCDPrint>
			  HAL_Delay(3000);
 8004d46:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004d4a:	f001 fcd9 	bl	8006700 <HAL_Delay>
 8004d4e:	e1c2      	b.n	80050d6 <StartDefaultTask+0x1b66>
			}
			else { // stored frequency mode
			  toDisplay();
 8004d50:	f7fc fe22 	bl	8001998 <toDisplay>
			  if (eepDisplay[0] == -1) { // no mem exit
 8004d54:	4b71      	ldr	r3, [pc, #452]	@ (8004f1c <StartDefaultTask+0x19ac>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d5c:	d10a      	bne.n	8004d74 <StartDefaultTask+0x1804>
				//Serial2.print("n");
				LCDPrint("n");
 8004d5e:	4870      	ldr	r0, [pc, #448]	@ (8004f20 <StartDefaultTask+0x19b0>)
 8004d60:	f7fe f80c 	bl	8002d7c <LCDPrint>
				HAL_Delay(500);
 8004d64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004d68:	f001 fcca 	bl	8006700 <HAL_Delay>
				temp = true;
 8004d6c:	4b6d      	ldr	r3, [pc, #436]	@ (8004f24 <StartDefaultTask+0x19b4>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e1b0      	b.n	80050d6 <StartDefaultTask+0x1b66>
			  }
			  else { // turn on stored frequency mode and stay until click again
				//initial print
				static int lastDC = 0;
				char str[8];
				for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004d74:	2300      	movs	r3, #0
 8004d76:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004d7a:	e01d      	b.n	8004db8 <StartDefaultTask+0x1848>
	//			  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
			      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);;
 8004d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004f28 <StartDefaultTask+0x19b8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a66      	ldr	r2, [pc, #408]	@ (8004f1c <StartDefaultTask+0x19ac>)
 8004d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d86:	4619      	mov	r1, r3
 8004d88:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4a66      	ldr	r2, [pc, #408]	@ (8004f2c <StartDefaultTask+0x19bc>)
 8004d92:	4867      	ldr	r0, [pc, #412]	@ (8004f30 <StartDefaultTask+0x19c0>)
 8004d94:	f001 f88c 	bl	8005eb0 <SPIF_ReadSector>
				  str[i] = read[0];
 8004d98:	4b64      	ldr	r3, [pc, #400]	@ (8004f2c <StartDefaultTask+0x19bc>)
 8004d9a:	7819      	ldrb	r1, [r3, #0]
 8004d9c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004da0:	f5a3 72aa 	sub.w	r2, r3, #340	@ 0x154
 8004da4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004da8:	4413      	add	r3, r2
 8004daa:	460a      	mov	r2, r1
 8004dac:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004dae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004db2:	3301      	adds	r3, #1
 8004db4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004db8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	dddd      	ble.n	8004d7c <StartDefaultTask+0x180c>
				}
				str[7] = 0;
 8004dc0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004dc4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004dc8:	2200      	movs	r2, #0
 8004dca:	71da      	strb	r2, [r3, #7]
	//			Serial2.print(str);
	//			printFloat2(store,3);
	//			Serial2.println("");

	//			float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
				SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004dcc:	4b56      	ldr	r3, [pc, #344]	@ (8004f28 <StartDefaultTask+0x19b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a52      	ldr	r2, [pc, #328]	@ (8004f1c <StartDefaultTask+0x19ac>)
 8004dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	2307      	movs	r3, #7
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2301      	movs	r3, #1
 8004dde:	4a53      	ldr	r2, [pc, #332]	@ (8004f2c <StartDefaultTask+0x19bc>)
 8004de0:	4853      	ldr	r0, [pc, #332]	@ (8004f30 <StartDefaultTask+0x19c0>)
 8004de2:	f001 f865 	bl	8005eb0 <SPIF_ReadSector>
			    int val1 = read[0];
 8004de6:	4b51      	ldr	r3, [pc, #324]	@ (8004f2c <StartDefaultTask+0x19bc>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8004dee:	4b4e      	ldr	r3, [pc, #312]	@ (8004f28 <StartDefaultTask+0x19b8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a4a      	ldr	r2, [pc, #296]	@ (8004f1c <StartDefaultTask+0x19ac>)
 8004df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4a4a      	ldr	r2, [pc, #296]	@ (8004f2c <StartDefaultTask+0x19bc>)
 8004e02:	484b      	ldr	r0, [pc, #300]	@ (8004f30 <StartDefaultTask+0x19c0>)
 8004e04:	f001 f854 	bl	8005eb0 <SPIF_ReadSector>
				int val2 = read[0];
 8004e08:	4b48      	ldr	r3, [pc, #288]	@ (8004f2c <StartDefaultTask+0x19bc>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
				float store = val1 + (.025 * val2);
 8004e10:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8004e14:	f7fb fb66 	bl	80004e4 <__aeabi_i2d>
 8004e18:	4604      	mov	r4, r0
 8004e1a:	460d      	mov	r5, r1
 8004e1c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8004e20:	f7fb fb60 	bl	80004e4 <__aeabi_i2d>
 8004e24:	a32a      	add	r3, pc, #168	@ (adr r3, 8004ed0 <StartDefaultTask+0x1960>)
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f7fb fbc5 	bl	80005b8 <__aeabi_dmul>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb fa09 	bl	800024c <__adddf3>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	f7fb fe91 	bl	8000b68 <__aeabi_d2f>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

				sprintf(toPrint, "%c%s%0.3f", 'k', str, store);
 8004e4c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8004e50:	f7fb fb5a 	bl	8000508 <__aeabi_f2d>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	f107 011c 	add.w	r1, r7, #28
 8004e5c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004e60:	e9cd 2300 	strd	r2, r3, [sp]
 8004e64:	460b      	mov	r3, r1
 8004e66:	226b      	movs	r2, #107	@ 0x6b
 8004e68:	4932      	ldr	r1, [pc, #200]	@ (8004f34 <StartDefaultTask+0x19c4>)
 8004e6a:	f006 f947 	bl	800b0fc <siprintf>
				LCDPrint(toPrint);
 8004e6e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd ff82 	bl	8002d7c <LCDPrint>

				pause = true;
 8004e78:	4b18      	ldr	r3, [pc, #96]	@ (8004edc <StartDefaultTask+0x196c>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
				bscroll = true;
 8004e7e:	4b25      	ldr	r3, [pc, #148]	@ (8004f14 <StartDefaultTask+0x19a4>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
				temp = true;
 8004e84:	4b27      	ldr	r3, [pc, #156]	@ (8004f24 <StartDefaultTask+0x19b4>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
				unsigned long timer = millis();
 8004e8a:	f7fc ff5d 	bl	8001d48 <millis>
 8004e8e:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
				bool valid = false;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
				//loop + scroll setup
				while (millis() - timer < 5000) {
 8004e98:	e0d2      	b.n	8005040 <StartDefaultTask+0x1ad0>
				  if (HAL_GPIO_ReadPin(LEFT_SW_GPIO_Port, LEFT_SW_Pin) == 0) {
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4817      	ldr	r0, [pc, #92]	@ (8004efc <StartDefaultTask+0x198c>)
 8004e9e:	f002 f809 	bl	8006eb4 <HAL_GPIO_ReadPin>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d103      	bne.n	8004eb0 <StartDefaultTask+0x1940>
					valid = true;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
					break;
 8004eae:	e0d2      	b.n	8005056 <StartDefaultTask+0x1ae6>
				  }
				  if (lastDC != dispCount) {
 8004eb0:	4b21      	ldr	r3, [pc, #132]	@ (8004f38 <StartDefaultTask+0x19c8>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f28 <StartDefaultTask+0x19b8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	f000 80c1 	beq.w	8005040 <StartDefaultTask+0x1ad0>
					timer = millis();
 8004ebe:	f7fc ff43 	bl	8001d48 <millis>
 8004ec2:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
					char str[8];
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004ecc:	e054      	b.n	8004f78 <StartDefaultTask+0x1a08>
 8004ece:	bf00      	nop
 8004ed0:	9999999a 	.word	0x9999999a
 8004ed4:	3f999999 	.word	0x3f999999
 8004ed8:	40011800 	.word	0x40011800
 8004edc:	2000000c 	.word	0x2000000c
 8004ee0:	20000698 	.word	0x20000698
 8004ee4:	2000069c 	.word	0x2000069c
 8004ee8:	20000000 	.word	0x20000000
 8004eec:	20000004 	.word	0x20000004
 8004ef0:	200006a0 	.word	0x200006a0
 8004ef4:	20000008 	.word	0x20000008
 8004ef8:	20000754 	.word	0x20000754
 8004efc:	40011000 	.word	0x40011000
 8004f00:	200006a9 	.word	0x200006a9
 8004f04:	0800d6d4 	.word	0x0800d6d4
 8004f08:	0800d6a4 	.word	0x0800d6a4
 8004f0c:	20000018 	.word	0x20000018
 8004f10:	2000001c 	.word	0x2000001c
 8004f14:	200006f4 	.word	0x200006f4
 8004f18:	0800d6d8 	.word	0x0800d6d8
 8004f1c:	200006ac 	.word	0x200006ac
 8004f20:	0800d6dc 	.word	0x0800d6dc
 8004f24:	20000708 	.word	0x20000708
 8004f28:	200006ec 	.word	0x200006ec
 8004f2c:	2000070c 	.word	0x2000070c
 8004f30:	20000678 	.word	0x20000678
 8004f34:	0800d6b4 	.word	0x0800d6b4
 8004f38:	20000770 	.word	0x20000770
	//				  str[i] = EEPROM.read(eepDisplay[dispCount] + i);
				      SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, i);
 8004f3c:	4bbe      	ldr	r3, [pc, #760]	@ (8005238 <StartDefaultTask+0x1cc8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4abe      	ldr	r2, [pc, #760]	@ (800523c <StartDefaultTask+0x1ccc>)
 8004f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f46:	4619      	mov	r1, r3
 8004f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4abb      	ldr	r2, [pc, #748]	@ (8005240 <StartDefaultTask+0x1cd0>)
 8004f52:	48bc      	ldr	r0, [pc, #752]	@ (8005244 <StartDefaultTask+0x1cd4>)
 8004f54:	f000 ffac 	bl	8005eb0 <SPIF_ReadSector>
					  str[i] = read[0];
 8004f58:	4bb9      	ldr	r3, [pc, #740]	@ (8005240 <StartDefaultTask+0x1cd0>)
 8004f5a:	7819      	ldrb	r1, [r3, #0]
 8004f5c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004f60:	f5a3 72ae 	sub.w	r2, r3, #348	@ 0x15c
 8004f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f68:	4413      	add	r3, r2
 8004f6a:	460a      	mov	r2, r1
 8004f6c:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 7; i++) { // 9 chars, first 7 are the name, last 2 are the freq
 8004f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f72:	3301      	adds	r3, #1
 8004f74:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f7c:	2b06      	cmp	r3, #6
 8004f7e:	dddd      	ble.n	8004f3c <StartDefaultTask+0x19cc>
					}
					str[7] = 0;
 8004f80:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8004f84:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004f88:	2200      	movs	r2, #0
 8004f8a:	71da      	strb	r2, [r3, #7]
	//				Serial2.print(str);
	//				Serial.print(str);
	//				printFloat2(store,3);
	//				Serial2.println("");
	//				float store = EEPROM.read(eepDisplay[dispCount] + 7) + (.025 * EEPROM.read(eepDisplay[dispCount] + 8));
					SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 8004f8c:	4baa      	ldr	r3, [pc, #680]	@ (8005238 <StartDefaultTask+0x1cc8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4aaa      	ldr	r2, [pc, #680]	@ (800523c <StartDefaultTask+0x1ccc>)
 8004f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f96:	4619      	mov	r1, r3
 8004f98:	2307      	movs	r3, #7
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4aa8      	ldr	r2, [pc, #672]	@ (8005240 <StartDefaultTask+0x1cd0>)
 8004fa0:	48a8      	ldr	r0, [pc, #672]	@ (8005244 <StartDefaultTask+0x1cd4>)
 8004fa2:	f000 ff85 	bl	8005eb0 <SPIF_ReadSector>
				    int val1 = read[0];
 8004fa6:	4ba6      	ldr	r3, [pc, #664]	@ (8005240 <StartDefaultTask+0x1cd0>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
				    SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8004fae:	4ba2      	ldr	r3, [pc, #648]	@ (8005238 <StartDefaultTask+0x1cc8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4aa2      	ldr	r2, [pc, #648]	@ (800523c <StartDefaultTask+0x1ccc>)
 8004fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	2308      	movs	r3, #8
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4a9f      	ldr	r2, [pc, #636]	@ (8005240 <StartDefaultTask+0x1cd0>)
 8004fc2:	48a0      	ldr	r0, [pc, #640]	@ (8005244 <StartDefaultTask+0x1cd4>)
 8004fc4:	f000 ff74 	bl	8005eb0 <SPIF_ReadSector>
					int val2 = read[0];
 8004fc8:	4b9d      	ldr	r3, [pc, #628]	@ (8005240 <StartDefaultTask+0x1cd0>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
					float store = val1 + (.025 * val2);
 8004fd0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8004fd4:	f7fb fa86 	bl	80004e4 <__aeabi_i2d>
 8004fd8:	4604      	mov	r4, r0
 8004fda:	460d      	mov	r5, r1
 8004fdc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8004fe0:	f7fb fa80 	bl	80004e4 <__aeabi_i2d>
 8004fe4:	a392      	add	r3, pc, #584	@ (adr r3, 8005230 <StartDefaultTask+0x1cc0>)
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f7fb fae5 	bl	80005b8 <__aeabi_dmul>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	f7fb f929 	bl	800024c <__adddf3>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4610      	mov	r0, r2
 8005000:	4619      	mov	r1, r3
 8005002:	f7fb fdb1 	bl	8000b68 <__aeabi_d2f>
 8005006:	4603      	mov	r3, r0
 8005008:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

					sprintf(toPrint, "%c%s%0.3f", 'k', str, store);
 800500c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8005010:	f7fb fa7a 	bl	8000508 <__aeabi_f2d>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	f107 0114 	add.w	r1, r7, #20
 800501c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005020:	e9cd 2300 	strd	r2, r3, [sp]
 8005024:	460b      	mov	r3, r1
 8005026:	226b      	movs	r2, #107	@ 0x6b
 8005028:	4987      	ldr	r1, [pc, #540]	@ (8005248 <StartDefaultTask+0x1cd8>)
 800502a:	f006 f867 	bl	800b0fc <siprintf>
					LCDPrint(toPrint);
 800502e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd fea2 	bl	8002d7c <LCDPrint>

					lastDC = dispCount;
 8005038:	4b7f      	ldr	r3, [pc, #508]	@ (8005238 <StartDefaultTask+0x1cc8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a83      	ldr	r2, [pc, #524]	@ (800524c <StartDefaultTask+0x1cdc>)
 800503e:	6013      	str	r3, [r2, #0]
				while (millis() - timer < 5000) {
 8005040:	f7fc fe82 	bl	8001d48 <millis>
 8005044:	4602      	mov	r2, r0
 8005046:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8005050:	4293      	cmp	r3, r2
 8005052:	f67f af22 	bls.w	8004e9a <StartDefaultTask+0x192a>
				  }
				}
				//post loop (pressed button)
				//change the standby to the stored that was selected and call it a day freq will update and display
				if (valid) {
 8005056:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800505a:	2b00      	cmp	r3, #0
 800505c:	d028      	beq.n	80050b0 <StartDefaultTask+0x1b40>
	//			  SM = EEPROM.read(eepDisplay[dispCount] + 7);
	//			  SK = EEPROM.read(eepDisplay[dispCount] + 8) * 25;
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 7);
 800505e:	4b76      	ldr	r3, [pc, #472]	@ (8005238 <StartDefaultTask+0x1cc8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a76      	ldr	r2, [pc, #472]	@ (800523c <StartDefaultTask+0x1ccc>)
 8005064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005068:	4619      	mov	r1, r3
 800506a:	2307      	movs	r3, #7
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	2301      	movs	r3, #1
 8005070:	4a73      	ldr	r2, [pc, #460]	@ (8005240 <StartDefaultTask+0x1cd0>)
 8005072:	4874      	ldr	r0, [pc, #464]	@ (8005244 <StartDefaultTask+0x1cd4>)
 8005074:	f000 ff1c 	bl	8005eb0 <SPIF_ReadSector>
				  SM = read[0];
 8005078:	4b71      	ldr	r3, [pc, #452]	@ (8005240 <StartDefaultTask+0x1cd0>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	4b74      	ldr	r3, [pc, #464]	@ (8005250 <StartDefaultTask+0x1ce0>)
 8005080:	601a      	str	r2, [r3, #0]
				  SPIF_ReadSector(&spif, eepDisplay[dispCount], read, 1, 8);
 8005082:	4b6d      	ldr	r3, [pc, #436]	@ (8005238 <StartDefaultTask+0x1cc8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6d      	ldr	r2, [pc, #436]	@ (800523c <StartDefaultTask+0x1ccc>)
 8005088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508c:	4619      	mov	r1, r3
 800508e:	2308      	movs	r3, #8
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	2301      	movs	r3, #1
 8005094:	4a6a      	ldr	r2, [pc, #424]	@ (8005240 <StartDefaultTask+0x1cd0>)
 8005096:	486b      	ldr	r0, [pc, #428]	@ (8005244 <StartDefaultTask+0x1cd4>)
 8005098:	f000 ff0a 	bl	8005eb0 <SPIF_ReadSector>
				  SK = read[0] * 25;
 800509c:	4b68      	ldr	r3, [pc, #416]	@ (8005240 <StartDefaultTask+0x1cd0>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009a      	lsls	r2, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	4a69      	ldr	r2, [pc, #420]	@ (8005254 <StartDefaultTask+0x1ce4>)
 80050ae:	6013      	str	r3, [r2, #0]
				}
				dispCount = 0;
 80050b0:	4b61      	ldr	r3, [pc, #388]	@ (8005238 <StartDefaultTask+0x1cc8>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
				lastDC = 0;
 80050b6:	4b65      	ldr	r3, [pc, #404]	@ (800524c <StartDefaultTask+0x1cdc>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
				pause = false;
 80050bc:	4b66      	ldr	r3, [pc, #408]	@ (8005258 <StartDefaultTask+0x1ce8>)
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
				bscroll = false;
 80050c2:	4b66      	ldr	r3, [pc, #408]	@ (800525c <StartDefaultTask+0x1cec>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
				LCDPrint("f");
 80050c8:	4865      	ldr	r0, [pc, #404]	@ (8005260 <StartDefaultTask+0x1cf0>)
 80050ca:	f7fd fe57 	bl	8002d7c <LCDPrint>
				HAL_Delay(500);
 80050ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80050d2:	f001 fb15 	bl	8006700 <HAL_Delay>
			  }
			}
		  }
		  last = millis();
 80050d6:	f7fc fe37 	bl	8001d48 <millis>
 80050da:	4603      	mov	r3, r0
 80050dc:	4a61      	ldr	r2, [pc, #388]	@ (8005264 <StartDefaultTask+0x1cf4>)
 80050de:	6013      	str	r3, [r2, #0]
		}

		// If count has changed print the new value to serial
		if (vol != vol_last) { // mode v
 80050e0:	4b61      	ldr	r3, [pc, #388]	@ (8005268 <StartDefaultTask+0x1cf8>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4b61      	ldr	r3, [pc, #388]	@ (800526c <StartDefaultTask+0x1cfc>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d03b      	beq.n	8005164 <StartDefaultTask+0x1bf4>
		  int V = vol + 48;
 80050ec:	4b5e      	ldr	r3, [pc, #376]	@ (8005268 <StartDefaultTask+0x1cf8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3330      	adds	r3, #48	@ 0x30
 80050f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  char v = (char)V;
 80050f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050fa:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		  char VSfinal[2] = {v,0};
 80050fe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005102:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005106:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005110:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005114:	2200      	movs	r2, #0
 8005116:	705a      	strb	r2, [r3, #1]
		  Sender(VSfinal,2); //set vol
 8005118:	f107 0310 	add.w	r3, r7, #16
 800511c:	2102      	movs	r1, #2
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe f93e 	bl	80033a0 <Sender>

	//	  Serial2.print("v");
	//	  printFloat2(freq,3);
	//	  Serial2.print(vol);
	//	  Serial2.println("");
		  sprintf(toPrint, "%c%0.3f%d", 'v', freq, vol);
 8005124:	4b52      	ldr	r3, [pc, #328]	@ (8005270 <StartDefaultTask+0x1d00>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f7fb f9ed 	bl	8000508 <__aeabi_f2d>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	494d      	ldr	r1, [pc, #308]	@ (8005268 <StartDefaultTask+0x1cf8>)
 8005134:	6809      	ldr	r1, [r1, #0]
 8005136:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800513a:	9102      	str	r1, [sp, #8]
 800513c:	e9cd 2300 	strd	r2, r3, [sp]
 8005140:	2276      	movs	r2, #118	@ 0x76
 8005142:	494c      	ldr	r1, [pc, #304]	@ (8005274 <StartDefaultTask+0x1d04>)
 8005144:	f005 ffda 	bl	800b0fc <siprintf>
		  LCDPrint(toPrint);
 8005148:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800514c:	4618      	mov	r0, r3
 800514e:	f7fd fe15 	bl	8002d7c <LCDPrint>

		  vol_last = vol;
 8005152:	4b45      	ldr	r3, [pc, #276]	@ (8005268 <StartDefaultTask+0x1cf8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a45      	ldr	r2, [pc, #276]	@ (800526c <StartDefaultTask+0x1cfc>)
 8005158:	6013      	str	r3, [r2, #0]
		  last = millis();
 800515a:	f7fc fdf5 	bl	8001d48 <millis>
 800515e:	4603      	mov	r3, r0
 8005160:	4a40      	ldr	r2, [pc, #256]	@ (8005264 <StartDefaultTask+0x1cf4>)
 8005162:	6013      	str	r3, [r2, #0]
		}
		if (obs != obs_last) { // mode s
 8005164:	4b44      	ldr	r3, [pc, #272]	@ (8005278 <StartDefaultTask+0x1d08>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b44      	ldr	r3, [pc, #272]	@ (800527c <StartDefaultTask+0x1d0c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d019      	beq.n	80051a4 <StartDefaultTask+0x1c34>

	//	  Serial2.print("s");
	//	  printFloat2(freq,3);
	//	  Serial2.print(squelch); //set vol/squelch
	//	  Serial2.println("");
		  sprintf(toPrint, "%c%03d", 'b', obs);
 8005170:	4b41      	ldr	r3, [pc, #260]	@ (8005278 <StartDefaultTask+0x1d08>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005178:	2262      	movs	r2, #98	@ 0x62
 800517a:	4941      	ldr	r1, [pc, #260]	@ (8005280 <StartDefaultTask+0x1d10>)
 800517c:	f005 ffbe 	bl	800b0fc <siprintf>
		  LCDPrint(toPrint);
 8005180:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005184:	4618      	mov	r0, r3
 8005186:	f7fd fdf9 	bl	8002d7c <LCDPrint>

		  Sender("",3);
 800518a:	2103      	movs	r1, #3
 800518c:	483d      	ldr	r0, [pc, #244]	@ (8005284 <StartDefaultTask+0x1d14>)
 800518e:	f7fe f907 	bl	80033a0 <Sender>
		  obs_last = obs;
 8005192:	4b39      	ldr	r3, [pc, #228]	@ (8005278 <StartDefaultTask+0x1d08>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a39      	ldr	r2, [pc, #228]	@ (800527c <StartDefaultTask+0x1d0c>)
 8005198:	6013      	str	r3, [r2, #0]
		  last = millis();
 800519a:	f7fc fdd5 	bl	8001d48 <millis>
 800519e:	4603      	mov	r3, r0
 80051a0:	4a30      	ldr	r2, [pc, #192]	@ (8005264 <StartDefaultTask+0x1cf4>)
 80051a2:	6013      	str	r3, [r2, #0]
		}
		if (freq != freq_last || Standby != sfreq_last) { // mode f
 80051a4:	4b32      	ldr	r3, [pc, #200]	@ (8005270 <StartDefaultTask+0x1d00>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a37      	ldr	r2, [pc, #220]	@ (8005288 <StartDefaultTask+0x1d18>)
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	4611      	mov	r1, r2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fb fd6e 	bl	8000c90 <__aeabi_fcmpeq>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00b      	beq.n	80051d2 <StartDefaultTask+0x1c62>
 80051ba:	4b34      	ldr	r3, [pc, #208]	@ (800528c <StartDefaultTask+0x1d1c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a34      	ldr	r2, [pc, #208]	@ (8005290 <StartDefaultTask+0x1d20>)
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fb fd63 	bl	8000c90 <__aeabi_fcmpeq>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f040 80c9 	bne.w	8005364 <StartDefaultTask+0x1df4>
		  int MA = MHz - 48;
 80051d2:	4b30      	ldr	r3, [pc, #192]	@ (8005294 <StartDefaultTask+0x1d24>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3b30      	subs	r3, #48	@ 0x30
 80051d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  int KA = (KHz/25) + 48;
 80051dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005298 <StartDefaultTask+0x1d28>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a2e      	ldr	r2, [pc, #184]	@ (800529c <StartDefaultTask+0x1d2c>)
 80051e2:	fb82 1203 	smull	r1, r2, r2, r3
 80051e6:	10d2      	asrs	r2, r2, #3
 80051e8:	17db      	asrs	r3, r3, #31
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	3330      	adds	r3, #48	@ 0x30
 80051ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  char m = (char)MA;
 80051f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		  char k = (char)KA;
 80051fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051fe:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		  char Mfinal[3] = {m,k,0};
 8005202:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005206:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800520a:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005214:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005218:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800521c:	705a      	strb	r2, [r3, #1]
 800521e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005222:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005226:	2200      	movs	r2, #0
 8005228:	709a      	strb	r2, [r3, #2]
 800522a:	e039      	b.n	80052a0 <StartDefaultTask+0x1d30>
 800522c:	f3af 8000 	nop.w
 8005230:	9999999a 	.word	0x9999999a
 8005234:	3f999999 	.word	0x3f999999
 8005238:	200006ec 	.word	0x200006ec
 800523c:	200006ac 	.word	0x200006ac
 8005240:	2000070c 	.word	0x2000070c
 8005244:	20000678 	.word	0x20000678
 8005248:	0800d6b4 	.word	0x0800d6b4
 800524c:	20000770 	.word	0x20000770
 8005250:	20000008 	.word	0x20000008
 8005254:	200006a0 	.word	0x200006a0
 8005258:	2000000c 	.word	0x2000000c
 800525c:	200006f4 	.word	0x200006f4
 8005260:	0800d6e0 	.word	0x0800d6e0
 8005264:	20000754 	.word	0x20000754
 8005268:	200006a4 	.word	0x200006a4
 800526c:	20000774 	.word	0x20000774
 8005270:	20000698 	.word	0x20000698
 8005274:	0800d6e4 	.word	0x0800d6e4
 8005278:	200006fc 	.word	0x200006fc
 800527c:	20000778 	.word	0x20000778
 8005280:	0800d6f0 	.word	0x0800d6f0
 8005284:	0800d6f8 	.word	0x0800d6f8
 8005288:	20000018 	.word	0x20000018
 800528c:	20000004 	.word	0x20000004
 8005290:	2000001c 	.word	0x2000001c
 8005294:	20000000 	.word	0x20000000
 8005298:	2000069c 	.word	0x2000069c
 800529c:	51eb851f 	.word	0x51eb851f
		  Sender(Mfinal, 0); //set active
 80052a0:	f107 030c 	add.w	r3, r7, #12
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe f87a 	bl	80033a0 <Sender>

		  MA = SM - 48;
 80052ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005368 <StartDefaultTask+0x1df8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3b30      	subs	r3, #48	@ 0x30
 80052b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  KA = (SK/25) + 48;
 80052b6:	4b2d      	ldr	r3, [pc, #180]	@ (800536c <StartDefaultTask+0x1dfc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005370 <StartDefaultTask+0x1e00>)
 80052bc:	fb82 1203 	smull	r1, r2, r2, r3
 80052c0:	10d2      	asrs	r2, r2, #3
 80052c2:	17db      	asrs	r3, r3, #31
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	3330      	adds	r3, #48	@ 0x30
 80052c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  m = (char)MA;
 80052cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		  k = (char)KA;
 80052d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052d8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		  char Sfinal[3] = {m,k,0};
 80052dc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80052e0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80052e4:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80052ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80052f2:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80052f6:	705a      	strb	r2, [r3, #1]
 80052f8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80052fc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005300:	2200      	movs	r2, #0
 8005302:	709a      	strb	r2, [r3, #2]
		  Sender(Sfinal, 1); //set standby
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	2101      	movs	r1, #1
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe f848 	bl	80033a0 <Sender>

	//	  Serial2.print("f");
	//	  printFloat2(freq,3);
	//	  printFloat2(Standby,3);
	//	  Serial2.println("");
		  sprintf(toPrint, "%c%0.3f%0.3f", 'f', freq, Standby);
 8005310:	4b18      	ldr	r3, [pc, #96]	@ (8005374 <StartDefaultTask+0x1e04>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f7fb f8f7 	bl	8000508 <__aeabi_f2d>
 800531a:	4604      	mov	r4, r0
 800531c:	460d      	mov	r5, r1
 800531e:	4b16      	ldr	r3, [pc, #88]	@ (8005378 <StartDefaultTask+0x1e08>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb f8f0 	bl	8000508 <__aeabi_f2d>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005330:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005334:	e9cd 4500 	strd	r4, r5, [sp]
 8005338:	2266      	movs	r2, #102	@ 0x66
 800533a:	4910      	ldr	r1, [pc, #64]	@ (800537c <StartDefaultTask+0x1e0c>)
 800533c:	f005 fede 	bl	800b0fc <siprintf>
		  LCDPrint(toPrint);
 8005340:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005344:	4618      	mov	r0, r3
 8005346:	f7fd fd19 	bl	8002d7c <LCDPrint>

		  sfreq_last = Standby;
 800534a:	4b0b      	ldr	r3, [pc, #44]	@ (8005378 <StartDefaultTask+0x1e08>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a0c      	ldr	r2, [pc, #48]	@ (8005380 <StartDefaultTask+0x1e10>)
 8005350:	6013      	str	r3, [r2, #0]
		  freq_last = freq;
 8005352:	4b08      	ldr	r3, [pc, #32]	@ (8005374 <StartDefaultTask+0x1e04>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a0b      	ldr	r2, [pc, #44]	@ (8005384 <StartDefaultTask+0x1e14>)
 8005358:	6013      	str	r3, [r2, #0]
		  last = millis();
 800535a:	f7fc fcf5 	bl	8001d48 <millis>
 800535e:	4603      	mov	r3, r0
 8005360:	4a09      	ldr	r2, [pc, #36]	@ (8005388 <StartDefaultTask+0x1e18>)
 8005362:	6013      	str	r3, [r2, #0]
	  {
 8005364:	f7fe b90c 	b.w	8003580 <StartDefaultTask+0x10>
 8005368:	20000008 	.word	0x20000008
 800536c:	200006a0 	.word	0x200006a0
 8005370:	51eb851f 	.word	0x51eb851f
 8005374:	20000698 	.word	0x20000698
 8005378:	20000004 	.word	0x20000004
 800537c:	0800d6a4 	.word	0x0800d6a4
 8005380:	2000001c 	.word	0x2000001c
 8005384:	20000018 	.word	0x20000018
 8005388:	20000754 	.word	0x20000754

0800538c <task2_init>:
		}
	  }
  /* USER CODE END 5 */
}

void task2_init(void const * argument) { // rx
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	uint8_t response = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	73fb      	strb	r3, [r7, #15]
	  for(;;)
	  {
		response = HAL_UART_Receive(&huart4, rxbuff, 1, 1000);
 8005398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800539c:	2201      	movs	r2, #1
 800539e:	4925      	ldr	r1, [pc, #148]	@ (8005434 <task2_init+0xa8>)
 80053a0:	4825      	ldr	r0, [pc, #148]	@ (8005438 <task2_init+0xac>)
 80053a2:	f003 fafe 	bl	80089a2 <HAL_UART_Receive>
 80053a6:	4603      	mov	r3, r0
 80053a8:	73fb      	strb	r3, [r7, #15]
		if(response==HAL_OK) //if transfer is successful
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d12b      	bne.n	8005408 <task2_init+0x7c>
		{
			if (faultcounter0 > 2)
 80053b0:	4b22      	ldr	r3, [pc, #136]	@ (800543c <task2_init+0xb0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	dd02      	ble.n	80053be <task2_init+0x32>
			{
				glcd_clearline(7);
 80053b8:	2007      	movs	r0, #7
 80053ba:	f7fc f9b7 	bl	800172c <glcd_clearline>
			}
			faultcounter0 = 0;
 80053be:	4b1f      	ldr	r3, [pc, #124]	@ (800543c <task2_init+0xb0>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

			rxmsg[rxcount] = rxbuff[0];
 80053c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005440 <task2_init+0xb4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005434 <task2_init+0xa8>)
 80053ca:	7811      	ldrb	r1, [r2, #0]
 80053cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005444 <task2_init+0xb8>)
 80053ce:	54d1      	strb	r1, [r2, r3]
			rxcount++;
 80053d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005440 <task2_init+0xb4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005440 <task2_init+0xb4>)
 80053d8:	6013      	str	r3, [r2, #0]
			if (rxcount > 24) {
 80053da:	4b19      	ldr	r3, [pc, #100]	@ (8005440 <task2_init+0xb4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b18      	cmp	r3, #24
 80053e0:	dd02      	ble.n	80053e8 <task2_init+0x5c>
				rxcount = 0;
 80053e2:	4b17      	ldr	r3, [pc, #92]	@ (8005440 <task2_init+0xb4>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
			}

			if (rxbuff[0] == '\n')
 80053e8:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <task2_init+0xa8>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b0a      	cmp	r3, #10
 80053ee:	d1d3      	bne.n	8005398 <task2_init+0xc>
			{
				rxmsg[rxcount] = 0;
 80053f0:	4b13      	ldr	r3, [pc, #76]	@ (8005440 <task2_init+0xb4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a13      	ldr	r2, [pc, #76]	@ (8005444 <task2_init+0xb8>)
 80053f6:	2100      	movs	r1, #0
 80053f8:	54d1      	strb	r1, [r2, r3]
				rxcount = 0;
 80053fa:	4b11      	ldr	r3, [pc, #68]	@ (8005440 <task2_init+0xb4>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
				rxfree = true;
 8005400:	4b11      	ldr	r3, [pc, #68]	@ (8005448 <task2_init+0xbc>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e7c7      	b.n	8005398 <task2_init+0xc>
			}
		}
		else { // no message in 1 seconds
			__HAL_UART_FLUSH_DRREGISTER(&huart4);  // Clear the UART Data Register
 8005408:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <task2_init+0xac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
			rxcount = 0;
 800540e:	4b0c      	ldr	r3, [pc, #48]	@ (8005440 <task2_init+0xb4>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
			faultcounter0++;
 8005414:	4b09      	ldr	r3, [pc, #36]	@ (800543c <task2_init+0xb0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	4a08      	ldr	r2, [pc, #32]	@ (800543c <task2_init+0xb0>)
 800541c:	6013      	str	r3, [r2, #0]
			if (faultcounter0 > 2) {
 800541e:	4b07      	ldr	r3, [pc, #28]	@ (800543c <task2_init+0xb0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b02      	cmp	r3, #2
 8005424:	ddb8      	ble.n	8005398 <task2_init+0xc>
				glcd_puts("Error 0", 0, 7);
 8005426:	2207      	movs	r2, #7
 8005428:	2100      	movs	r1, #0
 800542a:	4808      	ldr	r0, [pc, #32]	@ (800544c <task2_init+0xc0>)
 800542c:	f7fb ff42 	bl	80012b4 <glcd_puts>
		response = HAL_UART_Receive(&huart4, rxbuff, 1, 1000);
 8005430:	e7b2      	b.n	8005398 <task2_init+0xc>
 8005432:	bf00      	nop
 8005434:	20000714 	.word	0x20000714
 8005438:	2000050c 	.word	0x2000050c
 800543c:	20000738 	.word	0x20000738
 8005440:	20000734 	.word	0x20000734
 8005444:	20000718 	.word	0x20000718
 8005448:	20000740 	.word	0x20000740
 800544c:	0800d704 	.word	0x0800d704

08005450 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a04      	ldr	r2, [pc, #16]	@ (8005470 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d101      	bne.n	8005466 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005462:	f001 f931 	bl	80066c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40001000 	.word	0x40001000

08005474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005478:	b672      	cpsid	i
}
 800547a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800547c:	bf00      	nop
 800547e:	e7fd      	b.n	800547c <Error_Handler+0x8>

08005480 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 f939 	bl	8006700 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 800549e:	e002      	b.n	80054a6 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 80054a0:	2001      	movs	r0, #1
 80054a2:	f7ff ffed 	bl	8005480 <SPIF_Delay>
  while (Handle->Lock)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7b1b      	ldrb	r3, [r3, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f8      	bne.n	80054a0 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	731a      	strb	r2, [r3, #12]
}
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	731a      	strb	r2, [r3, #12]
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6858      	ldr	r0, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	4619      	mov	r1, r3
 80054ee:	f001 fcf8 	bl	8006ee2 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	e002      	b.n	80054fe <SPIF_CsPin+0x2a>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3301      	adds	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b09      	cmp	r3, #9
 8005502:	ddf9      	ble.n	80054f8 <SPIF_CsPin+0x24>
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b088      	sub	sp, #32
 8005512:	af02      	add	r7, sp, #8
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 800551c:	2300      	movs	r3, #0
 800551e:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	b29a      	uxth	r2, r3
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	f002 fc4a 	bl	8007dca <HAL_SPI_TransmitReceive>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 800553c:	2301      	movs	r3, #1
 800553e:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b086      	sub	sp, #24
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005558:	2300      	movs	r3, #0
 800555a:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	b29a      	uxth	r2, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	f002 f9d4 	bl	8007914 <HAL_SPI_Transmit>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8005576:	7dfb      	ldrb	r3, [r7, #23]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 800558e:	2300      	movs	r3, #0
 8005590:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	b29a      	uxth	r2, r3
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	f002 fafc 	bl	8007b9a <HAL_SPI_Receive>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <SPIF_Receive+0x2c>
  {
    retVal = true;
 80055a8:	2301      	movs	r3, #1
 80055aa:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80055be:	2301      	movs	r3, #1
 80055c0:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 80055c2:	2306      	movs	r3, #6
 80055c4:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80055c6:	2100      	movs	r1, #0
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff83 	bl	80054d4 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80055ce:	f107 010c 	add.w	r1, r7, #12
 80055d2:	2364      	movs	r3, #100	@ 0x64
 80055d4:	2201      	movs	r2, #1
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff ffb7 	bl	800554a <SPIF_Transmit>
 80055dc:	4603      	mov	r3, r0
 80055de:	f083 0301 	eor.w	r3, r3, #1
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 80055e8:	2300      	movs	r3, #0
 80055ea:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 80055ec:	2101      	movs	r1, #1
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff ff70 	bl	80054d4 <SPIF_CsPin>
  return retVal;
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8005606:	2301      	movs	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 800560a:	2304      	movs	r3, #4
 800560c:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 800560e:	2100      	movs	r1, #0
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff ff5f 	bl	80054d4 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8005616:	f107 010c 	add.w	r1, r7, #12
 800561a:	2364      	movs	r3, #100	@ 0x64
 800561c:	2201      	movs	r2, #1
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff ff93 	bl	800554a <SPIF_Transmit>
 8005624:	4603      	mov	r3, r0
 8005626:	f083 0301 	eor.w	r3, r3, #1
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8005630:	2300      	movs	r3, #0
 8005632:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8005634:	2101      	movs	r1, #1
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff ff4c 	bl	80054d4 <SPIF_CsPin>
  return retVal;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b086      	sub	sp, #24
 800564a:	af02      	add	r7, sp, #8
 800564c:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8005652:	f24a 5305 	movw	r3, #42245	@ 0xa505
 8005656:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8005658:	2100      	movs	r1, #0
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff ff3a 	bl	80054d4 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8005660:	f107 0208 	add.w	r2, r7, #8
 8005664:	f107 010c 	add.w	r1, r7, #12
 8005668:	2364      	movs	r3, #100	@ 0x64
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	2302      	movs	r3, #2
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff ff4d 	bl	800550e <SPIF_TransmitReceive>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 800567a:	7a7b      	ldrb	r3, [r7, #9]
 800567c:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 800567e:	2101      	movs	r1, #1
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff27 	bl	80054d4 <SPIF_CsPin>
  return retVal;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 800569a:	2300      	movs	r3, #0
 800569c:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 800569e:	f001 f825 	bl	80066ec <HAL_GetTick>
 80056a2:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 80056a4:	2001      	movs	r0, #1
 80056a6:	f7ff feeb 	bl	8005480 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 80056aa:	f001 f81f 	bl	80066ec <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d90a      	bls.n	80056d0 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff ffc3 	bl	8005646 <SPIF_ReadReg1>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1ec      	bne.n	80056a4 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 80056ca:	2301      	movs	r3, #1
 80056cc:	73fb      	strb	r3, [r7, #15]
      break;
 80056ce:	e000      	b.n	80056d2 <SPIF_WaitForWriting+0x42>
      break;
 80056d0:	bf00      	nop
    }
  }
  return retVal;
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 80056e4:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 80056e8:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 80056ea:	2300      	movs	r3, #0
 80056ec:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 80056ee:	2100      	movs	r1, #0
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff feef 	bl	80054d4 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 80056f6:	f107 020c 	add.w	r2, r7, #12
 80056fa:	f107 0110 	add.w	r1, r7, #16
 80056fe:	2364      	movs	r3, #100	@ 0x64
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	2304      	movs	r3, #4
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ff02 	bl	800550e <SPIF_TransmitReceive>
 800570a:	4603      	mov	r3, r0
 800570c:	f083 0301 	eor.w	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8005716:	2101      	movs	r1, #1
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fedb 	bl	80054d4 <SPIF_CsPin>
      break;
 800571e:	e16f      	b.n	8005a00 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8005720:	2101      	movs	r1, #1
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff fed6 	bl	80054d4 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8005728:	7b7a      	ldrb	r2, [r7, #13]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 800572e:	7bba      	ldrb	r2, [r7, #14]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8005734:	7bfa      	ldrb	r2, [r7, #15]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	7a1b      	ldrb	r3, [r3, #8]
 800573e:	2bef      	cmp	r3, #239	@ 0xef
 8005740:	f000 80f0 	beq.w	8005924 <SPIF_FindChip+0x248>
 8005744:	2bef      	cmp	r3, #239	@ 0xef
 8005746:	f300 80e9 	bgt.w	800591c <SPIF_FindChip+0x240>
 800574a:	2bc8      	cmp	r3, #200	@ 0xc8
 800574c:	f300 80e6 	bgt.w	800591c <SPIF_FindChip+0x240>
 8005750:	2b85      	cmp	r3, #133	@ 0x85
 8005752:	da0c      	bge.n	800576e <SPIF_FindChip+0x92>
 8005754:	2b62      	cmp	r3, #98	@ 0x62
 8005756:	f000 80e7 	beq.w	8005928 <SPIF_FindChip+0x24c>
 800575a:	2b62      	cmp	r3, #98	@ 0x62
 800575c:	f300 80de 	bgt.w	800591c <SPIF_FindChip+0x240>
 8005760:	2b20      	cmp	r3, #32
 8005762:	f300 80d9 	bgt.w	8005918 <SPIF_FindChip+0x23c>
 8005766:	2b00      	cmp	r3, #0
 8005768:	f300 8090 	bgt.w	800588c <SPIF_FindChip+0x1b0>
 800576c:	e0d6      	b.n	800591c <SPIF_FindChip+0x240>
 800576e:	3b85      	subs	r3, #133	@ 0x85
 8005770:	2b43      	cmp	r3, #67	@ 0x43
 8005772:	f200 80d3 	bhi.w	800591c <SPIF_FindChip+0x240>
 8005776:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <SPIF_FindChip+0xa0>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	0800592d 	.word	0x0800592d
 8005780:	0800591d 	.word	0x0800591d
 8005784:	0800591d 	.word	0x0800591d
 8005788:	0800591d 	.word	0x0800591d
 800578c:	0800592d 	.word	0x0800592d
 8005790:	0800591d 	.word	0x0800591d
 8005794:	0800591d 	.word	0x0800591d
 8005798:	0800592d 	.word	0x0800592d
 800579c:	0800591d 	.word	0x0800591d
 80057a0:	0800591d 	.word	0x0800591d
 80057a4:	0800591d 	.word	0x0800591d
 80057a8:	0800591d 	.word	0x0800591d
 80057ac:	0800591d 	.word	0x0800591d
 80057b0:	0800591d 	.word	0x0800591d
 80057b4:	0800591d 	.word	0x0800591d
 80057b8:	0800591d 	.word	0x0800591d
 80057bc:	0800591d 	.word	0x0800591d
 80057c0:	0800591d 	.word	0x0800591d
 80057c4:	0800591d 	.word	0x0800591d
 80057c8:	0800591d 	.word	0x0800591d
 80057cc:	0800591d 	.word	0x0800591d
 80057d0:	0800591d 	.word	0x0800591d
 80057d4:	0800591d 	.word	0x0800591d
 80057d8:	0800591d 	.word	0x0800591d
 80057dc:	0800592d 	.word	0x0800592d
 80057e0:	0800591d 	.word	0x0800591d
 80057e4:	0800592d 	.word	0x0800592d
 80057e8:	0800591d 	.word	0x0800591d
 80057ec:	0800592d 	.word	0x0800592d
 80057f0:	0800591d 	.word	0x0800591d
 80057f4:	0800591d 	.word	0x0800591d
 80057f8:	0800591d 	.word	0x0800591d
 80057fc:	0800591d 	.word	0x0800591d
 8005800:	0800591d 	.word	0x0800591d
 8005804:	0800591d 	.word	0x0800591d
 8005808:	0800591d 	.word	0x0800591d
 800580c:	0800591d 	.word	0x0800591d
 8005810:	0800591d 	.word	0x0800591d
 8005814:	0800591d 	.word	0x0800591d
 8005818:	0800591d 	.word	0x0800591d
 800581c:	0800592d 	.word	0x0800592d
 8005820:	0800591d 	.word	0x0800591d
 8005824:	0800591d 	.word	0x0800591d
 8005828:	0800591d 	.word	0x0800591d
 800582c:	0800591d 	.word	0x0800591d
 8005830:	0800591d 	.word	0x0800591d
 8005834:	0800591d 	.word	0x0800591d
 8005838:	0800591d 	.word	0x0800591d
 800583c:	0800591d 	.word	0x0800591d
 8005840:	0800591d 	.word	0x0800591d
 8005844:	0800591d 	.word	0x0800591d
 8005848:	0800591d 	.word	0x0800591d
 800584c:	0800591d 	.word	0x0800591d
 8005850:	0800591d 	.word	0x0800591d
 8005854:	0800591d 	.word	0x0800591d
 8005858:	0800591d 	.word	0x0800591d
 800585c:	0800591d 	.word	0x0800591d
 8005860:	0800591d 	.word	0x0800591d
 8005864:	0800592d 	.word	0x0800592d
 8005868:	0800591d 	.word	0x0800591d
 800586c:	0800591d 	.word	0x0800591d
 8005870:	0800592d 	.word	0x0800592d
 8005874:	0800591d 	.word	0x0800591d
 8005878:	0800591d 	.word	0x0800591d
 800587c:	0800591d 	.word	0x0800591d
 8005880:	0800591d 	.word	0x0800591d
 8005884:	0800591d 	.word	0x0800591d
 8005888:	0800592d 	.word	0x0800592d
 800588c:	3b01      	subs	r3, #1
 800588e:	2b1f      	cmp	r3, #31
 8005890:	d844      	bhi.n	800591c <SPIF_FindChip+0x240>
 8005892:	a201      	add	r2, pc, #4	@ (adr r2, 8005898 <SPIF_FindChip+0x1bc>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	08005931 	.word	0x08005931
 800589c:	0800591d 	.word	0x0800591d
 80058a0:	0800591d 	.word	0x0800591d
 80058a4:	08005931 	.word	0x08005931
 80058a8:	0800591d 	.word	0x0800591d
 80058ac:	0800591d 	.word	0x0800591d
 80058b0:	0800591d 	.word	0x0800591d
 80058b4:	0800591d 	.word	0x0800591d
 80058b8:	0800591d 	.word	0x0800591d
 80058bc:	0800591d 	.word	0x0800591d
 80058c0:	0800591d 	.word	0x0800591d
 80058c4:	0800591d 	.word	0x0800591d
 80058c8:	0800591d 	.word	0x0800591d
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	0800591d 	.word	0x0800591d
 80058d4:	0800591d 	.word	0x0800591d
 80058d8:	0800591d 	.word	0x0800591d
 80058dc:	0800591d 	.word	0x0800591d
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	0800591d 	.word	0x0800591d
 80058e8:	0800591d 	.word	0x0800591d
 80058ec:	0800591d 	.word	0x0800591d
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	0800591d 	.word	0x0800591d
 8005900:	0800591d 	.word	0x0800591d
 8005904:	08005931 	.word	0x08005931
 8005908:	0800591d 	.word	0x0800591d
 800590c:	0800591d 	.word	0x0800591d
 8005910:	0800591d 	.word	0x0800591d
 8005914:	08005931 	.word	0x08005931
 8005918:	2b37      	cmp	r3, #55	@ 0x37
 800591a:	d00b      	beq.n	8005934 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_BOYA:
      dprintf("BOYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8005922:	e008      	b.n	8005936 <SPIF_FindChip+0x25a>
      break;
 8005924:	bf00      	nop
 8005926:	e006      	b.n	8005936 <SPIF_FindChip+0x25a>
      break;
 8005928:	bf00      	nop
 800592a:	e004      	b.n	8005936 <SPIF_FindChip+0x25a>
      break;
 800592c:	bf00      	nop
 800592e:	e002      	b.n	8005936 <SPIF_FindChip+0x25a>
      break;
 8005930:	bf00      	nop
 8005932:	e000      	b.n	8005936 <SPIF_FindChip+0x25a>
      break;
 8005934:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	7a5b      	ldrb	r3, [r3, #9]
 800593a:	3b11      	subs	r3, #17
 800593c:	2b0f      	cmp	r3, #15
 800593e:	d84e      	bhi.n	80059de <SPIF_FindChip+0x302>
 8005940:	a201      	add	r2, pc, #4	@ (adr r2, 8005948 <SPIF_FindChip+0x26c>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	08005989 	.word	0x08005989
 800594c:	08005991 	.word	0x08005991
 8005950:	08005999 	.word	0x08005999
 8005954:	080059a1 	.word	0x080059a1
 8005958:	080059a9 	.word	0x080059a9
 800595c:	080059b1 	.word	0x080059b1
 8005960:	080059b9 	.word	0x080059b9
 8005964:	080059c1 	.word	0x080059c1
 8005968:	080059cb 	.word	0x080059cb
 800596c:	080059df 	.word	0x080059df
 8005970:	080059df 	.word	0x080059df
 8005974:	080059df 	.word	0x080059df
 8005978:	080059df 	.word	0x080059df
 800597c:	080059df 	.word	0x080059df
 8005980:	080059df 	.word	0x080059df
 8005984:	080059d5 	.word	0x080059d5
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 800598e:	e02a      	b.n	80059e6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2204      	movs	r2, #4
 8005994:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 8005996:	e026      	b.n	80059e6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2208      	movs	r2, #8
 800599c:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 800599e:	e022      	b.n	80059e6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2210      	movs	r2, #16
 80059a4:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80059a6:	e01e      	b.n	80059e6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 80059ae:	e01a      	b.n	80059e6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2240      	movs	r2, #64	@ 0x40
 80059b4:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 80059b6:	e016      	b.n	80059e6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2280      	movs	r2, #128	@ 0x80
 80059bc:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80059be:	e012      	b.n	80059e6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059c6:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 80059c8:	e00d      	b.n	80059e6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059d0:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 80059d2:	e008      	b.n	80059e6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059da:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 80059dc:	e003      	b.n	80059e6 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 80059e4:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	011a      	lsls	r2, r3, #4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	031b      	lsls	r3, r3, #12
 80059f6:	0a1a      	lsrs	r2, r3, #8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 80059fc:	2301      	movs	r3, #1
 80059fe:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop

08005a0c <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	@ 0x28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8005a20:	2300      	movs	r3, #0
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005a2a:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	f080 8084 	bcs.w	8005b40 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	2bff      	cmp	r3, #255	@ 0xff
 8005a3c:	f200 8082 	bhi.w	8005b44 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d901      	bls.n	8005a4c <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a52:	4413      	add	r3, r2
 8005a54:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff fdad 	bl	80055b6 <SPIF_WriteEnable>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f083 0301 	eor.w	r3, r3, #1
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d16f      	bne.n	8005b48 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8005a68:	2100      	movs	r1, #0
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f7ff fd32 	bl	80054d4 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a78:	d322      	bcc.n	8005ac0 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 8005a7a:	2312      	movs	r3, #18
 8005a7c:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	0e1b      	lsrs	r3, r3, #24
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	0c1b      	lsrs	r3, r3, #16
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8005a9c:	f107 0114 	add.w	r1, r7, #20
 8005aa0:	2364      	movs	r3, #100	@ 0x64
 8005aa2:	2205      	movs	r2, #5
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff fd50 	bl	800554a <SPIF_Transmit>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f083 0301 	eor.w	r3, r3, #1
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d023      	beq.n	8005afe <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff fd0b 	bl	80054d4 <SPIF_CsPin>
        break;
 8005abe:	e044      	b.n	8005b4a <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	0c1b      	lsrs	r3, r3, #16
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8005ada:	f107 0114 	add.w	r1, r7, #20
 8005ade:	2364      	movs	r3, #100	@ 0x64
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff fd31 	bl	800554a <SPIF_Transmit>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f083 0301 	eor.w	r3, r3, #1
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8005af4:	2101      	movs	r1, #1
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fcec 	bl	80054d4 <SPIF_CsPin>
        break;
 8005afc:	e025      	b.n	8005b4a <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8005afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff fd1f 	bl	800554a <SPIF_Transmit>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f083 0301 	eor.w	r3, r3, #1
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d004      	beq.n	8005b22 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8005b18:	2101      	movs	r1, #1
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f7ff fcda 	bl	80054d4 <SPIF_CsPin>
      break;
 8005b20:	e013      	b.n	8005b4a <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8005b22:	2101      	movs	r1, #1
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff fcd5 	bl	80054d4 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8005b2a:	2164      	movs	r1, #100	@ 0x64
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff fdaf 	bl	8005690 <SPIF_WaitForWriting>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005b3e:	e004      	b.n	8005b4a <SPIF_WriteFn+0x13e>
      break;
 8005b40:	bf00      	nop
 8005b42:	e002      	b.n	8005b4a <SPIF_WriteFn+0x13e>
      break;
 8005b44:	bf00      	nop
 8005b46:	e000      	b.n	8005b4a <SPIF_WriteFn+0x13e>
      break;
 8005b48:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7ff fd57 	bl	80055fe <SPIF_WriteDisable>
  return retVal;
 8005b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3728      	adds	r7, #40	@ 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8005b6e:	2100      	movs	r1, #0
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7ff fcaf 	bl	80054d4 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b7e:	d322      	bcc.n	8005bc6 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8005b80:	2313      	movs	r3, #19
 8005b82:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	0e1b      	lsrs	r3, r3, #24
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8005ba2:	f107 0110 	add.w	r1, r7, #16
 8005ba6:	2364      	movs	r3, #100	@ 0x64
 8005ba8:	2205      	movs	r2, #5
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f7ff fccd 	bl	800554a <SPIF_Transmit>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f083 0301 	eor.w	r3, r3, #1
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d023      	beq.n	8005c04 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff fc88 	bl	80054d4 <SPIF_CsPin>
        break;
 8005bc4:	e036      	b.n	8005c34 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	0a1b      	lsrs	r3, r3, #8
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8005be0:	f107 0110 	add.w	r1, r7, #16
 8005be4:	2364      	movs	r3, #100	@ 0x64
 8005be6:	2204      	movs	r2, #4
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff fcae 	bl	800554a <SPIF_Transmit>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f083 0301 	eor.w	r3, r3, #1
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fc69 	bl	80054d4 <SPIF_CsPin>
        break;
 8005c02:	e017      	b.n	8005c34 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8005c04:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7ff fcb7 	bl	8005580 <SPIF_Receive>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f083 0301 	eor.w	r3, r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d004      	beq.n	8005c28 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8005c1e:	2101      	movs	r1, #1
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff fc57 	bl	80054d4 <SPIF_CsPin>
      break;
 8005c26:	e005      	b.n	8005c34 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8005c28:	2101      	movs	r1, #1
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7ff fc52 	bl	80054d4 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8005c30:	2301      	movs	r3, #1
 8005c32:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b086      	sub	sp, #24
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d03a      	beq.n	8005ccc <SPIF_Init+0x8e>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d037      	beq.n	8005ccc <SPIF_Init+0x8e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d034      	beq.n	8005ccc <SPIF_Init+0x8e>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	7a9b      	ldrb	r3, [r3, #10]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d030      	beq.n	8005ccc <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f005 fb26 	bl	800b2c0 <memset>
    Handle->HSpi = HSpi;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8005c80:	887a      	ldrh	r2, [r7, #2]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8005c86:	2101      	movs	r1, #1
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fc23 	bl	80054d4 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8005c8e:	e002      	b.n	8005c96 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8005c90:	2001      	movs	r0, #1
 8005c92:	f7ff fbf5 	bl	8005480 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8005c96:	f000 fd29 	bl	80066ec <HAL_GetTick>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b13      	cmp	r3, #19
 8005c9e:	d9f7      	bls.n	8005c90 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f7ff fcac 	bl	80055fe <SPIF_WriteDisable>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f083 0301 	eor.w	r3, r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff fd12 	bl	80056dc <SPIF_FindChip>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	729a      	strb	r2, [r3, #10]
 8005cc8:	e000      	b.n	8005ccc <SPIF_Init+0x8e>
      break;
 8005cca:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff fbd8 	bl	8005496 <SPIF_Lock>
  bool retVal = false;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	031b      	lsls	r3, r3, #12
 8005cee:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d262      	bcs.n	8005dc0 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fc5b 	bl	80055b6 <SPIF_WriteEnable>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f083 0301 	eor.w	r3, r3, #1
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d15b      	bne.n	8005dc4 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fbe0 	bl	80054d4 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d1c:	d322      	bcc.n	8005d64 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8005d1e:	2321      	movs	r3, #33	@ 0x21
 8005d20:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	0e1b      	lsrs	r3, r3, #24
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	0c1b      	lsrs	r3, r3, #16
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	0a1b      	lsrs	r3, r3, #8
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8005d40:	f107 0108 	add.w	r1, r7, #8
 8005d44:	2364      	movs	r3, #100	@ 0x64
 8005d46:	2205      	movs	r2, #5
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fbfe 	bl	800554a <SPIF_Transmit>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f083 0301 	eor.w	r3, r3, #1
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d023      	beq.n	8005da2 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff fbb9 	bl	80054d4 <SPIF_CsPin>
        break;
 8005d62:	e030      	b.n	8005dc6 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8005d64:	2320      	movs	r3, #32
 8005d66:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	0c1b      	lsrs	r3, r3, #16
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	0a1b      	lsrs	r3, r3, #8
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8005d7e:	f107 0108 	add.w	r1, r7, #8
 8005d82:	2364      	movs	r3, #100	@ 0x64
 8005d84:	2204      	movs	r2, #4
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff fbdf 	bl	800554a <SPIF_Transmit>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f083 0301 	eor.w	r3, r3, #1
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8005d98:	2101      	movs	r1, #1
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff fb9a 	bl	80054d4 <SPIF_CsPin>
        break;
 8005da0:	e011      	b.n	8005dc6 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8005da2:	2101      	movs	r1, #1
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff fb95 	bl	80054d4 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8005daa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fc6e 	bl	8005690 <SPIF_WaitForWriting>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	75fb      	strb	r3, [r7, #23]
 8005dbe:	e002      	b.n	8005dc6 <SPIF_EraseSector+0xf0>
      break;
 8005dc0:	bf00      	nop
 8005dc2:	e000      	b.n	8005dc6 <SPIF_EraseSector+0xf0>
      break;
 8005dc4:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fc19 	bl	80055fe <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff fb75 	bl	80054bc <SPIF_UnLock>
  return retVal;
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <SPIF_WriteSector>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WriteSector(SPIF_HandleTypeDef *Handle, uint32_t SectorNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08c      	sub	sp, #48	@ 0x30
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f7ff fb53 	bl	8005496 <SPIF_Lock>
  bool retVal = true;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  do
  {
    if (Offset >= SPIF_SECTOR_SIZE)
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dfc:	d303      	bcc.n	8005e06 <SPIF_WriteSector+0x2a>
    {
      retVal = false;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005e04:	e04b      	b.n	8005e9e <SPIF_WriteSector+0xc2>
    }
    if (Size > (SPIF_SECTOR_SIZE - Offset))
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d903      	bls.n	8005e1a <SPIF_WriteSector+0x3e>
    {
      Size = SPIF_SECTOR_SIZE - Offset;
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005e18:	603b      	str	r3, [r7, #0]
    }
    uint32_t bytesWritten = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	623b      	str	r3, [r7, #32]
    uint32_t pageNumber = SectorNumber * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	61fb      	str	r3, [r7, #28]
    pageNumber += Offset / SPIF_PAGE_SIZE;
 8005e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	61fb      	str	r3, [r7, #28]
    uint32_t remainingBytes = Size;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	61bb      	str	r3, [r7, #24]
    uint32_t pageOffset = Offset % SPIF_PAGE_SIZE;
 8005e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	617b      	str	r3, [r7, #20]
    while (remainingBytes > 0 && pageNumber < ((SectorNumber + 1) * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE)))
 8005e38:	e028      	b.n	8005e8c <SPIF_WriteSector+0xb0>
    {
      uint32_t bytesToWrite = (remainingBytes > (SPIF_PAGE_SIZE - pageOffset)) ? (SPIF_PAGE_SIZE - pageOffset) : remainingBytes;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4293      	cmp	r3, r2
 8005e44:	bf28      	it	cs
 8005e46:	4613      	movcs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
      if (SPIF_WriteFn(Handle, pageNumber, Data + bytesWritten, bytesToWrite, pageOffset) == false)
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	441a      	add	r2, r3
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	69f9      	ldr	r1, [r7, #28]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff fdd7 	bl	8005a0c <SPIF_WriteFn>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f083 0301 	eor.w	r3, r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <SPIF_WriteSector+0x96>
      {
        retVal = false;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8005e70:	e015      	b.n	8005e9e <SPIF_WriteSector+0xc2>
      }
      bytesWritten += bytesToWrite;
 8005e72:	6a3a      	ldr	r2, [r7, #32]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	623b      	str	r3, [r7, #32]
      remainingBytes -= bytesToWrite;
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	61bb      	str	r3, [r7, #24]
      pageNumber++;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	3301      	adds	r3, #1
 8005e86:	61fb      	str	r3, [r7, #28]
      pageOffset = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]
    while (remainingBytes > 0 && pageNumber < ((SectorNumber + 1) * (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE)))
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <SPIF_WriteSector+0xc2>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	3301      	adds	r3, #1
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d3cd      	bcc.n	8005e3a <SPIF_WriteSector+0x5e>
    }
  } while (0);
  SPIF_UnLock(Handle);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff fb0c 	bl	80054bc <SPIF_UnLock>
  return retVal;
 8005ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3728      	adds	r7, #40	@ 0x28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <SPIF_ReadSector>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadSector(SPIF_HandleTypeDef *Handle, uint32_t SectorNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff fae9 	bl	8005496 <SPIF_Lock>
  bool retVal = false;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_SectorToAddress(SectorNumber) + Offset;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	031b      	lsls	r3, r3, #12
 8005ecc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ece:	4413      	add	r3, r2
 8005ed0:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_SECTOR_SIZE - Offset;
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005ed8:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d901      	bls.n	8005ee6 <SPIF_ReadSector+0x36>
  {
    Size = maximum;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	69b9      	ldr	r1, [r7, #24]
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff fe35 	bl	8005b5c <SPIF_ReadFn>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fae0 	bl	80054bc <SPIF_UnLock>
  return retVal;
 8005efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005f0e:	4b18      	ldr	r3, [pc, #96]	@ (8005f70 <HAL_MspInit+0x68>)
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	4a17      	ldr	r2, [pc, #92]	@ (8005f70 <HAL_MspInit+0x68>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	6193      	str	r3, [r2, #24]
 8005f1a:	4b15      	ldr	r3, [pc, #84]	@ (8005f70 <HAL_MspInit+0x68>)
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	60bb      	str	r3, [r7, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f26:	4b12      	ldr	r3, [pc, #72]	@ (8005f70 <HAL_MspInit+0x68>)
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	4a11      	ldr	r2, [pc, #68]	@ (8005f70 <HAL_MspInit+0x68>)
 8005f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f30:	61d3      	str	r3, [r2, #28]
 8005f32:	4b0f      	ldr	r3, [pc, #60]	@ (8005f70 <HAL_MspInit+0x68>)
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005f3e:	2200      	movs	r2, #0
 8005f40:	210f      	movs	r1, #15
 8005f42:	f06f 0001 	mvn.w	r0, #1
 8005f46:	f000 fcb4 	bl	80068b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f74 <HAL_MspInit+0x6c>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	4a04      	ldr	r2, [pc, #16]	@ (8005f74 <HAL_MspInit+0x6c>)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40021000 	.word	0x40021000
 8005f74:	40010000 	.word	0x40010000

08005f78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	@ 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f80:	f107 0314 	add.w	r3, r7, #20
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	605a      	str	r2, [r3, #4]
 8005f8a:	609a      	str	r2, [r3, #8]
 8005f8c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a22      	ldr	r2, [pc, #136]	@ (800601c <HAL_SPI_MspInit+0xa4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d13d      	bne.n	8006014 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005f98:	4b21      	ldr	r3, [pc, #132]	@ (8006020 <HAL_SPI_MspInit+0xa8>)
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	4a20      	ldr	r2, [pc, #128]	@ (8006020 <HAL_SPI_MspInit+0xa8>)
 8005f9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005fa2:	6193      	str	r3, [r2, #24]
 8005fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8006020 <HAL_SPI_MspInit+0xa8>)
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8006020 <HAL_SPI_MspInit+0xa8>)
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8006020 <HAL_SPI_MspInit+0xa8>)
 8005fb6:	f043 0308 	orr.w	r3, r3, #8
 8005fba:	6193      	str	r3, [r2, #24]
 8005fbc:	4b18      	ldr	r3, [pc, #96]	@ (8006020 <HAL_SPI_MspInit+0xa8>)
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8005fc8:	2328      	movs	r3, #40	@ 0x28
 8005fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fd4:	f107 0314 	add.w	r3, r7, #20
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4812      	ldr	r0, [pc, #72]	@ (8006024 <HAL_SPI_MspInit+0xac>)
 8005fdc:	f000 fdd6 	bl	8006b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fec:	f107 0314 	add.w	r3, r7, #20
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	480c      	ldr	r0, [pc, #48]	@ (8006024 <HAL_SPI_MspInit+0xac>)
 8005ff4:	f000 fdca 	bl	8006b8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8006028 <HAL_SPI_MspInit+0xb0>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
 800600e:	4a06      	ldr	r2, [pc, #24]	@ (8006028 <HAL_SPI_MspInit+0xb0>)
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006014:	bf00      	nop
 8006016:	3728      	adds	r7, #40	@ 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40013000 	.word	0x40013000
 8006020:	40021000 	.word	0x40021000
 8006024:	40010c00 	.word	0x40010c00
 8006028:	40010000 	.word	0x40010000

0800602c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b092      	sub	sp, #72	@ 0x48
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006034:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	609a      	str	r2, [r3, #8]
 8006040:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4aa0      	ldr	r2, [pc, #640]	@ (80062c8 <HAL_UART_MspInit+0x29c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d13a      	bne.n	80060c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800604c:	4b9f      	ldr	r3, [pc, #636]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	4a9e      	ldr	r2, [pc, #632]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006052:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006056:	61d3      	str	r3, [r2, #28]
 8006058:	4b9c      	ldr	r3, [pc, #624]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006060:	633b      	str	r3, [r7, #48]	@ 0x30
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006064:	4b99      	ldr	r3, [pc, #612]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	4a98      	ldr	r2, [pc, #608]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 800606a:	f043 0310 	orr.w	r3, r3, #16
 800606e:	6193      	str	r3, [r2, #24]
 8006070:	4b96      	ldr	r3, [pc, #600]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800607a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800607c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006080:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006082:	2302      	movs	r3, #2
 8006084:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006086:	2303      	movs	r3, #3
 8006088:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800608a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800608e:	4619      	mov	r1, r3
 8006090:	488f      	ldr	r0, [pc, #572]	@ (80062d0 <HAL_UART_MspInit+0x2a4>)
 8006092:	f000 fd7b 	bl	8006b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006096:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800609a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800609c:	2300      	movs	r3, #0
 800609e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80060a8:	4619      	mov	r1, r3
 80060aa:	4889      	ldr	r0, [pc, #548]	@ (80062d0 <HAL_UART_MspInit+0x2a4>)
 80060ac:	f000 fd6e 	bl	8006b8c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80060b0:	2200      	movs	r2, #0
 80060b2:	2105      	movs	r1, #5
 80060b4:	2034      	movs	r0, #52	@ 0x34
 80060b6:	f000 fbfc 	bl	80068b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80060ba:	2034      	movs	r0, #52	@ 0x34
 80060bc:	f000 fc15 	bl	80068ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80060c0:	e0fd      	b.n	80062be <HAL_UART_MspInit+0x292>
  else if(huart->Instance==UART5)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a83      	ldr	r2, [pc, #524]	@ (80062d4 <HAL_UART_MspInit+0x2a8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d13d      	bne.n	8006148 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80060cc:	4b7f      	ldr	r3, [pc, #508]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	4a7e      	ldr	r2, [pc, #504]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80060d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060d6:	61d3      	str	r3, [r2, #28]
 80060d8:	4b7c      	ldr	r3, [pc, #496]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060e4:	4b79      	ldr	r3, [pc, #484]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	4a78      	ldr	r2, [pc, #480]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80060ea:	f043 0310 	orr.w	r3, r3, #16
 80060ee:	6193      	str	r3, [r2, #24]
 80060f0:	4b76      	ldr	r3, [pc, #472]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060fc:	4b73      	ldr	r3, [pc, #460]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	4a72      	ldr	r2, [pc, #456]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006102:	f043 0320 	orr.w	r3, r3, #32
 8006106:	6193      	str	r3, [r2, #24]
 8006108:	4b70      	ldr	r3, [pc, #448]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	623b      	str	r3, [r7, #32]
 8006112:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006118:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611a:	2302      	movs	r3, #2
 800611c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800611e:	2303      	movs	r3, #3
 8006120:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006122:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006126:	4619      	mov	r1, r3
 8006128:	4869      	ldr	r0, [pc, #420]	@ (80062d0 <HAL_UART_MspInit+0x2a4>)
 800612a:	f000 fd2f 	bl	8006b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800612e:	2304      	movs	r3, #4
 8006130:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006132:	2300      	movs	r3, #0
 8006134:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006136:	2300      	movs	r3, #0
 8006138:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800613a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800613e:	4619      	mov	r1, r3
 8006140:	4865      	ldr	r0, [pc, #404]	@ (80062d8 <HAL_UART_MspInit+0x2ac>)
 8006142:	f000 fd23 	bl	8006b8c <HAL_GPIO_Init>
}
 8006146:	e0ba      	b.n	80062be <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a63      	ldr	r2, [pc, #396]	@ (80062dc <HAL_UART_MspInit+0x2b0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d132      	bne.n	80061b8 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006152:	4b5e      	ldr	r3, [pc, #376]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	4a5d      	ldr	r2, [pc, #372]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800615c:	6193      	str	r3, [r2, #24]
 800615e:	4b5b      	ldr	r3, [pc, #364]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800616a:	4b58      	ldr	r3, [pc, #352]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	4a57      	ldr	r2, [pc, #348]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006170:	f043 0304 	orr.w	r3, r3, #4
 8006174:	6193      	str	r3, [r2, #24]
 8006176:	4b55      	ldr	r3, [pc, #340]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006182:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006186:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006188:	2302      	movs	r3, #2
 800618a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800618c:	2303      	movs	r3, #3
 800618e:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006190:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006194:	4619      	mov	r1, r3
 8006196:	4852      	ldr	r0, [pc, #328]	@ (80062e0 <HAL_UART_MspInit+0x2b4>)
 8006198:	f000 fcf8 	bl	8006b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800619c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061a0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061a2:	2300      	movs	r3, #0
 80061a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80061ae:	4619      	mov	r1, r3
 80061b0:	484b      	ldr	r0, [pc, #300]	@ (80062e0 <HAL_UART_MspInit+0x2b4>)
 80061b2:	f000 fceb 	bl	8006b8c <HAL_GPIO_Init>
}
 80061b6:	e082      	b.n	80062be <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART2)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a49      	ldr	r2, [pc, #292]	@ (80062e4 <HAL_UART_MspInit+0x2b8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d13e      	bne.n	8006240 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART2_CLK_ENABLE();
 80061c2:	4b42      	ldr	r3, [pc, #264]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	4a41      	ldr	r2, [pc, #260]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80061c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061cc:	61d3      	str	r3, [r2, #28]
 80061ce:	4b3f      	ldr	r3, [pc, #252]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061da:	4b3c      	ldr	r3, [pc, #240]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	4a3b      	ldr	r2, [pc, #236]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80061e0:	f043 0320 	orr.w	r3, r3, #32
 80061e4:	6193      	str	r3, [r2, #24]
 80061e6:	4b39      	ldr	r3, [pc, #228]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80061f2:	2320      	movs	r3, #32
 80061f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f6:	2302      	movs	r3, #2
 80061f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061fa:	2303      	movs	r3, #3
 80061fc:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006202:	4619      	mov	r1, r3
 8006204:	4834      	ldr	r0, [pc, #208]	@ (80062d8 <HAL_UART_MspInit+0x2ac>)
 8006206:	f000 fcc1 	bl	8006b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800620a:	2340      	movs	r3, #64	@ 0x40
 800620c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800620e:	2300      	movs	r3, #0
 8006210:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006212:	2300      	movs	r3, #0
 8006214:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006216:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800621a:	4619      	mov	r1, r3
 800621c:	482e      	ldr	r0, [pc, #184]	@ (80062d8 <HAL_UART_MspInit+0x2ac>)
 800621e:	f000 fcb5 	bl	8006b8c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART2_ENABLE();
 8006222:	4b31      	ldr	r3, [pc, #196]	@ (80062e8 <HAL_UART_MspInit+0x2bc>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	647b      	str	r3, [r7, #68]	@ 0x44
 8006228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800622a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800622e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006232:	f043 0308 	orr.w	r3, r3, #8
 8006236:	647b      	str	r3, [r7, #68]	@ 0x44
 8006238:	4a2b      	ldr	r2, [pc, #172]	@ (80062e8 <HAL_UART_MspInit+0x2bc>)
 800623a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800623c:	6053      	str	r3, [r2, #4]
}
 800623e:	e03e      	b.n	80062be <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART3)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a29      	ldr	r2, [pc, #164]	@ (80062ec <HAL_UART_MspInit+0x2c0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d139      	bne.n	80062be <HAL_UART_MspInit+0x292>
    __HAL_RCC_USART3_CLK_ENABLE();
 800624a:	4b20      	ldr	r3, [pc, #128]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	4a1f      	ldr	r2, [pc, #124]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006254:	61d3      	str	r3, [r2, #28]
 8006256:	4b1d      	ldr	r3, [pc, #116]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006262:	4b1a      	ldr	r3, [pc, #104]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	4a19      	ldr	r2, [pc, #100]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006268:	f043 0308 	orr.w	r3, r3, #8
 800626c:	6193      	str	r3, [r2, #24]
 800626e:	4b17      	ldr	r3, [pc, #92]	@ (80062cc <HAL_UART_MspInit+0x2a0>)
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	60bb      	str	r3, [r7, #8]
 8006278:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800627a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800627e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006280:	2302      	movs	r3, #2
 8006282:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006284:	2303      	movs	r3, #3
 8006286:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006288:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800628c:	4619      	mov	r1, r3
 800628e:	4818      	ldr	r0, [pc, #96]	@ (80062f0 <HAL_UART_MspInit+0x2c4>)
 8006290:	f000 fc7c 	bl	8006b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006294:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006298:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800629a:	2300      	movs	r3, #0
 800629c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80062a6:	4619      	mov	r1, r3
 80062a8:	4811      	ldr	r0, [pc, #68]	@ (80062f0 <HAL_UART_MspInit+0x2c4>)
 80062aa:	f000 fc6f 	bl	8006b8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80062ae:	2200      	movs	r2, #0
 80062b0:	2105      	movs	r1, #5
 80062b2:	2027      	movs	r0, #39	@ 0x27
 80062b4:	f000 fafd 	bl	80068b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80062b8:	2027      	movs	r0, #39	@ 0x27
 80062ba:	f000 fb16 	bl	80068ea <HAL_NVIC_EnableIRQ>
}
 80062be:	bf00      	nop
 80062c0:	3748      	adds	r7, #72	@ 0x48
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40004c00 	.word	0x40004c00
 80062cc:	40021000 	.word	0x40021000
 80062d0:	40011000 	.word	0x40011000
 80062d4:	40005000 	.word	0x40005000
 80062d8:	40011400 	.word	0x40011400
 80062dc:	40013800 	.word	0x40013800
 80062e0:	40010800 	.word	0x40010800
 80062e4:	40004400 	.word	0x40004400
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40004800 	.word	0x40004800
 80062f0:	40010c00 	.word	0x40010c00

080062f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08e      	sub	sp, #56	@ 0x38
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800630a:	4b34      	ldr	r3, [pc, #208]	@ (80063dc <HAL_InitTick+0xe8>)
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	4a33      	ldr	r2, [pc, #204]	@ (80063dc <HAL_InitTick+0xe8>)
 8006310:	f043 0310 	orr.w	r3, r3, #16
 8006314:	61d3      	str	r3, [r2, #28]
 8006316:	4b31      	ldr	r3, [pc, #196]	@ (80063dc <HAL_InitTick+0xe8>)
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f003 0310 	and.w	r3, r3, #16
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006322:	f107 0210 	add.w	r2, r7, #16
 8006326:	f107 0314 	add.w	r3, r7, #20
 800632a:	4611      	mov	r1, r2
 800632c:	4618      	mov	r0, r3
 800632e:	f001 fa1f 	bl	8007770 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d103      	bne.n	8006344 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800633c:	f001 f9f0 	bl	8007720 <HAL_RCC_GetPCLK1Freq>
 8006340:	6378      	str	r0, [r7, #52]	@ 0x34
 8006342:	e004      	b.n	800634e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006344:	f001 f9ec 	bl	8007720 <HAL_RCC_GetPCLK1Freq>
 8006348:	4603      	mov	r3, r0
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800634e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006350:	4a23      	ldr	r2, [pc, #140]	@ (80063e0 <HAL_InitTick+0xec>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	0c9b      	lsrs	r3, r3, #18
 8006358:	3b01      	subs	r3, #1
 800635a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800635c:	4b21      	ldr	r3, [pc, #132]	@ (80063e4 <HAL_InitTick+0xf0>)
 800635e:	4a22      	ldr	r2, [pc, #136]	@ (80063e8 <HAL_InitTick+0xf4>)
 8006360:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006362:	4b20      	ldr	r3, [pc, #128]	@ (80063e4 <HAL_InitTick+0xf0>)
 8006364:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006368:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800636a:	4a1e      	ldr	r2, [pc, #120]	@ (80063e4 <HAL_InitTick+0xf0>)
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006370:	4b1c      	ldr	r3, [pc, #112]	@ (80063e4 <HAL_InitTick+0xf0>)
 8006372:	2200      	movs	r2, #0
 8006374:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006376:	4b1b      	ldr	r3, [pc, #108]	@ (80063e4 <HAL_InitTick+0xf0>)
 8006378:	2200      	movs	r2, #0
 800637a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800637c:	4b19      	ldr	r3, [pc, #100]	@ (80063e4 <HAL_InitTick+0xf0>)
 800637e:	2200      	movs	r2, #0
 8006380:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006382:	4818      	ldr	r0, [pc, #96]	@ (80063e4 <HAL_InitTick+0xf0>)
 8006384:	f001 ffca 	bl	800831c <HAL_TIM_Base_Init>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800638e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006392:	2b00      	cmp	r3, #0
 8006394:	d11b      	bne.n	80063ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006396:	4813      	ldr	r0, [pc, #76]	@ (80063e4 <HAL_InitTick+0xf0>)
 8006398:	f002 f818 	bl	80083cc <HAL_TIM_Base_Start_IT>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80063a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d111      	bne.n	80063ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80063aa:	2036      	movs	r0, #54	@ 0x36
 80063ac:	f000 fa9d 	bl	80068ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d808      	bhi.n	80063c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80063b6:	2200      	movs	r2, #0
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	2036      	movs	r0, #54	@ 0x36
 80063bc:	f000 fa79 	bl	80068b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80063c0:	4a0a      	ldr	r2, [pc, #40]	@ (80063ec <HAL_InitTick+0xf8>)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e002      	b.n	80063ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80063ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3738      	adds	r7, #56	@ 0x38
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40021000 	.word	0x40021000
 80063e0:	431bde83 	.word	0x431bde83
 80063e4:	2000077c 	.word	0x2000077c
 80063e8:	40001000 	.word	0x40001000
 80063ec:	20000024 	.word	0x20000024

080063f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80063f4:	bf00      	nop
 80063f6:	e7fd      	b.n	80063f4 <NMI_Handler+0x4>

080063f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063fc:	bf00      	nop
 80063fe:	e7fd      	b.n	80063fc <HardFault_Handler+0x4>

08006400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <MemManage_Handler+0x4>

08006408 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006408:	b480      	push	{r7}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <BusFault_Handler+0x4>

08006410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006414:	bf00      	nop
 8006416:	e7fd      	b.n	8006414 <UsageFault_Handler+0x4>

08006418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800641c:	bf00      	nop
 800641e:	46bd      	mov	sp, r7
 8006420:	bc80      	pop	{r7}
 8006422:	4770      	bx	lr

08006424 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_A2_Pin);
 8006428:	2001      	movs	r0, #1
 800642a:	f000 fd73 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800642e:	bf00      	nop
 8006430:	bd80      	pop	{r7, pc}

08006432 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_A1_Pin);
 8006436:	2002      	movs	r0, #2
 8006438:	f000 fd6c 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800643c:	bf00      	nop
 800643e:	bd80      	pop	{r7, pc}

08006440 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_B1_Pin);
 8006444:	2004      	movs	r0, #4
 8006446:	f000 fd65 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}

0800644e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_B2_Pin);
 8006452:	2008      	movs	r0, #8
 8006454:	f000 fd5e 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006458:	bf00      	nop
 800645a:	bd80      	pop	{r7, pc}

0800645c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006460:	4802      	ldr	r0, [pc, #8]	@ (800646c <USART3_IRQHandler+0x10>)
 8006462:	f002 fb31 	bl	8008ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	2000062c 	.word	0x2000062c

08006470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_B1_Pin);
 8006474:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006478:	f000 fd4c 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_B2_Pin);
 800647c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006480:	f000 fd48 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_A2_Pin);
 8006484:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006488:	f000 fd44 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_A1_Pin);
 800648c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006490:	f000 fd40 	bl	8006f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006494:	bf00      	nop
 8006496:	bd80      	pop	{r7, pc}

08006498 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800649c:	4802      	ldr	r0, [pc, #8]	@ (80064a8 <UART4_IRQHandler+0x10>)
 800649e:	f002 fb13 	bl	8008ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80064a2:	bf00      	nop
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	2000050c 	.word	0x2000050c

080064ac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80064b0:	4802      	ldr	r0, [pc, #8]	@ (80064bc <TIM6_IRQHandler+0x10>)
 80064b2:	f001 ffeb 	bl	800848c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80064b6:	bf00      	nop
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	2000077c 	.word	0x2000077c

080064c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return 1;
 80064c4:	2301      	movs	r3, #1
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr

080064ce <_kill>:

int _kill(int pid, int sig)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80064d8:	f004 ff54 	bl	800b384 <__errno>
 80064dc:	4603      	mov	r3, r0
 80064de:	2216      	movs	r2, #22
 80064e0:	601a      	str	r2, [r3, #0]
  return -1;
 80064e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <_exit>:

void _exit (int status)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80064f6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff ffe7 	bl	80064ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8006500:	bf00      	nop
 8006502:	e7fd      	b.n	8006500 <_exit+0x12>

08006504 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006510:	2300      	movs	r3, #0
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e00a      	b.n	800652c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006516:	f3af 8000 	nop.w
 800651a:	4601      	mov	r1, r0
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	60ba      	str	r2, [r7, #8]
 8006522:	b2ca      	uxtb	r2, r1
 8006524:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	3301      	adds	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	dbf0      	blt.n	8006516 <_read+0x12>
  }

  return len;
 8006534:	687b      	ldr	r3, [r7, #4]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b086      	sub	sp, #24
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800654a:	2300      	movs	r3, #0
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e009      	b.n	8006564 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	60ba      	str	r2, [r7, #8]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	3301      	adds	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	429a      	cmp	r2, r3
 800656a:	dbf1      	blt.n	8006550 <_write+0x12>
  }
  return len;
 800656c:	687b      	ldr	r3, [r7, #4]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <_close>:

int _close(int file)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800657e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr

0800658c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800659c:	605a      	str	r2, [r3, #4]
  return 0;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <_isatty>:

int _isatty(int file)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80065b2:	2301      	movs	r3, #1
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr

080065be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr
	...

080065d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065e0:	4a14      	ldr	r2, [pc, #80]	@ (8006634 <_sbrk+0x5c>)
 80065e2:	4b15      	ldr	r3, [pc, #84]	@ (8006638 <_sbrk+0x60>)
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065ec:	4b13      	ldr	r3, [pc, #76]	@ (800663c <_sbrk+0x64>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065f4:	4b11      	ldr	r3, [pc, #68]	@ (800663c <_sbrk+0x64>)
 80065f6:	4a12      	ldr	r2, [pc, #72]	@ (8006640 <_sbrk+0x68>)
 80065f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065fa:	4b10      	ldr	r3, [pc, #64]	@ (800663c <_sbrk+0x64>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4413      	add	r3, r2
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	429a      	cmp	r2, r3
 8006606:	d207      	bcs.n	8006618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006608:	f004 febc 	bl	800b384 <__errno>
 800660c:	4603      	mov	r3, r0
 800660e:	220c      	movs	r2, #12
 8006610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006616:	e009      	b.n	800662c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006618:	4b08      	ldr	r3, [pc, #32]	@ (800663c <_sbrk+0x64>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800661e:	4b07      	ldr	r3, [pc, #28]	@ (800663c <_sbrk+0x64>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	4a05      	ldr	r2, [pc, #20]	@ (800663c <_sbrk+0x64>)
 8006628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800662a:	68fb      	ldr	r3, [r7, #12]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	2000c000 	.word	0x2000c000
 8006638:	00000400 	.word	0x00000400
 800663c:	200007c4 	.word	0x200007c4
 8006640:	20001668 	.word	0x20001668

08006644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006648:	bf00      	nop
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr

08006650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006650:	f7ff fff8 	bl	8006644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006654:	480b      	ldr	r0, [pc, #44]	@ (8006684 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006656:	490c      	ldr	r1, [pc, #48]	@ (8006688 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006658:	4a0c      	ldr	r2, [pc, #48]	@ (800668c <LoopFillZerobss+0x16>)
  movs r3, #0
 800665a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800665c:	e002      	b.n	8006664 <LoopCopyDataInit>

0800665e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800665e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006662:	3304      	adds	r3, #4

08006664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006668:	d3f9      	bcc.n	800665e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800666a:	4a09      	ldr	r2, [pc, #36]	@ (8006690 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800666c:	4c09      	ldr	r4, [pc, #36]	@ (8006694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800666e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006670:	e001      	b.n	8006676 <LoopFillZerobss>

08006672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006674:	3204      	adds	r2, #4

08006676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006678:	d3fb      	bcc.n	8006672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800667a:	f004 fe89 	bl	800b390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800667e:	f7fb fb6b 	bl	8001d58 <main>
  bx lr
 8006682:	4770      	bx	lr
  ldr r0, =_sdata
 8006684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006688:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800668c:	0800e350 	.word	0x0800e350
  ldr r2, =_sbss
 8006690:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8006694:	20001664 	.word	0x20001664

08006698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006698:	e7fe      	b.n	8006698 <ADC1_2_IRQHandler>
	...

0800669c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066a0:	4b08      	ldr	r3, [pc, #32]	@ (80066c4 <HAL_Init+0x28>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a07      	ldr	r2, [pc, #28]	@ (80066c4 <HAL_Init+0x28>)
 80066a6:	f043 0310 	orr.w	r3, r3, #16
 80066aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066ac:	2003      	movs	r0, #3
 80066ae:	f000 f8f5 	bl	800689c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066b2:	200f      	movs	r0, #15
 80066b4:	f7ff fe1e 	bl	80062f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80066b8:	f7ff fc26 	bl	8005f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40022000 	.word	0x40022000

080066c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066cc:	4b05      	ldr	r3, [pc, #20]	@ (80066e4 <HAL_IncTick+0x1c>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	4b05      	ldr	r3, [pc, #20]	@ (80066e8 <HAL_IncTick+0x20>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4413      	add	r3, r2
 80066d8:	4a03      	ldr	r2, [pc, #12]	@ (80066e8 <HAL_IncTick+0x20>)
 80066da:	6013      	str	r3, [r2, #0]
}
 80066dc:	bf00      	nop
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr
 80066e4:	20000028 	.word	0x20000028
 80066e8:	200007c8 	.word	0x200007c8

080066ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return uwTick;
 80066f0:	4b02      	ldr	r3, [pc, #8]	@ (80066fc <HAL_GetTick+0x10>)
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr
 80066fc:	200007c8 	.word	0x200007c8

08006700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006708:	f7ff fff0 	bl	80066ec <HAL_GetTick>
 800670c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006718:	d005      	beq.n	8006726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800671a:	4b0a      	ldr	r3, [pc, #40]	@ (8006744 <HAL_Delay+0x44>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006726:	bf00      	nop
 8006728:	f7ff ffe0 	bl	80066ec <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	429a      	cmp	r2, r3
 8006736:	d8f7      	bhi.n	8006728 <HAL_Delay+0x28>
  {
  }
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000028 	.word	0x20000028

08006748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006758:	4b0c      	ldr	r3, [pc, #48]	@ (800678c <__NVIC_SetPriorityGrouping+0x44>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006764:	4013      	ands	r3, r2
 8006766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800677a:	4a04      	ldr	r2, [pc, #16]	@ (800678c <__NVIC_SetPriorityGrouping+0x44>)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	60d3      	str	r3, [r2, #12]
}
 8006780:	bf00      	nop
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	e000ed00 	.word	0xe000ed00

08006790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006794:	4b04      	ldr	r3, [pc, #16]	@ (80067a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	0a1b      	lsrs	r3, r3, #8
 800679a:	f003 0307 	and.w	r3, r3, #7
}
 800679e:	4618      	mov	r0, r3
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	e000ed00 	.word	0xe000ed00

080067ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	db0b      	blt.n	80067d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	f003 021f 	and.w	r2, r3, #31
 80067c4:	4906      	ldr	r1, [pc, #24]	@ (80067e0 <__NVIC_EnableIRQ+0x34>)
 80067c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	2001      	movs	r0, #1
 80067ce:	fa00 f202 	lsl.w	r2, r0, r2
 80067d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr
 80067e0:	e000e100 	.word	0xe000e100

080067e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	6039      	str	r1, [r7, #0]
 80067ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	db0a      	blt.n	800680e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	490c      	ldr	r1, [pc, #48]	@ (8006830 <__NVIC_SetPriority+0x4c>)
 80067fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006802:	0112      	lsls	r2, r2, #4
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	440b      	add	r3, r1
 8006808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800680c:	e00a      	b.n	8006824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	b2da      	uxtb	r2, r3
 8006812:	4908      	ldr	r1, [pc, #32]	@ (8006834 <__NVIC_SetPriority+0x50>)
 8006814:	79fb      	ldrb	r3, [r7, #7]
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	3b04      	subs	r3, #4
 800681c:	0112      	lsls	r2, r2, #4
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	440b      	add	r3, r1
 8006822:	761a      	strb	r2, [r3, #24]
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	e000e100 	.word	0xe000e100
 8006834:	e000ed00 	.word	0xe000ed00

08006838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006838:	b480      	push	{r7}
 800683a:	b089      	sub	sp, #36	@ 0x24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f1c3 0307 	rsb	r3, r3, #7
 8006852:	2b04      	cmp	r3, #4
 8006854:	bf28      	it	cs
 8006856:	2304      	movcs	r3, #4
 8006858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3304      	adds	r3, #4
 800685e:	2b06      	cmp	r3, #6
 8006860:	d902      	bls.n	8006868 <NVIC_EncodePriority+0x30>
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	3b03      	subs	r3, #3
 8006866:	e000      	b.n	800686a <NVIC_EncodePriority+0x32>
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800686c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	fa02 f303 	lsl.w	r3, r2, r3
 8006876:	43da      	mvns	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	401a      	ands	r2, r3
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006880:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	fa01 f303 	lsl.w	r3, r1, r3
 800688a:	43d9      	mvns	r1, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006890:	4313      	orrs	r3, r2
         );
}
 8006892:	4618      	mov	r0, r3
 8006894:	3724      	adds	r7, #36	@ 0x24
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr

0800689c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff ff4f 	bl	8006748 <__NVIC_SetPriorityGrouping>
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	4603      	mov	r3, r0
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068c4:	f7ff ff64 	bl	8006790 <__NVIC_GetPriorityGrouping>
 80068c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	6978      	ldr	r0, [r7, #20]
 80068d0:	f7ff ffb2 	bl	8006838 <NVIC_EncodePriority>
 80068d4:	4602      	mov	r2, r0
 80068d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068da:	4611      	mov	r1, r2
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff ff81 	bl	80067e4 <__NVIC_SetPriority>
}
 80068e2:	bf00      	nop
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	4603      	mov	r3, r0
 80068f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff ff57 	bl	80067ac <__NVIC_EnableIRQ>
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006906:	b480      	push	{r7}
 8006908:	b085      	sub	sp, #20
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d008      	beq.n	8006930 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2204      	movs	r2, #4
 8006922:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e020      	b.n	8006972 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 020e 	bic.w	r2, r2, #14
 800693e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006958:	2101      	movs	r1, #1
 800695a:	fa01 f202 	lsl.w	r2, r1, r2
 800695e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr

0800697c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d005      	beq.n	80069a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2204      	movs	r2, #4
 8006998:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	73fb      	strb	r3, [r7, #15]
 800699e:	e0d6      	b.n	8006b4e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 020e 	bic.w	r2, r2, #14
 80069ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0201 	bic.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	4b64      	ldr	r3, [pc, #400]	@ (8006b58 <HAL_DMA_Abort_IT+0x1dc>)
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d958      	bls.n	8006a7e <HAL_DMA_Abort_IT+0x102>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a62      	ldr	r2, [pc, #392]	@ (8006b5c <HAL_DMA_Abort_IT+0x1e0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d04f      	beq.n	8006a76 <HAL_DMA_Abort_IT+0xfa>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a61      	ldr	r2, [pc, #388]	@ (8006b60 <HAL_DMA_Abort_IT+0x1e4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d048      	beq.n	8006a72 <HAL_DMA_Abort_IT+0xf6>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5f      	ldr	r2, [pc, #380]	@ (8006b64 <HAL_DMA_Abort_IT+0x1e8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d040      	beq.n	8006a6c <HAL_DMA_Abort_IT+0xf0>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a5e      	ldr	r2, [pc, #376]	@ (8006b68 <HAL_DMA_Abort_IT+0x1ec>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d038      	beq.n	8006a66 <HAL_DMA_Abort_IT+0xea>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a5c      	ldr	r2, [pc, #368]	@ (8006b6c <HAL_DMA_Abort_IT+0x1f0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d030      	beq.n	8006a60 <HAL_DMA_Abort_IT+0xe4>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a5b      	ldr	r2, [pc, #364]	@ (8006b70 <HAL_DMA_Abort_IT+0x1f4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d028      	beq.n	8006a5a <HAL_DMA_Abort_IT+0xde>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a52      	ldr	r2, [pc, #328]	@ (8006b58 <HAL_DMA_Abort_IT+0x1dc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d020      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xd8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a57      	ldr	r2, [pc, #348]	@ (8006b74 <HAL_DMA_Abort_IT+0x1f8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d019      	beq.n	8006a50 <HAL_DMA_Abort_IT+0xd4>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a55      	ldr	r2, [pc, #340]	@ (8006b78 <HAL_DMA_Abort_IT+0x1fc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d012      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xd0>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a54      	ldr	r2, [pc, #336]	@ (8006b7c <HAL_DMA_Abort_IT+0x200>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00a      	beq.n	8006a46 <HAL_DMA_Abort_IT+0xca>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a52      	ldr	r2, [pc, #328]	@ (8006b80 <HAL_DMA_Abort_IT+0x204>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d102      	bne.n	8006a40 <HAL_DMA_Abort_IT+0xc4>
 8006a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a3e:	e01b      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006a44:	e018      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a4a:	e015      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	e013      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e011      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a58:	e00e      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a5a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006a5e:	e00b      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006a64:	e008      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a6a:	e005      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a70:	e002      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a72:	2310      	movs	r3, #16
 8006a74:	e000      	b.n	8006a78 <HAL_DMA_Abort_IT+0xfc>
 8006a76:	2301      	movs	r3, #1
 8006a78:	4a42      	ldr	r2, [pc, #264]	@ (8006b84 <HAL_DMA_Abort_IT+0x208>)
 8006a7a:	6053      	str	r3, [r2, #4]
 8006a7c:	e057      	b.n	8006b2e <HAL_DMA_Abort_IT+0x1b2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a36      	ldr	r2, [pc, #216]	@ (8006b5c <HAL_DMA_Abort_IT+0x1e0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d04f      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x1ac>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a34      	ldr	r2, [pc, #208]	@ (8006b60 <HAL_DMA_Abort_IT+0x1e4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d048      	beq.n	8006b24 <HAL_DMA_Abort_IT+0x1a8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a33      	ldr	r2, [pc, #204]	@ (8006b64 <HAL_DMA_Abort_IT+0x1e8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d040      	beq.n	8006b1e <HAL_DMA_Abort_IT+0x1a2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a31      	ldr	r2, [pc, #196]	@ (8006b68 <HAL_DMA_Abort_IT+0x1ec>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d038      	beq.n	8006b18 <HAL_DMA_Abort_IT+0x19c>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a30      	ldr	r2, [pc, #192]	@ (8006b6c <HAL_DMA_Abort_IT+0x1f0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d030      	beq.n	8006b12 <HAL_DMA_Abort_IT+0x196>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8006b70 <HAL_DMA_Abort_IT+0x1f4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d028      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x190>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a26      	ldr	r2, [pc, #152]	@ (8006b58 <HAL_DMA_Abort_IT+0x1dc>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d020      	beq.n	8006b06 <HAL_DMA_Abort_IT+0x18a>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8006b74 <HAL_DMA_Abort_IT+0x1f8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d019      	beq.n	8006b02 <HAL_DMA_Abort_IT+0x186>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a29      	ldr	r2, [pc, #164]	@ (8006b78 <HAL_DMA_Abort_IT+0x1fc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d012      	beq.n	8006afe <HAL_DMA_Abort_IT+0x182>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a27      	ldr	r2, [pc, #156]	@ (8006b7c <HAL_DMA_Abort_IT+0x200>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00a      	beq.n	8006af8 <HAL_DMA_Abort_IT+0x17c>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a26      	ldr	r2, [pc, #152]	@ (8006b80 <HAL_DMA_Abort_IT+0x204>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d102      	bne.n	8006af2 <HAL_DMA_Abort_IT+0x176>
 8006aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006af0:	e01b      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006af6:	e018      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006afc:	e015      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006afe:	2310      	movs	r3, #16
 8006b00:	e013      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e011      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006b06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b0a:	e00e      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006b0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006b10:	e00b      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006b12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006b16:	e008      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b1c:	e005      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006b1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b22:	e002      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006b24:	2310      	movs	r3, #16
 8006b26:	e000      	b.n	8006b2a <HAL_DMA_Abort_IT+0x1ae>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4a17      	ldr	r2, [pc, #92]	@ (8006b88 <HAL_DMA_Abort_IT+0x20c>)
 8006b2c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
    } 
  }
  return status;
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40020080 	.word	0x40020080
 8006b5c:	40020008 	.word	0x40020008
 8006b60:	4002001c 	.word	0x4002001c
 8006b64:	40020030 	.word	0x40020030
 8006b68:	40020044 	.word	0x40020044
 8006b6c:	40020058 	.word	0x40020058
 8006b70:	4002006c 	.word	0x4002006c
 8006b74:	40020408 	.word	0x40020408
 8006b78:	4002041c 	.word	0x4002041c
 8006b7c:	40020430 	.word	0x40020430
 8006b80:	40020444 	.word	0x40020444
 8006b84:	40020400 	.word	0x40020400
 8006b88:	40020000 	.word	0x40020000

08006b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b08b      	sub	sp, #44	@ 0x2c
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b96:	2300      	movs	r3, #0
 8006b98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b9e:	e179      	b.n	8006e94 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	f040 8168 	bne.w	8006e8e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4a96      	ldr	r2, [pc, #600]	@ (8006e1c <HAL_GPIO_Init+0x290>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d05e      	beq.n	8006c86 <HAL_GPIO_Init+0xfa>
 8006bc8:	4a94      	ldr	r2, [pc, #592]	@ (8006e1c <HAL_GPIO_Init+0x290>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d875      	bhi.n	8006cba <HAL_GPIO_Init+0x12e>
 8006bce:	4a94      	ldr	r2, [pc, #592]	@ (8006e20 <HAL_GPIO_Init+0x294>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d058      	beq.n	8006c86 <HAL_GPIO_Init+0xfa>
 8006bd4:	4a92      	ldr	r2, [pc, #584]	@ (8006e20 <HAL_GPIO_Init+0x294>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d86f      	bhi.n	8006cba <HAL_GPIO_Init+0x12e>
 8006bda:	4a92      	ldr	r2, [pc, #584]	@ (8006e24 <HAL_GPIO_Init+0x298>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d052      	beq.n	8006c86 <HAL_GPIO_Init+0xfa>
 8006be0:	4a90      	ldr	r2, [pc, #576]	@ (8006e24 <HAL_GPIO_Init+0x298>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d869      	bhi.n	8006cba <HAL_GPIO_Init+0x12e>
 8006be6:	4a90      	ldr	r2, [pc, #576]	@ (8006e28 <HAL_GPIO_Init+0x29c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d04c      	beq.n	8006c86 <HAL_GPIO_Init+0xfa>
 8006bec:	4a8e      	ldr	r2, [pc, #568]	@ (8006e28 <HAL_GPIO_Init+0x29c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d863      	bhi.n	8006cba <HAL_GPIO_Init+0x12e>
 8006bf2:	4a8e      	ldr	r2, [pc, #568]	@ (8006e2c <HAL_GPIO_Init+0x2a0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d046      	beq.n	8006c86 <HAL_GPIO_Init+0xfa>
 8006bf8:	4a8c      	ldr	r2, [pc, #560]	@ (8006e2c <HAL_GPIO_Init+0x2a0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d85d      	bhi.n	8006cba <HAL_GPIO_Init+0x12e>
 8006bfe:	2b12      	cmp	r3, #18
 8006c00:	d82a      	bhi.n	8006c58 <HAL_GPIO_Init+0xcc>
 8006c02:	2b12      	cmp	r3, #18
 8006c04:	d859      	bhi.n	8006cba <HAL_GPIO_Init+0x12e>
 8006c06:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <HAL_GPIO_Init+0x80>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c87 	.word	0x08006c87
 8006c10:	08006c61 	.word	0x08006c61
 8006c14:	08006c73 	.word	0x08006c73
 8006c18:	08006cb5 	.word	0x08006cb5
 8006c1c:	08006cbb 	.word	0x08006cbb
 8006c20:	08006cbb 	.word	0x08006cbb
 8006c24:	08006cbb 	.word	0x08006cbb
 8006c28:	08006cbb 	.word	0x08006cbb
 8006c2c:	08006cbb 	.word	0x08006cbb
 8006c30:	08006cbb 	.word	0x08006cbb
 8006c34:	08006cbb 	.word	0x08006cbb
 8006c38:	08006cbb 	.word	0x08006cbb
 8006c3c:	08006cbb 	.word	0x08006cbb
 8006c40:	08006cbb 	.word	0x08006cbb
 8006c44:	08006cbb 	.word	0x08006cbb
 8006c48:	08006cbb 	.word	0x08006cbb
 8006c4c:	08006cbb 	.word	0x08006cbb
 8006c50:	08006c69 	.word	0x08006c69
 8006c54:	08006c7d 	.word	0x08006c7d
 8006c58:	4a75      	ldr	r2, [pc, #468]	@ (8006e30 <HAL_GPIO_Init+0x2a4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006c5e:	e02c      	b.n	8006cba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	623b      	str	r3, [r7, #32]
          break;
 8006c66:	e029      	b.n	8006cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	623b      	str	r3, [r7, #32]
          break;
 8006c70:	e024      	b.n	8006cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	3308      	adds	r3, #8
 8006c78:	623b      	str	r3, [r7, #32]
          break;
 8006c7a:	e01f      	b.n	8006cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	330c      	adds	r3, #12
 8006c82:	623b      	str	r3, [r7, #32]
          break;
 8006c84:	e01a      	b.n	8006cbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006c8e:	2304      	movs	r3, #4
 8006c90:	623b      	str	r3, [r7, #32]
          break;
 8006c92:	e013      	b.n	8006cbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d105      	bne.n	8006ca8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	611a      	str	r2, [r3, #16]
          break;
 8006ca6:	e009      	b.n	8006cbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ca8:	2308      	movs	r3, #8
 8006caa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	615a      	str	r2, [r3, #20]
          break;
 8006cb2:	e003      	b.n	8006cbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	623b      	str	r3, [r7, #32]
          break;
 8006cb8:	e000      	b.n	8006cbc <HAL_GPIO_Init+0x130>
          break;
 8006cba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2bff      	cmp	r3, #255	@ 0xff
 8006cc0:	d801      	bhi.n	8006cc6 <HAL_GPIO_Init+0x13a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	e001      	b.n	8006cca <HAL_GPIO_Init+0x13e>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2bff      	cmp	r3, #255	@ 0xff
 8006cd0:	d802      	bhi.n	8006cd8 <HAL_GPIO_Init+0x14c>
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	e002      	b.n	8006cde <HAL_GPIO_Init+0x152>
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	3b08      	subs	r3, #8
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	210f      	movs	r1, #15
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cec:	43db      	mvns	r3, r3
 8006cee:	401a      	ands	r2, r3
 8006cf0:	6a39      	ldr	r1, [r7, #32]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 80c1 	beq.w	8006e8e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006d0c:	4b49      	ldr	r3, [pc, #292]	@ (8006e34 <HAL_GPIO_Init+0x2a8>)
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	4a48      	ldr	r2, [pc, #288]	@ (8006e34 <HAL_GPIO_Init+0x2a8>)
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	6193      	str	r3, [r2, #24]
 8006d18:	4b46      	ldr	r3, [pc, #280]	@ (8006e34 <HAL_GPIO_Init+0x2a8>)
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	60bb      	str	r3, [r7, #8]
 8006d22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006d24:	4a44      	ldr	r2, [pc, #272]	@ (8006e38 <HAL_GPIO_Init+0x2ac>)
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	089b      	lsrs	r3, r3, #2
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	220f      	movs	r2, #15
 8006d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d40:	43db      	mvns	r3, r3
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4013      	ands	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8006e3c <HAL_GPIO_Init+0x2b0>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d01f      	beq.n	8006d90 <HAL_GPIO_Init+0x204>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a3b      	ldr	r2, [pc, #236]	@ (8006e40 <HAL_GPIO_Init+0x2b4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d019      	beq.n	8006d8c <HAL_GPIO_Init+0x200>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a3a      	ldr	r2, [pc, #232]	@ (8006e44 <HAL_GPIO_Init+0x2b8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d013      	beq.n	8006d88 <HAL_GPIO_Init+0x1fc>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a39      	ldr	r2, [pc, #228]	@ (8006e48 <HAL_GPIO_Init+0x2bc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00d      	beq.n	8006d84 <HAL_GPIO_Init+0x1f8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a38      	ldr	r2, [pc, #224]	@ (8006e4c <HAL_GPIO_Init+0x2c0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d007      	beq.n	8006d80 <HAL_GPIO_Init+0x1f4>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a37      	ldr	r2, [pc, #220]	@ (8006e50 <HAL_GPIO_Init+0x2c4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d101      	bne.n	8006d7c <HAL_GPIO_Init+0x1f0>
 8006d78:	2305      	movs	r3, #5
 8006d7a:	e00a      	b.n	8006d92 <HAL_GPIO_Init+0x206>
 8006d7c:	2306      	movs	r3, #6
 8006d7e:	e008      	b.n	8006d92 <HAL_GPIO_Init+0x206>
 8006d80:	2304      	movs	r3, #4
 8006d82:	e006      	b.n	8006d92 <HAL_GPIO_Init+0x206>
 8006d84:	2303      	movs	r3, #3
 8006d86:	e004      	b.n	8006d92 <HAL_GPIO_Init+0x206>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e002      	b.n	8006d92 <HAL_GPIO_Init+0x206>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <HAL_GPIO_Init+0x206>
 8006d90:	2300      	movs	r3, #0
 8006d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d94:	f002 0203 	and.w	r2, r2, #3
 8006d98:	0092      	lsls	r2, r2, #2
 8006d9a:	4093      	lsls	r3, r2
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006da2:	4925      	ldr	r1, [pc, #148]	@ (8006e38 <HAL_GPIO_Init+0x2ac>)
 8006da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da6:	089b      	lsrs	r3, r3, #2
 8006da8:	3302      	adds	r3, #2
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d006      	beq.n	8006dca <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006dbc:	4b25      	ldr	r3, [pc, #148]	@ (8006e54 <HAL_GPIO_Init+0x2c8>)
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	4924      	ldr	r1, [pc, #144]	@ (8006e54 <HAL_GPIO_Init+0x2c8>)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	608b      	str	r3, [r1, #8]
 8006dc8:	e006      	b.n	8006dd8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006dca:	4b22      	ldr	r3, [pc, #136]	@ (8006e54 <HAL_GPIO_Init+0x2c8>)
 8006dcc:	689a      	ldr	r2, [r3, #8]
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	4920      	ldr	r1, [pc, #128]	@ (8006e54 <HAL_GPIO_Init+0x2c8>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006de4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e54 <HAL_GPIO_Init+0x2c8>)
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	491a      	ldr	r1, [pc, #104]	@ (8006e54 <HAL_GPIO_Init+0x2c8>)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60cb      	str	r3, [r1, #12]
 8006df0:	e006      	b.n	8006e00 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006df2:	4b18      	ldr	r3, [pc, #96]	@ (8006e54 <HAL_GPIO_Init+0x2c8>)
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	4916      	ldr	r1, [pc, #88]	@ (8006e54 <HAL_GPIO_Init+0x2c8>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d025      	beq.n	8006e58 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006e0c:	4b11      	ldr	r3, [pc, #68]	@ (8006e54 <HAL_GPIO_Init+0x2c8>)
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	4910      	ldr	r1, [pc, #64]	@ (8006e54 <HAL_GPIO_Init+0x2c8>)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	604b      	str	r3, [r1, #4]
 8006e18:	e025      	b.n	8006e66 <HAL_GPIO_Init+0x2da>
 8006e1a:	bf00      	nop
 8006e1c:	10320000 	.word	0x10320000
 8006e20:	10310000 	.word	0x10310000
 8006e24:	10220000 	.word	0x10220000
 8006e28:	10210000 	.word	0x10210000
 8006e2c:	10120000 	.word	0x10120000
 8006e30:	10110000 	.word	0x10110000
 8006e34:	40021000 	.word	0x40021000
 8006e38:	40010000 	.word	0x40010000
 8006e3c:	40010800 	.word	0x40010800
 8006e40:	40010c00 	.word	0x40010c00
 8006e44:	40011000 	.word	0x40011000
 8006e48:	40011400 	.word	0x40011400
 8006e4c:	40011800 	.word	0x40011800
 8006e50:	40011c00 	.word	0x40011c00
 8006e54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006e58:	4b15      	ldr	r3, [pc, #84]	@ (8006eb0 <HAL_GPIO_Init+0x324>)
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	43db      	mvns	r3, r3
 8006e60:	4913      	ldr	r1, [pc, #76]	@ (8006eb0 <HAL_GPIO_Init+0x324>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d006      	beq.n	8006e80 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006e72:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb0 <HAL_GPIO_Init+0x324>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	490e      	ldr	r1, [pc, #56]	@ (8006eb0 <HAL_GPIO_Init+0x324>)
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	600b      	str	r3, [r1, #0]
 8006e7e:	e006      	b.n	8006e8e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006e80:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb0 <HAL_GPIO_Init+0x324>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	43db      	mvns	r3, r3
 8006e88:	4909      	ldr	r1, [pc, #36]	@ (8006eb0 <HAL_GPIO_Init+0x324>)
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	3301      	adds	r3, #1
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f47f ae7e 	bne.w	8006ba0 <HAL_GPIO_Init+0x14>
  }
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop
 8006ea8:	372c      	adds	r7, #44	@ 0x2c
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bc80      	pop	{r7}
 8006eae:	4770      	bx	lr
 8006eb0:	40010400 	.word	0x40010400

08006eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	887b      	ldrh	r3, [r7, #2]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
 8006ed0:	e001      	b.n	8006ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	807b      	strh	r3, [r7, #2]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ef2:	787b      	ldrb	r3, [r7, #1]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ef8:	887a      	ldrh	r2, [r7, #2]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006efe:	e003      	b.n	8006f08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006f00:	887b      	ldrh	r3, [r7, #2]
 8006f02:	041a      	lsls	r2, r3, #16
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	611a      	str	r2, [r3, #16]
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bc80      	pop	{r7}
 8006f10:	4770      	bx	lr
	...

08006f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f1e:	4b08      	ldr	r3, [pc, #32]	@ (8006f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d006      	beq.n	8006f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f2a:	4a05      	ldr	r2, [pc, #20]	@ (8006f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fb fe84 	bl	8002c40 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40010400 	.word	0x40010400

08006f44 <HAL_GPIOEx_ConfigEventout>:
  * @param  GPIO_PinSource Select the pin used to output the Cortex EVENTOUT signal.
  *   This parameter can be a value of @ref GPIOEx_EVENTOUT_PIN.
  * @retval None
  */
void HAL_GPIOEx_ConfigEventout(uint32_t GPIO_PortSource, uint32_t GPIO_PinSource)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));

  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT) | (AFIO_EVCR_PIN), (GPIO_PortSource) | (GPIO_PinSource));
 8006f4e:	4b07      	ldr	r3, [pc, #28]	@ (8006f6c <HAL_GPIOEx_ConfigEventout+0x28>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	430b      	orrs	r3, r1
 8006f5c:	4903      	ldr	r1, [pc, #12]	@ (8006f6c <HAL_GPIOEx_ConfigEventout+0x28>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	600b      	str	r3, [r1, #0]
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bc80      	pop	{r7}
 8006f6a:	4770      	bx	lr
 8006f6c:	40010000 	.word	0x40010000

08006f70 <HAL_GPIOEx_EnableEventout>:
/**
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8006f74:	4b04      	ldr	r3, [pc, #16]	@ (8006f88 <HAL_GPIOEx_EnableEventout+0x18>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a03      	ldr	r2, [pc, #12]	@ (8006f88 <HAL_GPIOEx_EnableEventout+0x18>)
 8006f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f7e:	6013      	str	r3, [r2, #0]
}
 8006f80:	bf00      	nop
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr
 8006f88:	40010000 	.word	0x40010000

08006f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e272      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8087 	beq.w	80070ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fac:	4b92      	ldr	r3, [pc, #584]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f003 030c 	and.w	r3, r3, #12
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d00c      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 030c 	and.w	r3, r3, #12
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d112      	bne.n	8006fea <HAL_RCC_OscConfig+0x5e>
 8006fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd0:	d10b      	bne.n	8006fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd2:	4b89      	ldr	r3, [pc, #548]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d06c      	beq.n	80070b8 <HAL_RCC_OscConfig+0x12c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d168      	bne.n	80070b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e24c      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff2:	d106      	bne.n	8007002 <HAL_RCC_OscConfig+0x76>
 8006ff4:	4b80      	ldr	r3, [pc, #512]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a7f      	ldr	r2, [pc, #508]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8006ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	e02e      	b.n	8007060 <HAL_RCC_OscConfig+0xd4>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10c      	bne.n	8007024 <HAL_RCC_OscConfig+0x98>
 800700a:	4b7b      	ldr	r3, [pc, #492]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a7a      	ldr	r2, [pc, #488]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	4b78      	ldr	r3, [pc, #480]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a77      	ldr	r2, [pc, #476]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 800701c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	e01d      	b.n	8007060 <HAL_RCC_OscConfig+0xd4>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800702c:	d10c      	bne.n	8007048 <HAL_RCC_OscConfig+0xbc>
 800702e:	4b72      	ldr	r3, [pc, #456]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a71      	ldr	r2, [pc, #452]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	4b6f      	ldr	r3, [pc, #444]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a6e      	ldr	r2, [pc, #440]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	e00b      	b.n	8007060 <HAL_RCC_OscConfig+0xd4>
 8007048:	4b6b      	ldr	r3, [pc, #428]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a6a      	ldr	r2, [pc, #424]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 800704e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	4b68      	ldr	r3, [pc, #416]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a67      	ldr	r2, [pc, #412]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 800705a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800705e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d013      	beq.n	8007090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007068:	f7ff fb40 	bl	80066ec <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007070:	f7ff fb3c 	bl	80066ec <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b64      	cmp	r3, #100	@ 0x64
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e200      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007082:	4b5d      	ldr	r3, [pc, #372]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0f0      	beq.n	8007070 <HAL_RCC_OscConfig+0xe4>
 800708e:	e014      	b.n	80070ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007090:	f7ff fb2c 	bl	80066ec <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007098:	f7ff fb28 	bl	80066ec <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b64      	cmp	r3, #100	@ 0x64
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e1ec      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070aa:	4b53      	ldr	r3, [pc, #332]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f0      	bne.n	8007098 <HAL_RCC_OscConfig+0x10c>
 80070b6:	e000      	b.n	80070ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d063      	beq.n	800718e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070c6:	4b4c      	ldr	r3, [pc, #304]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f003 030c 	and.w	r3, r3, #12
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00b      	beq.n	80070ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80070d2:	4b49      	ldr	r3, [pc, #292]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f003 030c 	and.w	r3, r3, #12
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d11c      	bne.n	8007118 <HAL_RCC_OscConfig+0x18c>
 80070de:	4b46      	ldr	r3, [pc, #280]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d116      	bne.n	8007118 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ea:	4b43      	ldr	r3, [pc, #268]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <HAL_RCC_OscConfig+0x176>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d001      	beq.n	8007102 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e1c0      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007102:	4b3d      	ldr	r3, [pc, #244]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4939      	ldr	r1, [pc, #228]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007112:	4313      	orrs	r3, r2
 8007114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007116:	e03a      	b.n	800718e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d020      	beq.n	8007162 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007120:	4b36      	ldr	r3, [pc, #216]	@ (80071fc <HAL_RCC_OscConfig+0x270>)
 8007122:	2201      	movs	r2, #1
 8007124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007126:	f7ff fae1 	bl	80066ec <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800712e:	f7ff fadd 	bl	80066ec <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e1a1      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007140:	4b2d      	ldr	r3, [pc, #180]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0f0      	beq.n	800712e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800714c:	4b2a      	ldr	r3, [pc, #168]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	4927      	ldr	r1, [pc, #156]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 800715c:	4313      	orrs	r3, r2
 800715e:	600b      	str	r3, [r1, #0]
 8007160:	e015      	b.n	800718e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007162:	4b26      	ldr	r3, [pc, #152]	@ (80071fc <HAL_RCC_OscConfig+0x270>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007168:	f7ff fac0 	bl	80066ec <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007170:	f7ff fabc 	bl	80066ec <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e180      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007182:	4b1d      	ldr	r3, [pc, #116]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f0      	bne.n	8007170 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d03a      	beq.n	8007210 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d019      	beq.n	80071d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071a2:	4b17      	ldr	r3, [pc, #92]	@ (8007200 <HAL_RCC_OscConfig+0x274>)
 80071a4:	2201      	movs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071a8:	f7ff faa0 	bl	80066ec <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071b0:	f7ff fa9c 	bl	80066ec <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e160      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071c2:	4b0d      	ldr	r3, [pc, #52]	@ (80071f8 <HAL_RCC_OscConfig+0x26c>)
 80071c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0f0      	beq.n	80071b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80071ce:	2001      	movs	r0, #1
 80071d0:	f000 fafe 	bl	80077d0 <RCC_Delay>
 80071d4:	e01c      	b.n	8007210 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007200 <HAL_RCC_OscConfig+0x274>)
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071dc:	f7ff fa86 	bl	80066ec <HAL_GetTick>
 80071e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071e2:	e00f      	b.n	8007204 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071e4:	f7ff fa82 	bl	80066ec <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d908      	bls.n	8007204 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e146      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
 80071f6:	bf00      	nop
 80071f8:	40021000 	.word	0x40021000
 80071fc:	42420000 	.word	0x42420000
 8007200:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007204:	4b92      	ldr	r3, [pc, #584]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e9      	bne.n	80071e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 80a6 	beq.w	800736a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800721e:	2300      	movs	r3, #0
 8007220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007222:	4b8b      	ldr	r3, [pc, #556]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10d      	bne.n	800724a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800722e:	4b88      	ldr	r3, [pc, #544]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	4a87      	ldr	r2, [pc, #540]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007238:	61d3      	str	r3, [r2, #28]
 800723a:	4b85      	ldr	r3, [pc, #532]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007242:	60bb      	str	r3, [r7, #8]
 8007244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007246:	2301      	movs	r3, #1
 8007248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800724a:	4b82      	ldr	r3, [pc, #520]	@ (8007454 <HAL_RCC_OscConfig+0x4c8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007252:	2b00      	cmp	r3, #0
 8007254:	d118      	bne.n	8007288 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007256:	4b7f      	ldr	r3, [pc, #508]	@ (8007454 <HAL_RCC_OscConfig+0x4c8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a7e      	ldr	r2, [pc, #504]	@ (8007454 <HAL_RCC_OscConfig+0x4c8>)
 800725c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007262:	f7ff fa43 	bl	80066ec <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007268:	e008      	b.n	800727c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800726a:	f7ff fa3f 	bl	80066ec <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b64      	cmp	r3, #100	@ 0x64
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e103      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800727c:	4b75      	ldr	r3, [pc, #468]	@ (8007454 <HAL_RCC_OscConfig+0x4c8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0f0      	beq.n	800726a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d106      	bne.n	800729e <HAL_RCC_OscConfig+0x312>
 8007290:	4b6f      	ldr	r3, [pc, #444]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	4a6e      	ldr	r2, [pc, #440]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	6213      	str	r3, [r2, #32]
 800729c:	e02d      	b.n	80072fa <HAL_RCC_OscConfig+0x36e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10c      	bne.n	80072c0 <HAL_RCC_OscConfig+0x334>
 80072a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	4a69      	ldr	r2, [pc, #420]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	6213      	str	r3, [r2, #32]
 80072b2:	4b67      	ldr	r3, [pc, #412]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	4a66      	ldr	r2, [pc, #408]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072b8:	f023 0304 	bic.w	r3, r3, #4
 80072bc:	6213      	str	r3, [r2, #32]
 80072be:	e01c      	b.n	80072fa <HAL_RCC_OscConfig+0x36e>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	2b05      	cmp	r3, #5
 80072c6:	d10c      	bne.n	80072e2 <HAL_RCC_OscConfig+0x356>
 80072c8:	4b61      	ldr	r3, [pc, #388]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	4a60      	ldr	r2, [pc, #384]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072ce:	f043 0304 	orr.w	r3, r3, #4
 80072d2:	6213      	str	r3, [r2, #32]
 80072d4:	4b5e      	ldr	r3, [pc, #376]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072da:	f043 0301 	orr.w	r3, r3, #1
 80072de:	6213      	str	r3, [r2, #32]
 80072e0:	e00b      	b.n	80072fa <HAL_RCC_OscConfig+0x36e>
 80072e2:	4b5b      	ldr	r3, [pc, #364]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	4a5a      	ldr	r2, [pc, #360]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	6213      	str	r3, [r2, #32]
 80072ee:	4b58      	ldr	r3, [pc, #352]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	4a57      	ldr	r2, [pc, #348]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80072f4:	f023 0304 	bic.w	r3, r3, #4
 80072f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d015      	beq.n	800732e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007302:	f7ff f9f3 	bl	80066ec <HAL_GetTick>
 8007306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007308:	e00a      	b.n	8007320 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730a:	f7ff f9ef 	bl	80066ec <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007318:	4293      	cmp	r3, r2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e0b1      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007320:	4b4b      	ldr	r3, [pc, #300]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0ee      	beq.n	800730a <HAL_RCC_OscConfig+0x37e>
 800732c:	e014      	b.n	8007358 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800732e:	f7ff f9dd 	bl	80066ec <HAL_GetTick>
 8007332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007334:	e00a      	b.n	800734c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007336:	f7ff f9d9 	bl	80066ec <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007344:	4293      	cmp	r3, r2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e09b      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800734c:	4b40      	ldr	r3, [pc, #256]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1ee      	bne.n	8007336 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d105      	bne.n	800736a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800735e:	4b3c      	ldr	r3, [pc, #240]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	4a3b      	ldr	r2, [pc, #236]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007368:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 8087 	beq.w	8007482 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007374:	4b36      	ldr	r3, [pc, #216]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f003 030c 	and.w	r3, r3, #12
 800737c:	2b08      	cmp	r3, #8
 800737e:	d061      	beq.n	8007444 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d146      	bne.n	8007416 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007388:	4b33      	ldr	r3, [pc, #204]	@ (8007458 <HAL_RCC_OscConfig+0x4cc>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738e:	f7ff f9ad 	bl	80066ec <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007394:	e008      	b.n	80073a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007396:	f7ff f9a9 	bl	80066ec <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e06d      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073a8:	4b29      	ldr	r3, [pc, #164]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073bc:	d108      	bne.n	80073d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80073be:	4b24      	ldr	r3, [pc, #144]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	4921      	ldr	r1, [pc, #132]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a19      	ldr	r1, [r3, #32]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e0:	430b      	orrs	r3, r1
 80073e2:	491b      	ldr	r1, [pc, #108]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007458 <HAL_RCC_OscConfig+0x4cc>)
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ee:	f7ff f97d 	bl	80066ec <HAL_GetTick>
 80073f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073f4:	e008      	b.n	8007408 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f6:	f7ff f979 	bl	80066ec <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d901      	bls.n	8007408 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e03d      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007408:	4b11      	ldr	r3, [pc, #68]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0f0      	beq.n	80073f6 <HAL_RCC_OscConfig+0x46a>
 8007414:	e035      	b.n	8007482 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007416:	4b10      	ldr	r3, [pc, #64]	@ (8007458 <HAL_RCC_OscConfig+0x4cc>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800741c:	f7ff f966 	bl	80066ec <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007424:	f7ff f962 	bl	80066ec <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e026      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007436:	4b06      	ldr	r3, [pc, #24]	@ (8007450 <HAL_RCC_OscConfig+0x4c4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f0      	bne.n	8007424 <HAL_RCC_OscConfig+0x498>
 8007442:	e01e      	b.n	8007482 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d107      	bne.n	800745c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e019      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
 8007450:	40021000 	.word	0x40021000
 8007454:	40007000 	.word	0x40007000
 8007458:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800745c:	4b0b      	ldr	r3, [pc, #44]	@ (800748c <HAL_RCC_OscConfig+0x500>)
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	429a      	cmp	r2, r3
 800746e:	d106      	bne.n	800747e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800747a:	429a      	cmp	r2, r3
 800747c:	d001      	beq.n	8007482 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40021000 	.word	0x40021000

08007490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e0d0      	b.n	8007646 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007650 <HAL_RCC_ClockConfig+0x1c0>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d910      	bls.n	80074d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074b2:	4b67      	ldr	r3, [pc, #412]	@ (8007650 <HAL_RCC_ClockConfig+0x1c0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f023 0207 	bic.w	r2, r3, #7
 80074ba:	4965      	ldr	r1, [pc, #404]	@ (8007650 <HAL_RCC_ClockConfig+0x1c0>)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	4313      	orrs	r3, r2
 80074c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c2:	4b63      	ldr	r3, [pc, #396]	@ (8007650 <HAL_RCC_ClockConfig+0x1c0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d001      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0b8      	b.n	8007646 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d020      	beq.n	8007522 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074ec:	4b59      	ldr	r3, [pc, #356]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4a58      	ldr	r2, [pc, #352]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 80074f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80074f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007504:	4b53      	ldr	r3, [pc, #332]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	4a52      	ldr	r2, [pc, #328]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 800750a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800750e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007510:	4b50      	ldr	r3, [pc, #320]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	494d      	ldr	r1, [pc, #308]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 800751e:	4313      	orrs	r3, r2
 8007520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d040      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d107      	bne.n	8007546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007536:	4b47      	ldr	r3, [pc, #284]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d115      	bne.n	800756e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e07f      	b.n	8007646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b02      	cmp	r3, #2
 800754c:	d107      	bne.n	800755e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800754e:	4b41      	ldr	r3, [pc, #260]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e073      	b.n	8007646 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800755e:	4b3d      	ldr	r3, [pc, #244]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e06b      	b.n	8007646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800756e:	4b39      	ldr	r3, [pc, #228]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f023 0203 	bic.w	r2, r3, #3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	4936      	ldr	r1, [pc, #216]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 800757c:	4313      	orrs	r3, r2
 800757e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007580:	f7ff f8b4 	bl	80066ec <HAL_GetTick>
 8007584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007586:	e00a      	b.n	800759e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007588:	f7ff f8b0 	bl	80066ec <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007596:	4293      	cmp	r3, r2
 8007598:	d901      	bls.n	800759e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e053      	b.n	8007646 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800759e:	4b2d      	ldr	r3, [pc, #180]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f003 020c 	and.w	r2, r3, #12
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d1eb      	bne.n	8007588 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075b0:	4b27      	ldr	r3, [pc, #156]	@ (8007650 <HAL_RCC_ClockConfig+0x1c0>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d210      	bcs.n	80075e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075be:	4b24      	ldr	r3, [pc, #144]	@ (8007650 <HAL_RCC_ClockConfig+0x1c0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f023 0207 	bic.w	r2, r3, #7
 80075c6:	4922      	ldr	r1, [pc, #136]	@ (8007650 <HAL_RCC_ClockConfig+0x1c0>)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ce:	4b20      	ldr	r3, [pc, #128]	@ (8007650 <HAL_RCC_ClockConfig+0x1c0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d001      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e032      	b.n	8007646 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075ec:	4b19      	ldr	r3, [pc, #100]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	4916      	ldr	r1, [pc, #88]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800760a:	4b12      	ldr	r3, [pc, #72]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	490e      	ldr	r1, [pc, #56]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 800761a:	4313      	orrs	r3, r2
 800761c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800761e:	f000 f821 	bl	8007664 <HAL_RCC_GetSysClockFreq>
 8007622:	4602      	mov	r2, r0
 8007624:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <HAL_RCC_ClockConfig+0x1c4>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	091b      	lsrs	r3, r3, #4
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	490a      	ldr	r1, [pc, #40]	@ (8007658 <HAL_RCC_ClockConfig+0x1c8>)
 8007630:	5ccb      	ldrb	r3, [r1, r3]
 8007632:	fa22 f303 	lsr.w	r3, r2, r3
 8007636:	4a09      	ldr	r2, [pc, #36]	@ (800765c <HAL_RCC_ClockConfig+0x1cc>)
 8007638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800763a:	4b09      	ldr	r3, [pc, #36]	@ (8007660 <HAL_RCC_ClockConfig+0x1d0>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe fe58 	bl	80062f4 <HAL_InitTick>

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40022000 	.word	0x40022000
 8007654:	40021000 	.word	0x40021000
 8007658:	0800dfa4 	.word	0x0800dfa4
 800765c:	20000020 	.word	0x20000020
 8007660:	20000024 	.word	0x20000024

08007664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	2300      	movs	r3, #0
 8007670:	60bb      	str	r3, [r7, #8]
 8007672:	2300      	movs	r3, #0
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	2300      	movs	r3, #0
 8007678:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800767e:	4b1e      	ldr	r3, [pc, #120]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f003 030c 	and.w	r3, r3, #12
 800768a:	2b04      	cmp	r3, #4
 800768c:	d002      	beq.n	8007694 <HAL_RCC_GetSysClockFreq+0x30>
 800768e:	2b08      	cmp	r3, #8
 8007690:	d003      	beq.n	800769a <HAL_RCC_GetSysClockFreq+0x36>
 8007692:	e027      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007694:	4b19      	ldr	r3, [pc, #100]	@ (80076fc <HAL_RCC_GetSysClockFreq+0x98>)
 8007696:	613b      	str	r3, [r7, #16]
      break;
 8007698:	e027      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	0c9b      	lsrs	r3, r3, #18
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	4a17      	ldr	r2, [pc, #92]	@ (8007700 <HAL_RCC_GetSysClockFreq+0x9c>)
 80076a4:	5cd3      	ldrb	r3, [r2, r3]
 80076a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d010      	beq.n	80076d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076b2:	4b11      	ldr	r3, [pc, #68]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	0c5b      	lsrs	r3, r3, #17
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	4a11      	ldr	r2, [pc, #68]	@ (8007704 <HAL_RCC_GetSysClockFreq+0xa0>)
 80076be:	5cd3      	ldrb	r3, [r2, r3]
 80076c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a0d      	ldr	r2, [pc, #52]	@ (80076fc <HAL_RCC_GetSysClockFreq+0x98>)
 80076c6:	fb03 f202 	mul.w	r2, r3, r2
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	e004      	b.n	80076de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007708 <HAL_RCC_GetSysClockFreq+0xa4>)
 80076d8:	fb02 f303 	mul.w	r3, r2, r3
 80076dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	613b      	str	r3, [r7, #16]
      break;
 80076e2:	e002      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80076e4:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <HAL_RCC_GetSysClockFreq+0x98>)
 80076e6:	613b      	str	r3, [r7, #16]
      break;
 80076e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076ea:	693b      	ldr	r3, [r7, #16]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	371c      	adds	r7, #28
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bc80      	pop	{r7}
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40021000 	.word	0x40021000
 80076fc:	007a1200 	.word	0x007a1200
 8007700:	0800dfbc 	.word	0x0800dfbc
 8007704:	0800dfcc 	.word	0x0800dfcc
 8007708:	003d0900 	.word	0x003d0900

0800770c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007710:	4b02      	ldr	r3, [pc, #8]	@ (800771c <HAL_RCC_GetHCLKFreq+0x10>)
 8007712:	681b      	ldr	r3, [r3, #0]
}
 8007714:	4618      	mov	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr
 800771c:	20000020 	.word	0x20000020

08007720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007724:	f7ff fff2 	bl	800770c <HAL_RCC_GetHCLKFreq>
 8007728:	4602      	mov	r2, r0
 800772a:	4b05      	ldr	r3, [pc, #20]	@ (8007740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	0a1b      	lsrs	r3, r3, #8
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	4903      	ldr	r1, [pc, #12]	@ (8007744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007736:	5ccb      	ldrb	r3, [r1, r3]
 8007738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800773c:	4618      	mov	r0, r3
 800773e:	bd80      	pop	{r7, pc}
 8007740:	40021000 	.word	0x40021000
 8007744:	0800dfb4 	.word	0x0800dfb4

08007748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800774c:	f7ff ffde 	bl	800770c <HAL_RCC_GetHCLKFreq>
 8007750:	4602      	mov	r2, r0
 8007752:	4b05      	ldr	r3, [pc, #20]	@ (8007768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	0adb      	lsrs	r3, r3, #11
 8007758:	f003 0307 	and.w	r3, r3, #7
 800775c:	4903      	ldr	r1, [pc, #12]	@ (800776c <HAL_RCC_GetPCLK2Freq+0x24>)
 800775e:	5ccb      	ldrb	r3, [r1, r3]
 8007760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007764:	4618      	mov	r0, r3
 8007766:	bd80      	pop	{r7, pc}
 8007768:	40021000 	.word	0x40021000
 800776c:	0800dfb4 	.word	0x0800dfb4

08007770 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	220f      	movs	r2, #15
 800777e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007780:	4b11      	ldr	r3, [pc, #68]	@ (80077c8 <HAL_RCC_GetClockConfig+0x58>)
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f003 0203 	and.w	r2, r3, #3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800778c:	4b0e      	ldr	r3, [pc, #56]	@ (80077c8 <HAL_RCC_GetClockConfig+0x58>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007798:	4b0b      	ldr	r3, [pc, #44]	@ (80077c8 <HAL_RCC_GetClockConfig+0x58>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80077a4:	4b08      	ldr	r3, [pc, #32]	@ (80077c8 <HAL_RCC_GetClockConfig+0x58>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	08db      	lsrs	r3, r3, #3
 80077aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <HAL_RCC_GetClockConfig+0x5c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0207 	and.w	r2, r3, #7
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr
 80077c8:	40021000 	.word	0x40021000
 80077cc:	40022000 	.word	0x40022000

080077d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80077d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007804 <RCC_Delay+0x34>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007808 <RCC_Delay+0x38>)
 80077de:	fba2 2303 	umull	r2, r3, r2, r3
 80077e2:	0a5b      	lsrs	r3, r3, #9
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	fb02 f303 	mul.w	r3, r2, r3
 80077ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80077ec:	bf00      	nop
  }
  while (Delay --);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	1e5a      	subs	r2, r3, #1
 80077f2:	60fa      	str	r2, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1f9      	bne.n	80077ec <RCC_Delay+0x1c>
}
 80077f8:	bf00      	nop
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr
 8007804:	20000020 	.word	0x20000020
 8007808:	10624dd3 	.word	0x10624dd3

0800780c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e076      	b.n	800790c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d108      	bne.n	8007838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800782e:	d009      	beq.n	8007844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	61da      	str	r2, [r3, #28]
 8007836:	e005      	b.n	8007844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fe fb8a 	bl	8005f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800787a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c8:	ea42 0103 	orr.w	r1, r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	0c1a      	lsrs	r2, r3, #16
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f002 0204 	and.w	r2, r2, #4
 80078ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69da      	ldr	r2, [r3, #28]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_SPI_Transmit+0x22>
 8007932:	2302      	movs	r3, #2
 8007934:	e12d      	b.n	8007b92 <HAL_SPI_Transmit+0x27e>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800793e:	f7fe fed5 	bl	80066ec <HAL_GetTick>
 8007942:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b01      	cmp	r3, #1
 8007952:	d002      	beq.n	800795a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007954:	2302      	movs	r3, #2
 8007956:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007958:	e116      	b.n	8007b88 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_SPI_Transmit+0x52>
 8007960:	88fb      	ldrh	r3, [r7, #6]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d102      	bne.n	800796c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800796a:	e10d      	b.n	8007b88 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2203      	movs	r2, #3
 8007970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	88fa      	ldrh	r2, [r7, #6]
 8007984:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	88fa      	ldrh	r2, [r7, #6]
 800798a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079b2:	d10f      	bne.n	80079d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079de:	2b40      	cmp	r3, #64	@ 0x40
 80079e0:	d007      	beq.n	80079f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079fa:	d14f      	bne.n	8007a9c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <HAL_SPI_Transmit+0xf6>
 8007a04:	8afb      	ldrh	r3, [r7, #22]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d142      	bne.n	8007a90 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0e:	881a      	ldrh	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1a:	1c9a      	adds	r2, r3, #2
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a2e:	e02f      	b.n	8007a90 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d112      	bne.n	8007a64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a42:	881a      	ldrh	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4e:	1c9a      	adds	r2, r3, #2
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a62:	e015      	b.n	8007a90 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a64:	f7fe fe42 	bl	80066ec <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d803      	bhi.n	8007a7c <HAL_SPI_Transmit+0x168>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a7a:	d102      	bne.n	8007a82 <HAL_SPI_Transmit+0x16e>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007a8e:	e07b      	b.n	8007b88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1ca      	bne.n	8007a30 <HAL_SPI_Transmit+0x11c>
 8007a9a:	e050      	b.n	8007b3e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_SPI_Transmit+0x196>
 8007aa4:	8afb      	ldrh	r3, [r7, #22]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d144      	bne.n	8007b34 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	7812      	ldrb	r2, [r2, #0]
 8007ab6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ad0:	e030      	b.n	8007b34 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d113      	bne.n	8007b08 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b06:	e015      	b.n	8007b34 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b08:	f7fe fdf0 	bl	80066ec <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d803      	bhi.n	8007b20 <HAL_SPI_Transmit+0x20c>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b1e:	d102      	bne.n	8007b26 <HAL_SPI_Transmit+0x212>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007b32:	e029      	b.n	8007b88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1c9      	bne.n	8007ad2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 fbcc 	bl	80082e0 <SPI_EndRxTxTransaction>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	613b      	str	r3, [r7, #16]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	613b      	str	r3, [r7, #16]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	77fb      	strb	r3, [r7, #31]
 8007b7e:	e003      	b.n	8007b88 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007b90:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3720      	adds	r7, #32
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b088      	sub	sp, #32
 8007b9e:	af02      	add	r7, sp, #8
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	603b      	str	r3, [r7, #0]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d002      	beq.n	8007bc0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bbe:	e0fb      	b.n	8007db8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bc8:	d112      	bne.n	8007bf0 <HAL_SPI_Receive+0x56>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10e      	bne.n	8007bf0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007bda:	88fa      	ldrh	r2, [r7, #6]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f8ef 	bl	8007dca <HAL_SPI_TransmitReceive>
 8007bec:	4603      	mov	r3, r0
 8007bee:	e0e8      	b.n	8007dc2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_SPI_Receive+0x64>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e0e1      	b.n	8007dc2 <HAL_SPI_Receive+0x228>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c06:	f7fe fd71 	bl	80066ec <HAL_GetTick>
 8007c0a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <HAL_SPI_Receive+0x7e>
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c1c:	e0cc      	b.n	8007db8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2204      	movs	r2, #4
 8007c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	88fa      	ldrh	r2, [r7, #6]
 8007c3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c64:	d10f      	bne.n	8007c86 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c90:	2b40      	cmp	r3, #64	@ 0x40
 8007c92:	d007      	beq.n	8007ca4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ca2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d16a      	bne.n	8007d82 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007cac:	e032      	b.n	8007d14 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d115      	bne.n	8007ce8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f103 020c 	add.w	r2, r3, #12
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc8:	7812      	ldrb	r2, [r2, #0]
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ce6:	e015      	b.n	8007d14 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ce8:	f7fe fd00 	bl	80066ec <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d803      	bhi.n	8007d00 <HAL_SPI_Receive+0x166>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cfe:	d102      	bne.n	8007d06 <HAL_SPI_Receive+0x16c>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007d12:	e051      	b.n	8007db8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1c7      	bne.n	8007cae <HAL_SPI_Receive+0x114>
 8007d1e:	e035      	b.n	8007d8c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d113      	bne.n	8007d56 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68da      	ldr	r2, [r3, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d38:	b292      	uxth	r2, r2
 8007d3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d40:	1c9a      	adds	r2, r3, #2
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d54:	e015      	b.n	8007d82 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d56:	f7fe fcc9 	bl	80066ec <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d803      	bhi.n	8007d6e <HAL_SPI_Receive+0x1d4>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d6c:	d102      	bne.n	8007d74 <HAL_SPI_Receive+0x1da>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007d80:	e01a      	b.n	8007db8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1c9      	bne.n	8007d20 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 fa53 	bl	800823c <SPI_EndRxTransaction>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
 8007dae:	e003      	b.n	8007db8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b08c      	sub	sp, #48	@ 0x30
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_SPI_TransmitReceive+0x26>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e198      	b.n	8008122 <HAL_SPI_TransmitReceive+0x358>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007df8:	f7fe fc78 	bl	80066ec <HAL_GetTick>
 8007dfc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007e0e:	887b      	ldrh	r3, [r7, #2]
 8007e10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d00f      	beq.n	8007e3a <HAL_SPI_TransmitReceive+0x70>
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e20:	d107      	bne.n	8007e32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d103      	bne.n	8007e32 <HAL_SPI_TransmitReceive+0x68>
 8007e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d003      	beq.n	8007e3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e32:	2302      	movs	r3, #2
 8007e34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007e38:	e16d      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x82>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x82>
 8007e46:	887b      	ldrh	r3, [r7, #2]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007e52:	e160      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d003      	beq.n	8007e68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2205      	movs	r2, #5
 8007e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	887a      	ldrh	r2, [r7, #2]
 8007e78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	887a      	ldrh	r2, [r7, #2]
 8007e7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	887a      	ldrh	r2, [r7, #2]
 8007e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	887a      	ldrh	r2, [r7, #2]
 8007e90:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea8:	2b40      	cmp	r3, #64	@ 0x40
 8007eaa:	d007      	beq.n	8007ebc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ec4:	d17c      	bne.n	8007fc0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <HAL_SPI_TransmitReceive+0x10a>
 8007ece:	8b7b      	ldrh	r3, [r7, #26]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d16a      	bne.n	8007faa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed8:	881a      	ldrh	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee4:	1c9a      	adds	r2, r3, #2
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ef8:	e057      	b.n	8007faa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d11b      	bne.n	8007f40 <HAL_SPI_TransmitReceive+0x176>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d016      	beq.n	8007f40 <HAL_SPI_TransmitReceive+0x176>
 8007f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d113      	bne.n	8007f40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f1c:	881a      	ldrh	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f28:	1c9a      	adds	r2, r3, #2
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d119      	bne.n	8007f82 <HAL_SPI_TransmitReceive+0x1b8>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d014      	beq.n	8007f82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f62:	b292      	uxth	r2, r2
 8007f64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6a:	1c9a      	adds	r2, r3, #2
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f82:	f7fe fbb3 	bl	80066ec <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d80b      	bhi.n	8007faa <HAL_SPI_TransmitReceive+0x1e0>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f98:	d007      	beq.n	8007faa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007fa8:	e0b5      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1a2      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x130>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d19d      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x130>
 8007fbe:	e080      	b.n	80080c2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <HAL_SPI_TransmitReceive+0x204>
 8007fc8:	8b7b      	ldrh	r3, [r7, #26]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d16f      	bne.n	80080ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	7812      	ldrb	r2, [r2, #0]
 8007fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ff4:	e05b      	b.n	80080ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b02      	cmp	r3, #2
 8008002:	d11c      	bne.n	800803e <HAL_SPI_TransmitReceive+0x274>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008008:	b29b      	uxth	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d017      	beq.n	800803e <HAL_SPI_TransmitReceive+0x274>
 800800e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d114      	bne.n	800803e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	330c      	adds	r3, #12
 800801e:	7812      	ldrb	r2, [r2, #0]
 8008020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b01      	cmp	r3, #1
 800804a:	d119      	bne.n	8008080 <HAL_SPI_TransmitReceive+0x2b6>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d014      	beq.n	8008080 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008060:	b2d2      	uxtb	r2, r2
 8008062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800807c:	2301      	movs	r3, #1
 800807e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008080:	f7fe fb34 	bl	80066ec <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800808c:	429a      	cmp	r2, r3
 800808e:	d803      	bhi.n	8008098 <HAL_SPI_TransmitReceive+0x2ce>
 8008090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008096:	d102      	bne.n	800809e <HAL_SPI_TransmitReceive+0x2d4>
 8008098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809a:	2b00      	cmp	r3, #0
 800809c:	d107      	bne.n	80080ae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80080ac:	e033      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d19e      	bne.n	8007ff6 <HAL_SPI_TransmitReceive+0x22c>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d199      	bne.n	8007ff6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f90a 	bl	80082e0 <SPI_EndRxTxTransaction>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d006      	beq.n	80080e0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2220      	movs	r2, #32
 80080dc:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80080de:	e01a      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080e8:	2300      	movs	r3, #0
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810c:	e003      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800811e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008122:	4618      	mov	r0, r3
 8008124:	3730      	adds	r7, #48	@ 0x30
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4613      	mov	r3, r2
 800813a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800813c:	f7fe fad6 	bl	80066ec <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4413      	add	r3, r2
 800814a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800814c:	f7fe face 	bl	80066ec <HAL_GetTick>
 8008150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008152:	4b39      	ldr	r3, [pc, #228]	@ (8008238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	015b      	lsls	r3, r3, #5
 8008158:	0d1b      	lsrs	r3, r3, #20
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	fb02 f303 	mul.w	r3, r2, r3
 8008160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008162:	e054      	b.n	800820e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800816a:	d050      	beq.n	800820e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800816c:	f7fe fabe 	bl	80066ec <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	429a      	cmp	r2, r3
 800817a:	d902      	bls.n	8008182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d13d      	bne.n	80081fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800819a:	d111      	bne.n	80081c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081a4:	d004      	beq.n	80081b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ae:	d107      	bne.n	80081c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081c8:	d10f      	bne.n	80081ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80081e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e017      	b.n	800822e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	3b01      	subs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4013      	ands	r3, r2
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	429a      	cmp	r2, r3
 800821c:	bf0c      	ite	eq
 800821e:	2301      	moveq	r3, #1
 8008220:	2300      	movne	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	429a      	cmp	r2, r3
 800822a:	d19b      	bne.n	8008164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3720      	adds	r7, #32
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000020 	.word	0x20000020

0800823c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af02      	add	r7, sp, #8
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008250:	d111      	bne.n	8008276 <SPI_EndRxTransaction+0x3a>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800825a:	d004      	beq.n	8008266 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008264:	d107      	bne.n	8008276 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008274:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800827e:	d117      	bne.n	80082b0 <SPI_EndRxTransaction+0x74>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008288:	d112      	bne.n	80082b0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	2101      	movs	r1, #1
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f7ff ff49 	bl	800812c <SPI_WaitFlagStateUntilTimeout>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d01a      	beq.n	80082d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a4:	f043 0220 	orr.w	r2, r3, #32
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e013      	b.n	80082d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2200      	movs	r2, #0
 80082b8:	2180      	movs	r1, #128	@ 0x80
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7ff ff36 	bl	800812c <SPI_WaitFlagStateUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ca:	f043 0220 	orr.w	r2, r3, #32
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e000      	b.n	80082d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af02      	add	r7, sp, #8
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2200      	movs	r2, #0
 80082f4:	2180      	movs	r1, #128	@ 0x80
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f7ff ff18 	bl	800812c <SPI_WaitFlagStateUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d007      	beq.n	8008312 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008306:	f043 0220 	orr.w	r2, r3, #32
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e000      	b.n	8008314 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e041      	b.n	80083b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d106      	bne.n	8008348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f839 	bl	80083ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2202      	movs	r2, #2
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3304      	adds	r3, #4
 8008358:	4619      	mov	r1, r3
 800835a:	4610      	mov	r0, r2
 800835c:	f000 f9c2 	bl	80086e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80083c2:	bf00      	nop
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bc80      	pop	{r7}
 80083ca:	4770      	bx	lr

080083cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d001      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e044      	b.n	800846e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0201 	orr.w	r2, r2, #1
 80083fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1d      	ldr	r2, [pc, #116]	@ (8008478 <HAL_TIM_Base_Start_IT+0xac>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d018      	beq.n	8008438 <HAL_TIM_Base_Start_IT+0x6c>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1c      	ldr	r2, [pc, #112]	@ (800847c <HAL_TIM_Base_Start_IT+0xb0>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d013      	beq.n	8008438 <HAL_TIM_Base_Start_IT+0x6c>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008418:	d00e      	beq.n	8008438 <HAL_TIM_Base_Start_IT+0x6c>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a18      	ldr	r2, [pc, #96]	@ (8008480 <HAL_TIM_Base_Start_IT+0xb4>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d009      	beq.n	8008438 <HAL_TIM_Base_Start_IT+0x6c>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a16      	ldr	r2, [pc, #88]	@ (8008484 <HAL_TIM_Base_Start_IT+0xb8>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d004      	beq.n	8008438 <HAL_TIM_Base_Start_IT+0x6c>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a15      	ldr	r2, [pc, #84]	@ (8008488 <HAL_TIM_Base_Start_IT+0xbc>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d111      	bne.n	800845c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b06      	cmp	r3, #6
 8008448:	d010      	beq.n	800846c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0201 	orr.w	r2, r2, #1
 8008458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800845a:	e007      	b.n	800846c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0201 	orr.w	r2, r2, #1
 800846a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	bc80      	pop	{r7}
 8008476:	4770      	bx	lr
 8008478:	40012c00 	.word	0x40012c00
 800847c:	40013400 	.word	0x40013400
 8008480:	40000400 	.word	0x40000400
 8008484:	40000800 	.word	0x40000800
 8008488:	40000c00 	.word	0x40000c00

0800848c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d122      	bne.n	80084e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d11b      	bne.n	80084e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f06f 0202 	mvn.w	r2, #2
 80084b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	f003 0303 	and.w	r3, r3, #3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f8ed 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 80084d4:	e005      	b.n	80084e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f8e0 	bl	800869c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f8ef 	bl	80086c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d122      	bne.n	800853c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b04      	cmp	r3, #4
 8008502:	d11b      	bne.n	800853c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f06f 0204 	mvn.w	r2, #4
 800850c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2202      	movs	r2, #2
 8008512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f8c3 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 8008528:	e005      	b.n	8008536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f8b6 	bl	800869c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f8c5 	bl	80086c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b08      	cmp	r3, #8
 8008548:	d122      	bne.n	8008590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	f003 0308 	and.w	r3, r3, #8
 8008554:	2b08      	cmp	r3, #8
 8008556:	d11b      	bne.n	8008590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f06f 0208 	mvn.w	r2, #8
 8008560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2204      	movs	r2, #4
 8008566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f899 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 800857c:	e005      	b.n	800858a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f88c 	bl	800869c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f89b 	bl	80086c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0310 	and.w	r3, r3, #16
 800859a:	2b10      	cmp	r3, #16
 800859c:	d122      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d11b      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f06f 0210 	mvn.w	r2, #16
 80085b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2208      	movs	r2, #8
 80085ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f86f 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 80085d0:	e005      	b.n	80085de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f862 	bl	800869c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f871 	bl	80086c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d10e      	bne.n	8008610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d107      	bne.n	8008610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0201 	mvn.w	r2, #1
 8008608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7fc ff20 	bl	8005450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800861a:	2b80      	cmp	r3, #128	@ 0x80
 800861c:	d10e      	bne.n	800863c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008628:	2b80      	cmp	r3, #128	@ 0x80
 800862a:	d107      	bne.n	800863c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f8d7 	bl	80087ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008646:	2b40      	cmp	r3, #64	@ 0x40
 8008648:	d10e      	bne.n	8008668 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008654:	2b40      	cmp	r3, #64	@ 0x40
 8008656:	d107      	bne.n	8008668 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f835 	bl	80086d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b20      	cmp	r3, #32
 8008674:	d10e      	bne.n	8008694 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f003 0320 	and.w	r3, r3, #32
 8008680:	2b20      	cmp	r3, #32
 8008682:	d107      	bne.n	8008694 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f06f 0220 	mvn.w	r2, #32
 800868c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f8a2 	bl	80087d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr

080086ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bc80      	pop	{r7}
 80086d0:	4770      	bx	lr

080086d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr

080086e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a33      	ldr	r2, [pc, #204]	@ (80087c4 <TIM_Base_SetConfig+0xe0>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d013      	beq.n	8008724 <TIM_Base_SetConfig+0x40>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a32      	ldr	r2, [pc, #200]	@ (80087c8 <TIM_Base_SetConfig+0xe4>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00f      	beq.n	8008724 <TIM_Base_SetConfig+0x40>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800870a:	d00b      	beq.n	8008724 <TIM_Base_SetConfig+0x40>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a2f      	ldr	r2, [pc, #188]	@ (80087cc <TIM_Base_SetConfig+0xe8>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d007      	beq.n	8008724 <TIM_Base_SetConfig+0x40>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a2e      	ldr	r2, [pc, #184]	@ (80087d0 <TIM_Base_SetConfig+0xec>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_Base_SetConfig+0x40>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a2d      	ldr	r2, [pc, #180]	@ (80087d4 <TIM_Base_SetConfig+0xf0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d108      	bne.n	8008736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800872a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a22      	ldr	r2, [pc, #136]	@ (80087c4 <TIM_Base_SetConfig+0xe0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d013      	beq.n	8008766 <TIM_Base_SetConfig+0x82>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a21      	ldr	r2, [pc, #132]	@ (80087c8 <TIM_Base_SetConfig+0xe4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00f      	beq.n	8008766 <TIM_Base_SetConfig+0x82>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800874c:	d00b      	beq.n	8008766 <TIM_Base_SetConfig+0x82>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a1e      	ldr	r2, [pc, #120]	@ (80087cc <TIM_Base_SetConfig+0xe8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d007      	beq.n	8008766 <TIM_Base_SetConfig+0x82>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a1d      	ldr	r2, [pc, #116]	@ (80087d0 <TIM_Base_SetConfig+0xec>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d003      	beq.n	8008766 <TIM_Base_SetConfig+0x82>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a1c      	ldr	r2, [pc, #112]	@ (80087d4 <TIM_Base_SetConfig+0xf0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d108      	bne.n	8008778 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800876c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4313      	orrs	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a09      	ldr	r2, [pc, #36]	@ (80087c4 <TIM_Base_SetConfig+0xe0>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d003      	beq.n	80087ac <TIM_Base_SetConfig+0xc8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a08      	ldr	r2, [pc, #32]	@ (80087c8 <TIM_Base_SetConfig+0xe4>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d103      	bne.n	80087b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	691a      	ldr	r2, [r3, #16]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	615a      	str	r2, [r3, #20]
}
 80087ba:	bf00      	nop
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	bc80      	pop	{r7}
 80087c2:	4770      	bx	lr
 80087c4:	40012c00 	.word	0x40012c00
 80087c8:	40013400 	.word	0x40013400
 80087cc:	40000400 	.word	0x40000400
 80087d0:	40000800 	.word	0x40000800
 80087d4:	40000c00 	.word	0x40000c00

080087d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bc80      	pop	{r7}
 80087e8:	4770      	bx	lr

080087ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr

080087fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e042      	b.n	8008894 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7fd fc02 	bl	800602c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2224      	movs	r2, #36	@ 0x24
 800882c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800883e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fe03 	bl	800944c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	695a      	ldr	r2, [r3, #20]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2220      	movs	r2, #32
 8008880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	@ 0x28
 80088a0:	af02      	add	r7, sp, #8
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	4613      	mov	r3, r2
 80088aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d16d      	bne.n	8008998 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <HAL_UART_Transmit+0x2c>
 80088c2:	88fb      	ldrh	r3, [r7, #6]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e066      	b.n	800899a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2221      	movs	r2, #33	@ 0x21
 80088d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088da:	f7fd ff07 	bl	80066ec <HAL_GetTick>
 80088de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	88fa      	ldrh	r2, [r7, #6]
 80088ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088f4:	d108      	bne.n	8008908 <HAL_UART_Transmit+0x6c>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d104      	bne.n	8008908 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	e003      	b.n	8008910 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800890c:	2300      	movs	r3, #0
 800890e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008910:	e02a      	b.n	8008968 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2200      	movs	r2, #0
 800891a:	2180      	movs	r1, #128	@ 0x80
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 fb8b 	bl	8009038 <UART_WaitOnFlagUntilTimeout>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e036      	b.n	800899a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	3302      	adds	r3, #2
 8008946:	61bb      	str	r3, [r7, #24]
 8008948:	e007      	b.n	800895a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	781a      	ldrb	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	3301      	adds	r3, #1
 8008958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800895e:	b29b      	uxth	r3, r3
 8008960:	3b01      	subs	r3, #1
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1cf      	bne.n	8008912 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2200      	movs	r2, #0
 800897a:	2140      	movs	r1, #64	@ 0x40
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fb5b 	bl	8009038 <UART_WaitOnFlagUntilTimeout>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e006      	b.n	800899a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	e000      	b.n	800899a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008998:	2302      	movs	r3, #2
  }
}
 800899a:	4618      	mov	r0, r3
 800899c:	3720      	adds	r7, #32
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b08a      	sub	sp, #40	@ 0x28
 80089a6:	af02      	add	r7, sp, #8
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	603b      	str	r3, [r7, #0]
 80089ae:	4613      	mov	r3, r2
 80089b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b20      	cmp	r3, #32
 80089c0:	d17c      	bne.n	8008abc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <HAL_UART_Receive+0x2c>
 80089c8:	88fb      	ldrh	r3, [r7, #6]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e075      	b.n	8008abe <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2222      	movs	r2, #34	@ 0x22
 80089dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089e6:	f7fd fe81 	bl	80066ec <HAL_GetTick>
 80089ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	88fa      	ldrh	r2, [r7, #6]
 80089f0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a00:	d108      	bne.n	8008a14 <HAL_UART_Receive+0x72>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d104      	bne.n	8008a14 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	e003      	b.n	8008a1c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008a1c:	e043      	b.n	8008aa6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2200      	movs	r2, #0
 8008a26:	2120      	movs	r1, #32
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 fb05 	bl	8009038 <UART_WaitOnFlagUntilTimeout>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e042      	b.n	8008abe <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10c      	bne.n	8008a58 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	3302      	adds	r3, #2
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	e01f      	b.n	8008a98 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a60:	d007      	beq.n	8008a72 <HAL_UART_Receive+0xd0>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <HAL_UART_Receive+0xde>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	701a      	strb	r2, [r3, #0]
 8008a7e:	e008      	b.n	8008a92 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	3301      	adds	r3, #1
 8008a96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1b6      	bne.n	8008a1e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e000      	b.n	8008abe <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008abc:	2302      	movs	r3, #2
  }
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3720      	adds	r7, #32
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b0ba      	sub	sp, #232	@ 0xe8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008afe:	f003 030f 	and.w	r3, r3, #15
 8008b02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10f      	bne.n	8008b2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b12:	f003 0320 	and.w	r3, r3, #32
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d009      	beq.n	8008b2e <HAL_UART_IRQHandler+0x66>
 8008b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b1e:	f003 0320 	and.w	r3, r3, #32
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fbd1 	bl	80092ce <UART_Receive_IT>
      return;
 8008b2c:	e25b      	b.n	8008fe6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 80de 	beq.w	8008cf4 <HAL_UART_IRQHandler+0x22c>
 8008b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d106      	bne.n	8008b52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 80d1 	beq.w	8008cf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00b      	beq.n	8008b76 <HAL_UART_IRQHandler+0xae>
 8008b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b6e:	f043 0201 	orr.w	r2, r3, #1
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <HAL_UART_IRQHandler+0xd2>
 8008b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d005      	beq.n	8008b9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b92:	f043 0202 	orr.w	r2, r3, #2
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00b      	beq.n	8008bbe <HAL_UART_IRQHandler+0xf6>
 8008ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d005      	beq.n	8008bbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb6:	f043 0204 	orr.w	r2, r3, #4
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d011      	beq.n	8008bee <HAL_UART_IRQHandler+0x126>
 8008bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d105      	bne.n	8008be2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008be6:	f043 0208 	orr.w	r2, r3, #8
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 81f2 	beq.w	8008fdc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bfc:	f003 0320 	and.w	r3, r3, #32
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d008      	beq.n	8008c16 <HAL_UART_IRQHandler+0x14e>
 8008c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fb5c 	bl	80092ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bf14      	ite	ne
 8008c24:	2301      	movne	r3, #1
 8008c26:	2300      	moveq	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c32:	f003 0308 	and.w	r3, r3, #8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d103      	bne.n	8008c42 <HAL_UART_IRQHandler+0x17a>
 8008c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d04f      	beq.n	8008ce2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fa66 	bl	8009114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d041      	beq.n	8008cda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3314      	adds	r3, #20
 8008c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3314      	adds	r3, #20
 8008c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1d9      	bne.n	8008c56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d013      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cae:	4a7e      	ldr	r2, [pc, #504]	@ (8008ea8 <HAL_UART_IRQHandler+0x3e0>)
 8008cb0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fd fe60 	bl	800697c <HAL_DMA_Abort_IT>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d016      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd0:	e00e      	b.n	8008cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f99c 	bl	8009010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd8:	e00a      	b.n	8008cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f998 	bl	8009010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce0:	e006      	b.n	8008cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f994 	bl	8009010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008cee:	e175      	b.n	8008fdc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf0:	bf00      	nop
    return;
 8008cf2:	e173      	b.n	8008fdc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	f040 814f 	bne.w	8008f9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d02:	f003 0310 	and.w	r3, r3, #16
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 8148 	beq.w	8008f9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 8141 	beq.w	8008f9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60bb      	str	r3, [r7, #8]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60bb      	str	r3, [r7, #8]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	60bb      	str	r3, [r7, #8]
 8008d2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 80b6 	beq.w	8008eac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8145 	beq.w	8008fe0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	f080 813e 	bcs.w	8008fe0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	2b20      	cmp	r3, #32
 8008d74:	f000 8088 	beq.w	8008e88 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	330c      	adds	r3, #12
 8008d7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	330c      	adds	r3, #12
 8008da0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008da4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008da8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008db0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1d9      	bne.n	8008d78 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3314      	adds	r3, #20
 8008dca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008dce:	e853 3f00 	ldrex	r3, [r3]
 8008dd2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008dd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008dd6:	f023 0301 	bic.w	r3, r3, #1
 8008dda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3314      	adds	r3, #20
 8008de4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008de8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008df0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008dfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e1      	bne.n	8008dc4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3314      	adds	r3, #20
 8008e06:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3314      	adds	r3, #20
 8008e20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e24:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e28:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e2c:	e841 2300 	strex	r3, r2, [r1]
 8008e30:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e3      	bne.n	8008e00 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	330c      	adds	r3, #12
 8008e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e58:	f023 0310 	bic.w	r3, r3, #16
 8008e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	330c      	adds	r3, #12
 8008e66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008e6a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008e6c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e3      	bne.n	8008e46 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fd fd3f 	bl	8006906 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f8bf 	bl	8009022 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ea4:	e09c      	b.n	8008fe0 <HAL_UART_IRQHandler+0x518>
 8008ea6:	bf00      	nop
 8008ea8:	080091d9 	.word	0x080091d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 808e 	beq.w	8008fe4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008ec8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 8089 	beq.w	8008fe4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	330c      	adds	r3, #12
 8008ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	330c      	adds	r3, #12
 8008ef2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008ef6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ef8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008efc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008efe:	e841 2300 	strex	r3, r2, [r1]
 8008f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e3      	bne.n	8008ed2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3314      	adds	r3, #20
 8008f10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	623b      	str	r3, [r7, #32]
   return(result);
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	f023 0301 	bic.w	r3, r3, #1
 8008f20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3314      	adds	r3, #20
 8008f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e3      	bne.n	8008f0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	330c      	adds	r3, #12
 8008f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	e853 3f00 	ldrex	r3, [r3]
 8008f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0310 	bic.w	r3, r3, #16
 8008f66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	330c      	adds	r3, #12
 8008f70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008f74:	61fa      	str	r2, [r7, #28]
 8008f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	69b9      	ldr	r1, [r7, #24]
 8008f7a:	69fa      	ldr	r2, [r7, #28]
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	617b      	str	r3, [r7, #20]
   return(result);
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e3      	bne.n	8008f50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f844 	bl	8009022 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f9a:	e023      	b.n	8008fe4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d009      	beq.n	8008fbc <HAL_UART_IRQHandler+0x4f4>
 8008fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f923 	bl	8009200 <UART_Transmit_IT>
    return;
 8008fba:	e014      	b.n	8008fe6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00e      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x51e>
 8008fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d008      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f962 	bl	800929e <UART_EndTransmit_IT>
    return;
 8008fda:	e004      	b.n	8008fe6 <HAL_UART_IRQHandler+0x51e>
    return;
 8008fdc:	bf00      	nop
 8008fde:	e002      	b.n	8008fe6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008fe0:	bf00      	nop
 8008fe2:	e000      	b.n	8008fe6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008fe4:	bf00      	nop
  }
}
 8008fe6:	37e8      	adds	r7, #232	@ 0xe8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bc80      	pop	{r7}
 8008ffc:	4770      	bx	lr

08008ffe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr

08009010 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr

08009022 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	460b      	mov	r3, r1
 800902c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800902e:	bf00      	nop
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr

08009038 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b090      	sub	sp, #64	@ 0x40
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	4613      	mov	r3, r2
 8009046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009048:	e050      	b.n	80090ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800904a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800904c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009050:	d04c      	beq.n	80090ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009054:	2b00      	cmp	r3, #0
 8009056:	d007      	beq.n	8009068 <UART_WaitOnFlagUntilTimeout+0x30>
 8009058:	f7fd fb48 	bl	80066ec <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009064:	429a      	cmp	r2, r3
 8009066:	d241      	bcs.n	80090ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	330c      	adds	r3, #12
 800906e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	330c      	adds	r3, #12
 8009086:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009088:	637a      	str	r2, [r7, #52]	@ 0x34
 800908a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800908e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e5      	bne.n	8009068 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3314      	adds	r3, #20
 80090a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	613b      	str	r3, [r7, #16]
   return(result);
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	f023 0301 	bic.w	r3, r3, #1
 80090b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3314      	adds	r3, #20
 80090ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090bc:	623a      	str	r2, [r7, #32]
 80090be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	69f9      	ldr	r1, [r7, #28]
 80090c2:	6a3a      	ldr	r2, [r7, #32]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e5      	bne.n	800909c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2220      	movs	r2, #32
 80090dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e00f      	b.n	800910c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	4013      	ands	r3, r2
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	bf0c      	ite	eq
 80090fc:	2301      	moveq	r3, #1
 80090fe:	2300      	movne	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	429a      	cmp	r2, r3
 8009108:	d09f      	beq.n	800904a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3740      	adds	r7, #64	@ 0x40
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b095      	sub	sp, #84	@ 0x54
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	330c      	adds	r3, #12
 8009122:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800912c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800913c:	643a      	str	r2, [r7, #64]	@ 0x40
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009144:	e841 2300 	strex	r3, r2, [r1]
 8009148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800914a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e5      	bne.n	800911c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3314      	adds	r3, #20
 8009156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	e853 3f00 	ldrex	r3, [r3]
 800915e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f023 0301 	bic.w	r3, r3, #1
 8009166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3314      	adds	r3, #20
 800916e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009170:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009172:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800917e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e5      	bne.n	8009150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009188:	2b01      	cmp	r3, #1
 800918a:	d119      	bne.n	80091c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	330c      	adds	r3, #12
 8009192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	60bb      	str	r3, [r7, #8]
   return(result);
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f023 0310 	bic.w	r3, r3, #16
 80091a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	330c      	adds	r3, #12
 80091aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091ac:	61ba      	str	r2, [r7, #24]
 80091ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6979      	ldr	r1, [r7, #20]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	613b      	str	r3, [r7, #16]
   return(result);
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e5      	bne.n	800918c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80091ce:	bf00      	nop
 80091d0:	3754      	adds	r7, #84	@ 0x54
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bc80      	pop	{r7}
 80091d6:	4770      	bx	lr

080091d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f7ff ff0c 	bl	8009010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b21      	cmp	r3, #33	@ 0x21
 8009212:	d13e      	bne.n	8009292 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800921c:	d114      	bne.n	8009248 <UART_Transmit_IT+0x48>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d110      	bne.n	8009248 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800923a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	1c9a      	adds	r2, r3, #2
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	621a      	str	r2, [r3, #32]
 8009246:	e008      	b.n	800925a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	1c59      	adds	r1, r3, #1
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	6211      	str	r1, [r2, #32]
 8009252:	781a      	ldrb	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800925e:	b29b      	uxth	r3, r3
 8009260:	3b01      	subs	r3, #1
 8009262:	b29b      	uxth	r3, r3
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	4619      	mov	r1, r3
 8009268:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10f      	bne.n	800928e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68da      	ldr	r2, [r3, #12]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800927c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68da      	ldr	r2, [r3, #12]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800928c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	e000      	b.n	8009294 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009292:	2302      	movs	r3, #2
  }
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	bc80      	pop	{r7}
 800929c:	4770      	bx	lr

0800929e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68da      	ldr	r2, [r3, #12]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff fe94 	bl	8008fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b08c      	sub	sp, #48	@ 0x30
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b22      	cmp	r3, #34	@ 0x22
 80092e0:	f040 80ae 	bne.w	8009440 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ec:	d117      	bne.n	800931e <UART_Receive_IT+0x50>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d113      	bne.n	800931e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	b29b      	uxth	r3, r3
 8009308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930c:	b29a      	uxth	r2, r3
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009316:	1c9a      	adds	r2, r3, #2
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	629a      	str	r2, [r3, #40]	@ 0x28
 800931c:	e026      	b.n	800936c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009322:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009324:	2300      	movs	r3, #0
 8009326:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009330:	d007      	beq.n	8009342 <UART_Receive_IT+0x74>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10a      	bne.n	8009350 <UART_Receive_IT+0x82>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d106      	bne.n	8009350 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	b2da      	uxtb	r2, r3
 800934a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800934c:	701a      	strb	r2, [r3, #0]
 800934e:	e008      	b.n	8009362 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800935c:	b2da      	uxtb	r2, r3
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009370:	b29b      	uxth	r3, r3
 8009372:	3b01      	subs	r3, #1
 8009374:	b29b      	uxth	r3, r3
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	4619      	mov	r1, r3
 800937a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800937c:	2b00      	cmp	r3, #0
 800937e:	d15d      	bne.n	800943c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68da      	ldr	r2, [r3, #12]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0220 	bic.w	r2, r2, #32
 800938e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800939e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	695a      	ldr	r2, [r3, #20]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 0201 	bic.w	r2, r2, #1
 80093ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d135      	bne.n	8009432 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	330c      	adds	r3, #12
 80093d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	e853 3f00 	ldrex	r3, [r3]
 80093da:	613b      	str	r3, [r7, #16]
   return(result);
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f023 0310 	bic.w	r3, r3, #16
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	330c      	adds	r3, #12
 80093ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ec:	623a      	str	r2, [r7, #32]
 80093ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	69f9      	ldr	r1, [r7, #28]
 80093f2:	6a3a      	ldr	r2, [r7, #32]
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e5      	bne.n	80093cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0310 	and.w	r3, r3, #16
 800940a:	2b10      	cmp	r3, #16
 800940c:	d10a      	bne.n	8009424 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800940e:	2300      	movs	r3, #0
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff fdf9 	bl	8009022 <HAL_UARTEx_RxEventCallback>
 8009430:	e002      	b.n	8009438 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff fde3 	bl	8008ffe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	e002      	b.n	8009442 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	e000      	b.n	8009442 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009440:	2302      	movs	r3, #2
  }
}
 8009442:	4618      	mov	r0, r3
 8009444:	3730      	adds	r7, #48	@ 0x30
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	689a      	ldr	r2, [r3, #8]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	431a      	orrs	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009486:	f023 030c 	bic.w	r3, r3, #12
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	6812      	ldr	r2, [r2, #0]
 800948e:	68b9      	ldr	r1, [r7, #8]
 8009490:	430b      	orrs	r3, r1
 8009492:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	699a      	ldr	r2, [r3, #24]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009560 <UART_SetConfig+0x114>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d103      	bne.n	80094bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80094b4:	f7fe f948 	bl	8007748 <HAL_RCC_GetPCLK2Freq>
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	e002      	b.n	80094c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80094bc:	f7fe f930 	bl	8007720 <HAL_RCC_GetPCLK1Freq>
 80094c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009a      	lsls	r2, r3, #2
 80094cc:	441a      	add	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d8:	4a22      	ldr	r2, [pc, #136]	@ (8009564 <UART_SetConfig+0x118>)
 80094da:	fba2 2303 	umull	r2, r3, r2, r3
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	0119      	lsls	r1, r3, #4
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	009a      	lsls	r2, r3, #2
 80094ec:	441a      	add	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80094f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009564 <UART_SetConfig+0x118>)
 80094fa:	fba3 0302 	umull	r0, r3, r3, r2
 80094fe:	095b      	lsrs	r3, r3, #5
 8009500:	2064      	movs	r0, #100	@ 0x64
 8009502:	fb00 f303 	mul.w	r3, r0, r3
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	011b      	lsls	r3, r3, #4
 800950a:	3332      	adds	r3, #50	@ 0x32
 800950c:	4a15      	ldr	r2, [pc, #84]	@ (8009564 <UART_SetConfig+0x118>)
 800950e:	fba2 2303 	umull	r2, r3, r2, r3
 8009512:	095b      	lsrs	r3, r3, #5
 8009514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009518:	4419      	add	r1, r3
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009a      	lsls	r2, r3, #2
 8009524:	441a      	add	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009530:	4b0c      	ldr	r3, [pc, #48]	@ (8009564 <UART_SetConfig+0x118>)
 8009532:	fba3 0302 	umull	r0, r3, r3, r2
 8009536:	095b      	lsrs	r3, r3, #5
 8009538:	2064      	movs	r0, #100	@ 0x64
 800953a:	fb00 f303 	mul.w	r3, r0, r3
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	011b      	lsls	r3, r3, #4
 8009542:	3332      	adds	r3, #50	@ 0x32
 8009544:	4a07      	ldr	r2, [pc, #28]	@ (8009564 <UART_SetConfig+0x118>)
 8009546:	fba2 2303 	umull	r2, r3, r2, r3
 800954a:	095b      	lsrs	r3, r3, #5
 800954c:	f003 020f 	and.w	r2, r3, #15
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	440a      	add	r2, r1
 8009556:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	40013800 	.word	0x40013800
 8009564:	51eb851f 	.word	0x51eb851f

08009568 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009572:	2300      	movs	r3, #0
 8009574:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800957a:	2b84      	cmp	r3, #132	@ 0x84
 800957c:	d005      	beq.n	800958a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800957e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	3303      	adds	r3, #3
 8009588:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800958a:	68fb      	ldr	r3, [r7, #12]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr

08009596 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800959a:	f000 fa6d 	bl	8009a78 <vTaskStartScheduler>
  
  return osOK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80095a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a6:	b089      	sub	sp, #36	@ 0x24
 80095a8:	af04      	add	r7, sp, #16
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d020      	beq.n	80095f8 <osThreadCreate+0x54>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d01c      	beq.n	80095f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685c      	ldr	r4, [r3, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691e      	ldr	r6, [r3, #16]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff ffc9 	bl	8009568 <makeFreeRtosPriority>
 80095d6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095e0:	9202      	str	r2, [sp, #8]
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	9100      	str	r1, [sp, #0]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	4632      	mov	r2, r6
 80095ea:	4629      	mov	r1, r5
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 f89c 	bl	800972a <xTaskCreateStatic>
 80095f2:	4603      	mov	r3, r0
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	e01c      	b.n	8009632 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685c      	ldr	r4, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009604:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800960c:	4618      	mov	r0, r3
 800960e:	f7ff ffab 	bl	8009568 <makeFreeRtosPriority>
 8009612:	4602      	mov	r2, r0
 8009614:	f107 030c 	add.w	r3, r7, #12
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	9200      	str	r2, [sp, #0]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	4632      	mov	r2, r6
 8009620:	4629      	mov	r1, r5
 8009622:	4620      	mov	r0, r4
 8009624:	f000 f8e0 	bl	80097e8 <xTaskCreate>
 8009628:	4603      	mov	r3, r0
 800962a:	2b01      	cmp	r3, #1
 800962c:	d001      	beq.n	8009632 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800962e:	2300      	movs	r3, #0
 8009630:	e000      	b.n	8009634 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009632:	68fb      	ldr	r3, [r7, #12]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800963c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f103 0208 	add.w	r2, r3, #8
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f103 0208 	add.w	r2, r3, #8
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f103 0208 	add.w	r2, r3, #8
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	bc80      	pop	{r7}
 8009678:	4770      	bx	lr

0800967a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	bc80      	pop	{r7}
 8009690:	4770      	bx	lr

08009692 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009692:	b480      	push	{r7}
 8009694:	b085      	sub	sp, #20
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	601a      	str	r2, [r3, #0]
}
 80096ce:	bf00      	nop
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bc80      	pop	{r7}
 80096d6:	4770      	bx	lr

080096d8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	6892      	ldr	r2, [r2, #8]
 80096ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	6852      	ldr	r2, [r2, #4]
 80096f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	429a      	cmp	r2, r3
 8009702:	d103      	bne.n	800970c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689a      	ldr	r2, [r3, #8]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	1e5a      	subs	r2, r3, #1
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	bc80      	pop	{r7}
 8009728:	4770      	bx	lr

0800972a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800972a:	b580      	push	{r7, lr}
 800972c:	b08e      	sub	sp, #56	@ 0x38
 800972e:	af04      	add	r7, sp, #16
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10b      	bne.n	8009756 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009750:	bf00      	nop
 8009752:	bf00      	nop
 8009754:	e7fd      	b.n	8009752 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10b      	bne.n	8009774 <xTaskCreateStatic+0x4a>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	61fb      	str	r3, [r7, #28]
}
 800976e:	bf00      	nop
 8009770:	bf00      	nop
 8009772:	e7fd      	b.n	8009770 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009774:	23a0      	movs	r3, #160	@ 0xa0
 8009776:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	2ba0      	cmp	r3, #160	@ 0xa0
 800977c:	d00b      	beq.n	8009796 <xTaskCreateStatic+0x6c>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	61bb      	str	r3, [r7, #24]
}
 8009790:	bf00      	nop
 8009792:	bf00      	nop
 8009794:	e7fd      	b.n	8009792 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01e      	beq.n	80097da <xTaskCreateStatic+0xb0>
 800979c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d01b      	beq.n	80097da <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097b4:	2300      	movs	r3, #0
 80097b6:	9303      	str	r3, [sp, #12]
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ba:	9302      	str	r3, [sp, #8]
 80097bc:	f107 0314 	add.w	r3, r7, #20
 80097c0:	9301      	str	r3, [sp, #4]
 80097c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	68b9      	ldr	r1, [r7, #8]
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f000 f851 	bl	8009874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80097d4:	f000 f8e6 	bl	80099a4 <prvAddNewTaskToReadyList>
 80097d8:	e001      	b.n	80097de <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097de:	697b      	ldr	r3, [r7, #20]
	}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3728      	adds	r7, #40	@ 0x28
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	@ 0x30
 80097ec:	af04      	add	r7, sp, #16
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	4613      	mov	r3, r2
 80097f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f8:	88fb      	ldrh	r3, [r7, #6]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fe0f 	bl	800a420 <pvPortMalloc>
 8009802:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00e      	beq.n	8009828 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800980a:	20a0      	movs	r0, #160	@ 0xa0
 800980c:	f000 fe08 	bl	800a420 <pvPortMalloc>
 8009810:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d003      	beq.n	8009820 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	631a      	str	r2, [r3, #48]	@ 0x30
 800981e:	e005      	b.n	800982c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009820:	6978      	ldr	r0, [r7, #20]
 8009822:	f000 fec5 	bl	800a5b0 <vPortFree>
 8009826:	e001      	b.n	800982c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009828:	2300      	movs	r3, #0
 800982a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d017      	beq.n	8009862 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800983a:	88fa      	ldrh	r2, [r7, #6]
 800983c:	2300      	movs	r3, #0
 800983e:	9303      	str	r3, [sp, #12]
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	9302      	str	r3, [sp, #8]
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	68b9      	ldr	r1, [r7, #8]
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 f80f 	bl	8009874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009856:	69f8      	ldr	r0, [r7, #28]
 8009858:	f000 f8a4 	bl	80099a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800985c:	2301      	movs	r3, #1
 800985e:	61bb      	str	r3, [r7, #24]
 8009860:	e002      	b.n	8009868 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009866:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009868:	69bb      	ldr	r3, [r7, #24]
	}
 800986a:	4618      	mov	r0, r3
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800988c:	3b01      	subs	r3, #1
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	f023 0307 	bic.w	r3, r3, #7
 800989a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00b      	beq.n	80098be <prvInitialiseNewTask+0x4a>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	617b      	str	r3, [r7, #20]
}
 80098b8:	bf00      	nop
 80098ba:	bf00      	nop
 80098bc:	e7fd      	b.n	80098ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098be:	2300      	movs	r3, #0
 80098c0:	61fb      	str	r3, [r7, #28]
 80098c2:	e012      	b.n	80098ea <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4413      	add	r3, r2
 80098ca:	7819      	ldrb	r1, [r3, #0]
 80098cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	4413      	add	r3, r2
 80098d2:	3334      	adds	r3, #52	@ 0x34
 80098d4:	460a      	mov	r2, r1
 80098d6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	4413      	add	r3, r2
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d006      	beq.n	80098f2 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	3301      	adds	r3, #1
 80098e8:	61fb      	str	r3, [r7, #28]
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	2b0f      	cmp	r3, #15
 80098ee:	d9e9      	bls.n	80098c4 <prvInitialiseNewTask+0x50>
 80098f0:	e000      	b.n	80098f4 <prvInitialiseNewTask+0x80>
		{
			break;
 80098f2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	2b06      	cmp	r3, #6
 8009900:	d901      	bls.n	8009906 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009902:	2306      	movs	r3, #6
 8009904:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800990a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800990c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009910:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009914:	2200      	movs	r2, #0
 8009916:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991a:	3304      	adds	r3, #4
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff feac 	bl	800967a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	3318      	adds	r3, #24
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff fea7 	bl	800967a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800992c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009930:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009934:	f1c3 0207 	rsb	r2, r3, #7
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800993c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009940:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	2200      	movs	r2, #0
 8009946:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	2200      	movs	r2, #0
 800994e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009954:	334c      	adds	r3, #76	@ 0x4c
 8009956:	224c      	movs	r2, #76	@ 0x4c
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f001 fcb0 	bl	800b2c0 <memset>
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	4a0d      	ldr	r2, [pc, #52]	@ (8009998 <prvInitialiseNewTask+0x124>)
 8009964:	651a      	str	r2, [r3, #80]	@ 0x50
 8009966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009968:	4a0c      	ldr	r2, [pc, #48]	@ (800999c <prvInitialiseNewTask+0x128>)
 800996a:	655a      	str	r2, [r3, #84]	@ 0x54
 800996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996e:	4a0c      	ldr	r2, [pc, #48]	@ (80099a0 <prvInitialiseNewTask+0x12c>)
 8009970:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	68f9      	ldr	r1, [r7, #12]
 8009976:	69b8      	ldr	r0, [r7, #24]
 8009978:	f000 fba2 	bl	800a0c0 <pxPortInitialiseStack>
 800997c:	4602      	mov	r2, r0
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800998c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800998e:	bf00      	nop
 8009990:	3720      	adds	r7, #32
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20001518 	.word	0x20001518
 800999c:	20001580 	.word	0x20001580
 80099a0:	200015e8 	.word	0x200015e8

080099a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099ac:	f000 fc76 	bl	800a29c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099b0:	4b2a      	ldr	r3, [pc, #168]	@ (8009a5c <prvAddNewTaskToReadyList+0xb8>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3301      	adds	r3, #1
 80099b6:	4a29      	ldr	r2, [pc, #164]	@ (8009a5c <prvAddNewTaskToReadyList+0xb8>)
 80099b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099ba:	4b29      	ldr	r3, [pc, #164]	@ (8009a60 <prvAddNewTaskToReadyList+0xbc>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d109      	bne.n	80099d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099c2:	4a27      	ldr	r2, [pc, #156]	@ (8009a60 <prvAddNewTaskToReadyList+0xbc>)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099c8:	4b24      	ldr	r3, [pc, #144]	@ (8009a5c <prvAddNewTaskToReadyList+0xb8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d110      	bne.n	80099f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099d0:	f000 faae 	bl	8009f30 <prvInitialiseTaskLists>
 80099d4:	e00d      	b.n	80099f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099d6:	4b23      	ldr	r3, [pc, #140]	@ (8009a64 <prvAddNewTaskToReadyList+0xc0>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d109      	bne.n	80099f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099de:	4b20      	ldr	r3, [pc, #128]	@ (8009a60 <prvAddNewTaskToReadyList+0xbc>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d802      	bhi.n	80099f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009a60 <prvAddNewTaskToReadyList+0xbc>)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a68 <prvAddNewTaskToReadyList+0xc4>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3301      	adds	r3, #1
 80099f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009a68 <prvAddNewTaskToReadyList+0xc4>)
 80099fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a00:	2201      	movs	r2, #1
 8009a02:	409a      	lsls	r2, r3
 8009a04:	4b19      	ldr	r3, [pc, #100]	@ (8009a6c <prvAddNewTaskToReadyList+0xc8>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	4a18      	ldr	r2, [pc, #96]	@ (8009a6c <prvAddNewTaskToReadyList+0xc8>)
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4a15      	ldr	r2, [pc, #84]	@ (8009a70 <prvAddNewTaskToReadyList+0xcc>)
 8009a1c:	441a      	add	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3304      	adds	r3, #4
 8009a22:	4619      	mov	r1, r3
 8009a24:	4610      	mov	r0, r2
 8009a26:	f7ff fe34 	bl	8009692 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a2a:	f000 fc67 	bl	800a2fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a64 <prvAddNewTaskToReadyList+0xc0>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00e      	beq.n	8009a54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a36:	4b0a      	ldr	r3, [pc, #40]	@ (8009a60 <prvAddNewTaskToReadyList+0xbc>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d207      	bcs.n	8009a54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a44:	4b0b      	ldr	r3, [pc, #44]	@ (8009a74 <prvAddNewTaskToReadyList+0xd0>)
 8009a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	200008cc 	.word	0x200008cc
 8009a60:	200007cc 	.word	0x200007cc
 8009a64:	200008d8 	.word	0x200008d8
 8009a68:	200008e8 	.word	0x200008e8
 8009a6c:	200008d4 	.word	0x200008d4
 8009a70:	200007d0 	.word	0x200007d0
 8009a74:	e000ed04 	.word	0xe000ed04

08009a78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08a      	sub	sp, #40	@ 0x28
 8009a7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a82:	2300      	movs	r3, #0
 8009a84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a86:	463a      	mov	r2, r7
 8009a88:	1d39      	adds	r1, r7, #4
 8009a8a:	f107 0308 	add.w	r3, r7, #8
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7f7 f930 	bl	8000cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	9202      	str	r2, [sp, #8]
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	460a      	mov	r2, r1
 8009aa6:	4921      	ldr	r1, [pc, #132]	@ (8009b2c <vTaskStartScheduler+0xb4>)
 8009aa8:	4821      	ldr	r0, [pc, #132]	@ (8009b30 <vTaskStartScheduler+0xb8>)
 8009aaa:	f7ff fe3e 	bl	800972a <xTaskCreateStatic>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	4a20      	ldr	r2, [pc, #128]	@ (8009b34 <vTaskStartScheduler+0xbc>)
 8009ab2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8009b34 <vTaskStartScheduler+0xbc>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009abc:	2301      	movs	r3, #1
 8009abe:	617b      	str	r3, [r7, #20]
 8009ac0:	e001      	b.n	8009ac6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d11b      	bne.n	8009b04 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	613b      	str	r3, [r7, #16]
}
 8009ade:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ae0:	4b15      	ldr	r3, [pc, #84]	@ (8009b38 <vTaskStartScheduler+0xc0>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	334c      	adds	r3, #76	@ 0x4c
 8009ae6:	4a15      	ldr	r2, [pc, #84]	@ (8009b3c <vTaskStartScheduler+0xc4>)
 8009ae8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009aea:	4b15      	ldr	r3, [pc, #84]	@ (8009b40 <vTaskStartScheduler+0xc8>)
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009af0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009af2:	4b14      	ldr	r3, [pc, #80]	@ (8009b44 <vTaskStartScheduler+0xcc>)
 8009af4:	2201      	movs	r2, #1
 8009af6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009af8:	4b13      	ldr	r3, [pc, #76]	@ (8009b48 <vTaskStartScheduler+0xd0>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009afe:	f000 fb5b 	bl	800a1b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b02:	e00f      	b.n	8009b24 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b0a:	d10b      	bne.n	8009b24 <vTaskStartScheduler+0xac>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	60fb      	str	r3, [r7, #12]
}
 8009b1e:	bf00      	nop
 8009b20:	bf00      	nop
 8009b22:	e7fd      	b.n	8009b20 <vTaskStartScheduler+0xa8>
}
 8009b24:	bf00      	nop
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	0800d70c 	.word	0x0800d70c
 8009b30:	08009f01 	.word	0x08009f01
 8009b34:	200008f0 	.word	0x200008f0
 8009b38:	200007cc 	.word	0x200007cc
 8009b3c:	2000003c 	.word	0x2000003c
 8009b40:	200008ec 	.word	0x200008ec
 8009b44:	200008d8 	.word	0x200008d8
 8009b48:	200008d0 	.word	0x200008d0

08009b4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b50:	4b04      	ldr	r3, [pc, #16]	@ (8009b64 <vTaskSuspendAll+0x18>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	4a03      	ldr	r2, [pc, #12]	@ (8009b64 <vTaskSuspendAll+0x18>)
 8009b58:	6013      	str	r3, [r2, #0]
}
 8009b5a:	bf00      	nop
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bc80      	pop	{r7}
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	200008f4 	.word	0x200008f4

08009b68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b76:	4b42      	ldr	r3, [pc, #264]	@ (8009c80 <xTaskResumeAll+0x118>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10b      	bne.n	8009b96 <xTaskResumeAll+0x2e>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	603b      	str	r3, [r7, #0]
}
 8009b90:	bf00      	nop
 8009b92:	bf00      	nop
 8009b94:	e7fd      	b.n	8009b92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b96:	f000 fb81 	bl	800a29c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b9a:	4b39      	ldr	r3, [pc, #228]	@ (8009c80 <xTaskResumeAll+0x118>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	4a37      	ldr	r2, [pc, #220]	@ (8009c80 <xTaskResumeAll+0x118>)
 8009ba2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba4:	4b36      	ldr	r3, [pc, #216]	@ (8009c80 <xTaskResumeAll+0x118>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d161      	bne.n	8009c70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bac:	4b35      	ldr	r3, [pc, #212]	@ (8009c84 <xTaskResumeAll+0x11c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d05d      	beq.n	8009c70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bb4:	e02e      	b.n	8009c14 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009bb6:	4b34      	ldr	r3, [pc, #208]	@ (8009c88 <xTaskResumeAll+0x120>)
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3318      	adds	r3, #24
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7ff fd88 	bl	80096d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff fd83 	bl	80096d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	409a      	lsls	r2, r3
 8009bda:	4b2c      	ldr	r3, [pc, #176]	@ (8009c8c <xTaskResumeAll+0x124>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	4a2a      	ldr	r2, [pc, #168]	@ (8009c8c <xTaskResumeAll+0x124>)
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4a27      	ldr	r2, [pc, #156]	@ (8009c90 <xTaskResumeAll+0x128>)
 8009bf2:	441a      	add	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	f7ff fd49 	bl	8009692 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c04:	4b23      	ldr	r3, [pc, #140]	@ (8009c94 <xTaskResumeAll+0x12c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d302      	bcc.n	8009c14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c0e:	4b22      	ldr	r3, [pc, #136]	@ (8009c98 <xTaskResumeAll+0x130>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c14:	4b1c      	ldr	r3, [pc, #112]	@ (8009c88 <xTaskResumeAll+0x120>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1cc      	bne.n	8009bb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c22:	f000 fa29 	bl	800a078 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009c26:	4b1d      	ldr	r3, [pc, #116]	@ (8009c9c <xTaskResumeAll+0x134>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d010      	beq.n	8009c54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c32:	f000 f845 	bl	8009cc0 <xTaskIncrementTick>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c3c:	4b16      	ldr	r3, [pc, #88]	@ (8009c98 <xTaskResumeAll+0x130>)
 8009c3e:	2201      	movs	r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1f1      	bne.n	8009c32 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009c4e:	4b13      	ldr	r3, [pc, #76]	@ (8009c9c <xTaskResumeAll+0x134>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c54:	4b10      	ldr	r3, [pc, #64]	@ (8009c98 <xTaskResumeAll+0x130>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d009      	beq.n	8009c70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c60:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca0 <xTaskResumeAll+0x138>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c70:	f000 fb44 	bl	800a2fc <vPortExitCritical>

	return xAlreadyYielded;
 8009c74:	68bb      	ldr	r3, [r7, #8]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	200008f4 	.word	0x200008f4
 8009c84:	200008cc 	.word	0x200008cc
 8009c88:	2000088c 	.word	0x2000088c
 8009c8c:	200008d4 	.word	0x200008d4
 8009c90:	200007d0 	.word	0x200007d0
 8009c94:	200007cc 	.word	0x200007cc
 8009c98:	200008e0 	.word	0x200008e0
 8009c9c:	200008dc 	.word	0x200008dc
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009caa:	4b04      	ldr	r3, [pc, #16]	@ (8009cbc <xTaskGetTickCount+0x18>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009cb0:	687b      	ldr	r3, [r7, #4]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr
 8009cbc:	200008d0 	.word	0x200008d0

08009cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cca:	4b51      	ldr	r3, [pc, #324]	@ (8009e10 <xTaskIncrementTick+0x150>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f040 808e 	bne.w	8009df0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cd4:	4b4f      	ldr	r3, [pc, #316]	@ (8009e14 <xTaskIncrementTick+0x154>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009cdc:	4a4d      	ldr	r2, [pc, #308]	@ (8009e14 <xTaskIncrementTick+0x154>)
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d121      	bne.n	8009d2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8009e18 <xTaskIncrementTick+0x158>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00b      	beq.n	8009d0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	603b      	str	r3, [r7, #0]
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop
 8009d08:	e7fd      	b.n	8009d06 <xTaskIncrementTick+0x46>
 8009d0a:	4b43      	ldr	r3, [pc, #268]	@ (8009e18 <xTaskIncrementTick+0x158>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	60fb      	str	r3, [r7, #12]
 8009d10:	4b42      	ldr	r3, [pc, #264]	@ (8009e1c <xTaskIncrementTick+0x15c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a40      	ldr	r2, [pc, #256]	@ (8009e18 <xTaskIncrementTick+0x158>)
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	4a40      	ldr	r2, [pc, #256]	@ (8009e1c <xTaskIncrementTick+0x15c>)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	4b40      	ldr	r3, [pc, #256]	@ (8009e20 <xTaskIncrementTick+0x160>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	4a3e      	ldr	r2, [pc, #248]	@ (8009e20 <xTaskIncrementTick+0x160>)
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	f000 f9a6 	bl	800a078 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8009e24 <xTaskIncrementTick+0x164>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d34d      	bcc.n	8009dd2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d36:	4b38      	ldr	r3, [pc, #224]	@ (8009e18 <xTaskIncrementTick+0x158>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <xTaskIncrementTick+0x84>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <xTaskIncrementTick+0x86>
 8009d44:	2300      	movs	r3, #0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d004      	beq.n	8009d54 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d4a:	4b36      	ldr	r3, [pc, #216]	@ (8009e24 <xTaskIncrementTick+0x164>)
 8009d4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d50:	601a      	str	r2, [r3, #0]
					break;
 8009d52:	e03e      	b.n	8009dd2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d54:	4b30      	ldr	r3, [pc, #192]	@ (8009e18 <xTaskIncrementTick+0x158>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d203      	bcs.n	8009d74 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8009e24 <xTaskIncrementTick+0x164>)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6013      	str	r3, [r2, #0]
						break;
 8009d72:	e02e      	b.n	8009dd2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	3304      	adds	r3, #4
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7ff fcad 	bl	80096d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d004      	beq.n	8009d90 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	3318      	adds	r3, #24
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff fca4 	bl	80096d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d94:	2201      	movs	r2, #1
 8009d96:	409a      	lsls	r2, r3
 8009d98:	4b23      	ldr	r3, [pc, #140]	@ (8009e28 <xTaskIncrementTick+0x168>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	4a22      	ldr	r2, [pc, #136]	@ (8009e28 <xTaskIncrementTick+0x168>)
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da6:	4613      	mov	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4a1f      	ldr	r2, [pc, #124]	@ (8009e2c <xTaskIncrementTick+0x16c>)
 8009db0:	441a      	add	r2, r3
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	3304      	adds	r3, #4
 8009db6:	4619      	mov	r1, r3
 8009db8:	4610      	mov	r0, r2
 8009dba:	f7ff fc6a 	bl	8009692 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e30 <xTaskIncrementTick+0x170>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d3b4      	bcc.n	8009d36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dd0:	e7b1      	b.n	8009d36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009dd2:	4b17      	ldr	r3, [pc, #92]	@ (8009e30 <xTaskIncrementTick+0x170>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd8:	4914      	ldr	r1, [pc, #80]	@ (8009e2c <xTaskIncrementTick+0x16c>)
 8009dda:	4613      	mov	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	440b      	add	r3, r1
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d907      	bls.n	8009dfa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009dea:	2301      	movs	r3, #1
 8009dec:	617b      	str	r3, [r7, #20]
 8009dee:	e004      	b.n	8009dfa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009df0:	4b10      	ldr	r3, [pc, #64]	@ (8009e34 <xTaskIncrementTick+0x174>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	4a0f      	ldr	r2, [pc, #60]	@ (8009e34 <xTaskIncrementTick+0x174>)
 8009df8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8009e38 <xTaskIncrementTick+0x178>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009e02:	2301      	movs	r3, #1
 8009e04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e06:	697b      	ldr	r3, [r7, #20]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	200008f4 	.word	0x200008f4
 8009e14:	200008d0 	.word	0x200008d0
 8009e18:	20000884 	.word	0x20000884
 8009e1c:	20000888 	.word	0x20000888
 8009e20:	200008e4 	.word	0x200008e4
 8009e24:	200008ec 	.word	0x200008ec
 8009e28:	200008d4 	.word	0x200008d4
 8009e2c:	200007d0 	.word	0x200007d0
 8009e30:	200007cc 	.word	0x200007cc
 8009e34:	200008dc 	.word	0x200008dc
 8009e38:	200008e0 	.word	0x200008e0

08009e3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e42:	4b29      	ldr	r3, [pc, #164]	@ (8009ee8 <vTaskSwitchContext+0xac>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e4a:	4b28      	ldr	r3, [pc, #160]	@ (8009eec <vTaskSwitchContext+0xb0>)
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e50:	e045      	b.n	8009ede <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009e52:	4b26      	ldr	r3, [pc, #152]	@ (8009eec <vTaskSwitchContext+0xb0>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009e58:	4b25      	ldr	r3, [pc, #148]	@ (8009ef0 <vTaskSwitchContext+0xb4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	fab3 f383 	clz	r3, r3
 8009e64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e66:	7afb      	ldrb	r3, [r7, #11]
 8009e68:	f1c3 031f 	rsb	r3, r3, #31
 8009e6c:	617b      	str	r3, [r7, #20]
 8009e6e:	4921      	ldr	r1, [pc, #132]	@ (8009ef4 <vTaskSwitchContext+0xb8>)
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	4613      	mov	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	440b      	add	r3, r1
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10b      	bne.n	8009e9a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	607b      	str	r3, [r7, #4]
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	e7fd      	b.n	8009e96 <vTaskSwitchContext+0x5a>
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4a13      	ldr	r2, [pc, #76]	@ (8009ef4 <vTaskSwitchContext+0xb8>)
 8009ea6:	4413      	add	r3, r2
 8009ea8:	613b      	str	r3, [r7, #16]
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	605a      	str	r2, [r3, #4]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	3308      	adds	r3, #8
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d104      	bne.n	8009eca <vTaskSwitchContext+0x8e>
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	605a      	str	r2, [r3, #4]
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	4a09      	ldr	r2, [pc, #36]	@ (8009ef8 <vTaskSwitchContext+0xbc>)
 8009ed2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ed4:	4b08      	ldr	r3, [pc, #32]	@ (8009ef8 <vTaskSwitchContext+0xbc>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	334c      	adds	r3, #76	@ 0x4c
 8009eda:	4a08      	ldr	r2, [pc, #32]	@ (8009efc <vTaskSwitchContext+0xc0>)
 8009edc:	6013      	str	r3, [r2, #0]
}
 8009ede:	bf00      	nop
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bc80      	pop	{r7}
 8009ee6:	4770      	bx	lr
 8009ee8:	200008f4 	.word	0x200008f4
 8009eec:	200008e0 	.word	0x200008e0
 8009ef0:	200008d4 	.word	0x200008d4
 8009ef4:	200007d0 	.word	0x200007d0
 8009ef8:	200007cc 	.word	0x200007cc
 8009efc:	2000003c 	.word	0x2000003c

08009f00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f08:	f000 f852 	bl	8009fb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f0c:	4b06      	ldr	r3, [pc, #24]	@ (8009f28 <prvIdleTask+0x28>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d9f9      	bls.n	8009f08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f14:	4b05      	ldr	r3, [pc, #20]	@ (8009f2c <prvIdleTask+0x2c>)
 8009f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f24:	e7f0      	b.n	8009f08 <prvIdleTask+0x8>
 8009f26:	bf00      	nop
 8009f28:	200007d0 	.word	0x200007d0
 8009f2c:	e000ed04 	.word	0xe000ed04

08009f30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f36:	2300      	movs	r3, #0
 8009f38:	607b      	str	r3, [r7, #4]
 8009f3a:	e00c      	b.n	8009f56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4a12      	ldr	r2, [pc, #72]	@ (8009f90 <prvInitialiseTaskLists+0x60>)
 8009f48:	4413      	add	r3, r2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff fb76 	bl	800963c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3301      	adds	r3, #1
 8009f54:	607b      	str	r3, [r7, #4]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b06      	cmp	r3, #6
 8009f5a:	d9ef      	bls.n	8009f3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f5c:	480d      	ldr	r0, [pc, #52]	@ (8009f94 <prvInitialiseTaskLists+0x64>)
 8009f5e:	f7ff fb6d 	bl	800963c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f62:	480d      	ldr	r0, [pc, #52]	@ (8009f98 <prvInitialiseTaskLists+0x68>)
 8009f64:	f7ff fb6a 	bl	800963c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f68:	480c      	ldr	r0, [pc, #48]	@ (8009f9c <prvInitialiseTaskLists+0x6c>)
 8009f6a:	f7ff fb67 	bl	800963c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f6e:	480c      	ldr	r0, [pc, #48]	@ (8009fa0 <prvInitialiseTaskLists+0x70>)
 8009f70:	f7ff fb64 	bl	800963c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f74:	480b      	ldr	r0, [pc, #44]	@ (8009fa4 <prvInitialiseTaskLists+0x74>)
 8009f76:	f7ff fb61 	bl	800963c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa8 <prvInitialiseTaskLists+0x78>)
 8009f7c:	4a05      	ldr	r2, [pc, #20]	@ (8009f94 <prvInitialiseTaskLists+0x64>)
 8009f7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f80:	4b0a      	ldr	r3, [pc, #40]	@ (8009fac <prvInitialiseTaskLists+0x7c>)
 8009f82:	4a05      	ldr	r2, [pc, #20]	@ (8009f98 <prvInitialiseTaskLists+0x68>)
 8009f84:	601a      	str	r2, [r3, #0]
}
 8009f86:	bf00      	nop
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	200007d0 	.word	0x200007d0
 8009f94:	2000085c 	.word	0x2000085c
 8009f98:	20000870 	.word	0x20000870
 8009f9c:	2000088c 	.word	0x2000088c
 8009fa0:	200008a0 	.word	0x200008a0
 8009fa4:	200008b8 	.word	0x200008b8
 8009fa8:	20000884 	.word	0x20000884
 8009fac:	20000888 	.word	0x20000888

08009fb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fb6:	e019      	b.n	8009fec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009fb8:	f000 f970 	bl	800a29c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009fbc:	4b10      	ldr	r3, [pc, #64]	@ (800a000 <prvCheckTasksWaitingTermination+0x50>)
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fb85 	bl	80096d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009fce:	4b0d      	ldr	r3, [pc, #52]	@ (800a004 <prvCheckTasksWaitingTermination+0x54>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	4a0b      	ldr	r2, [pc, #44]	@ (800a004 <prvCheckTasksWaitingTermination+0x54>)
 8009fd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fd8:	4b0b      	ldr	r3, [pc, #44]	@ (800a008 <prvCheckTasksWaitingTermination+0x58>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	4a0a      	ldr	r2, [pc, #40]	@ (800a008 <prvCheckTasksWaitingTermination+0x58>)
 8009fe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009fe2:	f000 f98b 	bl	800a2fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f810 	bl	800a00c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fec:	4b06      	ldr	r3, [pc, #24]	@ (800a008 <prvCheckTasksWaitingTermination+0x58>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e1      	bne.n	8009fb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	200008a0 	.word	0x200008a0
 800a004:	200008cc 	.word	0x200008cc
 800a008:	200008b4 	.word	0x200008b4

0800a00c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	334c      	adds	r3, #76	@ 0x4c
 800a018:	4618      	mov	r0, r3
 800a01a:	f001 f95d 	bl	800b2d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a024:	2b00      	cmp	r3, #0
 800a026:	d108      	bne.n	800a03a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fabf 	bl	800a5b0 <vPortFree>
				vPortFree( pxTCB );
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fabc 	bl	800a5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a038:	e019      	b.n	800a06e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a040:	2b01      	cmp	r3, #1
 800a042:	d103      	bne.n	800a04c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fab3 	bl	800a5b0 <vPortFree>
	}
 800a04a:	e010      	b.n	800a06e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a052:	2b02      	cmp	r3, #2
 800a054:	d00b      	beq.n	800a06e <prvDeleteTCB+0x62>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	60fb      	str	r3, [r7, #12]
}
 800a068:	bf00      	nop
 800a06a:	bf00      	nop
 800a06c:	e7fd      	b.n	800a06a <prvDeleteTCB+0x5e>
	}
 800a06e:	bf00      	nop
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a07e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b8 <prvResetNextTaskUnblockTime+0x40>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <prvResetNextTaskUnblockTime+0x14>
 800a088:	2301      	movs	r3, #1
 800a08a:	e000      	b.n	800a08e <prvResetNextTaskUnblockTime+0x16>
 800a08c:	2300      	movs	r3, #0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d004      	beq.n	800a09c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a092:	4b0a      	ldr	r3, [pc, #40]	@ (800a0bc <prvResetNextTaskUnblockTime+0x44>)
 800a094:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a098:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a09a:	e008      	b.n	800a0ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a09c:	4b06      	ldr	r3, [pc, #24]	@ (800a0b8 <prvResetNextTaskUnblockTime+0x40>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	4a04      	ldr	r2, [pc, #16]	@ (800a0bc <prvResetNextTaskUnblockTime+0x44>)
 800a0ac:	6013      	str	r3, [r2, #0]
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bc80      	pop	{r7}
 800a0b6:	4770      	bx	lr
 800a0b8:	20000884 	.word	0x20000884
 800a0bc:	200008ec 	.word	0x200008ec

0800a0c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3b04      	subs	r3, #4
 800a0d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a0d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f023 0201 	bic.w	r2, r3, #1
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3b04      	subs	r3, #4
 800a0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0f0:	4a08      	ldr	r2, [pc, #32]	@ (800a114 <pxPortInitialiseStack+0x54>)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3b14      	subs	r3, #20
 800a0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	3b20      	subs	r3, #32
 800a106:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a108:	68fb      	ldr	r3, [r7, #12]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	bc80      	pop	{r7}
 800a112:	4770      	bx	lr
 800a114:	0800a119 	.word	0x0800a119

0800a118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a11e:	2300      	movs	r3, #0
 800a120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a122:	4b12      	ldr	r3, [pc, #72]	@ (800a16c <prvTaskExitError+0x54>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a12a:	d00b      	beq.n	800a144 <prvTaskExitError+0x2c>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	60fb      	str	r3, [r7, #12]
}
 800a13e:	bf00      	nop
 800a140:	bf00      	nop
 800a142:	e7fd      	b.n	800a140 <prvTaskExitError+0x28>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	60bb      	str	r3, [r7, #8]
}
 800a156:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a158:	bf00      	nop
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0fc      	beq.n	800a15a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	bc80      	pop	{r7}
 800a16a:	4770      	bx	lr
 800a16c:	2000002c 	.word	0x2000002c

0800a170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a170:	4b07      	ldr	r3, [pc, #28]	@ (800a190 <pxCurrentTCBConst2>)
 800a172:	6819      	ldr	r1, [r3, #0]
 800a174:	6808      	ldr	r0, [r1, #0]
 800a176:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a17a:	f380 8809 	msr	PSP, r0
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f04f 0000 	mov.w	r0, #0
 800a186:	f380 8811 	msr	BASEPRI, r0
 800a18a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a18e:	4770      	bx	lr

0800a190 <pxCurrentTCBConst2>:
 800a190:	200007cc 	.word	0x200007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a198:	4806      	ldr	r0, [pc, #24]	@ (800a1b4 <prvPortStartFirstTask+0x1c>)
 800a19a:	6800      	ldr	r0, [r0, #0]
 800a19c:	6800      	ldr	r0, [r0, #0]
 800a19e:	f380 8808 	msr	MSP, r0
 800a1a2:	b662      	cpsie	i
 800a1a4:	b661      	cpsie	f
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	df00      	svc	0
 800a1b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1b2:	bf00      	nop
 800a1b4:	e000ed08 	.word	0xe000ed08

0800a1b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1be:	4b32      	ldr	r3, [pc, #200]	@ (800a288 <xPortStartScheduler+0xd0>)
 800a1c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	22ff      	movs	r2, #255	@ 0xff
 800a1ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	4b2a      	ldr	r3, [pc, #168]	@ (800a28c <xPortStartScheduler+0xd4>)
 800a1e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1e6:	4b2a      	ldr	r3, [pc, #168]	@ (800a290 <xPortStartScheduler+0xd8>)
 800a1e8:	2207      	movs	r2, #7
 800a1ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1ec:	e009      	b.n	800a202 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a1ee:	4b28      	ldr	r3, [pc, #160]	@ (800a290 <xPortStartScheduler+0xd8>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	4a26      	ldr	r2, [pc, #152]	@ (800a290 <xPortStartScheduler+0xd8>)
 800a1f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a202:	78fb      	ldrb	r3, [r7, #3]
 800a204:	b2db      	uxtb	r3, r3
 800a206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a20a:	2b80      	cmp	r3, #128	@ 0x80
 800a20c:	d0ef      	beq.n	800a1ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a20e:	4b20      	ldr	r3, [pc, #128]	@ (800a290 <xPortStartScheduler+0xd8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f1c3 0307 	rsb	r3, r3, #7
 800a216:	2b04      	cmp	r3, #4
 800a218:	d00b      	beq.n	800a232 <xPortStartScheduler+0x7a>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	60bb      	str	r3, [r7, #8]
}
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	e7fd      	b.n	800a22e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a232:	4b17      	ldr	r3, [pc, #92]	@ (800a290 <xPortStartScheduler+0xd8>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	021b      	lsls	r3, r3, #8
 800a238:	4a15      	ldr	r2, [pc, #84]	@ (800a290 <xPortStartScheduler+0xd8>)
 800a23a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a23c:	4b14      	ldr	r3, [pc, #80]	@ (800a290 <xPortStartScheduler+0xd8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a244:	4a12      	ldr	r2, [pc, #72]	@ (800a290 <xPortStartScheduler+0xd8>)
 800a246:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a250:	4b10      	ldr	r3, [pc, #64]	@ (800a294 <xPortStartScheduler+0xdc>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a0f      	ldr	r2, [pc, #60]	@ (800a294 <xPortStartScheduler+0xdc>)
 800a256:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a25a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a25c:	4b0d      	ldr	r3, [pc, #52]	@ (800a294 <xPortStartScheduler+0xdc>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a0c      	ldr	r2, [pc, #48]	@ (800a294 <xPortStartScheduler+0xdc>)
 800a262:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a266:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a268:	f000 f8b8 	bl	800a3dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a26c:	4b0a      	ldr	r3, [pc, #40]	@ (800a298 <xPortStartScheduler+0xe0>)
 800a26e:	2200      	movs	r2, #0
 800a270:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a272:	f7ff ff91 	bl	800a198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a276:	f7ff fde1 	bl	8009e3c <vTaskSwitchContext>
	prvTaskExitError();
 800a27a:	f7ff ff4d 	bl	800a118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	e000e400 	.word	0xe000e400
 800a28c:	200008f8 	.word	0x200008f8
 800a290:	200008fc 	.word	0x200008fc
 800a294:	e000ed20 	.word	0xe000ed20
 800a298:	2000002c 	.word	0x2000002c

0800a29c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	607b      	str	r3, [r7, #4]
}
 800a2b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a2f4 <vPortEnterCritical+0x58>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	4a0d      	ldr	r2, [pc, #52]	@ (800a2f4 <vPortEnterCritical+0x58>)
 800a2be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f4 <vPortEnterCritical+0x58>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d110      	bne.n	800a2ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f8 <vPortEnterCritical+0x5c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <vPortEnterCritical+0x4e>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	603b      	str	r3, [r7, #0]
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop
 800a2e8:	e7fd      	b.n	800a2e6 <vPortEnterCritical+0x4a>
	}
}
 800a2ea:	bf00      	nop
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bc80      	pop	{r7}
 800a2f2:	4770      	bx	lr
 800a2f4:	2000002c 	.word	0x2000002c
 800a2f8:	e000ed04 	.word	0xe000ed04

0800a2fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a302:	4b12      	ldr	r3, [pc, #72]	@ (800a34c <vPortExitCritical+0x50>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10b      	bne.n	800a322 <vPortExitCritical+0x26>
	__asm volatile
 800a30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	607b      	str	r3, [r7, #4]
}
 800a31c:	bf00      	nop
 800a31e:	bf00      	nop
 800a320:	e7fd      	b.n	800a31e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a322:	4b0a      	ldr	r3, [pc, #40]	@ (800a34c <vPortExitCritical+0x50>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3b01      	subs	r3, #1
 800a328:	4a08      	ldr	r2, [pc, #32]	@ (800a34c <vPortExitCritical+0x50>)
 800a32a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a32c:	4b07      	ldr	r3, [pc, #28]	@ (800a34c <vPortExitCritical+0x50>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d105      	bne.n	800a340 <vPortExitCritical+0x44>
 800a334:	2300      	movs	r3, #0
 800a336:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a33e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	bc80      	pop	{r7}
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	2000002c 	.word	0x2000002c

0800a350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a350:	f3ef 8009 	mrs	r0, PSP
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	4b0d      	ldr	r3, [pc, #52]	@ (800a390 <pxCurrentTCBConst>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a360:	6010      	str	r0, [r2, #0]
 800a362:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a366:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a36a:	f380 8811 	msr	BASEPRI, r0
 800a36e:	f7ff fd65 	bl	8009e3c <vTaskSwitchContext>
 800a372:	f04f 0000 	mov.w	r0, #0
 800a376:	f380 8811 	msr	BASEPRI, r0
 800a37a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a37e:	6819      	ldr	r1, [r3, #0]
 800a380:	6808      	ldr	r0, [r1, #0]
 800a382:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a386:	f380 8809 	msr	PSP, r0
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	4770      	bx	lr

0800a390 <pxCurrentTCBConst>:
 800a390:	200007cc 	.word	0x200007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a394:	bf00      	nop
 800a396:	bf00      	nop

0800a398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	607b      	str	r3, [r7, #4]
}
 800a3b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3b2:	f7ff fc85 	bl	8009cc0 <xTaskIncrementTick>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d003      	beq.n	800a3c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3bc:	4b06      	ldr	r3, [pc, #24]	@ (800a3d8 <SysTick_Handler+0x40>)
 800a3be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	f383 8811 	msr	BASEPRI, r3
}
 800a3ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3d0:	bf00      	nop
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	e000ed04 	.word	0xe000ed04

0800a3dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a40c <vPortSetupTimerInterrupt+0x30>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a410 <vPortSetupTimerInterrupt+0x34>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3ec:	4b09      	ldr	r3, [pc, #36]	@ (800a414 <vPortSetupTimerInterrupt+0x38>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a09      	ldr	r2, [pc, #36]	@ (800a418 <vPortSetupTimerInterrupt+0x3c>)
 800a3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3f6:	099b      	lsrs	r3, r3, #6
 800a3f8:	4a08      	ldr	r2, [pc, #32]	@ (800a41c <vPortSetupTimerInterrupt+0x40>)
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3fe:	4b03      	ldr	r3, [pc, #12]	@ (800a40c <vPortSetupTimerInterrupt+0x30>)
 800a400:	2207      	movs	r2, #7
 800a402:	601a      	str	r2, [r3, #0]
}
 800a404:	bf00      	nop
 800a406:	46bd      	mov	sp, r7
 800a408:	bc80      	pop	{r7}
 800a40a:	4770      	bx	lr
 800a40c:	e000e010 	.word	0xe000e010
 800a410:	e000e018 	.word	0xe000e018
 800a414:	20000020 	.word	0x20000020
 800a418:	10624dd3 	.word	0x10624dd3
 800a41c:	e000e014 	.word	0xe000e014

0800a420 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08a      	sub	sp, #40	@ 0x28
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a428:	2300      	movs	r3, #0
 800a42a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a42c:	f7ff fb8e 	bl	8009b4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a430:	4b5a      	ldr	r3, [pc, #360]	@ (800a59c <pvPortMalloc+0x17c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a438:	f000 f916 	bl	800a668 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a43c:	4b58      	ldr	r3, [pc, #352]	@ (800a5a0 <pvPortMalloc+0x180>)
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4013      	ands	r3, r2
 800a444:	2b00      	cmp	r3, #0
 800a446:	f040 8090 	bne.w	800a56a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d01e      	beq.n	800a48e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a450:	2208      	movs	r2, #8
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4413      	add	r3, r2
 800a456:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f003 0307 	and.w	r3, r3, #7
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d015      	beq.n	800a48e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f023 0307 	bic.w	r3, r3, #7
 800a468:	3308      	adds	r3, #8
 800a46a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f003 0307 	and.w	r3, r3, #7
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00b      	beq.n	800a48e <pvPortMalloc+0x6e>
	__asm volatile
 800a476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a47a:	f383 8811 	msr	BASEPRI, r3
 800a47e:	f3bf 8f6f 	isb	sy
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	617b      	str	r3, [r7, #20]
}
 800a488:	bf00      	nop
 800a48a:	bf00      	nop
 800a48c:	e7fd      	b.n	800a48a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d06a      	beq.n	800a56a <pvPortMalloc+0x14a>
 800a494:	4b43      	ldr	r3, [pc, #268]	@ (800a5a4 <pvPortMalloc+0x184>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d865      	bhi.n	800a56a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a49e:	4b42      	ldr	r3, [pc, #264]	@ (800a5a8 <pvPortMalloc+0x188>)
 800a4a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4a2:	4b41      	ldr	r3, [pc, #260]	@ (800a5a8 <pvPortMalloc+0x188>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4a8:	e004      	b.n	800a4b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d903      	bls.n	800a4c6 <pvPortMalloc+0xa6>
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1f1      	bne.n	800a4aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4c6:	4b35      	ldr	r3, [pc, #212]	@ (800a59c <pvPortMalloc+0x17c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d04c      	beq.n	800a56a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2208      	movs	r2, #8
 800a4d6:	4413      	add	r3, r2
 800a4d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	1ad2      	subs	r2, r2, r3
 800a4ea:	2308      	movs	r3, #8
 800a4ec:	005b      	lsls	r3, r3, #1
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d920      	bls.n	800a534 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	f003 0307 	and.w	r3, r3, #7
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00b      	beq.n	800a51c <pvPortMalloc+0xfc>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	613b      	str	r3, [r7, #16]
}
 800a516:	bf00      	nop
 800a518:	bf00      	nop
 800a51a:	e7fd      	b.n	800a518 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	1ad2      	subs	r2, r2, r3
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a52e:	69b8      	ldr	r0, [r7, #24]
 800a530:	f000 f8fc 	bl	800a72c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a534:	4b1b      	ldr	r3, [pc, #108]	@ (800a5a4 <pvPortMalloc+0x184>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	4a19      	ldr	r2, [pc, #100]	@ (800a5a4 <pvPortMalloc+0x184>)
 800a540:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a542:	4b18      	ldr	r3, [pc, #96]	@ (800a5a4 <pvPortMalloc+0x184>)
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	4b19      	ldr	r3, [pc, #100]	@ (800a5ac <pvPortMalloc+0x18c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d203      	bcs.n	800a556 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a54e:	4b15      	ldr	r3, [pc, #84]	@ (800a5a4 <pvPortMalloc+0x184>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a16      	ldr	r2, [pc, #88]	@ (800a5ac <pvPortMalloc+0x18c>)
 800a554:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a558:	685a      	ldr	r2, [r3, #4]
 800a55a:	4b11      	ldr	r3, [pc, #68]	@ (800a5a0 <pvPortMalloc+0x180>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	431a      	orrs	r2, r3
 800a560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a562:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	2200      	movs	r2, #0
 800a568:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a56a:	f7ff fafd 	bl	8009b68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	f003 0307 	and.w	r3, r3, #7
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <pvPortMalloc+0x170>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	60fb      	str	r3, [r7, #12]
}
 800a58a:	bf00      	nop
 800a58c:	bf00      	nop
 800a58e:	e7fd      	b.n	800a58c <pvPortMalloc+0x16c>
	return pvReturn;
 800a590:	69fb      	ldr	r3, [r7, #28]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3728      	adds	r7, #40	@ 0x28
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	20001508 	.word	0x20001508
 800a5a0:	20001514 	.word	0x20001514
 800a5a4:	2000150c 	.word	0x2000150c
 800a5a8:	20001500 	.word	0x20001500
 800a5ac:	20001510 	.word	0x20001510

0800a5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d04a      	beq.n	800a658 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5c2:	2308      	movs	r3, #8
 800a5c4:	425b      	negs	r3, r3
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	4b22      	ldr	r3, [pc, #136]	@ (800a660 <vPortFree+0xb0>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4013      	ands	r3, r2
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10b      	bne.n	800a5f6 <vPortFree+0x46>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	60fb      	str	r3, [r7, #12]
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	e7fd      	b.n	800a5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00b      	beq.n	800a616 <vPortFree+0x66>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	60bb      	str	r3, [r7, #8]
}
 800a610:	bf00      	nop
 800a612:	bf00      	nop
 800a614:	e7fd      	b.n	800a612 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	4b11      	ldr	r3, [pc, #68]	@ (800a660 <vPortFree+0xb0>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4013      	ands	r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d019      	beq.n	800a658 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d115      	bne.n	800a658 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	685a      	ldr	r2, [r3, #4]
 800a630:	4b0b      	ldr	r3, [pc, #44]	@ (800a660 <vPortFree+0xb0>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	43db      	mvns	r3, r3
 800a636:	401a      	ands	r2, r3
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a63c:	f7ff fa86 	bl	8009b4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	4b07      	ldr	r3, [pc, #28]	@ (800a664 <vPortFree+0xb4>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4413      	add	r3, r2
 800a64a:	4a06      	ldr	r2, [pc, #24]	@ (800a664 <vPortFree+0xb4>)
 800a64c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a64e:	6938      	ldr	r0, [r7, #16]
 800a650:	f000 f86c 	bl	800a72c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a654:	f7ff fa88 	bl	8009b68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a658:	bf00      	nop
 800a65a:	3718      	adds	r7, #24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20001514 	.word	0x20001514
 800a664:	2000150c 	.word	0x2000150c

0800a668 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a66e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a672:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a674:	4b27      	ldr	r3, [pc, #156]	@ (800a714 <prvHeapInit+0xac>)
 800a676:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f003 0307 	and.w	r3, r3, #7
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00c      	beq.n	800a69c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3307      	adds	r3, #7
 800a686:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f023 0307 	bic.w	r3, r3, #7
 800a68e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	4a1f      	ldr	r2, [pc, #124]	@ (800a714 <prvHeapInit+0xac>)
 800a698:	4413      	add	r3, r2
 800a69a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a718 <prvHeapInit+0xb0>)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6a6:	4b1c      	ldr	r3, [pc, #112]	@ (800a718 <prvHeapInit+0xb0>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6b4:	2208      	movs	r2, #8
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	1a9b      	subs	r3, r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f023 0307 	bic.w	r3, r3, #7
 800a6c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4a15      	ldr	r2, [pc, #84]	@ (800a71c <prvHeapInit+0xb4>)
 800a6c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6ca:	4b14      	ldr	r3, [pc, #80]	@ (800a71c <prvHeapInit+0xb4>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6d2:	4b12      	ldr	r3, [pc, #72]	@ (800a71c <prvHeapInit+0xb4>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	1ad2      	subs	r2, r2, r3
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800a71c <prvHeapInit+0xb4>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	4a0a      	ldr	r2, [pc, #40]	@ (800a720 <prvHeapInit+0xb8>)
 800a6f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	4a09      	ldr	r2, [pc, #36]	@ (800a724 <prvHeapInit+0xbc>)
 800a6fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a700:	4b09      	ldr	r3, [pc, #36]	@ (800a728 <prvHeapInit+0xc0>)
 800a702:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a706:	601a      	str	r2, [r3, #0]
}
 800a708:	bf00      	nop
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bc80      	pop	{r7}
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	20000900 	.word	0x20000900
 800a718:	20001500 	.word	0x20001500
 800a71c:	20001508 	.word	0x20001508
 800a720:	20001510 	.word	0x20001510
 800a724:	2000150c 	.word	0x2000150c
 800a728:	20001514 	.word	0x20001514

0800a72c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a734:	4b27      	ldr	r3, [pc, #156]	@ (800a7d4 <prvInsertBlockIntoFreeList+0xa8>)
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	e002      	b.n	800a740 <prvInsertBlockIntoFreeList+0x14>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	429a      	cmp	r2, r3
 800a748:	d8f7      	bhi.n	800a73a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	4413      	add	r3, r2
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d108      	bne.n	800a76e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	441a      	add	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	441a      	add	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d118      	bne.n	800a7b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	4b14      	ldr	r3, [pc, #80]	@ (800a7d8 <prvInsertBlockIntoFreeList+0xac>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d00d      	beq.n	800a7aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	441a      	add	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	e008      	b.n	800a7bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a7d8 <prvInsertBlockIntoFreeList+0xac>)
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	601a      	str	r2, [r3, #0]
 800a7b2:	e003      	b.n	800a7bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d002      	beq.n	800a7ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7ca:	bf00      	nop
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bc80      	pop	{r7}
 800a7d2:	4770      	bx	lr
 800a7d4:	20001500 	.word	0x20001500
 800a7d8:	20001508 	.word	0x20001508

0800a7dc <__cvt>:
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e2:	461d      	mov	r5, r3
 800a7e4:	bfbb      	ittet	lt
 800a7e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a7ea:	461d      	movlt	r5, r3
 800a7ec:	2300      	movge	r3, #0
 800a7ee:	232d      	movlt	r3, #45	@ 0x2d
 800a7f0:	b088      	sub	sp, #32
 800a7f2:	4614      	mov	r4, r2
 800a7f4:	bfb8      	it	lt
 800a7f6:	4614      	movlt	r4, r2
 800a7f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a7fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a7fc:	7013      	strb	r3, [r2, #0]
 800a7fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a800:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a804:	f023 0820 	bic.w	r8, r3, #32
 800a808:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a80c:	d005      	beq.n	800a81a <__cvt+0x3e>
 800a80e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a812:	d100      	bne.n	800a816 <__cvt+0x3a>
 800a814:	3601      	adds	r6, #1
 800a816:	2302      	movs	r3, #2
 800a818:	e000      	b.n	800a81c <__cvt+0x40>
 800a81a:	2303      	movs	r3, #3
 800a81c:	aa07      	add	r2, sp, #28
 800a81e:	9204      	str	r2, [sp, #16]
 800a820:	aa06      	add	r2, sp, #24
 800a822:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a826:	e9cd 3600 	strd	r3, r6, [sp]
 800a82a:	4622      	mov	r2, r4
 800a82c:	462b      	mov	r3, r5
 800a82e:	f000 fe7b 	bl	800b528 <_dtoa_r>
 800a832:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a836:	4607      	mov	r7, r0
 800a838:	d119      	bne.n	800a86e <__cvt+0x92>
 800a83a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a83c:	07db      	lsls	r3, r3, #31
 800a83e:	d50e      	bpl.n	800a85e <__cvt+0x82>
 800a840:	eb00 0906 	add.w	r9, r0, r6
 800a844:	2200      	movs	r2, #0
 800a846:	2300      	movs	r3, #0
 800a848:	4620      	mov	r0, r4
 800a84a:	4629      	mov	r1, r5
 800a84c:	f7f6 f91c 	bl	8000a88 <__aeabi_dcmpeq>
 800a850:	b108      	cbz	r0, 800a856 <__cvt+0x7a>
 800a852:	f8cd 901c 	str.w	r9, [sp, #28]
 800a856:	2230      	movs	r2, #48	@ 0x30
 800a858:	9b07      	ldr	r3, [sp, #28]
 800a85a:	454b      	cmp	r3, r9
 800a85c:	d31e      	bcc.n	800a89c <__cvt+0xc0>
 800a85e:	4638      	mov	r0, r7
 800a860:	9b07      	ldr	r3, [sp, #28]
 800a862:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a864:	1bdb      	subs	r3, r3, r7
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	b008      	add	sp, #32
 800a86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a872:	eb00 0906 	add.w	r9, r0, r6
 800a876:	d1e5      	bne.n	800a844 <__cvt+0x68>
 800a878:	7803      	ldrb	r3, [r0, #0]
 800a87a:	2b30      	cmp	r3, #48	@ 0x30
 800a87c:	d10a      	bne.n	800a894 <__cvt+0xb8>
 800a87e:	2200      	movs	r2, #0
 800a880:	2300      	movs	r3, #0
 800a882:	4620      	mov	r0, r4
 800a884:	4629      	mov	r1, r5
 800a886:	f7f6 f8ff 	bl	8000a88 <__aeabi_dcmpeq>
 800a88a:	b918      	cbnz	r0, 800a894 <__cvt+0xb8>
 800a88c:	f1c6 0601 	rsb	r6, r6, #1
 800a890:	f8ca 6000 	str.w	r6, [sl]
 800a894:	f8da 3000 	ldr.w	r3, [sl]
 800a898:	4499      	add	r9, r3
 800a89a:	e7d3      	b.n	800a844 <__cvt+0x68>
 800a89c:	1c59      	adds	r1, r3, #1
 800a89e:	9107      	str	r1, [sp, #28]
 800a8a0:	701a      	strb	r2, [r3, #0]
 800a8a2:	e7d9      	b.n	800a858 <__cvt+0x7c>

0800a8a4 <__exponent>:
 800a8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8a6:	2900      	cmp	r1, #0
 800a8a8:	bfb6      	itet	lt
 800a8aa:	232d      	movlt	r3, #45	@ 0x2d
 800a8ac:	232b      	movge	r3, #43	@ 0x2b
 800a8ae:	4249      	neglt	r1, r1
 800a8b0:	2909      	cmp	r1, #9
 800a8b2:	7002      	strb	r2, [r0, #0]
 800a8b4:	7043      	strb	r3, [r0, #1]
 800a8b6:	dd29      	ble.n	800a90c <__exponent+0x68>
 800a8b8:	f10d 0307 	add.w	r3, sp, #7
 800a8bc:	461d      	mov	r5, r3
 800a8be:	270a      	movs	r7, #10
 800a8c0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	fb07 1416 	mls	r4, r7, r6, r1
 800a8ca:	3430      	adds	r4, #48	@ 0x30
 800a8cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	2c63      	cmp	r4, #99	@ 0x63
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a8da:	dcf1      	bgt.n	800a8c0 <__exponent+0x1c>
 800a8dc:	3130      	adds	r1, #48	@ 0x30
 800a8de:	1e94      	subs	r4, r2, #2
 800a8e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a8e4:	4623      	mov	r3, r4
 800a8e6:	1c41      	adds	r1, r0, #1
 800a8e8:	42ab      	cmp	r3, r5
 800a8ea:	d30a      	bcc.n	800a902 <__exponent+0x5e>
 800a8ec:	f10d 0309 	add.w	r3, sp, #9
 800a8f0:	1a9b      	subs	r3, r3, r2
 800a8f2:	42ac      	cmp	r4, r5
 800a8f4:	bf88      	it	hi
 800a8f6:	2300      	movhi	r3, #0
 800a8f8:	3302      	adds	r3, #2
 800a8fa:	4403      	add	r3, r0
 800a8fc:	1a18      	subs	r0, r3, r0
 800a8fe:	b003      	add	sp, #12
 800a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a902:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a906:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a90a:	e7ed      	b.n	800a8e8 <__exponent+0x44>
 800a90c:	2330      	movs	r3, #48	@ 0x30
 800a90e:	3130      	adds	r1, #48	@ 0x30
 800a910:	7083      	strb	r3, [r0, #2]
 800a912:	70c1      	strb	r1, [r0, #3]
 800a914:	1d03      	adds	r3, r0, #4
 800a916:	e7f1      	b.n	800a8fc <__exponent+0x58>

0800a918 <_printf_float>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	b091      	sub	sp, #68	@ 0x44
 800a91e:	460c      	mov	r4, r1
 800a920:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a924:	4616      	mov	r6, r2
 800a926:	461f      	mov	r7, r3
 800a928:	4605      	mov	r5, r0
 800a92a:	f000 fcd1 	bl	800b2d0 <_localeconv_r>
 800a92e:	6803      	ldr	r3, [r0, #0]
 800a930:	4618      	mov	r0, r3
 800a932:	9308      	str	r3, [sp, #32]
 800a934:	f7f5 fc7c 	bl	8000230 <strlen>
 800a938:	2300      	movs	r3, #0
 800a93a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a93c:	f8d8 3000 	ldr.w	r3, [r8]
 800a940:	9009      	str	r0, [sp, #36]	@ 0x24
 800a942:	3307      	adds	r3, #7
 800a944:	f023 0307 	bic.w	r3, r3, #7
 800a948:	f103 0208 	add.w	r2, r3, #8
 800a94c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a950:	f8d4 b000 	ldr.w	fp, [r4]
 800a954:	f8c8 2000 	str.w	r2, [r8]
 800a958:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a95c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a960:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a962:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a966:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a96a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a96e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a972:	4b9c      	ldr	r3, [pc, #624]	@ (800abe4 <_printf_float+0x2cc>)
 800a974:	f7f6 f8ba 	bl	8000aec <__aeabi_dcmpun>
 800a978:	bb70      	cbnz	r0, 800a9d8 <_printf_float+0xc0>
 800a97a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a97e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a982:	4b98      	ldr	r3, [pc, #608]	@ (800abe4 <_printf_float+0x2cc>)
 800a984:	f7f6 f894 	bl	8000ab0 <__aeabi_dcmple>
 800a988:	bb30      	cbnz	r0, 800a9d8 <_printf_float+0xc0>
 800a98a:	2200      	movs	r2, #0
 800a98c:	2300      	movs	r3, #0
 800a98e:	4640      	mov	r0, r8
 800a990:	4649      	mov	r1, r9
 800a992:	f7f6 f883 	bl	8000a9c <__aeabi_dcmplt>
 800a996:	b110      	cbz	r0, 800a99e <_printf_float+0x86>
 800a998:	232d      	movs	r3, #45	@ 0x2d
 800a99a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a99e:	4a92      	ldr	r2, [pc, #584]	@ (800abe8 <_printf_float+0x2d0>)
 800a9a0:	4b92      	ldr	r3, [pc, #584]	@ (800abec <_printf_float+0x2d4>)
 800a9a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a9a6:	bf94      	ite	ls
 800a9a8:	4690      	movls	r8, r2
 800a9aa:	4698      	movhi	r8, r3
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	f04f 0900 	mov.w	r9, #0
 800a9b2:	6123      	str	r3, [r4, #16]
 800a9b4:	f02b 0304 	bic.w	r3, fp, #4
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	4633      	mov	r3, r6
 800a9bc:	4621      	mov	r1, r4
 800a9be:	4628      	mov	r0, r5
 800a9c0:	9700      	str	r7, [sp, #0]
 800a9c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a9c4:	f000 f9d4 	bl	800ad70 <_printf_common>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	f040 8090 	bne.w	800aaee <_printf_float+0x1d6>
 800a9ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9d2:	b011      	add	sp, #68	@ 0x44
 800a9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d8:	4642      	mov	r2, r8
 800a9da:	464b      	mov	r3, r9
 800a9dc:	4640      	mov	r0, r8
 800a9de:	4649      	mov	r1, r9
 800a9e0:	f7f6 f884 	bl	8000aec <__aeabi_dcmpun>
 800a9e4:	b148      	cbz	r0, 800a9fa <_printf_float+0xe2>
 800a9e6:	464b      	mov	r3, r9
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bfb8      	it	lt
 800a9ec:	232d      	movlt	r3, #45	@ 0x2d
 800a9ee:	4a80      	ldr	r2, [pc, #512]	@ (800abf0 <_printf_float+0x2d8>)
 800a9f0:	bfb8      	it	lt
 800a9f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a9f6:	4b7f      	ldr	r3, [pc, #508]	@ (800abf4 <_printf_float+0x2dc>)
 800a9f8:	e7d3      	b.n	800a9a2 <_printf_float+0x8a>
 800a9fa:	6863      	ldr	r3, [r4, #4]
 800a9fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	d13f      	bne.n	800aa84 <_printf_float+0x16c>
 800aa04:	2306      	movs	r3, #6
 800aa06:	6063      	str	r3, [r4, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	9206      	str	r2, [sp, #24]
 800aa12:	aa0e      	add	r2, sp, #56	@ 0x38
 800aa14:	e9cd a204 	strd	sl, r2, [sp, #16]
 800aa18:	aa0d      	add	r2, sp, #52	@ 0x34
 800aa1a:	9203      	str	r2, [sp, #12]
 800aa1c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800aa20:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aa24:	6863      	ldr	r3, [r4, #4]
 800aa26:	4642      	mov	r2, r8
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	464b      	mov	r3, r9
 800aa2e:	910a      	str	r1, [sp, #40]	@ 0x28
 800aa30:	f7ff fed4 	bl	800a7dc <__cvt>
 800aa34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa36:	4680      	mov	r8, r0
 800aa38:	2947      	cmp	r1, #71	@ 0x47
 800aa3a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800aa3c:	d128      	bne.n	800aa90 <_printf_float+0x178>
 800aa3e:	1cc8      	adds	r0, r1, #3
 800aa40:	db02      	blt.n	800aa48 <_printf_float+0x130>
 800aa42:	6863      	ldr	r3, [r4, #4]
 800aa44:	4299      	cmp	r1, r3
 800aa46:	dd40      	ble.n	800aaca <_printf_float+0x1b2>
 800aa48:	f1aa 0a02 	sub.w	sl, sl, #2
 800aa4c:	fa5f fa8a 	uxtb.w	sl, sl
 800aa50:	4652      	mov	r2, sl
 800aa52:	3901      	subs	r1, #1
 800aa54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aa58:	910d      	str	r1, [sp, #52]	@ 0x34
 800aa5a:	f7ff ff23 	bl	800a8a4 <__exponent>
 800aa5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa60:	4681      	mov	r9, r0
 800aa62:	1813      	adds	r3, r2, r0
 800aa64:	2a01      	cmp	r2, #1
 800aa66:	6123      	str	r3, [r4, #16]
 800aa68:	dc02      	bgt.n	800aa70 <_printf_float+0x158>
 800aa6a:	6822      	ldr	r2, [r4, #0]
 800aa6c:	07d2      	lsls	r2, r2, #31
 800aa6e:	d501      	bpl.n	800aa74 <_printf_float+0x15c>
 800aa70:	3301      	adds	r3, #1
 800aa72:	6123      	str	r3, [r4, #16]
 800aa74:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d09e      	beq.n	800a9ba <_printf_float+0xa2>
 800aa7c:	232d      	movs	r3, #45	@ 0x2d
 800aa7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa82:	e79a      	b.n	800a9ba <_printf_float+0xa2>
 800aa84:	2947      	cmp	r1, #71	@ 0x47
 800aa86:	d1bf      	bne.n	800aa08 <_printf_float+0xf0>
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1bd      	bne.n	800aa08 <_printf_float+0xf0>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e7ba      	b.n	800aa06 <_printf_float+0xee>
 800aa90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa94:	d9dc      	bls.n	800aa50 <_printf_float+0x138>
 800aa96:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa9a:	d118      	bne.n	800aace <_printf_float+0x1b6>
 800aa9c:	2900      	cmp	r1, #0
 800aa9e:	6863      	ldr	r3, [r4, #4]
 800aaa0:	dd0b      	ble.n	800aaba <_printf_float+0x1a2>
 800aaa2:	6121      	str	r1, [r4, #16]
 800aaa4:	b913      	cbnz	r3, 800aaac <_printf_float+0x194>
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	07d0      	lsls	r0, r2, #31
 800aaaa:	d502      	bpl.n	800aab2 <_printf_float+0x19a>
 800aaac:	3301      	adds	r3, #1
 800aaae:	440b      	add	r3, r1
 800aab0:	6123      	str	r3, [r4, #16]
 800aab2:	f04f 0900 	mov.w	r9, #0
 800aab6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aab8:	e7dc      	b.n	800aa74 <_printf_float+0x15c>
 800aaba:	b913      	cbnz	r3, 800aac2 <_printf_float+0x1aa>
 800aabc:	6822      	ldr	r2, [r4, #0]
 800aabe:	07d2      	lsls	r2, r2, #31
 800aac0:	d501      	bpl.n	800aac6 <_printf_float+0x1ae>
 800aac2:	3302      	adds	r3, #2
 800aac4:	e7f4      	b.n	800aab0 <_printf_float+0x198>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e7f2      	b.n	800aab0 <_printf_float+0x198>
 800aaca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aace:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aad0:	4299      	cmp	r1, r3
 800aad2:	db05      	blt.n	800aae0 <_printf_float+0x1c8>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	6121      	str	r1, [r4, #16]
 800aad8:	07d8      	lsls	r0, r3, #31
 800aada:	d5ea      	bpl.n	800aab2 <_printf_float+0x19a>
 800aadc:	1c4b      	adds	r3, r1, #1
 800aade:	e7e7      	b.n	800aab0 <_printf_float+0x198>
 800aae0:	2900      	cmp	r1, #0
 800aae2:	bfcc      	ite	gt
 800aae4:	2201      	movgt	r2, #1
 800aae6:	f1c1 0202 	rsble	r2, r1, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	e7e0      	b.n	800aab0 <_printf_float+0x198>
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	055a      	lsls	r2, r3, #21
 800aaf2:	d407      	bmi.n	800ab04 <_printf_float+0x1ec>
 800aaf4:	6923      	ldr	r3, [r4, #16]
 800aaf6:	4642      	mov	r2, r8
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4628      	mov	r0, r5
 800aafc:	47b8      	blx	r7
 800aafe:	3001      	adds	r0, #1
 800ab00:	d12b      	bne.n	800ab5a <_printf_float+0x242>
 800ab02:	e764      	b.n	800a9ce <_printf_float+0xb6>
 800ab04:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab08:	f240 80dc 	bls.w	800acc4 <_printf_float+0x3ac>
 800ab0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab10:	2200      	movs	r2, #0
 800ab12:	2300      	movs	r3, #0
 800ab14:	f7f5 ffb8 	bl	8000a88 <__aeabi_dcmpeq>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d033      	beq.n	800ab84 <_printf_float+0x26c>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	4631      	mov	r1, r6
 800ab20:	4628      	mov	r0, r5
 800ab22:	4a35      	ldr	r2, [pc, #212]	@ (800abf8 <_printf_float+0x2e0>)
 800ab24:	47b8      	blx	r7
 800ab26:	3001      	adds	r0, #1
 800ab28:	f43f af51 	beq.w	800a9ce <_printf_float+0xb6>
 800ab2c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800ab30:	4543      	cmp	r3, r8
 800ab32:	db02      	blt.n	800ab3a <_printf_float+0x222>
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	07d8      	lsls	r0, r3, #31
 800ab38:	d50f      	bpl.n	800ab5a <_printf_float+0x242>
 800ab3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab3e:	4631      	mov	r1, r6
 800ab40:	4628      	mov	r0, r5
 800ab42:	47b8      	blx	r7
 800ab44:	3001      	adds	r0, #1
 800ab46:	f43f af42 	beq.w	800a9ce <_printf_float+0xb6>
 800ab4a:	f04f 0900 	mov.w	r9, #0
 800ab4e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ab52:	f104 0a1a 	add.w	sl, r4, #26
 800ab56:	45c8      	cmp	r8, r9
 800ab58:	dc09      	bgt.n	800ab6e <_printf_float+0x256>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	079b      	lsls	r3, r3, #30
 800ab5e:	f100 8102 	bmi.w	800ad66 <_printf_float+0x44e>
 800ab62:	68e0      	ldr	r0, [r4, #12]
 800ab64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab66:	4298      	cmp	r0, r3
 800ab68:	bfb8      	it	lt
 800ab6a:	4618      	movlt	r0, r3
 800ab6c:	e731      	b.n	800a9d2 <_printf_float+0xba>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	4652      	mov	r2, sl
 800ab72:	4631      	mov	r1, r6
 800ab74:	4628      	mov	r0, r5
 800ab76:	47b8      	blx	r7
 800ab78:	3001      	adds	r0, #1
 800ab7a:	f43f af28 	beq.w	800a9ce <_printf_float+0xb6>
 800ab7e:	f109 0901 	add.w	r9, r9, #1
 800ab82:	e7e8      	b.n	800ab56 <_printf_float+0x23e>
 800ab84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	dc38      	bgt.n	800abfc <_printf_float+0x2e4>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4628      	mov	r0, r5
 800ab90:	4a19      	ldr	r2, [pc, #100]	@ (800abf8 <_printf_float+0x2e0>)
 800ab92:	47b8      	blx	r7
 800ab94:	3001      	adds	r0, #1
 800ab96:	f43f af1a 	beq.w	800a9ce <_printf_float+0xb6>
 800ab9a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ab9e:	ea59 0303 	orrs.w	r3, r9, r3
 800aba2:	d102      	bne.n	800abaa <_printf_float+0x292>
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	07d9      	lsls	r1, r3, #31
 800aba8:	d5d7      	bpl.n	800ab5a <_printf_float+0x242>
 800abaa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800abae:	4631      	mov	r1, r6
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b8      	blx	r7
 800abb4:	3001      	adds	r0, #1
 800abb6:	f43f af0a 	beq.w	800a9ce <_printf_float+0xb6>
 800abba:	f04f 0a00 	mov.w	sl, #0
 800abbe:	f104 0b1a 	add.w	fp, r4, #26
 800abc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abc4:	425b      	negs	r3, r3
 800abc6:	4553      	cmp	r3, sl
 800abc8:	dc01      	bgt.n	800abce <_printf_float+0x2b6>
 800abca:	464b      	mov	r3, r9
 800abcc:	e793      	b.n	800aaf6 <_printf_float+0x1de>
 800abce:	2301      	movs	r3, #1
 800abd0:	465a      	mov	r2, fp
 800abd2:	4631      	mov	r1, r6
 800abd4:	4628      	mov	r0, r5
 800abd6:	47b8      	blx	r7
 800abd8:	3001      	adds	r0, #1
 800abda:	f43f aef8 	beq.w	800a9ce <_printf_float+0xb6>
 800abde:	f10a 0a01 	add.w	sl, sl, #1
 800abe2:	e7ee      	b.n	800abc2 <_printf_float+0x2aa>
 800abe4:	7fefffff 	.word	0x7fefffff
 800abe8:	0800dfce 	.word	0x0800dfce
 800abec:	0800dfd2 	.word	0x0800dfd2
 800abf0:	0800dfd6 	.word	0x0800dfd6
 800abf4:	0800dfda 	.word	0x0800dfda
 800abf8:	0800dfde 	.word	0x0800dfde
 800abfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abfe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ac02:	4553      	cmp	r3, sl
 800ac04:	bfa8      	it	ge
 800ac06:	4653      	movge	r3, sl
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	4699      	mov	r9, r3
 800ac0c:	dc36      	bgt.n	800ac7c <_printf_float+0x364>
 800ac0e:	f04f 0b00 	mov.w	fp, #0
 800ac12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac16:	f104 021a 	add.w	r2, r4, #26
 800ac1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac1e:	eba3 0309 	sub.w	r3, r3, r9
 800ac22:	455b      	cmp	r3, fp
 800ac24:	dc31      	bgt.n	800ac8a <_printf_float+0x372>
 800ac26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac28:	459a      	cmp	sl, r3
 800ac2a:	dc3a      	bgt.n	800aca2 <_printf_float+0x38a>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	07da      	lsls	r2, r3, #31
 800ac30:	d437      	bmi.n	800aca2 <_printf_float+0x38a>
 800ac32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac34:	ebaa 0903 	sub.w	r9, sl, r3
 800ac38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac3a:	ebaa 0303 	sub.w	r3, sl, r3
 800ac3e:	4599      	cmp	r9, r3
 800ac40:	bfa8      	it	ge
 800ac42:	4699      	movge	r9, r3
 800ac44:	f1b9 0f00 	cmp.w	r9, #0
 800ac48:	dc33      	bgt.n	800acb2 <_printf_float+0x39a>
 800ac4a:	f04f 0800 	mov.w	r8, #0
 800ac4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac52:	f104 0b1a 	add.w	fp, r4, #26
 800ac56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac58:	ebaa 0303 	sub.w	r3, sl, r3
 800ac5c:	eba3 0309 	sub.w	r3, r3, r9
 800ac60:	4543      	cmp	r3, r8
 800ac62:	f77f af7a 	ble.w	800ab5a <_printf_float+0x242>
 800ac66:	2301      	movs	r3, #1
 800ac68:	465a      	mov	r2, fp
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	47b8      	blx	r7
 800ac70:	3001      	adds	r0, #1
 800ac72:	f43f aeac 	beq.w	800a9ce <_printf_float+0xb6>
 800ac76:	f108 0801 	add.w	r8, r8, #1
 800ac7a:	e7ec      	b.n	800ac56 <_printf_float+0x33e>
 800ac7c:	4642      	mov	r2, r8
 800ac7e:	4631      	mov	r1, r6
 800ac80:	4628      	mov	r0, r5
 800ac82:	47b8      	blx	r7
 800ac84:	3001      	adds	r0, #1
 800ac86:	d1c2      	bne.n	800ac0e <_printf_float+0x2f6>
 800ac88:	e6a1      	b.n	800a9ce <_printf_float+0xb6>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4628      	mov	r0, r5
 800ac90:	920a      	str	r2, [sp, #40]	@ 0x28
 800ac92:	47b8      	blx	r7
 800ac94:	3001      	adds	r0, #1
 800ac96:	f43f ae9a 	beq.w	800a9ce <_printf_float+0xb6>
 800ac9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac9c:	f10b 0b01 	add.w	fp, fp, #1
 800aca0:	e7bb      	b.n	800ac1a <_printf_float+0x302>
 800aca2:	4631      	mov	r1, r6
 800aca4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aca8:	4628      	mov	r0, r5
 800acaa:	47b8      	blx	r7
 800acac:	3001      	adds	r0, #1
 800acae:	d1c0      	bne.n	800ac32 <_printf_float+0x31a>
 800acb0:	e68d      	b.n	800a9ce <_printf_float+0xb6>
 800acb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acb4:	464b      	mov	r3, r9
 800acb6:	4631      	mov	r1, r6
 800acb8:	4628      	mov	r0, r5
 800acba:	4442      	add	r2, r8
 800acbc:	47b8      	blx	r7
 800acbe:	3001      	adds	r0, #1
 800acc0:	d1c3      	bne.n	800ac4a <_printf_float+0x332>
 800acc2:	e684      	b.n	800a9ce <_printf_float+0xb6>
 800acc4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800acc8:	f1ba 0f01 	cmp.w	sl, #1
 800accc:	dc01      	bgt.n	800acd2 <_printf_float+0x3ba>
 800acce:	07db      	lsls	r3, r3, #31
 800acd0:	d536      	bpl.n	800ad40 <_printf_float+0x428>
 800acd2:	2301      	movs	r3, #1
 800acd4:	4642      	mov	r2, r8
 800acd6:	4631      	mov	r1, r6
 800acd8:	4628      	mov	r0, r5
 800acda:	47b8      	blx	r7
 800acdc:	3001      	adds	r0, #1
 800acde:	f43f ae76 	beq.w	800a9ce <_printf_float+0xb6>
 800ace2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ace6:	4631      	mov	r1, r6
 800ace8:	4628      	mov	r0, r5
 800acea:	47b8      	blx	r7
 800acec:	3001      	adds	r0, #1
 800acee:	f43f ae6e 	beq.w	800a9ce <_printf_float+0xb6>
 800acf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800acf6:	2200      	movs	r2, #0
 800acf8:	2300      	movs	r3, #0
 800acfa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800acfe:	f7f5 fec3 	bl	8000a88 <__aeabi_dcmpeq>
 800ad02:	b9c0      	cbnz	r0, 800ad36 <_printf_float+0x41e>
 800ad04:	4653      	mov	r3, sl
 800ad06:	f108 0201 	add.w	r2, r8, #1
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	47b8      	blx	r7
 800ad10:	3001      	adds	r0, #1
 800ad12:	d10c      	bne.n	800ad2e <_printf_float+0x416>
 800ad14:	e65b      	b.n	800a9ce <_printf_float+0xb6>
 800ad16:	2301      	movs	r3, #1
 800ad18:	465a      	mov	r2, fp
 800ad1a:	4631      	mov	r1, r6
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	47b8      	blx	r7
 800ad20:	3001      	adds	r0, #1
 800ad22:	f43f ae54 	beq.w	800a9ce <_printf_float+0xb6>
 800ad26:	f108 0801 	add.w	r8, r8, #1
 800ad2a:	45d0      	cmp	r8, sl
 800ad2c:	dbf3      	blt.n	800ad16 <_printf_float+0x3fe>
 800ad2e:	464b      	mov	r3, r9
 800ad30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad34:	e6e0      	b.n	800aaf8 <_printf_float+0x1e0>
 800ad36:	f04f 0800 	mov.w	r8, #0
 800ad3a:	f104 0b1a 	add.w	fp, r4, #26
 800ad3e:	e7f4      	b.n	800ad2a <_printf_float+0x412>
 800ad40:	2301      	movs	r3, #1
 800ad42:	4642      	mov	r2, r8
 800ad44:	e7e1      	b.n	800ad0a <_printf_float+0x3f2>
 800ad46:	2301      	movs	r3, #1
 800ad48:	464a      	mov	r2, r9
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	47b8      	blx	r7
 800ad50:	3001      	adds	r0, #1
 800ad52:	f43f ae3c 	beq.w	800a9ce <_printf_float+0xb6>
 800ad56:	f108 0801 	add.w	r8, r8, #1
 800ad5a:	68e3      	ldr	r3, [r4, #12]
 800ad5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad5e:	1a5b      	subs	r3, r3, r1
 800ad60:	4543      	cmp	r3, r8
 800ad62:	dcf0      	bgt.n	800ad46 <_printf_float+0x42e>
 800ad64:	e6fd      	b.n	800ab62 <_printf_float+0x24a>
 800ad66:	f04f 0800 	mov.w	r8, #0
 800ad6a:	f104 0919 	add.w	r9, r4, #25
 800ad6e:	e7f4      	b.n	800ad5a <_printf_float+0x442>

0800ad70 <_printf_common>:
 800ad70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad74:	4616      	mov	r6, r2
 800ad76:	4698      	mov	r8, r3
 800ad78:	688a      	ldr	r2, [r1, #8]
 800ad7a:	690b      	ldr	r3, [r1, #16]
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	bfb8      	it	lt
 800ad82:	4613      	movlt	r3, r2
 800ad84:	6033      	str	r3, [r6, #0]
 800ad86:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad90:	b10a      	cbz	r2, 800ad96 <_printf_common+0x26>
 800ad92:	3301      	adds	r3, #1
 800ad94:	6033      	str	r3, [r6, #0]
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	0699      	lsls	r1, r3, #26
 800ad9a:	bf42      	ittt	mi
 800ad9c:	6833      	ldrmi	r3, [r6, #0]
 800ad9e:	3302      	addmi	r3, #2
 800ada0:	6033      	strmi	r3, [r6, #0]
 800ada2:	6825      	ldr	r5, [r4, #0]
 800ada4:	f015 0506 	ands.w	r5, r5, #6
 800ada8:	d106      	bne.n	800adb8 <_printf_common+0x48>
 800adaa:	f104 0a19 	add.w	sl, r4, #25
 800adae:	68e3      	ldr	r3, [r4, #12]
 800adb0:	6832      	ldr	r2, [r6, #0]
 800adb2:	1a9b      	subs	r3, r3, r2
 800adb4:	42ab      	cmp	r3, r5
 800adb6:	dc2b      	bgt.n	800ae10 <_printf_common+0xa0>
 800adb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800adbc:	6822      	ldr	r2, [r4, #0]
 800adbe:	3b00      	subs	r3, #0
 800adc0:	bf18      	it	ne
 800adc2:	2301      	movne	r3, #1
 800adc4:	0692      	lsls	r2, r2, #26
 800adc6:	d430      	bmi.n	800ae2a <_printf_common+0xba>
 800adc8:	4641      	mov	r1, r8
 800adca:	4638      	mov	r0, r7
 800adcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800add0:	47c8      	blx	r9
 800add2:	3001      	adds	r0, #1
 800add4:	d023      	beq.n	800ae1e <_printf_common+0xae>
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	6922      	ldr	r2, [r4, #16]
 800adda:	f003 0306 	and.w	r3, r3, #6
 800adde:	2b04      	cmp	r3, #4
 800ade0:	bf14      	ite	ne
 800ade2:	2500      	movne	r5, #0
 800ade4:	6833      	ldreq	r3, [r6, #0]
 800ade6:	f04f 0600 	mov.w	r6, #0
 800adea:	bf08      	it	eq
 800adec:	68e5      	ldreq	r5, [r4, #12]
 800adee:	f104 041a 	add.w	r4, r4, #26
 800adf2:	bf08      	it	eq
 800adf4:	1aed      	subeq	r5, r5, r3
 800adf6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800adfa:	bf08      	it	eq
 800adfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae00:	4293      	cmp	r3, r2
 800ae02:	bfc4      	itt	gt
 800ae04:	1a9b      	subgt	r3, r3, r2
 800ae06:	18ed      	addgt	r5, r5, r3
 800ae08:	42b5      	cmp	r5, r6
 800ae0a:	d11a      	bne.n	800ae42 <_printf_common+0xd2>
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	e008      	b.n	800ae22 <_printf_common+0xb2>
 800ae10:	2301      	movs	r3, #1
 800ae12:	4652      	mov	r2, sl
 800ae14:	4641      	mov	r1, r8
 800ae16:	4638      	mov	r0, r7
 800ae18:	47c8      	blx	r9
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	d103      	bne.n	800ae26 <_printf_common+0xb6>
 800ae1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae26:	3501      	adds	r5, #1
 800ae28:	e7c1      	b.n	800adae <_printf_common+0x3e>
 800ae2a:	2030      	movs	r0, #48	@ 0x30
 800ae2c:	18e1      	adds	r1, r4, r3
 800ae2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae38:	4422      	add	r2, r4
 800ae3a:	3302      	adds	r3, #2
 800ae3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae40:	e7c2      	b.n	800adc8 <_printf_common+0x58>
 800ae42:	2301      	movs	r3, #1
 800ae44:	4622      	mov	r2, r4
 800ae46:	4641      	mov	r1, r8
 800ae48:	4638      	mov	r0, r7
 800ae4a:	47c8      	blx	r9
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	d0e6      	beq.n	800ae1e <_printf_common+0xae>
 800ae50:	3601      	adds	r6, #1
 800ae52:	e7d9      	b.n	800ae08 <_printf_common+0x98>

0800ae54 <_printf_i>:
 800ae54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae58:	7e0f      	ldrb	r7, [r1, #24]
 800ae5a:	4691      	mov	r9, r2
 800ae5c:	2f78      	cmp	r7, #120	@ 0x78
 800ae5e:	4680      	mov	r8, r0
 800ae60:	460c      	mov	r4, r1
 800ae62:	469a      	mov	sl, r3
 800ae64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae6a:	d807      	bhi.n	800ae7c <_printf_i+0x28>
 800ae6c:	2f62      	cmp	r7, #98	@ 0x62
 800ae6e:	d80a      	bhi.n	800ae86 <_printf_i+0x32>
 800ae70:	2f00      	cmp	r7, #0
 800ae72:	f000 80d3 	beq.w	800b01c <_printf_i+0x1c8>
 800ae76:	2f58      	cmp	r7, #88	@ 0x58
 800ae78:	f000 80ba 	beq.w	800aff0 <_printf_i+0x19c>
 800ae7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae84:	e03a      	b.n	800aefc <_printf_i+0xa8>
 800ae86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae8a:	2b15      	cmp	r3, #21
 800ae8c:	d8f6      	bhi.n	800ae7c <_printf_i+0x28>
 800ae8e:	a101      	add	r1, pc, #4	@ (adr r1, 800ae94 <_printf_i+0x40>)
 800ae90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae94:	0800aeed 	.word	0x0800aeed
 800ae98:	0800af01 	.word	0x0800af01
 800ae9c:	0800ae7d 	.word	0x0800ae7d
 800aea0:	0800ae7d 	.word	0x0800ae7d
 800aea4:	0800ae7d 	.word	0x0800ae7d
 800aea8:	0800ae7d 	.word	0x0800ae7d
 800aeac:	0800af01 	.word	0x0800af01
 800aeb0:	0800ae7d 	.word	0x0800ae7d
 800aeb4:	0800ae7d 	.word	0x0800ae7d
 800aeb8:	0800ae7d 	.word	0x0800ae7d
 800aebc:	0800ae7d 	.word	0x0800ae7d
 800aec0:	0800b003 	.word	0x0800b003
 800aec4:	0800af2b 	.word	0x0800af2b
 800aec8:	0800afbd 	.word	0x0800afbd
 800aecc:	0800ae7d 	.word	0x0800ae7d
 800aed0:	0800ae7d 	.word	0x0800ae7d
 800aed4:	0800b025 	.word	0x0800b025
 800aed8:	0800ae7d 	.word	0x0800ae7d
 800aedc:	0800af2b 	.word	0x0800af2b
 800aee0:	0800ae7d 	.word	0x0800ae7d
 800aee4:	0800ae7d 	.word	0x0800ae7d
 800aee8:	0800afc5 	.word	0x0800afc5
 800aeec:	6833      	ldr	r3, [r6, #0]
 800aeee:	1d1a      	adds	r2, r3, #4
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6032      	str	r2, [r6, #0]
 800aef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aefc:	2301      	movs	r3, #1
 800aefe:	e09e      	b.n	800b03e <_printf_i+0x1ea>
 800af00:	6833      	ldr	r3, [r6, #0]
 800af02:	6820      	ldr	r0, [r4, #0]
 800af04:	1d19      	adds	r1, r3, #4
 800af06:	6031      	str	r1, [r6, #0]
 800af08:	0606      	lsls	r6, r0, #24
 800af0a:	d501      	bpl.n	800af10 <_printf_i+0xbc>
 800af0c:	681d      	ldr	r5, [r3, #0]
 800af0e:	e003      	b.n	800af18 <_printf_i+0xc4>
 800af10:	0645      	lsls	r5, r0, #25
 800af12:	d5fb      	bpl.n	800af0c <_printf_i+0xb8>
 800af14:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af18:	2d00      	cmp	r5, #0
 800af1a:	da03      	bge.n	800af24 <_printf_i+0xd0>
 800af1c:	232d      	movs	r3, #45	@ 0x2d
 800af1e:	426d      	negs	r5, r5
 800af20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af24:	230a      	movs	r3, #10
 800af26:	4859      	ldr	r0, [pc, #356]	@ (800b08c <_printf_i+0x238>)
 800af28:	e011      	b.n	800af4e <_printf_i+0xfa>
 800af2a:	6821      	ldr	r1, [r4, #0]
 800af2c:	6833      	ldr	r3, [r6, #0]
 800af2e:	0608      	lsls	r0, r1, #24
 800af30:	f853 5b04 	ldr.w	r5, [r3], #4
 800af34:	d402      	bmi.n	800af3c <_printf_i+0xe8>
 800af36:	0649      	lsls	r1, r1, #25
 800af38:	bf48      	it	mi
 800af3a:	b2ad      	uxthmi	r5, r5
 800af3c:	2f6f      	cmp	r7, #111	@ 0x6f
 800af3e:	6033      	str	r3, [r6, #0]
 800af40:	bf14      	ite	ne
 800af42:	230a      	movne	r3, #10
 800af44:	2308      	moveq	r3, #8
 800af46:	4851      	ldr	r0, [pc, #324]	@ (800b08c <_printf_i+0x238>)
 800af48:	2100      	movs	r1, #0
 800af4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af4e:	6866      	ldr	r6, [r4, #4]
 800af50:	2e00      	cmp	r6, #0
 800af52:	bfa8      	it	ge
 800af54:	6821      	ldrge	r1, [r4, #0]
 800af56:	60a6      	str	r6, [r4, #8]
 800af58:	bfa4      	itt	ge
 800af5a:	f021 0104 	bicge.w	r1, r1, #4
 800af5e:	6021      	strge	r1, [r4, #0]
 800af60:	b90d      	cbnz	r5, 800af66 <_printf_i+0x112>
 800af62:	2e00      	cmp	r6, #0
 800af64:	d04b      	beq.n	800affe <_printf_i+0x1aa>
 800af66:	4616      	mov	r6, r2
 800af68:	fbb5 f1f3 	udiv	r1, r5, r3
 800af6c:	fb03 5711 	mls	r7, r3, r1, r5
 800af70:	5dc7      	ldrb	r7, [r0, r7]
 800af72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af76:	462f      	mov	r7, r5
 800af78:	42bb      	cmp	r3, r7
 800af7a:	460d      	mov	r5, r1
 800af7c:	d9f4      	bls.n	800af68 <_printf_i+0x114>
 800af7e:	2b08      	cmp	r3, #8
 800af80:	d10b      	bne.n	800af9a <_printf_i+0x146>
 800af82:	6823      	ldr	r3, [r4, #0]
 800af84:	07df      	lsls	r7, r3, #31
 800af86:	d508      	bpl.n	800af9a <_printf_i+0x146>
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	6861      	ldr	r1, [r4, #4]
 800af8c:	4299      	cmp	r1, r3
 800af8e:	bfde      	ittt	le
 800af90:	2330      	movle	r3, #48	@ 0x30
 800af92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af96:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800af9a:	1b92      	subs	r2, r2, r6
 800af9c:	6122      	str	r2, [r4, #16]
 800af9e:	464b      	mov	r3, r9
 800afa0:	4621      	mov	r1, r4
 800afa2:	4640      	mov	r0, r8
 800afa4:	f8cd a000 	str.w	sl, [sp]
 800afa8:	aa03      	add	r2, sp, #12
 800afaa:	f7ff fee1 	bl	800ad70 <_printf_common>
 800afae:	3001      	adds	r0, #1
 800afb0:	d14a      	bne.n	800b048 <_printf_i+0x1f4>
 800afb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afb6:	b004      	add	sp, #16
 800afb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	f043 0320 	orr.w	r3, r3, #32
 800afc2:	6023      	str	r3, [r4, #0]
 800afc4:	2778      	movs	r7, #120	@ 0x78
 800afc6:	4832      	ldr	r0, [pc, #200]	@ (800b090 <_printf_i+0x23c>)
 800afc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	6831      	ldr	r1, [r6, #0]
 800afd0:	061f      	lsls	r7, r3, #24
 800afd2:	f851 5b04 	ldr.w	r5, [r1], #4
 800afd6:	d402      	bmi.n	800afde <_printf_i+0x18a>
 800afd8:	065f      	lsls	r7, r3, #25
 800afda:	bf48      	it	mi
 800afdc:	b2ad      	uxthmi	r5, r5
 800afde:	6031      	str	r1, [r6, #0]
 800afe0:	07d9      	lsls	r1, r3, #31
 800afe2:	bf44      	itt	mi
 800afe4:	f043 0320 	orrmi.w	r3, r3, #32
 800afe8:	6023      	strmi	r3, [r4, #0]
 800afea:	b11d      	cbz	r5, 800aff4 <_printf_i+0x1a0>
 800afec:	2310      	movs	r3, #16
 800afee:	e7ab      	b.n	800af48 <_printf_i+0xf4>
 800aff0:	4826      	ldr	r0, [pc, #152]	@ (800b08c <_printf_i+0x238>)
 800aff2:	e7e9      	b.n	800afc8 <_printf_i+0x174>
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	f023 0320 	bic.w	r3, r3, #32
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	e7f6      	b.n	800afec <_printf_i+0x198>
 800affe:	4616      	mov	r6, r2
 800b000:	e7bd      	b.n	800af7e <_printf_i+0x12a>
 800b002:	6833      	ldr	r3, [r6, #0]
 800b004:	6825      	ldr	r5, [r4, #0]
 800b006:	1d18      	adds	r0, r3, #4
 800b008:	6961      	ldr	r1, [r4, #20]
 800b00a:	6030      	str	r0, [r6, #0]
 800b00c:	062e      	lsls	r6, r5, #24
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	d501      	bpl.n	800b016 <_printf_i+0x1c2>
 800b012:	6019      	str	r1, [r3, #0]
 800b014:	e002      	b.n	800b01c <_printf_i+0x1c8>
 800b016:	0668      	lsls	r0, r5, #25
 800b018:	d5fb      	bpl.n	800b012 <_printf_i+0x1be>
 800b01a:	8019      	strh	r1, [r3, #0]
 800b01c:	2300      	movs	r3, #0
 800b01e:	4616      	mov	r6, r2
 800b020:	6123      	str	r3, [r4, #16]
 800b022:	e7bc      	b.n	800af9e <_printf_i+0x14a>
 800b024:	6833      	ldr	r3, [r6, #0]
 800b026:	2100      	movs	r1, #0
 800b028:	1d1a      	adds	r2, r3, #4
 800b02a:	6032      	str	r2, [r6, #0]
 800b02c:	681e      	ldr	r6, [r3, #0]
 800b02e:	6862      	ldr	r2, [r4, #4]
 800b030:	4630      	mov	r0, r6
 800b032:	f000 f9d4 	bl	800b3de <memchr>
 800b036:	b108      	cbz	r0, 800b03c <_printf_i+0x1e8>
 800b038:	1b80      	subs	r0, r0, r6
 800b03a:	6060      	str	r0, [r4, #4]
 800b03c:	6863      	ldr	r3, [r4, #4]
 800b03e:	6123      	str	r3, [r4, #16]
 800b040:	2300      	movs	r3, #0
 800b042:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b046:	e7aa      	b.n	800af9e <_printf_i+0x14a>
 800b048:	4632      	mov	r2, r6
 800b04a:	4649      	mov	r1, r9
 800b04c:	4640      	mov	r0, r8
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	47d0      	blx	sl
 800b052:	3001      	adds	r0, #1
 800b054:	d0ad      	beq.n	800afb2 <_printf_i+0x15e>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	079b      	lsls	r3, r3, #30
 800b05a:	d413      	bmi.n	800b084 <_printf_i+0x230>
 800b05c:	68e0      	ldr	r0, [r4, #12]
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	4298      	cmp	r0, r3
 800b062:	bfb8      	it	lt
 800b064:	4618      	movlt	r0, r3
 800b066:	e7a6      	b.n	800afb6 <_printf_i+0x162>
 800b068:	2301      	movs	r3, #1
 800b06a:	4632      	mov	r2, r6
 800b06c:	4649      	mov	r1, r9
 800b06e:	4640      	mov	r0, r8
 800b070:	47d0      	blx	sl
 800b072:	3001      	adds	r0, #1
 800b074:	d09d      	beq.n	800afb2 <_printf_i+0x15e>
 800b076:	3501      	adds	r5, #1
 800b078:	68e3      	ldr	r3, [r4, #12]
 800b07a:	9903      	ldr	r1, [sp, #12]
 800b07c:	1a5b      	subs	r3, r3, r1
 800b07e:	42ab      	cmp	r3, r5
 800b080:	dcf2      	bgt.n	800b068 <_printf_i+0x214>
 800b082:	e7eb      	b.n	800b05c <_printf_i+0x208>
 800b084:	2500      	movs	r5, #0
 800b086:	f104 0619 	add.w	r6, r4, #25
 800b08a:	e7f5      	b.n	800b078 <_printf_i+0x224>
 800b08c:	0800dfe0 	.word	0x0800dfe0
 800b090:	0800dff1 	.word	0x0800dff1

0800b094 <sniprintf>:
 800b094:	b40c      	push	{r2, r3}
 800b096:	b530      	push	{r4, r5, lr}
 800b098:	4b17      	ldr	r3, [pc, #92]	@ (800b0f8 <sniprintf+0x64>)
 800b09a:	1e0c      	subs	r4, r1, #0
 800b09c:	681d      	ldr	r5, [r3, #0]
 800b09e:	b09d      	sub	sp, #116	@ 0x74
 800b0a0:	da08      	bge.n	800b0b4 <sniprintf+0x20>
 800b0a2:	238b      	movs	r3, #139	@ 0x8b
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0a8:	602b      	str	r3, [r5, #0]
 800b0aa:	b01d      	add	sp, #116	@ 0x74
 800b0ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0b0:	b002      	add	sp, #8
 800b0b2:	4770      	bx	lr
 800b0b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b0b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0bc:	bf0c      	ite	eq
 800b0be:	4623      	moveq	r3, r4
 800b0c0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b0c4:	9304      	str	r3, [sp, #16]
 800b0c6:	9307      	str	r3, [sp, #28]
 800b0c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0cc:	9002      	str	r0, [sp, #8]
 800b0ce:	9006      	str	r0, [sp, #24]
 800b0d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	ab21      	add	r3, sp, #132	@ 0x84
 800b0d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b0da:	a902      	add	r1, sp, #8
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	f001 f88f 	bl	800c200 <_svfiprintf_r>
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	bfbc      	itt	lt
 800b0e6:	238b      	movlt	r3, #139	@ 0x8b
 800b0e8:	602b      	strlt	r3, [r5, #0]
 800b0ea:	2c00      	cmp	r4, #0
 800b0ec:	d0dd      	beq.n	800b0aa <sniprintf+0x16>
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	9b02      	ldr	r3, [sp, #8]
 800b0f2:	701a      	strb	r2, [r3, #0]
 800b0f4:	e7d9      	b.n	800b0aa <sniprintf+0x16>
 800b0f6:	bf00      	nop
 800b0f8:	2000003c 	.word	0x2000003c

0800b0fc <siprintf>:
 800b0fc:	b40e      	push	{r1, r2, r3}
 800b0fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b102:	b500      	push	{lr}
 800b104:	b09c      	sub	sp, #112	@ 0x70
 800b106:	ab1d      	add	r3, sp, #116	@ 0x74
 800b108:	9002      	str	r0, [sp, #8]
 800b10a:	9006      	str	r0, [sp, #24]
 800b10c:	9107      	str	r1, [sp, #28]
 800b10e:	9104      	str	r1, [sp, #16]
 800b110:	4808      	ldr	r0, [pc, #32]	@ (800b134 <siprintf+0x38>)
 800b112:	4909      	ldr	r1, [pc, #36]	@ (800b138 <siprintf+0x3c>)
 800b114:	f853 2b04 	ldr.w	r2, [r3], #4
 800b118:	9105      	str	r1, [sp, #20]
 800b11a:	6800      	ldr	r0, [r0, #0]
 800b11c:	a902      	add	r1, sp, #8
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	f001 f86e 	bl	800c200 <_svfiprintf_r>
 800b124:	2200      	movs	r2, #0
 800b126:	9b02      	ldr	r3, [sp, #8]
 800b128:	701a      	strb	r2, [r3, #0]
 800b12a:	b01c      	add	sp, #112	@ 0x70
 800b12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b130:	b003      	add	sp, #12
 800b132:	4770      	bx	lr
 800b134:	2000003c 	.word	0x2000003c
 800b138:	ffff0208 	.word	0xffff0208

0800b13c <std>:
 800b13c:	2300      	movs	r3, #0
 800b13e:	b510      	push	{r4, lr}
 800b140:	4604      	mov	r4, r0
 800b142:	e9c0 3300 	strd	r3, r3, [r0]
 800b146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b14a:	6083      	str	r3, [r0, #8]
 800b14c:	8181      	strh	r1, [r0, #12]
 800b14e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b150:	81c2      	strh	r2, [r0, #14]
 800b152:	6183      	str	r3, [r0, #24]
 800b154:	4619      	mov	r1, r3
 800b156:	2208      	movs	r2, #8
 800b158:	305c      	adds	r0, #92	@ 0x5c
 800b15a:	f000 f8b1 	bl	800b2c0 <memset>
 800b15e:	4b0d      	ldr	r3, [pc, #52]	@ (800b194 <std+0x58>)
 800b160:	6224      	str	r4, [r4, #32]
 800b162:	6263      	str	r3, [r4, #36]	@ 0x24
 800b164:	4b0c      	ldr	r3, [pc, #48]	@ (800b198 <std+0x5c>)
 800b166:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b168:	4b0c      	ldr	r3, [pc, #48]	@ (800b19c <std+0x60>)
 800b16a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b16c:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a0 <std+0x64>)
 800b16e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b170:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a4 <std+0x68>)
 800b172:	429c      	cmp	r4, r3
 800b174:	d006      	beq.n	800b184 <std+0x48>
 800b176:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b17a:	4294      	cmp	r4, r2
 800b17c:	d002      	beq.n	800b184 <std+0x48>
 800b17e:	33d0      	adds	r3, #208	@ 0xd0
 800b180:	429c      	cmp	r4, r3
 800b182:	d105      	bne.n	800b190 <std+0x54>
 800b184:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b18c:	f000 b924 	b.w	800b3d8 <__retarget_lock_init_recursive>
 800b190:	bd10      	pop	{r4, pc}
 800b192:	bf00      	nop
 800b194:	0800cdb5 	.word	0x0800cdb5
 800b198:	0800cdd7 	.word	0x0800cdd7
 800b19c:	0800ce0f 	.word	0x0800ce0f
 800b1a0:	0800ce33 	.word	0x0800ce33
 800b1a4:	20001518 	.word	0x20001518

0800b1a8 <stdio_exit_handler>:
 800b1a8:	4a02      	ldr	r2, [pc, #8]	@ (800b1b4 <stdio_exit_handler+0xc>)
 800b1aa:	4903      	ldr	r1, [pc, #12]	@ (800b1b8 <stdio_exit_handler+0x10>)
 800b1ac:	4803      	ldr	r0, [pc, #12]	@ (800b1bc <stdio_exit_handler+0x14>)
 800b1ae:	f000 b869 	b.w	800b284 <_fwalk_sglue>
 800b1b2:	bf00      	nop
 800b1b4:	20000030 	.word	0x20000030
 800b1b8:	0800c64d 	.word	0x0800c64d
 800b1bc:	20000040 	.word	0x20000040

0800b1c0 <cleanup_stdio>:
 800b1c0:	6841      	ldr	r1, [r0, #4]
 800b1c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b1f4 <cleanup_stdio+0x34>)
 800b1c4:	b510      	push	{r4, lr}
 800b1c6:	4299      	cmp	r1, r3
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	d001      	beq.n	800b1d0 <cleanup_stdio+0x10>
 800b1cc:	f001 fa3e 	bl	800c64c <_fflush_r>
 800b1d0:	68a1      	ldr	r1, [r4, #8]
 800b1d2:	4b09      	ldr	r3, [pc, #36]	@ (800b1f8 <cleanup_stdio+0x38>)
 800b1d4:	4299      	cmp	r1, r3
 800b1d6:	d002      	beq.n	800b1de <cleanup_stdio+0x1e>
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f001 fa37 	bl	800c64c <_fflush_r>
 800b1de:	68e1      	ldr	r1, [r4, #12]
 800b1e0:	4b06      	ldr	r3, [pc, #24]	@ (800b1fc <cleanup_stdio+0x3c>)
 800b1e2:	4299      	cmp	r1, r3
 800b1e4:	d004      	beq.n	800b1f0 <cleanup_stdio+0x30>
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ec:	f001 ba2e 	b.w	800c64c <_fflush_r>
 800b1f0:	bd10      	pop	{r4, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20001518 	.word	0x20001518
 800b1f8:	20001580 	.word	0x20001580
 800b1fc:	200015e8 	.word	0x200015e8

0800b200 <global_stdio_init.part.0>:
 800b200:	b510      	push	{r4, lr}
 800b202:	4b0b      	ldr	r3, [pc, #44]	@ (800b230 <global_stdio_init.part.0+0x30>)
 800b204:	4c0b      	ldr	r4, [pc, #44]	@ (800b234 <global_stdio_init.part.0+0x34>)
 800b206:	4a0c      	ldr	r2, [pc, #48]	@ (800b238 <global_stdio_init.part.0+0x38>)
 800b208:	4620      	mov	r0, r4
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	2104      	movs	r1, #4
 800b20e:	2200      	movs	r2, #0
 800b210:	f7ff ff94 	bl	800b13c <std>
 800b214:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b218:	2201      	movs	r2, #1
 800b21a:	2109      	movs	r1, #9
 800b21c:	f7ff ff8e 	bl	800b13c <std>
 800b220:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b224:	2202      	movs	r2, #2
 800b226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b22a:	2112      	movs	r1, #18
 800b22c:	f7ff bf86 	b.w	800b13c <std>
 800b230:	20001650 	.word	0x20001650
 800b234:	20001518 	.word	0x20001518
 800b238:	0800b1a9 	.word	0x0800b1a9

0800b23c <__sfp_lock_acquire>:
 800b23c:	4801      	ldr	r0, [pc, #4]	@ (800b244 <__sfp_lock_acquire+0x8>)
 800b23e:	f000 b8cc 	b.w	800b3da <__retarget_lock_acquire_recursive>
 800b242:	bf00      	nop
 800b244:	20001659 	.word	0x20001659

0800b248 <__sfp_lock_release>:
 800b248:	4801      	ldr	r0, [pc, #4]	@ (800b250 <__sfp_lock_release+0x8>)
 800b24a:	f000 b8c7 	b.w	800b3dc <__retarget_lock_release_recursive>
 800b24e:	bf00      	nop
 800b250:	20001659 	.word	0x20001659

0800b254 <__sinit>:
 800b254:	b510      	push	{r4, lr}
 800b256:	4604      	mov	r4, r0
 800b258:	f7ff fff0 	bl	800b23c <__sfp_lock_acquire>
 800b25c:	6a23      	ldr	r3, [r4, #32]
 800b25e:	b11b      	cbz	r3, 800b268 <__sinit+0x14>
 800b260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b264:	f7ff bff0 	b.w	800b248 <__sfp_lock_release>
 800b268:	4b04      	ldr	r3, [pc, #16]	@ (800b27c <__sinit+0x28>)
 800b26a:	6223      	str	r3, [r4, #32]
 800b26c:	4b04      	ldr	r3, [pc, #16]	@ (800b280 <__sinit+0x2c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1f5      	bne.n	800b260 <__sinit+0xc>
 800b274:	f7ff ffc4 	bl	800b200 <global_stdio_init.part.0>
 800b278:	e7f2      	b.n	800b260 <__sinit+0xc>
 800b27a:	bf00      	nop
 800b27c:	0800b1c1 	.word	0x0800b1c1
 800b280:	20001650 	.word	0x20001650

0800b284 <_fwalk_sglue>:
 800b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b288:	4607      	mov	r7, r0
 800b28a:	4688      	mov	r8, r1
 800b28c:	4614      	mov	r4, r2
 800b28e:	2600      	movs	r6, #0
 800b290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b294:	f1b9 0901 	subs.w	r9, r9, #1
 800b298:	d505      	bpl.n	800b2a6 <_fwalk_sglue+0x22>
 800b29a:	6824      	ldr	r4, [r4, #0]
 800b29c:	2c00      	cmp	r4, #0
 800b29e:	d1f7      	bne.n	800b290 <_fwalk_sglue+0xc>
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a6:	89ab      	ldrh	r3, [r5, #12]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d907      	bls.n	800b2bc <_fwalk_sglue+0x38>
 800b2ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	d003      	beq.n	800b2bc <_fwalk_sglue+0x38>
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	47c0      	blx	r8
 800b2ba:	4306      	orrs	r6, r0
 800b2bc:	3568      	adds	r5, #104	@ 0x68
 800b2be:	e7e9      	b.n	800b294 <_fwalk_sglue+0x10>

0800b2c0 <memset>:
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	4402      	add	r2, r0
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d100      	bne.n	800b2ca <memset+0xa>
 800b2c8:	4770      	bx	lr
 800b2ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b2ce:	e7f9      	b.n	800b2c4 <memset+0x4>

0800b2d0 <_localeconv_r>:
 800b2d0:	4800      	ldr	r0, [pc, #0]	@ (800b2d4 <_localeconv_r+0x4>)
 800b2d2:	4770      	bx	lr
 800b2d4:	2000017c 	.word	0x2000017c

0800b2d8 <_reclaim_reent>:
 800b2d8:	4b29      	ldr	r3, [pc, #164]	@ (800b380 <_reclaim_reent+0xa8>)
 800b2da:	b570      	push	{r4, r5, r6, lr}
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4604      	mov	r4, r0
 800b2e0:	4283      	cmp	r3, r0
 800b2e2:	d04b      	beq.n	800b37c <_reclaim_reent+0xa4>
 800b2e4:	69c3      	ldr	r3, [r0, #28]
 800b2e6:	b1ab      	cbz	r3, 800b314 <_reclaim_reent+0x3c>
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	b16b      	cbz	r3, 800b308 <_reclaim_reent+0x30>
 800b2ec:	2500      	movs	r5, #0
 800b2ee:	69e3      	ldr	r3, [r4, #28]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	5959      	ldr	r1, [r3, r5]
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	d13b      	bne.n	800b370 <_reclaim_reent+0x98>
 800b2f8:	3504      	adds	r5, #4
 800b2fa:	2d80      	cmp	r5, #128	@ 0x80
 800b2fc:	d1f7      	bne.n	800b2ee <_reclaim_reent+0x16>
 800b2fe:	69e3      	ldr	r3, [r4, #28]
 800b300:	4620      	mov	r0, r4
 800b302:	68d9      	ldr	r1, [r3, #12]
 800b304:	f000 fed8 	bl	800c0b8 <_free_r>
 800b308:	69e3      	ldr	r3, [r4, #28]
 800b30a:	6819      	ldr	r1, [r3, #0]
 800b30c:	b111      	cbz	r1, 800b314 <_reclaim_reent+0x3c>
 800b30e:	4620      	mov	r0, r4
 800b310:	f000 fed2 	bl	800c0b8 <_free_r>
 800b314:	6961      	ldr	r1, [r4, #20]
 800b316:	b111      	cbz	r1, 800b31e <_reclaim_reent+0x46>
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 fecd 	bl	800c0b8 <_free_r>
 800b31e:	69e1      	ldr	r1, [r4, #28]
 800b320:	b111      	cbz	r1, 800b328 <_reclaim_reent+0x50>
 800b322:	4620      	mov	r0, r4
 800b324:	f000 fec8 	bl	800c0b8 <_free_r>
 800b328:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b32a:	b111      	cbz	r1, 800b332 <_reclaim_reent+0x5a>
 800b32c:	4620      	mov	r0, r4
 800b32e:	f000 fec3 	bl	800c0b8 <_free_r>
 800b332:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b334:	b111      	cbz	r1, 800b33c <_reclaim_reent+0x64>
 800b336:	4620      	mov	r0, r4
 800b338:	f000 febe 	bl	800c0b8 <_free_r>
 800b33c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b33e:	b111      	cbz	r1, 800b346 <_reclaim_reent+0x6e>
 800b340:	4620      	mov	r0, r4
 800b342:	f000 feb9 	bl	800c0b8 <_free_r>
 800b346:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b348:	b111      	cbz	r1, 800b350 <_reclaim_reent+0x78>
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 feb4 	bl	800c0b8 <_free_r>
 800b350:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b352:	b111      	cbz	r1, 800b35a <_reclaim_reent+0x82>
 800b354:	4620      	mov	r0, r4
 800b356:	f000 feaf 	bl	800c0b8 <_free_r>
 800b35a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b35c:	b111      	cbz	r1, 800b364 <_reclaim_reent+0x8c>
 800b35e:	4620      	mov	r0, r4
 800b360:	f000 feaa 	bl	800c0b8 <_free_r>
 800b364:	6a23      	ldr	r3, [r4, #32]
 800b366:	b14b      	cbz	r3, 800b37c <_reclaim_reent+0xa4>
 800b368:	4620      	mov	r0, r4
 800b36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b36e:	4718      	bx	r3
 800b370:	680e      	ldr	r6, [r1, #0]
 800b372:	4620      	mov	r0, r4
 800b374:	f000 fea0 	bl	800c0b8 <_free_r>
 800b378:	4631      	mov	r1, r6
 800b37a:	e7bb      	b.n	800b2f4 <_reclaim_reent+0x1c>
 800b37c:	bd70      	pop	{r4, r5, r6, pc}
 800b37e:	bf00      	nop
 800b380:	2000003c 	.word	0x2000003c

0800b384 <__errno>:
 800b384:	4b01      	ldr	r3, [pc, #4]	@ (800b38c <__errno+0x8>)
 800b386:	6818      	ldr	r0, [r3, #0]
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	2000003c 	.word	0x2000003c

0800b390 <__libc_init_array>:
 800b390:	b570      	push	{r4, r5, r6, lr}
 800b392:	2600      	movs	r6, #0
 800b394:	4d0c      	ldr	r5, [pc, #48]	@ (800b3c8 <__libc_init_array+0x38>)
 800b396:	4c0d      	ldr	r4, [pc, #52]	@ (800b3cc <__libc_init_array+0x3c>)
 800b398:	1b64      	subs	r4, r4, r5
 800b39a:	10a4      	asrs	r4, r4, #2
 800b39c:	42a6      	cmp	r6, r4
 800b39e:	d109      	bne.n	800b3b4 <__libc_init_array+0x24>
 800b3a0:	f002 f8f8 	bl	800d594 <_init>
 800b3a4:	2600      	movs	r6, #0
 800b3a6:	4d0a      	ldr	r5, [pc, #40]	@ (800b3d0 <__libc_init_array+0x40>)
 800b3a8:	4c0a      	ldr	r4, [pc, #40]	@ (800b3d4 <__libc_init_array+0x44>)
 800b3aa:	1b64      	subs	r4, r4, r5
 800b3ac:	10a4      	asrs	r4, r4, #2
 800b3ae:	42a6      	cmp	r6, r4
 800b3b0:	d105      	bne.n	800b3be <__libc_init_array+0x2e>
 800b3b2:	bd70      	pop	{r4, r5, r6, pc}
 800b3b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b8:	4798      	blx	r3
 800b3ba:	3601      	adds	r6, #1
 800b3bc:	e7ee      	b.n	800b39c <__libc_init_array+0xc>
 800b3be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3c2:	4798      	blx	r3
 800b3c4:	3601      	adds	r6, #1
 800b3c6:	e7f2      	b.n	800b3ae <__libc_init_array+0x1e>
 800b3c8:	0800e348 	.word	0x0800e348
 800b3cc:	0800e348 	.word	0x0800e348
 800b3d0:	0800e348 	.word	0x0800e348
 800b3d4:	0800e34c 	.word	0x0800e34c

0800b3d8 <__retarget_lock_init_recursive>:
 800b3d8:	4770      	bx	lr

0800b3da <__retarget_lock_acquire_recursive>:
 800b3da:	4770      	bx	lr

0800b3dc <__retarget_lock_release_recursive>:
 800b3dc:	4770      	bx	lr

0800b3de <memchr>:
 800b3de:	4603      	mov	r3, r0
 800b3e0:	b510      	push	{r4, lr}
 800b3e2:	b2c9      	uxtb	r1, r1
 800b3e4:	4402      	add	r2, r0
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	d101      	bne.n	800b3f0 <memchr+0x12>
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	e003      	b.n	800b3f8 <memchr+0x1a>
 800b3f0:	7804      	ldrb	r4, [r0, #0]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	428c      	cmp	r4, r1
 800b3f6:	d1f6      	bne.n	800b3e6 <memchr+0x8>
 800b3f8:	bd10      	pop	{r4, pc}

0800b3fa <memcpy>:
 800b3fa:	440a      	add	r2, r1
 800b3fc:	4291      	cmp	r1, r2
 800b3fe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b402:	d100      	bne.n	800b406 <memcpy+0xc>
 800b404:	4770      	bx	lr
 800b406:	b510      	push	{r4, lr}
 800b408:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b40c:	4291      	cmp	r1, r2
 800b40e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b412:	d1f9      	bne.n	800b408 <memcpy+0xe>
 800b414:	bd10      	pop	{r4, pc}

0800b416 <quorem>:
 800b416:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41a:	6903      	ldr	r3, [r0, #16]
 800b41c:	690c      	ldr	r4, [r1, #16]
 800b41e:	4607      	mov	r7, r0
 800b420:	42a3      	cmp	r3, r4
 800b422:	db7e      	blt.n	800b522 <quorem+0x10c>
 800b424:	3c01      	subs	r4, #1
 800b426:	00a3      	lsls	r3, r4, #2
 800b428:	f100 0514 	add.w	r5, r0, #20
 800b42c:	f101 0814 	add.w	r8, r1, #20
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b43c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b440:	3301      	adds	r3, #1
 800b442:	429a      	cmp	r2, r3
 800b444:	fbb2 f6f3 	udiv	r6, r2, r3
 800b448:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b44c:	d32e      	bcc.n	800b4ac <quorem+0x96>
 800b44e:	f04f 0a00 	mov.w	sl, #0
 800b452:	46c4      	mov	ip, r8
 800b454:	46ae      	mov	lr, r5
 800b456:	46d3      	mov	fp, sl
 800b458:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b45c:	b298      	uxth	r0, r3
 800b45e:	fb06 a000 	mla	r0, r6, r0, sl
 800b462:	0c1b      	lsrs	r3, r3, #16
 800b464:	0c02      	lsrs	r2, r0, #16
 800b466:	fb06 2303 	mla	r3, r6, r3, r2
 800b46a:	f8de 2000 	ldr.w	r2, [lr]
 800b46e:	b280      	uxth	r0, r0
 800b470:	b292      	uxth	r2, r2
 800b472:	1a12      	subs	r2, r2, r0
 800b474:	445a      	add	r2, fp
 800b476:	f8de 0000 	ldr.w	r0, [lr]
 800b47a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b47e:	b29b      	uxth	r3, r3
 800b480:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b484:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b488:	b292      	uxth	r2, r2
 800b48a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b48e:	45e1      	cmp	r9, ip
 800b490:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b494:	f84e 2b04 	str.w	r2, [lr], #4
 800b498:	d2de      	bcs.n	800b458 <quorem+0x42>
 800b49a:	9b00      	ldr	r3, [sp, #0]
 800b49c:	58eb      	ldr	r3, [r5, r3]
 800b49e:	b92b      	cbnz	r3, 800b4ac <quorem+0x96>
 800b4a0:	9b01      	ldr	r3, [sp, #4]
 800b4a2:	3b04      	subs	r3, #4
 800b4a4:	429d      	cmp	r5, r3
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	d32f      	bcc.n	800b50a <quorem+0xf4>
 800b4aa:	613c      	str	r4, [r7, #16]
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	f001 fb79 	bl	800cba4 <__mcmp>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	db25      	blt.n	800b502 <quorem+0xec>
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4be:	f8d1 c000 	ldr.w	ip, [r1]
 800b4c2:	fa1f fe82 	uxth.w	lr, r2
 800b4c6:	fa1f f38c 	uxth.w	r3, ip
 800b4ca:	eba3 030e 	sub.w	r3, r3, lr
 800b4ce:	4403      	add	r3, r0
 800b4d0:	0c12      	lsrs	r2, r2, #16
 800b4d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b4d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4e0:	45c1      	cmp	r9, r8
 800b4e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b4e6:	f841 3b04 	str.w	r3, [r1], #4
 800b4ea:	d2e6      	bcs.n	800b4ba <quorem+0xa4>
 800b4ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4f4:	b922      	cbnz	r2, 800b500 <quorem+0xea>
 800b4f6:	3b04      	subs	r3, #4
 800b4f8:	429d      	cmp	r5, r3
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	d30b      	bcc.n	800b516 <quorem+0x100>
 800b4fe:	613c      	str	r4, [r7, #16]
 800b500:	3601      	adds	r6, #1
 800b502:	4630      	mov	r0, r6
 800b504:	b003      	add	sp, #12
 800b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b50a:	6812      	ldr	r2, [r2, #0]
 800b50c:	3b04      	subs	r3, #4
 800b50e:	2a00      	cmp	r2, #0
 800b510:	d1cb      	bne.n	800b4aa <quorem+0x94>
 800b512:	3c01      	subs	r4, #1
 800b514:	e7c6      	b.n	800b4a4 <quorem+0x8e>
 800b516:	6812      	ldr	r2, [r2, #0]
 800b518:	3b04      	subs	r3, #4
 800b51a:	2a00      	cmp	r2, #0
 800b51c:	d1ef      	bne.n	800b4fe <quorem+0xe8>
 800b51e:	3c01      	subs	r4, #1
 800b520:	e7ea      	b.n	800b4f8 <quorem+0xe2>
 800b522:	2000      	movs	r0, #0
 800b524:	e7ee      	b.n	800b504 <quorem+0xee>
	...

0800b528 <_dtoa_r>:
 800b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	4614      	mov	r4, r2
 800b52e:	461d      	mov	r5, r3
 800b530:	69c7      	ldr	r7, [r0, #28]
 800b532:	b097      	sub	sp, #92	@ 0x5c
 800b534:	4683      	mov	fp, r0
 800b536:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b53a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b53c:	b97f      	cbnz	r7, 800b55e <_dtoa_r+0x36>
 800b53e:	2010      	movs	r0, #16
 800b540:	f000 ff5a 	bl	800c3f8 <malloc>
 800b544:	4602      	mov	r2, r0
 800b546:	f8cb 001c 	str.w	r0, [fp, #28]
 800b54a:	b920      	cbnz	r0, 800b556 <_dtoa_r+0x2e>
 800b54c:	21ef      	movs	r1, #239	@ 0xef
 800b54e:	4ba8      	ldr	r3, [pc, #672]	@ (800b7f0 <_dtoa_r+0x2c8>)
 800b550:	48a8      	ldr	r0, [pc, #672]	@ (800b7f4 <_dtoa_r+0x2cc>)
 800b552:	f001 fd11 	bl	800cf78 <__assert_func>
 800b556:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b55a:	6007      	str	r7, [r0, #0]
 800b55c:	60c7      	str	r7, [r0, #12]
 800b55e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b562:	6819      	ldr	r1, [r3, #0]
 800b564:	b159      	cbz	r1, 800b57e <_dtoa_r+0x56>
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	2301      	movs	r3, #1
 800b56a:	4093      	lsls	r3, r2
 800b56c:	604a      	str	r2, [r1, #4]
 800b56e:	608b      	str	r3, [r1, #8]
 800b570:	4658      	mov	r0, fp
 800b572:	f001 f8df 	bl	800c734 <_Bfree>
 800b576:	2200      	movs	r2, #0
 800b578:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	1e2b      	subs	r3, r5, #0
 800b580:	bfaf      	iteee	ge
 800b582:	2300      	movge	r3, #0
 800b584:	2201      	movlt	r2, #1
 800b586:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b58a:	9303      	strlt	r3, [sp, #12]
 800b58c:	bfa8      	it	ge
 800b58e:	6033      	strge	r3, [r6, #0]
 800b590:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b594:	4b98      	ldr	r3, [pc, #608]	@ (800b7f8 <_dtoa_r+0x2d0>)
 800b596:	bfb8      	it	lt
 800b598:	6032      	strlt	r2, [r6, #0]
 800b59a:	ea33 0308 	bics.w	r3, r3, r8
 800b59e:	d112      	bne.n	800b5c6 <_dtoa_r+0x9e>
 800b5a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b5a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b5ac:	4323      	orrs	r3, r4
 800b5ae:	f000 8550 	beq.w	800c052 <_dtoa_r+0xb2a>
 800b5b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b5b4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b7fc <_dtoa_r+0x2d4>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 8552 	beq.w	800c062 <_dtoa_r+0xb3a>
 800b5be:	f10a 0303 	add.w	r3, sl, #3
 800b5c2:	f000 bd4c 	b.w	800c05e <_dtoa_r+0xb36>
 800b5c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b5ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f7f5 fa57 	bl	8000a88 <__aeabi_dcmpeq>
 800b5da:	4607      	mov	r7, r0
 800b5dc:	b158      	cbz	r0, 800b5f6 <_dtoa_r+0xce>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b5e6:	b113      	cbz	r3, 800b5ee <_dtoa_r+0xc6>
 800b5e8:	4b85      	ldr	r3, [pc, #532]	@ (800b800 <_dtoa_r+0x2d8>)
 800b5ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b5ec:	6013      	str	r3, [r2, #0]
 800b5ee:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b804 <_dtoa_r+0x2dc>
 800b5f2:	f000 bd36 	b.w	800c062 <_dtoa_r+0xb3a>
 800b5f6:	ab14      	add	r3, sp, #80	@ 0x50
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	ab15      	add	r3, sp, #84	@ 0x54
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	4658      	mov	r0, fp
 800b600:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b604:	f001 fb7e 	bl	800cd04 <__d2b>
 800b608:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b60c:	4681      	mov	r9, r0
 800b60e:	2e00      	cmp	r6, #0
 800b610:	d077      	beq.n	800b702 <_dtoa_r+0x1da>
 800b612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b618:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b61c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b620:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b624:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b628:	9712      	str	r7, [sp, #72]	@ 0x48
 800b62a:	4619      	mov	r1, r3
 800b62c:	2200      	movs	r2, #0
 800b62e:	4b76      	ldr	r3, [pc, #472]	@ (800b808 <_dtoa_r+0x2e0>)
 800b630:	f7f4 fe0a 	bl	8000248 <__aeabi_dsub>
 800b634:	a368      	add	r3, pc, #416	@ (adr r3, 800b7d8 <_dtoa_r+0x2b0>)
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	f7f4 ffbd 	bl	80005b8 <__aeabi_dmul>
 800b63e:	a368      	add	r3, pc, #416	@ (adr r3, 800b7e0 <_dtoa_r+0x2b8>)
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	f7f4 fe02 	bl	800024c <__adddf3>
 800b648:	4604      	mov	r4, r0
 800b64a:	4630      	mov	r0, r6
 800b64c:	460d      	mov	r5, r1
 800b64e:	f7f4 ff49 	bl	80004e4 <__aeabi_i2d>
 800b652:	a365      	add	r3, pc, #404	@ (adr r3, 800b7e8 <_dtoa_r+0x2c0>)
 800b654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b658:	f7f4 ffae 	bl	80005b8 <__aeabi_dmul>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	4620      	mov	r0, r4
 800b662:	4629      	mov	r1, r5
 800b664:	f7f4 fdf2 	bl	800024c <__adddf3>
 800b668:	4604      	mov	r4, r0
 800b66a:	460d      	mov	r5, r1
 800b66c:	f7f5 fa54 	bl	8000b18 <__aeabi_d2iz>
 800b670:	2200      	movs	r2, #0
 800b672:	4607      	mov	r7, r0
 800b674:	2300      	movs	r3, #0
 800b676:	4620      	mov	r0, r4
 800b678:	4629      	mov	r1, r5
 800b67a:	f7f5 fa0f 	bl	8000a9c <__aeabi_dcmplt>
 800b67e:	b140      	cbz	r0, 800b692 <_dtoa_r+0x16a>
 800b680:	4638      	mov	r0, r7
 800b682:	f7f4 ff2f 	bl	80004e4 <__aeabi_i2d>
 800b686:	4622      	mov	r2, r4
 800b688:	462b      	mov	r3, r5
 800b68a:	f7f5 f9fd 	bl	8000a88 <__aeabi_dcmpeq>
 800b68e:	b900      	cbnz	r0, 800b692 <_dtoa_r+0x16a>
 800b690:	3f01      	subs	r7, #1
 800b692:	2f16      	cmp	r7, #22
 800b694:	d853      	bhi.n	800b73e <_dtoa_r+0x216>
 800b696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b69a:	4b5c      	ldr	r3, [pc, #368]	@ (800b80c <_dtoa_r+0x2e4>)
 800b69c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	f7f5 f9fa 	bl	8000a9c <__aeabi_dcmplt>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d04a      	beq.n	800b742 <_dtoa_r+0x21a>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	3f01      	subs	r7, #1
 800b6b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b6b4:	1b9b      	subs	r3, r3, r6
 800b6b6:	1e5a      	subs	r2, r3, #1
 800b6b8:	bf46      	itte	mi
 800b6ba:	f1c3 0801 	rsbmi	r8, r3, #1
 800b6be:	2300      	movmi	r3, #0
 800b6c0:	f04f 0800 	movpl.w	r8, #0
 800b6c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6c6:	bf48      	it	mi
 800b6c8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b6ca:	2f00      	cmp	r7, #0
 800b6cc:	db3b      	blt.n	800b746 <_dtoa_r+0x21e>
 800b6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d0:	970e      	str	r7, [sp, #56]	@ 0x38
 800b6d2:	443b      	add	r3, r7
 800b6d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b6dc:	2b09      	cmp	r3, #9
 800b6de:	d866      	bhi.n	800b7ae <_dtoa_r+0x286>
 800b6e0:	2b05      	cmp	r3, #5
 800b6e2:	bfc4      	itt	gt
 800b6e4:	3b04      	subgt	r3, #4
 800b6e6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b6e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b6ea:	bfc8      	it	gt
 800b6ec:	2400      	movgt	r4, #0
 800b6ee:	f1a3 0302 	sub.w	r3, r3, #2
 800b6f2:	bfd8      	it	le
 800b6f4:	2401      	movle	r4, #1
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d864      	bhi.n	800b7c4 <_dtoa_r+0x29c>
 800b6fa:	e8df f003 	tbb	[pc, r3]
 800b6fe:	382b      	.short	0x382b
 800b700:	5636      	.short	0x5636
 800b702:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b706:	441e      	add	r6, r3
 800b708:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b70c:	2b20      	cmp	r3, #32
 800b70e:	bfc1      	itttt	gt
 800b710:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b714:	fa08 f803 	lslgt.w	r8, r8, r3
 800b718:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b71c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b720:	bfd6      	itet	le
 800b722:	f1c3 0320 	rsble	r3, r3, #32
 800b726:	ea48 0003 	orrgt.w	r0, r8, r3
 800b72a:	fa04 f003 	lslle.w	r0, r4, r3
 800b72e:	f7f4 fec9 	bl	80004c4 <__aeabi_ui2d>
 800b732:	2201      	movs	r2, #1
 800b734:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b738:	3e01      	subs	r6, #1
 800b73a:	9212      	str	r2, [sp, #72]	@ 0x48
 800b73c:	e775      	b.n	800b62a <_dtoa_r+0x102>
 800b73e:	2301      	movs	r3, #1
 800b740:	e7b6      	b.n	800b6b0 <_dtoa_r+0x188>
 800b742:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b744:	e7b5      	b.n	800b6b2 <_dtoa_r+0x18a>
 800b746:	427b      	negs	r3, r7
 800b748:	930a      	str	r3, [sp, #40]	@ 0x28
 800b74a:	2300      	movs	r3, #0
 800b74c:	eba8 0807 	sub.w	r8, r8, r7
 800b750:	930e      	str	r3, [sp, #56]	@ 0x38
 800b752:	e7c2      	b.n	800b6da <_dtoa_r+0x1b2>
 800b754:	2300      	movs	r3, #0
 800b756:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b758:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dc35      	bgt.n	800b7ca <_dtoa_r+0x2a2>
 800b75e:	2301      	movs	r3, #1
 800b760:	461a      	mov	r2, r3
 800b762:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b766:	9221      	str	r2, [sp, #132]	@ 0x84
 800b768:	e00b      	b.n	800b782 <_dtoa_r+0x25a>
 800b76a:	2301      	movs	r3, #1
 800b76c:	e7f3      	b.n	800b756 <_dtoa_r+0x22e>
 800b76e:	2300      	movs	r3, #0
 800b770:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b772:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b774:	18fb      	adds	r3, r7, r3
 800b776:	9308      	str	r3, [sp, #32]
 800b778:	3301      	adds	r3, #1
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	9307      	str	r3, [sp, #28]
 800b77e:	bfb8      	it	lt
 800b780:	2301      	movlt	r3, #1
 800b782:	2100      	movs	r1, #0
 800b784:	2204      	movs	r2, #4
 800b786:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b78a:	f102 0514 	add.w	r5, r2, #20
 800b78e:	429d      	cmp	r5, r3
 800b790:	d91f      	bls.n	800b7d2 <_dtoa_r+0x2aa>
 800b792:	6041      	str	r1, [r0, #4]
 800b794:	4658      	mov	r0, fp
 800b796:	f000 ff8d 	bl	800c6b4 <_Balloc>
 800b79a:	4682      	mov	sl, r0
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d139      	bne.n	800b814 <_dtoa_r+0x2ec>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	f240 11af 	movw	r1, #431	@ 0x1af
 800b7a6:	4b1a      	ldr	r3, [pc, #104]	@ (800b810 <_dtoa_r+0x2e8>)
 800b7a8:	e6d2      	b.n	800b550 <_dtoa_r+0x28>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e7e0      	b.n	800b770 <_dtoa_r+0x248>
 800b7ae:	2401      	movs	r4, #1
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b7b4:	9320      	str	r3, [sp, #128]	@ 0x80
 800b7b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b7c0:	2312      	movs	r3, #18
 800b7c2:	e7d0      	b.n	800b766 <_dtoa_r+0x23e>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7c8:	e7f5      	b.n	800b7b6 <_dtoa_r+0x28e>
 800b7ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b7d0:	e7d7      	b.n	800b782 <_dtoa_r+0x25a>
 800b7d2:	3101      	adds	r1, #1
 800b7d4:	0052      	lsls	r2, r2, #1
 800b7d6:	e7d8      	b.n	800b78a <_dtoa_r+0x262>
 800b7d8:	636f4361 	.word	0x636f4361
 800b7dc:	3fd287a7 	.word	0x3fd287a7
 800b7e0:	8b60c8b3 	.word	0x8b60c8b3
 800b7e4:	3fc68a28 	.word	0x3fc68a28
 800b7e8:	509f79fb 	.word	0x509f79fb
 800b7ec:	3fd34413 	.word	0x3fd34413
 800b7f0:	0800e00f 	.word	0x0800e00f
 800b7f4:	0800e026 	.word	0x0800e026
 800b7f8:	7ff00000 	.word	0x7ff00000
 800b7fc:	0800e00b 	.word	0x0800e00b
 800b800:	0800dfdf 	.word	0x0800dfdf
 800b804:	0800dfde 	.word	0x0800dfde
 800b808:	3ff80000 	.word	0x3ff80000
 800b80c:	0800e130 	.word	0x0800e130
 800b810:	0800e07e 	.word	0x0800e07e
 800b814:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b818:	6018      	str	r0, [r3, #0]
 800b81a:	9b07      	ldr	r3, [sp, #28]
 800b81c:	2b0e      	cmp	r3, #14
 800b81e:	f200 80a4 	bhi.w	800b96a <_dtoa_r+0x442>
 800b822:	2c00      	cmp	r4, #0
 800b824:	f000 80a1 	beq.w	800b96a <_dtoa_r+0x442>
 800b828:	2f00      	cmp	r7, #0
 800b82a:	dd33      	ble.n	800b894 <_dtoa_r+0x36c>
 800b82c:	4b86      	ldr	r3, [pc, #536]	@ (800ba48 <_dtoa_r+0x520>)
 800b82e:	f007 020f 	and.w	r2, r7, #15
 800b832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b836:	05f8      	lsls	r0, r7, #23
 800b838:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b83c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b840:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b844:	d516      	bpl.n	800b874 <_dtoa_r+0x34c>
 800b846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b84a:	4b80      	ldr	r3, [pc, #512]	@ (800ba4c <_dtoa_r+0x524>)
 800b84c:	2603      	movs	r6, #3
 800b84e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b852:	f7f4 ffdb 	bl	800080c <__aeabi_ddiv>
 800b856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b85a:	f004 040f 	and.w	r4, r4, #15
 800b85e:	4d7b      	ldr	r5, [pc, #492]	@ (800ba4c <_dtoa_r+0x524>)
 800b860:	b954      	cbnz	r4, 800b878 <_dtoa_r+0x350>
 800b862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b86a:	f7f4 ffcf 	bl	800080c <__aeabi_ddiv>
 800b86e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b872:	e028      	b.n	800b8c6 <_dtoa_r+0x39e>
 800b874:	2602      	movs	r6, #2
 800b876:	e7f2      	b.n	800b85e <_dtoa_r+0x336>
 800b878:	07e1      	lsls	r1, r4, #31
 800b87a:	d508      	bpl.n	800b88e <_dtoa_r+0x366>
 800b87c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b880:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b884:	f7f4 fe98 	bl	80005b8 <__aeabi_dmul>
 800b888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b88c:	3601      	adds	r6, #1
 800b88e:	1064      	asrs	r4, r4, #1
 800b890:	3508      	adds	r5, #8
 800b892:	e7e5      	b.n	800b860 <_dtoa_r+0x338>
 800b894:	f000 80d2 	beq.w	800ba3c <_dtoa_r+0x514>
 800b898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b89c:	427c      	negs	r4, r7
 800b89e:	4b6a      	ldr	r3, [pc, #424]	@ (800ba48 <_dtoa_r+0x520>)
 800b8a0:	f004 020f 	and.w	r2, r4, #15
 800b8a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	f7f4 fe84 	bl	80005b8 <__aeabi_dmul>
 800b8b0:	2602      	movs	r6, #2
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8b8:	4d64      	ldr	r5, [pc, #400]	@ (800ba4c <_dtoa_r+0x524>)
 800b8ba:	1124      	asrs	r4, r4, #4
 800b8bc:	2c00      	cmp	r4, #0
 800b8be:	f040 80b2 	bne.w	800ba26 <_dtoa_r+0x4fe>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1d3      	bne.n	800b86e <_dtoa_r+0x346>
 800b8c6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b8ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f000 80b7 	beq.w	800ba40 <_dtoa_r+0x518>
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	4b5d      	ldr	r3, [pc, #372]	@ (800ba50 <_dtoa_r+0x528>)
 800b8da:	f7f5 f8df 	bl	8000a9c <__aeabi_dcmplt>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f000 80ae 	beq.w	800ba40 <_dtoa_r+0x518>
 800b8e4:	9b07      	ldr	r3, [sp, #28]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f000 80aa 	beq.w	800ba40 <_dtoa_r+0x518>
 800b8ec:	9b08      	ldr	r3, [sp, #32]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	dd37      	ble.n	800b962 <_dtoa_r+0x43a>
 800b8f2:	1e7b      	subs	r3, r7, #1
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	9304      	str	r3, [sp, #16]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	4b55      	ldr	r3, [pc, #340]	@ (800ba54 <_dtoa_r+0x52c>)
 800b8fe:	f7f4 fe5b 	bl	80005b8 <__aeabi_dmul>
 800b902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b906:	9c08      	ldr	r4, [sp, #32]
 800b908:	3601      	adds	r6, #1
 800b90a:	4630      	mov	r0, r6
 800b90c:	f7f4 fdea 	bl	80004e4 <__aeabi_i2d>
 800b910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b914:	f7f4 fe50 	bl	80005b8 <__aeabi_dmul>
 800b918:	2200      	movs	r2, #0
 800b91a:	4b4f      	ldr	r3, [pc, #316]	@ (800ba58 <_dtoa_r+0x530>)
 800b91c:	f7f4 fc96 	bl	800024c <__adddf3>
 800b920:	4605      	mov	r5, r0
 800b922:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b926:	2c00      	cmp	r4, #0
 800b928:	f040 809a 	bne.w	800ba60 <_dtoa_r+0x538>
 800b92c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b930:	2200      	movs	r2, #0
 800b932:	4b4a      	ldr	r3, [pc, #296]	@ (800ba5c <_dtoa_r+0x534>)
 800b934:	f7f4 fc88 	bl	8000248 <__aeabi_dsub>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b940:	462a      	mov	r2, r5
 800b942:	4633      	mov	r3, r6
 800b944:	f7f5 f8c8 	bl	8000ad8 <__aeabi_dcmpgt>
 800b948:	2800      	cmp	r0, #0
 800b94a:	f040 828e 	bne.w	800be6a <_dtoa_r+0x942>
 800b94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b952:	462a      	mov	r2, r5
 800b954:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b958:	f7f5 f8a0 	bl	8000a9c <__aeabi_dcmplt>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	f040 8127 	bne.w	800bbb0 <_dtoa_r+0x688>
 800b962:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b966:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b96a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f2c0 8163 	blt.w	800bc38 <_dtoa_r+0x710>
 800b972:	2f0e      	cmp	r7, #14
 800b974:	f300 8160 	bgt.w	800bc38 <_dtoa_r+0x710>
 800b978:	4b33      	ldr	r3, [pc, #204]	@ (800ba48 <_dtoa_r+0x520>)
 800b97a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b97e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b982:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b986:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b988:	2b00      	cmp	r3, #0
 800b98a:	da03      	bge.n	800b994 <_dtoa_r+0x46c>
 800b98c:	9b07      	ldr	r3, [sp, #28]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f340 8100 	ble.w	800bb94 <_dtoa_r+0x66c>
 800b994:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b998:	4656      	mov	r6, sl
 800b99a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	f7f4 ff33 	bl	800080c <__aeabi_ddiv>
 800b9a6:	f7f5 f8b7 	bl	8000b18 <__aeabi_d2iz>
 800b9aa:	4680      	mov	r8, r0
 800b9ac:	f7f4 fd9a 	bl	80004e4 <__aeabi_i2d>
 800b9b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9b4:	f7f4 fe00 	bl	80005b8 <__aeabi_dmul>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4620      	mov	r0, r4
 800b9be:	4629      	mov	r1, r5
 800b9c0:	f7f4 fc42 	bl	8000248 <__aeabi_dsub>
 800b9c4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b9c8:	9d07      	ldr	r5, [sp, #28]
 800b9ca:	f806 4b01 	strb.w	r4, [r6], #1
 800b9ce:	eba6 040a 	sub.w	r4, r6, sl
 800b9d2:	42a5      	cmp	r5, r4
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	f040 8116 	bne.w	800bc08 <_dtoa_r+0x6e0>
 800b9dc:	f7f4 fc36 	bl	800024c <__adddf3>
 800b9e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	460d      	mov	r5, r1
 800b9e8:	f7f5 f876 	bl	8000ad8 <__aeabi_dcmpgt>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	f040 80f8 	bne.w	800bbe2 <_dtoa_r+0x6ba>
 800b9f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	f7f5 f845 	bl	8000a88 <__aeabi_dcmpeq>
 800b9fe:	b118      	cbz	r0, 800ba08 <_dtoa_r+0x4e0>
 800ba00:	f018 0f01 	tst.w	r8, #1
 800ba04:	f040 80ed 	bne.w	800bbe2 <_dtoa_r+0x6ba>
 800ba08:	4649      	mov	r1, r9
 800ba0a:	4658      	mov	r0, fp
 800ba0c:	f000 fe92 	bl	800c734 <_Bfree>
 800ba10:	2300      	movs	r3, #0
 800ba12:	7033      	strb	r3, [r6, #0]
 800ba14:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ba16:	3701      	adds	r7, #1
 800ba18:	601f      	str	r7, [r3, #0]
 800ba1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 8320 	beq.w	800c062 <_dtoa_r+0xb3a>
 800ba22:	601e      	str	r6, [r3, #0]
 800ba24:	e31d      	b.n	800c062 <_dtoa_r+0xb3a>
 800ba26:	07e2      	lsls	r2, r4, #31
 800ba28:	d505      	bpl.n	800ba36 <_dtoa_r+0x50e>
 800ba2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba2e:	f7f4 fdc3 	bl	80005b8 <__aeabi_dmul>
 800ba32:	2301      	movs	r3, #1
 800ba34:	3601      	adds	r6, #1
 800ba36:	1064      	asrs	r4, r4, #1
 800ba38:	3508      	adds	r5, #8
 800ba3a:	e73f      	b.n	800b8bc <_dtoa_r+0x394>
 800ba3c:	2602      	movs	r6, #2
 800ba3e:	e742      	b.n	800b8c6 <_dtoa_r+0x39e>
 800ba40:	9c07      	ldr	r4, [sp, #28]
 800ba42:	9704      	str	r7, [sp, #16]
 800ba44:	e761      	b.n	800b90a <_dtoa_r+0x3e2>
 800ba46:	bf00      	nop
 800ba48:	0800e130 	.word	0x0800e130
 800ba4c:	0800e108 	.word	0x0800e108
 800ba50:	3ff00000 	.word	0x3ff00000
 800ba54:	40240000 	.word	0x40240000
 800ba58:	401c0000 	.word	0x401c0000
 800ba5c:	40140000 	.word	0x40140000
 800ba60:	4b70      	ldr	r3, [pc, #448]	@ (800bc24 <_dtoa_r+0x6fc>)
 800ba62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba6c:	4454      	add	r4, sl
 800ba6e:	2900      	cmp	r1, #0
 800ba70:	d045      	beq.n	800bafe <_dtoa_r+0x5d6>
 800ba72:	2000      	movs	r0, #0
 800ba74:	496c      	ldr	r1, [pc, #432]	@ (800bc28 <_dtoa_r+0x700>)
 800ba76:	f7f4 fec9 	bl	800080c <__aeabi_ddiv>
 800ba7a:	4633      	mov	r3, r6
 800ba7c:	462a      	mov	r2, r5
 800ba7e:	f7f4 fbe3 	bl	8000248 <__aeabi_dsub>
 800ba82:	4656      	mov	r6, sl
 800ba84:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba8c:	f7f5 f844 	bl	8000b18 <__aeabi_d2iz>
 800ba90:	4605      	mov	r5, r0
 800ba92:	f7f4 fd27 	bl	80004e4 <__aeabi_i2d>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba9e:	f7f4 fbd3 	bl	8000248 <__aeabi_dsub>
 800baa2:	4602      	mov	r2, r0
 800baa4:	460b      	mov	r3, r1
 800baa6:	3530      	adds	r5, #48	@ 0x30
 800baa8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800baac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bab0:	f806 5b01 	strb.w	r5, [r6], #1
 800bab4:	f7f4 fff2 	bl	8000a9c <__aeabi_dcmplt>
 800bab8:	2800      	cmp	r0, #0
 800baba:	d163      	bne.n	800bb84 <_dtoa_r+0x65c>
 800babc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bac0:	2000      	movs	r0, #0
 800bac2:	495a      	ldr	r1, [pc, #360]	@ (800bc2c <_dtoa_r+0x704>)
 800bac4:	f7f4 fbc0 	bl	8000248 <__aeabi_dsub>
 800bac8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bacc:	f7f4 ffe6 	bl	8000a9c <__aeabi_dcmplt>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	f040 8087 	bne.w	800bbe4 <_dtoa_r+0x6bc>
 800bad6:	42a6      	cmp	r6, r4
 800bad8:	f43f af43 	beq.w	800b962 <_dtoa_r+0x43a>
 800badc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bae0:	2200      	movs	r2, #0
 800bae2:	4b53      	ldr	r3, [pc, #332]	@ (800bc30 <_dtoa_r+0x708>)
 800bae4:	f7f4 fd68 	bl	80005b8 <__aeabi_dmul>
 800bae8:	2200      	movs	r2, #0
 800baea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800baee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baf2:	4b4f      	ldr	r3, [pc, #316]	@ (800bc30 <_dtoa_r+0x708>)
 800baf4:	f7f4 fd60 	bl	80005b8 <__aeabi_dmul>
 800baf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bafc:	e7c4      	b.n	800ba88 <_dtoa_r+0x560>
 800bafe:	4631      	mov	r1, r6
 800bb00:	4628      	mov	r0, r5
 800bb02:	f7f4 fd59 	bl	80005b8 <__aeabi_dmul>
 800bb06:	4656      	mov	r6, sl
 800bb08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb0c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bb0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb12:	f7f5 f801 	bl	8000b18 <__aeabi_d2iz>
 800bb16:	4605      	mov	r5, r0
 800bb18:	f7f4 fce4 	bl	80004e4 <__aeabi_i2d>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb24:	f7f4 fb90 	bl	8000248 <__aeabi_dsub>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	3530      	adds	r5, #48	@ 0x30
 800bb2e:	f806 5b01 	strb.w	r5, [r6], #1
 800bb32:	42a6      	cmp	r6, r4
 800bb34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb38:	f04f 0200 	mov.w	r2, #0
 800bb3c:	d124      	bne.n	800bb88 <_dtoa_r+0x660>
 800bb3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bb42:	4b39      	ldr	r3, [pc, #228]	@ (800bc28 <_dtoa_r+0x700>)
 800bb44:	f7f4 fb82 	bl	800024c <__adddf3>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb50:	f7f4 ffc2 	bl	8000ad8 <__aeabi_dcmpgt>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d145      	bne.n	800bbe4 <_dtoa_r+0x6bc>
 800bb58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	4932      	ldr	r1, [pc, #200]	@ (800bc28 <_dtoa_r+0x700>)
 800bb60:	f7f4 fb72 	bl	8000248 <__aeabi_dsub>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6c:	f7f4 ff96 	bl	8000a9c <__aeabi_dcmplt>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	f43f aef6 	beq.w	800b962 <_dtoa_r+0x43a>
 800bb76:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bb78:	1e73      	subs	r3, r6, #1
 800bb7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bb80:	2b30      	cmp	r3, #48	@ 0x30
 800bb82:	d0f8      	beq.n	800bb76 <_dtoa_r+0x64e>
 800bb84:	9f04      	ldr	r7, [sp, #16]
 800bb86:	e73f      	b.n	800ba08 <_dtoa_r+0x4e0>
 800bb88:	4b29      	ldr	r3, [pc, #164]	@ (800bc30 <_dtoa_r+0x708>)
 800bb8a:	f7f4 fd15 	bl	80005b8 <__aeabi_dmul>
 800bb8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb92:	e7bc      	b.n	800bb0e <_dtoa_r+0x5e6>
 800bb94:	d10c      	bne.n	800bbb0 <_dtoa_r+0x688>
 800bb96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4b25      	ldr	r3, [pc, #148]	@ (800bc34 <_dtoa_r+0x70c>)
 800bb9e:	f7f4 fd0b 	bl	80005b8 <__aeabi_dmul>
 800bba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bba6:	f7f4 ff8d 	bl	8000ac4 <__aeabi_dcmpge>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	f000 815b 	beq.w	800be66 <_dtoa_r+0x93e>
 800bbb0:	2400      	movs	r4, #0
 800bbb2:	4625      	mov	r5, r4
 800bbb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bbb6:	4656      	mov	r6, sl
 800bbb8:	43db      	mvns	r3, r3
 800bbba:	9304      	str	r3, [sp, #16]
 800bbbc:	2700      	movs	r7, #0
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	4658      	mov	r0, fp
 800bbc2:	f000 fdb7 	bl	800c734 <_Bfree>
 800bbc6:	2d00      	cmp	r5, #0
 800bbc8:	d0dc      	beq.n	800bb84 <_dtoa_r+0x65c>
 800bbca:	b12f      	cbz	r7, 800bbd8 <_dtoa_r+0x6b0>
 800bbcc:	42af      	cmp	r7, r5
 800bbce:	d003      	beq.n	800bbd8 <_dtoa_r+0x6b0>
 800bbd0:	4639      	mov	r1, r7
 800bbd2:	4658      	mov	r0, fp
 800bbd4:	f000 fdae 	bl	800c734 <_Bfree>
 800bbd8:	4629      	mov	r1, r5
 800bbda:	4658      	mov	r0, fp
 800bbdc:	f000 fdaa 	bl	800c734 <_Bfree>
 800bbe0:	e7d0      	b.n	800bb84 <_dtoa_r+0x65c>
 800bbe2:	9704      	str	r7, [sp, #16]
 800bbe4:	4633      	mov	r3, r6
 800bbe6:	461e      	mov	r6, r3
 800bbe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbec:	2a39      	cmp	r2, #57	@ 0x39
 800bbee:	d107      	bne.n	800bc00 <_dtoa_r+0x6d8>
 800bbf0:	459a      	cmp	sl, r3
 800bbf2:	d1f8      	bne.n	800bbe6 <_dtoa_r+0x6be>
 800bbf4:	9a04      	ldr	r2, [sp, #16]
 800bbf6:	3201      	adds	r2, #1
 800bbf8:	9204      	str	r2, [sp, #16]
 800bbfa:	2230      	movs	r2, #48	@ 0x30
 800bbfc:	f88a 2000 	strb.w	r2, [sl]
 800bc00:	781a      	ldrb	r2, [r3, #0]
 800bc02:	3201      	adds	r2, #1
 800bc04:	701a      	strb	r2, [r3, #0]
 800bc06:	e7bd      	b.n	800bb84 <_dtoa_r+0x65c>
 800bc08:	2200      	movs	r2, #0
 800bc0a:	4b09      	ldr	r3, [pc, #36]	@ (800bc30 <_dtoa_r+0x708>)
 800bc0c:	f7f4 fcd4 	bl	80005b8 <__aeabi_dmul>
 800bc10:	2200      	movs	r2, #0
 800bc12:	2300      	movs	r3, #0
 800bc14:	4604      	mov	r4, r0
 800bc16:	460d      	mov	r5, r1
 800bc18:	f7f4 ff36 	bl	8000a88 <__aeabi_dcmpeq>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	f43f aebc 	beq.w	800b99a <_dtoa_r+0x472>
 800bc22:	e6f1      	b.n	800ba08 <_dtoa_r+0x4e0>
 800bc24:	0800e130 	.word	0x0800e130
 800bc28:	3fe00000 	.word	0x3fe00000
 800bc2c:	3ff00000 	.word	0x3ff00000
 800bc30:	40240000 	.word	0x40240000
 800bc34:	40140000 	.word	0x40140000
 800bc38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bc3a:	2a00      	cmp	r2, #0
 800bc3c:	f000 80db 	beq.w	800bdf6 <_dtoa_r+0x8ce>
 800bc40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bc42:	2a01      	cmp	r2, #1
 800bc44:	f300 80bf 	bgt.w	800bdc6 <_dtoa_r+0x89e>
 800bc48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bc4a:	2a00      	cmp	r2, #0
 800bc4c:	f000 80b7 	beq.w	800bdbe <_dtoa_r+0x896>
 800bc50:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bc54:	4646      	mov	r6, r8
 800bc56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	441a      	add	r2, r3
 800bc5e:	4658      	mov	r0, fp
 800bc60:	4498      	add	r8, r3
 800bc62:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc64:	f000 fe1a 	bl	800c89c <__i2b>
 800bc68:	4605      	mov	r5, r0
 800bc6a:	b15e      	cbz	r6, 800bc84 <_dtoa_r+0x75c>
 800bc6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	dd08      	ble.n	800bc84 <_dtoa_r+0x75c>
 800bc72:	42b3      	cmp	r3, r6
 800bc74:	bfa8      	it	ge
 800bc76:	4633      	movge	r3, r6
 800bc78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc7a:	eba8 0803 	sub.w	r8, r8, r3
 800bc7e:	1af6      	subs	r6, r6, r3
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc86:	b1f3      	cbz	r3, 800bcc6 <_dtoa_r+0x79e>
 800bc88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f000 80b7 	beq.w	800bdfe <_dtoa_r+0x8d6>
 800bc90:	b18c      	cbz	r4, 800bcb6 <_dtoa_r+0x78e>
 800bc92:	4629      	mov	r1, r5
 800bc94:	4622      	mov	r2, r4
 800bc96:	4658      	mov	r0, fp
 800bc98:	f000 febe 	bl	800ca18 <__pow5mult>
 800bc9c:	464a      	mov	r2, r9
 800bc9e:	4601      	mov	r1, r0
 800bca0:	4605      	mov	r5, r0
 800bca2:	4658      	mov	r0, fp
 800bca4:	f000 fe10 	bl	800c8c8 <__multiply>
 800bca8:	4649      	mov	r1, r9
 800bcaa:	9004      	str	r0, [sp, #16]
 800bcac:	4658      	mov	r0, fp
 800bcae:	f000 fd41 	bl	800c734 <_Bfree>
 800bcb2:	9b04      	ldr	r3, [sp, #16]
 800bcb4:	4699      	mov	r9, r3
 800bcb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcb8:	1b1a      	subs	r2, r3, r4
 800bcba:	d004      	beq.n	800bcc6 <_dtoa_r+0x79e>
 800bcbc:	4649      	mov	r1, r9
 800bcbe:	4658      	mov	r0, fp
 800bcc0:	f000 feaa 	bl	800ca18 <__pow5mult>
 800bcc4:	4681      	mov	r9, r0
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	4658      	mov	r0, fp
 800bcca:	f000 fde7 	bl	800c89c <__i2b>
 800bcce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 81c9 	beq.w	800c06a <_dtoa_r+0xb42>
 800bcd8:	461a      	mov	r2, r3
 800bcda:	4601      	mov	r1, r0
 800bcdc:	4658      	mov	r0, fp
 800bcde:	f000 fe9b 	bl	800ca18 <__pow5mult>
 800bce2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bce4:	4604      	mov	r4, r0
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	f300 808f 	bgt.w	800be0a <_dtoa_r+0x8e2>
 800bcec:	9b02      	ldr	r3, [sp, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f040 8087 	bne.w	800be02 <_dtoa_r+0x8da>
 800bcf4:	9b03      	ldr	r3, [sp, #12]
 800bcf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f040 8083 	bne.w	800be06 <_dtoa_r+0x8de>
 800bd00:	9b03      	ldr	r3, [sp, #12]
 800bd02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd06:	0d1b      	lsrs	r3, r3, #20
 800bd08:	051b      	lsls	r3, r3, #20
 800bd0a:	b12b      	cbz	r3, 800bd18 <_dtoa_r+0x7f0>
 800bd0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0e:	f108 0801 	add.w	r8, r8, #1
 800bd12:	3301      	adds	r3, #1
 800bd14:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd16:	2301      	movs	r3, #1
 800bd18:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f000 81aa 	beq.w	800c076 <_dtoa_r+0xb4e>
 800bd22:	6923      	ldr	r3, [r4, #16]
 800bd24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd28:	6918      	ldr	r0, [r3, #16]
 800bd2a:	f000 fd6b 	bl	800c804 <__hi0bits>
 800bd2e:	f1c0 0020 	rsb	r0, r0, #32
 800bd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd34:	4418      	add	r0, r3
 800bd36:	f010 001f 	ands.w	r0, r0, #31
 800bd3a:	d071      	beq.n	800be20 <_dtoa_r+0x8f8>
 800bd3c:	f1c0 0320 	rsb	r3, r0, #32
 800bd40:	2b04      	cmp	r3, #4
 800bd42:	dd65      	ble.n	800be10 <_dtoa_r+0x8e8>
 800bd44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd46:	f1c0 001c 	rsb	r0, r0, #28
 800bd4a:	4403      	add	r3, r0
 800bd4c:	4480      	add	r8, r0
 800bd4e:	4406      	add	r6, r0
 800bd50:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd52:	f1b8 0f00 	cmp.w	r8, #0
 800bd56:	dd05      	ble.n	800bd64 <_dtoa_r+0x83c>
 800bd58:	4649      	mov	r1, r9
 800bd5a:	4642      	mov	r2, r8
 800bd5c:	4658      	mov	r0, fp
 800bd5e:	f000 feb5 	bl	800cacc <__lshift>
 800bd62:	4681      	mov	r9, r0
 800bd64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	dd05      	ble.n	800bd76 <_dtoa_r+0x84e>
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4658      	mov	r0, fp
 800bd70:	f000 feac 	bl	800cacc <__lshift>
 800bd74:	4604      	mov	r4, r0
 800bd76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d053      	beq.n	800be24 <_dtoa_r+0x8fc>
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	4648      	mov	r0, r9
 800bd80:	f000 ff10 	bl	800cba4 <__mcmp>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	da4d      	bge.n	800be24 <_dtoa_r+0x8fc>
 800bd88:	1e7b      	subs	r3, r7, #1
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	9304      	str	r3, [sp, #16]
 800bd8e:	220a      	movs	r2, #10
 800bd90:	2300      	movs	r3, #0
 800bd92:	4658      	mov	r0, fp
 800bd94:	f000 fcf0 	bl	800c778 <__multadd>
 800bd98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd9a:	4681      	mov	r9, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f000 816c 	beq.w	800c07a <_dtoa_r+0xb52>
 800bda2:	2300      	movs	r3, #0
 800bda4:	4629      	mov	r1, r5
 800bda6:	220a      	movs	r2, #10
 800bda8:	4658      	mov	r0, fp
 800bdaa:	f000 fce5 	bl	800c778 <__multadd>
 800bdae:	9b08      	ldr	r3, [sp, #32]
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	dc61      	bgt.n	800be7a <_dtoa_r+0x952>
 800bdb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	dc3b      	bgt.n	800be34 <_dtoa_r+0x90c>
 800bdbc:	e05d      	b.n	800be7a <_dtoa_r+0x952>
 800bdbe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bdc0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bdc4:	e746      	b.n	800bc54 <_dtoa_r+0x72c>
 800bdc6:	9b07      	ldr	r3, [sp, #28]
 800bdc8:	1e5c      	subs	r4, r3, #1
 800bdca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdcc:	42a3      	cmp	r3, r4
 800bdce:	bfbf      	itttt	lt
 800bdd0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bdd2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800bdd4:	1ae3      	sublt	r3, r4, r3
 800bdd6:	18d2      	addlt	r2, r2, r3
 800bdd8:	bfa8      	it	ge
 800bdda:	1b1c      	subge	r4, r3, r4
 800bddc:	9b07      	ldr	r3, [sp, #28]
 800bdde:	bfbe      	ittt	lt
 800bde0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bde2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800bde4:	2400      	movlt	r4, #0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	bfb5      	itete	lt
 800bdea:	eba8 0603 	sublt.w	r6, r8, r3
 800bdee:	4646      	movge	r6, r8
 800bdf0:	2300      	movlt	r3, #0
 800bdf2:	9b07      	ldrge	r3, [sp, #28]
 800bdf4:	e730      	b.n	800bc58 <_dtoa_r+0x730>
 800bdf6:	4646      	mov	r6, r8
 800bdf8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bdfa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bdfc:	e735      	b.n	800bc6a <_dtoa_r+0x742>
 800bdfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be00:	e75c      	b.n	800bcbc <_dtoa_r+0x794>
 800be02:	2300      	movs	r3, #0
 800be04:	e788      	b.n	800bd18 <_dtoa_r+0x7f0>
 800be06:	9b02      	ldr	r3, [sp, #8]
 800be08:	e786      	b.n	800bd18 <_dtoa_r+0x7f0>
 800be0a:	2300      	movs	r3, #0
 800be0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800be0e:	e788      	b.n	800bd22 <_dtoa_r+0x7fa>
 800be10:	d09f      	beq.n	800bd52 <_dtoa_r+0x82a>
 800be12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be14:	331c      	adds	r3, #28
 800be16:	441a      	add	r2, r3
 800be18:	4498      	add	r8, r3
 800be1a:	441e      	add	r6, r3
 800be1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800be1e:	e798      	b.n	800bd52 <_dtoa_r+0x82a>
 800be20:	4603      	mov	r3, r0
 800be22:	e7f6      	b.n	800be12 <_dtoa_r+0x8ea>
 800be24:	9b07      	ldr	r3, [sp, #28]
 800be26:	9704      	str	r7, [sp, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	dc20      	bgt.n	800be6e <_dtoa_r+0x946>
 800be2c:	9308      	str	r3, [sp, #32]
 800be2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be30:	2b02      	cmp	r3, #2
 800be32:	dd1e      	ble.n	800be72 <_dtoa_r+0x94a>
 800be34:	9b08      	ldr	r3, [sp, #32]
 800be36:	2b00      	cmp	r3, #0
 800be38:	f47f aebc 	bne.w	800bbb4 <_dtoa_r+0x68c>
 800be3c:	4621      	mov	r1, r4
 800be3e:	2205      	movs	r2, #5
 800be40:	4658      	mov	r0, fp
 800be42:	f000 fc99 	bl	800c778 <__multadd>
 800be46:	4601      	mov	r1, r0
 800be48:	4604      	mov	r4, r0
 800be4a:	4648      	mov	r0, r9
 800be4c:	f000 feaa 	bl	800cba4 <__mcmp>
 800be50:	2800      	cmp	r0, #0
 800be52:	f77f aeaf 	ble.w	800bbb4 <_dtoa_r+0x68c>
 800be56:	2331      	movs	r3, #49	@ 0x31
 800be58:	4656      	mov	r6, sl
 800be5a:	f806 3b01 	strb.w	r3, [r6], #1
 800be5e:	9b04      	ldr	r3, [sp, #16]
 800be60:	3301      	adds	r3, #1
 800be62:	9304      	str	r3, [sp, #16]
 800be64:	e6aa      	b.n	800bbbc <_dtoa_r+0x694>
 800be66:	9c07      	ldr	r4, [sp, #28]
 800be68:	9704      	str	r7, [sp, #16]
 800be6a:	4625      	mov	r5, r4
 800be6c:	e7f3      	b.n	800be56 <_dtoa_r+0x92e>
 800be6e:	9b07      	ldr	r3, [sp, #28]
 800be70:	9308      	str	r3, [sp, #32]
 800be72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be74:	2b00      	cmp	r3, #0
 800be76:	f000 8104 	beq.w	800c082 <_dtoa_r+0xb5a>
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	dd05      	ble.n	800be8a <_dtoa_r+0x962>
 800be7e:	4629      	mov	r1, r5
 800be80:	4632      	mov	r2, r6
 800be82:	4658      	mov	r0, fp
 800be84:	f000 fe22 	bl	800cacc <__lshift>
 800be88:	4605      	mov	r5, r0
 800be8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d05a      	beq.n	800bf46 <_dtoa_r+0xa1e>
 800be90:	4658      	mov	r0, fp
 800be92:	6869      	ldr	r1, [r5, #4]
 800be94:	f000 fc0e 	bl	800c6b4 <_Balloc>
 800be98:	4606      	mov	r6, r0
 800be9a:	b928      	cbnz	r0, 800bea8 <_dtoa_r+0x980>
 800be9c:	4602      	mov	r2, r0
 800be9e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bea2:	4b83      	ldr	r3, [pc, #524]	@ (800c0b0 <_dtoa_r+0xb88>)
 800bea4:	f7ff bb54 	b.w	800b550 <_dtoa_r+0x28>
 800bea8:	692a      	ldr	r2, [r5, #16]
 800beaa:	f105 010c 	add.w	r1, r5, #12
 800beae:	3202      	adds	r2, #2
 800beb0:	0092      	lsls	r2, r2, #2
 800beb2:	300c      	adds	r0, #12
 800beb4:	f7ff faa1 	bl	800b3fa <memcpy>
 800beb8:	2201      	movs	r2, #1
 800beba:	4631      	mov	r1, r6
 800bebc:	4658      	mov	r0, fp
 800bebe:	f000 fe05 	bl	800cacc <__lshift>
 800bec2:	462f      	mov	r7, r5
 800bec4:	4605      	mov	r5, r0
 800bec6:	f10a 0301 	add.w	r3, sl, #1
 800beca:	9307      	str	r3, [sp, #28]
 800becc:	9b08      	ldr	r3, [sp, #32]
 800bece:	4453      	add	r3, sl
 800bed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bed2:	9b02      	ldr	r3, [sp, #8]
 800bed4:	f003 0301 	and.w	r3, r3, #1
 800bed8:	930a      	str	r3, [sp, #40]	@ 0x28
 800beda:	9b07      	ldr	r3, [sp, #28]
 800bedc:	4621      	mov	r1, r4
 800bede:	3b01      	subs	r3, #1
 800bee0:	4648      	mov	r0, r9
 800bee2:	9302      	str	r3, [sp, #8]
 800bee4:	f7ff fa97 	bl	800b416 <quorem>
 800bee8:	4639      	mov	r1, r7
 800beea:	9008      	str	r0, [sp, #32]
 800beec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bef0:	4648      	mov	r0, r9
 800bef2:	f000 fe57 	bl	800cba4 <__mcmp>
 800bef6:	462a      	mov	r2, r5
 800bef8:	9009      	str	r0, [sp, #36]	@ 0x24
 800befa:	4621      	mov	r1, r4
 800befc:	4658      	mov	r0, fp
 800befe:	f000 fe6d 	bl	800cbdc <__mdiff>
 800bf02:	68c2      	ldr	r2, [r0, #12]
 800bf04:	4606      	mov	r6, r0
 800bf06:	bb02      	cbnz	r2, 800bf4a <_dtoa_r+0xa22>
 800bf08:	4601      	mov	r1, r0
 800bf0a:	4648      	mov	r0, r9
 800bf0c:	f000 fe4a 	bl	800cba4 <__mcmp>
 800bf10:	4602      	mov	r2, r0
 800bf12:	4631      	mov	r1, r6
 800bf14:	4658      	mov	r0, fp
 800bf16:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf18:	f000 fc0c 	bl	800c734 <_Bfree>
 800bf1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bf20:	9e07      	ldr	r6, [sp, #28]
 800bf22:	ea43 0102 	orr.w	r1, r3, r2
 800bf26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf28:	4319      	orrs	r1, r3
 800bf2a:	d110      	bne.n	800bf4e <_dtoa_r+0xa26>
 800bf2c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf30:	d029      	beq.n	800bf86 <_dtoa_r+0xa5e>
 800bf32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	dd02      	ble.n	800bf3e <_dtoa_r+0xa16>
 800bf38:	9b08      	ldr	r3, [sp, #32]
 800bf3a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bf3e:	9b02      	ldr	r3, [sp, #8]
 800bf40:	f883 8000 	strb.w	r8, [r3]
 800bf44:	e63b      	b.n	800bbbe <_dtoa_r+0x696>
 800bf46:	4628      	mov	r0, r5
 800bf48:	e7bb      	b.n	800bec2 <_dtoa_r+0x99a>
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	e7e1      	b.n	800bf12 <_dtoa_r+0x9ea>
 800bf4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	db04      	blt.n	800bf5e <_dtoa_r+0xa36>
 800bf54:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800bf56:	430b      	orrs	r3, r1
 800bf58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf5a:	430b      	orrs	r3, r1
 800bf5c:	d120      	bne.n	800bfa0 <_dtoa_r+0xa78>
 800bf5e:	2a00      	cmp	r2, #0
 800bf60:	dded      	ble.n	800bf3e <_dtoa_r+0xa16>
 800bf62:	4649      	mov	r1, r9
 800bf64:	2201      	movs	r2, #1
 800bf66:	4658      	mov	r0, fp
 800bf68:	f000 fdb0 	bl	800cacc <__lshift>
 800bf6c:	4621      	mov	r1, r4
 800bf6e:	4681      	mov	r9, r0
 800bf70:	f000 fe18 	bl	800cba4 <__mcmp>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	dc03      	bgt.n	800bf80 <_dtoa_r+0xa58>
 800bf78:	d1e1      	bne.n	800bf3e <_dtoa_r+0xa16>
 800bf7a:	f018 0f01 	tst.w	r8, #1
 800bf7e:	d0de      	beq.n	800bf3e <_dtoa_r+0xa16>
 800bf80:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf84:	d1d8      	bne.n	800bf38 <_dtoa_r+0xa10>
 800bf86:	2339      	movs	r3, #57	@ 0x39
 800bf88:	9a02      	ldr	r2, [sp, #8]
 800bf8a:	7013      	strb	r3, [r2, #0]
 800bf8c:	4633      	mov	r3, r6
 800bf8e:	461e      	mov	r6, r3
 800bf90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	2a39      	cmp	r2, #57	@ 0x39
 800bf98:	d052      	beq.n	800c040 <_dtoa_r+0xb18>
 800bf9a:	3201      	adds	r2, #1
 800bf9c:	701a      	strb	r2, [r3, #0]
 800bf9e:	e60e      	b.n	800bbbe <_dtoa_r+0x696>
 800bfa0:	2a00      	cmp	r2, #0
 800bfa2:	dd07      	ble.n	800bfb4 <_dtoa_r+0xa8c>
 800bfa4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bfa8:	d0ed      	beq.n	800bf86 <_dtoa_r+0xa5e>
 800bfaa:	9a02      	ldr	r2, [sp, #8]
 800bfac:	f108 0301 	add.w	r3, r8, #1
 800bfb0:	7013      	strb	r3, [r2, #0]
 800bfb2:	e604      	b.n	800bbbe <_dtoa_r+0x696>
 800bfb4:	9b07      	ldr	r3, [sp, #28]
 800bfb6:	9a07      	ldr	r2, [sp, #28]
 800bfb8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bfbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d028      	beq.n	800c014 <_dtoa_r+0xaec>
 800bfc2:	4649      	mov	r1, r9
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	220a      	movs	r2, #10
 800bfc8:	4658      	mov	r0, fp
 800bfca:	f000 fbd5 	bl	800c778 <__multadd>
 800bfce:	42af      	cmp	r7, r5
 800bfd0:	4681      	mov	r9, r0
 800bfd2:	f04f 0300 	mov.w	r3, #0
 800bfd6:	f04f 020a 	mov.w	r2, #10
 800bfda:	4639      	mov	r1, r7
 800bfdc:	4658      	mov	r0, fp
 800bfde:	d107      	bne.n	800bff0 <_dtoa_r+0xac8>
 800bfe0:	f000 fbca 	bl	800c778 <__multadd>
 800bfe4:	4607      	mov	r7, r0
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	9b07      	ldr	r3, [sp, #28]
 800bfea:	3301      	adds	r3, #1
 800bfec:	9307      	str	r3, [sp, #28]
 800bfee:	e774      	b.n	800beda <_dtoa_r+0x9b2>
 800bff0:	f000 fbc2 	bl	800c778 <__multadd>
 800bff4:	4629      	mov	r1, r5
 800bff6:	4607      	mov	r7, r0
 800bff8:	2300      	movs	r3, #0
 800bffa:	220a      	movs	r2, #10
 800bffc:	4658      	mov	r0, fp
 800bffe:	f000 fbbb 	bl	800c778 <__multadd>
 800c002:	4605      	mov	r5, r0
 800c004:	e7f0      	b.n	800bfe8 <_dtoa_r+0xac0>
 800c006:	9b08      	ldr	r3, [sp, #32]
 800c008:	2700      	movs	r7, #0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	bfcc      	ite	gt
 800c00e:	461e      	movgt	r6, r3
 800c010:	2601      	movle	r6, #1
 800c012:	4456      	add	r6, sl
 800c014:	4649      	mov	r1, r9
 800c016:	2201      	movs	r2, #1
 800c018:	4658      	mov	r0, fp
 800c01a:	f000 fd57 	bl	800cacc <__lshift>
 800c01e:	4621      	mov	r1, r4
 800c020:	4681      	mov	r9, r0
 800c022:	f000 fdbf 	bl	800cba4 <__mcmp>
 800c026:	2800      	cmp	r0, #0
 800c028:	dcb0      	bgt.n	800bf8c <_dtoa_r+0xa64>
 800c02a:	d102      	bne.n	800c032 <_dtoa_r+0xb0a>
 800c02c:	f018 0f01 	tst.w	r8, #1
 800c030:	d1ac      	bne.n	800bf8c <_dtoa_r+0xa64>
 800c032:	4633      	mov	r3, r6
 800c034:	461e      	mov	r6, r3
 800c036:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c03a:	2a30      	cmp	r2, #48	@ 0x30
 800c03c:	d0fa      	beq.n	800c034 <_dtoa_r+0xb0c>
 800c03e:	e5be      	b.n	800bbbe <_dtoa_r+0x696>
 800c040:	459a      	cmp	sl, r3
 800c042:	d1a4      	bne.n	800bf8e <_dtoa_r+0xa66>
 800c044:	9b04      	ldr	r3, [sp, #16]
 800c046:	3301      	adds	r3, #1
 800c048:	9304      	str	r3, [sp, #16]
 800c04a:	2331      	movs	r3, #49	@ 0x31
 800c04c:	f88a 3000 	strb.w	r3, [sl]
 800c050:	e5b5      	b.n	800bbbe <_dtoa_r+0x696>
 800c052:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c054:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c0b4 <_dtoa_r+0xb8c>
 800c058:	b11b      	cbz	r3, 800c062 <_dtoa_r+0xb3a>
 800c05a:	f10a 0308 	add.w	r3, sl, #8
 800c05e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c060:	6013      	str	r3, [r2, #0]
 800c062:	4650      	mov	r0, sl
 800c064:	b017      	add	sp, #92	@ 0x5c
 800c066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	f77f ae3d 	ble.w	800bcec <_dtoa_r+0x7c4>
 800c072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c074:	930a      	str	r3, [sp, #40]	@ 0x28
 800c076:	2001      	movs	r0, #1
 800c078:	e65b      	b.n	800bd32 <_dtoa_r+0x80a>
 800c07a:	9b08      	ldr	r3, [sp, #32]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f77f aed6 	ble.w	800be2e <_dtoa_r+0x906>
 800c082:	4656      	mov	r6, sl
 800c084:	4621      	mov	r1, r4
 800c086:	4648      	mov	r0, r9
 800c088:	f7ff f9c5 	bl	800b416 <quorem>
 800c08c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c090:	9b08      	ldr	r3, [sp, #32]
 800c092:	f806 8b01 	strb.w	r8, [r6], #1
 800c096:	eba6 020a 	sub.w	r2, r6, sl
 800c09a:	4293      	cmp	r3, r2
 800c09c:	ddb3      	ble.n	800c006 <_dtoa_r+0xade>
 800c09e:	4649      	mov	r1, r9
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	220a      	movs	r2, #10
 800c0a4:	4658      	mov	r0, fp
 800c0a6:	f000 fb67 	bl	800c778 <__multadd>
 800c0aa:	4681      	mov	r9, r0
 800c0ac:	e7ea      	b.n	800c084 <_dtoa_r+0xb5c>
 800c0ae:	bf00      	nop
 800c0b0:	0800e07e 	.word	0x0800e07e
 800c0b4:	0800e002 	.word	0x0800e002

0800c0b8 <_free_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	d040      	beq.n	800c142 <_free_r+0x8a>
 800c0c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0c4:	1f0c      	subs	r4, r1, #4
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	bfb8      	it	lt
 800c0ca:	18e4      	addlt	r4, r4, r3
 800c0cc:	f000 fae6 	bl	800c69c <__malloc_lock>
 800c0d0:	4a1c      	ldr	r2, [pc, #112]	@ (800c144 <_free_r+0x8c>)
 800c0d2:	6813      	ldr	r3, [r2, #0]
 800c0d4:	b933      	cbnz	r3, 800c0e4 <_free_r+0x2c>
 800c0d6:	6063      	str	r3, [r4, #4]
 800c0d8:	6014      	str	r4, [r2, #0]
 800c0da:	4628      	mov	r0, r5
 800c0dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0e0:	f000 bae2 	b.w	800c6a8 <__malloc_unlock>
 800c0e4:	42a3      	cmp	r3, r4
 800c0e6:	d908      	bls.n	800c0fa <_free_r+0x42>
 800c0e8:	6820      	ldr	r0, [r4, #0]
 800c0ea:	1821      	adds	r1, r4, r0
 800c0ec:	428b      	cmp	r3, r1
 800c0ee:	bf01      	itttt	eq
 800c0f0:	6819      	ldreq	r1, [r3, #0]
 800c0f2:	685b      	ldreq	r3, [r3, #4]
 800c0f4:	1809      	addeq	r1, r1, r0
 800c0f6:	6021      	streq	r1, [r4, #0]
 800c0f8:	e7ed      	b.n	800c0d6 <_free_r+0x1e>
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	b10b      	cbz	r3, 800c104 <_free_r+0x4c>
 800c100:	42a3      	cmp	r3, r4
 800c102:	d9fa      	bls.n	800c0fa <_free_r+0x42>
 800c104:	6811      	ldr	r1, [r2, #0]
 800c106:	1850      	adds	r0, r2, r1
 800c108:	42a0      	cmp	r0, r4
 800c10a:	d10b      	bne.n	800c124 <_free_r+0x6c>
 800c10c:	6820      	ldr	r0, [r4, #0]
 800c10e:	4401      	add	r1, r0
 800c110:	1850      	adds	r0, r2, r1
 800c112:	4283      	cmp	r3, r0
 800c114:	6011      	str	r1, [r2, #0]
 800c116:	d1e0      	bne.n	800c0da <_free_r+0x22>
 800c118:	6818      	ldr	r0, [r3, #0]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	4408      	add	r0, r1
 800c11e:	6010      	str	r0, [r2, #0]
 800c120:	6053      	str	r3, [r2, #4]
 800c122:	e7da      	b.n	800c0da <_free_r+0x22>
 800c124:	d902      	bls.n	800c12c <_free_r+0x74>
 800c126:	230c      	movs	r3, #12
 800c128:	602b      	str	r3, [r5, #0]
 800c12a:	e7d6      	b.n	800c0da <_free_r+0x22>
 800c12c:	6820      	ldr	r0, [r4, #0]
 800c12e:	1821      	adds	r1, r4, r0
 800c130:	428b      	cmp	r3, r1
 800c132:	bf01      	itttt	eq
 800c134:	6819      	ldreq	r1, [r3, #0]
 800c136:	685b      	ldreq	r3, [r3, #4]
 800c138:	1809      	addeq	r1, r1, r0
 800c13a:	6021      	streq	r1, [r4, #0]
 800c13c:	6063      	str	r3, [r4, #4]
 800c13e:	6054      	str	r4, [r2, #4]
 800c140:	e7cb      	b.n	800c0da <_free_r+0x22>
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	20001660 	.word	0x20001660

0800c148 <__ssputs_r>:
 800c148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c14c:	461f      	mov	r7, r3
 800c14e:	688e      	ldr	r6, [r1, #8]
 800c150:	4682      	mov	sl, r0
 800c152:	42be      	cmp	r6, r7
 800c154:	460c      	mov	r4, r1
 800c156:	4690      	mov	r8, r2
 800c158:	680b      	ldr	r3, [r1, #0]
 800c15a:	d82d      	bhi.n	800c1b8 <__ssputs_r+0x70>
 800c15c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c160:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c164:	d026      	beq.n	800c1b4 <__ssputs_r+0x6c>
 800c166:	6965      	ldr	r5, [r4, #20]
 800c168:	6909      	ldr	r1, [r1, #16]
 800c16a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c16e:	eba3 0901 	sub.w	r9, r3, r1
 800c172:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c176:	1c7b      	adds	r3, r7, #1
 800c178:	444b      	add	r3, r9
 800c17a:	106d      	asrs	r5, r5, #1
 800c17c:	429d      	cmp	r5, r3
 800c17e:	bf38      	it	cc
 800c180:	461d      	movcc	r5, r3
 800c182:	0553      	lsls	r3, r2, #21
 800c184:	d527      	bpl.n	800c1d6 <__ssputs_r+0x8e>
 800c186:	4629      	mov	r1, r5
 800c188:	f000 f960 	bl	800c44c <_malloc_r>
 800c18c:	4606      	mov	r6, r0
 800c18e:	b360      	cbz	r0, 800c1ea <__ssputs_r+0xa2>
 800c190:	464a      	mov	r2, r9
 800c192:	6921      	ldr	r1, [r4, #16]
 800c194:	f7ff f931 	bl	800b3fa <memcpy>
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c19e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1a2:	81a3      	strh	r3, [r4, #12]
 800c1a4:	6126      	str	r6, [r4, #16]
 800c1a6:	444e      	add	r6, r9
 800c1a8:	6026      	str	r6, [r4, #0]
 800c1aa:	463e      	mov	r6, r7
 800c1ac:	6165      	str	r5, [r4, #20]
 800c1ae:	eba5 0509 	sub.w	r5, r5, r9
 800c1b2:	60a5      	str	r5, [r4, #8]
 800c1b4:	42be      	cmp	r6, r7
 800c1b6:	d900      	bls.n	800c1ba <__ssputs_r+0x72>
 800c1b8:	463e      	mov	r6, r7
 800c1ba:	4632      	mov	r2, r6
 800c1bc:	4641      	mov	r1, r8
 800c1be:	6820      	ldr	r0, [r4, #0]
 800c1c0:	f000 fe69 	bl	800ce96 <memmove>
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	68a3      	ldr	r3, [r4, #8]
 800c1c8:	1b9b      	subs	r3, r3, r6
 800c1ca:	60a3      	str	r3, [r4, #8]
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	4433      	add	r3, r6
 800c1d0:	6023      	str	r3, [r4, #0]
 800c1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d6:	462a      	mov	r2, r5
 800c1d8:	f000 fe2f 	bl	800ce3a <_realloc_r>
 800c1dc:	4606      	mov	r6, r0
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d1e0      	bne.n	800c1a4 <__ssputs_r+0x5c>
 800c1e2:	4650      	mov	r0, sl
 800c1e4:	6921      	ldr	r1, [r4, #16]
 800c1e6:	f7ff ff67 	bl	800c0b8 <_free_r>
 800c1ea:	230c      	movs	r3, #12
 800c1ec:	f8ca 3000 	str.w	r3, [sl]
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1fa:	81a3      	strh	r3, [r4, #12]
 800c1fc:	e7e9      	b.n	800c1d2 <__ssputs_r+0x8a>
	...

0800c200 <_svfiprintf_r>:
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	4698      	mov	r8, r3
 800c206:	898b      	ldrh	r3, [r1, #12]
 800c208:	4607      	mov	r7, r0
 800c20a:	061b      	lsls	r3, r3, #24
 800c20c:	460d      	mov	r5, r1
 800c20e:	4614      	mov	r4, r2
 800c210:	b09d      	sub	sp, #116	@ 0x74
 800c212:	d510      	bpl.n	800c236 <_svfiprintf_r+0x36>
 800c214:	690b      	ldr	r3, [r1, #16]
 800c216:	b973      	cbnz	r3, 800c236 <_svfiprintf_r+0x36>
 800c218:	2140      	movs	r1, #64	@ 0x40
 800c21a:	f000 f917 	bl	800c44c <_malloc_r>
 800c21e:	6028      	str	r0, [r5, #0]
 800c220:	6128      	str	r0, [r5, #16]
 800c222:	b930      	cbnz	r0, 800c232 <_svfiprintf_r+0x32>
 800c224:	230c      	movs	r3, #12
 800c226:	603b      	str	r3, [r7, #0]
 800c228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c22c:	b01d      	add	sp, #116	@ 0x74
 800c22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c232:	2340      	movs	r3, #64	@ 0x40
 800c234:	616b      	str	r3, [r5, #20]
 800c236:	2300      	movs	r3, #0
 800c238:	9309      	str	r3, [sp, #36]	@ 0x24
 800c23a:	2320      	movs	r3, #32
 800c23c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c240:	2330      	movs	r3, #48	@ 0x30
 800c242:	f04f 0901 	mov.w	r9, #1
 800c246:	f8cd 800c 	str.w	r8, [sp, #12]
 800c24a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c3e4 <_svfiprintf_r+0x1e4>
 800c24e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c252:	4623      	mov	r3, r4
 800c254:	469a      	mov	sl, r3
 800c256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c25a:	b10a      	cbz	r2, 800c260 <_svfiprintf_r+0x60>
 800c25c:	2a25      	cmp	r2, #37	@ 0x25
 800c25e:	d1f9      	bne.n	800c254 <_svfiprintf_r+0x54>
 800c260:	ebba 0b04 	subs.w	fp, sl, r4
 800c264:	d00b      	beq.n	800c27e <_svfiprintf_r+0x7e>
 800c266:	465b      	mov	r3, fp
 800c268:	4622      	mov	r2, r4
 800c26a:	4629      	mov	r1, r5
 800c26c:	4638      	mov	r0, r7
 800c26e:	f7ff ff6b 	bl	800c148 <__ssputs_r>
 800c272:	3001      	adds	r0, #1
 800c274:	f000 80a7 	beq.w	800c3c6 <_svfiprintf_r+0x1c6>
 800c278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c27a:	445a      	add	r2, fp
 800c27c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c27e:	f89a 3000 	ldrb.w	r3, [sl]
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 809f 	beq.w	800c3c6 <_svfiprintf_r+0x1c6>
 800c288:	2300      	movs	r3, #0
 800c28a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c28e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c292:	f10a 0a01 	add.w	sl, sl, #1
 800c296:	9304      	str	r3, [sp, #16]
 800c298:	9307      	str	r3, [sp, #28]
 800c29a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c29e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2a0:	4654      	mov	r4, sl
 800c2a2:	2205      	movs	r2, #5
 800c2a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a8:	484e      	ldr	r0, [pc, #312]	@ (800c3e4 <_svfiprintf_r+0x1e4>)
 800c2aa:	f7ff f898 	bl	800b3de <memchr>
 800c2ae:	9a04      	ldr	r2, [sp, #16]
 800c2b0:	b9d8      	cbnz	r0, 800c2ea <_svfiprintf_r+0xea>
 800c2b2:	06d0      	lsls	r0, r2, #27
 800c2b4:	bf44      	itt	mi
 800c2b6:	2320      	movmi	r3, #32
 800c2b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2bc:	0711      	lsls	r1, r2, #28
 800c2be:	bf44      	itt	mi
 800c2c0:	232b      	movmi	r3, #43	@ 0x2b
 800c2c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2c6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2cc:	d015      	beq.n	800c2fa <_svfiprintf_r+0xfa>
 800c2ce:	4654      	mov	r4, sl
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	f04f 0c0a 	mov.w	ip, #10
 800c2d6:	9a07      	ldr	r2, [sp, #28]
 800c2d8:	4621      	mov	r1, r4
 800c2da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2de:	3b30      	subs	r3, #48	@ 0x30
 800c2e0:	2b09      	cmp	r3, #9
 800c2e2:	d94b      	bls.n	800c37c <_svfiprintf_r+0x17c>
 800c2e4:	b1b0      	cbz	r0, 800c314 <_svfiprintf_r+0x114>
 800c2e6:	9207      	str	r2, [sp, #28]
 800c2e8:	e014      	b.n	800c314 <_svfiprintf_r+0x114>
 800c2ea:	eba0 0308 	sub.w	r3, r0, r8
 800c2ee:	fa09 f303 	lsl.w	r3, r9, r3
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	46a2      	mov	sl, r4
 800c2f6:	9304      	str	r3, [sp, #16]
 800c2f8:	e7d2      	b.n	800c2a0 <_svfiprintf_r+0xa0>
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	1d19      	adds	r1, r3, #4
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	9103      	str	r1, [sp, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	bfbb      	ittet	lt
 800c306:	425b      	neglt	r3, r3
 800c308:	f042 0202 	orrlt.w	r2, r2, #2
 800c30c:	9307      	strge	r3, [sp, #28]
 800c30e:	9307      	strlt	r3, [sp, #28]
 800c310:	bfb8      	it	lt
 800c312:	9204      	strlt	r2, [sp, #16]
 800c314:	7823      	ldrb	r3, [r4, #0]
 800c316:	2b2e      	cmp	r3, #46	@ 0x2e
 800c318:	d10a      	bne.n	800c330 <_svfiprintf_r+0x130>
 800c31a:	7863      	ldrb	r3, [r4, #1]
 800c31c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c31e:	d132      	bne.n	800c386 <_svfiprintf_r+0x186>
 800c320:	9b03      	ldr	r3, [sp, #12]
 800c322:	3402      	adds	r4, #2
 800c324:	1d1a      	adds	r2, r3, #4
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	9203      	str	r2, [sp, #12]
 800c32a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c32e:	9305      	str	r3, [sp, #20]
 800c330:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c3e8 <_svfiprintf_r+0x1e8>
 800c334:	2203      	movs	r2, #3
 800c336:	4650      	mov	r0, sl
 800c338:	7821      	ldrb	r1, [r4, #0]
 800c33a:	f7ff f850 	bl	800b3de <memchr>
 800c33e:	b138      	cbz	r0, 800c350 <_svfiprintf_r+0x150>
 800c340:	2240      	movs	r2, #64	@ 0x40
 800c342:	9b04      	ldr	r3, [sp, #16]
 800c344:	eba0 000a 	sub.w	r0, r0, sl
 800c348:	4082      	lsls	r2, r0
 800c34a:	4313      	orrs	r3, r2
 800c34c:	3401      	adds	r4, #1
 800c34e:	9304      	str	r3, [sp, #16]
 800c350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c354:	2206      	movs	r2, #6
 800c356:	4825      	ldr	r0, [pc, #148]	@ (800c3ec <_svfiprintf_r+0x1ec>)
 800c358:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c35c:	f7ff f83f 	bl	800b3de <memchr>
 800c360:	2800      	cmp	r0, #0
 800c362:	d036      	beq.n	800c3d2 <_svfiprintf_r+0x1d2>
 800c364:	4b22      	ldr	r3, [pc, #136]	@ (800c3f0 <_svfiprintf_r+0x1f0>)
 800c366:	bb1b      	cbnz	r3, 800c3b0 <_svfiprintf_r+0x1b0>
 800c368:	9b03      	ldr	r3, [sp, #12]
 800c36a:	3307      	adds	r3, #7
 800c36c:	f023 0307 	bic.w	r3, r3, #7
 800c370:	3308      	adds	r3, #8
 800c372:	9303      	str	r3, [sp, #12]
 800c374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c376:	4433      	add	r3, r6
 800c378:	9309      	str	r3, [sp, #36]	@ 0x24
 800c37a:	e76a      	b.n	800c252 <_svfiprintf_r+0x52>
 800c37c:	460c      	mov	r4, r1
 800c37e:	2001      	movs	r0, #1
 800c380:	fb0c 3202 	mla	r2, ip, r2, r3
 800c384:	e7a8      	b.n	800c2d8 <_svfiprintf_r+0xd8>
 800c386:	2300      	movs	r3, #0
 800c388:	f04f 0c0a 	mov.w	ip, #10
 800c38c:	4619      	mov	r1, r3
 800c38e:	3401      	adds	r4, #1
 800c390:	9305      	str	r3, [sp, #20]
 800c392:	4620      	mov	r0, r4
 800c394:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c398:	3a30      	subs	r2, #48	@ 0x30
 800c39a:	2a09      	cmp	r2, #9
 800c39c:	d903      	bls.n	800c3a6 <_svfiprintf_r+0x1a6>
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d0c6      	beq.n	800c330 <_svfiprintf_r+0x130>
 800c3a2:	9105      	str	r1, [sp, #20]
 800c3a4:	e7c4      	b.n	800c330 <_svfiprintf_r+0x130>
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3ae:	e7f0      	b.n	800c392 <_svfiprintf_r+0x192>
 800c3b0:	ab03      	add	r3, sp, #12
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	462a      	mov	r2, r5
 800c3b6:	4638      	mov	r0, r7
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c3f4 <_svfiprintf_r+0x1f4>)
 800c3ba:	a904      	add	r1, sp, #16
 800c3bc:	f7fe faac 	bl	800a918 <_printf_float>
 800c3c0:	1c42      	adds	r2, r0, #1
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	d1d6      	bne.n	800c374 <_svfiprintf_r+0x174>
 800c3c6:	89ab      	ldrh	r3, [r5, #12]
 800c3c8:	065b      	lsls	r3, r3, #25
 800c3ca:	f53f af2d 	bmi.w	800c228 <_svfiprintf_r+0x28>
 800c3ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3d0:	e72c      	b.n	800c22c <_svfiprintf_r+0x2c>
 800c3d2:	ab03      	add	r3, sp, #12
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	462a      	mov	r2, r5
 800c3d8:	4638      	mov	r0, r7
 800c3da:	4b06      	ldr	r3, [pc, #24]	@ (800c3f4 <_svfiprintf_r+0x1f4>)
 800c3dc:	a904      	add	r1, sp, #16
 800c3de:	f7fe fd39 	bl	800ae54 <_printf_i>
 800c3e2:	e7ed      	b.n	800c3c0 <_svfiprintf_r+0x1c0>
 800c3e4:	0800e08f 	.word	0x0800e08f
 800c3e8:	0800e095 	.word	0x0800e095
 800c3ec:	0800e099 	.word	0x0800e099
 800c3f0:	0800a919 	.word	0x0800a919
 800c3f4:	0800c149 	.word	0x0800c149

0800c3f8 <malloc>:
 800c3f8:	4b02      	ldr	r3, [pc, #8]	@ (800c404 <malloc+0xc>)
 800c3fa:	4601      	mov	r1, r0
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	f000 b825 	b.w	800c44c <_malloc_r>
 800c402:	bf00      	nop
 800c404:	2000003c 	.word	0x2000003c

0800c408 <sbrk_aligned>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	4e0f      	ldr	r6, [pc, #60]	@ (800c448 <sbrk_aligned+0x40>)
 800c40c:	460c      	mov	r4, r1
 800c40e:	6831      	ldr	r1, [r6, #0]
 800c410:	4605      	mov	r5, r0
 800c412:	b911      	cbnz	r1, 800c41a <sbrk_aligned+0x12>
 800c414:	f000 fd8e 	bl	800cf34 <_sbrk_r>
 800c418:	6030      	str	r0, [r6, #0]
 800c41a:	4621      	mov	r1, r4
 800c41c:	4628      	mov	r0, r5
 800c41e:	f000 fd89 	bl	800cf34 <_sbrk_r>
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	d103      	bne.n	800c42e <sbrk_aligned+0x26>
 800c426:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c42a:	4620      	mov	r0, r4
 800c42c:	bd70      	pop	{r4, r5, r6, pc}
 800c42e:	1cc4      	adds	r4, r0, #3
 800c430:	f024 0403 	bic.w	r4, r4, #3
 800c434:	42a0      	cmp	r0, r4
 800c436:	d0f8      	beq.n	800c42a <sbrk_aligned+0x22>
 800c438:	1a21      	subs	r1, r4, r0
 800c43a:	4628      	mov	r0, r5
 800c43c:	f000 fd7a 	bl	800cf34 <_sbrk_r>
 800c440:	3001      	adds	r0, #1
 800c442:	d1f2      	bne.n	800c42a <sbrk_aligned+0x22>
 800c444:	e7ef      	b.n	800c426 <sbrk_aligned+0x1e>
 800c446:	bf00      	nop
 800c448:	2000165c 	.word	0x2000165c

0800c44c <_malloc_r>:
 800c44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c450:	1ccd      	adds	r5, r1, #3
 800c452:	f025 0503 	bic.w	r5, r5, #3
 800c456:	3508      	adds	r5, #8
 800c458:	2d0c      	cmp	r5, #12
 800c45a:	bf38      	it	cc
 800c45c:	250c      	movcc	r5, #12
 800c45e:	2d00      	cmp	r5, #0
 800c460:	4606      	mov	r6, r0
 800c462:	db01      	blt.n	800c468 <_malloc_r+0x1c>
 800c464:	42a9      	cmp	r1, r5
 800c466:	d904      	bls.n	800c472 <_malloc_r+0x26>
 800c468:	230c      	movs	r3, #12
 800c46a:	6033      	str	r3, [r6, #0]
 800c46c:	2000      	movs	r0, #0
 800c46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c548 <_malloc_r+0xfc>
 800c476:	f000 f911 	bl	800c69c <__malloc_lock>
 800c47a:	f8d8 3000 	ldr.w	r3, [r8]
 800c47e:	461c      	mov	r4, r3
 800c480:	bb44      	cbnz	r4, 800c4d4 <_malloc_r+0x88>
 800c482:	4629      	mov	r1, r5
 800c484:	4630      	mov	r0, r6
 800c486:	f7ff ffbf 	bl	800c408 <sbrk_aligned>
 800c48a:	1c43      	adds	r3, r0, #1
 800c48c:	4604      	mov	r4, r0
 800c48e:	d158      	bne.n	800c542 <_malloc_r+0xf6>
 800c490:	f8d8 4000 	ldr.w	r4, [r8]
 800c494:	4627      	mov	r7, r4
 800c496:	2f00      	cmp	r7, #0
 800c498:	d143      	bne.n	800c522 <_malloc_r+0xd6>
 800c49a:	2c00      	cmp	r4, #0
 800c49c:	d04b      	beq.n	800c536 <_malloc_r+0xea>
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	4639      	mov	r1, r7
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	eb04 0903 	add.w	r9, r4, r3
 800c4a8:	f000 fd44 	bl	800cf34 <_sbrk_r>
 800c4ac:	4581      	cmp	r9, r0
 800c4ae:	d142      	bne.n	800c536 <_malloc_r+0xea>
 800c4b0:	6821      	ldr	r1, [r4, #0]
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	1a6d      	subs	r5, r5, r1
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	f7ff ffa6 	bl	800c408 <sbrk_aligned>
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d03a      	beq.n	800c536 <_malloc_r+0xea>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	442b      	add	r3, r5
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	bb62      	cbnz	r2, 800c528 <_malloc_r+0xdc>
 800c4ce:	f8c8 7000 	str.w	r7, [r8]
 800c4d2:	e00f      	b.n	800c4f4 <_malloc_r+0xa8>
 800c4d4:	6822      	ldr	r2, [r4, #0]
 800c4d6:	1b52      	subs	r2, r2, r5
 800c4d8:	d420      	bmi.n	800c51c <_malloc_r+0xd0>
 800c4da:	2a0b      	cmp	r2, #11
 800c4dc:	d917      	bls.n	800c50e <_malloc_r+0xc2>
 800c4de:	1961      	adds	r1, r4, r5
 800c4e0:	42a3      	cmp	r3, r4
 800c4e2:	6025      	str	r5, [r4, #0]
 800c4e4:	bf18      	it	ne
 800c4e6:	6059      	strne	r1, [r3, #4]
 800c4e8:	6863      	ldr	r3, [r4, #4]
 800c4ea:	bf08      	it	eq
 800c4ec:	f8c8 1000 	streq.w	r1, [r8]
 800c4f0:	5162      	str	r2, [r4, r5]
 800c4f2:	604b      	str	r3, [r1, #4]
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f000 f8d7 	bl	800c6a8 <__malloc_unlock>
 800c4fa:	f104 000b 	add.w	r0, r4, #11
 800c4fe:	1d23      	adds	r3, r4, #4
 800c500:	f020 0007 	bic.w	r0, r0, #7
 800c504:	1ac2      	subs	r2, r0, r3
 800c506:	bf1c      	itt	ne
 800c508:	1a1b      	subne	r3, r3, r0
 800c50a:	50a3      	strne	r3, [r4, r2]
 800c50c:	e7af      	b.n	800c46e <_malloc_r+0x22>
 800c50e:	6862      	ldr	r2, [r4, #4]
 800c510:	42a3      	cmp	r3, r4
 800c512:	bf0c      	ite	eq
 800c514:	f8c8 2000 	streq.w	r2, [r8]
 800c518:	605a      	strne	r2, [r3, #4]
 800c51a:	e7eb      	b.n	800c4f4 <_malloc_r+0xa8>
 800c51c:	4623      	mov	r3, r4
 800c51e:	6864      	ldr	r4, [r4, #4]
 800c520:	e7ae      	b.n	800c480 <_malloc_r+0x34>
 800c522:	463c      	mov	r4, r7
 800c524:	687f      	ldr	r7, [r7, #4]
 800c526:	e7b6      	b.n	800c496 <_malloc_r+0x4a>
 800c528:	461a      	mov	r2, r3
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	d1fb      	bne.n	800c528 <_malloc_r+0xdc>
 800c530:	2300      	movs	r3, #0
 800c532:	6053      	str	r3, [r2, #4]
 800c534:	e7de      	b.n	800c4f4 <_malloc_r+0xa8>
 800c536:	230c      	movs	r3, #12
 800c538:	4630      	mov	r0, r6
 800c53a:	6033      	str	r3, [r6, #0]
 800c53c:	f000 f8b4 	bl	800c6a8 <__malloc_unlock>
 800c540:	e794      	b.n	800c46c <_malloc_r+0x20>
 800c542:	6005      	str	r5, [r0, #0]
 800c544:	e7d6      	b.n	800c4f4 <_malloc_r+0xa8>
 800c546:	bf00      	nop
 800c548:	20001660 	.word	0x20001660

0800c54c <__sflush_r>:
 800c54c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c552:	0716      	lsls	r6, r2, #28
 800c554:	4605      	mov	r5, r0
 800c556:	460c      	mov	r4, r1
 800c558:	d454      	bmi.n	800c604 <__sflush_r+0xb8>
 800c55a:	684b      	ldr	r3, [r1, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	dc02      	bgt.n	800c566 <__sflush_r+0x1a>
 800c560:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c562:	2b00      	cmp	r3, #0
 800c564:	dd48      	ble.n	800c5f8 <__sflush_r+0xac>
 800c566:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c568:	2e00      	cmp	r6, #0
 800c56a:	d045      	beq.n	800c5f8 <__sflush_r+0xac>
 800c56c:	2300      	movs	r3, #0
 800c56e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c572:	682f      	ldr	r7, [r5, #0]
 800c574:	6a21      	ldr	r1, [r4, #32]
 800c576:	602b      	str	r3, [r5, #0]
 800c578:	d030      	beq.n	800c5dc <__sflush_r+0x90>
 800c57a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c57c:	89a3      	ldrh	r3, [r4, #12]
 800c57e:	0759      	lsls	r1, r3, #29
 800c580:	d505      	bpl.n	800c58e <__sflush_r+0x42>
 800c582:	6863      	ldr	r3, [r4, #4]
 800c584:	1ad2      	subs	r2, r2, r3
 800c586:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c588:	b10b      	cbz	r3, 800c58e <__sflush_r+0x42>
 800c58a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c58c:	1ad2      	subs	r2, r2, r3
 800c58e:	2300      	movs	r3, #0
 800c590:	4628      	mov	r0, r5
 800c592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c594:	6a21      	ldr	r1, [r4, #32]
 800c596:	47b0      	blx	r6
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	d106      	bne.n	800c5ac <__sflush_r+0x60>
 800c59e:	6829      	ldr	r1, [r5, #0]
 800c5a0:	291d      	cmp	r1, #29
 800c5a2:	d82b      	bhi.n	800c5fc <__sflush_r+0xb0>
 800c5a4:	4a28      	ldr	r2, [pc, #160]	@ (800c648 <__sflush_r+0xfc>)
 800c5a6:	410a      	asrs	r2, r1
 800c5a8:	07d6      	lsls	r6, r2, #31
 800c5aa:	d427      	bmi.n	800c5fc <__sflush_r+0xb0>
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	6062      	str	r2, [r4, #4]
 800c5b0:	6922      	ldr	r2, [r4, #16]
 800c5b2:	04d9      	lsls	r1, r3, #19
 800c5b4:	6022      	str	r2, [r4, #0]
 800c5b6:	d504      	bpl.n	800c5c2 <__sflush_r+0x76>
 800c5b8:	1c42      	adds	r2, r0, #1
 800c5ba:	d101      	bne.n	800c5c0 <__sflush_r+0x74>
 800c5bc:	682b      	ldr	r3, [r5, #0]
 800c5be:	b903      	cbnz	r3, 800c5c2 <__sflush_r+0x76>
 800c5c0:	6560      	str	r0, [r4, #84]	@ 0x54
 800c5c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5c4:	602f      	str	r7, [r5, #0]
 800c5c6:	b1b9      	cbz	r1, 800c5f8 <__sflush_r+0xac>
 800c5c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5cc:	4299      	cmp	r1, r3
 800c5ce:	d002      	beq.n	800c5d6 <__sflush_r+0x8a>
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	f7ff fd71 	bl	800c0b8 <_free_r>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5da:	e00d      	b.n	800c5f8 <__sflush_r+0xac>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	4628      	mov	r0, r5
 800c5e0:	47b0      	blx	r6
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	1c50      	adds	r0, r2, #1
 800c5e6:	d1c9      	bne.n	800c57c <__sflush_r+0x30>
 800c5e8:	682b      	ldr	r3, [r5, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d0c6      	beq.n	800c57c <__sflush_r+0x30>
 800c5ee:	2b1d      	cmp	r3, #29
 800c5f0:	d001      	beq.n	800c5f6 <__sflush_r+0xaa>
 800c5f2:	2b16      	cmp	r3, #22
 800c5f4:	d11d      	bne.n	800c632 <__sflush_r+0xe6>
 800c5f6:	602f      	str	r7, [r5, #0]
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	e021      	b.n	800c640 <__sflush_r+0xf4>
 800c5fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c600:	b21b      	sxth	r3, r3
 800c602:	e01a      	b.n	800c63a <__sflush_r+0xee>
 800c604:	690f      	ldr	r7, [r1, #16]
 800c606:	2f00      	cmp	r7, #0
 800c608:	d0f6      	beq.n	800c5f8 <__sflush_r+0xac>
 800c60a:	0793      	lsls	r3, r2, #30
 800c60c:	bf18      	it	ne
 800c60e:	2300      	movne	r3, #0
 800c610:	680e      	ldr	r6, [r1, #0]
 800c612:	bf08      	it	eq
 800c614:	694b      	ldreq	r3, [r1, #20]
 800c616:	1bf6      	subs	r6, r6, r7
 800c618:	600f      	str	r7, [r1, #0]
 800c61a:	608b      	str	r3, [r1, #8]
 800c61c:	2e00      	cmp	r6, #0
 800c61e:	ddeb      	ble.n	800c5f8 <__sflush_r+0xac>
 800c620:	4633      	mov	r3, r6
 800c622:	463a      	mov	r2, r7
 800c624:	4628      	mov	r0, r5
 800c626:	6a21      	ldr	r1, [r4, #32]
 800c628:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c62c:	47e0      	blx	ip
 800c62e:	2800      	cmp	r0, #0
 800c630:	dc07      	bgt.n	800c642 <__sflush_r+0xf6>
 800c632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c63a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c63e:	81a3      	strh	r3, [r4, #12]
 800c640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c642:	4407      	add	r7, r0
 800c644:	1a36      	subs	r6, r6, r0
 800c646:	e7e9      	b.n	800c61c <__sflush_r+0xd0>
 800c648:	dfbffffe 	.word	0xdfbffffe

0800c64c <_fflush_r>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	690b      	ldr	r3, [r1, #16]
 800c650:	4605      	mov	r5, r0
 800c652:	460c      	mov	r4, r1
 800c654:	b913      	cbnz	r3, 800c65c <_fflush_r+0x10>
 800c656:	2500      	movs	r5, #0
 800c658:	4628      	mov	r0, r5
 800c65a:	bd38      	pop	{r3, r4, r5, pc}
 800c65c:	b118      	cbz	r0, 800c666 <_fflush_r+0x1a>
 800c65e:	6a03      	ldr	r3, [r0, #32]
 800c660:	b90b      	cbnz	r3, 800c666 <_fflush_r+0x1a>
 800c662:	f7fe fdf7 	bl	800b254 <__sinit>
 800c666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d0f3      	beq.n	800c656 <_fflush_r+0xa>
 800c66e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c670:	07d0      	lsls	r0, r2, #31
 800c672:	d404      	bmi.n	800c67e <_fflush_r+0x32>
 800c674:	0599      	lsls	r1, r3, #22
 800c676:	d402      	bmi.n	800c67e <_fflush_r+0x32>
 800c678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c67a:	f7fe feae 	bl	800b3da <__retarget_lock_acquire_recursive>
 800c67e:	4628      	mov	r0, r5
 800c680:	4621      	mov	r1, r4
 800c682:	f7ff ff63 	bl	800c54c <__sflush_r>
 800c686:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c688:	4605      	mov	r5, r0
 800c68a:	07da      	lsls	r2, r3, #31
 800c68c:	d4e4      	bmi.n	800c658 <_fflush_r+0xc>
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	059b      	lsls	r3, r3, #22
 800c692:	d4e1      	bmi.n	800c658 <_fflush_r+0xc>
 800c694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c696:	f7fe fea1 	bl	800b3dc <__retarget_lock_release_recursive>
 800c69a:	e7dd      	b.n	800c658 <_fflush_r+0xc>

0800c69c <__malloc_lock>:
 800c69c:	4801      	ldr	r0, [pc, #4]	@ (800c6a4 <__malloc_lock+0x8>)
 800c69e:	f7fe be9c 	b.w	800b3da <__retarget_lock_acquire_recursive>
 800c6a2:	bf00      	nop
 800c6a4:	20001658 	.word	0x20001658

0800c6a8 <__malloc_unlock>:
 800c6a8:	4801      	ldr	r0, [pc, #4]	@ (800c6b0 <__malloc_unlock+0x8>)
 800c6aa:	f7fe be97 	b.w	800b3dc <__retarget_lock_release_recursive>
 800c6ae:	bf00      	nop
 800c6b0:	20001658 	.word	0x20001658

0800c6b4 <_Balloc>:
 800c6b4:	b570      	push	{r4, r5, r6, lr}
 800c6b6:	69c6      	ldr	r6, [r0, #28]
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	460d      	mov	r5, r1
 800c6bc:	b976      	cbnz	r6, 800c6dc <_Balloc+0x28>
 800c6be:	2010      	movs	r0, #16
 800c6c0:	f7ff fe9a 	bl	800c3f8 <malloc>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	61e0      	str	r0, [r4, #28]
 800c6c8:	b920      	cbnz	r0, 800c6d4 <_Balloc+0x20>
 800c6ca:	216b      	movs	r1, #107	@ 0x6b
 800c6cc:	4b17      	ldr	r3, [pc, #92]	@ (800c72c <_Balloc+0x78>)
 800c6ce:	4818      	ldr	r0, [pc, #96]	@ (800c730 <_Balloc+0x7c>)
 800c6d0:	f000 fc52 	bl	800cf78 <__assert_func>
 800c6d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6d8:	6006      	str	r6, [r0, #0]
 800c6da:	60c6      	str	r6, [r0, #12]
 800c6dc:	69e6      	ldr	r6, [r4, #28]
 800c6de:	68f3      	ldr	r3, [r6, #12]
 800c6e0:	b183      	cbz	r3, 800c704 <_Balloc+0x50>
 800c6e2:	69e3      	ldr	r3, [r4, #28]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6ea:	b9b8      	cbnz	r0, 800c71c <_Balloc+0x68>
 800c6ec:	2101      	movs	r1, #1
 800c6ee:	fa01 f605 	lsl.w	r6, r1, r5
 800c6f2:	1d72      	adds	r2, r6, #5
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	0092      	lsls	r2, r2, #2
 800c6f8:	f000 fc5c 	bl	800cfb4 <_calloc_r>
 800c6fc:	b160      	cbz	r0, 800c718 <_Balloc+0x64>
 800c6fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c702:	e00e      	b.n	800c722 <_Balloc+0x6e>
 800c704:	2221      	movs	r2, #33	@ 0x21
 800c706:	2104      	movs	r1, #4
 800c708:	4620      	mov	r0, r4
 800c70a:	f000 fc53 	bl	800cfb4 <_calloc_r>
 800c70e:	69e3      	ldr	r3, [r4, #28]
 800c710:	60f0      	str	r0, [r6, #12]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1e4      	bne.n	800c6e2 <_Balloc+0x2e>
 800c718:	2000      	movs	r0, #0
 800c71a:	bd70      	pop	{r4, r5, r6, pc}
 800c71c:	6802      	ldr	r2, [r0, #0]
 800c71e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c722:	2300      	movs	r3, #0
 800c724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c728:	e7f7      	b.n	800c71a <_Balloc+0x66>
 800c72a:	bf00      	nop
 800c72c:	0800e00f 	.word	0x0800e00f
 800c730:	0800e0a0 	.word	0x0800e0a0

0800c734 <_Bfree>:
 800c734:	b570      	push	{r4, r5, r6, lr}
 800c736:	69c6      	ldr	r6, [r0, #28]
 800c738:	4605      	mov	r5, r0
 800c73a:	460c      	mov	r4, r1
 800c73c:	b976      	cbnz	r6, 800c75c <_Bfree+0x28>
 800c73e:	2010      	movs	r0, #16
 800c740:	f7ff fe5a 	bl	800c3f8 <malloc>
 800c744:	4602      	mov	r2, r0
 800c746:	61e8      	str	r0, [r5, #28]
 800c748:	b920      	cbnz	r0, 800c754 <_Bfree+0x20>
 800c74a:	218f      	movs	r1, #143	@ 0x8f
 800c74c:	4b08      	ldr	r3, [pc, #32]	@ (800c770 <_Bfree+0x3c>)
 800c74e:	4809      	ldr	r0, [pc, #36]	@ (800c774 <_Bfree+0x40>)
 800c750:	f000 fc12 	bl	800cf78 <__assert_func>
 800c754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c758:	6006      	str	r6, [r0, #0]
 800c75a:	60c6      	str	r6, [r0, #12]
 800c75c:	b13c      	cbz	r4, 800c76e <_Bfree+0x3a>
 800c75e:	69eb      	ldr	r3, [r5, #28]
 800c760:	6862      	ldr	r2, [r4, #4]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c768:	6021      	str	r1, [r4, #0]
 800c76a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c76e:	bd70      	pop	{r4, r5, r6, pc}
 800c770:	0800e00f 	.word	0x0800e00f
 800c774:	0800e0a0 	.word	0x0800e0a0

0800c778 <__multadd>:
 800c778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77c:	4607      	mov	r7, r0
 800c77e:	460c      	mov	r4, r1
 800c780:	461e      	mov	r6, r3
 800c782:	2000      	movs	r0, #0
 800c784:	690d      	ldr	r5, [r1, #16]
 800c786:	f101 0c14 	add.w	ip, r1, #20
 800c78a:	f8dc 3000 	ldr.w	r3, [ip]
 800c78e:	3001      	adds	r0, #1
 800c790:	b299      	uxth	r1, r3
 800c792:	fb02 6101 	mla	r1, r2, r1, r6
 800c796:	0c1e      	lsrs	r6, r3, #16
 800c798:	0c0b      	lsrs	r3, r1, #16
 800c79a:	fb02 3306 	mla	r3, r2, r6, r3
 800c79e:	b289      	uxth	r1, r1
 800c7a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c7a4:	4285      	cmp	r5, r0
 800c7a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c7aa:	f84c 1b04 	str.w	r1, [ip], #4
 800c7ae:	dcec      	bgt.n	800c78a <__multadd+0x12>
 800c7b0:	b30e      	cbz	r6, 800c7f6 <__multadd+0x7e>
 800c7b2:	68a3      	ldr	r3, [r4, #8]
 800c7b4:	42ab      	cmp	r3, r5
 800c7b6:	dc19      	bgt.n	800c7ec <__multadd+0x74>
 800c7b8:	6861      	ldr	r1, [r4, #4]
 800c7ba:	4638      	mov	r0, r7
 800c7bc:	3101      	adds	r1, #1
 800c7be:	f7ff ff79 	bl	800c6b4 <_Balloc>
 800c7c2:	4680      	mov	r8, r0
 800c7c4:	b928      	cbnz	r0, 800c7d2 <__multadd+0x5a>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	21ba      	movs	r1, #186	@ 0xba
 800c7ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c7fc <__multadd+0x84>)
 800c7cc:	480c      	ldr	r0, [pc, #48]	@ (800c800 <__multadd+0x88>)
 800c7ce:	f000 fbd3 	bl	800cf78 <__assert_func>
 800c7d2:	6922      	ldr	r2, [r4, #16]
 800c7d4:	f104 010c 	add.w	r1, r4, #12
 800c7d8:	3202      	adds	r2, #2
 800c7da:	0092      	lsls	r2, r2, #2
 800c7dc:	300c      	adds	r0, #12
 800c7de:	f7fe fe0c 	bl	800b3fa <memcpy>
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	f7ff ffa5 	bl	800c734 <_Bfree>
 800c7ea:	4644      	mov	r4, r8
 800c7ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7f0:	3501      	adds	r5, #1
 800c7f2:	615e      	str	r6, [r3, #20]
 800c7f4:	6125      	str	r5, [r4, #16]
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7fc:	0800e07e 	.word	0x0800e07e
 800c800:	0800e0a0 	.word	0x0800e0a0

0800c804 <__hi0bits>:
 800c804:	4603      	mov	r3, r0
 800c806:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c80a:	bf3a      	itte	cc
 800c80c:	0403      	lslcc	r3, r0, #16
 800c80e:	2010      	movcc	r0, #16
 800c810:	2000      	movcs	r0, #0
 800c812:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c816:	bf3c      	itt	cc
 800c818:	021b      	lslcc	r3, r3, #8
 800c81a:	3008      	addcc	r0, #8
 800c81c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c820:	bf3c      	itt	cc
 800c822:	011b      	lslcc	r3, r3, #4
 800c824:	3004      	addcc	r0, #4
 800c826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c82a:	bf3c      	itt	cc
 800c82c:	009b      	lslcc	r3, r3, #2
 800c82e:	3002      	addcc	r0, #2
 800c830:	2b00      	cmp	r3, #0
 800c832:	db05      	blt.n	800c840 <__hi0bits+0x3c>
 800c834:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c838:	f100 0001 	add.w	r0, r0, #1
 800c83c:	bf08      	it	eq
 800c83e:	2020      	moveq	r0, #32
 800c840:	4770      	bx	lr

0800c842 <__lo0bits>:
 800c842:	6803      	ldr	r3, [r0, #0]
 800c844:	4602      	mov	r2, r0
 800c846:	f013 0007 	ands.w	r0, r3, #7
 800c84a:	d00b      	beq.n	800c864 <__lo0bits+0x22>
 800c84c:	07d9      	lsls	r1, r3, #31
 800c84e:	d421      	bmi.n	800c894 <__lo0bits+0x52>
 800c850:	0798      	lsls	r0, r3, #30
 800c852:	bf49      	itett	mi
 800c854:	085b      	lsrmi	r3, r3, #1
 800c856:	089b      	lsrpl	r3, r3, #2
 800c858:	2001      	movmi	r0, #1
 800c85a:	6013      	strmi	r3, [r2, #0]
 800c85c:	bf5c      	itt	pl
 800c85e:	2002      	movpl	r0, #2
 800c860:	6013      	strpl	r3, [r2, #0]
 800c862:	4770      	bx	lr
 800c864:	b299      	uxth	r1, r3
 800c866:	b909      	cbnz	r1, 800c86c <__lo0bits+0x2a>
 800c868:	2010      	movs	r0, #16
 800c86a:	0c1b      	lsrs	r3, r3, #16
 800c86c:	b2d9      	uxtb	r1, r3
 800c86e:	b909      	cbnz	r1, 800c874 <__lo0bits+0x32>
 800c870:	3008      	adds	r0, #8
 800c872:	0a1b      	lsrs	r3, r3, #8
 800c874:	0719      	lsls	r1, r3, #28
 800c876:	bf04      	itt	eq
 800c878:	091b      	lsreq	r3, r3, #4
 800c87a:	3004      	addeq	r0, #4
 800c87c:	0799      	lsls	r1, r3, #30
 800c87e:	bf04      	itt	eq
 800c880:	089b      	lsreq	r3, r3, #2
 800c882:	3002      	addeq	r0, #2
 800c884:	07d9      	lsls	r1, r3, #31
 800c886:	d403      	bmi.n	800c890 <__lo0bits+0x4e>
 800c888:	085b      	lsrs	r3, r3, #1
 800c88a:	f100 0001 	add.w	r0, r0, #1
 800c88e:	d003      	beq.n	800c898 <__lo0bits+0x56>
 800c890:	6013      	str	r3, [r2, #0]
 800c892:	4770      	bx	lr
 800c894:	2000      	movs	r0, #0
 800c896:	4770      	bx	lr
 800c898:	2020      	movs	r0, #32
 800c89a:	4770      	bx	lr

0800c89c <__i2b>:
 800c89c:	b510      	push	{r4, lr}
 800c89e:	460c      	mov	r4, r1
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	f7ff ff07 	bl	800c6b4 <_Balloc>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	b928      	cbnz	r0, 800c8b6 <__i2b+0x1a>
 800c8aa:	f240 1145 	movw	r1, #325	@ 0x145
 800c8ae:	4b04      	ldr	r3, [pc, #16]	@ (800c8c0 <__i2b+0x24>)
 800c8b0:	4804      	ldr	r0, [pc, #16]	@ (800c8c4 <__i2b+0x28>)
 800c8b2:	f000 fb61 	bl	800cf78 <__assert_func>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	6144      	str	r4, [r0, #20]
 800c8ba:	6103      	str	r3, [r0, #16]
 800c8bc:	bd10      	pop	{r4, pc}
 800c8be:	bf00      	nop
 800c8c0:	0800e07e 	.word	0x0800e07e
 800c8c4:	0800e0a0 	.word	0x0800e0a0

0800c8c8 <__multiply>:
 800c8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8cc:	4614      	mov	r4, r2
 800c8ce:	690a      	ldr	r2, [r1, #16]
 800c8d0:	6923      	ldr	r3, [r4, #16]
 800c8d2:	460f      	mov	r7, r1
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	bfa2      	ittt	ge
 800c8d8:	4623      	movge	r3, r4
 800c8da:	460c      	movge	r4, r1
 800c8dc:	461f      	movge	r7, r3
 800c8de:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c8e2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c8e6:	68a3      	ldr	r3, [r4, #8]
 800c8e8:	6861      	ldr	r1, [r4, #4]
 800c8ea:	eb0a 0609 	add.w	r6, sl, r9
 800c8ee:	42b3      	cmp	r3, r6
 800c8f0:	b085      	sub	sp, #20
 800c8f2:	bfb8      	it	lt
 800c8f4:	3101      	addlt	r1, #1
 800c8f6:	f7ff fedd 	bl	800c6b4 <_Balloc>
 800c8fa:	b930      	cbnz	r0, 800c90a <__multiply+0x42>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c902:	4b43      	ldr	r3, [pc, #268]	@ (800ca10 <__multiply+0x148>)
 800c904:	4843      	ldr	r0, [pc, #268]	@ (800ca14 <__multiply+0x14c>)
 800c906:	f000 fb37 	bl	800cf78 <__assert_func>
 800c90a:	f100 0514 	add.w	r5, r0, #20
 800c90e:	462b      	mov	r3, r5
 800c910:	2200      	movs	r2, #0
 800c912:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c916:	4543      	cmp	r3, r8
 800c918:	d321      	bcc.n	800c95e <__multiply+0x96>
 800c91a:	f107 0114 	add.w	r1, r7, #20
 800c91e:	f104 0214 	add.w	r2, r4, #20
 800c922:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c926:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c92a:	9302      	str	r3, [sp, #8]
 800c92c:	1b13      	subs	r3, r2, r4
 800c92e:	3b15      	subs	r3, #21
 800c930:	f023 0303 	bic.w	r3, r3, #3
 800c934:	3304      	adds	r3, #4
 800c936:	f104 0715 	add.w	r7, r4, #21
 800c93a:	42ba      	cmp	r2, r7
 800c93c:	bf38      	it	cc
 800c93e:	2304      	movcc	r3, #4
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	9b02      	ldr	r3, [sp, #8]
 800c944:	9103      	str	r1, [sp, #12]
 800c946:	428b      	cmp	r3, r1
 800c948:	d80c      	bhi.n	800c964 <__multiply+0x9c>
 800c94a:	2e00      	cmp	r6, #0
 800c94c:	dd03      	ble.n	800c956 <__multiply+0x8e>
 800c94e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c952:	2b00      	cmp	r3, #0
 800c954:	d05a      	beq.n	800ca0c <__multiply+0x144>
 800c956:	6106      	str	r6, [r0, #16]
 800c958:	b005      	add	sp, #20
 800c95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c95e:	f843 2b04 	str.w	r2, [r3], #4
 800c962:	e7d8      	b.n	800c916 <__multiply+0x4e>
 800c964:	f8b1 a000 	ldrh.w	sl, [r1]
 800c968:	f1ba 0f00 	cmp.w	sl, #0
 800c96c:	d023      	beq.n	800c9b6 <__multiply+0xee>
 800c96e:	46a9      	mov	r9, r5
 800c970:	f04f 0c00 	mov.w	ip, #0
 800c974:	f104 0e14 	add.w	lr, r4, #20
 800c978:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c97c:	f8d9 3000 	ldr.w	r3, [r9]
 800c980:	fa1f fb87 	uxth.w	fp, r7
 800c984:	b29b      	uxth	r3, r3
 800c986:	fb0a 330b 	mla	r3, sl, fp, r3
 800c98a:	4463      	add	r3, ip
 800c98c:	f8d9 c000 	ldr.w	ip, [r9]
 800c990:	0c3f      	lsrs	r7, r7, #16
 800c992:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c996:	fb0a c707 	mla	r7, sl, r7, ip
 800c99a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c9a4:	4572      	cmp	r2, lr
 800c9a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c9aa:	f849 3b04 	str.w	r3, [r9], #4
 800c9ae:	d8e3      	bhi.n	800c978 <__multiply+0xb0>
 800c9b0:	9b01      	ldr	r3, [sp, #4]
 800c9b2:	f845 c003 	str.w	ip, [r5, r3]
 800c9b6:	9b03      	ldr	r3, [sp, #12]
 800c9b8:	3104      	adds	r1, #4
 800c9ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c9be:	f1b9 0f00 	cmp.w	r9, #0
 800c9c2:	d021      	beq.n	800ca08 <__multiply+0x140>
 800c9c4:	46ae      	mov	lr, r5
 800c9c6:	f04f 0a00 	mov.w	sl, #0
 800c9ca:	682b      	ldr	r3, [r5, #0]
 800c9cc:	f104 0c14 	add.w	ip, r4, #20
 800c9d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c9d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	fb09 770b 	mla	r7, r9, fp, r7
 800c9de:	4457      	add	r7, sl
 800c9e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c9e4:	f84e 3b04 	str.w	r3, [lr], #4
 800c9e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9f0:	f8be 3000 	ldrh.w	r3, [lr]
 800c9f4:	4562      	cmp	r2, ip
 800c9f6:	fb09 330a 	mla	r3, r9, sl, r3
 800c9fa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c9fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca02:	d8e5      	bhi.n	800c9d0 <__multiply+0x108>
 800ca04:	9f01      	ldr	r7, [sp, #4]
 800ca06:	51eb      	str	r3, [r5, r7]
 800ca08:	3504      	adds	r5, #4
 800ca0a:	e79a      	b.n	800c942 <__multiply+0x7a>
 800ca0c:	3e01      	subs	r6, #1
 800ca0e:	e79c      	b.n	800c94a <__multiply+0x82>
 800ca10:	0800e07e 	.word	0x0800e07e
 800ca14:	0800e0a0 	.word	0x0800e0a0

0800ca18 <__pow5mult>:
 800ca18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca1c:	4615      	mov	r5, r2
 800ca1e:	f012 0203 	ands.w	r2, r2, #3
 800ca22:	4607      	mov	r7, r0
 800ca24:	460e      	mov	r6, r1
 800ca26:	d007      	beq.n	800ca38 <__pow5mult+0x20>
 800ca28:	4c25      	ldr	r4, [pc, #148]	@ (800cac0 <__pow5mult+0xa8>)
 800ca2a:	3a01      	subs	r2, #1
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca32:	f7ff fea1 	bl	800c778 <__multadd>
 800ca36:	4606      	mov	r6, r0
 800ca38:	10ad      	asrs	r5, r5, #2
 800ca3a:	d03d      	beq.n	800cab8 <__pow5mult+0xa0>
 800ca3c:	69fc      	ldr	r4, [r7, #28]
 800ca3e:	b97c      	cbnz	r4, 800ca60 <__pow5mult+0x48>
 800ca40:	2010      	movs	r0, #16
 800ca42:	f7ff fcd9 	bl	800c3f8 <malloc>
 800ca46:	4602      	mov	r2, r0
 800ca48:	61f8      	str	r0, [r7, #28]
 800ca4a:	b928      	cbnz	r0, 800ca58 <__pow5mult+0x40>
 800ca4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ca50:	4b1c      	ldr	r3, [pc, #112]	@ (800cac4 <__pow5mult+0xac>)
 800ca52:	481d      	ldr	r0, [pc, #116]	@ (800cac8 <__pow5mult+0xb0>)
 800ca54:	f000 fa90 	bl	800cf78 <__assert_func>
 800ca58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca5c:	6004      	str	r4, [r0, #0]
 800ca5e:	60c4      	str	r4, [r0, #12]
 800ca60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ca64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca68:	b94c      	cbnz	r4, 800ca7e <__pow5mult+0x66>
 800ca6a:	f240 2171 	movw	r1, #625	@ 0x271
 800ca6e:	4638      	mov	r0, r7
 800ca70:	f7ff ff14 	bl	800c89c <__i2b>
 800ca74:	2300      	movs	r3, #0
 800ca76:	4604      	mov	r4, r0
 800ca78:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca7c:	6003      	str	r3, [r0, #0]
 800ca7e:	f04f 0900 	mov.w	r9, #0
 800ca82:	07eb      	lsls	r3, r5, #31
 800ca84:	d50a      	bpl.n	800ca9c <__pow5mult+0x84>
 800ca86:	4631      	mov	r1, r6
 800ca88:	4622      	mov	r2, r4
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	f7ff ff1c 	bl	800c8c8 <__multiply>
 800ca90:	4680      	mov	r8, r0
 800ca92:	4631      	mov	r1, r6
 800ca94:	4638      	mov	r0, r7
 800ca96:	f7ff fe4d 	bl	800c734 <_Bfree>
 800ca9a:	4646      	mov	r6, r8
 800ca9c:	106d      	asrs	r5, r5, #1
 800ca9e:	d00b      	beq.n	800cab8 <__pow5mult+0xa0>
 800caa0:	6820      	ldr	r0, [r4, #0]
 800caa2:	b938      	cbnz	r0, 800cab4 <__pow5mult+0x9c>
 800caa4:	4622      	mov	r2, r4
 800caa6:	4621      	mov	r1, r4
 800caa8:	4638      	mov	r0, r7
 800caaa:	f7ff ff0d 	bl	800c8c8 <__multiply>
 800caae:	6020      	str	r0, [r4, #0]
 800cab0:	f8c0 9000 	str.w	r9, [r0]
 800cab4:	4604      	mov	r4, r0
 800cab6:	e7e4      	b.n	800ca82 <__pow5mult+0x6a>
 800cab8:	4630      	mov	r0, r6
 800caba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cabe:	bf00      	nop
 800cac0:	0800e0fc 	.word	0x0800e0fc
 800cac4:	0800e00f 	.word	0x0800e00f
 800cac8:	0800e0a0 	.word	0x0800e0a0

0800cacc <__lshift>:
 800cacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad0:	460c      	mov	r4, r1
 800cad2:	4607      	mov	r7, r0
 800cad4:	4691      	mov	r9, r2
 800cad6:	6923      	ldr	r3, [r4, #16]
 800cad8:	6849      	ldr	r1, [r1, #4]
 800cada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cade:	68a3      	ldr	r3, [r4, #8]
 800cae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cae4:	f108 0601 	add.w	r6, r8, #1
 800cae8:	42b3      	cmp	r3, r6
 800caea:	db0b      	blt.n	800cb04 <__lshift+0x38>
 800caec:	4638      	mov	r0, r7
 800caee:	f7ff fde1 	bl	800c6b4 <_Balloc>
 800caf2:	4605      	mov	r5, r0
 800caf4:	b948      	cbnz	r0, 800cb0a <__lshift+0x3e>
 800caf6:	4602      	mov	r2, r0
 800caf8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cafc:	4b27      	ldr	r3, [pc, #156]	@ (800cb9c <__lshift+0xd0>)
 800cafe:	4828      	ldr	r0, [pc, #160]	@ (800cba0 <__lshift+0xd4>)
 800cb00:	f000 fa3a 	bl	800cf78 <__assert_func>
 800cb04:	3101      	adds	r1, #1
 800cb06:	005b      	lsls	r3, r3, #1
 800cb08:	e7ee      	b.n	800cae8 <__lshift+0x1c>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	f100 0114 	add.w	r1, r0, #20
 800cb10:	f100 0210 	add.w	r2, r0, #16
 800cb14:	4618      	mov	r0, r3
 800cb16:	4553      	cmp	r3, sl
 800cb18:	db33      	blt.n	800cb82 <__lshift+0xb6>
 800cb1a:	6920      	ldr	r0, [r4, #16]
 800cb1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb20:	f104 0314 	add.w	r3, r4, #20
 800cb24:	f019 091f 	ands.w	r9, r9, #31
 800cb28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb30:	d02b      	beq.n	800cb8a <__lshift+0xbe>
 800cb32:	468a      	mov	sl, r1
 800cb34:	2200      	movs	r2, #0
 800cb36:	f1c9 0e20 	rsb	lr, r9, #32
 800cb3a:	6818      	ldr	r0, [r3, #0]
 800cb3c:	fa00 f009 	lsl.w	r0, r0, r9
 800cb40:	4310      	orrs	r0, r2
 800cb42:	f84a 0b04 	str.w	r0, [sl], #4
 800cb46:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb4a:	459c      	cmp	ip, r3
 800cb4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb50:	d8f3      	bhi.n	800cb3a <__lshift+0x6e>
 800cb52:	ebac 0304 	sub.w	r3, ip, r4
 800cb56:	3b15      	subs	r3, #21
 800cb58:	f023 0303 	bic.w	r3, r3, #3
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	f104 0015 	add.w	r0, r4, #21
 800cb62:	4584      	cmp	ip, r0
 800cb64:	bf38      	it	cc
 800cb66:	2304      	movcc	r3, #4
 800cb68:	50ca      	str	r2, [r1, r3]
 800cb6a:	b10a      	cbz	r2, 800cb70 <__lshift+0xa4>
 800cb6c:	f108 0602 	add.w	r6, r8, #2
 800cb70:	3e01      	subs	r6, #1
 800cb72:	4638      	mov	r0, r7
 800cb74:	4621      	mov	r1, r4
 800cb76:	612e      	str	r6, [r5, #16]
 800cb78:	f7ff fddc 	bl	800c734 <_Bfree>
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb82:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb86:	3301      	adds	r3, #1
 800cb88:	e7c5      	b.n	800cb16 <__lshift+0x4a>
 800cb8a:	3904      	subs	r1, #4
 800cb8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb90:	459c      	cmp	ip, r3
 800cb92:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb96:	d8f9      	bhi.n	800cb8c <__lshift+0xc0>
 800cb98:	e7ea      	b.n	800cb70 <__lshift+0xa4>
 800cb9a:	bf00      	nop
 800cb9c:	0800e07e 	.word	0x0800e07e
 800cba0:	0800e0a0 	.word	0x0800e0a0

0800cba4 <__mcmp>:
 800cba4:	4603      	mov	r3, r0
 800cba6:	690a      	ldr	r2, [r1, #16]
 800cba8:	6900      	ldr	r0, [r0, #16]
 800cbaa:	b530      	push	{r4, r5, lr}
 800cbac:	1a80      	subs	r0, r0, r2
 800cbae:	d10e      	bne.n	800cbce <__mcmp+0x2a>
 800cbb0:	3314      	adds	r3, #20
 800cbb2:	3114      	adds	r1, #20
 800cbb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cbb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cbbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cbc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cbc4:	4295      	cmp	r5, r2
 800cbc6:	d003      	beq.n	800cbd0 <__mcmp+0x2c>
 800cbc8:	d205      	bcs.n	800cbd6 <__mcmp+0x32>
 800cbca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbce:	bd30      	pop	{r4, r5, pc}
 800cbd0:	42a3      	cmp	r3, r4
 800cbd2:	d3f3      	bcc.n	800cbbc <__mcmp+0x18>
 800cbd4:	e7fb      	b.n	800cbce <__mcmp+0x2a>
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	e7f9      	b.n	800cbce <__mcmp+0x2a>
	...

0800cbdc <__mdiff>:
 800cbdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe0:	4689      	mov	r9, r1
 800cbe2:	4606      	mov	r6, r0
 800cbe4:	4611      	mov	r1, r2
 800cbe6:	4648      	mov	r0, r9
 800cbe8:	4614      	mov	r4, r2
 800cbea:	f7ff ffdb 	bl	800cba4 <__mcmp>
 800cbee:	1e05      	subs	r5, r0, #0
 800cbf0:	d112      	bne.n	800cc18 <__mdiff+0x3c>
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f7ff fd5d 	bl	800c6b4 <_Balloc>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	b928      	cbnz	r0, 800cc0a <__mdiff+0x2e>
 800cbfe:	f240 2137 	movw	r1, #567	@ 0x237
 800cc02:	4b3e      	ldr	r3, [pc, #248]	@ (800ccfc <__mdiff+0x120>)
 800cc04:	483e      	ldr	r0, [pc, #248]	@ (800cd00 <__mdiff+0x124>)
 800cc06:	f000 f9b7 	bl	800cf78 <__assert_func>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc10:	4610      	mov	r0, r2
 800cc12:	b003      	add	sp, #12
 800cc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc18:	bfbc      	itt	lt
 800cc1a:	464b      	movlt	r3, r9
 800cc1c:	46a1      	movlt	r9, r4
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cc24:	bfba      	itte	lt
 800cc26:	461c      	movlt	r4, r3
 800cc28:	2501      	movlt	r5, #1
 800cc2a:	2500      	movge	r5, #0
 800cc2c:	f7ff fd42 	bl	800c6b4 <_Balloc>
 800cc30:	4602      	mov	r2, r0
 800cc32:	b918      	cbnz	r0, 800cc3c <__mdiff+0x60>
 800cc34:	f240 2145 	movw	r1, #581	@ 0x245
 800cc38:	4b30      	ldr	r3, [pc, #192]	@ (800ccfc <__mdiff+0x120>)
 800cc3a:	e7e3      	b.n	800cc04 <__mdiff+0x28>
 800cc3c:	f100 0b14 	add.w	fp, r0, #20
 800cc40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cc44:	f109 0310 	add.w	r3, r9, #16
 800cc48:	60c5      	str	r5, [r0, #12]
 800cc4a:	f04f 0c00 	mov.w	ip, #0
 800cc4e:	f109 0514 	add.w	r5, r9, #20
 800cc52:	46d9      	mov	r9, fp
 800cc54:	6926      	ldr	r6, [r4, #16]
 800cc56:	f104 0e14 	add.w	lr, r4, #20
 800cc5a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cc5e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cc62:	9301      	str	r3, [sp, #4]
 800cc64:	9b01      	ldr	r3, [sp, #4]
 800cc66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cc6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cc6e:	b281      	uxth	r1, r0
 800cc70:	9301      	str	r3, [sp, #4]
 800cc72:	fa1f f38a 	uxth.w	r3, sl
 800cc76:	1a5b      	subs	r3, r3, r1
 800cc78:	0c00      	lsrs	r0, r0, #16
 800cc7a:	4463      	add	r3, ip
 800cc7c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cc80:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc8a:	4576      	cmp	r6, lr
 800cc8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc90:	f849 3b04 	str.w	r3, [r9], #4
 800cc94:	d8e6      	bhi.n	800cc64 <__mdiff+0x88>
 800cc96:	1b33      	subs	r3, r6, r4
 800cc98:	3b15      	subs	r3, #21
 800cc9a:	f023 0303 	bic.w	r3, r3, #3
 800cc9e:	3415      	adds	r4, #21
 800cca0:	3304      	adds	r3, #4
 800cca2:	42a6      	cmp	r6, r4
 800cca4:	bf38      	it	cc
 800cca6:	2304      	movcc	r3, #4
 800cca8:	441d      	add	r5, r3
 800ccaa:	445b      	add	r3, fp
 800ccac:	461e      	mov	r6, r3
 800ccae:	462c      	mov	r4, r5
 800ccb0:	4544      	cmp	r4, r8
 800ccb2:	d30e      	bcc.n	800ccd2 <__mdiff+0xf6>
 800ccb4:	f108 0103 	add.w	r1, r8, #3
 800ccb8:	1b49      	subs	r1, r1, r5
 800ccba:	f021 0103 	bic.w	r1, r1, #3
 800ccbe:	3d03      	subs	r5, #3
 800ccc0:	45a8      	cmp	r8, r5
 800ccc2:	bf38      	it	cc
 800ccc4:	2100      	movcc	r1, #0
 800ccc6:	440b      	add	r3, r1
 800ccc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cccc:	b199      	cbz	r1, 800ccf6 <__mdiff+0x11a>
 800ccce:	6117      	str	r7, [r2, #16]
 800ccd0:	e79e      	b.n	800cc10 <__mdiff+0x34>
 800ccd2:	46e6      	mov	lr, ip
 800ccd4:	f854 1b04 	ldr.w	r1, [r4], #4
 800ccd8:	fa1f fc81 	uxth.w	ip, r1
 800ccdc:	44f4      	add	ip, lr
 800ccde:	0c08      	lsrs	r0, r1, #16
 800cce0:	4471      	add	r1, lr
 800cce2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cce6:	b289      	uxth	r1, r1
 800cce8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ccec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ccf0:	f846 1b04 	str.w	r1, [r6], #4
 800ccf4:	e7dc      	b.n	800ccb0 <__mdiff+0xd4>
 800ccf6:	3f01      	subs	r7, #1
 800ccf8:	e7e6      	b.n	800ccc8 <__mdiff+0xec>
 800ccfa:	bf00      	nop
 800ccfc:	0800e07e 	.word	0x0800e07e
 800cd00:	0800e0a0 	.word	0x0800e0a0

0800cd04 <__d2b>:
 800cd04:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800cd08:	2101      	movs	r1, #1
 800cd0a:	4690      	mov	r8, r2
 800cd0c:	4699      	mov	r9, r3
 800cd0e:	9e08      	ldr	r6, [sp, #32]
 800cd10:	f7ff fcd0 	bl	800c6b4 <_Balloc>
 800cd14:	4604      	mov	r4, r0
 800cd16:	b930      	cbnz	r0, 800cd26 <__d2b+0x22>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd1e:	4b23      	ldr	r3, [pc, #140]	@ (800cdac <__d2b+0xa8>)
 800cd20:	4823      	ldr	r0, [pc, #140]	@ (800cdb0 <__d2b+0xac>)
 800cd22:	f000 f929 	bl	800cf78 <__assert_func>
 800cd26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd2e:	b10d      	cbz	r5, 800cd34 <__d2b+0x30>
 800cd30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd34:	9301      	str	r3, [sp, #4]
 800cd36:	f1b8 0300 	subs.w	r3, r8, #0
 800cd3a:	d024      	beq.n	800cd86 <__d2b+0x82>
 800cd3c:	4668      	mov	r0, sp
 800cd3e:	9300      	str	r3, [sp, #0]
 800cd40:	f7ff fd7f 	bl	800c842 <__lo0bits>
 800cd44:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd48:	b1d8      	cbz	r0, 800cd82 <__d2b+0x7e>
 800cd4a:	f1c0 0320 	rsb	r3, r0, #32
 800cd4e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd52:	430b      	orrs	r3, r1
 800cd54:	40c2      	lsrs	r2, r0
 800cd56:	6163      	str	r3, [r4, #20]
 800cd58:	9201      	str	r2, [sp, #4]
 800cd5a:	9b01      	ldr	r3, [sp, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	bf0c      	ite	eq
 800cd60:	2201      	moveq	r2, #1
 800cd62:	2202      	movne	r2, #2
 800cd64:	61a3      	str	r3, [r4, #24]
 800cd66:	6122      	str	r2, [r4, #16]
 800cd68:	b1ad      	cbz	r5, 800cd96 <__d2b+0x92>
 800cd6a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd6e:	4405      	add	r5, r0
 800cd70:	6035      	str	r5, [r6, #0]
 800cd72:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd78:	6018      	str	r0, [r3, #0]
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	b002      	add	sp, #8
 800cd7e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cd82:	6161      	str	r1, [r4, #20]
 800cd84:	e7e9      	b.n	800cd5a <__d2b+0x56>
 800cd86:	a801      	add	r0, sp, #4
 800cd88:	f7ff fd5b 	bl	800c842 <__lo0bits>
 800cd8c:	9b01      	ldr	r3, [sp, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	6163      	str	r3, [r4, #20]
 800cd92:	3020      	adds	r0, #32
 800cd94:	e7e7      	b.n	800cd66 <__d2b+0x62>
 800cd96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd9e:	6030      	str	r0, [r6, #0]
 800cda0:	6918      	ldr	r0, [r3, #16]
 800cda2:	f7ff fd2f 	bl	800c804 <__hi0bits>
 800cda6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdaa:	e7e4      	b.n	800cd76 <__d2b+0x72>
 800cdac:	0800e07e 	.word	0x0800e07e
 800cdb0:	0800e0a0 	.word	0x0800e0a0

0800cdb4 <__sread>:
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdbc:	f000 f8a8 	bl	800cf10 <_read_r>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	bfab      	itete	ge
 800cdc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cdc6:	89a3      	ldrhlt	r3, [r4, #12]
 800cdc8:	181b      	addge	r3, r3, r0
 800cdca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cdce:	bfac      	ite	ge
 800cdd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cdd2:	81a3      	strhlt	r3, [r4, #12]
 800cdd4:	bd10      	pop	{r4, pc}

0800cdd6 <__swrite>:
 800cdd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdda:	461f      	mov	r7, r3
 800cddc:	898b      	ldrh	r3, [r1, #12]
 800cdde:	4605      	mov	r5, r0
 800cde0:	05db      	lsls	r3, r3, #23
 800cde2:	460c      	mov	r4, r1
 800cde4:	4616      	mov	r6, r2
 800cde6:	d505      	bpl.n	800cdf4 <__swrite+0x1e>
 800cde8:	2302      	movs	r3, #2
 800cdea:	2200      	movs	r2, #0
 800cdec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf0:	f000 f87c 	bl	800ceec <_lseek_r>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	4632      	mov	r2, r6
 800cdf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	4628      	mov	r0, r5
 800ce00:	463b      	mov	r3, r7
 800ce02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0a:	f000 b8a3 	b.w	800cf54 <_write_r>

0800ce0e <__sseek>:
 800ce0e:	b510      	push	{r4, lr}
 800ce10:	460c      	mov	r4, r1
 800ce12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce16:	f000 f869 	bl	800ceec <_lseek_r>
 800ce1a:	1c43      	adds	r3, r0, #1
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	bf15      	itete	ne
 800ce20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce2a:	81a3      	strheq	r3, [r4, #12]
 800ce2c:	bf18      	it	ne
 800ce2e:	81a3      	strhne	r3, [r4, #12]
 800ce30:	bd10      	pop	{r4, pc}

0800ce32 <__sclose>:
 800ce32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce36:	f000 b849 	b.w	800cecc <_close_r>

0800ce3a <_realloc_r>:
 800ce3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3e:	4680      	mov	r8, r0
 800ce40:	4615      	mov	r5, r2
 800ce42:	460c      	mov	r4, r1
 800ce44:	b921      	cbnz	r1, 800ce50 <_realloc_r+0x16>
 800ce46:	4611      	mov	r1, r2
 800ce48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4c:	f7ff bafe 	b.w	800c44c <_malloc_r>
 800ce50:	b92a      	cbnz	r2, 800ce5e <_realloc_r+0x24>
 800ce52:	f7ff f931 	bl	800c0b8 <_free_r>
 800ce56:	2400      	movs	r4, #0
 800ce58:	4620      	mov	r0, r4
 800ce5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce5e:	f000 f8cf 	bl	800d000 <_malloc_usable_size_r>
 800ce62:	4285      	cmp	r5, r0
 800ce64:	4606      	mov	r6, r0
 800ce66:	d802      	bhi.n	800ce6e <_realloc_r+0x34>
 800ce68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ce6c:	d8f4      	bhi.n	800ce58 <_realloc_r+0x1e>
 800ce6e:	4629      	mov	r1, r5
 800ce70:	4640      	mov	r0, r8
 800ce72:	f7ff faeb 	bl	800c44c <_malloc_r>
 800ce76:	4607      	mov	r7, r0
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d0ec      	beq.n	800ce56 <_realloc_r+0x1c>
 800ce7c:	42b5      	cmp	r5, r6
 800ce7e:	462a      	mov	r2, r5
 800ce80:	4621      	mov	r1, r4
 800ce82:	bf28      	it	cs
 800ce84:	4632      	movcs	r2, r6
 800ce86:	f7fe fab8 	bl	800b3fa <memcpy>
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	4640      	mov	r0, r8
 800ce8e:	f7ff f913 	bl	800c0b8 <_free_r>
 800ce92:	463c      	mov	r4, r7
 800ce94:	e7e0      	b.n	800ce58 <_realloc_r+0x1e>

0800ce96 <memmove>:
 800ce96:	4288      	cmp	r0, r1
 800ce98:	b510      	push	{r4, lr}
 800ce9a:	eb01 0402 	add.w	r4, r1, r2
 800ce9e:	d902      	bls.n	800cea6 <memmove+0x10>
 800cea0:	4284      	cmp	r4, r0
 800cea2:	4623      	mov	r3, r4
 800cea4:	d807      	bhi.n	800ceb6 <memmove+0x20>
 800cea6:	1e43      	subs	r3, r0, #1
 800cea8:	42a1      	cmp	r1, r4
 800ceaa:	d008      	beq.n	800cebe <memmove+0x28>
 800ceac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ceb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceb4:	e7f8      	b.n	800cea8 <memmove+0x12>
 800ceb6:	4601      	mov	r1, r0
 800ceb8:	4402      	add	r2, r0
 800ceba:	428a      	cmp	r2, r1
 800cebc:	d100      	bne.n	800cec0 <memmove+0x2a>
 800cebe:	bd10      	pop	{r4, pc}
 800cec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cec4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cec8:	e7f7      	b.n	800ceba <memmove+0x24>
	...

0800cecc <_close_r>:
 800cecc:	b538      	push	{r3, r4, r5, lr}
 800cece:	2300      	movs	r3, #0
 800ced0:	4d05      	ldr	r5, [pc, #20]	@ (800cee8 <_close_r+0x1c>)
 800ced2:	4604      	mov	r4, r0
 800ced4:	4608      	mov	r0, r1
 800ced6:	602b      	str	r3, [r5, #0]
 800ced8:	f7f9 fb4d 	bl	8006576 <_close>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d102      	bne.n	800cee6 <_close_r+0x1a>
 800cee0:	682b      	ldr	r3, [r5, #0]
 800cee2:	b103      	cbz	r3, 800cee6 <_close_r+0x1a>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	20001654 	.word	0x20001654

0800ceec <_lseek_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4604      	mov	r4, r0
 800cef0:	4608      	mov	r0, r1
 800cef2:	4611      	mov	r1, r2
 800cef4:	2200      	movs	r2, #0
 800cef6:	4d05      	ldr	r5, [pc, #20]	@ (800cf0c <_lseek_r+0x20>)
 800cef8:	602a      	str	r2, [r5, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	f7f9 fb5f 	bl	80065be <_lseek>
 800cf00:	1c43      	adds	r3, r0, #1
 800cf02:	d102      	bne.n	800cf0a <_lseek_r+0x1e>
 800cf04:	682b      	ldr	r3, [r5, #0]
 800cf06:	b103      	cbz	r3, 800cf0a <_lseek_r+0x1e>
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	bd38      	pop	{r3, r4, r5, pc}
 800cf0c:	20001654 	.word	0x20001654

0800cf10 <_read_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4604      	mov	r4, r0
 800cf14:	4608      	mov	r0, r1
 800cf16:	4611      	mov	r1, r2
 800cf18:	2200      	movs	r2, #0
 800cf1a:	4d05      	ldr	r5, [pc, #20]	@ (800cf30 <_read_r+0x20>)
 800cf1c:	602a      	str	r2, [r5, #0]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	f7f9 faf0 	bl	8006504 <_read>
 800cf24:	1c43      	adds	r3, r0, #1
 800cf26:	d102      	bne.n	800cf2e <_read_r+0x1e>
 800cf28:	682b      	ldr	r3, [r5, #0]
 800cf2a:	b103      	cbz	r3, 800cf2e <_read_r+0x1e>
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	bd38      	pop	{r3, r4, r5, pc}
 800cf30:	20001654 	.word	0x20001654

0800cf34 <_sbrk_r>:
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	2300      	movs	r3, #0
 800cf38:	4d05      	ldr	r5, [pc, #20]	@ (800cf50 <_sbrk_r+0x1c>)
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	602b      	str	r3, [r5, #0]
 800cf40:	f7f9 fb4a 	bl	80065d8 <_sbrk>
 800cf44:	1c43      	adds	r3, r0, #1
 800cf46:	d102      	bne.n	800cf4e <_sbrk_r+0x1a>
 800cf48:	682b      	ldr	r3, [r5, #0]
 800cf4a:	b103      	cbz	r3, 800cf4e <_sbrk_r+0x1a>
 800cf4c:	6023      	str	r3, [r4, #0]
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
 800cf50:	20001654 	.word	0x20001654

0800cf54 <_write_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	4604      	mov	r4, r0
 800cf58:	4608      	mov	r0, r1
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	4d05      	ldr	r5, [pc, #20]	@ (800cf74 <_write_r+0x20>)
 800cf60:	602a      	str	r2, [r5, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	f7f9 faeb 	bl	800653e <_write>
 800cf68:	1c43      	adds	r3, r0, #1
 800cf6a:	d102      	bne.n	800cf72 <_write_r+0x1e>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	b103      	cbz	r3, 800cf72 <_write_r+0x1e>
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	bd38      	pop	{r3, r4, r5, pc}
 800cf74:	20001654 	.word	0x20001654

0800cf78 <__assert_func>:
 800cf78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf7a:	4614      	mov	r4, r2
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	4b09      	ldr	r3, [pc, #36]	@ (800cfa4 <__assert_func+0x2c>)
 800cf80:	4605      	mov	r5, r0
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	68d8      	ldr	r0, [r3, #12]
 800cf86:	b954      	cbnz	r4, 800cf9e <__assert_func+0x26>
 800cf88:	4b07      	ldr	r3, [pc, #28]	@ (800cfa8 <__assert_func+0x30>)
 800cf8a:	461c      	mov	r4, r3
 800cf8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf90:	9100      	str	r1, [sp, #0]
 800cf92:	462b      	mov	r3, r5
 800cf94:	4905      	ldr	r1, [pc, #20]	@ (800cfac <__assert_func+0x34>)
 800cf96:	f000 f83b 	bl	800d010 <fiprintf>
 800cf9a:	f000 f858 	bl	800d04e <abort>
 800cf9e:	4b04      	ldr	r3, [pc, #16]	@ (800cfb0 <__assert_func+0x38>)
 800cfa0:	e7f4      	b.n	800cf8c <__assert_func+0x14>
 800cfa2:	bf00      	nop
 800cfa4:	2000003c 	.word	0x2000003c
 800cfa8:	0800e33e 	.word	0x0800e33e
 800cfac:	0800e310 	.word	0x0800e310
 800cfb0:	0800e303 	.word	0x0800e303

0800cfb4 <_calloc_r>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	fba1 5402 	umull	r5, r4, r1, r2
 800cfba:	b93c      	cbnz	r4, 800cfcc <_calloc_r+0x18>
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	f7ff fa45 	bl	800c44c <_malloc_r>
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	b928      	cbnz	r0, 800cfd2 <_calloc_r+0x1e>
 800cfc6:	2600      	movs	r6, #0
 800cfc8:	4630      	mov	r0, r6
 800cfca:	bd70      	pop	{r4, r5, r6, pc}
 800cfcc:	220c      	movs	r2, #12
 800cfce:	6002      	str	r2, [r0, #0]
 800cfd0:	e7f9      	b.n	800cfc6 <_calloc_r+0x12>
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	f7fe f973 	bl	800b2c0 <memset>
 800cfda:	e7f5      	b.n	800cfc8 <_calloc_r+0x14>

0800cfdc <__ascii_mbtowc>:
 800cfdc:	b082      	sub	sp, #8
 800cfde:	b901      	cbnz	r1, 800cfe2 <__ascii_mbtowc+0x6>
 800cfe0:	a901      	add	r1, sp, #4
 800cfe2:	b142      	cbz	r2, 800cff6 <__ascii_mbtowc+0x1a>
 800cfe4:	b14b      	cbz	r3, 800cffa <__ascii_mbtowc+0x1e>
 800cfe6:	7813      	ldrb	r3, [r2, #0]
 800cfe8:	600b      	str	r3, [r1, #0]
 800cfea:	7812      	ldrb	r2, [r2, #0]
 800cfec:	1e10      	subs	r0, r2, #0
 800cfee:	bf18      	it	ne
 800cff0:	2001      	movne	r0, #1
 800cff2:	b002      	add	sp, #8
 800cff4:	4770      	bx	lr
 800cff6:	4610      	mov	r0, r2
 800cff8:	e7fb      	b.n	800cff2 <__ascii_mbtowc+0x16>
 800cffa:	f06f 0001 	mvn.w	r0, #1
 800cffe:	e7f8      	b.n	800cff2 <__ascii_mbtowc+0x16>

0800d000 <_malloc_usable_size_r>:
 800d000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d004:	1f18      	subs	r0, r3, #4
 800d006:	2b00      	cmp	r3, #0
 800d008:	bfbc      	itt	lt
 800d00a:	580b      	ldrlt	r3, [r1, r0]
 800d00c:	18c0      	addlt	r0, r0, r3
 800d00e:	4770      	bx	lr

0800d010 <fiprintf>:
 800d010:	b40e      	push	{r1, r2, r3}
 800d012:	b503      	push	{r0, r1, lr}
 800d014:	4601      	mov	r1, r0
 800d016:	ab03      	add	r3, sp, #12
 800d018:	4805      	ldr	r0, [pc, #20]	@ (800d030 <fiprintf+0x20>)
 800d01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d01e:	6800      	ldr	r0, [r0, #0]
 800d020:	9301      	str	r3, [sp, #4]
 800d022:	f000 f843 	bl	800d0ac <_vfiprintf_r>
 800d026:	b002      	add	sp, #8
 800d028:	f85d eb04 	ldr.w	lr, [sp], #4
 800d02c:	b003      	add	sp, #12
 800d02e:	4770      	bx	lr
 800d030:	2000003c 	.word	0x2000003c

0800d034 <__ascii_wctomb>:
 800d034:	4603      	mov	r3, r0
 800d036:	4608      	mov	r0, r1
 800d038:	b141      	cbz	r1, 800d04c <__ascii_wctomb+0x18>
 800d03a:	2aff      	cmp	r2, #255	@ 0xff
 800d03c:	d904      	bls.n	800d048 <__ascii_wctomb+0x14>
 800d03e:	228a      	movs	r2, #138	@ 0x8a
 800d040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d044:	601a      	str	r2, [r3, #0]
 800d046:	4770      	bx	lr
 800d048:	2001      	movs	r0, #1
 800d04a:	700a      	strb	r2, [r1, #0]
 800d04c:	4770      	bx	lr

0800d04e <abort>:
 800d04e:	2006      	movs	r0, #6
 800d050:	b508      	push	{r3, lr}
 800d052:	f000 fa83 	bl	800d55c <raise>
 800d056:	2001      	movs	r0, #1
 800d058:	f7f9 fa49 	bl	80064ee <_exit>

0800d05c <__sfputc_r>:
 800d05c:	6893      	ldr	r3, [r2, #8]
 800d05e:	b410      	push	{r4}
 800d060:	3b01      	subs	r3, #1
 800d062:	2b00      	cmp	r3, #0
 800d064:	6093      	str	r3, [r2, #8]
 800d066:	da07      	bge.n	800d078 <__sfputc_r+0x1c>
 800d068:	6994      	ldr	r4, [r2, #24]
 800d06a:	42a3      	cmp	r3, r4
 800d06c:	db01      	blt.n	800d072 <__sfputc_r+0x16>
 800d06e:	290a      	cmp	r1, #10
 800d070:	d102      	bne.n	800d078 <__sfputc_r+0x1c>
 800d072:	bc10      	pop	{r4}
 800d074:	f000 b932 	b.w	800d2dc <__swbuf_r>
 800d078:	6813      	ldr	r3, [r2, #0]
 800d07a:	1c58      	adds	r0, r3, #1
 800d07c:	6010      	str	r0, [r2, #0]
 800d07e:	7019      	strb	r1, [r3, #0]
 800d080:	4608      	mov	r0, r1
 800d082:	bc10      	pop	{r4}
 800d084:	4770      	bx	lr

0800d086 <__sfputs_r>:
 800d086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d088:	4606      	mov	r6, r0
 800d08a:	460f      	mov	r7, r1
 800d08c:	4614      	mov	r4, r2
 800d08e:	18d5      	adds	r5, r2, r3
 800d090:	42ac      	cmp	r4, r5
 800d092:	d101      	bne.n	800d098 <__sfputs_r+0x12>
 800d094:	2000      	movs	r0, #0
 800d096:	e007      	b.n	800d0a8 <__sfputs_r+0x22>
 800d098:	463a      	mov	r2, r7
 800d09a:	4630      	mov	r0, r6
 800d09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0a0:	f7ff ffdc 	bl	800d05c <__sfputc_r>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d1f3      	bne.n	800d090 <__sfputs_r+0xa>
 800d0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0ac <_vfiprintf_r>:
 800d0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b0:	460d      	mov	r5, r1
 800d0b2:	4614      	mov	r4, r2
 800d0b4:	4698      	mov	r8, r3
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	b09d      	sub	sp, #116	@ 0x74
 800d0ba:	b118      	cbz	r0, 800d0c4 <_vfiprintf_r+0x18>
 800d0bc:	6a03      	ldr	r3, [r0, #32]
 800d0be:	b90b      	cbnz	r3, 800d0c4 <_vfiprintf_r+0x18>
 800d0c0:	f7fe f8c8 	bl	800b254 <__sinit>
 800d0c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0c6:	07d9      	lsls	r1, r3, #31
 800d0c8:	d405      	bmi.n	800d0d6 <_vfiprintf_r+0x2a>
 800d0ca:	89ab      	ldrh	r3, [r5, #12]
 800d0cc:	059a      	lsls	r2, r3, #22
 800d0ce:	d402      	bmi.n	800d0d6 <_vfiprintf_r+0x2a>
 800d0d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0d2:	f7fe f982 	bl	800b3da <__retarget_lock_acquire_recursive>
 800d0d6:	89ab      	ldrh	r3, [r5, #12]
 800d0d8:	071b      	lsls	r3, r3, #28
 800d0da:	d501      	bpl.n	800d0e0 <_vfiprintf_r+0x34>
 800d0dc:	692b      	ldr	r3, [r5, #16]
 800d0de:	b99b      	cbnz	r3, 800d108 <_vfiprintf_r+0x5c>
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	f000 f938 	bl	800d358 <__swsetup_r>
 800d0e8:	b170      	cbz	r0, 800d108 <_vfiprintf_r+0x5c>
 800d0ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0ec:	07dc      	lsls	r4, r3, #31
 800d0ee:	d504      	bpl.n	800d0fa <_vfiprintf_r+0x4e>
 800d0f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0f4:	b01d      	add	sp, #116	@ 0x74
 800d0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fa:	89ab      	ldrh	r3, [r5, #12]
 800d0fc:	0598      	lsls	r0, r3, #22
 800d0fe:	d4f7      	bmi.n	800d0f0 <_vfiprintf_r+0x44>
 800d100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d102:	f7fe f96b 	bl	800b3dc <__retarget_lock_release_recursive>
 800d106:	e7f3      	b.n	800d0f0 <_vfiprintf_r+0x44>
 800d108:	2300      	movs	r3, #0
 800d10a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d10c:	2320      	movs	r3, #32
 800d10e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d112:	2330      	movs	r3, #48	@ 0x30
 800d114:	f04f 0901 	mov.w	r9, #1
 800d118:	f8cd 800c 	str.w	r8, [sp, #12]
 800d11c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d2c8 <_vfiprintf_r+0x21c>
 800d120:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d124:	4623      	mov	r3, r4
 800d126:	469a      	mov	sl, r3
 800d128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d12c:	b10a      	cbz	r2, 800d132 <_vfiprintf_r+0x86>
 800d12e:	2a25      	cmp	r2, #37	@ 0x25
 800d130:	d1f9      	bne.n	800d126 <_vfiprintf_r+0x7a>
 800d132:	ebba 0b04 	subs.w	fp, sl, r4
 800d136:	d00b      	beq.n	800d150 <_vfiprintf_r+0xa4>
 800d138:	465b      	mov	r3, fp
 800d13a:	4622      	mov	r2, r4
 800d13c:	4629      	mov	r1, r5
 800d13e:	4630      	mov	r0, r6
 800d140:	f7ff ffa1 	bl	800d086 <__sfputs_r>
 800d144:	3001      	adds	r0, #1
 800d146:	f000 80a7 	beq.w	800d298 <_vfiprintf_r+0x1ec>
 800d14a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d14c:	445a      	add	r2, fp
 800d14e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d150:	f89a 3000 	ldrb.w	r3, [sl]
 800d154:	2b00      	cmp	r3, #0
 800d156:	f000 809f 	beq.w	800d298 <_vfiprintf_r+0x1ec>
 800d15a:	2300      	movs	r3, #0
 800d15c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d164:	f10a 0a01 	add.w	sl, sl, #1
 800d168:	9304      	str	r3, [sp, #16]
 800d16a:	9307      	str	r3, [sp, #28]
 800d16c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d170:	931a      	str	r3, [sp, #104]	@ 0x68
 800d172:	4654      	mov	r4, sl
 800d174:	2205      	movs	r2, #5
 800d176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d17a:	4853      	ldr	r0, [pc, #332]	@ (800d2c8 <_vfiprintf_r+0x21c>)
 800d17c:	f7fe f92f 	bl	800b3de <memchr>
 800d180:	9a04      	ldr	r2, [sp, #16]
 800d182:	b9d8      	cbnz	r0, 800d1bc <_vfiprintf_r+0x110>
 800d184:	06d1      	lsls	r1, r2, #27
 800d186:	bf44      	itt	mi
 800d188:	2320      	movmi	r3, #32
 800d18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d18e:	0713      	lsls	r3, r2, #28
 800d190:	bf44      	itt	mi
 800d192:	232b      	movmi	r3, #43	@ 0x2b
 800d194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d198:	f89a 3000 	ldrb.w	r3, [sl]
 800d19c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d19e:	d015      	beq.n	800d1cc <_vfiprintf_r+0x120>
 800d1a0:	4654      	mov	r4, sl
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	f04f 0c0a 	mov.w	ip, #10
 800d1a8:	9a07      	ldr	r2, [sp, #28]
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1b0:	3b30      	subs	r3, #48	@ 0x30
 800d1b2:	2b09      	cmp	r3, #9
 800d1b4:	d94b      	bls.n	800d24e <_vfiprintf_r+0x1a2>
 800d1b6:	b1b0      	cbz	r0, 800d1e6 <_vfiprintf_r+0x13a>
 800d1b8:	9207      	str	r2, [sp, #28]
 800d1ba:	e014      	b.n	800d1e6 <_vfiprintf_r+0x13a>
 800d1bc:	eba0 0308 	sub.w	r3, r0, r8
 800d1c0:	fa09 f303 	lsl.w	r3, r9, r3
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	46a2      	mov	sl, r4
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	e7d2      	b.n	800d172 <_vfiprintf_r+0xc6>
 800d1cc:	9b03      	ldr	r3, [sp, #12]
 800d1ce:	1d19      	adds	r1, r3, #4
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	9103      	str	r1, [sp, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	bfbb      	ittet	lt
 800d1d8:	425b      	neglt	r3, r3
 800d1da:	f042 0202 	orrlt.w	r2, r2, #2
 800d1de:	9307      	strge	r3, [sp, #28]
 800d1e0:	9307      	strlt	r3, [sp, #28]
 800d1e2:	bfb8      	it	lt
 800d1e4:	9204      	strlt	r2, [sp, #16]
 800d1e6:	7823      	ldrb	r3, [r4, #0]
 800d1e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1ea:	d10a      	bne.n	800d202 <_vfiprintf_r+0x156>
 800d1ec:	7863      	ldrb	r3, [r4, #1]
 800d1ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1f0:	d132      	bne.n	800d258 <_vfiprintf_r+0x1ac>
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	3402      	adds	r4, #2
 800d1f6:	1d1a      	adds	r2, r3, #4
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	9203      	str	r2, [sp, #12]
 800d1fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d200:	9305      	str	r3, [sp, #20]
 800d202:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d2cc <_vfiprintf_r+0x220>
 800d206:	2203      	movs	r2, #3
 800d208:	4650      	mov	r0, sl
 800d20a:	7821      	ldrb	r1, [r4, #0]
 800d20c:	f7fe f8e7 	bl	800b3de <memchr>
 800d210:	b138      	cbz	r0, 800d222 <_vfiprintf_r+0x176>
 800d212:	2240      	movs	r2, #64	@ 0x40
 800d214:	9b04      	ldr	r3, [sp, #16]
 800d216:	eba0 000a 	sub.w	r0, r0, sl
 800d21a:	4082      	lsls	r2, r0
 800d21c:	4313      	orrs	r3, r2
 800d21e:	3401      	adds	r4, #1
 800d220:	9304      	str	r3, [sp, #16]
 800d222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d226:	2206      	movs	r2, #6
 800d228:	4829      	ldr	r0, [pc, #164]	@ (800d2d0 <_vfiprintf_r+0x224>)
 800d22a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d22e:	f7fe f8d6 	bl	800b3de <memchr>
 800d232:	2800      	cmp	r0, #0
 800d234:	d03f      	beq.n	800d2b6 <_vfiprintf_r+0x20a>
 800d236:	4b27      	ldr	r3, [pc, #156]	@ (800d2d4 <_vfiprintf_r+0x228>)
 800d238:	bb1b      	cbnz	r3, 800d282 <_vfiprintf_r+0x1d6>
 800d23a:	9b03      	ldr	r3, [sp, #12]
 800d23c:	3307      	adds	r3, #7
 800d23e:	f023 0307 	bic.w	r3, r3, #7
 800d242:	3308      	adds	r3, #8
 800d244:	9303      	str	r3, [sp, #12]
 800d246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d248:	443b      	add	r3, r7
 800d24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d24c:	e76a      	b.n	800d124 <_vfiprintf_r+0x78>
 800d24e:	460c      	mov	r4, r1
 800d250:	2001      	movs	r0, #1
 800d252:	fb0c 3202 	mla	r2, ip, r2, r3
 800d256:	e7a8      	b.n	800d1aa <_vfiprintf_r+0xfe>
 800d258:	2300      	movs	r3, #0
 800d25a:	f04f 0c0a 	mov.w	ip, #10
 800d25e:	4619      	mov	r1, r3
 800d260:	3401      	adds	r4, #1
 800d262:	9305      	str	r3, [sp, #20]
 800d264:	4620      	mov	r0, r4
 800d266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d26a:	3a30      	subs	r2, #48	@ 0x30
 800d26c:	2a09      	cmp	r2, #9
 800d26e:	d903      	bls.n	800d278 <_vfiprintf_r+0x1cc>
 800d270:	2b00      	cmp	r3, #0
 800d272:	d0c6      	beq.n	800d202 <_vfiprintf_r+0x156>
 800d274:	9105      	str	r1, [sp, #20]
 800d276:	e7c4      	b.n	800d202 <_vfiprintf_r+0x156>
 800d278:	4604      	mov	r4, r0
 800d27a:	2301      	movs	r3, #1
 800d27c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d280:	e7f0      	b.n	800d264 <_vfiprintf_r+0x1b8>
 800d282:	ab03      	add	r3, sp, #12
 800d284:	9300      	str	r3, [sp, #0]
 800d286:	462a      	mov	r2, r5
 800d288:	4630      	mov	r0, r6
 800d28a:	4b13      	ldr	r3, [pc, #76]	@ (800d2d8 <_vfiprintf_r+0x22c>)
 800d28c:	a904      	add	r1, sp, #16
 800d28e:	f7fd fb43 	bl	800a918 <_printf_float>
 800d292:	4607      	mov	r7, r0
 800d294:	1c78      	adds	r0, r7, #1
 800d296:	d1d6      	bne.n	800d246 <_vfiprintf_r+0x19a>
 800d298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d29a:	07d9      	lsls	r1, r3, #31
 800d29c:	d405      	bmi.n	800d2aa <_vfiprintf_r+0x1fe>
 800d29e:	89ab      	ldrh	r3, [r5, #12]
 800d2a0:	059a      	lsls	r2, r3, #22
 800d2a2:	d402      	bmi.n	800d2aa <_vfiprintf_r+0x1fe>
 800d2a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2a6:	f7fe f899 	bl	800b3dc <__retarget_lock_release_recursive>
 800d2aa:	89ab      	ldrh	r3, [r5, #12]
 800d2ac:	065b      	lsls	r3, r3, #25
 800d2ae:	f53f af1f 	bmi.w	800d0f0 <_vfiprintf_r+0x44>
 800d2b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2b4:	e71e      	b.n	800d0f4 <_vfiprintf_r+0x48>
 800d2b6:	ab03      	add	r3, sp, #12
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	462a      	mov	r2, r5
 800d2bc:	4630      	mov	r0, r6
 800d2be:	4b06      	ldr	r3, [pc, #24]	@ (800d2d8 <_vfiprintf_r+0x22c>)
 800d2c0:	a904      	add	r1, sp, #16
 800d2c2:	f7fd fdc7 	bl	800ae54 <_printf_i>
 800d2c6:	e7e4      	b.n	800d292 <_vfiprintf_r+0x1e6>
 800d2c8:	0800e08f 	.word	0x0800e08f
 800d2cc:	0800e095 	.word	0x0800e095
 800d2d0:	0800e099 	.word	0x0800e099
 800d2d4:	0800a919 	.word	0x0800a919
 800d2d8:	0800d087 	.word	0x0800d087

0800d2dc <__swbuf_r>:
 800d2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2de:	460e      	mov	r6, r1
 800d2e0:	4614      	mov	r4, r2
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	b118      	cbz	r0, 800d2ee <__swbuf_r+0x12>
 800d2e6:	6a03      	ldr	r3, [r0, #32]
 800d2e8:	b90b      	cbnz	r3, 800d2ee <__swbuf_r+0x12>
 800d2ea:	f7fd ffb3 	bl	800b254 <__sinit>
 800d2ee:	69a3      	ldr	r3, [r4, #24]
 800d2f0:	60a3      	str	r3, [r4, #8]
 800d2f2:	89a3      	ldrh	r3, [r4, #12]
 800d2f4:	071a      	lsls	r2, r3, #28
 800d2f6:	d501      	bpl.n	800d2fc <__swbuf_r+0x20>
 800d2f8:	6923      	ldr	r3, [r4, #16]
 800d2fa:	b943      	cbnz	r3, 800d30e <__swbuf_r+0x32>
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	4628      	mov	r0, r5
 800d300:	f000 f82a 	bl	800d358 <__swsetup_r>
 800d304:	b118      	cbz	r0, 800d30e <__swbuf_r+0x32>
 800d306:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d30a:	4638      	mov	r0, r7
 800d30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	6922      	ldr	r2, [r4, #16]
 800d312:	b2f6      	uxtb	r6, r6
 800d314:	1a98      	subs	r0, r3, r2
 800d316:	6963      	ldr	r3, [r4, #20]
 800d318:	4637      	mov	r7, r6
 800d31a:	4283      	cmp	r3, r0
 800d31c:	dc05      	bgt.n	800d32a <__swbuf_r+0x4e>
 800d31e:	4621      	mov	r1, r4
 800d320:	4628      	mov	r0, r5
 800d322:	f7ff f993 	bl	800c64c <_fflush_r>
 800d326:	2800      	cmp	r0, #0
 800d328:	d1ed      	bne.n	800d306 <__swbuf_r+0x2a>
 800d32a:	68a3      	ldr	r3, [r4, #8]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	60a3      	str	r3, [r4, #8]
 800d330:	6823      	ldr	r3, [r4, #0]
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	6022      	str	r2, [r4, #0]
 800d336:	701e      	strb	r6, [r3, #0]
 800d338:	6962      	ldr	r2, [r4, #20]
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d004      	beq.n	800d34a <__swbuf_r+0x6e>
 800d340:	89a3      	ldrh	r3, [r4, #12]
 800d342:	07db      	lsls	r3, r3, #31
 800d344:	d5e1      	bpl.n	800d30a <__swbuf_r+0x2e>
 800d346:	2e0a      	cmp	r6, #10
 800d348:	d1df      	bne.n	800d30a <__swbuf_r+0x2e>
 800d34a:	4621      	mov	r1, r4
 800d34c:	4628      	mov	r0, r5
 800d34e:	f7ff f97d 	bl	800c64c <_fflush_r>
 800d352:	2800      	cmp	r0, #0
 800d354:	d0d9      	beq.n	800d30a <__swbuf_r+0x2e>
 800d356:	e7d6      	b.n	800d306 <__swbuf_r+0x2a>

0800d358 <__swsetup_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4b29      	ldr	r3, [pc, #164]	@ (800d400 <__swsetup_r+0xa8>)
 800d35c:	4605      	mov	r5, r0
 800d35e:	6818      	ldr	r0, [r3, #0]
 800d360:	460c      	mov	r4, r1
 800d362:	b118      	cbz	r0, 800d36c <__swsetup_r+0x14>
 800d364:	6a03      	ldr	r3, [r0, #32]
 800d366:	b90b      	cbnz	r3, 800d36c <__swsetup_r+0x14>
 800d368:	f7fd ff74 	bl	800b254 <__sinit>
 800d36c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d370:	0719      	lsls	r1, r3, #28
 800d372:	d422      	bmi.n	800d3ba <__swsetup_r+0x62>
 800d374:	06da      	lsls	r2, r3, #27
 800d376:	d407      	bmi.n	800d388 <__swsetup_r+0x30>
 800d378:	2209      	movs	r2, #9
 800d37a:	602a      	str	r2, [r5, #0]
 800d37c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d384:	81a3      	strh	r3, [r4, #12]
 800d386:	e033      	b.n	800d3f0 <__swsetup_r+0x98>
 800d388:	0758      	lsls	r0, r3, #29
 800d38a:	d512      	bpl.n	800d3b2 <__swsetup_r+0x5a>
 800d38c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d38e:	b141      	cbz	r1, 800d3a2 <__swsetup_r+0x4a>
 800d390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d394:	4299      	cmp	r1, r3
 800d396:	d002      	beq.n	800d39e <__swsetup_r+0x46>
 800d398:	4628      	mov	r0, r5
 800d39a:	f7fe fe8d 	bl	800c0b8 <_free_r>
 800d39e:	2300      	movs	r3, #0
 800d3a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3a2:	89a3      	ldrh	r3, [r4, #12]
 800d3a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	6063      	str	r3, [r4, #4]
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	89a3      	ldrh	r3, [r4, #12]
 800d3b4:	f043 0308 	orr.w	r3, r3, #8
 800d3b8:	81a3      	strh	r3, [r4, #12]
 800d3ba:	6923      	ldr	r3, [r4, #16]
 800d3bc:	b94b      	cbnz	r3, 800d3d2 <__swsetup_r+0x7a>
 800d3be:	89a3      	ldrh	r3, [r4, #12]
 800d3c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d3c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3c8:	d003      	beq.n	800d3d2 <__swsetup_r+0x7a>
 800d3ca:	4621      	mov	r1, r4
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	f000 f83e 	bl	800d44e <__smakebuf_r>
 800d3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3d6:	f013 0201 	ands.w	r2, r3, #1
 800d3da:	d00a      	beq.n	800d3f2 <__swsetup_r+0x9a>
 800d3dc:	2200      	movs	r2, #0
 800d3de:	60a2      	str	r2, [r4, #8]
 800d3e0:	6962      	ldr	r2, [r4, #20]
 800d3e2:	4252      	negs	r2, r2
 800d3e4:	61a2      	str	r2, [r4, #24]
 800d3e6:	6922      	ldr	r2, [r4, #16]
 800d3e8:	b942      	cbnz	r2, 800d3fc <__swsetup_r+0xa4>
 800d3ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d3ee:	d1c5      	bne.n	800d37c <__swsetup_r+0x24>
 800d3f0:	bd38      	pop	{r3, r4, r5, pc}
 800d3f2:	0799      	lsls	r1, r3, #30
 800d3f4:	bf58      	it	pl
 800d3f6:	6962      	ldrpl	r2, [r4, #20]
 800d3f8:	60a2      	str	r2, [r4, #8]
 800d3fa:	e7f4      	b.n	800d3e6 <__swsetup_r+0x8e>
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	e7f7      	b.n	800d3f0 <__swsetup_r+0x98>
 800d400:	2000003c 	.word	0x2000003c

0800d404 <__swhatbuf_r>:
 800d404:	b570      	push	{r4, r5, r6, lr}
 800d406:	460c      	mov	r4, r1
 800d408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d40c:	4615      	mov	r5, r2
 800d40e:	2900      	cmp	r1, #0
 800d410:	461e      	mov	r6, r3
 800d412:	b096      	sub	sp, #88	@ 0x58
 800d414:	da0c      	bge.n	800d430 <__swhatbuf_r+0x2c>
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	2100      	movs	r1, #0
 800d41a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d41e:	bf14      	ite	ne
 800d420:	2340      	movne	r3, #64	@ 0x40
 800d422:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d426:	2000      	movs	r0, #0
 800d428:	6031      	str	r1, [r6, #0]
 800d42a:	602b      	str	r3, [r5, #0]
 800d42c:	b016      	add	sp, #88	@ 0x58
 800d42e:	bd70      	pop	{r4, r5, r6, pc}
 800d430:	466a      	mov	r2, sp
 800d432:	f000 f849 	bl	800d4c8 <_fstat_r>
 800d436:	2800      	cmp	r0, #0
 800d438:	dbed      	blt.n	800d416 <__swhatbuf_r+0x12>
 800d43a:	9901      	ldr	r1, [sp, #4]
 800d43c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d440:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d444:	4259      	negs	r1, r3
 800d446:	4159      	adcs	r1, r3
 800d448:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d44c:	e7eb      	b.n	800d426 <__swhatbuf_r+0x22>

0800d44e <__smakebuf_r>:
 800d44e:	898b      	ldrh	r3, [r1, #12]
 800d450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d452:	079d      	lsls	r5, r3, #30
 800d454:	4606      	mov	r6, r0
 800d456:	460c      	mov	r4, r1
 800d458:	d507      	bpl.n	800d46a <__smakebuf_r+0x1c>
 800d45a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d45e:	6023      	str	r3, [r4, #0]
 800d460:	6123      	str	r3, [r4, #16]
 800d462:	2301      	movs	r3, #1
 800d464:	6163      	str	r3, [r4, #20]
 800d466:	b003      	add	sp, #12
 800d468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d46a:	466a      	mov	r2, sp
 800d46c:	ab01      	add	r3, sp, #4
 800d46e:	f7ff ffc9 	bl	800d404 <__swhatbuf_r>
 800d472:	9f00      	ldr	r7, [sp, #0]
 800d474:	4605      	mov	r5, r0
 800d476:	4639      	mov	r1, r7
 800d478:	4630      	mov	r0, r6
 800d47a:	f7fe ffe7 	bl	800c44c <_malloc_r>
 800d47e:	b948      	cbnz	r0, 800d494 <__smakebuf_r+0x46>
 800d480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d484:	059a      	lsls	r2, r3, #22
 800d486:	d4ee      	bmi.n	800d466 <__smakebuf_r+0x18>
 800d488:	f023 0303 	bic.w	r3, r3, #3
 800d48c:	f043 0302 	orr.w	r3, r3, #2
 800d490:	81a3      	strh	r3, [r4, #12]
 800d492:	e7e2      	b.n	800d45a <__smakebuf_r+0xc>
 800d494:	89a3      	ldrh	r3, [r4, #12]
 800d496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d49a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d49e:	81a3      	strh	r3, [r4, #12]
 800d4a0:	9b01      	ldr	r3, [sp, #4]
 800d4a2:	6020      	str	r0, [r4, #0]
 800d4a4:	b15b      	cbz	r3, 800d4be <__smakebuf_r+0x70>
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4ac:	f000 f81e 	bl	800d4ec <_isatty_r>
 800d4b0:	b128      	cbz	r0, 800d4be <__smakebuf_r+0x70>
 800d4b2:	89a3      	ldrh	r3, [r4, #12]
 800d4b4:	f023 0303 	bic.w	r3, r3, #3
 800d4b8:	f043 0301 	orr.w	r3, r3, #1
 800d4bc:	81a3      	strh	r3, [r4, #12]
 800d4be:	89a3      	ldrh	r3, [r4, #12]
 800d4c0:	431d      	orrs	r5, r3
 800d4c2:	81a5      	strh	r5, [r4, #12]
 800d4c4:	e7cf      	b.n	800d466 <__smakebuf_r+0x18>
	...

0800d4c8 <_fstat_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	4d06      	ldr	r5, [pc, #24]	@ (800d4e8 <_fstat_r+0x20>)
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	f7f9 f859 	bl	800658c <_fstat>
 800d4da:	1c43      	adds	r3, r0, #1
 800d4dc:	d102      	bne.n	800d4e4 <_fstat_r+0x1c>
 800d4de:	682b      	ldr	r3, [r5, #0]
 800d4e0:	b103      	cbz	r3, 800d4e4 <_fstat_r+0x1c>
 800d4e2:	6023      	str	r3, [r4, #0]
 800d4e4:	bd38      	pop	{r3, r4, r5, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20001654 	.word	0x20001654

0800d4ec <_isatty_r>:
 800d4ec:	b538      	push	{r3, r4, r5, lr}
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	4d05      	ldr	r5, [pc, #20]	@ (800d508 <_isatty_r+0x1c>)
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	4608      	mov	r0, r1
 800d4f6:	602b      	str	r3, [r5, #0]
 800d4f8:	f7f9 f857 	bl	80065aa <_isatty>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	d102      	bne.n	800d506 <_isatty_r+0x1a>
 800d500:	682b      	ldr	r3, [r5, #0]
 800d502:	b103      	cbz	r3, 800d506 <_isatty_r+0x1a>
 800d504:	6023      	str	r3, [r4, #0]
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	20001654 	.word	0x20001654

0800d50c <_raise_r>:
 800d50c:	291f      	cmp	r1, #31
 800d50e:	b538      	push	{r3, r4, r5, lr}
 800d510:	4605      	mov	r5, r0
 800d512:	460c      	mov	r4, r1
 800d514:	d904      	bls.n	800d520 <_raise_r+0x14>
 800d516:	2316      	movs	r3, #22
 800d518:	6003      	str	r3, [r0, #0]
 800d51a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d51e:	bd38      	pop	{r3, r4, r5, pc}
 800d520:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d522:	b112      	cbz	r2, 800d52a <_raise_r+0x1e>
 800d524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d528:	b94b      	cbnz	r3, 800d53e <_raise_r+0x32>
 800d52a:	4628      	mov	r0, r5
 800d52c:	f000 f830 	bl	800d590 <_getpid_r>
 800d530:	4622      	mov	r2, r4
 800d532:	4601      	mov	r1, r0
 800d534:	4628      	mov	r0, r5
 800d536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d53a:	f000 b817 	b.w	800d56c <_kill_r>
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d00a      	beq.n	800d558 <_raise_r+0x4c>
 800d542:	1c59      	adds	r1, r3, #1
 800d544:	d103      	bne.n	800d54e <_raise_r+0x42>
 800d546:	2316      	movs	r3, #22
 800d548:	6003      	str	r3, [r0, #0]
 800d54a:	2001      	movs	r0, #1
 800d54c:	e7e7      	b.n	800d51e <_raise_r+0x12>
 800d54e:	2100      	movs	r1, #0
 800d550:	4620      	mov	r0, r4
 800d552:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d556:	4798      	blx	r3
 800d558:	2000      	movs	r0, #0
 800d55a:	e7e0      	b.n	800d51e <_raise_r+0x12>

0800d55c <raise>:
 800d55c:	4b02      	ldr	r3, [pc, #8]	@ (800d568 <raise+0xc>)
 800d55e:	4601      	mov	r1, r0
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	f7ff bfd3 	b.w	800d50c <_raise_r>
 800d566:	bf00      	nop
 800d568:	2000003c 	.word	0x2000003c

0800d56c <_kill_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	2300      	movs	r3, #0
 800d570:	4d06      	ldr	r5, [pc, #24]	@ (800d58c <_kill_r+0x20>)
 800d572:	4604      	mov	r4, r0
 800d574:	4608      	mov	r0, r1
 800d576:	4611      	mov	r1, r2
 800d578:	602b      	str	r3, [r5, #0]
 800d57a:	f7f8 ffa8 	bl	80064ce <_kill>
 800d57e:	1c43      	adds	r3, r0, #1
 800d580:	d102      	bne.n	800d588 <_kill_r+0x1c>
 800d582:	682b      	ldr	r3, [r5, #0]
 800d584:	b103      	cbz	r3, 800d588 <_kill_r+0x1c>
 800d586:	6023      	str	r3, [r4, #0]
 800d588:	bd38      	pop	{r3, r4, r5, pc}
 800d58a:	bf00      	nop
 800d58c:	20001654 	.word	0x20001654

0800d590 <_getpid_r>:
 800d590:	f7f8 bf96 	b.w	80064c0 <_getpid>

0800d594 <_init>:
 800d594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d596:	bf00      	nop
 800d598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d59a:	bc08      	pop	{r3}
 800d59c:	469e      	mov	lr, r3
 800d59e:	4770      	bx	lr

0800d5a0 <_fini>:
 800d5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a2:	bf00      	nop
 800d5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5a6:	bc08      	pop	{r3}
 800d5a8:	469e      	mov	lr, r3
 800d5aa:	4770      	bx	lr
