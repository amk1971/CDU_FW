
demoNextionComm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004e48  08004e48  00005e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f20  08004f20  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f28  08004f28  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f28  08004f28  00005f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f2c  08004f2c  00005f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004f30  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006078  2**0
                  CONTENTS
 10 .bss          000001b4  20000078  20000078  00006078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00006078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008318  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000172c  00000000  00000000  0000e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  0000faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000555  00000000  00000000  000101f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203e2  00000000  00000000  00010745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008fd6  00000000  00000000  00030b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3461  00000000  00000000  00039afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fcf5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025a0  00000000  00000000  000fcfa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000ff544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e2c 	.word	0x08004e2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004e2c 	.word	0x08004e2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96a 	b.w	8000e84 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	460c      	mov	r4, r1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d14e      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	458c      	cmp	ip, r1
 8000bd8:	4686      	mov	lr, r0
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	d962      	bls.n	8000ca6 <__udivmoddi4+0xde>
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0320 	rsb	r3, r2, #32
 8000be6:	4091      	lsls	r1, r2
 8000be8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf0:	4319      	orrs	r1, r3
 8000bf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f f68c 	uxth.w	r6, ip
 8000bfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c06:	fb07 1114 	mls	r1, r7, r4, r1
 8000c0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0e:	fb04 f106 	mul.w	r1, r4, r6
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c1e:	f080 8112 	bcs.w	8000e46 <__udivmoddi4+0x27e>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 810f 	bls.w	8000e46 <__udivmoddi4+0x27e>
 8000c28:	3c02      	subs	r4, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a59      	subs	r1, r3, r1
 8000c2e:	fa1f f38e 	uxth.w	r3, lr
 8000c32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c36:	fb07 1110 	mls	r1, r7, r0, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb00 f606 	mul.w	r6, r0, r6
 8000c42:	429e      	cmp	r6, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x94>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c4e:	f080 80fc 	bcs.w	8000e4a <__udivmoddi4+0x282>
 8000c52:	429e      	cmp	r6, r3
 8000c54:	f240 80f9 	bls.w	8000e4a <__udivmoddi4+0x282>
 8000c58:	4463      	add	r3, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11d      	cbz	r5, 8000c6e <__udivmoddi4+0xa6>
 8000c66:	40d3      	lsrs	r3, r2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d905      	bls.n	8000c82 <__udivmoddi4+0xba>
 8000c76:	b10d      	cbz	r5, 8000c7c <__udivmoddi4+0xb4>
 8000c78:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e7f5      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000c82:	fab3 f183 	clz	r1, r3
 8000c86:	2900      	cmp	r1, #0
 8000c88:	d146      	bne.n	8000d18 <__udivmoddi4+0x150>
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xcc>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f0c0 80f0 	bcc.w	8000e74 <__udivmoddi4+0x2ac>
 8000c94:	1a86      	subs	r6, r0, r2
 8000c96:	eb64 0303 	sbc.w	r3, r4, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d0e6      	beq.n	8000c6e <__udivmoddi4+0xa6>
 8000ca0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ca4:	e7e3      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x204>
 8000cac:	eba1 040c 	sub.w	r4, r1, ip
 8000cb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb4:	fa1f f78c 	uxth.w	r7, ip
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb07 f006 	mul.w	r0, r7, r6
 8000cce:	4298      	cmp	r0, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x11c>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x11a>
 8000cdc:	4298      	cmp	r0, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000ce2:	4626      	mov	r6, r4
 8000ce4:	1a1c      	subs	r4, r3, r0
 8000ce6:	fa1f f38e 	uxth.w	r3, lr
 8000cea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cee:	fb08 4410 	mls	r4, r8, r0, r4
 8000cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf6:	fb00 f707 	mul.w	r7, r0, r7
 8000cfa:	429f      	cmp	r7, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x148>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x146>
 8000d08:	429f      	cmp	r7, r3
 8000d0a:	f200 80b0 	bhi.w	8000e6e <__udivmoddi4+0x2a6>
 8000d0e:	4620      	mov	r0, r4
 8000d10:	1bdb      	subs	r3, r3, r7
 8000d12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d16:	e7a5      	b.n	8000c64 <__udivmoddi4+0x9c>
 8000d18:	f1c1 0620 	rsb	r6, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d22:	431f      	orrs	r7, r3
 8000d24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d28:	fa04 f301 	lsl.w	r3, r4, r1
 8000d2c:	ea43 030c 	orr.w	r3, r3, ip
 8000d30:	40f4      	lsrs	r4, r6
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	0c38      	lsrs	r0, r7, #16
 8000d38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d40:	fa1f fc87 	uxth.w	ip, r7
 8000d44:	fb00 441e 	mls	r4, r0, lr, r4
 8000d48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	fa02 f201 	lsl.w	r2, r2, r1
 8000d56:	d90a      	bls.n	8000d6e <__udivmoddi4+0x1a6>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d5e:	f080 8084 	bcs.w	8000e6a <__udivmoddi4+0x2a2>
 8000d62:	45a1      	cmp	r9, r4
 8000d64:	f240 8081 	bls.w	8000e6a <__udivmoddi4+0x2a2>
 8000d68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	eba4 0409 	sub.w	r4, r4, r9
 8000d72:	fa1f f983 	uxth.w	r9, r3
 8000d76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x1d2>
 8000d8a:	193c      	adds	r4, r7, r4
 8000d8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d90:	d267      	bcs.n	8000e62 <__udivmoddi4+0x29a>
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d965      	bls.n	8000e62 <__udivmoddi4+0x29a>
 8000d96:	3b02      	subs	r3, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000da2:	eba4 040c 	sub.w	r4, r4, ip
 8000da6:	429c      	cmp	r4, r3
 8000da8:	46ce      	mov	lr, r9
 8000daa:	469c      	mov	ip, r3
 8000dac:	d351      	bcc.n	8000e52 <__udivmoddi4+0x28a>
 8000dae:	d04e      	beq.n	8000e4e <__udivmoddi4+0x286>
 8000db0:	b155      	cbz	r5, 8000dc8 <__udivmoddi4+0x200>
 8000db2:	ebb8 030e 	subs.w	r3, r8, lr
 8000db6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dba:	fa04 f606 	lsl.w	r6, r4, r6
 8000dbe:	40cb      	lsrs	r3, r1
 8000dc0:	431e      	orrs	r6, r3
 8000dc2:	40cc      	lsrs	r4, r1
 8000dc4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e750      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ddc:	4094      	lsls	r4, r2
 8000dde:	430c      	orrs	r4, r1
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de8:	fa1f f78c 	uxth.w	r7, ip
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3110 	mls	r1, r8, r0, r3
 8000df4:	0c23      	lsrs	r3, r4, #16
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f107 	mul.w	r1, r0, r7
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x24c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e0a:	d22c      	bcs.n	8000e66 <__udivmoddi4+0x29e>
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	d92a      	bls.n	8000e66 <__udivmoddi4+0x29e>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e24:	fb01 f307 	mul.w	r3, r1, r7
 8000e28:	42a3      	cmp	r3, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x276>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e34:	d213      	bcs.n	8000e5e <__udivmoddi4+0x296>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d911      	bls.n	8000e5e <__udivmoddi4+0x296>
 8000e3a:	3902      	subs	r1, #2
 8000e3c:	4464      	add	r4, ip
 8000e3e:	1ae4      	subs	r4, r4, r3
 8000e40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e44:	e739      	b.n	8000cba <__udivmoddi4+0xf2>
 8000e46:	4604      	mov	r4, r0
 8000e48:	e6f0      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e706      	b.n	8000c5c <__udivmoddi4+0x94>
 8000e4e:	45c8      	cmp	r8, r9
 8000e50:	d2ae      	bcs.n	8000db0 <__udivmoddi4+0x1e8>
 8000e52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e5a:	3801      	subs	r0, #1
 8000e5c:	e7a8      	b.n	8000db0 <__udivmoddi4+0x1e8>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	e7ed      	b.n	8000e3e <__udivmoddi4+0x276>
 8000e62:	4603      	mov	r3, r0
 8000e64:	e799      	b.n	8000d9a <__udivmoddi4+0x1d2>
 8000e66:	4630      	mov	r0, r6
 8000e68:	e7d4      	b.n	8000e14 <__udivmoddi4+0x24c>
 8000e6a:	46d6      	mov	lr, sl
 8000e6c:	e77f      	b.n	8000d6e <__udivmoddi4+0x1a6>
 8000e6e:	4463      	add	r3, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e74d      	b.n	8000d10 <__udivmoddi4+0x148>
 8000e74:	4606      	mov	r6, r0
 8000e76:	4623      	mov	r3, r4
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e70f      	b.n	8000c9c <__udivmoddi4+0xd4>
 8000e7c:	3e02      	subs	r6, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	e730      	b.n	8000ce4 <__udivmoddi4+0x11c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <nextion_sendstr>:

uint16_t TIMEOUT = 1000;
uint8_t endCmd[3] = {0xff, 0xff, 0xff};

void nextion_sendstr(char *id, char *string)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b090      	sub	sp, #64	@ 0x40
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	char buffer[50];
	int len = sprintf((char *)buffer, "%s.txt=\"%s\"",id, string);
 8000e92:	f107 0008 	add.w	r0, r7, #8
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	490e      	ldr	r1, [pc, #56]	@ (8000ed4 <nextion_sendstr+0x4c>)
 8000e9c:	f002 fc74 	bl	8003788 <siprintf>
 8000ea0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart4, (uint8_t *)buffer, len, TIMEOUT);
 8000ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <nextion_sendstr+0x50>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	f107 0108 	add.w	r1, r7, #8
 8000eae:	480b      	ldr	r0, [pc, #44]	@ (8000edc <nextion_sendstr+0x54>)
 8000eb0:	f001 fbfa 	bl	80026a8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t *)endCmd, 3, TIMEOUT/10);
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <nextion_sendstr+0x50>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	4a09      	ldr	r2, [pc, #36]	@ (8000ee0 <nextion_sendstr+0x58>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	08db      	lsrs	r3, r3, #3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	4907      	ldr	r1, [pc, #28]	@ (8000ee4 <nextion_sendstr+0x5c>)
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <nextion_sendstr+0x54>)
 8000ec8:	f001 fbee 	bl	80026a8 <HAL_UART_Transmit>
}
 8000ecc:	bf00      	nop
 8000ece:	3740      	adds	r7, #64	@ 0x40
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	08004e48 	.word	0x08004e48
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000094 	.word	0x20000094
 8000ee0:	cccccccd 	.word	0xcccccccd
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <nextion_changePage>:

void nextion_changePage(char *pageName)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    char buffer[20];
    int len = sprintf((char *)buffer, "page %s", pageName);
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	490f      	ldr	r1, [pc, #60]	@ (8000f34 <nextion_changePage+0x4c>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fc45 	bl	8003788 <siprintf>
 8000efe:	61f8      	str	r0, [r7, #28]
    HAL_UART_Transmit(&huart4, (uint8_t *)buffer, len, TIMEOUT);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <nextion_changePage+0x50>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	f107 0108 	add.w	r1, r7, #8
 8000f0c:	480b      	ldr	r0, [pc, #44]	@ (8000f3c <nextion_changePage+0x54>)
 8000f0e:	f001 fbcb 	bl	80026a8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart4, (uint8_t *)endCmd, 3, TIMEOUT/10);
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <nextion_changePage+0x50>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <nextion_changePage+0x58>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	2203      	movs	r2, #3
 8000f22:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <nextion_changePage+0x5c>)
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <nextion_changePage+0x54>)
 8000f26:	f001 fbbf 	bl	80026a8 <HAL_UART_Transmit>
}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	08004e54 	.word	0x08004e54
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000094 	.word	0x20000094
 8000f40:	cccccccd 	.word	0xcccccccd
 8000f44:	20000004 	.word	0x20000004

08000f48 <nextion_sendnum>:

void nextion_sendnum(char *obj, int16_t num)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
	uint8_t *buffer = malloc(30 * sizeof(char));//30 bytes of buffer
 8000f54:	201e      	movs	r0, #30
 8000f56:	f002 fb59 	bl	800360c <malloc>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	60fb      	str	r3, [r7, #12]
	int len = sprintf((char *)buffer, "%s.val=%d", obj, num);
 8000f5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	490f      	ldr	r1, [pc, #60]	@ (8000fa4 <nextion_sendnum+0x5c>)
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f002 fc0e 	bl	8003788 <siprintf>
 8000f6c:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart4, (uint8_t *)buffer, len, TIMEOUT);
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <nextion_sendnum+0x60>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	68f9      	ldr	r1, [r7, #12]
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <nextion_sendnum+0x64>)
 8000f7a:	f001 fb95 	bl	80026a8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t *)endCmd, 3, TIMEOUT/10);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <nextion_sendnum+0x60>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <nextion_sendnum+0x68>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	08db      	lsrs	r3, r3, #3
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	4909      	ldr	r1, [pc, #36]	@ (8000fb4 <nextion_sendnum+0x6c>)
 8000f90:	4806      	ldr	r0, [pc, #24]	@ (8000fac <nextion_sendnum+0x64>)
 8000f92:	f001 fb89 	bl	80026a8 <HAL_UART_Transmit>
	free(buffer);
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f002 fb40 	bl	800361c <free>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	08004e5c 	.word	0x08004e5c
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000094 	.word	0x20000094
 8000fb0:	cccccccd 	.word	0xcccccccd
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <nextion_sendfloat>:

void nextion_sendfloat(char *obj, float num, uint16_t dp)
{
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	80fb      	strh	r3, [r7, #6]
	// covert first to integer
	int16_t number = num*(pow(10,dp));
 8000fc8:	68b8      	ldr	r0, [r7, #8]
 8000fca:	f7ff fab5 	bl	8000538 <__aeabi_f2d>
 8000fce:	4604      	mov	r4, r0
 8000fd0:	460d      	mov	r5, r1
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa8d 	bl	80004f4 <__aeabi_ui2d>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	ec43 2b11 	vmov	d1, r2, r3
 8000fe2:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8001090 <nextion_sendfloat+0xd8>
 8000fe6:	f002 ffc1 	bl	8003f6c <pow>
 8000fea:	ec53 2b10 	vmov	r2, r3, d0
 8000fee:	4620      	mov	r0, r4
 8000ff0:	4629      	mov	r1, r5
 8000ff2:	f7ff faf9 	bl	80005e8 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fda3 	bl	8000b48 <__aeabi_d2iz>
 8001002:	4603      	mov	r3, r0
 8001004:	83fb      	strh	r3, [r7, #30]
	uint8_t *buffer = malloc(30 * sizeof(char));//30 bytes of buffer
 8001006:	201e      	movs	r0, #30
 8001008:	f002 fb00 	bl	800360c <malloc>
 800100c:	4603      	mov	r3, r0
 800100e:	61bb      	str	r3, [r7, #24]

	int len = sprintf((char *)buffer, "%s.vvs1=%d", obj, dp);
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4920      	ldr	r1, [pc, #128]	@ (8001098 <nextion_sendfloat+0xe0>)
 8001016:	69b8      	ldr	r0, [r7, #24]
 8001018:	f002 fbb6 	bl	8003788 <siprintf>
 800101c:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart4, (uint8_t *)buffer, len, TIMEOUT);
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <nextion_sendfloat+0xe4>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	481d      	ldr	r0, [pc, #116]	@ (80010a0 <nextion_sendfloat+0xe8>)
 800102a:	f001 fb3d 	bl	80026a8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t *)endCmd, 3, TIMEOUT/10);
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <nextion_sendfloat+0xe4>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	4a1c      	ldr	r2, [pc, #112]	@ (80010a4 <nextion_sendfloat+0xec>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	b29b      	uxth	r3, r3
 800103c:	2203      	movs	r2, #3
 800103e:	491a      	ldr	r1, [pc, #104]	@ (80010a8 <nextion_sendfloat+0xf0>)
 8001040:	4817      	ldr	r0, [pc, #92]	@ (80010a0 <nextion_sendfloat+0xe8>)
 8001042:	f001 fb31 	bl	80026a8 <HAL_UART_Transmit>

	len = sprintf((char *)buffer, "%s.val=%d", obj, number);
 8001046:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4917      	ldr	r1, [pc, #92]	@ (80010ac <nextion_sendfloat+0xf4>)
 800104e:	69b8      	ldr	r0, [r7, #24]
 8001050:	f002 fb9a 	bl	8003788 <siprintf>
 8001054:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart4, (uint8_t *)buffer, len, TIMEOUT);
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <nextion_sendfloat+0xe4>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	69b9      	ldr	r1, [r7, #24]
 8001060:	480f      	ldr	r0, [pc, #60]	@ (80010a0 <nextion_sendfloat+0xe8>)
 8001062:	f001 fb21 	bl	80026a8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t *)endCmd, 3, TIMEOUT/10);
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <nextion_sendfloat+0xe4>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <nextion_sendfloat+0xec>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	b29b      	uxth	r3, r3
 8001074:	2203      	movs	r2, #3
 8001076:	490c      	ldr	r1, [pc, #48]	@ (80010a8 <nextion_sendfloat+0xf0>)
 8001078:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <nextion_sendfloat+0xe8>)
 800107a:	f001 fb15 	bl	80026a8 <HAL_UART_Transmit>
	free(buffer);
 800107e:	69b8      	ldr	r0, [r7, #24]
 8001080:	f002 facc 	bl	800361c <free>
}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bdb0      	pop	{r4, r5, r7, pc}
 800108c:	f3af 8000 	nop.w
 8001090:	00000000 	.word	0x00000000
 8001094:	40240000 	.word	0x40240000
 8001098:	08004e68 	.word	0x08004e68
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000094 	.word	0x20000094
 80010a4:	cccccccd 	.word	0xcccccccd
 80010a8:	20000004 	.word	0x20000004
 80010ac:	08004e5c 	.word	0x08004e5c

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b4:	f000 fa3a 	bl	800152c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b8:	f000 f860 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010bc:	f000 f8f2 	bl	80012a4 <MX_GPIO_Init>
  MX_UART4_Init();
 80010c0:	f000 f8c6 	bl	8001250 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  nextion_sendstr("t0","ali");
 80010c4:	4921      	ldr	r1, [pc, #132]	@ (800114c <main+0x9c>)
 80010c6:	4822      	ldr	r0, [pc, #136]	@ (8001150 <main+0xa0>)
 80010c8:	f7ff fede 	bl	8000e88 <nextion_sendstr>
	  nextion_sendstr("t1","huzaifa");
 80010cc:	4921      	ldr	r1, [pc, #132]	@ (8001154 <main+0xa4>)
 80010ce:	4822      	ldr	r0, [pc, #136]	@ (8001158 <main+0xa8>)
 80010d0:	f7ff feda 	bl	8000e88 <nextion_sendstr>

	  HAL_Delay(1000);
 80010d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010d8:	f000 fa9a 	bl	8001610 <HAL_Delay>

	  nextion_sendstr("t0","ila");
 80010dc:	491f      	ldr	r1, [pc, #124]	@ (800115c <main+0xac>)
 80010de:	481c      	ldr	r0, [pc, #112]	@ (8001150 <main+0xa0>)
 80010e0:	f7ff fed2 	bl	8000e88 <nextion_sendstr>
	  nextion_sendstr("t1","afiazuh");
 80010e4:	491e      	ldr	r1, [pc, #120]	@ (8001160 <main+0xb0>)
 80010e6:	481c      	ldr	r0, [pc, #112]	@ (8001158 <main+0xa8>)
 80010e8:	f7ff fece 	bl	8000e88 <nextion_sendstr>

	  HAL_Delay(1000);
 80010ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010f0:	f000 fa8e 	bl	8001610 <HAL_Delay>

	  nextion_changePage("1");
 80010f4:	481b      	ldr	r0, [pc, #108]	@ (8001164 <main+0xb4>)
 80010f6:	f7ff fef7 	bl	8000ee8 <nextion_changePage>

	  HAL_Delay(1000);
 80010fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010fe:	f000 fa87 	bl	8001610 <HAL_Delay>

	  nextion_sendnum("n0", 237);
 8001102:	21ed      	movs	r1, #237	@ 0xed
 8001104:	4818      	ldr	r0, [pc, #96]	@ (8001168 <main+0xb8>)
 8001106:	f7ff ff1f 	bl	8000f48 <nextion_sendnum>
	  nextion_sendfloat("x0", 123765, 3);
 800110a:	2103      	movs	r1, #3
 800110c:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800116c <main+0xbc>
 8001110:	4817      	ldr	r0, [pc, #92]	@ (8001170 <main+0xc0>)
 8001112:	f7ff ff51 	bl	8000fb8 <nextion_sendfloat>

	  HAL_Delay(1000);
 8001116:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800111a:	f000 fa79 	bl	8001610 <HAL_Delay>

	  nextion_sendnum("n0", 6);
 800111e:	2106      	movs	r1, #6
 8001120:	4811      	ldr	r0, [pc, #68]	@ (8001168 <main+0xb8>)
 8001122:	f7ff ff11 	bl	8000f48 <nextion_sendnum>
	  nextion_sendfloat("x0", 11860, 2);
 8001126:	2102      	movs	r1, #2
 8001128:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001174 <main+0xc4>
 800112c:	4810      	ldr	r0, [pc, #64]	@ (8001170 <main+0xc0>)
 800112e:	f7ff ff43 	bl	8000fb8 <nextion_sendfloat>

	  HAL_Delay(1000);
 8001132:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001136:	f000 fa6b 	bl	8001610 <HAL_Delay>

	  nextion_changePage("0");
 800113a:	480f      	ldr	r0, [pc, #60]	@ (8001178 <main+0xc8>)
 800113c:	f7ff fed4 	bl	8000ee8 <nextion_changePage>

	  HAL_Delay(1000);
 8001140:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001144:	f000 fa64 	bl	8001610 <HAL_Delay>
	  nextion_sendstr("t0","ali");
 8001148:	bf00      	nop
 800114a:	e7bb      	b.n	80010c4 <main+0x14>
 800114c:	08004e74 	.word	0x08004e74
 8001150:	08004e78 	.word	0x08004e78
 8001154:	08004e7c 	.word	0x08004e7c
 8001158:	08004e84 	.word	0x08004e84
 800115c:	08004e88 	.word	0x08004e88
 8001160:	08004e8c 	.word	0x08004e8c
 8001164:	08004e94 	.word	0x08004e94
 8001168:	08004e98 	.word	0x08004e98
 800116c:	47f1ba80 	.word	0x47f1ba80
 8001170:	08004e9c 	.word	0x08004e9c
 8001174:	46395000 	.word	0x46395000
 8001178:	08004ea0 	.word	0x08004ea0

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	2230      	movs	r2, #48	@ 0x30
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f002 fb1c 	bl	80037c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <SystemClock_Config+0xcc>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	4a27      	ldr	r2, [pc, #156]	@ (8001248 <SystemClock_Config+0xcc>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b0:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <SystemClock_Config+0xd0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a21      	ldr	r2, [pc, #132]	@ (800124c <SystemClock_Config+0xd0>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e0:	2310      	movs	r3, #16
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e4:	2302      	movs	r3, #2
 80011e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ec:	2308      	movs	r3, #8
 80011ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80011f0:	2332      	movs	r3, #50	@ 0x32
 80011f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011f8:	2307      	movs	r3, #7
 80011fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fd69 	bl	8001cd8 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800120c:	f000 f864 	bl	80012d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2302      	movs	r3, #2
 8001216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800121c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001226:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f000 ffca 	bl	80021c8 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800123a:	f000 f84d 	bl	80012d8 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3750      	adds	r7, #80	@ 0x50
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_UART4_Init+0x4c>)
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <MX_UART4_Init+0x50>)
 8001258:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <MX_UART4_Init+0x4c>)
 800125c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001260:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_UART4_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_UART4_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <MX_UART4_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_UART4_Init+0x4c>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <MX_UART4_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_UART4_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_UART4_Init+0x4c>)
 8001288:	f001 f9be 	bl	8002608 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001292:	f000 f821 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000094 	.word	0x20000094
 80012a0:	40004c00 	.word	0x40004c00

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MX_GPIO_Init+0x30>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <MX_GPIO_Init+0x30>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <MX_GPIO_Init+0x30>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012dc:	b672      	cpsid	i
}
 80012de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <Error_Handler+0x8>

080012e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <HAL_MspInit+0x4c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001330 <HAL_MspInit+0x4c>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_MspInit+0x4c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_MspInit+0x4c>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001322:	2007      	movs	r0, #7
 8001324:	f000 fa68 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1d      	ldr	r2, [pc, #116]	@ (80013c8 <HAL_UART_MspInit+0x94>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d133      	bne.n	80013be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <HAL_UART_MspInit+0x98>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	4a1b      	ldr	r2, [pc, #108]	@ (80013cc <HAL_UART_MspInit+0x98>)
 8001360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_UART_MspInit+0x98>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_UART_MspInit+0x98>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a14      	ldr	r2, [pc, #80]	@ (80013cc <HAL_UART_MspInit+0x98>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_UART_MspInit+0x98>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800138e:	2303      	movs	r3, #3
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800139e:	2308      	movs	r3, #8
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <HAL_UART_MspInit+0x9c>)
 80013aa:	f000 faf9 	bl	80019a0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2034      	movs	r0, #52	@ 0x34
 80013b4:	f000 fa2b 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013b8:	2034      	movs	r0, #52	@ 0x34
 80013ba:	f000 fa44 	bl	8001846 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40004c00 	.word	0x40004c00
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <MemManage_Handler+0x4>

080013ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f000 f8d1 	bl	80015d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <UART4_IRQHandler+0x10>)
 800143a:	f001 f9c1 	bl	80027c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000094 	.word	0x20000094

08001448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	4a14      	ldr	r2, [pc, #80]	@ (80014a4 <_sbrk+0x5c>)
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <_sbrk+0x60>)
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800145c:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <_sbrk+0x64>)
 8001466:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <_sbrk+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	429a      	cmp	r2, r3
 8001476:	d207      	bcs.n	8001488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001478:	f002 f9be 	bl	80037f8 <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	220c      	movs	r2, #12
 8001480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	e009      	b.n	800149c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148e:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <_sbrk+0x64>)
 8001498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20020000 	.word	0x20020000
 80014a8:	00000400 	.word	0x00000400
 80014ac:	200000dc 	.word	0x200000dc
 80014b0:	20000230 	.word	0x20000230

080014b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <SystemInit+0x20>)
 80014ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <SystemInit+0x20>)
 80014c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001510 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014dc:	f7ff ffea 	bl	80014b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e0:	480c      	ldr	r0, [pc, #48]	@ (8001514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e2:	490d      	ldr	r1, [pc, #52]	@ (8001518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e4:	4a0d      	ldr	r2, [pc, #52]	@ (800151c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001506:	f002 f97d 	bl	8003804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150a:	f7ff fdd1 	bl	80010b0 <main>
  bx  lr    
 800150e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800151c:	08004f30 	.word	0x08004f30
  ldr r2, =_sbss
 8001520:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001524:	2000022c 	.word	0x2000022c

08001528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC_IRQHandler>
	...

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001530:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <HAL_Init+0x40>)
 8001536:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <HAL_Init+0x40>)
 8001542:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001546:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a07      	ldr	r2, [pc, #28]	@ (800156c <HAL_Init+0x40>)
 800154e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001552:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f000 f94f 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155a:	2000      	movs	r0, #0
 800155c:	f000 f808 	bl	8001570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001560:	f7ff fec0 	bl	80012e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023c00 	.word	0x40023c00

08001570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_InitTick+0x54>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_InitTick+0x58>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001586:	fbb3 f3f1 	udiv	r3, r3, r1
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f967 	bl	8001862 <HAL_SYSTICK_Config>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e00e      	b.n	80015bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d80a      	bhi.n	80015ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f000 f92f 	bl	800180e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b0:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <HAL_InitTick+0x5c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000010 	.word	0x20000010
 80015cc:	2000000c 	.word	0x2000000c

080015d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_IncTick+0x20>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_IncTick+0x24>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <HAL_IncTick+0x24>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000010 	.word	0x20000010
 80015f4:	200000e0 	.word	0x200000e0

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b03      	ldr	r3, [pc, #12]	@ (800160c <HAL_GetTick+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200000e0 	.word	0x200000e0

08001610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff ffee 	bl	80015f8 <HAL_GetTick>
 800161c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d005      	beq.n	8001636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_Delay+0x44>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001636:	bf00      	nop
 8001638:	f7ff ffde 	bl	80015f8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	429a      	cmp	r2, r3
 8001646:	d8f7      	bhi.n	8001638 <HAL_Delay+0x28>
  {
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000010 	.word	0x20000010

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	@ (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4907      	ldr	r1, [pc, #28]	@ (80016f4 <__NVIC_EnableIRQ+0x38>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	@ (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	@ (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	@ 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	@ 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c4:	d301      	bcc.n	80017ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00f      	b.n	80017ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <SysTick_Config+0x40>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d2:	210f      	movs	r1, #15
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f7ff ff8e 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <SysTick_Config+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <SysTick_Config+0x40>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff29 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001820:	f7ff ff3e 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 8001824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff8e 	bl	800174c <NVIC_EncodePriority>
 8001830:	4602      	mov	r2, r0
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff5d 	bl	80016f8 <__NVIC_SetPriority>
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff31 	bl	80016bc <__NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffa2 	bl	80017b4 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001886:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff feb6 	bl	80015f8 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d008      	beq.n	80018ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2280      	movs	r2, #128	@ 0x80
 800189e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e052      	b.n	8001952 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0216 	bic.w	r2, r2, #22
 80018ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <HAL_DMA_Abort+0x62>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0208 	bic.w	r2, r2, #8
 80018ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fc:	e013      	b.n	8001926 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fe:	f7ff fe7b 	bl	80015f8 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b05      	cmp	r3, #5
 800190a:	d90c      	bls.n	8001926 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2220      	movs	r2, #32
 8001910:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e015      	b.n	8001952 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e4      	bne.n	80018fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001938:	223f      	movs	r2, #63	@ 0x3f
 800193a:	409a      	lsls	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d004      	beq.n	8001978 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2280      	movs	r2, #128	@ 0x80
 8001972:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e00c      	b.n	8001992 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2205      	movs	r2, #5
 800197c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	@ 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	e16b      	b.n	8001c94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019bc:	2201      	movs	r2, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f040 815a 	bne.w	8001c8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d005      	beq.n	80019f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d130      	bne.n	8001a54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 0201 	and.w	r2, r3, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d017      	beq.n	8001a90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d123      	bne.n	8001ae4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3208      	adds	r2, #8
 8001ade:	69b9      	ldr	r1, [r7, #24]
 8001ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0203 	and.w	r2, r3, #3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80b4 	beq.w	8001c8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b60      	ldr	r3, [pc, #384]	@ (8001cac <HAL_GPIO_Init+0x30c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8001cac <HAL_GPIO_Init+0x30c>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b36:	4b5d      	ldr	r3, [pc, #372]	@ (8001cac <HAL_GPIO_Init+0x30c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b42:	4a5b      	ldr	r2, [pc, #364]	@ (8001cb0 <HAL_GPIO_Init+0x310>)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a52      	ldr	r2, [pc, #328]	@ (8001cb4 <HAL_GPIO_Init+0x314>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d02b      	beq.n	8001bc6 <HAL_GPIO_Init+0x226>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a51      	ldr	r2, [pc, #324]	@ (8001cb8 <HAL_GPIO_Init+0x318>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d025      	beq.n	8001bc2 <HAL_GPIO_Init+0x222>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a50      	ldr	r2, [pc, #320]	@ (8001cbc <HAL_GPIO_Init+0x31c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01f      	beq.n	8001bbe <HAL_GPIO_Init+0x21e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc0 <HAL_GPIO_Init+0x320>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d019      	beq.n	8001bba <HAL_GPIO_Init+0x21a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4e      	ldr	r2, [pc, #312]	@ (8001cc4 <HAL_GPIO_Init+0x324>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0x216>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4d      	ldr	r2, [pc, #308]	@ (8001cc8 <HAL_GPIO_Init+0x328>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00d      	beq.n	8001bb2 <HAL_GPIO_Init+0x212>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4c      	ldr	r2, [pc, #304]	@ (8001ccc <HAL_GPIO_Init+0x32c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_GPIO_Init+0x20e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd0 <HAL_GPIO_Init+0x330>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x20a>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e00e      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001baa:	2308      	movs	r3, #8
 8001bac:	e00c      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bae:	2306      	movs	r3, #6
 8001bb0:	e00a      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	e008      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd8:	4935      	ldr	r1, [pc, #212]	@ (8001cb0 <HAL_GPIO_Init+0x310>)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be6:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd4 <HAL_GPIO_Init+0x334>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0a:	4a32      	ldr	r2, [pc, #200]	@ (8001cd4 <HAL_GPIO_Init+0x334>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c10:	4b30      	ldr	r3, [pc, #192]	@ (8001cd4 <HAL_GPIO_Init+0x334>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c34:	4a27      	ldr	r2, [pc, #156]	@ (8001cd4 <HAL_GPIO_Init+0x334>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3a:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <HAL_GPIO_Init+0x334>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd4 <HAL_GPIO_Init+0x334>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <HAL_GPIO_Init+0x334>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c88:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <HAL_GPIO_Init+0x334>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	f67f ae90 	bls.w	80019bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40021400 	.word	0x40021400
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40021c00 	.word	0x40021c00
 8001cd4:	40013c00 	.word	0x40013c00

08001cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e267      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d075      	beq.n	8001de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cf6:	4b88      	ldr	r3, [pc, #544]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d00c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d02:	4b85      	ldr	r3, [pc, #532]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d112      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0e:	4b82      	ldr	r3, [pc, #520]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d05b      	beq.n	8001de0 <HAL_RCC_OscConfig+0x108>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d157      	bne.n	8001de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e242      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x74>
 8001d3e:	4b76      	ldr	r3, [pc, #472]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x98>
 8001d56:	4b70      	ldr	r3, [pc, #448]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b6d      	ldr	r3, [pc, #436]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6c      	ldr	r2, [pc, #432]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d70:	4b69      	ldr	r3, [pc, #420]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a68      	ldr	r2, [pc, #416]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b66      	ldr	r3, [pc, #408]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a65      	ldr	r2, [pc, #404]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc32 	bl	80015f8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fc2e 	bl	80015f8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	@ 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e207      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b5b      	ldr	r3, [pc, #364]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0xc0>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fc1e 	bl	80015f8 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fc1a 	bl	80015f8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1f3      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	4b51      	ldr	r3, [pc, #324]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xe8>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d063      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dee:	4b4a      	ldr	r3, [pc, #296]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d11c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b44      	ldr	r3, [pc, #272]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	4b41      	ldr	r3, [pc, #260]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1c7      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4937      	ldr	r1, [pc, #220]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b34      	ldr	r3, [pc, #208]	@ (8001f1c <HAL_RCC_OscConfig+0x244>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fbd3 	bl	80015f8 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fbcf 	bl	80015f8 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1a8      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4925      	ldr	r1, [pc, #148]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x244>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff fbb2 	bl	80015f8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff fbae 	bl	80015f8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e187      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d036      	beq.n	8001f30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_RCC_OscConfig+0x248>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fb92 	bl	80015f8 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fb8e 	bl	80015f8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e167      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x200>
 8001ef6:	e01b      	b.n	8001f30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_RCC_OscConfig+0x248>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fb7b 	bl	80015f8 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	e00e      	b.n	8001f24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f06:	f7ff fb77 	bl	80015f8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d907      	bls.n	8001f24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e150      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	42470000 	.word	0x42470000
 8001f20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b88      	ldr	r3, [pc, #544]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ea      	bne.n	8001f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8097 	beq.w	800206c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f42:	4b81      	ldr	r3, [pc, #516]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10f      	bne.n	8001f6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	4b7d      	ldr	r3, [pc, #500]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a7c      	ldr	r2, [pc, #496]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b77      	ldr	r3, [pc, #476]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b74      	ldr	r3, [pc, #464]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a73      	ldr	r2, [pc, #460]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fb37 	bl	80015f8 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff fb33 	bl	80015f8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e10c      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x2ea>
 8001fb4:	4b64      	ldr	r3, [pc, #400]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a63      	ldr	r2, [pc, #396]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc0:	e01c      	b.n	8001ffc <HAL_RCC_OscConfig+0x324>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x30c>
 8001fca:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	4a5e      	ldr	r2, [pc, #376]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	4a5b      	ldr	r2, [pc, #364]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0x324>
 8001fe4:	4b58      	ldr	r3, [pc, #352]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a57      	ldr	r2, [pc, #348]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff0:	4b55      	ldr	r3, [pc, #340]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	4a54      	ldr	r2, [pc, #336]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff faf8 	bl	80015f8 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7ff faf4 	bl	80015f8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0cb      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	4b49      	ldr	r3, [pc, #292]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ee      	beq.n	800200c <HAL_RCC_OscConfig+0x334>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff fae2 	bl	80015f8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7ff fade 	bl	80015f8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0b5      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	4b3e      	ldr	r3, [pc, #248]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ee      	bne.n	8002038 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002060:	4b39      	ldr	r3, [pc, #228]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	4a38      	ldr	r2, [pc, #224]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a1 	beq.w	80021b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002076:	4b34      	ldr	r3, [pc, #208]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d05c      	beq.n	800213c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d141      	bne.n	800210e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b31      	ldr	r3, [pc, #196]	@ (8002150 <HAL_RCC_OscConfig+0x478>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff fab2 	bl	80015f8 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7ff faae 	bl	80015f8 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e087      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	491b      	ldr	r1, [pc, #108]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x478>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fa87 	bl	80015f8 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff fa83 	bl	80015f8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e05c      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002100:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x416>
 800210c:	e054      	b.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_RCC_OscConfig+0x478>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fa70 	bl	80015f8 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff fa6c 	bl	80015f8 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e045      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x444>
 800213a:	e03d      	b.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e038      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000
 8002150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_RCC_OscConfig+0x4ec>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d028      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d121      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d11a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002184:	4013      	ands	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800218a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	4293      	cmp	r3, r2
 800218e:	d111      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	3b01      	subs	r3, #1
 800219e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0cc      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d90c      	bls.n	8002204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b65      	ldr	r3, [pc, #404]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b8      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a58      	ldr	r2, [pc, #352]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002226:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002234:	4b53      	ldr	r3, [pc, #332]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a52      	ldr	r2, [pc, #328]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800223e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b50      	ldr	r3, [pc, #320]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	494d      	ldr	r1, [pc, #308]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d044      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d119      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d003      	beq.n	8002286 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002282:	2b03      	cmp	r3, #3
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b3f      	ldr	r3, [pc, #252]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e067      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b37      	ldr	r3, [pc, #220]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4934      	ldr	r1, [pc, #208]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7ff f99e 	bl	80015f8 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7ff f99a 	bl	80015f8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d20c      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b22      	ldr	r3, [pc, #136]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e032      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4916      	ldr	r1, [pc, #88]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233a:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490e      	ldr	r1, [pc, #56]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800234e:	f000 f821 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490a      	ldr	r1, [pc, #40]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a09      	ldr	r2, [pc, #36]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f8fe 	bl	8001570 <HAL_InitTick>

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00
 8002384:	40023800 	.word	0x40023800
 8002388:	08004ea4 	.word	0x08004ea4
 800238c:	20000008 	.word	0x20000008
 8002390:	2000000c 	.word	0x2000000c

08002394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002398:	b094      	sub	sp, #80	@ 0x50
 800239a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ac:	4b79      	ldr	r3, [pc, #484]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d00d      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x40>
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	f200 80e1 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x34>
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d003      	beq.n	80023ce <HAL_RCC_GetSysClockFreq+0x3a>
 80023c6:	e0db      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b73      	ldr	r3, [pc, #460]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023cc:	e0db      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ce:	4b73      	ldr	r3, [pc, #460]	@ (800259c <HAL_RCC_GetSysClockFreq+0x208>)
 80023d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023d2:	e0d8      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023de:	4b6d      	ldr	r3, [pc, #436]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d063      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	099b      	lsrs	r3, r3, #6
 80023f0:	2200      	movs	r2, #0
 80023f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
 8002402:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002406:	4622      	mov	r2, r4
 8002408:	462b      	mov	r3, r5
 800240a:	f04f 0000 	mov.w	r0, #0
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	0159      	lsls	r1, r3, #5
 8002414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002418:	0150      	lsls	r0, r2, #5
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4621      	mov	r1, r4
 8002420:	1a51      	subs	r1, r2, r1
 8002422:	6139      	str	r1, [r7, #16]
 8002424:	4629      	mov	r1, r5
 8002426:	eb63 0301 	sbc.w	r3, r3, r1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002438:	4659      	mov	r1, fp
 800243a:	018b      	lsls	r3, r1, #6
 800243c:	4651      	mov	r1, sl
 800243e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002442:	4651      	mov	r1, sl
 8002444:	018a      	lsls	r2, r1, #6
 8002446:	4651      	mov	r1, sl
 8002448:	ebb2 0801 	subs.w	r8, r2, r1
 800244c:	4659      	mov	r1, fp
 800244e:	eb63 0901 	sbc.w	r9, r3, r1
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800245e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002466:	4690      	mov	r8, r2
 8002468:	4699      	mov	r9, r3
 800246a:	4623      	mov	r3, r4
 800246c:	eb18 0303 	adds.w	r3, r8, r3
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	462b      	mov	r3, r5
 8002474:	eb49 0303 	adc.w	r3, r9, r3
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002486:	4629      	mov	r1, r5
 8002488:	024b      	lsls	r3, r1, #9
 800248a:	4621      	mov	r1, r4
 800248c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002490:	4621      	mov	r1, r4
 8002492:	024a      	lsls	r2, r1, #9
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800249a:	2200      	movs	r2, #0
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800249e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024a4:	f7fe fb78 	bl	8000b98 <__aeabi_uldivmod>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4613      	mov	r3, r2
 80024ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024b0:	e058      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b2:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	099b      	lsrs	r3, r3, #6
 80024b8:	2200      	movs	r2, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	4611      	mov	r1, r2
 80024be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024cc:	4642      	mov	r2, r8
 80024ce:	464b      	mov	r3, r9
 80024d0:	f04f 0000 	mov.w	r0, #0
 80024d4:	f04f 0100 	mov.w	r1, #0
 80024d8:	0159      	lsls	r1, r3, #5
 80024da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024de:	0150      	lsls	r0, r2, #5
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4641      	mov	r1, r8
 80024e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ea:	4649      	mov	r1, r9
 80024ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002500:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002504:	ebb2 040a 	subs.w	r4, r2, sl
 8002508:	eb63 050b 	sbc.w	r5, r3, fp
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	00eb      	lsls	r3, r5, #3
 8002516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251a:	00e2      	lsls	r2, r4, #3
 800251c:	4614      	mov	r4, r2
 800251e:	461d      	mov	r5, r3
 8002520:	4643      	mov	r3, r8
 8002522:	18e3      	adds	r3, r4, r3
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	464b      	mov	r3, r9
 8002528:	eb45 0303 	adc.w	r3, r5, r3
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253a:	4629      	mov	r1, r5
 800253c:	028b      	lsls	r3, r1, #10
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002544:	4621      	mov	r1, r4
 8002546:	028a      	lsls	r2, r1, #10
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800254e:	2200      	movs	r2, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	61fa      	str	r2, [r7, #28]
 8002554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002558:	f7fe fb1e 	bl	8000b98 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002574:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x204>)
 8002582:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002588:	4618      	mov	r0, r3
 800258a:	3750      	adds	r7, #80	@ 0x50
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	007a1200 	.word	0x007a1200

080025a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	@ (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000008 	.word	0x20000008

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	@ (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08004eb4 	.word	0x08004eb4

080025e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e4:	f7ff ffdc 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0b5b      	lsrs	r3, r3, #13
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	@ (8002604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	08004eb4 	.word	0x08004eb4

08002608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e042      	b.n	80026a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fe80 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	@ 0x24
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800264a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fd69 	bl	8003124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	@ 0x28
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d175      	bne.n	80027b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_UART_Transmit+0x2c>
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e06e      	b.n	80027b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2221      	movs	r2, #33	@ 0x21
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026e6:	f7fe ff87 	bl	80015f8 <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	88fa      	ldrh	r2, [r7, #6]
 80026f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002700:	d108      	bne.n	8002714 <HAL_UART_Transmit+0x6c>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d104      	bne.n	8002714 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	e003      	b.n	800271c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800271c:	e02e      	b.n	800277c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	2180      	movs	r1, #128	@ 0x80
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fb05 	bl	8002d38 <UART_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e03a      	b.n	80027b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10b      	bne.n	800275e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002754:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	3302      	adds	r3, #2
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	e007      	b.n	800276e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3301      	adds	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1cb      	bne.n	800271e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	2140      	movs	r1, #64	@ 0x40
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fad1 	bl	8002d38 <UART_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e006      	b.n	80027b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b0ba      	sub	sp, #232	@ 0xe8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80027fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_UART_IRQHandler+0x66>
 8002812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fbc2 	bl	8002fa8 <UART_Receive_IT>
      return;
 8002824:	e25b      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80de 	beq.w	80029ec <HAL_UART_IRQHandler+0x22c>
 8002830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800283c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002840:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80d1 	beq.w	80029ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800284a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_UART_IRQHandler+0xae>
 8002856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800285a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800286e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_UART_IRQHandler+0xd2>
 800287a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f043 0202 	orr.w	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_UART_IRQHandler+0xf6>
 800289e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d011      	beq.n	80028e6 <HAL_UART_IRQHandler+0x126>
 80028c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028de:	f043 0208 	orr.w	r2, r3, #8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 81f2 	beq.w	8002cd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_UART_IRQHandler+0x14e>
 80028fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fb4d 	bl	8002fa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	2b40      	cmp	r3, #64	@ 0x40
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <HAL_UART_IRQHandler+0x17a>
 8002932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d04f      	beq.n	80029da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa55 	bl	8002dea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294a:	2b40      	cmp	r3, #64	@ 0x40
 800294c:	d141      	bne.n	80029d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800295c:	e853 3f00 	ldrex	r3, [r3]
 8002960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800296c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800297a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800297e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800298a:	e841 2300 	strex	r3, r2, [r1]
 800298e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1d9      	bne.n	800294e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d013      	beq.n	80029ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ba0 <HAL_UART_IRQHandler+0x3e0>)
 80029a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe ffd3 	bl	800195a <HAL_DMA_Abort_IT>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d016      	beq.n	80029e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029c4:	4610      	mov	r0, r2
 80029c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c8:	e00e      	b.n	80029e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f99e 	bl	8002d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d0:	e00a      	b.n	80029e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f99a 	bl	8002d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d8:	e006      	b.n	80029e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f996 	bl	8002d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80029e6:	e175      	b.n	8002cd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	bf00      	nop
    return;
 80029ea:	e173      	b.n	8002cd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	f040 814f 	bne.w	8002c94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8148 	beq.w	8002c94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8141 	beq.w	8002c94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a32:	2b40      	cmp	r3, #64	@ 0x40
 8002a34:	f040 80b6 	bne.w	8002ba4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8145 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a56:	429a      	cmp	r2, r3
 8002a58:	f080 813e 	bcs.w	8002cd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a6e:	f000 8088 	beq.w	8002b82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	330c      	adds	r3, #12
 8002a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a80:	e853 3f00 	ldrex	r3, [r3]
 8002a84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002aa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002aaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1d9      	bne.n	8002a72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ac8:	e853 3f00 	ldrex	r3, [r3]
 8002acc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ace:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3314      	adds	r3, #20
 8002ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ae2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002aea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002af4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e1      	bne.n	8002abe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3314      	adds	r3, #20
 8002b00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3314      	adds	r3, #20
 8002b1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b26:	e841 2300 	strex	r3, r2, [r1]
 8002b2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1e3      	bne.n	8002afa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	330c      	adds	r3, #12
 8002b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b52:	f023 0310 	bic.w	r3, r3, #16
 8002b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b6c:	e841 2300 	strex	r3, r2, [r1]
 8002b70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e3      	bne.n	8002b40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe fe7c 	bl	800187a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f8c1 	bl	8002d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b9e:	e09b      	b.n	8002cd8 <HAL_UART_IRQHandler+0x518>
 8002ba0:	08002eb1 	.word	0x08002eb1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 808e 	beq.w	8002cdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8089 	beq.w	8002cdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002bee:	647a      	str	r2, [r7, #68]	@ 0x44
 8002bf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e3      	bne.n	8002bca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3314      	adds	r3, #20
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	623b      	str	r3, [r7, #32]
   return(result);
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c26:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e3      	bne.n	8002c02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0310 	bic.w	r3, r3, #16
 8002c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c6c:	61fa      	str	r2, [r7, #28]
 8002c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	69b9      	ldr	r1, [r7, #24]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	617b      	str	r3, [r7, #20]
   return(result);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e3      	bne.n	8002c48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f847 	bl	8002d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c92:	e023      	b.n	8002cdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x4f4>
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f913 	bl	8002ed8 <UART_Transmit_IT>
    return;
 8002cb2:	e014      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00e      	beq.n	8002cde <HAL_UART_IRQHandler+0x51e>
 8002cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f953 	bl	8002f78 <UART_EndTransmit_IT>
    return;
 8002cd2:	e004      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
    return;
 8002cd4:	bf00      	nop
 8002cd6:	e002      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
      return;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
      return;
 8002cdc:	bf00      	nop
  }
}
 8002cde:	37e8      	adds	r7, #232	@ 0xe8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d48:	e03b      	b.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d037      	beq.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7fe fc51 	bl	80015f8 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e03a      	b.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d023      	beq.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b80      	cmp	r3, #128	@ 0x80
 8002d7e:	d020      	beq.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b40      	cmp	r3, #64	@ 0x40
 8002d84:	d01d      	beq.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d116      	bne.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f81d 	bl	8002dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2208      	movs	r2, #8
 8002db4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00f      	b.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d0b4      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b095      	sub	sp, #84	@ 0x54
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	330c      	adds	r3, #12
 8002df8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e12:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e5      	bne.n	8002df2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3314      	adds	r3, #20
 8002e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e5      	bne.n	8002e26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d119      	bne.n	8002e96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f023 0310 	bic.w	r3, r3, #16
 8002e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e82:	61ba      	str	r2, [r7, #24]
 8002e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6979      	ldr	r1, [r7, #20]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e5      	bne.n	8002e62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ea4:	bf00      	nop
 8002ea6:	3754      	adds	r7, #84	@ 0x54
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7ff ff1e 	bl	8002d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b21      	cmp	r3, #33	@ 0x21
 8002eea:	d13e      	bne.n	8002f6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef4:	d114      	bne.n	8002f20 <UART_Transmit_IT+0x48>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d110      	bne.n	8002f20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	1c9a      	adds	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	621a      	str	r2, [r3, #32]
 8002f1e:	e008      	b.n	8002f32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	1c59      	adds	r1, r3, #1
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6211      	str	r1, [r2, #32]
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff fea3 	bl	8002ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08c      	sub	sp, #48	@ 0x30
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b22      	cmp	r3, #34	@ 0x22
 8002fba:	f040 80ae 	bne.w	800311a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fc6:	d117      	bne.n	8002ff8 <UART_Receive_IT+0x50>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d113      	bne.n	8002ff8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	1c9a      	adds	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ff6:	e026      	b.n	8003046 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300a:	d007      	beq.n	800301c <UART_Receive_IT+0x74>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <UART_Receive_IT+0x82>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e008      	b.n	800303c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003036:	b2da      	uxtb	r2, r3
 8003038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29b      	uxth	r3, r3
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4619      	mov	r1, r3
 8003054:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003056:	2b00      	cmp	r3, #0
 8003058:	d15d      	bne.n	8003116 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0220 	bic.w	r2, r2, #32
 8003068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	2b01      	cmp	r3, #1
 800309e:	d135      	bne.n	800310c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	613b      	str	r3, [r7, #16]
   return(result);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f023 0310 	bic.w	r3, r3, #16
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	330c      	adds	r3, #12
 80030c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c6:	623a      	str	r2, [r7, #32]
 80030c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	69f9      	ldr	r1, [r7, #28]
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	e841 2300 	strex	r3, r2, [r1]
 80030d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e5      	bne.n	80030a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d10a      	bne.n	80030fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fe0b 	bl	8002d20 <HAL_UARTEx_RxEventCallback>
 800310a:	e002      	b.n	8003112 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff fdf3 	bl	8002cf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e002      	b.n	800311c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800311a:	2302      	movs	r3, #2
  }
}
 800311c:	4618      	mov	r0, r3
 800311e:	3730      	adds	r7, #48	@ 0x30
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003128:	b0c0      	sub	sp, #256	@ 0x100
 800312a:	af00      	add	r7, sp, #0
 800312c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	ea40 0301 	orr.w	r3, r0, r1
 800314c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800314e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	431a      	orrs	r2, r3
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	431a      	orrs	r2, r3
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800317c:	f021 010c 	bic.w	r1, r1, #12
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800318a:	430b      	orrs	r3, r1
 800318c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319e:	6999      	ldr	r1, [r3, #24]
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	ea40 0301 	orr.w	r3, r0, r1
 80031aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b8f      	ldr	r3, [pc, #572]	@ (80033f0 <UART_SetConfig+0x2cc>)
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d005      	beq.n	80031c4 <UART_SetConfig+0xa0>
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b8d      	ldr	r3, [pc, #564]	@ (80033f4 <UART_SetConfig+0x2d0>)
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d104      	bne.n	80031ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031c4:	f7ff fa0c 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 80031c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031cc:	e003      	b.n	80031d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ce:	f7ff f9f3 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 80031d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e0:	f040 810c 	bne.w	80033fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031f6:	4622      	mov	r2, r4
 80031f8:	462b      	mov	r3, r5
 80031fa:	1891      	adds	r1, r2, r2
 80031fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031fe:	415b      	adcs	r3, r3
 8003200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003206:	4621      	mov	r1, r4
 8003208:	eb12 0801 	adds.w	r8, r2, r1
 800320c:	4629      	mov	r1, r5
 800320e:	eb43 0901 	adc.w	r9, r3, r1
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800321e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003226:	4690      	mov	r8, r2
 8003228:	4699      	mov	r9, r3
 800322a:	4623      	mov	r3, r4
 800322c:	eb18 0303 	adds.w	r3, r8, r3
 8003230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003234:	462b      	mov	r3, r5
 8003236:	eb49 0303 	adc.w	r3, r9, r3
 800323a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800324a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800324e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003252:	460b      	mov	r3, r1
 8003254:	18db      	adds	r3, r3, r3
 8003256:	653b      	str	r3, [r7, #80]	@ 0x50
 8003258:	4613      	mov	r3, r2
 800325a:	eb42 0303 	adc.w	r3, r2, r3
 800325e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003268:	f7fd fc96 	bl	8000b98 <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4b61      	ldr	r3, [pc, #388]	@ (80033f8 <UART_SetConfig+0x2d4>)
 8003272:	fba3 2302 	umull	r2, r3, r3, r2
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	011c      	lsls	r4, r3, #4
 800327a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003284:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	1891      	adds	r1, r2, r2
 8003292:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003294:	415b      	adcs	r3, r3
 8003296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800329c:	4641      	mov	r1, r8
 800329e:	eb12 0a01 	adds.w	sl, r2, r1
 80032a2:	4649      	mov	r1, r9
 80032a4:	eb43 0b01 	adc.w	fp, r3, r1
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032bc:	4692      	mov	sl, r2
 80032be:	469b      	mov	fp, r3
 80032c0:	4643      	mov	r3, r8
 80032c2:	eb1a 0303 	adds.w	r3, sl, r3
 80032c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032ca:	464b      	mov	r3, r9
 80032cc:	eb4b 0303 	adc.w	r3, fp, r3
 80032d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032e8:	460b      	mov	r3, r1
 80032ea:	18db      	adds	r3, r3, r3
 80032ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ee:	4613      	mov	r3, r2
 80032f0:	eb42 0303 	adc.w	r3, r2, r3
 80032f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032fe:	f7fd fc4b 	bl	8000b98 <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4611      	mov	r1, r2
 8003308:	4b3b      	ldr	r3, [pc, #236]	@ (80033f8 <UART_SetConfig+0x2d4>)
 800330a:	fba3 2301 	umull	r2, r3, r3, r1
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2264      	movs	r2, #100	@ 0x64
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	1acb      	subs	r3, r1, r3
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800331e:	4b36      	ldr	r3, [pc, #216]	@ (80033f8 <UART_SetConfig+0x2d4>)
 8003320:	fba3 2302 	umull	r2, r3, r3, r2
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800332c:	441c      	add	r4, r3
 800332e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003332:	2200      	movs	r2, #0
 8003334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003338:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800333c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	1891      	adds	r1, r2, r2
 8003346:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003348:	415b      	adcs	r3, r3
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800334c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003350:	4641      	mov	r1, r8
 8003352:	1851      	adds	r1, r2, r1
 8003354:	6339      	str	r1, [r7, #48]	@ 0x30
 8003356:	4649      	mov	r1, r9
 8003358:	414b      	adcs	r3, r1
 800335a:	637b      	str	r3, [r7, #52]	@ 0x34
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003368:	4659      	mov	r1, fp
 800336a:	00cb      	lsls	r3, r1, #3
 800336c:	4651      	mov	r1, sl
 800336e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003372:	4651      	mov	r1, sl
 8003374:	00ca      	lsls	r2, r1, #3
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	4603      	mov	r3, r0
 800337c:	4642      	mov	r2, r8
 800337e:	189b      	adds	r3, r3, r2
 8003380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003384:	464b      	mov	r3, r9
 8003386:	460a      	mov	r2, r1
 8003388:	eb42 0303 	adc.w	r3, r2, r3
 800338c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800339c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033a4:	460b      	mov	r3, r1
 80033a6:	18db      	adds	r3, r3, r3
 80033a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033aa:	4613      	mov	r3, r2
 80033ac:	eb42 0303 	adc.w	r3, r2, r3
 80033b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033ba:	f7fd fbed 	bl	8000b98 <__aeabi_uldivmod>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <UART_SetConfig+0x2d4>)
 80033c4:	fba3 1302 	umull	r1, r3, r3, r2
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	2164      	movs	r1, #100	@ 0x64
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	3332      	adds	r3, #50	@ 0x32
 80033d6:	4a08      	ldr	r2, [pc, #32]	@ (80033f8 <UART_SetConfig+0x2d4>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	f003 0207 	and.w	r2, r3, #7
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4422      	add	r2, r4
 80033ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033ec:	e106      	b.n	80035fc <UART_SetConfig+0x4d8>
 80033ee:	bf00      	nop
 80033f0:	40011000 	.word	0x40011000
 80033f4:	40011400 	.word	0x40011400
 80033f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003400:	2200      	movs	r2, #0
 8003402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003406:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800340a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800340e:	4642      	mov	r2, r8
 8003410:	464b      	mov	r3, r9
 8003412:	1891      	adds	r1, r2, r2
 8003414:	6239      	str	r1, [r7, #32]
 8003416:	415b      	adcs	r3, r3
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
 800341a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800341e:	4641      	mov	r1, r8
 8003420:	1854      	adds	r4, r2, r1
 8003422:	4649      	mov	r1, r9
 8003424:	eb43 0501 	adc.w	r5, r3, r1
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	00eb      	lsls	r3, r5, #3
 8003432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003436:	00e2      	lsls	r2, r4, #3
 8003438:	4614      	mov	r4, r2
 800343a:	461d      	mov	r5, r3
 800343c:	4643      	mov	r3, r8
 800343e:	18e3      	adds	r3, r4, r3
 8003440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003444:	464b      	mov	r3, r9
 8003446:	eb45 0303 	adc.w	r3, r5, r3
 800344a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800345a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800346a:	4629      	mov	r1, r5
 800346c:	008b      	lsls	r3, r1, #2
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003474:	4621      	mov	r1, r4
 8003476:	008a      	lsls	r2, r1, #2
 8003478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800347c:	f7fd fb8c 	bl	8000b98 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4b60      	ldr	r3, [pc, #384]	@ (8003608 <UART_SetConfig+0x4e4>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011c      	lsls	r4, r3, #4
 800348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003498:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800349c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	61b9      	str	r1, [r7, #24]
 80034a8:	415b      	adcs	r3, r3
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b0:	4641      	mov	r1, r8
 80034b2:	1851      	adds	r1, r2, r1
 80034b4:	6139      	str	r1, [r7, #16]
 80034b6:	4649      	mov	r1, r9
 80034b8:	414b      	adcs	r3, r1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c8:	4659      	mov	r1, fp
 80034ca:	00cb      	lsls	r3, r1, #3
 80034cc:	4651      	mov	r1, sl
 80034ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034d2:	4651      	mov	r1, sl
 80034d4:	00ca      	lsls	r2, r1, #3
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	4642      	mov	r2, r8
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034e4:	464b      	mov	r3, r9
 80034e6:	460a      	mov	r2, r1
 80034e8:	eb42 0303 	adc.w	r3, r2, r3
 80034ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003508:	4649      	mov	r1, r9
 800350a:	008b      	lsls	r3, r1, #2
 800350c:	4641      	mov	r1, r8
 800350e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003512:	4641      	mov	r1, r8
 8003514:	008a      	lsls	r2, r1, #2
 8003516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800351a:	f7fd fb3d 	bl	8000b98 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4611      	mov	r1, r2
 8003524:	4b38      	ldr	r3, [pc, #224]	@ (8003608 <UART_SetConfig+0x4e4>)
 8003526:	fba3 2301 	umull	r2, r3, r3, r1
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2264      	movs	r2, #100	@ 0x64
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	1acb      	subs	r3, r1, r3
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	3332      	adds	r3, #50	@ 0x32
 8003538:	4a33      	ldr	r2, [pc, #204]	@ (8003608 <UART_SetConfig+0x4e4>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003544:	441c      	add	r4, r3
 8003546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800354a:	2200      	movs	r2, #0
 800354c:	673b      	str	r3, [r7, #112]	@ 0x70
 800354e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003550:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	1891      	adds	r1, r2, r2
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	415b      	adcs	r3, r3
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003564:	4641      	mov	r1, r8
 8003566:	1851      	adds	r1, r2, r1
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	4649      	mov	r1, r9
 800356c:	414b      	adcs	r3, r1
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800357c:	4659      	mov	r1, fp
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4651      	mov	r1, sl
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4642      	mov	r2, r8
 8003592:	189b      	adds	r3, r3, r2
 8003594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003596:	464b      	mov	r3, r9
 8003598:	460a      	mov	r2, r1
 800359a:	eb42 0303 	adc.w	r3, r2, r3
 800359e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035b8:	4649      	mov	r1, r9
 80035ba:	008b      	lsls	r3, r1, #2
 80035bc:	4641      	mov	r1, r8
 80035be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c2:	4641      	mov	r1, r8
 80035c4:	008a      	lsls	r2, r1, #2
 80035c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035ca:	f7fd fae5 	bl	8000b98 <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <UART_SetConfig+0x4e4>)
 80035d4:	fba3 1302 	umull	r1, r3, r3, r2
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	2164      	movs	r1, #100	@ 0x64
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	3332      	adds	r3, #50	@ 0x32
 80035e6:	4a08      	ldr	r2, [pc, #32]	@ (8003608 <UART_SetConfig+0x4e4>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4422      	add	r2, r4
 80035fa:	609a      	str	r2, [r3, #8]
}
 80035fc:	bf00      	nop
 80035fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003602:	46bd      	mov	sp, r7
 8003604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003608:	51eb851f 	.word	0x51eb851f

0800360c <malloc>:
 800360c:	4b02      	ldr	r3, [pc, #8]	@ (8003618 <malloc+0xc>)
 800360e:	4601      	mov	r1, r0
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	f000 b82d 	b.w	8003670 <_malloc_r>
 8003616:	bf00      	nop
 8003618:	20000014 	.word	0x20000014

0800361c <free>:
 800361c:	4b02      	ldr	r3, [pc, #8]	@ (8003628 <free+0xc>)
 800361e:	4601      	mov	r1, r0
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	f000 b915 	b.w	8003850 <_free_r>
 8003626:	bf00      	nop
 8003628:	20000014 	.word	0x20000014

0800362c <sbrk_aligned>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	4e0f      	ldr	r6, [pc, #60]	@ (800366c <sbrk_aligned+0x40>)
 8003630:	460c      	mov	r4, r1
 8003632:	6831      	ldr	r1, [r6, #0]
 8003634:	4605      	mov	r5, r0
 8003636:	b911      	cbnz	r1, 800363e <sbrk_aligned+0x12>
 8003638:	f000 f8ce 	bl	80037d8 <_sbrk_r>
 800363c:	6030      	str	r0, [r6, #0]
 800363e:	4621      	mov	r1, r4
 8003640:	4628      	mov	r0, r5
 8003642:	f000 f8c9 	bl	80037d8 <_sbrk_r>
 8003646:	1c43      	adds	r3, r0, #1
 8003648:	d103      	bne.n	8003652 <sbrk_aligned+0x26>
 800364a:	f04f 34ff 	mov.w	r4, #4294967295
 800364e:	4620      	mov	r0, r4
 8003650:	bd70      	pop	{r4, r5, r6, pc}
 8003652:	1cc4      	adds	r4, r0, #3
 8003654:	f024 0403 	bic.w	r4, r4, #3
 8003658:	42a0      	cmp	r0, r4
 800365a:	d0f8      	beq.n	800364e <sbrk_aligned+0x22>
 800365c:	1a21      	subs	r1, r4, r0
 800365e:	4628      	mov	r0, r5
 8003660:	f000 f8ba 	bl	80037d8 <_sbrk_r>
 8003664:	3001      	adds	r0, #1
 8003666:	d1f2      	bne.n	800364e <sbrk_aligned+0x22>
 8003668:	e7ef      	b.n	800364a <sbrk_aligned+0x1e>
 800366a:	bf00      	nop
 800366c:	200000e4 	.word	0x200000e4

08003670 <_malloc_r>:
 8003670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003674:	1ccd      	adds	r5, r1, #3
 8003676:	f025 0503 	bic.w	r5, r5, #3
 800367a:	3508      	adds	r5, #8
 800367c:	2d0c      	cmp	r5, #12
 800367e:	bf38      	it	cc
 8003680:	250c      	movcc	r5, #12
 8003682:	2d00      	cmp	r5, #0
 8003684:	4606      	mov	r6, r0
 8003686:	db01      	blt.n	800368c <_malloc_r+0x1c>
 8003688:	42a9      	cmp	r1, r5
 800368a:	d904      	bls.n	8003696 <_malloc_r+0x26>
 800368c:	230c      	movs	r3, #12
 800368e:	6033      	str	r3, [r6, #0]
 8003690:	2000      	movs	r0, #0
 8003692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003696:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800376c <_malloc_r+0xfc>
 800369a:	f000 f869 	bl	8003770 <__malloc_lock>
 800369e:	f8d8 3000 	ldr.w	r3, [r8]
 80036a2:	461c      	mov	r4, r3
 80036a4:	bb44      	cbnz	r4, 80036f8 <_malloc_r+0x88>
 80036a6:	4629      	mov	r1, r5
 80036a8:	4630      	mov	r0, r6
 80036aa:	f7ff ffbf 	bl	800362c <sbrk_aligned>
 80036ae:	1c43      	adds	r3, r0, #1
 80036b0:	4604      	mov	r4, r0
 80036b2:	d158      	bne.n	8003766 <_malloc_r+0xf6>
 80036b4:	f8d8 4000 	ldr.w	r4, [r8]
 80036b8:	4627      	mov	r7, r4
 80036ba:	2f00      	cmp	r7, #0
 80036bc:	d143      	bne.n	8003746 <_malloc_r+0xd6>
 80036be:	2c00      	cmp	r4, #0
 80036c0:	d04b      	beq.n	800375a <_malloc_r+0xea>
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	4639      	mov	r1, r7
 80036c6:	4630      	mov	r0, r6
 80036c8:	eb04 0903 	add.w	r9, r4, r3
 80036cc:	f000 f884 	bl	80037d8 <_sbrk_r>
 80036d0:	4581      	cmp	r9, r0
 80036d2:	d142      	bne.n	800375a <_malloc_r+0xea>
 80036d4:	6821      	ldr	r1, [r4, #0]
 80036d6:	1a6d      	subs	r5, r5, r1
 80036d8:	4629      	mov	r1, r5
 80036da:	4630      	mov	r0, r6
 80036dc:	f7ff ffa6 	bl	800362c <sbrk_aligned>
 80036e0:	3001      	adds	r0, #1
 80036e2:	d03a      	beq.n	800375a <_malloc_r+0xea>
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	442b      	add	r3, r5
 80036e8:	6023      	str	r3, [r4, #0]
 80036ea:	f8d8 3000 	ldr.w	r3, [r8]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	bb62      	cbnz	r2, 800374c <_malloc_r+0xdc>
 80036f2:	f8c8 7000 	str.w	r7, [r8]
 80036f6:	e00f      	b.n	8003718 <_malloc_r+0xa8>
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	1b52      	subs	r2, r2, r5
 80036fc:	d420      	bmi.n	8003740 <_malloc_r+0xd0>
 80036fe:	2a0b      	cmp	r2, #11
 8003700:	d917      	bls.n	8003732 <_malloc_r+0xc2>
 8003702:	1961      	adds	r1, r4, r5
 8003704:	42a3      	cmp	r3, r4
 8003706:	6025      	str	r5, [r4, #0]
 8003708:	bf18      	it	ne
 800370a:	6059      	strne	r1, [r3, #4]
 800370c:	6863      	ldr	r3, [r4, #4]
 800370e:	bf08      	it	eq
 8003710:	f8c8 1000 	streq.w	r1, [r8]
 8003714:	5162      	str	r2, [r4, r5]
 8003716:	604b      	str	r3, [r1, #4]
 8003718:	4630      	mov	r0, r6
 800371a:	f000 f82f 	bl	800377c <__malloc_unlock>
 800371e:	f104 000b 	add.w	r0, r4, #11
 8003722:	1d23      	adds	r3, r4, #4
 8003724:	f020 0007 	bic.w	r0, r0, #7
 8003728:	1ac2      	subs	r2, r0, r3
 800372a:	bf1c      	itt	ne
 800372c:	1a1b      	subne	r3, r3, r0
 800372e:	50a3      	strne	r3, [r4, r2]
 8003730:	e7af      	b.n	8003692 <_malloc_r+0x22>
 8003732:	6862      	ldr	r2, [r4, #4]
 8003734:	42a3      	cmp	r3, r4
 8003736:	bf0c      	ite	eq
 8003738:	f8c8 2000 	streq.w	r2, [r8]
 800373c:	605a      	strne	r2, [r3, #4]
 800373e:	e7eb      	b.n	8003718 <_malloc_r+0xa8>
 8003740:	4623      	mov	r3, r4
 8003742:	6864      	ldr	r4, [r4, #4]
 8003744:	e7ae      	b.n	80036a4 <_malloc_r+0x34>
 8003746:	463c      	mov	r4, r7
 8003748:	687f      	ldr	r7, [r7, #4]
 800374a:	e7b6      	b.n	80036ba <_malloc_r+0x4a>
 800374c:	461a      	mov	r2, r3
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	42a3      	cmp	r3, r4
 8003752:	d1fb      	bne.n	800374c <_malloc_r+0xdc>
 8003754:	2300      	movs	r3, #0
 8003756:	6053      	str	r3, [r2, #4]
 8003758:	e7de      	b.n	8003718 <_malloc_r+0xa8>
 800375a:	230c      	movs	r3, #12
 800375c:	6033      	str	r3, [r6, #0]
 800375e:	4630      	mov	r0, r6
 8003760:	f000 f80c 	bl	800377c <__malloc_unlock>
 8003764:	e794      	b.n	8003690 <_malloc_r+0x20>
 8003766:	6005      	str	r5, [r0, #0]
 8003768:	e7d6      	b.n	8003718 <_malloc_r+0xa8>
 800376a:	bf00      	nop
 800376c:	200000e8 	.word	0x200000e8

08003770 <__malloc_lock>:
 8003770:	4801      	ldr	r0, [pc, #4]	@ (8003778 <__malloc_lock+0x8>)
 8003772:	f000 b86b 	b.w	800384c <__retarget_lock_acquire_recursive>
 8003776:	bf00      	nop
 8003778:	20000228 	.word	0x20000228

0800377c <__malloc_unlock>:
 800377c:	4801      	ldr	r0, [pc, #4]	@ (8003784 <__malloc_unlock+0x8>)
 800377e:	f000 b866 	b.w	800384e <__retarget_lock_release_recursive>
 8003782:	bf00      	nop
 8003784:	20000228 	.word	0x20000228

08003788 <siprintf>:
 8003788:	b40e      	push	{r1, r2, r3}
 800378a:	b500      	push	{lr}
 800378c:	b09c      	sub	sp, #112	@ 0x70
 800378e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003790:	9002      	str	r0, [sp, #8]
 8003792:	9006      	str	r0, [sp, #24]
 8003794:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003798:	4809      	ldr	r0, [pc, #36]	@ (80037c0 <siprintf+0x38>)
 800379a:	9107      	str	r1, [sp, #28]
 800379c:	9104      	str	r1, [sp, #16]
 800379e:	4909      	ldr	r1, [pc, #36]	@ (80037c4 <siprintf+0x3c>)
 80037a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037a4:	9105      	str	r1, [sp, #20]
 80037a6:	6800      	ldr	r0, [r0, #0]
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	a902      	add	r1, sp, #8
 80037ac:	f000 f8f6 	bl	800399c <_svfiprintf_r>
 80037b0:	9b02      	ldr	r3, [sp, #8]
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	b01c      	add	sp, #112	@ 0x70
 80037b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037bc:	b003      	add	sp, #12
 80037be:	4770      	bx	lr
 80037c0:	20000014 	.word	0x20000014
 80037c4:	ffff0208 	.word	0xffff0208

080037c8 <memset>:
 80037c8:	4402      	add	r2, r0
 80037ca:	4603      	mov	r3, r0
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d100      	bne.n	80037d2 <memset+0xa>
 80037d0:	4770      	bx	lr
 80037d2:	f803 1b01 	strb.w	r1, [r3], #1
 80037d6:	e7f9      	b.n	80037cc <memset+0x4>

080037d8 <_sbrk_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4d06      	ldr	r5, [pc, #24]	@ (80037f4 <_sbrk_r+0x1c>)
 80037dc:	2300      	movs	r3, #0
 80037de:	4604      	mov	r4, r0
 80037e0:	4608      	mov	r0, r1
 80037e2:	602b      	str	r3, [r5, #0]
 80037e4:	f7fd fe30 	bl	8001448 <_sbrk>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_sbrk_r+0x1a>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_sbrk_r+0x1a>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	20000224 	.word	0x20000224

080037f8 <__errno>:
 80037f8:	4b01      	ldr	r3, [pc, #4]	@ (8003800 <__errno+0x8>)
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000014 	.word	0x20000014

08003804 <__libc_init_array>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4d0d      	ldr	r5, [pc, #52]	@ (800383c <__libc_init_array+0x38>)
 8003808:	4c0d      	ldr	r4, [pc, #52]	@ (8003840 <__libc_init_array+0x3c>)
 800380a:	1b64      	subs	r4, r4, r5
 800380c:	10a4      	asrs	r4, r4, #2
 800380e:	2600      	movs	r6, #0
 8003810:	42a6      	cmp	r6, r4
 8003812:	d109      	bne.n	8003828 <__libc_init_array+0x24>
 8003814:	4d0b      	ldr	r5, [pc, #44]	@ (8003844 <__libc_init_array+0x40>)
 8003816:	4c0c      	ldr	r4, [pc, #48]	@ (8003848 <__libc_init_array+0x44>)
 8003818:	f001 fb08 	bl	8004e2c <_init>
 800381c:	1b64      	subs	r4, r4, r5
 800381e:	10a4      	asrs	r4, r4, #2
 8003820:	2600      	movs	r6, #0
 8003822:	42a6      	cmp	r6, r4
 8003824:	d105      	bne.n	8003832 <__libc_init_array+0x2e>
 8003826:	bd70      	pop	{r4, r5, r6, pc}
 8003828:	f855 3b04 	ldr.w	r3, [r5], #4
 800382c:	4798      	blx	r3
 800382e:	3601      	adds	r6, #1
 8003830:	e7ee      	b.n	8003810 <__libc_init_array+0xc>
 8003832:	f855 3b04 	ldr.w	r3, [r5], #4
 8003836:	4798      	blx	r3
 8003838:	3601      	adds	r6, #1
 800383a:	e7f2      	b.n	8003822 <__libc_init_array+0x1e>
 800383c:	08004f28 	.word	0x08004f28
 8003840:	08004f28 	.word	0x08004f28
 8003844:	08004f28 	.word	0x08004f28
 8003848:	08004f2c 	.word	0x08004f2c

0800384c <__retarget_lock_acquire_recursive>:
 800384c:	4770      	bx	lr

0800384e <__retarget_lock_release_recursive>:
 800384e:	4770      	bx	lr

08003850 <_free_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4605      	mov	r5, r0
 8003854:	2900      	cmp	r1, #0
 8003856:	d041      	beq.n	80038dc <_free_r+0x8c>
 8003858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800385c:	1f0c      	subs	r4, r1, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	bfb8      	it	lt
 8003862:	18e4      	addlt	r4, r4, r3
 8003864:	f7ff ff84 	bl	8003770 <__malloc_lock>
 8003868:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <_free_r+0x90>)
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	b933      	cbnz	r3, 800387c <_free_r+0x2c>
 800386e:	6063      	str	r3, [r4, #4]
 8003870:	6014      	str	r4, [r2, #0]
 8003872:	4628      	mov	r0, r5
 8003874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003878:	f7ff bf80 	b.w	800377c <__malloc_unlock>
 800387c:	42a3      	cmp	r3, r4
 800387e:	d908      	bls.n	8003892 <_free_r+0x42>
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	1821      	adds	r1, r4, r0
 8003884:	428b      	cmp	r3, r1
 8003886:	bf01      	itttt	eq
 8003888:	6819      	ldreq	r1, [r3, #0]
 800388a:	685b      	ldreq	r3, [r3, #4]
 800388c:	1809      	addeq	r1, r1, r0
 800388e:	6021      	streq	r1, [r4, #0]
 8003890:	e7ed      	b.n	800386e <_free_r+0x1e>
 8003892:	461a      	mov	r2, r3
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	b10b      	cbz	r3, 800389c <_free_r+0x4c>
 8003898:	42a3      	cmp	r3, r4
 800389a:	d9fa      	bls.n	8003892 <_free_r+0x42>
 800389c:	6811      	ldr	r1, [r2, #0]
 800389e:	1850      	adds	r0, r2, r1
 80038a0:	42a0      	cmp	r0, r4
 80038a2:	d10b      	bne.n	80038bc <_free_r+0x6c>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	4401      	add	r1, r0
 80038a8:	1850      	adds	r0, r2, r1
 80038aa:	4283      	cmp	r3, r0
 80038ac:	6011      	str	r1, [r2, #0]
 80038ae:	d1e0      	bne.n	8003872 <_free_r+0x22>
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	6053      	str	r3, [r2, #4]
 80038b6:	4408      	add	r0, r1
 80038b8:	6010      	str	r0, [r2, #0]
 80038ba:	e7da      	b.n	8003872 <_free_r+0x22>
 80038bc:	d902      	bls.n	80038c4 <_free_r+0x74>
 80038be:	230c      	movs	r3, #12
 80038c0:	602b      	str	r3, [r5, #0]
 80038c2:	e7d6      	b.n	8003872 <_free_r+0x22>
 80038c4:	6820      	ldr	r0, [r4, #0]
 80038c6:	1821      	adds	r1, r4, r0
 80038c8:	428b      	cmp	r3, r1
 80038ca:	bf04      	itt	eq
 80038cc:	6819      	ldreq	r1, [r3, #0]
 80038ce:	685b      	ldreq	r3, [r3, #4]
 80038d0:	6063      	str	r3, [r4, #4]
 80038d2:	bf04      	itt	eq
 80038d4:	1809      	addeq	r1, r1, r0
 80038d6:	6021      	streq	r1, [r4, #0]
 80038d8:	6054      	str	r4, [r2, #4]
 80038da:	e7ca      	b.n	8003872 <_free_r+0x22>
 80038dc:	bd38      	pop	{r3, r4, r5, pc}
 80038de:	bf00      	nop
 80038e0:	200000e8 	.word	0x200000e8

080038e4 <__ssputs_r>:
 80038e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e8:	688e      	ldr	r6, [r1, #8]
 80038ea:	461f      	mov	r7, r3
 80038ec:	42be      	cmp	r6, r7
 80038ee:	680b      	ldr	r3, [r1, #0]
 80038f0:	4682      	mov	sl, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	4690      	mov	r8, r2
 80038f6:	d82d      	bhi.n	8003954 <__ssputs_r+0x70>
 80038f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003900:	d026      	beq.n	8003950 <__ssputs_r+0x6c>
 8003902:	6965      	ldr	r5, [r4, #20]
 8003904:	6909      	ldr	r1, [r1, #16]
 8003906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800390a:	eba3 0901 	sub.w	r9, r3, r1
 800390e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003912:	1c7b      	adds	r3, r7, #1
 8003914:	444b      	add	r3, r9
 8003916:	106d      	asrs	r5, r5, #1
 8003918:	429d      	cmp	r5, r3
 800391a:	bf38      	it	cc
 800391c:	461d      	movcc	r5, r3
 800391e:	0553      	lsls	r3, r2, #21
 8003920:	d527      	bpl.n	8003972 <__ssputs_r+0x8e>
 8003922:	4629      	mov	r1, r5
 8003924:	f7ff fea4 	bl	8003670 <_malloc_r>
 8003928:	4606      	mov	r6, r0
 800392a:	b360      	cbz	r0, 8003986 <__ssputs_r+0xa2>
 800392c:	6921      	ldr	r1, [r4, #16]
 800392e:	464a      	mov	r2, r9
 8003930:	f000 fad8 	bl	8003ee4 <memcpy>
 8003934:	89a3      	ldrh	r3, [r4, #12]
 8003936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800393a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800393e:	81a3      	strh	r3, [r4, #12]
 8003940:	6126      	str	r6, [r4, #16]
 8003942:	6165      	str	r5, [r4, #20]
 8003944:	444e      	add	r6, r9
 8003946:	eba5 0509 	sub.w	r5, r5, r9
 800394a:	6026      	str	r6, [r4, #0]
 800394c:	60a5      	str	r5, [r4, #8]
 800394e:	463e      	mov	r6, r7
 8003950:	42be      	cmp	r6, r7
 8003952:	d900      	bls.n	8003956 <__ssputs_r+0x72>
 8003954:	463e      	mov	r6, r7
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	4632      	mov	r2, r6
 800395a:	4641      	mov	r1, r8
 800395c:	f000 faa8 	bl	8003eb0 <memmove>
 8003960:	68a3      	ldr	r3, [r4, #8]
 8003962:	1b9b      	subs	r3, r3, r6
 8003964:	60a3      	str	r3, [r4, #8]
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	4433      	add	r3, r6
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	2000      	movs	r0, #0
 800396e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003972:	462a      	mov	r2, r5
 8003974:	f000 fac4 	bl	8003f00 <_realloc_r>
 8003978:	4606      	mov	r6, r0
 800397a:	2800      	cmp	r0, #0
 800397c:	d1e0      	bne.n	8003940 <__ssputs_r+0x5c>
 800397e:	6921      	ldr	r1, [r4, #16]
 8003980:	4650      	mov	r0, sl
 8003982:	f7ff ff65 	bl	8003850 <_free_r>
 8003986:	230c      	movs	r3, #12
 8003988:	f8ca 3000 	str.w	r3, [sl]
 800398c:	89a3      	ldrh	r3, [r4, #12]
 800398e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003992:	81a3      	strh	r3, [r4, #12]
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	e7e9      	b.n	800396e <__ssputs_r+0x8a>
	...

0800399c <_svfiprintf_r>:
 800399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a0:	4698      	mov	r8, r3
 80039a2:	898b      	ldrh	r3, [r1, #12]
 80039a4:	061b      	lsls	r3, r3, #24
 80039a6:	b09d      	sub	sp, #116	@ 0x74
 80039a8:	4607      	mov	r7, r0
 80039aa:	460d      	mov	r5, r1
 80039ac:	4614      	mov	r4, r2
 80039ae:	d510      	bpl.n	80039d2 <_svfiprintf_r+0x36>
 80039b0:	690b      	ldr	r3, [r1, #16]
 80039b2:	b973      	cbnz	r3, 80039d2 <_svfiprintf_r+0x36>
 80039b4:	2140      	movs	r1, #64	@ 0x40
 80039b6:	f7ff fe5b 	bl	8003670 <_malloc_r>
 80039ba:	6028      	str	r0, [r5, #0]
 80039bc:	6128      	str	r0, [r5, #16]
 80039be:	b930      	cbnz	r0, 80039ce <_svfiprintf_r+0x32>
 80039c0:	230c      	movs	r3, #12
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	b01d      	add	sp, #116	@ 0x74
 80039ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ce:	2340      	movs	r3, #64	@ 0x40
 80039d0:	616b      	str	r3, [r5, #20]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80039d6:	2320      	movs	r3, #32
 80039d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80039e0:	2330      	movs	r3, #48	@ 0x30
 80039e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b80 <_svfiprintf_r+0x1e4>
 80039e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039ea:	f04f 0901 	mov.w	r9, #1
 80039ee:	4623      	mov	r3, r4
 80039f0:	469a      	mov	sl, r3
 80039f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039f6:	b10a      	cbz	r2, 80039fc <_svfiprintf_r+0x60>
 80039f8:	2a25      	cmp	r2, #37	@ 0x25
 80039fa:	d1f9      	bne.n	80039f0 <_svfiprintf_r+0x54>
 80039fc:	ebba 0b04 	subs.w	fp, sl, r4
 8003a00:	d00b      	beq.n	8003a1a <_svfiprintf_r+0x7e>
 8003a02:	465b      	mov	r3, fp
 8003a04:	4622      	mov	r2, r4
 8003a06:	4629      	mov	r1, r5
 8003a08:	4638      	mov	r0, r7
 8003a0a:	f7ff ff6b 	bl	80038e4 <__ssputs_r>
 8003a0e:	3001      	adds	r0, #1
 8003a10:	f000 80a7 	beq.w	8003b62 <_svfiprintf_r+0x1c6>
 8003a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a16:	445a      	add	r2, fp
 8003a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 809f 	beq.w	8003b62 <_svfiprintf_r+0x1c6>
 8003a24:	2300      	movs	r3, #0
 8003a26:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a2e:	f10a 0a01 	add.w	sl, sl, #1
 8003a32:	9304      	str	r3, [sp, #16]
 8003a34:	9307      	str	r3, [sp, #28]
 8003a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a3c:	4654      	mov	r4, sl
 8003a3e:	2205      	movs	r2, #5
 8003a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a44:	484e      	ldr	r0, [pc, #312]	@ (8003b80 <_svfiprintf_r+0x1e4>)
 8003a46:	f7fc fbc3 	bl	80001d0 <memchr>
 8003a4a:	9a04      	ldr	r2, [sp, #16]
 8003a4c:	b9d8      	cbnz	r0, 8003a86 <_svfiprintf_r+0xea>
 8003a4e:	06d0      	lsls	r0, r2, #27
 8003a50:	bf44      	itt	mi
 8003a52:	2320      	movmi	r3, #32
 8003a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a58:	0711      	lsls	r1, r2, #28
 8003a5a:	bf44      	itt	mi
 8003a5c:	232b      	movmi	r3, #43	@ 0x2b
 8003a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a62:	f89a 3000 	ldrb.w	r3, [sl]
 8003a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a68:	d015      	beq.n	8003a96 <_svfiprintf_r+0xfa>
 8003a6a:	9a07      	ldr	r2, [sp, #28]
 8003a6c:	4654      	mov	r4, sl
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f04f 0c0a 	mov.w	ip, #10
 8003a74:	4621      	mov	r1, r4
 8003a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a7a:	3b30      	subs	r3, #48	@ 0x30
 8003a7c:	2b09      	cmp	r3, #9
 8003a7e:	d94b      	bls.n	8003b18 <_svfiprintf_r+0x17c>
 8003a80:	b1b0      	cbz	r0, 8003ab0 <_svfiprintf_r+0x114>
 8003a82:	9207      	str	r2, [sp, #28]
 8003a84:	e014      	b.n	8003ab0 <_svfiprintf_r+0x114>
 8003a86:	eba0 0308 	sub.w	r3, r0, r8
 8003a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	9304      	str	r3, [sp, #16]
 8003a92:	46a2      	mov	sl, r4
 8003a94:	e7d2      	b.n	8003a3c <_svfiprintf_r+0xa0>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	1d19      	adds	r1, r3, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	9103      	str	r1, [sp, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bfbb      	ittet	lt
 8003aa2:	425b      	neglt	r3, r3
 8003aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8003aa8:	9307      	strge	r3, [sp, #28]
 8003aaa:	9307      	strlt	r3, [sp, #28]
 8003aac:	bfb8      	it	lt
 8003aae:	9204      	strlt	r2, [sp, #16]
 8003ab0:	7823      	ldrb	r3, [r4, #0]
 8003ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ab4:	d10a      	bne.n	8003acc <_svfiprintf_r+0x130>
 8003ab6:	7863      	ldrb	r3, [r4, #1]
 8003ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aba:	d132      	bne.n	8003b22 <_svfiprintf_r+0x186>
 8003abc:	9b03      	ldr	r3, [sp, #12]
 8003abe:	1d1a      	adds	r2, r3, #4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	9203      	str	r2, [sp, #12]
 8003ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ac8:	3402      	adds	r4, #2
 8003aca:	9305      	str	r3, [sp, #20]
 8003acc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b90 <_svfiprintf_r+0x1f4>
 8003ad0:	7821      	ldrb	r1, [r4, #0]
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	4650      	mov	r0, sl
 8003ad6:	f7fc fb7b 	bl	80001d0 <memchr>
 8003ada:	b138      	cbz	r0, 8003aec <_svfiprintf_r+0x150>
 8003adc:	9b04      	ldr	r3, [sp, #16]
 8003ade:	eba0 000a 	sub.w	r0, r0, sl
 8003ae2:	2240      	movs	r2, #64	@ 0x40
 8003ae4:	4082      	lsls	r2, r0
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	3401      	adds	r4, #1
 8003aea:	9304      	str	r3, [sp, #16]
 8003aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af0:	4824      	ldr	r0, [pc, #144]	@ (8003b84 <_svfiprintf_r+0x1e8>)
 8003af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003af6:	2206      	movs	r2, #6
 8003af8:	f7fc fb6a 	bl	80001d0 <memchr>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d036      	beq.n	8003b6e <_svfiprintf_r+0x1d2>
 8003b00:	4b21      	ldr	r3, [pc, #132]	@ (8003b88 <_svfiprintf_r+0x1ec>)
 8003b02:	bb1b      	cbnz	r3, 8003b4c <_svfiprintf_r+0x1b0>
 8003b04:	9b03      	ldr	r3, [sp, #12]
 8003b06:	3307      	adds	r3, #7
 8003b08:	f023 0307 	bic.w	r3, r3, #7
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	9303      	str	r3, [sp, #12]
 8003b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b12:	4433      	add	r3, r6
 8003b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b16:	e76a      	b.n	80039ee <_svfiprintf_r+0x52>
 8003b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	2001      	movs	r0, #1
 8003b20:	e7a8      	b.n	8003a74 <_svfiprintf_r+0xd8>
 8003b22:	2300      	movs	r3, #0
 8003b24:	3401      	adds	r4, #1
 8003b26:	9305      	str	r3, [sp, #20]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f04f 0c0a 	mov.w	ip, #10
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b34:	3a30      	subs	r2, #48	@ 0x30
 8003b36:	2a09      	cmp	r2, #9
 8003b38:	d903      	bls.n	8003b42 <_svfiprintf_r+0x1a6>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0c6      	beq.n	8003acc <_svfiprintf_r+0x130>
 8003b3e:	9105      	str	r1, [sp, #20]
 8003b40:	e7c4      	b.n	8003acc <_svfiprintf_r+0x130>
 8003b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b46:	4604      	mov	r4, r0
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e7f0      	b.n	8003b2e <_svfiprintf_r+0x192>
 8003b4c:	ab03      	add	r3, sp, #12
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	462a      	mov	r2, r5
 8003b52:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <_svfiprintf_r+0x1f0>)
 8003b54:	a904      	add	r1, sp, #16
 8003b56:	4638      	mov	r0, r7
 8003b58:	f3af 8000 	nop.w
 8003b5c:	1c42      	adds	r2, r0, #1
 8003b5e:	4606      	mov	r6, r0
 8003b60:	d1d6      	bne.n	8003b10 <_svfiprintf_r+0x174>
 8003b62:	89ab      	ldrh	r3, [r5, #12]
 8003b64:	065b      	lsls	r3, r3, #25
 8003b66:	f53f af2d 	bmi.w	80039c4 <_svfiprintf_r+0x28>
 8003b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b6c:	e72c      	b.n	80039c8 <_svfiprintf_r+0x2c>
 8003b6e:	ab03      	add	r3, sp, #12
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	462a      	mov	r2, r5
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <_svfiprintf_r+0x1f0>)
 8003b76:	a904      	add	r1, sp, #16
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f000 f879 	bl	8003c70 <_printf_i>
 8003b7e:	e7ed      	b.n	8003b5c <_svfiprintf_r+0x1c0>
 8003b80:	08004ebc 	.word	0x08004ebc
 8003b84:	08004ec6 	.word	0x08004ec6
 8003b88:	00000000 	.word	0x00000000
 8003b8c:	080038e5 	.word	0x080038e5
 8003b90:	08004ec2 	.word	0x08004ec2

08003b94 <_printf_common>:
 8003b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	4616      	mov	r6, r2
 8003b9a:	4698      	mov	r8, r3
 8003b9c:	688a      	ldr	r2, [r1, #8]
 8003b9e:	690b      	ldr	r3, [r1, #16]
 8003ba0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bfb8      	it	lt
 8003ba8:	4613      	movlt	r3, r2
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	b10a      	cbz	r2, 8003bba <_printf_common+0x26>
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	6033      	str	r3, [r6, #0]
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	0699      	lsls	r1, r3, #26
 8003bbe:	bf42      	ittt	mi
 8003bc0:	6833      	ldrmi	r3, [r6, #0]
 8003bc2:	3302      	addmi	r3, #2
 8003bc4:	6033      	strmi	r3, [r6, #0]
 8003bc6:	6825      	ldr	r5, [r4, #0]
 8003bc8:	f015 0506 	ands.w	r5, r5, #6
 8003bcc:	d106      	bne.n	8003bdc <_printf_common+0x48>
 8003bce:	f104 0a19 	add.w	sl, r4, #25
 8003bd2:	68e3      	ldr	r3, [r4, #12]
 8003bd4:	6832      	ldr	r2, [r6, #0]
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	42ab      	cmp	r3, r5
 8003bda:	dc26      	bgt.n	8003c2a <_printf_common+0x96>
 8003bdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003be0:	6822      	ldr	r2, [r4, #0]
 8003be2:	3b00      	subs	r3, #0
 8003be4:	bf18      	it	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	0692      	lsls	r2, r2, #26
 8003bea:	d42b      	bmi.n	8003c44 <_printf_common+0xb0>
 8003bec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	47c8      	blx	r9
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d01e      	beq.n	8003c38 <_printf_common+0xa4>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	6922      	ldr	r2, [r4, #16]
 8003bfe:	f003 0306 	and.w	r3, r3, #6
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	bf02      	ittt	eq
 8003c06:	68e5      	ldreq	r5, [r4, #12]
 8003c08:	6833      	ldreq	r3, [r6, #0]
 8003c0a:	1aed      	subeq	r5, r5, r3
 8003c0c:	68a3      	ldr	r3, [r4, #8]
 8003c0e:	bf0c      	ite	eq
 8003c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c14:	2500      	movne	r5, #0
 8003c16:	4293      	cmp	r3, r2
 8003c18:	bfc4      	itt	gt
 8003c1a:	1a9b      	subgt	r3, r3, r2
 8003c1c:	18ed      	addgt	r5, r5, r3
 8003c1e:	2600      	movs	r6, #0
 8003c20:	341a      	adds	r4, #26
 8003c22:	42b5      	cmp	r5, r6
 8003c24:	d11a      	bne.n	8003c5c <_printf_common+0xc8>
 8003c26:	2000      	movs	r0, #0
 8003c28:	e008      	b.n	8003c3c <_printf_common+0xa8>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4652      	mov	r2, sl
 8003c2e:	4641      	mov	r1, r8
 8003c30:	4638      	mov	r0, r7
 8003c32:	47c8      	blx	r9
 8003c34:	3001      	adds	r0, #1
 8003c36:	d103      	bne.n	8003c40 <_printf_common+0xac>
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c40:	3501      	adds	r5, #1
 8003c42:	e7c6      	b.n	8003bd2 <_printf_common+0x3e>
 8003c44:	18e1      	adds	r1, r4, r3
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	2030      	movs	r0, #48	@ 0x30
 8003c4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c4e:	4422      	add	r2, r4
 8003c50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c58:	3302      	adds	r3, #2
 8003c5a:	e7c7      	b.n	8003bec <_printf_common+0x58>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4622      	mov	r2, r4
 8003c60:	4641      	mov	r1, r8
 8003c62:	4638      	mov	r0, r7
 8003c64:	47c8      	blx	r9
 8003c66:	3001      	adds	r0, #1
 8003c68:	d0e6      	beq.n	8003c38 <_printf_common+0xa4>
 8003c6a:	3601      	adds	r6, #1
 8003c6c:	e7d9      	b.n	8003c22 <_printf_common+0x8e>
	...

08003c70 <_printf_i>:
 8003c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	7e0f      	ldrb	r7, [r1, #24]
 8003c76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c78:	2f78      	cmp	r7, #120	@ 0x78
 8003c7a:	4691      	mov	r9, r2
 8003c7c:	4680      	mov	r8, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	469a      	mov	sl, r3
 8003c82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c86:	d807      	bhi.n	8003c98 <_printf_i+0x28>
 8003c88:	2f62      	cmp	r7, #98	@ 0x62
 8003c8a:	d80a      	bhi.n	8003ca2 <_printf_i+0x32>
 8003c8c:	2f00      	cmp	r7, #0
 8003c8e:	f000 80d2 	beq.w	8003e36 <_printf_i+0x1c6>
 8003c92:	2f58      	cmp	r7, #88	@ 0x58
 8003c94:	f000 80b9 	beq.w	8003e0a <_printf_i+0x19a>
 8003c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ca0:	e03a      	b.n	8003d18 <_printf_i+0xa8>
 8003ca2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ca6:	2b15      	cmp	r3, #21
 8003ca8:	d8f6      	bhi.n	8003c98 <_printf_i+0x28>
 8003caa:	a101      	add	r1, pc, #4	@ (adr r1, 8003cb0 <_printf_i+0x40>)
 8003cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d1d 	.word	0x08003d1d
 8003cb8:	08003c99 	.word	0x08003c99
 8003cbc:	08003c99 	.word	0x08003c99
 8003cc0:	08003c99 	.word	0x08003c99
 8003cc4:	08003c99 	.word	0x08003c99
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003c99 	.word	0x08003c99
 8003cd0:	08003c99 	.word	0x08003c99
 8003cd4:	08003c99 	.word	0x08003c99
 8003cd8:	08003c99 	.word	0x08003c99
 8003cdc:	08003e1d 	.word	0x08003e1d
 8003ce0:	08003d47 	.word	0x08003d47
 8003ce4:	08003dd7 	.word	0x08003dd7
 8003ce8:	08003c99 	.word	0x08003c99
 8003cec:	08003c99 	.word	0x08003c99
 8003cf0:	08003e3f 	.word	0x08003e3f
 8003cf4:	08003c99 	.word	0x08003c99
 8003cf8:	08003d47 	.word	0x08003d47
 8003cfc:	08003c99 	.word	0x08003c99
 8003d00:	08003c99 	.word	0x08003c99
 8003d04:	08003ddf 	.word	0x08003ddf
 8003d08:	6833      	ldr	r3, [r6, #0]
 8003d0a:	1d1a      	adds	r2, r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6032      	str	r2, [r6, #0]
 8003d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e09d      	b.n	8003e58 <_printf_i+0x1e8>
 8003d1c:	6833      	ldr	r3, [r6, #0]
 8003d1e:	6820      	ldr	r0, [r4, #0]
 8003d20:	1d19      	adds	r1, r3, #4
 8003d22:	6031      	str	r1, [r6, #0]
 8003d24:	0606      	lsls	r6, r0, #24
 8003d26:	d501      	bpl.n	8003d2c <_printf_i+0xbc>
 8003d28:	681d      	ldr	r5, [r3, #0]
 8003d2a:	e003      	b.n	8003d34 <_printf_i+0xc4>
 8003d2c:	0645      	lsls	r5, r0, #25
 8003d2e:	d5fb      	bpl.n	8003d28 <_printf_i+0xb8>
 8003d30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d34:	2d00      	cmp	r5, #0
 8003d36:	da03      	bge.n	8003d40 <_printf_i+0xd0>
 8003d38:	232d      	movs	r3, #45	@ 0x2d
 8003d3a:	426d      	negs	r5, r5
 8003d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d40:	4859      	ldr	r0, [pc, #356]	@ (8003ea8 <_printf_i+0x238>)
 8003d42:	230a      	movs	r3, #10
 8003d44:	e011      	b.n	8003d6a <_printf_i+0xfa>
 8003d46:	6821      	ldr	r1, [r4, #0]
 8003d48:	6833      	ldr	r3, [r6, #0]
 8003d4a:	0608      	lsls	r0, r1, #24
 8003d4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d50:	d402      	bmi.n	8003d58 <_printf_i+0xe8>
 8003d52:	0649      	lsls	r1, r1, #25
 8003d54:	bf48      	it	mi
 8003d56:	b2ad      	uxthmi	r5, r5
 8003d58:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d5a:	4853      	ldr	r0, [pc, #332]	@ (8003ea8 <_printf_i+0x238>)
 8003d5c:	6033      	str	r3, [r6, #0]
 8003d5e:	bf14      	ite	ne
 8003d60:	230a      	movne	r3, #10
 8003d62:	2308      	moveq	r3, #8
 8003d64:	2100      	movs	r1, #0
 8003d66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d6a:	6866      	ldr	r6, [r4, #4]
 8003d6c:	60a6      	str	r6, [r4, #8]
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	bfa2      	ittt	ge
 8003d72:	6821      	ldrge	r1, [r4, #0]
 8003d74:	f021 0104 	bicge.w	r1, r1, #4
 8003d78:	6021      	strge	r1, [r4, #0]
 8003d7a:	b90d      	cbnz	r5, 8003d80 <_printf_i+0x110>
 8003d7c:	2e00      	cmp	r6, #0
 8003d7e:	d04b      	beq.n	8003e18 <_printf_i+0x1a8>
 8003d80:	4616      	mov	r6, r2
 8003d82:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d86:	fb03 5711 	mls	r7, r3, r1, r5
 8003d8a:	5dc7      	ldrb	r7, [r0, r7]
 8003d8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d90:	462f      	mov	r7, r5
 8003d92:	42bb      	cmp	r3, r7
 8003d94:	460d      	mov	r5, r1
 8003d96:	d9f4      	bls.n	8003d82 <_printf_i+0x112>
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d10b      	bne.n	8003db4 <_printf_i+0x144>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	07df      	lsls	r7, r3, #31
 8003da0:	d508      	bpl.n	8003db4 <_printf_i+0x144>
 8003da2:	6923      	ldr	r3, [r4, #16]
 8003da4:	6861      	ldr	r1, [r4, #4]
 8003da6:	4299      	cmp	r1, r3
 8003da8:	bfde      	ittt	le
 8003daa:	2330      	movle	r3, #48	@ 0x30
 8003dac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003db0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003db4:	1b92      	subs	r2, r2, r6
 8003db6:	6122      	str	r2, [r4, #16]
 8003db8:	f8cd a000 	str.w	sl, [sp]
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	aa03      	add	r2, sp, #12
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	f7ff fee6 	bl	8003b94 <_printf_common>
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d14a      	bne.n	8003e62 <_printf_i+0x1f2>
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	b004      	add	sp, #16
 8003dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	f043 0320 	orr.w	r3, r3, #32
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	4833      	ldr	r0, [pc, #204]	@ (8003eac <_printf_i+0x23c>)
 8003de0:	2778      	movs	r7, #120	@ 0x78
 8003de2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	6831      	ldr	r1, [r6, #0]
 8003dea:	061f      	lsls	r7, r3, #24
 8003dec:	f851 5b04 	ldr.w	r5, [r1], #4
 8003df0:	d402      	bmi.n	8003df8 <_printf_i+0x188>
 8003df2:	065f      	lsls	r7, r3, #25
 8003df4:	bf48      	it	mi
 8003df6:	b2ad      	uxthmi	r5, r5
 8003df8:	6031      	str	r1, [r6, #0]
 8003dfa:	07d9      	lsls	r1, r3, #31
 8003dfc:	bf44      	itt	mi
 8003dfe:	f043 0320 	orrmi.w	r3, r3, #32
 8003e02:	6023      	strmi	r3, [r4, #0]
 8003e04:	b11d      	cbz	r5, 8003e0e <_printf_i+0x19e>
 8003e06:	2310      	movs	r3, #16
 8003e08:	e7ac      	b.n	8003d64 <_printf_i+0xf4>
 8003e0a:	4827      	ldr	r0, [pc, #156]	@ (8003ea8 <_printf_i+0x238>)
 8003e0c:	e7e9      	b.n	8003de2 <_printf_i+0x172>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	f023 0320 	bic.w	r3, r3, #32
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	e7f6      	b.n	8003e06 <_printf_i+0x196>
 8003e18:	4616      	mov	r6, r2
 8003e1a:	e7bd      	b.n	8003d98 <_printf_i+0x128>
 8003e1c:	6833      	ldr	r3, [r6, #0]
 8003e1e:	6825      	ldr	r5, [r4, #0]
 8003e20:	6961      	ldr	r1, [r4, #20]
 8003e22:	1d18      	adds	r0, r3, #4
 8003e24:	6030      	str	r0, [r6, #0]
 8003e26:	062e      	lsls	r6, r5, #24
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	d501      	bpl.n	8003e30 <_printf_i+0x1c0>
 8003e2c:	6019      	str	r1, [r3, #0]
 8003e2e:	e002      	b.n	8003e36 <_printf_i+0x1c6>
 8003e30:	0668      	lsls	r0, r5, #25
 8003e32:	d5fb      	bpl.n	8003e2c <_printf_i+0x1bc>
 8003e34:	8019      	strh	r1, [r3, #0]
 8003e36:	2300      	movs	r3, #0
 8003e38:	6123      	str	r3, [r4, #16]
 8003e3a:	4616      	mov	r6, r2
 8003e3c:	e7bc      	b.n	8003db8 <_printf_i+0x148>
 8003e3e:	6833      	ldr	r3, [r6, #0]
 8003e40:	1d1a      	adds	r2, r3, #4
 8003e42:	6032      	str	r2, [r6, #0]
 8003e44:	681e      	ldr	r6, [r3, #0]
 8003e46:	6862      	ldr	r2, [r4, #4]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f7fc f9c0 	bl	80001d0 <memchr>
 8003e50:	b108      	cbz	r0, 8003e56 <_printf_i+0x1e6>
 8003e52:	1b80      	subs	r0, r0, r6
 8003e54:	6060      	str	r0, [r4, #4]
 8003e56:	6863      	ldr	r3, [r4, #4]
 8003e58:	6123      	str	r3, [r4, #16]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e60:	e7aa      	b.n	8003db8 <_printf_i+0x148>
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	4632      	mov	r2, r6
 8003e66:	4649      	mov	r1, r9
 8003e68:	4640      	mov	r0, r8
 8003e6a:	47d0      	blx	sl
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d0ad      	beq.n	8003dcc <_printf_i+0x15c>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	079b      	lsls	r3, r3, #30
 8003e74:	d413      	bmi.n	8003e9e <_printf_i+0x22e>
 8003e76:	68e0      	ldr	r0, [r4, #12]
 8003e78:	9b03      	ldr	r3, [sp, #12]
 8003e7a:	4298      	cmp	r0, r3
 8003e7c:	bfb8      	it	lt
 8003e7e:	4618      	movlt	r0, r3
 8003e80:	e7a6      	b.n	8003dd0 <_printf_i+0x160>
 8003e82:	2301      	movs	r3, #1
 8003e84:	4632      	mov	r2, r6
 8003e86:	4649      	mov	r1, r9
 8003e88:	4640      	mov	r0, r8
 8003e8a:	47d0      	blx	sl
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d09d      	beq.n	8003dcc <_printf_i+0x15c>
 8003e90:	3501      	adds	r5, #1
 8003e92:	68e3      	ldr	r3, [r4, #12]
 8003e94:	9903      	ldr	r1, [sp, #12]
 8003e96:	1a5b      	subs	r3, r3, r1
 8003e98:	42ab      	cmp	r3, r5
 8003e9a:	dcf2      	bgt.n	8003e82 <_printf_i+0x212>
 8003e9c:	e7eb      	b.n	8003e76 <_printf_i+0x206>
 8003e9e:	2500      	movs	r5, #0
 8003ea0:	f104 0619 	add.w	r6, r4, #25
 8003ea4:	e7f5      	b.n	8003e92 <_printf_i+0x222>
 8003ea6:	bf00      	nop
 8003ea8:	08004ecd 	.word	0x08004ecd
 8003eac:	08004ede 	.word	0x08004ede

08003eb0 <memmove>:
 8003eb0:	4288      	cmp	r0, r1
 8003eb2:	b510      	push	{r4, lr}
 8003eb4:	eb01 0402 	add.w	r4, r1, r2
 8003eb8:	d902      	bls.n	8003ec0 <memmove+0x10>
 8003eba:	4284      	cmp	r4, r0
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	d807      	bhi.n	8003ed0 <memmove+0x20>
 8003ec0:	1e43      	subs	r3, r0, #1
 8003ec2:	42a1      	cmp	r1, r4
 8003ec4:	d008      	beq.n	8003ed8 <memmove+0x28>
 8003ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ece:	e7f8      	b.n	8003ec2 <memmove+0x12>
 8003ed0:	4402      	add	r2, r0
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	428a      	cmp	r2, r1
 8003ed6:	d100      	bne.n	8003eda <memmove+0x2a>
 8003ed8:	bd10      	pop	{r4, pc}
 8003eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ee2:	e7f7      	b.n	8003ed4 <memmove+0x24>

08003ee4 <memcpy>:
 8003ee4:	440a      	add	r2, r1
 8003ee6:	4291      	cmp	r1, r2
 8003ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003eec:	d100      	bne.n	8003ef0 <memcpy+0xc>
 8003eee:	4770      	bx	lr
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003efa:	4291      	cmp	r1, r2
 8003efc:	d1f9      	bne.n	8003ef2 <memcpy+0xe>
 8003efe:	bd10      	pop	{r4, pc}

08003f00 <_realloc_r>:
 8003f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f04:	4680      	mov	r8, r0
 8003f06:	4615      	mov	r5, r2
 8003f08:	460c      	mov	r4, r1
 8003f0a:	b921      	cbnz	r1, 8003f16 <_realloc_r+0x16>
 8003f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f10:	4611      	mov	r1, r2
 8003f12:	f7ff bbad 	b.w	8003670 <_malloc_r>
 8003f16:	b92a      	cbnz	r2, 8003f24 <_realloc_r+0x24>
 8003f18:	f7ff fc9a 	bl	8003850 <_free_r>
 8003f1c:	2400      	movs	r4, #0
 8003f1e:	4620      	mov	r0, r4
 8003f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f24:	f000 f81a 	bl	8003f5c <_malloc_usable_size_r>
 8003f28:	4285      	cmp	r5, r0
 8003f2a:	4606      	mov	r6, r0
 8003f2c:	d802      	bhi.n	8003f34 <_realloc_r+0x34>
 8003f2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f32:	d8f4      	bhi.n	8003f1e <_realloc_r+0x1e>
 8003f34:	4629      	mov	r1, r5
 8003f36:	4640      	mov	r0, r8
 8003f38:	f7ff fb9a 	bl	8003670 <_malloc_r>
 8003f3c:	4607      	mov	r7, r0
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d0ec      	beq.n	8003f1c <_realloc_r+0x1c>
 8003f42:	42b5      	cmp	r5, r6
 8003f44:	462a      	mov	r2, r5
 8003f46:	4621      	mov	r1, r4
 8003f48:	bf28      	it	cs
 8003f4a:	4632      	movcs	r2, r6
 8003f4c:	f7ff ffca 	bl	8003ee4 <memcpy>
 8003f50:	4621      	mov	r1, r4
 8003f52:	4640      	mov	r0, r8
 8003f54:	f7ff fc7c 	bl	8003850 <_free_r>
 8003f58:	463c      	mov	r4, r7
 8003f5a:	e7e0      	b.n	8003f1e <_realloc_r+0x1e>

08003f5c <_malloc_usable_size_r>:
 8003f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f60:	1f18      	subs	r0, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bfbc      	itt	lt
 8003f66:	580b      	ldrlt	r3, [r1, r0]
 8003f68:	18c0      	addlt	r0, r0, r3
 8003f6a:	4770      	bx	lr

08003f6c <pow>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	ed2d 8b02 	vpush	{d8}
 8003f72:	eeb0 8a40 	vmov.f32	s16, s0
 8003f76:	eef0 8a60 	vmov.f32	s17, s1
 8003f7a:	ec55 4b11 	vmov	r4, r5, d1
 8003f7e:	f000 f873 	bl	8004068 <__ieee754_pow>
 8003f82:	4622      	mov	r2, r4
 8003f84:	462b      	mov	r3, r5
 8003f86:	4620      	mov	r0, r4
 8003f88:	4629      	mov	r1, r5
 8003f8a:	ec57 6b10 	vmov	r6, r7, d0
 8003f8e:	f7fc fdc5 	bl	8000b1c <__aeabi_dcmpun>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d13b      	bne.n	800400e <pow+0xa2>
 8003f96:	ec51 0b18 	vmov	r0, r1, d8
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f7fc fd8b 	bl	8000ab8 <__aeabi_dcmpeq>
 8003fa2:	b1b8      	cbz	r0, 8003fd4 <pow+0x68>
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	4620      	mov	r0, r4
 8003faa:	4629      	mov	r1, r5
 8003fac:	f7fc fd84 	bl	8000ab8 <__aeabi_dcmpeq>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d146      	bne.n	8004042 <pow+0xd6>
 8003fb4:	ec45 4b10 	vmov	d0, r4, r5
 8003fb8:	f000 f848 	bl	800404c <finite>
 8003fbc:	b338      	cbz	r0, 800400e <pow+0xa2>
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	f7fc fd81 	bl	8000acc <__aeabi_dcmplt>
 8003fca:	b300      	cbz	r0, 800400e <pow+0xa2>
 8003fcc:	f7ff fc14 	bl	80037f8 <__errno>
 8003fd0:	2322      	movs	r3, #34	@ 0x22
 8003fd2:	e01b      	b.n	800400c <pow+0xa0>
 8003fd4:	ec47 6b10 	vmov	d0, r6, r7
 8003fd8:	f000 f838 	bl	800404c <finite>
 8003fdc:	b9e0      	cbnz	r0, 8004018 <pow+0xac>
 8003fde:	eeb0 0a48 	vmov.f32	s0, s16
 8003fe2:	eef0 0a68 	vmov.f32	s1, s17
 8003fe6:	f000 f831 	bl	800404c <finite>
 8003fea:	b1a8      	cbz	r0, 8004018 <pow+0xac>
 8003fec:	ec45 4b10 	vmov	d0, r4, r5
 8003ff0:	f000 f82c 	bl	800404c <finite>
 8003ff4:	b180      	cbz	r0, 8004018 <pow+0xac>
 8003ff6:	4632      	mov	r2, r6
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	f7fc fd8d 	bl	8000b1c <__aeabi_dcmpun>
 8004002:	2800      	cmp	r0, #0
 8004004:	d0e2      	beq.n	8003fcc <pow+0x60>
 8004006:	f7ff fbf7 	bl	80037f8 <__errno>
 800400a:	2321      	movs	r3, #33	@ 0x21
 800400c:	6003      	str	r3, [r0, #0]
 800400e:	ecbd 8b02 	vpop	{d8}
 8004012:	ec47 6b10 	vmov	d0, r6, r7
 8004016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004018:	2200      	movs	r2, #0
 800401a:	2300      	movs	r3, #0
 800401c:	4630      	mov	r0, r6
 800401e:	4639      	mov	r1, r7
 8004020:	f7fc fd4a 	bl	8000ab8 <__aeabi_dcmpeq>
 8004024:	2800      	cmp	r0, #0
 8004026:	d0f2      	beq.n	800400e <pow+0xa2>
 8004028:	eeb0 0a48 	vmov.f32	s0, s16
 800402c:	eef0 0a68 	vmov.f32	s1, s17
 8004030:	f000 f80c 	bl	800404c <finite>
 8004034:	2800      	cmp	r0, #0
 8004036:	d0ea      	beq.n	800400e <pow+0xa2>
 8004038:	ec45 4b10 	vmov	d0, r4, r5
 800403c:	f000 f806 	bl	800404c <finite>
 8004040:	e7c3      	b.n	8003fca <pow+0x5e>
 8004042:	4f01      	ldr	r7, [pc, #4]	@ (8004048 <pow+0xdc>)
 8004044:	2600      	movs	r6, #0
 8004046:	e7e2      	b.n	800400e <pow+0xa2>
 8004048:	3ff00000 	.word	0x3ff00000

0800404c <finite>:
 800404c:	b082      	sub	sp, #8
 800404e:	ed8d 0b00 	vstr	d0, [sp]
 8004052:	9801      	ldr	r0, [sp, #4]
 8004054:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004058:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800405c:	0fc0      	lsrs	r0, r0, #31
 800405e:	b002      	add	sp, #8
 8004060:	4770      	bx	lr
 8004062:	0000      	movs	r0, r0
 8004064:	0000      	movs	r0, r0
	...

08004068 <__ieee754_pow>:
 8004068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	b091      	sub	sp, #68	@ 0x44
 800406e:	ed8d 1b00 	vstr	d1, [sp]
 8004072:	e9dd 1900 	ldrd	r1, r9, [sp]
 8004076:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800407a:	ea5a 0001 	orrs.w	r0, sl, r1
 800407e:	ec57 6b10 	vmov	r6, r7, d0
 8004082:	d113      	bne.n	80040ac <__ieee754_pow+0x44>
 8004084:	19b3      	adds	r3, r6, r6
 8004086:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800408a:	4152      	adcs	r2, r2
 800408c:	4298      	cmp	r0, r3
 800408e:	4b98      	ldr	r3, [pc, #608]	@ (80042f0 <__ieee754_pow+0x288>)
 8004090:	4193      	sbcs	r3, r2
 8004092:	f080 84ea 	bcs.w	8004a6a <__ieee754_pow+0xa02>
 8004096:	e9dd 2300 	ldrd	r2, r3, [sp]
 800409a:	4630      	mov	r0, r6
 800409c:	4639      	mov	r1, r7
 800409e:	f7fc f8ed 	bl	800027c <__adddf3>
 80040a2:	ec41 0b10 	vmov	d0, r0, r1
 80040a6:	b011      	add	sp, #68	@ 0x44
 80040a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ac:	4a91      	ldr	r2, [pc, #580]	@ (80042f4 <__ieee754_pow+0x28c>)
 80040ae:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80040b2:	4590      	cmp	r8, r2
 80040b4:	463d      	mov	r5, r7
 80040b6:	4633      	mov	r3, r6
 80040b8:	d806      	bhi.n	80040c8 <__ieee754_pow+0x60>
 80040ba:	d101      	bne.n	80040c0 <__ieee754_pow+0x58>
 80040bc:	2e00      	cmp	r6, #0
 80040be:	d1ea      	bne.n	8004096 <__ieee754_pow+0x2e>
 80040c0:	4592      	cmp	sl, r2
 80040c2:	d801      	bhi.n	80040c8 <__ieee754_pow+0x60>
 80040c4:	d10e      	bne.n	80040e4 <__ieee754_pow+0x7c>
 80040c6:	b169      	cbz	r1, 80040e4 <__ieee754_pow+0x7c>
 80040c8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80040cc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80040d0:	431d      	orrs	r5, r3
 80040d2:	d1e0      	bne.n	8004096 <__ieee754_pow+0x2e>
 80040d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80040d8:	18db      	adds	r3, r3, r3
 80040da:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80040de:	4152      	adcs	r2, r2
 80040e0:	429d      	cmp	r5, r3
 80040e2:	e7d4      	b.n	800408e <__ieee754_pow+0x26>
 80040e4:	2d00      	cmp	r5, #0
 80040e6:	46c3      	mov	fp, r8
 80040e8:	da3a      	bge.n	8004160 <__ieee754_pow+0xf8>
 80040ea:	4a83      	ldr	r2, [pc, #524]	@ (80042f8 <__ieee754_pow+0x290>)
 80040ec:	4592      	cmp	sl, r2
 80040ee:	d84d      	bhi.n	800418c <__ieee754_pow+0x124>
 80040f0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80040f4:	4592      	cmp	sl, r2
 80040f6:	f240 84c7 	bls.w	8004a88 <__ieee754_pow+0xa20>
 80040fa:	ea4f 522a 	mov.w	r2, sl, asr #20
 80040fe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004102:	2a14      	cmp	r2, #20
 8004104:	dd0f      	ble.n	8004126 <__ieee754_pow+0xbe>
 8004106:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800410a:	fa21 f402 	lsr.w	r4, r1, r2
 800410e:	fa04 f202 	lsl.w	r2, r4, r2
 8004112:	428a      	cmp	r2, r1
 8004114:	f040 84b8 	bne.w	8004a88 <__ieee754_pow+0xa20>
 8004118:	f004 0401 	and.w	r4, r4, #1
 800411c:	f1c4 0402 	rsb	r4, r4, #2
 8004120:	2900      	cmp	r1, #0
 8004122:	d158      	bne.n	80041d6 <__ieee754_pow+0x16e>
 8004124:	e00e      	b.n	8004144 <__ieee754_pow+0xdc>
 8004126:	2900      	cmp	r1, #0
 8004128:	d154      	bne.n	80041d4 <__ieee754_pow+0x16c>
 800412a:	f1c2 0214 	rsb	r2, r2, #20
 800412e:	fa4a f402 	asr.w	r4, sl, r2
 8004132:	fa04 f202 	lsl.w	r2, r4, r2
 8004136:	4552      	cmp	r2, sl
 8004138:	f040 84a3 	bne.w	8004a82 <__ieee754_pow+0xa1a>
 800413c:	f004 0401 	and.w	r4, r4, #1
 8004140:	f1c4 0402 	rsb	r4, r4, #2
 8004144:	4a6d      	ldr	r2, [pc, #436]	@ (80042fc <__ieee754_pow+0x294>)
 8004146:	4592      	cmp	sl, r2
 8004148:	d12e      	bne.n	80041a8 <__ieee754_pow+0x140>
 800414a:	f1b9 0f00 	cmp.w	r9, #0
 800414e:	f280 8494 	bge.w	8004a7a <__ieee754_pow+0xa12>
 8004152:	496a      	ldr	r1, [pc, #424]	@ (80042fc <__ieee754_pow+0x294>)
 8004154:	4632      	mov	r2, r6
 8004156:	463b      	mov	r3, r7
 8004158:	2000      	movs	r0, #0
 800415a:	f7fc fb6f 	bl	800083c <__aeabi_ddiv>
 800415e:	e7a0      	b.n	80040a2 <__ieee754_pow+0x3a>
 8004160:	2400      	movs	r4, #0
 8004162:	bbc1      	cbnz	r1, 80041d6 <__ieee754_pow+0x16e>
 8004164:	4a63      	ldr	r2, [pc, #396]	@ (80042f4 <__ieee754_pow+0x28c>)
 8004166:	4592      	cmp	sl, r2
 8004168:	d1ec      	bne.n	8004144 <__ieee754_pow+0xdc>
 800416a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800416e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8004172:	431a      	orrs	r2, r3
 8004174:	f000 8479 	beq.w	8004a6a <__ieee754_pow+0xa02>
 8004178:	4b61      	ldr	r3, [pc, #388]	@ (8004300 <__ieee754_pow+0x298>)
 800417a:	4598      	cmp	r8, r3
 800417c:	d908      	bls.n	8004190 <__ieee754_pow+0x128>
 800417e:	f1b9 0f00 	cmp.w	r9, #0
 8004182:	f2c0 8476 	blt.w	8004a72 <__ieee754_pow+0xa0a>
 8004186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800418a:	e78a      	b.n	80040a2 <__ieee754_pow+0x3a>
 800418c:	2402      	movs	r4, #2
 800418e:	e7e8      	b.n	8004162 <__ieee754_pow+0xfa>
 8004190:	f1b9 0f00 	cmp.w	r9, #0
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f04f 0100 	mov.w	r1, #0
 800419c:	da81      	bge.n	80040a2 <__ieee754_pow+0x3a>
 800419e:	e9dd 0300 	ldrd	r0, r3, [sp]
 80041a2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80041a6:	e77c      	b.n	80040a2 <__ieee754_pow+0x3a>
 80041a8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80041ac:	d106      	bne.n	80041bc <__ieee754_pow+0x154>
 80041ae:	4632      	mov	r2, r6
 80041b0:	463b      	mov	r3, r7
 80041b2:	4630      	mov	r0, r6
 80041b4:	4639      	mov	r1, r7
 80041b6:	f7fc fa17 	bl	80005e8 <__aeabi_dmul>
 80041ba:	e772      	b.n	80040a2 <__ieee754_pow+0x3a>
 80041bc:	4a51      	ldr	r2, [pc, #324]	@ (8004304 <__ieee754_pow+0x29c>)
 80041be:	4591      	cmp	r9, r2
 80041c0:	d109      	bne.n	80041d6 <__ieee754_pow+0x16e>
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	db07      	blt.n	80041d6 <__ieee754_pow+0x16e>
 80041c6:	ec47 6b10 	vmov	d0, r6, r7
 80041ca:	b011      	add	sp, #68	@ 0x44
 80041cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d0:	f000 bd52 	b.w	8004c78 <__ieee754_sqrt>
 80041d4:	2400      	movs	r4, #0
 80041d6:	ec47 6b10 	vmov	d0, r6, r7
 80041da:	9302      	str	r3, [sp, #8]
 80041dc:	f000 fc88 	bl	8004af0 <fabs>
 80041e0:	9b02      	ldr	r3, [sp, #8]
 80041e2:	ec51 0b10 	vmov	r0, r1, d0
 80041e6:	bb53      	cbnz	r3, 800423e <__ieee754_pow+0x1d6>
 80041e8:	4b44      	ldr	r3, [pc, #272]	@ (80042fc <__ieee754_pow+0x294>)
 80041ea:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d002      	beq.n	80041f8 <__ieee754_pow+0x190>
 80041f2:	f1b8 0f00 	cmp.w	r8, #0
 80041f6:	d122      	bne.n	800423e <__ieee754_pow+0x1d6>
 80041f8:	f1b9 0f00 	cmp.w	r9, #0
 80041fc:	da05      	bge.n	800420a <__ieee754_pow+0x1a2>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	2000      	movs	r0, #0
 8004204:	493d      	ldr	r1, [pc, #244]	@ (80042fc <__ieee754_pow+0x294>)
 8004206:	f7fc fb19 	bl	800083c <__aeabi_ddiv>
 800420a:	2d00      	cmp	r5, #0
 800420c:	f6bf af49 	bge.w	80040a2 <__ieee754_pow+0x3a>
 8004210:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8004214:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8004218:	ea58 0804 	orrs.w	r8, r8, r4
 800421c:	d108      	bne.n	8004230 <__ieee754_pow+0x1c8>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	f7fc f827 	bl	8000278 <__aeabi_dsub>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	e794      	b.n	800415a <__ieee754_pow+0xf2>
 8004230:	2c01      	cmp	r4, #1
 8004232:	f47f af36 	bne.w	80040a2 <__ieee754_pow+0x3a>
 8004236:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800423a:	4619      	mov	r1, r3
 800423c:	e731      	b.n	80040a2 <__ieee754_pow+0x3a>
 800423e:	0feb      	lsrs	r3, r5, #31
 8004240:	3b01      	subs	r3, #1
 8004242:	ea53 0204 	orrs.w	r2, r3, r4
 8004246:	d102      	bne.n	800424e <__ieee754_pow+0x1e6>
 8004248:	4632      	mov	r2, r6
 800424a:	463b      	mov	r3, r7
 800424c:	e7e9      	b.n	8004222 <__ieee754_pow+0x1ba>
 800424e:	3c01      	subs	r4, #1
 8004250:	431c      	orrs	r4, r3
 8004252:	d016      	beq.n	8004282 <__ieee754_pow+0x21a>
 8004254:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80042e0 <__ieee754_pow+0x278>
 8004258:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800425c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004260:	f240 8112 	bls.w	8004488 <__ieee754_pow+0x420>
 8004264:	4b28      	ldr	r3, [pc, #160]	@ (8004308 <__ieee754_pow+0x2a0>)
 8004266:	459a      	cmp	sl, r3
 8004268:	4b25      	ldr	r3, [pc, #148]	@ (8004300 <__ieee754_pow+0x298>)
 800426a:	d916      	bls.n	800429a <__ieee754_pow+0x232>
 800426c:	4598      	cmp	r8, r3
 800426e:	d80b      	bhi.n	8004288 <__ieee754_pow+0x220>
 8004270:	f1b9 0f00 	cmp.w	r9, #0
 8004274:	da0b      	bge.n	800428e <__ieee754_pow+0x226>
 8004276:	2000      	movs	r0, #0
 8004278:	b011      	add	sp, #68	@ 0x44
 800427a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427e:	f000 bcf3 	b.w	8004c68 <__math_oflow>
 8004282:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80042e8 <__ieee754_pow+0x280>
 8004286:	e7e7      	b.n	8004258 <__ieee754_pow+0x1f0>
 8004288:	f1b9 0f00 	cmp.w	r9, #0
 800428c:	dcf3      	bgt.n	8004276 <__ieee754_pow+0x20e>
 800428e:	2000      	movs	r0, #0
 8004290:	b011      	add	sp, #68	@ 0x44
 8004292:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004296:	f000 bcdf 	b.w	8004c58 <__math_uflow>
 800429a:	4598      	cmp	r8, r3
 800429c:	d20c      	bcs.n	80042b8 <__ieee754_pow+0x250>
 800429e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	2300      	movs	r3, #0
 80042a6:	f7fc fc11 	bl	8000acc <__aeabi_dcmplt>
 80042aa:	3800      	subs	r0, #0
 80042ac:	bf18      	it	ne
 80042ae:	2001      	movne	r0, #1
 80042b0:	f1b9 0f00 	cmp.w	r9, #0
 80042b4:	daec      	bge.n	8004290 <__ieee754_pow+0x228>
 80042b6:	e7df      	b.n	8004278 <__ieee754_pow+0x210>
 80042b8:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <__ieee754_pow+0x294>)
 80042ba:	4598      	cmp	r8, r3
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	d924      	bls.n	800430c <__ieee754_pow+0x2a4>
 80042c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042c6:	2300      	movs	r3, #0
 80042c8:	f7fc fc00 	bl	8000acc <__aeabi_dcmplt>
 80042cc:	3800      	subs	r0, #0
 80042ce:	bf18      	it	ne
 80042d0:	2001      	movne	r0, #1
 80042d2:	f1b9 0f00 	cmp.w	r9, #0
 80042d6:	dccf      	bgt.n	8004278 <__ieee754_pow+0x210>
 80042d8:	e7da      	b.n	8004290 <__ieee754_pow+0x228>
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w
 80042e0:	00000000 	.word	0x00000000
 80042e4:	3ff00000 	.word	0x3ff00000
 80042e8:	00000000 	.word	0x00000000
 80042ec:	bff00000 	.word	0xbff00000
 80042f0:	fff00000 	.word	0xfff00000
 80042f4:	7ff00000 	.word	0x7ff00000
 80042f8:	433fffff 	.word	0x433fffff
 80042fc:	3ff00000 	.word	0x3ff00000
 8004300:	3fefffff 	.word	0x3fefffff
 8004304:	3fe00000 	.word	0x3fe00000
 8004308:	43f00000 	.word	0x43f00000
 800430c:	4b5a      	ldr	r3, [pc, #360]	@ (8004478 <__ieee754_pow+0x410>)
 800430e:	f7fb ffb3 	bl	8000278 <__aeabi_dsub>
 8004312:	a351      	add	r3, pc, #324	@ (adr r3, 8004458 <__ieee754_pow+0x3f0>)
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	4604      	mov	r4, r0
 800431a:	460d      	mov	r5, r1
 800431c:	f7fc f964 	bl	80005e8 <__aeabi_dmul>
 8004320:	a34f      	add	r3, pc, #316	@ (adr r3, 8004460 <__ieee754_pow+0x3f8>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	4606      	mov	r6, r0
 8004328:	460f      	mov	r7, r1
 800432a:	4620      	mov	r0, r4
 800432c:	4629      	mov	r1, r5
 800432e:	f7fc f95b 	bl	80005e8 <__aeabi_dmul>
 8004332:	4b52      	ldr	r3, [pc, #328]	@ (800447c <__ieee754_pow+0x414>)
 8004334:	4682      	mov	sl, r0
 8004336:	468b      	mov	fp, r1
 8004338:	2200      	movs	r2, #0
 800433a:	4620      	mov	r0, r4
 800433c:	4629      	mov	r1, r5
 800433e:	f7fc f953 	bl	80005e8 <__aeabi_dmul>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	a148      	add	r1, pc, #288	@ (adr r1, 8004468 <__ieee754_pow+0x400>)
 8004348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800434c:	f7fb ff94 	bl	8000278 <__aeabi_dsub>
 8004350:	4622      	mov	r2, r4
 8004352:	462b      	mov	r3, r5
 8004354:	f7fc f948 	bl	80005e8 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	2000      	movs	r0, #0
 800435e:	4948      	ldr	r1, [pc, #288]	@ (8004480 <__ieee754_pow+0x418>)
 8004360:	f7fb ff8a 	bl	8000278 <__aeabi_dsub>
 8004364:	4622      	mov	r2, r4
 8004366:	4680      	mov	r8, r0
 8004368:	4689      	mov	r9, r1
 800436a:	462b      	mov	r3, r5
 800436c:	4620      	mov	r0, r4
 800436e:	4629      	mov	r1, r5
 8004370:	f7fc f93a 	bl	80005e8 <__aeabi_dmul>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4640      	mov	r0, r8
 800437a:	4649      	mov	r1, r9
 800437c:	f7fc f934 	bl	80005e8 <__aeabi_dmul>
 8004380:	a33b      	add	r3, pc, #236	@ (adr r3, 8004470 <__ieee754_pow+0x408>)
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	f7fc f92f 	bl	80005e8 <__aeabi_dmul>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4650      	mov	r0, sl
 8004390:	4659      	mov	r1, fp
 8004392:	f7fb ff71 	bl	8000278 <__aeabi_dsub>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4680      	mov	r8, r0
 800439c:	4689      	mov	r9, r1
 800439e:	4630      	mov	r0, r6
 80043a0:	4639      	mov	r1, r7
 80043a2:	f7fb ff6b 	bl	800027c <__adddf3>
 80043a6:	2400      	movs	r4, #0
 80043a8:	4632      	mov	r2, r6
 80043aa:	463b      	mov	r3, r7
 80043ac:	4620      	mov	r0, r4
 80043ae:	460d      	mov	r5, r1
 80043b0:	f7fb ff62 	bl	8000278 <__aeabi_dsub>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4640      	mov	r0, r8
 80043ba:	4649      	mov	r1, r9
 80043bc:	f7fb ff5c 	bl	8000278 <__aeabi_dsub>
 80043c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9304      	str	r3, [sp, #16]
 80043cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80043d0:	4606      	mov	r6, r0
 80043d2:	460f      	mov	r7, r1
 80043d4:	4652      	mov	r2, sl
 80043d6:	465b      	mov	r3, fp
 80043d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043dc:	f7fb ff4c 	bl	8000278 <__aeabi_dsub>
 80043e0:	4622      	mov	r2, r4
 80043e2:	462b      	mov	r3, r5
 80043e4:	f7fc f900 	bl	80005e8 <__aeabi_dmul>
 80043e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043ec:	4680      	mov	r8, r0
 80043ee:	4689      	mov	r9, r1
 80043f0:	4630      	mov	r0, r6
 80043f2:	4639      	mov	r1, r7
 80043f4:	f7fc f8f8 	bl	80005e8 <__aeabi_dmul>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4640      	mov	r0, r8
 80043fe:	4649      	mov	r1, r9
 8004400:	f7fb ff3c 	bl	800027c <__adddf3>
 8004404:	4652      	mov	r2, sl
 8004406:	465b      	mov	r3, fp
 8004408:	4606      	mov	r6, r0
 800440a:	460f      	mov	r7, r1
 800440c:	4620      	mov	r0, r4
 800440e:	4629      	mov	r1, r5
 8004410:	f7fc f8ea 	bl	80005e8 <__aeabi_dmul>
 8004414:	460b      	mov	r3, r1
 8004416:	4602      	mov	r2, r0
 8004418:	4680      	mov	r8, r0
 800441a:	4689      	mov	r9, r1
 800441c:	4630      	mov	r0, r6
 800441e:	4639      	mov	r1, r7
 8004420:	f7fb ff2c 	bl	800027c <__adddf3>
 8004424:	4b17      	ldr	r3, [pc, #92]	@ (8004484 <__ieee754_pow+0x41c>)
 8004426:	4299      	cmp	r1, r3
 8004428:	4604      	mov	r4, r0
 800442a:	460d      	mov	r5, r1
 800442c:	468a      	mov	sl, r1
 800442e:	468b      	mov	fp, r1
 8004430:	f340 82ef 	ble.w	8004a12 <__ieee754_pow+0x9aa>
 8004434:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004438:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800443c:	4303      	orrs	r3, r0
 800443e:	f000 81e8 	beq.w	8004812 <__ieee754_pow+0x7aa>
 8004442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	2300      	movs	r3, #0
 800444a:	f7fc fb3f 	bl	8000acc <__aeabi_dcmplt>
 800444e:	3800      	subs	r0, #0
 8004450:	bf18      	it	ne
 8004452:	2001      	movne	r0, #1
 8004454:	e710      	b.n	8004278 <__ieee754_pow+0x210>
 8004456:	bf00      	nop
 8004458:	60000000 	.word	0x60000000
 800445c:	3ff71547 	.word	0x3ff71547
 8004460:	f85ddf44 	.word	0xf85ddf44
 8004464:	3e54ae0b 	.word	0x3e54ae0b
 8004468:	55555555 	.word	0x55555555
 800446c:	3fd55555 	.word	0x3fd55555
 8004470:	652b82fe 	.word	0x652b82fe
 8004474:	3ff71547 	.word	0x3ff71547
 8004478:	3ff00000 	.word	0x3ff00000
 800447c:	3fd00000 	.word	0x3fd00000
 8004480:	3fe00000 	.word	0x3fe00000
 8004484:	408fffff 	.word	0x408fffff
 8004488:	4bd5      	ldr	r3, [pc, #852]	@ (80047e0 <__ieee754_pow+0x778>)
 800448a:	402b      	ands	r3, r5
 800448c:	2200      	movs	r2, #0
 800448e:	b92b      	cbnz	r3, 800449c <__ieee754_pow+0x434>
 8004490:	4bd4      	ldr	r3, [pc, #848]	@ (80047e4 <__ieee754_pow+0x77c>)
 8004492:	f7fc f8a9 	bl	80005e8 <__aeabi_dmul>
 8004496:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800449a:	468b      	mov	fp, r1
 800449c:	ea4f 532b 	mov.w	r3, fp, asr #20
 80044a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80044a4:	4413      	add	r3, r2
 80044a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80044a8:	4bcf      	ldr	r3, [pc, #828]	@ (80047e8 <__ieee754_pow+0x780>)
 80044aa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80044ae:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80044b2:	459b      	cmp	fp, r3
 80044b4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80044b8:	dd08      	ble.n	80044cc <__ieee754_pow+0x464>
 80044ba:	4bcc      	ldr	r3, [pc, #816]	@ (80047ec <__ieee754_pow+0x784>)
 80044bc:	459b      	cmp	fp, r3
 80044be:	f340 81a5 	ble.w	800480c <__ieee754_pow+0x7a4>
 80044c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044c4:	3301      	adds	r3, #1
 80044c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80044c8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80044cc:	f04f 0a00 	mov.w	sl, #0
 80044d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80044d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044d6:	4bc6      	ldr	r3, [pc, #792]	@ (80047f0 <__ieee754_pow+0x788>)
 80044d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80044dc:	ed93 7b00 	vldr	d7, [r3]
 80044e0:	4629      	mov	r1, r5
 80044e2:	ec53 2b17 	vmov	r2, r3, d7
 80044e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80044ea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80044ee:	f7fb fec3 	bl	8000278 <__aeabi_dsub>
 80044f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044f6:	4606      	mov	r6, r0
 80044f8:	460f      	mov	r7, r1
 80044fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044fe:	f7fb febd 	bl	800027c <__adddf3>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	2000      	movs	r0, #0
 8004508:	49ba      	ldr	r1, [pc, #744]	@ (80047f4 <__ieee754_pow+0x78c>)
 800450a:	f7fc f997 	bl	800083c <__aeabi_ddiv>
 800450e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4630      	mov	r0, r6
 8004518:	4639      	mov	r1, r7
 800451a:	f7fc f865 	bl	80005e8 <__aeabi_dmul>
 800451e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004522:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8004526:	106d      	asrs	r5, r5, #1
 8004528:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800452c:	f04f 0b00 	mov.w	fp, #0
 8004530:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004534:	4661      	mov	r1, ip
 8004536:	2200      	movs	r2, #0
 8004538:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800453c:	4658      	mov	r0, fp
 800453e:	46e1      	mov	r9, ip
 8004540:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8004544:	4614      	mov	r4, r2
 8004546:	461d      	mov	r5, r3
 8004548:	f7fc f84e 	bl	80005e8 <__aeabi_dmul>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4630      	mov	r0, r6
 8004552:	4639      	mov	r1, r7
 8004554:	f7fb fe90 	bl	8000278 <__aeabi_dsub>
 8004558:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800455c:	4606      	mov	r6, r0
 800455e:	460f      	mov	r7, r1
 8004560:	4620      	mov	r0, r4
 8004562:	4629      	mov	r1, r5
 8004564:	f7fb fe88 	bl	8000278 <__aeabi_dsub>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004570:	f7fb fe82 	bl	8000278 <__aeabi_dsub>
 8004574:	465a      	mov	r2, fp
 8004576:	464b      	mov	r3, r9
 8004578:	f7fc f836 	bl	80005e8 <__aeabi_dmul>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4630      	mov	r0, r6
 8004582:	4639      	mov	r1, r7
 8004584:	f7fb fe78 	bl	8000278 <__aeabi_dsub>
 8004588:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800458c:	f7fc f82c 	bl	80005e8 <__aeabi_dmul>
 8004590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004594:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	f7fc f824 	bl	80005e8 <__aeabi_dmul>
 80045a0:	a37d      	add	r3, pc, #500	@ (adr r3, 8004798 <__ieee754_pow+0x730>)
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	4604      	mov	r4, r0
 80045a8:	460d      	mov	r5, r1
 80045aa:	f7fc f81d 	bl	80005e8 <__aeabi_dmul>
 80045ae:	a37c      	add	r3, pc, #496	@ (adr r3, 80047a0 <__ieee754_pow+0x738>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fb fe62 	bl	800027c <__adddf3>
 80045b8:	4622      	mov	r2, r4
 80045ba:	462b      	mov	r3, r5
 80045bc:	f7fc f814 	bl	80005e8 <__aeabi_dmul>
 80045c0:	a379      	add	r3, pc, #484	@ (adr r3, 80047a8 <__ieee754_pow+0x740>)
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f7fb fe59 	bl	800027c <__adddf3>
 80045ca:	4622      	mov	r2, r4
 80045cc:	462b      	mov	r3, r5
 80045ce:	f7fc f80b 	bl	80005e8 <__aeabi_dmul>
 80045d2:	a377      	add	r3, pc, #476	@ (adr r3, 80047b0 <__ieee754_pow+0x748>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fb fe50 	bl	800027c <__adddf3>
 80045dc:	4622      	mov	r2, r4
 80045de:	462b      	mov	r3, r5
 80045e0:	f7fc f802 	bl	80005e8 <__aeabi_dmul>
 80045e4:	a374      	add	r3, pc, #464	@ (adr r3, 80047b8 <__ieee754_pow+0x750>)
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f7fb fe47 	bl	800027c <__adddf3>
 80045ee:	4622      	mov	r2, r4
 80045f0:	462b      	mov	r3, r5
 80045f2:	f7fb fff9 	bl	80005e8 <__aeabi_dmul>
 80045f6:	a372      	add	r3, pc, #456	@ (adr r3, 80047c0 <__ieee754_pow+0x758>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f7fb fe3e 	bl	800027c <__adddf3>
 8004600:	4622      	mov	r2, r4
 8004602:	4606      	mov	r6, r0
 8004604:	460f      	mov	r7, r1
 8004606:	462b      	mov	r3, r5
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	f7fb ffec 	bl	80005e8 <__aeabi_dmul>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4630      	mov	r0, r6
 8004616:	4639      	mov	r1, r7
 8004618:	f7fb ffe6 	bl	80005e8 <__aeabi_dmul>
 800461c:	465a      	mov	r2, fp
 800461e:	4604      	mov	r4, r0
 8004620:	460d      	mov	r5, r1
 8004622:	464b      	mov	r3, r9
 8004624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004628:	f7fb fe28 	bl	800027c <__adddf3>
 800462c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004630:	f7fb ffda 	bl	80005e8 <__aeabi_dmul>
 8004634:	4622      	mov	r2, r4
 8004636:	462b      	mov	r3, r5
 8004638:	f7fb fe20 	bl	800027c <__adddf3>
 800463c:	465a      	mov	r2, fp
 800463e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004642:	464b      	mov	r3, r9
 8004644:	4658      	mov	r0, fp
 8004646:	4649      	mov	r1, r9
 8004648:	f7fb ffce 	bl	80005e8 <__aeabi_dmul>
 800464c:	4b6a      	ldr	r3, [pc, #424]	@ (80047f8 <__ieee754_pow+0x790>)
 800464e:	2200      	movs	r2, #0
 8004650:	4606      	mov	r6, r0
 8004652:	460f      	mov	r7, r1
 8004654:	f7fb fe12 	bl	800027c <__adddf3>
 8004658:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800465c:	f7fb fe0e 	bl	800027c <__adddf3>
 8004660:	46d8      	mov	r8, fp
 8004662:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8004666:	460d      	mov	r5, r1
 8004668:	465a      	mov	r2, fp
 800466a:	460b      	mov	r3, r1
 800466c:	4640      	mov	r0, r8
 800466e:	4649      	mov	r1, r9
 8004670:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8004674:	f7fb ffb8 	bl	80005e8 <__aeabi_dmul>
 8004678:	465c      	mov	r4, fp
 800467a:	4680      	mov	r8, r0
 800467c:	4689      	mov	r9, r1
 800467e:	4b5e      	ldr	r3, [pc, #376]	@ (80047f8 <__ieee754_pow+0x790>)
 8004680:	2200      	movs	r2, #0
 8004682:	4620      	mov	r0, r4
 8004684:	4629      	mov	r1, r5
 8004686:	f7fb fdf7 	bl	8000278 <__aeabi_dsub>
 800468a:	4632      	mov	r2, r6
 800468c:	463b      	mov	r3, r7
 800468e:	f7fb fdf3 	bl	8000278 <__aeabi_dsub>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800469a:	f7fb fded 	bl	8000278 <__aeabi_dsub>
 800469e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046a2:	f7fb ffa1 	bl	80005e8 <__aeabi_dmul>
 80046a6:	4622      	mov	r2, r4
 80046a8:	4606      	mov	r6, r0
 80046aa:	460f      	mov	r7, r1
 80046ac:	462b      	mov	r3, r5
 80046ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046b2:	f7fb ff99 	bl	80005e8 <__aeabi_dmul>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4630      	mov	r0, r6
 80046bc:	4639      	mov	r1, r7
 80046be:	f7fb fddd 	bl	800027c <__adddf3>
 80046c2:	4606      	mov	r6, r0
 80046c4:	460f      	mov	r7, r1
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4640      	mov	r0, r8
 80046cc:	4649      	mov	r1, r9
 80046ce:	f7fb fdd5 	bl	800027c <__adddf3>
 80046d2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80046d6:	a33c      	add	r3, pc, #240	@ (adr r3, 80047c8 <__ieee754_pow+0x760>)
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	4658      	mov	r0, fp
 80046de:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80046e2:	460d      	mov	r5, r1
 80046e4:	f7fb ff80 	bl	80005e8 <__aeabi_dmul>
 80046e8:	465c      	mov	r4, fp
 80046ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046ee:	4642      	mov	r2, r8
 80046f0:	464b      	mov	r3, r9
 80046f2:	4620      	mov	r0, r4
 80046f4:	4629      	mov	r1, r5
 80046f6:	f7fb fdbf 	bl	8000278 <__aeabi_dsub>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4630      	mov	r0, r6
 8004700:	4639      	mov	r1, r7
 8004702:	f7fb fdb9 	bl	8000278 <__aeabi_dsub>
 8004706:	a332      	add	r3, pc, #200	@ (adr r3, 80047d0 <__ieee754_pow+0x768>)
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f7fb ff6c 	bl	80005e8 <__aeabi_dmul>
 8004710:	a331      	add	r3, pc, #196	@ (adr r3, 80047d8 <__ieee754_pow+0x770>)
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	4606      	mov	r6, r0
 8004718:	460f      	mov	r7, r1
 800471a:	4620      	mov	r0, r4
 800471c:	4629      	mov	r1, r5
 800471e:	f7fb ff63 	bl	80005e8 <__aeabi_dmul>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4630      	mov	r0, r6
 8004728:	4639      	mov	r1, r7
 800472a:	f7fb fda7 	bl	800027c <__adddf3>
 800472e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004730:	4b32      	ldr	r3, [pc, #200]	@ (80047fc <__ieee754_pow+0x794>)
 8004732:	4413      	add	r3, r2
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f7fb fda0 	bl	800027c <__adddf3>
 800473c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004740:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004742:	f7fb fee7 	bl	8000514 <__aeabi_i2d>
 8004746:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004748:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <__ieee754_pow+0x798>)
 800474a:	4413      	add	r3, r2
 800474c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004750:	4606      	mov	r6, r0
 8004752:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004756:	460f      	mov	r7, r1
 8004758:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800475c:	f7fb fd8e 	bl	800027c <__adddf3>
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	f7fb fd8a 	bl	800027c <__adddf3>
 8004768:	4632      	mov	r2, r6
 800476a:	463b      	mov	r3, r7
 800476c:	f7fb fd86 	bl	800027c <__adddf3>
 8004770:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8004774:	4632      	mov	r2, r6
 8004776:	463b      	mov	r3, r7
 8004778:	4658      	mov	r0, fp
 800477a:	460d      	mov	r5, r1
 800477c:	f7fb fd7c 	bl	8000278 <__aeabi_dsub>
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	f7fb fd78 	bl	8000278 <__aeabi_dsub>
 8004788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800478c:	f7fb fd74 	bl	8000278 <__aeabi_dsub>
 8004790:	465c      	mov	r4, fp
 8004792:	4602      	mov	r2, r0
 8004794:	e036      	b.n	8004804 <__ieee754_pow+0x79c>
 8004796:	bf00      	nop
 8004798:	4a454eef 	.word	0x4a454eef
 800479c:	3fca7e28 	.word	0x3fca7e28
 80047a0:	93c9db65 	.word	0x93c9db65
 80047a4:	3fcd864a 	.word	0x3fcd864a
 80047a8:	a91d4101 	.word	0xa91d4101
 80047ac:	3fd17460 	.word	0x3fd17460
 80047b0:	518f264d 	.word	0x518f264d
 80047b4:	3fd55555 	.word	0x3fd55555
 80047b8:	db6fabff 	.word	0xdb6fabff
 80047bc:	3fdb6db6 	.word	0x3fdb6db6
 80047c0:	33333303 	.word	0x33333303
 80047c4:	3fe33333 	.word	0x3fe33333
 80047c8:	e0000000 	.word	0xe0000000
 80047cc:	3feec709 	.word	0x3feec709
 80047d0:	dc3a03fd 	.word	0xdc3a03fd
 80047d4:	3feec709 	.word	0x3feec709
 80047d8:	145b01f5 	.word	0x145b01f5
 80047dc:	be3e2fe0 	.word	0xbe3e2fe0
 80047e0:	7ff00000 	.word	0x7ff00000
 80047e4:	43400000 	.word	0x43400000
 80047e8:	0003988e 	.word	0x0003988e
 80047ec:	000bb679 	.word	0x000bb679
 80047f0:	08004f10 	.word	0x08004f10
 80047f4:	3ff00000 	.word	0x3ff00000
 80047f8:	40080000 	.word	0x40080000
 80047fc:	08004ef0 	.word	0x08004ef0
 8004800:	08004f00 	.word	0x08004f00
 8004804:	460b      	mov	r3, r1
 8004806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800480a:	e5d7      	b.n	80043bc <__ieee754_pow+0x354>
 800480c:	f04f 0a01 	mov.w	sl, #1
 8004810:	e65e      	b.n	80044d0 <__ieee754_pow+0x468>
 8004812:	a3b4      	add	r3, pc, #720	@ (adr r3, 8004ae4 <__ieee754_pow+0xa7c>)
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	4630      	mov	r0, r6
 800481a:	4639      	mov	r1, r7
 800481c:	f7fb fd2e 	bl	800027c <__adddf3>
 8004820:	4642      	mov	r2, r8
 8004822:	e9cd 0100 	strd	r0, r1, [sp]
 8004826:	464b      	mov	r3, r9
 8004828:	4620      	mov	r0, r4
 800482a:	4629      	mov	r1, r5
 800482c:	f7fb fd24 	bl	8000278 <__aeabi_dsub>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004838:	f7fc f966 	bl	8000b08 <__aeabi_dcmpgt>
 800483c:	2800      	cmp	r0, #0
 800483e:	f47f ae00 	bne.w	8004442 <__ieee754_pow+0x3da>
 8004842:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8004846:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800484a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800484e:	fa43 fa0a 	asr.w	sl, r3, sl
 8004852:	44da      	add	sl, fp
 8004854:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004858:	489d      	ldr	r0, [pc, #628]	@ (8004ad0 <__ieee754_pow+0xa68>)
 800485a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800485e:	4108      	asrs	r0, r1
 8004860:	ea00 030a 	and.w	r3, r0, sl
 8004864:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004868:	f1c1 0114 	rsb	r1, r1, #20
 800486c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8004870:	fa4a fa01 	asr.w	sl, sl, r1
 8004874:	f1bb 0f00 	cmp.w	fp, #0
 8004878:	4640      	mov	r0, r8
 800487a:	4649      	mov	r1, r9
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	bfb8      	it	lt
 8004882:	f1ca 0a00 	rsblt	sl, sl, #0
 8004886:	f7fb fcf7 	bl	8000278 <__aeabi_dsub>
 800488a:	4680      	mov	r8, r0
 800488c:	4689      	mov	r9, r1
 800488e:	4632      	mov	r2, r6
 8004890:	463b      	mov	r3, r7
 8004892:	4640      	mov	r0, r8
 8004894:	4649      	mov	r1, r9
 8004896:	f7fb fcf1 	bl	800027c <__adddf3>
 800489a:	2400      	movs	r4, #0
 800489c:	a37c      	add	r3, pc, #496	@ (adr r3, 8004a90 <__ieee754_pow+0xa28>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	4620      	mov	r0, r4
 80048a4:	460d      	mov	r5, r1
 80048a6:	f7fb fe9f 	bl	80005e8 <__aeabi_dmul>
 80048aa:	4642      	mov	r2, r8
 80048ac:	e9cd 0100 	strd	r0, r1, [sp]
 80048b0:	464b      	mov	r3, r9
 80048b2:	4620      	mov	r0, r4
 80048b4:	4629      	mov	r1, r5
 80048b6:	f7fb fcdf 	bl	8000278 <__aeabi_dsub>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4630      	mov	r0, r6
 80048c0:	4639      	mov	r1, r7
 80048c2:	f7fb fcd9 	bl	8000278 <__aeabi_dsub>
 80048c6:	a374      	add	r3, pc, #464	@ (adr r3, 8004a98 <__ieee754_pow+0xa30>)
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f7fb fe8c 	bl	80005e8 <__aeabi_dmul>
 80048d0:	a373      	add	r3, pc, #460	@ (adr r3, 8004aa0 <__ieee754_pow+0xa38>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	4680      	mov	r8, r0
 80048d8:	4689      	mov	r9, r1
 80048da:	4620      	mov	r0, r4
 80048dc:	4629      	mov	r1, r5
 80048de:	f7fb fe83 	bl	80005e8 <__aeabi_dmul>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4640      	mov	r0, r8
 80048e8:	4649      	mov	r1, r9
 80048ea:	f7fb fcc7 	bl	800027c <__adddf3>
 80048ee:	4604      	mov	r4, r0
 80048f0:	460d      	mov	r5, r1
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048fa:	f7fb fcbf 	bl	800027c <__adddf3>
 80048fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004902:	4680      	mov	r8, r0
 8004904:	4689      	mov	r9, r1
 8004906:	f7fb fcb7 	bl	8000278 <__aeabi_dsub>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4620      	mov	r0, r4
 8004910:	4629      	mov	r1, r5
 8004912:	f7fb fcb1 	bl	8000278 <__aeabi_dsub>
 8004916:	4642      	mov	r2, r8
 8004918:	4606      	mov	r6, r0
 800491a:	460f      	mov	r7, r1
 800491c:	464b      	mov	r3, r9
 800491e:	4640      	mov	r0, r8
 8004920:	4649      	mov	r1, r9
 8004922:	f7fb fe61 	bl	80005e8 <__aeabi_dmul>
 8004926:	a360      	add	r3, pc, #384	@ (adr r3, 8004aa8 <__ieee754_pow+0xa40>)
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	4604      	mov	r4, r0
 800492e:	460d      	mov	r5, r1
 8004930:	f7fb fe5a 	bl	80005e8 <__aeabi_dmul>
 8004934:	a35e      	add	r3, pc, #376	@ (adr r3, 8004ab0 <__ieee754_pow+0xa48>)
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f7fb fc9d 	bl	8000278 <__aeabi_dsub>
 800493e:	4622      	mov	r2, r4
 8004940:	462b      	mov	r3, r5
 8004942:	f7fb fe51 	bl	80005e8 <__aeabi_dmul>
 8004946:	a35c      	add	r3, pc, #368	@ (adr r3, 8004ab8 <__ieee754_pow+0xa50>)
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f7fb fc96 	bl	800027c <__adddf3>
 8004950:	4622      	mov	r2, r4
 8004952:	462b      	mov	r3, r5
 8004954:	f7fb fe48 	bl	80005e8 <__aeabi_dmul>
 8004958:	a359      	add	r3, pc, #356	@ (adr r3, 8004ac0 <__ieee754_pow+0xa58>)
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f7fb fc8b 	bl	8000278 <__aeabi_dsub>
 8004962:	4622      	mov	r2, r4
 8004964:	462b      	mov	r3, r5
 8004966:	f7fb fe3f 	bl	80005e8 <__aeabi_dmul>
 800496a:	a357      	add	r3, pc, #348	@ (adr r3, 8004ac8 <__ieee754_pow+0xa60>)
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f7fb fc84 	bl	800027c <__adddf3>
 8004974:	4622      	mov	r2, r4
 8004976:	462b      	mov	r3, r5
 8004978:	f7fb fe36 	bl	80005e8 <__aeabi_dmul>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4640      	mov	r0, r8
 8004982:	4649      	mov	r1, r9
 8004984:	f7fb fc78 	bl	8000278 <__aeabi_dsub>
 8004988:	4604      	mov	r4, r0
 800498a:	460d      	mov	r5, r1
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4640      	mov	r0, r8
 8004992:	4649      	mov	r1, r9
 8004994:	f7fb fe28 	bl	80005e8 <__aeabi_dmul>
 8004998:	2200      	movs	r2, #0
 800499a:	e9cd 0100 	strd	r0, r1, [sp]
 800499e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80049a2:	4620      	mov	r0, r4
 80049a4:	4629      	mov	r1, r5
 80049a6:	f7fb fc67 	bl	8000278 <__aeabi_dsub>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049b2:	f7fb ff43 	bl	800083c <__aeabi_ddiv>
 80049b6:	4632      	mov	r2, r6
 80049b8:	4604      	mov	r4, r0
 80049ba:	460d      	mov	r5, r1
 80049bc:	463b      	mov	r3, r7
 80049be:	4640      	mov	r0, r8
 80049c0:	4649      	mov	r1, r9
 80049c2:	f7fb fe11 	bl	80005e8 <__aeabi_dmul>
 80049c6:	4632      	mov	r2, r6
 80049c8:	463b      	mov	r3, r7
 80049ca:	f7fb fc57 	bl	800027c <__adddf3>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4620      	mov	r0, r4
 80049d4:	4629      	mov	r1, r5
 80049d6:	f7fb fc4f 	bl	8000278 <__aeabi_dsub>
 80049da:	4642      	mov	r2, r8
 80049dc:	464b      	mov	r3, r9
 80049de:	f7fb fc4b 	bl	8000278 <__aeabi_dsub>
 80049e2:	460b      	mov	r3, r1
 80049e4:	4602      	mov	r2, r0
 80049e6:	493b      	ldr	r1, [pc, #236]	@ (8004ad4 <__ieee754_pow+0xa6c>)
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7fb fc45 	bl	8000278 <__aeabi_dsub>
 80049ee:	ec41 0b10 	vmov	d0, r0, r1
 80049f2:	ee10 3a90 	vmov	r3, s1
 80049f6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80049fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049fe:	da30      	bge.n	8004a62 <__ieee754_pow+0x9fa>
 8004a00:	4650      	mov	r0, sl
 8004a02:	f000 f87d 	bl	8004b00 <scalbn>
 8004a06:	ec51 0b10 	vmov	r0, r1, d0
 8004a0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a0e:	f7ff bbd2 	b.w	80041b6 <__ieee754_pow+0x14e>
 8004a12:	4c31      	ldr	r4, [pc, #196]	@ (8004ad8 <__ieee754_pow+0xa70>)
 8004a14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004a18:	42a3      	cmp	r3, r4
 8004a1a:	d91a      	bls.n	8004a52 <__ieee754_pow+0x9ea>
 8004a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8004adc <__ieee754_pow+0xa74>)
 8004a1e:	440b      	add	r3, r1
 8004a20:	4303      	orrs	r3, r0
 8004a22:	d009      	beq.n	8004a38 <__ieee754_pow+0x9d0>
 8004a24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f7fc f84e 	bl	8000acc <__aeabi_dcmplt>
 8004a30:	3800      	subs	r0, #0
 8004a32:	bf18      	it	ne
 8004a34:	2001      	movne	r0, #1
 8004a36:	e42b      	b.n	8004290 <__ieee754_pow+0x228>
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	f7fb fc1c 	bl	8000278 <__aeabi_dsub>
 8004a40:	4632      	mov	r2, r6
 8004a42:	463b      	mov	r3, r7
 8004a44:	f7fc f856 	bl	8000af4 <__aeabi_dcmpge>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d1eb      	bne.n	8004a24 <__ieee754_pow+0x9bc>
 8004a4c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8004aec <__ieee754_pow+0xa84>
 8004a50:	e6f7      	b.n	8004842 <__ieee754_pow+0x7da>
 8004a52:	469a      	mov	sl, r3
 8004a54:	4b22      	ldr	r3, [pc, #136]	@ (8004ae0 <__ieee754_pow+0xa78>)
 8004a56:	459a      	cmp	sl, r3
 8004a58:	f63f aef3 	bhi.w	8004842 <__ieee754_pow+0x7da>
 8004a5c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004a60:	e715      	b.n	800488e <__ieee754_pow+0x826>
 8004a62:	ec51 0b10 	vmov	r0, r1, d0
 8004a66:	4619      	mov	r1, r3
 8004a68:	e7cf      	b.n	8004a0a <__ieee754_pow+0x9a2>
 8004a6a:	491a      	ldr	r1, [pc, #104]	@ (8004ad4 <__ieee754_pow+0xa6c>)
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f7ff bb18 	b.w	80040a2 <__ieee754_pow+0x3a>
 8004a72:	2000      	movs	r0, #0
 8004a74:	2100      	movs	r1, #0
 8004a76:	f7ff bb14 	b.w	80040a2 <__ieee754_pow+0x3a>
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	f7ff bb10 	b.w	80040a2 <__ieee754_pow+0x3a>
 8004a82:	460c      	mov	r4, r1
 8004a84:	f7ff bb5e 	b.w	8004144 <__ieee754_pow+0xdc>
 8004a88:	2400      	movs	r4, #0
 8004a8a:	f7ff bb49 	b.w	8004120 <__ieee754_pow+0xb8>
 8004a8e:	bf00      	nop
 8004a90:	00000000 	.word	0x00000000
 8004a94:	3fe62e43 	.word	0x3fe62e43
 8004a98:	fefa39ef 	.word	0xfefa39ef
 8004a9c:	3fe62e42 	.word	0x3fe62e42
 8004aa0:	0ca86c39 	.word	0x0ca86c39
 8004aa4:	be205c61 	.word	0xbe205c61
 8004aa8:	72bea4d0 	.word	0x72bea4d0
 8004aac:	3e663769 	.word	0x3e663769
 8004ab0:	c5d26bf1 	.word	0xc5d26bf1
 8004ab4:	3ebbbd41 	.word	0x3ebbbd41
 8004ab8:	af25de2c 	.word	0xaf25de2c
 8004abc:	3f11566a 	.word	0x3f11566a
 8004ac0:	16bebd93 	.word	0x16bebd93
 8004ac4:	3f66c16c 	.word	0x3f66c16c
 8004ac8:	5555553e 	.word	0x5555553e
 8004acc:	3fc55555 	.word	0x3fc55555
 8004ad0:	fff00000 	.word	0xfff00000
 8004ad4:	3ff00000 	.word	0x3ff00000
 8004ad8:	4090cbff 	.word	0x4090cbff
 8004adc:	3f6f3400 	.word	0x3f6f3400
 8004ae0:	3fe00000 	.word	0x3fe00000
 8004ae4:	652b82fe 	.word	0x652b82fe
 8004ae8:	3c971547 	.word	0x3c971547
 8004aec:	4090cc00 	.word	0x4090cc00

08004af0 <fabs>:
 8004af0:	ec51 0b10 	vmov	r0, r1, d0
 8004af4:	4602      	mov	r2, r0
 8004af6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004afa:	ec43 2b10 	vmov	d0, r2, r3
 8004afe:	4770      	bx	lr

08004b00 <scalbn>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	ec55 4b10 	vmov	r4, r5, d0
 8004b06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	b991      	cbnz	r1, 8004b36 <scalbn+0x36>
 8004b10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004b14:	4323      	orrs	r3, r4
 8004b16:	d03d      	beq.n	8004b94 <scalbn+0x94>
 8004b18:	4b35      	ldr	r3, [pc, #212]	@ (8004bf0 <scalbn+0xf0>)
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f7fb fd62 	bl	80005e8 <__aeabi_dmul>
 8004b24:	4b33      	ldr	r3, [pc, #204]	@ (8004bf4 <scalbn+0xf4>)
 8004b26:	429e      	cmp	r6, r3
 8004b28:	4604      	mov	r4, r0
 8004b2a:	460d      	mov	r5, r1
 8004b2c:	da0f      	bge.n	8004b4e <scalbn+0x4e>
 8004b2e:	a328      	add	r3, pc, #160	@ (adr r3, 8004bd0 <scalbn+0xd0>)
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	e01e      	b.n	8004b74 <scalbn+0x74>
 8004b36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004b3a:	4291      	cmp	r1, r2
 8004b3c:	d10b      	bne.n	8004b56 <scalbn+0x56>
 8004b3e:	4622      	mov	r2, r4
 8004b40:	4620      	mov	r0, r4
 8004b42:	4629      	mov	r1, r5
 8004b44:	f7fb fb9a 	bl	800027c <__adddf3>
 8004b48:	4604      	mov	r4, r0
 8004b4a:	460d      	mov	r5, r1
 8004b4c:	e022      	b.n	8004b94 <scalbn+0x94>
 8004b4e:	460b      	mov	r3, r1
 8004b50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004b54:	3936      	subs	r1, #54	@ 0x36
 8004b56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004b5a:	4296      	cmp	r6, r2
 8004b5c:	dd0d      	ble.n	8004b7a <scalbn+0x7a>
 8004b5e:	2d00      	cmp	r5, #0
 8004b60:	a11d      	add	r1, pc, #116	@ (adr r1, 8004bd8 <scalbn+0xd8>)
 8004b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b66:	da02      	bge.n	8004b6e <scalbn+0x6e>
 8004b68:	a11d      	add	r1, pc, #116	@ (adr r1, 8004be0 <scalbn+0xe0>)
 8004b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b6e:	a31a      	add	r3, pc, #104	@ (adr r3, 8004bd8 <scalbn+0xd8>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f7fb fd38 	bl	80005e8 <__aeabi_dmul>
 8004b78:	e7e6      	b.n	8004b48 <scalbn+0x48>
 8004b7a:	1872      	adds	r2, r6, r1
 8004b7c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004b80:	428a      	cmp	r2, r1
 8004b82:	dcec      	bgt.n	8004b5e <scalbn+0x5e>
 8004b84:	2a00      	cmp	r2, #0
 8004b86:	dd08      	ble.n	8004b9a <scalbn+0x9a>
 8004b88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004b8c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004b90:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004b94:	ec45 4b10 	vmov	d0, r4, r5
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004b9e:	da08      	bge.n	8004bb2 <scalbn+0xb2>
 8004ba0:	2d00      	cmp	r5, #0
 8004ba2:	a10b      	add	r1, pc, #44	@ (adr r1, 8004bd0 <scalbn+0xd0>)
 8004ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ba8:	dac1      	bge.n	8004b2e <scalbn+0x2e>
 8004baa:	a10f      	add	r1, pc, #60	@ (adr r1, 8004be8 <scalbn+0xe8>)
 8004bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bb0:	e7bd      	b.n	8004b2e <scalbn+0x2e>
 8004bb2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004bb6:	3236      	adds	r2, #54	@ 0x36
 8004bb8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004bbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <scalbn+0xf8>)
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	e7d4      	b.n	8004b74 <scalbn+0x74>
 8004bca:	bf00      	nop
 8004bcc:	f3af 8000 	nop.w
 8004bd0:	c2f8f359 	.word	0xc2f8f359
 8004bd4:	01a56e1f 	.word	0x01a56e1f
 8004bd8:	8800759c 	.word	0x8800759c
 8004bdc:	7e37e43c 	.word	0x7e37e43c
 8004be0:	8800759c 	.word	0x8800759c
 8004be4:	fe37e43c 	.word	0xfe37e43c
 8004be8:	c2f8f359 	.word	0xc2f8f359
 8004bec:	81a56e1f 	.word	0x81a56e1f
 8004bf0:	43500000 	.word	0x43500000
 8004bf4:	ffff3cb0 	.word	0xffff3cb0
 8004bf8:	3c900000 	.word	0x3c900000

08004bfc <with_errno>:
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	ed2d 8b02 	vpush	{d8}
 8004c02:	eeb0 8a40 	vmov.f32	s16, s0
 8004c06:	eef0 8a60 	vmov.f32	s17, s1
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	f7fe fdf4 	bl	80037f8 <__errno>
 8004c10:	eeb0 0a48 	vmov.f32	s0, s16
 8004c14:	eef0 0a68 	vmov.f32	s1, s17
 8004c18:	ecbd 8b02 	vpop	{d8}
 8004c1c:	6004      	str	r4, [r0, #0]
 8004c1e:	bd10      	pop	{r4, pc}

08004c20 <xflow>:
 8004c20:	4603      	mov	r3, r0
 8004c22:	b507      	push	{r0, r1, r2, lr}
 8004c24:	ec51 0b10 	vmov	r0, r1, d0
 8004c28:	b183      	cbz	r3, 8004c4c <xflow+0x2c>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c30:	e9cd 2300 	strd	r2, r3, [sp]
 8004c34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c38:	f7fb fcd6 	bl	80005e8 <__aeabi_dmul>
 8004c3c:	ec41 0b10 	vmov	d0, r0, r1
 8004c40:	2022      	movs	r0, #34	@ 0x22
 8004c42:	b003      	add	sp, #12
 8004c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c48:	f7ff bfd8 	b.w	8004bfc <with_errno>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	e7ee      	b.n	8004c30 <xflow+0x10>
 8004c52:	0000      	movs	r0, r0
 8004c54:	0000      	movs	r0, r0
	...

08004c58 <__math_uflow>:
 8004c58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004c60 <__math_uflow+0x8>
 8004c5c:	f7ff bfe0 	b.w	8004c20 <xflow>
 8004c60:	00000000 	.word	0x00000000
 8004c64:	10000000 	.word	0x10000000

08004c68 <__math_oflow>:
 8004c68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004c70 <__math_oflow+0x8>
 8004c6c:	f7ff bfd8 	b.w	8004c20 <xflow>
 8004c70:	00000000 	.word	0x00000000
 8004c74:	70000000 	.word	0x70000000

08004c78 <__ieee754_sqrt>:
 8004c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	4a68      	ldr	r2, [pc, #416]	@ (8004e20 <__ieee754_sqrt+0x1a8>)
 8004c7e:	ec55 4b10 	vmov	r4, r5, d0
 8004c82:	43aa      	bics	r2, r5
 8004c84:	462b      	mov	r3, r5
 8004c86:	4621      	mov	r1, r4
 8004c88:	d110      	bne.n	8004cac <__ieee754_sqrt+0x34>
 8004c8a:	4622      	mov	r2, r4
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	4629      	mov	r1, r5
 8004c90:	f7fb fcaa 	bl	80005e8 <__aeabi_dmul>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4620      	mov	r0, r4
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f7fb faee 	bl	800027c <__adddf3>
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	460d      	mov	r5, r1
 8004ca4:	ec45 4b10 	vmov	d0, r4, r5
 8004ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cac:	2d00      	cmp	r5, #0
 8004cae:	dc0e      	bgt.n	8004cce <__ieee754_sqrt+0x56>
 8004cb0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004cb4:	4322      	orrs	r2, r4
 8004cb6:	d0f5      	beq.n	8004ca4 <__ieee754_sqrt+0x2c>
 8004cb8:	b19d      	cbz	r5, 8004ce2 <__ieee754_sqrt+0x6a>
 8004cba:	4622      	mov	r2, r4
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	f7fb fada 	bl	8000278 <__aeabi_dsub>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	f7fb fdb8 	bl	800083c <__aeabi_ddiv>
 8004ccc:	e7e8      	b.n	8004ca0 <__ieee754_sqrt+0x28>
 8004cce:	152a      	asrs	r2, r5, #20
 8004cd0:	d115      	bne.n	8004cfe <__ieee754_sqrt+0x86>
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	e009      	b.n	8004cea <__ieee754_sqrt+0x72>
 8004cd6:	0acb      	lsrs	r3, r1, #11
 8004cd8:	3a15      	subs	r2, #21
 8004cda:	0549      	lsls	r1, r1, #21
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0fa      	beq.n	8004cd6 <__ieee754_sqrt+0x5e>
 8004ce0:	e7f7      	b.n	8004cd2 <__ieee754_sqrt+0x5a>
 8004ce2:	462a      	mov	r2, r5
 8004ce4:	e7fa      	b.n	8004cdc <__ieee754_sqrt+0x64>
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	3001      	adds	r0, #1
 8004cea:	02dc      	lsls	r4, r3, #11
 8004cec:	d5fb      	bpl.n	8004ce6 <__ieee754_sqrt+0x6e>
 8004cee:	1e44      	subs	r4, r0, #1
 8004cf0:	1b12      	subs	r2, r2, r4
 8004cf2:	f1c0 0420 	rsb	r4, r0, #32
 8004cf6:	fa21 f404 	lsr.w	r4, r1, r4
 8004cfa:	4323      	orrs	r3, r4
 8004cfc:	4081      	lsls	r1, r0
 8004cfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d02:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d0a:	07d2      	lsls	r2, r2, #31
 8004d0c:	bf5c      	itt	pl
 8004d0e:	005b      	lslpl	r3, r3, #1
 8004d10:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004d14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d18:	bf58      	it	pl
 8004d1a:	0049      	lslpl	r1, r1, #1
 8004d1c:	2600      	movs	r6, #0
 8004d1e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004d22:	106d      	asrs	r5, r5, #1
 8004d24:	0049      	lsls	r1, r1, #1
 8004d26:	2016      	movs	r0, #22
 8004d28:	4632      	mov	r2, r6
 8004d2a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004d2e:	1917      	adds	r7, r2, r4
 8004d30:	429f      	cmp	r7, r3
 8004d32:	bfde      	ittt	le
 8004d34:	193a      	addle	r2, r7, r4
 8004d36:	1bdb      	suble	r3, r3, r7
 8004d38:	1936      	addle	r6, r6, r4
 8004d3a:	0fcf      	lsrs	r7, r1, #31
 8004d3c:	3801      	subs	r0, #1
 8004d3e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004d42:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004d46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004d4a:	d1f0      	bne.n	8004d2e <__ieee754_sqrt+0xb6>
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	2720      	movs	r7, #32
 8004d50:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004d54:	429a      	cmp	r2, r3
 8004d56:	eb00 0e0c 	add.w	lr, r0, ip
 8004d5a:	db02      	blt.n	8004d62 <__ieee754_sqrt+0xea>
 8004d5c:	d113      	bne.n	8004d86 <__ieee754_sqrt+0x10e>
 8004d5e:	458e      	cmp	lr, r1
 8004d60:	d811      	bhi.n	8004d86 <__ieee754_sqrt+0x10e>
 8004d62:	f1be 0f00 	cmp.w	lr, #0
 8004d66:	eb0e 000c 	add.w	r0, lr, ip
 8004d6a:	da42      	bge.n	8004df2 <__ieee754_sqrt+0x17a>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	db40      	blt.n	8004df2 <__ieee754_sqrt+0x17a>
 8004d70:	f102 0801 	add.w	r8, r2, #1
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	458e      	cmp	lr, r1
 8004d78:	bf88      	it	hi
 8004d7a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004d7e:	eba1 010e 	sub.w	r1, r1, lr
 8004d82:	4464      	add	r4, ip
 8004d84:	4642      	mov	r2, r8
 8004d86:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8004d8a:	3f01      	subs	r7, #1
 8004d8c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004d90:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004d94:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004d98:	d1dc      	bne.n	8004d54 <__ieee754_sqrt+0xdc>
 8004d9a:	4319      	orrs	r1, r3
 8004d9c:	d01b      	beq.n	8004dd6 <__ieee754_sqrt+0x15e>
 8004d9e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004e24 <__ieee754_sqrt+0x1ac>
 8004da2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004e28 <__ieee754_sqrt+0x1b0>
 8004da6:	e9da 0100 	ldrd	r0, r1, [sl]
 8004daa:	e9db 2300 	ldrd	r2, r3, [fp]
 8004dae:	f7fb fa63 	bl	8000278 <__aeabi_dsub>
 8004db2:	e9da 8900 	ldrd	r8, r9, [sl]
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4640      	mov	r0, r8
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	f7fb fe8f 	bl	8000ae0 <__aeabi_dcmple>
 8004dc2:	b140      	cbz	r0, 8004dd6 <__ieee754_sqrt+0x15e>
 8004dc4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004dc8:	e9da 0100 	ldrd	r0, r1, [sl]
 8004dcc:	e9db 2300 	ldrd	r2, r3, [fp]
 8004dd0:	d111      	bne.n	8004df6 <__ieee754_sqrt+0x17e>
 8004dd2:	3601      	adds	r6, #1
 8004dd4:	463c      	mov	r4, r7
 8004dd6:	1072      	asrs	r2, r6, #1
 8004dd8:	0863      	lsrs	r3, r4, #1
 8004dda:	07f1      	lsls	r1, r6, #31
 8004ddc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004de0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004de4:	bf48      	it	mi
 8004de6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004dea:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004dee:	4618      	mov	r0, r3
 8004df0:	e756      	b.n	8004ca0 <__ieee754_sqrt+0x28>
 8004df2:	4690      	mov	r8, r2
 8004df4:	e7be      	b.n	8004d74 <__ieee754_sqrt+0xfc>
 8004df6:	f7fb fa41 	bl	800027c <__adddf3>
 8004dfa:	e9da 8900 	ldrd	r8, r9, [sl]
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4640      	mov	r0, r8
 8004e04:	4649      	mov	r1, r9
 8004e06:	f7fb fe61 	bl	8000acc <__aeabi_dcmplt>
 8004e0a:	b120      	cbz	r0, 8004e16 <__ieee754_sqrt+0x19e>
 8004e0c:	1ca0      	adds	r0, r4, #2
 8004e0e:	bf08      	it	eq
 8004e10:	3601      	addeq	r6, #1
 8004e12:	3402      	adds	r4, #2
 8004e14:	e7df      	b.n	8004dd6 <__ieee754_sqrt+0x15e>
 8004e16:	1c63      	adds	r3, r4, #1
 8004e18:	f023 0401 	bic.w	r4, r3, #1
 8004e1c:	e7db      	b.n	8004dd6 <__ieee754_sqrt+0x15e>
 8004e1e:	bf00      	nop
 8004e20:	7ff00000 	.word	0x7ff00000
 8004e24:	20000070 	.word	0x20000070
 8004e28:	20000068 	.word	0x20000068

08004e2c <_init>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr

08004e38 <_fini>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	bf00      	nop
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr
